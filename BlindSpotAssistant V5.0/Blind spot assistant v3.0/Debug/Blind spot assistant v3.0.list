
Blind spot assistant v3.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004acc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08004c6c  08004c6c  00014c6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d0c  08004d0c  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08004d0c  08004d0c  00014d0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004d14  08004d14  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d14  08004d14  00014d14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004d18  08004d18  00014d18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08004d1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004114  20000014  08004d30  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004128  08004d30  00024128  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011768  00000000  00000000  00020087  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000293f  00000000  00000000  000317ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001090  00000000  00000000  00034130  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ce9  00000000  00000000  000351c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000170b7  00000000  00000000  00035ea9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001240a  00000000  00000000  0004cf60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00095154  00000000  00000000  0005f36a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000044e8  00000000  00000000  000f44c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000f89a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000014 	.word	0x20000014
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004c54 	.word	0x08004c54

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000018 	.word	0x20000018
 80001dc:	08004c54 	.word	0x08004c54

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b970 	b.w	80004d8 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	460d      	mov	r5, r1
 8000218:	4604      	mov	r4, r0
 800021a:	460f      	mov	r7, r1
 800021c:	2b00      	cmp	r3, #0
 800021e:	d14a      	bne.n	80002b6 <__udivmoddi4+0xa6>
 8000220:	428a      	cmp	r2, r1
 8000222:	4694      	mov	ip, r2
 8000224:	d965      	bls.n	80002f2 <__udivmoddi4+0xe2>
 8000226:	fab2 f382 	clz	r3, r2
 800022a:	b143      	cbz	r3, 800023e <__udivmoddi4+0x2e>
 800022c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000230:	f1c3 0220 	rsb	r2, r3, #32
 8000234:	409f      	lsls	r7, r3
 8000236:	fa20 f202 	lsr.w	r2, r0, r2
 800023a:	4317      	orrs	r7, r2
 800023c:	409c      	lsls	r4, r3
 800023e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000242:	fa1f f58c 	uxth.w	r5, ip
 8000246:	fbb7 f1fe 	udiv	r1, r7, lr
 800024a:	0c22      	lsrs	r2, r4, #16
 800024c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000250:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000254:	fb01 f005 	mul.w	r0, r1, r5
 8000258:	4290      	cmp	r0, r2
 800025a:	d90a      	bls.n	8000272 <__udivmoddi4+0x62>
 800025c:	eb1c 0202 	adds.w	r2, ip, r2
 8000260:	f101 37ff 	add.w	r7, r1, #4294967295
 8000264:	f080 811c 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000268:	4290      	cmp	r0, r2
 800026a:	f240 8119 	bls.w	80004a0 <__udivmoddi4+0x290>
 800026e:	3902      	subs	r1, #2
 8000270:	4462      	add	r2, ip
 8000272:	1a12      	subs	r2, r2, r0
 8000274:	b2a4      	uxth	r4, r4
 8000276:	fbb2 f0fe 	udiv	r0, r2, lr
 800027a:	fb0e 2210 	mls	r2, lr, r0, r2
 800027e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000282:	fb00 f505 	mul.w	r5, r0, r5
 8000286:	42a5      	cmp	r5, r4
 8000288:	d90a      	bls.n	80002a0 <__udivmoddi4+0x90>
 800028a:	eb1c 0404 	adds.w	r4, ip, r4
 800028e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000292:	f080 8107 	bcs.w	80004a4 <__udivmoddi4+0x294>
 8000296:	42a5      	cmp	r5, r4
 8000298:	f240 8104 	bls.w	80004a4 <__udivmoddi4+0x294>
 800029c:	4464      	add	r4, ip
 800029e:	3802      	subs	r0, #2
 80002a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002a4:	1b64      	subs	r4, r4, r5
 80002a6:	2100      	movs	r1, #0
 80002a8:	b11e      	cbz	r6, 80002b2 <__udivmoddi4+0xa2>
 80002aa:	40dc      	lsrs	r4, r3
 80002ac:	2300      	movs	r3, #0
 80002ae:	e9c6 4300 	strd	r4, r3, [r6]
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d908      	bls.n	80002cc <__udivmoddi4+0xbc>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80ed 	beq.w	800049a <__udivmoddi4+0x28a>
 80002c0:	2100      	movs	r1, #0
 80002c2:	e9c6 0500 	strd	r0, r5, [r6]
 80002c6:	4608      	mov	r0, r1
 80002c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002cc:	fab3 f183 	clz	r1, r3
 80002d0:	2900      	cmp	r1, #0
 80002d2:	d149      	bne.n	8000368 <__udivmoddi4+0x158>
 80002d4:	42ab      	cmp	r3, r5
 80002d6:	d302      	bcc.n	80002de <__udivmoddi4+0xce>
 80002d8:	4282      	cmp	r2, r0
 80002da:	f200 80f8 	bhi.w	80004ce <__udivmoddi4+0x2be>
 80002de:	1a84      	subs	r4, r0, r2
 80002e0:	eb65 0203 	sbc.w	r2, r5, r3
 80002e4:	2001      	movs	r0, #1
 80002e6:	4617      	mov	r7, r2
 80002e8:	2e00      	cmp	r6, #0
 80002ea:	d0e2      	beq.n	80002b2 <__udivmoddi4+0xa2>
 80002ec:	e9c6 4700 	strd	r4, r7, [r6]
 80002f0:	e7df      	b.n	80002b2 <__udivmoddi4+0xa2>
 80002f2:	b902      	cbnz	r2, 80002f6 <__udivmoddi4+0xe6>
 80002f4:	deff      	udf	#255	; 0xff
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x210>
 8000300:	1a8a      	subs	r2, r1, r2
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2101      	movs	r1, #1
 800030c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000310:	fb07 2015 	mls	r0, r7, r5, r2
 8000314:	0c22      	lsrs	r2, r4, #16
 8000316:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800031a:	fb0e f005 	mul.w	r0, lr, r5
 800031e:	4290      	cmp	r0, r2
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x124>
 8000322:	eb1c 0202 	adds.w	r2, ip, r2
 8000326:	f105 38ff 	add.w	r8, r5, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4290      	cmp	r0, r2
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2b8>
 8000332:	4645      	mov	r5, r8
 8000334:	1a12      	subs	r2, r2, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb2 f0f7 	udiv	r0, r2, r7
 800033c:	fb07 2210 	mls	r2, r7, r0, r2
 8000340:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x14e>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 32ff 	add.w	r2, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x14c>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2c2>
 800035c:	4610      	mov	r0, r2
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000366:	e79f      	b.n	80002a8 <__udivmoddi4+0x98>
 8000368:	f1c1 0720 	rsb	r7, r1, #32
 800036c:	408b      	lsls	r3, r1
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa05 f401 	lsl.w	r4, r5, r1
 800037a:	fa20 f307 	lsr.w	r3, r0, r7
 800037e:	40fd      	lsrs	r5, r7
 8000380:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000384:	4323      	orrs	r3, r4
 8000386:	fbb5 f8f9 	udiv	r8, r5, r9
 800038a:	fa1f fe8c 	uxth.w	lr, ip
 800038e:	fb09 5518 	mls	r5, r9, r8, r5
 8000392:	0c1c      	lsrs	r4, r3, #16
 8000394:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000398:	fb08 f50e 	mul.w	r5, r8, lr
 800039c:	42a5      	cmp	r5, r4
 800039e:	fa02 f201 	lsl.w	r2, r2, r1
 80003a2:	fa00 f001 	lsl.w	r0, r0, r1
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2b4>
 80003b4:	42a5      	cmp	r5, r4
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2b4>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4464      	add	r4, ip
 80003c0:	1b64      	subs	r4, r4, r5
 80003c2:	b29d      	uxth	r5, r3
 80003c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c8:	fb09 4413 	mls	r4, r9, r3, r4
 80003cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f103 35ff 	add.w	r5, r3, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2ac>
 80003e2:	45a6      	cmp	lr, r4
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2ac>
 80003e6:	3b02      	subs	r3, #2
 80003e8:	4464      	add	r4, ip
 80003ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003ee:	fba3 9502 	umull	r9, r5, r3, r2
 80003f2:	eba4 040e 	sub.w	r4, r4, lr
 80003f6:	42ac      	cmp	r4, r5
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46ae      	mov	lr, r5
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x29c>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x298>
 8000400:	b156      	cbz	r6, 8000418 <__udivmoddi4+0x208>
 8000402:	ebb0 0208 	subs.w	r2, r0, r8
 8000406:	eb64 040e 	sbc.w	r4, r4, lr
 800040a:	fa04 f707 	lsl.w	r7, r4, r7
 800040e:	40ca      	lsrs	r2, r1
 8000410:	40cc      	lsrs	r4, r1
 8000412:	4317      	orrs	r7, r2
 8000414:	e9c6 7400 	strd	r7, r4, [r6]
 8000418:	4618      	mov	r0, r3
 800041a:	2100      	movs	r1, #0
 800041c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000420:	f1c3 0120 	rsb	r1, r3, #32
 8000424:	fa02 fc03 	lsl.w	ip, r2, r3
 8000428:	fa20 f201 	lsr.w	r2, r0, r1
 800042c:	fa25 f101 	lsr.w	r1, r5, r1
 8000430:	409d      	lsls	r5, r3
 8000432:	432a      	orrs	r2, r5
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000440:	fb07 1510 	mls	r5, r7, r0, r1
 8000444:	0c11      	lsrs	r1, r2, #16
 8000446:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800044a:	fb00 f50e 	mul.w	r5, r0, lr
 800044e:	428d      	cmp	r5, r1
 8000450:	fa04 f403 	lsl.w	r4, r4, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x258>
 8000456:	eb1c 0101 	adds.w	r1, ip, r1
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000460:	428d      	cmp	r5, r1
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000464:	3802      	subs	r0, #2
 8000466:	4461      	add	r1, ip
 8000468:	1b49      	subs	r1, r1, r5
 800046a:	b292      	uxth	r2, r2
 800046c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000470:	fb07 1115 	mls	r1, r7, r5, r1
 8000474:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000478:	fb05 f10e 	mul.w	r1, r5, lr
 800047c:	4291      	cmp	r1, r2
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x282>
 8000480:	eb1c 0202 	adds.w	r2, ip, r2
 8000484:	f105 38ff 	add.w	r8, r5, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2a8>
 800048a:	4291      	cmp	r1, r2
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2a8>
 800048e:	3d02      	subs	r5, #2
 8000490:	4462      	add	r2, ip
 8000492:	1a52      	subs	r2, r2, r1
 8000494:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0xfc>
 800049a:	4631      	mov	r1, r6
 800049c:	4630      	mov	r0, r6
 800049e:	e708      	b.n	80002b2 <__udivmoddi4+0xa2>
 80004a0:	4639      	mov	r1, r7
 80004a2:	e6e6      	b.n	8000272 <__udivmoddi4+0x62>
 80004a4:	4610      	mov	r0, r2
 80004a6:	e6fb      	b.n	80002a0 <__udivmoddi4+0x90>
 80004a8:	4548      	cmp	r0, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004b4:	3b01      	subs	r3, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b8:	4645      	mov	r5, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x282>
 80004bc:	462b      	mov	r3, r5
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1da>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x258>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c8:	3d02      	subs	r5, #2
 80004ca:	4462      	add	r2, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x124>
 80004ce:	4608      	mov	r0, r1
 80004d0:	e70a      	b.n	80002e8 <__udivmoddi4+0xd8>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x14e>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004dc:	b480      	push	{r7}
 80004de:	b085      	sub	sp, #20
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	60f8      	str	r0, [r7, #12]
 80004e4:	60b9      	str	r1, [r7, #8]
 80004e6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004e8:	68fb      	ldr	r3, [r7, #12]
 80004ea:	4a07      	ldr	r2, [pc, #28]	; (8000508 <vApplicationGetIdleTaskMemory+0x2c>)
 80004ec:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004ee:	68bb      	ldr	r3, [r7, #8]
 80004f0:	4a06      	ldr	r2, [pc, #24]	; (800050c <vApplicationGetIdleTaskMemory+0x30>)
 80004f2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	2280      	movs	r2, #128	; 0x80
 80004f8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004fa:	bf00      	nop
 80004fc:	3714      	adds	r7, #20
 80004fe:	46bd      	mov	sp, r7
 8000500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop
 8000508:	20000030 	.word	0x20000030
 800050c:	20000084 	.word	0x20000084

08000510 <HAL_TIM_IC_CaptureCallback>:



//ISR for timer ICU
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b082      	sub	sp, #8
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
	// checking on timer ICU interrupt source if TIM2 or TIM 5
	if (htim->Instance == TIM2)
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000520:	d169      	bne.n	80005f6 <HAL_TIM_IC_CaptureCallback+0xe6>
	{
		// Check if the callback is triggered by the correct timer (TIMx)
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	7f1b      	ldrb	r3, [r3, #28]
 8000526:	2b01      	cmp	r3, #1
 8000528:	d165      	bne.n	80005f6 <HAL_TIM_IC_CaptureCallback+0xe6>
		{
			if (flag_timer2==0)
 800052a:	4b6c      	ldr	r3, [pc, #432]	; (80006dc <HAL_TIM_IC_CaptureCallback+0x1cc>)
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	2b00      	cmp	r3, #0
 8000530:	d10d      	bne.n	800054e <HAL_TIM_IC_CaptureCallback+0x3e>
			{
				t1_timer2=HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000532:	2100      	movs	r1, #0
 8000534:	6878      	ldr	r0, [r7, #4]
 8000536:	f002 fa25 	bl	8002984 <HAL_TIM_ReadCapturedValue>
 800053a:	4603      	mov	r3, r0
 800053c:	461a      	mov	r2, r3
 800053e:	4b68      	ldr	r3, [pc, #416]	; (80006e0 <HAL_TIM_IC_CaptureCallback+0x1d0>)
 8000540:	601a      	str	r2, [r3, #0]

				flag_timer2++;
 8000542:	4b66      	ldr	r3, [pc, #408]	; (80006dc <HAL_TIM_IC_CaptureCallback+0x1cc>)
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	3301      	adds	r3, #1
 8000548:	4a64      	ldr	r2, [pc, #400]	; (80006dc <HAL_TIM_IC_CaptureCallback+0x1cc>)
 800054a:	6013      	str	r3, [r2, #0]
 800054c:	e053      	b.n	80005f6 <HAL_TIM_IC_CaptureCallback+0xe6>
			}
			else if(flag_timer2==1)
 800054e:	4b63      	ldr	r3, [pc, #396]	; (80006dc <HAL_TIM_IC_CaptureCallback+0x1cc>)
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	2b01      	cmp	r3, #1
 8000554:	d14f      	bne.n	80005f6 <HAL_TIM_IC_CaptureCallback+0xe6>
			{
				t2_timer2=HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000556:	2100      	movs	r1, #0
 8000558:	6878      	ldr	r0, [r7, #4]
 800055a:	f002 fa13 	bl	8002984 <HAL_TIM_ReadCapturedValue>
 800055e:	4603      	mov	r3, r0
 8000560:	461a      	mov	r2, r3
 8000562:	4b60      	ldr	r3, [pc, #384]	; (80006e4 <HAL_TIM_IC_CaptureCallback+0x1d4>)
 8000564:	601a      	str	r2, [r3, #0]
				if(t2_timer2>t1_timer2)
 8000566:	4b5f      	ldr	r3, [pc, #380]	; (80006e4 <HAL_TIM_IC_CaptureCallback+0x1d4>)
 8000568:	681a      	ldr	r2, [r3, #0]
 800056a:	4b5d      	ldr	r3, [pc, #372]	; (80006e0 <HAL_TIM_IC_CaptureCallback+0x1d0>)
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	429a      	cmp	r2, r3
 8000570:	dd07      	ble.n	8000582 <HAL_TIM_IC_CaptureCallback+0x72>
				{
					time_timer2=t2_timer2-t1_timer2;
 8000572:	4b5c      	ldr	r3, [pc, #368]	; (80006e4 <HAL_TIM_IC_CaptureCallback+0x1d4>)
 8000574:	681a      	ldr	r2, [r3, #0]
 8000576:	4b5a      	ldr	r3, [pc, #360]	; (80006e0 <HAL_TIM_IC_CaptureCallback+0x1d0>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	1ad3      	subs	r3, r2, r3
 800057c:	4a5a      	ldr	r2, [pc, #360]	; (80006e8 <HAL_TIM_IC_CaptureCallback+0x1d8>)
 800057e:	6013      	str	r3, [r2, #0]
 8000580:	e010      	b.n	80005a4 <HAL_TIM_IC_CaptureCallback+0x94>
				}
				else if(t1_timer2>t2_timer2)
 8000582:	4b57      	ldr	r3, [pc, #348]	; (80006e0 <HAL_TIM_IC_CaptureCallback+0x1d0>)
 8000584:	681a      	ldr	r2, [r3, #0]
 8000586:	4b57      	ldr	r3, [pc, #348]	; (80006e4 <HAL_TIM_IC_CaptureCallback+0x1d4>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	429a      	cmp	r2, r3
 800058c:	dd0a      	ble.n	80005a4 <HAL_TIM_IC_CaptureCallback+0x94>
				{
					time_timer2 = ((0xffff-t1_timer2)+t2_timer2)+1;
 800058e:	4b54      	ldr	r3, [pc, #336]	; (80006e0 <HAL_TIM_IC_CaptureCallback+0x1d0>)
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8000596:	33ff      	adds	r3, #255	; 0xff
 8000598:	4a52      	ldr	r2, [pc, #328]	; (80006e4 <HAL_TIM_IC_CaptureCallback+0x1d4>)
 800059a:	6812      	ldr	r2, [r2, #0]
 800059c:	4413      	add	r3, r2
 800059e:	3301      	adds	r3, #1
 80005a0:	4a51      	ldr	r2, [pc, #324]	; (80006e8 <HAL_TIM_IC_CaptureCallback+0x1d8>)
 80005a2:	6013      	str	r3, [r2, #0]
				}
				distance_u1=(((int)time_timer2*340*100)/((int)2*1000000))+1;
 80005a4:	4b50      	ldr	r3, [pc, #320]	; (80006e8 <HAL_TIM_IC_CaptureCallback+0x1d8>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	f248 42d0 	movw	r2, #34000	; 0x84d0
 80005ac:	fb02 f303 	mul.w	r3, r2, r3
 80005b0:	4a4e      	ldr	r2, [pc, #312]	; (80006ec <HAL_TIM_IC_CaptureCallback+0x1dc>)
 80005b2:	fb82 1203 	smull	r1, r2, r2, r3
 80005b6:	14d2      	asrs	r2, r2, #19
 80005b8:	17db      	asrs	r3, r3, #31
 80005ba:	1ad3      	subs	r3, r2, r3
 80005bc:	b29b      	uxth	r3, r3
 80005be:	3301      	adds	r3, #1
 80005c0:	b29a      	uxth	r2, r3
 80005c2:	4b4b      	ldr	r3, [pc, #300]	; (80006f0 <HAL_TIM_IC_CaptureCallback+0x1e0>)
 80005c4:	801a      	strh	r2, [r3, #0]

				// Ensure that the distance is within the range (0 to 50 cm)
				if (distance_u1 > 500)
 80005c6:	4b4a      	ldr	r3, [pc, #296]	; (80006f0 <HAL_TIM_IC_CaptureCallback+0x1e0>)
 80005c8:	881b      	ldrh	r3, [r3, #0]
 80005ca:	b29b      	uxth	r3, r3
 80005cc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80005d0:	d904      	bls.n	80005dc <HAL_TIM_IC_CaptureCallback+0xcc>
				{
					distance_u1 = 500;
 80005d2:	4b47      	ldr	r3, [pc, #284]	; (80006f0 <HAL_TIM_IC_CaptureCallback+0x1e0>)
 80005d4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80005d8:	801a      	strh	r2, [r3, #0]
 80005da:	e001      	b.n	80005e0 <HAL_TIM_IC_CaptureCallback+0xd0>
				}
				else if (distance_u1<0)
 80005dc:	4b44      	ldr	r3, [pc, #272]	; (80006f0 <HAL_TIM_IC_CaptureCallback+0x1e0>)
 80005de:	881b      	ldrh	r3, [r3, #0]
				{
					distance_u1=0;
				}
				flag_timer2=0;
 80005e0:	4b3e      	ldr	r3, [pc, #248]	; (80006dc <HAL_TIM_IC_CaptureCallback+0x1cc>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	601a      	str	r2, [r3, #0]
				HAL_TIM_IC_Stop_IT(&htim2, TIM_CHANNEL_1); //disable timer 2
 80005e6:	2100      	movs	r1, #0
 80005e8:	4842      	ldr	r0, [pc, #264]	; (80006f4 <HAL_TIM_IC_CaptureCallback+0x1e4>)
 80005ea:	f001 feb1 	bl	8002350 <HAL_TIM_IC_Stop_IT>
				HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_4); // enable timer5
 80005ee:	210c      	movs	r1, #12
 80005f0:	4841      	ldr	r0, [pc, #260]	; (80006f8 <HAL_TIM_IC_CaptureCallback+0x1e8>)
 80005f2:	f001 fd93 	bl	800211c <HAL_TIM_IC_Start_IT>
			}

		}
	}

	if (htim->Instance == TIM5)
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	4a40      	ldr	r2, [pc, #256]	; (80006fc <HAL_TIM_IC_CaptureCallback+0x1ec>)
 80005fc:	4293      	cmp	r3, r2
 80005fe:	d169      	bne.n	80006d4 <HAL_TIM_IC_CaptureCallback+0x1c4>
	{
		// Check if the callback is triggered by the correct timer (TIMx)
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4)
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	7f1b      	ldrb	r3, [r3, #28]
 8000604:	2b08      	cmp	r3, #8
 8000606:	d165      	bne.n	80006d4 <HAL_TIM_IC_CaptureCallback+0x1c4>
		{
			if (flag_timer5==0)
 8000608:	4b3d      	ldr	r3, [pc, #244]	; (8000700 <HAL_TIM_IC_CaptureCallback+0x1f0>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	2b00      	cmp	r3, #0
 800060e:	d10d      	bne.n	800062c <HAL_TIM_IC_CaptureCallback+0x11c>
			{
				t1_timer5=HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_4);
 8000610:	210c      	movs	r1, #12
 8000612:	6878      	ldr	r0, [r7, #4]
 8000614:	f002 f9b6 	bl	8002984 <HAL_TIM_ReadCapturedValue>
 8000618:	4603      	mov	r3, r0
 800061a:	461a      	mov	r2, r3
 800061c:	4b39      	ldr	r3, [pc, #228]	; (8000704 <HAL_TIM_IC_CaptureCallback+0x1f4>)
 800061e:	601a      	str	r2, [r3, #0]

				flag_timer5++;
 8000620:	4b37      	ldr	r3, [pc, #220]	; (8000700 <HAL_TIM_IC_CaptureCallback+0x1f0>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	3301      	adds	r3, #1
 8000626:	4a36      	ldr	r2, [pc, #216]	; (8000700 <HAL_TIM_IC_CaptureCallback+0x1f0>)
 8000628:	6013      	str	r3, [r2, #0]
				HAL_TIM_IC_Stop_IT(&htim5, TIM_CHANNEL_4); //disable timer 2
				HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1); // enable timer5
			}
		}
	}
}
 800062a:	e053      	b.n	80006d4 <HAL_TIM_IC_CaptureCallback+0x1c4>
			else if(flag_timer5==1)
 800062c:	4b34      	ldr	r3, [pc, #208]	; (8000700 <HAL_TIM_IC_CaptureCallback+0x1f0>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	2b01      	cmp	r3, #1
 8000632:	d14f      	bne.n	80006d4 <HAL_TIM_IC_CaptureCallback+0x1c4>
				t2_timer5=HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_4);
 8000634:	210c      	movs	r1, #12
 8000636:	6878      	ldr	r0, [r7, #4]
 8000638:	f002 f9a4 	bl	8002984 <HAL_TIM_ReadCapturedValue>
 800063c:	4603      	mov	r3, r0
 800063e:	461a      	mov	r2, r3
 8000640:	4b31      	ldr	r3, [pc, #196]	; (8000708 <HAL_TIM_IC_CaptureCallback+0x1f8>)
 8000642:	601a      	str	r2, [r3, #0]
				if(t2_timer5>t1_timer5)
 8000644:	4b30      	ldr	r3, [pc, #192]	; (8000708 <HAL_TIM_IC_CaptureCallback+0x1f8>)
 8000646:	681a      	ldr	r2, [r3, #0]
 8000648:	4b2e      	ldr	r3, [pc, #184]	; (8000704 <HAL_TIM_IC_CaptureCallback+0x1f4>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	429a      	cmp	r2, r3
 800064e:	dd07      	ble.n	8000660 <HAL_TIM_IC_CaptureCallback+0x150>
					time_timer5=t2_timer5-t1_timer5;
 8000650:	4b2d      	ldr	r3, [pc, #180]	; (8000708 <HAL_TIM_IC_CaptureCallback+0x1f8>)
 8000652:	681a      	ldr	r2, [r3, #0]
 8000654:	4b2b      	ldr	r3, [pc, #172]	; (8000704 <HAL_TIM_IC_CaptureCallback+0x1f4>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	1ad3      	subs	r3, r2, r3
 800065a:	4a2c      	ldr	r2, [pc, #176]	; (800070c <HAL_TIM_IC_CaptureCallback+0x1fc>)
 800065c:	6013      	str	r3, [r2, #0]
 800065e:	e010      	b.n	8000682 <HAL_TIM_IC_CaptureCallback+0x172>
				else if(t1_timer5>t2_timer5)
 8000660:	4b28      	ldr	r3, [pc, #160]	; (8000704 <HAL_TIM_IC_CaptureCallback+0x1f4>)
 8000662:	681a      	ldr	r2, [r3, #0]
 8000664:	4b28      	ldr	r3, [pc, #160]	; (8000708 <HAL_TIM_IC_CaptureCallback+0x1f8>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	429a      	cmp	r2, r3
 800066a:	dd0a      	ble.n	8000682 <HAL_TIM_IC_CaptureCallback+0x172>
					time_timer5 = ((0xffff-t1_timer5)+t2_timer5)+1;
 800066c:	4b25      	ldr	r3, [pc, #148]	; (8000704 <HAL_TIM_IC_CaptureCallback+0x1f4>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8000674:	33ff      	adds	r3, #255	; 0xff
 8000676:	4a24      	ldr	r2, [pc, #144]	; (8000708 <HAL_TIM_IC_CaptureCallback+0x1f8>)
 8000678:	6812      	ldr	r2, [r2, #0]
 800067a:	4413      	add	r3, r2
 800067c:	3301      	adds	r3, #1
 800067e:	4a23      	ldr	r2, [pc, #140]	; (800070c <HAL_TIM_IC_CaptureCallback+0x1fc>)
 8000680:	6013      	str	r3, [r2, #0]
				distance_u2=(((int)time_timer5*340*100)/((int)2*1000000))+1;
 8000682:	4b22      	ldr	r3, [pc, #136]	; (800070c <HAL_TIM_IC_CaptureCallback+0x1fc>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	f248 42d0 	movw	r2, #34000	; 0x84d0
 800068a:	fb02 f303 	mul.w	r3, r2, r3
 800068e:	4a17      	ldr	r2, [pc, #92]	; (80006ec <HAL_TIM_IC_CaptureCallback+0x1dc>)
 8000690:	fb82 1203 	smull	r1, r2, r2, r3
 8000694:	14d2      	asrs	r2, r2, #19
 8000696:	17db      	asrs	r3, r3, #31
 8000698:	1ad3      	subs	r3, r2, r3
 800069a:	b29b      	uxth	r3, r3
 800069c:	3301      	adds	r3, #1
 800069e:	b29a      	uxth	r2, r3
 80006a0:	4b1b      	ldr	r3, [pc, #108]	; (8000710 <HAL_TIM_IC_CaptureCallback+0x200>)
 80006a2:	801a      	strh	r2, [r3, #0]
				if (distance_u2 > 500)
 80006a4:	4b1a      	ldr	r3, [pc, #104]	; (8000710 <HAL_TIM_IC_CaptureCallback+0x200>)
 80006a6:	881b      	ldrh	r3, [r3, #0]
 80006a8:	b29b      	uxth	r3, r3
 80006aa:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80006ae:	d904      	bls.n	80006ba <HAL_TIM_IC_CaptureCallback+0x1aa>
					distance_u2 = 500;
 80006b0:	4b17      	ldr	r3, [pc, #92]	; (8000710 <HAL_TIM_IC_CaptureCallback+0x200>)
 80006b2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80006b6:	801a      	strh	r2, [r3, #0]
 80006b8:	e001      	b.n	80006be <HAL_TIM_IC_CaptureCallback+0x1ae>
				else if (distance_u2<0)
 80006ba:	4b15      	ldr	r3, [pc, #84]	; (8000710 <HAL_TIM_IC_CaptureCallback+0x200>)
 80006bc:	881b      	ldrh	r3, [r3, #0]
				flag_timer5=0;
 80006be:	4b10      	ldr	r3, [pc, #64]	; (8000700 <HAL_TIM_IC_CaptureCallback+0x1f0>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	601a      	str	r2, [r3, #0]
				HAL_TIM_IC_Stop_IT(&htim5, TIM_CHANNEL_4); //disable timer 2
 80006c4:	210c      	movs	r1, #12
 80006c6:	480c      	ldr	r0, [pc, #48]	; (80006f8 <HAL_TIM_IC_CaptureCallback+0x1e8>)
 80006c8:	f001 fe42 	bl	8002350 <HAL_TIM_IC_Stop_IT>
				HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1); // enable timer5
 80006cc:	2100      	movs	r1, #0
 80006ce:	4809      	ldr	r0, [pc, #36]	; (80006f4 <HAL_TIM_IC_CaptureCallback+0x1e4>)
 80006d0:	f001 fd24 	bl	800211c <HAL_TIM_IC_Start_IT>
}
 80006d4:	bf00      	nop
 80006d6:	3708      	adds	r7, #8
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	20000368 	.word	0x20000368
 80006e0:	2000036c 	.word	0x2000036c
 80006e4:	20000370 	.word	0x20000370
 80006e8:	20000374 	.word	0x20000374
 80006ec:	431bde83 	.word	0x431bde83
 80006f0:	20000364 	.word	0x20000364
 80006f4:	20000284 	.word	0x20000284
 80006f8:	200002cc 	.word	0x200002cc
 80006fc:	40000c00 	.word	0x40000c00
 8000700:	20000378 	.word	0x20000378
 8000704:	2000037c 	.word	0x2000037c
 8000708:	20000380 	.word	0x20000380
 800070c:	20000384 	.word	0x20000384
 8000710:	20000366 	.word	0x20000366

08000714 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000714:	b5b0      	push	{r4, r5, r7, lr}
 8000716:	b096      	sub	sp, #88	; 0x58
 8000718:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800071a:	f000 fca7 	bl	800106c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800071e:	f000 f851 	bl	80007c4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000722:	f000 f9bb 	bl	8000a9c <MX_GPIO_Init>
	MX_TIM2_Init();
 8000726:	f000 f8af 	bl	8000888 <MX_TIM2_Init>
	MX_TIM5_Init();
 800072a:	f000 f91d 	bl	8000968 <MX_TIM5_Init>
	MX_USART1_UART_Init();
 800072e:	f000 f98b 	bl	8000a48 <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */
	EnableUltrasonic_1_TimerInterrutp();
 8000732:	f000 fa0b 	bl	8000b4c <EnableUltrasonic_1_TimerInterrutp>
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* definition and creation of trigSonic1_Task */
	osThreadDef(trigSonic1_Task, triggerUltrasonic_1_Handeler, osPriorityNormal, 0, 128);
 8000736:	4b1d      	ldr	r3, [pc, #116]	; (80007ac <main+0x98>)
 8000738:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 800073c:	461d      	mov	r5, r3
 800073e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000740:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000742:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000746:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	trigSonic1_TaskHandle = osThreadCreate(osThread(trigSonic1_Task), NULL);
 800074a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800074e:	2100      	movs	r1, #0
 8000750:	4618      	mov	r0, r3
 8000752:	f003 f83a 	bl	80037ca <osThreadCreate>
 8000756:	4603      	mov	r3, r0
 8000758:	4a15      	ldr	r2, [pc, #84]	; (80007b0 <main+0x9c>)
 800075a:	6013      	str	r3, [r2, #0]

	/* definition and creation of trigSonic2_Task */
	osThreadDef(trigSonic2_Task, triggerUltrasonic_2_Handeler, osPriorityNormal, 0, 128);
 800075c:	4b15      	ldr	r3, [pc, #84]	; (80007b4 <main+0xa0>)
 800075e:	f107 0420 	add.w	r4, r7, #32
 8000762:	461d      	mov	r5, r3
 8000764:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000766:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000768:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800076c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	trigSonic2_TaskHandle = osThreadCreate(osThread(trigSonic2_Task), NULL);
 8000770:	f107 0320 	add.w	r3, r7, #32
 8000774:	2100      	movs	r1, #0
 8000776:	4618      	mov	r0, r3
 8000778:	f003 f827 	bl	80037ca <osThreadCreate>
 800077c:	4603      	mov	r3, r0
 800077e:	4a0e      	ldr	r2, [pc, #56]	; (80007b8 <main+0xa4>)
 8000780:	6013      	str	r3, [r2, #0]

	/* definition and creation of LEDS_Task */
	osThreadDef(LEDS_Task, indecateOnLED_Handeler, osPriorityNormal, 0, 128);
 8000782:	4b0e      	ldr	r3, [pc, #56]	; (80007bc <main+0xa8>)
 8000784:	1d3c      	adds	r4, r7, #4
 8000786:	461d      	mov	r5, r3
 8000788:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800078a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800078c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000790:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	LEDS_TaskHandle = osThreadCreate(osThread(LEDS_Task), NULL);
 8000794:	1d3b      	adds	r3, r7, #4
 8000796:	2100      	movs	r1, #0
 8000798:	4618      	mov	r0, r3
 800079a:	f003 f816 	bl	80037ca <osThreadCreate>
 800079e:	4603      	mov	r3, r0
 80007a0:	4a07      	ldr	r2, [pc, #28]	; (80007c0 <main+0xac>)
 80007a2:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

	/* Start scheduler */
	osKernelStart();
 80007a4:	f003 f80a 	bl	80037bc <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 80007a8:	e7fe      	b.n	80007a8 <main+0x94>
 80007aa:	bf00      	nop
 80007ac:	08004c7c 	.word	0x08004c7c
 80007b0:	20000358 	.word	0x20000358
 80007b4:	08004ca8 	.word	0x08004ca8
 80007b8:	2000035c 	.word	0x2000035c
 80007bc:	08004cd0 	.word	0x08004cd0
 80007c0:	20000360 	.word	0x20000360

080007c4 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b094      	sub	sp, #80	; 0x50
 80007c8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ca:	f107 0320 	add.w	r3, r7, #32
 80007ce:	2230      	movs	r2, #48	; 0x30
 80007d0:	2100      	movs	r1, #0
 80007d2:	4618      	mov	r0, r3
 80007d4:	f004 fa12 	bl	8004bfc <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007d8:	f107 030c 	add.w	r3, r7, #12
 80007dc:	2200      	movs	r2, #0
 80007de:	601a      	str	r2, [r3, #0]
 80007e0:	605a      	str	r2, [r3, #4]
 80007e2:	609a      	str	r2, [r3, #8]
 80007e4:	60da      	str	r2, [r3, #12]
 80007e6:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80007e8:	2300      	movs	r3, #0
 80007ea:	60bb      	str	r3, [r7, #8]
 80007ec:	4b24      	ldr	r3, [pc, #144]	; (8000880 <SystemClock_Config+0xbc>)
 80007ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007f0:	4a23      	ldr	r2, [pc, #140]	; (8000880 <SystemClock_Config+0xbc>)
 80007f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007f6:	6413      	str	r3, [r2, #64]	; 0x40
 80007f8:	4b21      	ldr	r3, [pc, #132]	; (8000880 <SystemClock_Config+0xbc>)
 80007fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000800:	60bb      	str	r3, [r7, #8]
 8000802:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000804:	2300      	movs	r3, #0
 8000806:	607b      	str	r3, [r7, #4]
 8000808:	4b1e      	ldr	r3, [pc, #120]	; (8000884 <SystemClock_Config+0xc0>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000810:	4a1c      	ldr	r2, [pc, #112]	; (8000884 <SystemClock_Config+0xc0>)
 8000812:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000816:	6013      	str	r3, [r2, #0]
 8000818:	4b1a      	ldr	r3, [pc, #104]	; (8000884 <SystemClock_Config+0xc0>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000820:	607b      	str	r3, [r7, #4]
 8000822:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000824:	230a      	movs	r3, #10
 8000826:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000828:	2301      	movs	r3, #1
 800082a:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800082c:	2310      	movs	r3, #16
 800082e:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000830:	2301      	movs	r3, #1
 8000832:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000834:	2300      	movs	r3, #0
 8000836:	63bb      	str	r3, [r7, #56]	; 0x38
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000838:	f107 0320 	add.w	r3, r7, #32
 800083c:	4618      	mov	r0, r3
 800083e:	f000 fed7 	bl	80015f0 <HAL_RCC_OscConfig>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <SystemClock_Config+0x88>
	{
		Error_Handler();
 8000848:	f000 fa2a 	bl	8000ca0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800084c:	230f      	movs	r3, #15
 800084e:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000850:	2300      	movs	r3, #0
 8000852:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000854:	2380      	movs	r3, #128	; 0x80
 8000856:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000858:	2300      	movs	r3, #0
 800085a:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800085c:	2300      	movs	r3, #0
 800085e:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000860:	f107 030c 	add.w	r3, r7, #12
 8000864:	2100      	movs	r1, #0
 8000866:	4618      	mov	r0, r3
 8000868:	f001 f93a 	bl	8001ae0 <HAL_RCC_ClockConfig>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <SystemClock_Config+0xb2>
	{
		Error_Handler();
 8000872:	f000 fa15 	bl	8000ca0 <Error_Handler>
	}
}
 8000876:	bf00      	nop
 8000878:	3750      	adds	r7, #80	; 0x50
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	40023800 	.word	0x40023800
 8000884:	40007000 	.word	0x40007000

08000888 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b08a      	sub	sp, #40	; 0x28
 800088c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800088e:	f107 0318 	add.w	r3, r7, #24
 8000892:	2200      	movs	r2, #0
 8000894:	601a      	str	r2, [r3, #0]
 8000896:	605a      	str	r2, [r3, #4]
 8000898:	609a      	str	r2, [r3, #8]
 800089a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 800089c:	f107 0310 	add.w	r3, r7, #16
 80008a0:	2200      	movs	r2, #0
 80008a2:	601a      	str	r2, [r3, #0]
 80008a4:	605a      	str	r2, [r3, #4]
	TIM_IC_InitTypeDef sConfigIC = {0};
 80008a6:	463b      	mov	r3, r7
 80008a8:	2200      	movs	r2, #0
 80008aa:	601a      	str	r2, [r3, #0]
 80008ac:	605a      	str	r2, [r3, #4]
 80008ae:	609a      	str	r2, [r3, #8]
 80008b0:	60da      	str	r2, [r3, #12]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 80008b2:	4b2c      	ldr	r3, [pc, #176]	; (8000964 <MX_TIM2_Init+0xdc>)
 80008b4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008b8:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 15;
 80008ba:	4b2a      	ldr	r3, [pc, #168]	; (8000964 <MX_TIM2_Init+0xdc>)
 80008bc:	220f      	movs	r2, #15
 80008be:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008c0:	4b28      	ldr	r3, [pc, #160]	; (8000964 <MX_TIM2_Init+0xdc>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 65535;
 80008c6:	4b27      	ldr	r3, [pc, #156]	; (8000964 <MX_TIM2_Init+0xdc>)
 80008c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008cc:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008ce:	4b25      	ldr	r3, [pc, #148]	; (8000964 <MX_TIM2_Init+0xdc>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008d4:	4b23      	ldr	r3, [pc, #140]	; (8000964 <MX_TIM2_Init+0xdc>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80008da:	4822      	ldr	r0, [pc, #136]	; (8000964 <MX_TIM2_Init+0xdc>)
 80008dc:	f001 fb12 	bl	8001f04 <HAL_TIM_Base_Init>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <MX_TIM2_Init+0x62>
	{
		Error_Handler();
 80008e6:	f000 f9db 	bl	8000ca0 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008ee:	61bb      	str	r3, [r7, #24]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80008f0:	f107 0318 	add.w	r3, r7, #24
 80008f4:	4619      	mov	r1, r3
 80008f6:	481b      	ldr	r0, [pc, #108]	; (8000964 <MX_TIM2_Init+0xdc>)
 80008f8:	f001 ff7c 	bl	80027f4 <HAL_TIM_ConfigClockSource>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <MX_TIM2_Init+0x7e>
	{
		Error_Handler();
 8000902:	f000 f9cd 	bl	8000ca0 <Error_Handler>
	}
	if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000906:	4817      	ldr	r0, [pc, #92]	; (8000964 <MX_TIM2_Init+0xdc>)
 8000908:	f001 fbae 	bl	8002068 <HAL_TIM_IC_Init>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <MX_TIM2_Init+0x8e>
	{
		Error_Handler();
 8000912:	f000 f9c5 	bl	8000ca0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000916:	2300      	movs	r3, #0
 8000918:	613b      	str	r3, [r7, #16]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800091a:	2300      	movs	r3, #0
 800091c:	617b      	str	r3, [r7, #20]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800091e:	f107 0310 	add.w	r3, r7, #16
 8000922:	4619      	mov	r1, r3
 8000924:	480f      	ldr	r0, [pc, #60]	; (8000964 <MX_TIM2_Init+0xdc>)
 8000926:	f002 faed 	bl	8002f04 <HAL_TIMEx_MasterConfigSynchronization>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <MX_TIM2_Init+0xac>
	{
		Error_Handler();
 8000930:	f000 f9b6 	bl	8000ca0 <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8000934:	230a      	movs	r3, #10
 8000936:	603b      	str	r3, [r7, #0]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000938:	2301      	movs	r3, #1
 800093a:	607b      	str	r3, [r7, #4]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800093c:	2300      	movs	r3, #0
 800093e:	60bb      	str	r3, [r7, #8]
	sConfigIC.ICFilter = 0;
 8000940:	2300      	movs	r3, #0
 8000942:	60fb      	str	r3, [r7, #12]
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000944:	463b      	mov	r3, r7
 8000946:	2200      	movs	r2, #0
 8000948:	4619      	mov	r1, r3
 800094a:	4806      	ldr	r0, [pc, #24]	; (8000964 <MX_TIM2_Init+0xdc>)
 800094c:	f001 feb6 	bl	80026bc <HAL_TIM_IC_ConfigChannel>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <MX_TIM2_Init+0xd2>
	{
		Error_Handler();
 8000956:	f000 f9a3 	bl	8000ca0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 800095a:	bf00      	nop
 800095c:	3728      	adds	r7, #40	; 0x28
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	20000284 	.word	0x20000284

08000968 <MX_TIM5_Init>:
 * @brief TIM5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM5_Init(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b08a      	sub	sp, #40	; 0x28
 800096c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM5_Init 0 */

	/* USER CODE END TIM5_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800096e:	f107 0318 	add.w	r3, r7, #24
 8000972:	2200      	movs	r2, #0
 8000974:	601a      	str	r2, [r3, #0]
 8000976:	605a      	str	r2, [r3, #4]
 8000978:	609a      	str	r2, [r3, #8]
 800097a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 800097c:	f107 0310 	add.w	r3, r7, #16
 8000980:	2200      	movs	r2, #0
 8000982:	601a      	str	r2, [r3, #0]
 8000984:	605a      	str	r2, [r3, #4]
	TIM_IC_InitTypeDef sConfigIC = {0};
 8000986:	463b      	mov	r3, r7
 8000988:	2200      	movs	r2, #0
 800098a:	601a      	str	r2, [r3, #0]
 800098c:	605a      	str	r2, [r3, #4]
 800098e:	609a      	str	r2, [r3, #8]
 8000990:	60da      	str	r2, [r3, #12]

	/* USER CODE BEGIN TIM5_Init 1 */

	/* USER CODE END TIM5_Init 1 */
	htim5.Instance = TIM5;
 8000992:	4b2b      	ldr	r3, [pc, #172]	; (8000a40 <MX_TIM5_Init+0xd8>)
 8000994:	4a2b      	ldr	r2, [pc, #172]	; (8000a44 <MX_TIM5_Init+0xdc>)
 8000996:	601a      	str	r2, [r3, #0]
	htim5.Init.Prescaler = 15;
 8000998:	4b29      	ldr	r3, [pc, #164]	; (8000a40 <MX_TIM5_Init+0xd8>)
 800099a:	220f      	movs	r2, #15
 800099c:	605a      	str	r2, [r3, #4]
	htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800099e:	4b28      	ldr	r3, [pc, #160]	; (8000a40 <MX_TIM5_Init+0xd8>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	609a      	str	r2, [r3, #8]
	htim5.Init.Period = 65535;
 80009a4:	4b26      	ldr	r3, [pc, #152]	; (8000a40 <MX_TIM5_Init+0xd8>)
 80009a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80009aa:	60da      	str	r2, [r3, #12]
	htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009ac:	4b24      	ldr	r3, [pc, #144]	; (8000a40 <MX_TIM5_Init+0xd8>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	611a      	str	r2, [r3, #16]
	htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009b2:	4b23      	ldr	r3, [pc, #140]	; (8000a40 <MX_TIM5_Init+0xd8>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80009b8:	4821      	ldr	r0, [pc, #132]	; (8000a40 <MX_TIM5_Init+0xd8>)
 80009ba:	f001 faa3 	bl	8001f04 <HAL_TIM_Base_Init>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d001      	beq.n	80009c8 <MX_TIM5_Init+0x60>
	{
		Error_Handler();
 80009c4:	f000 f96c 	bl	8000ca0 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009cc:	61bb      	str	r3, [r7, #24]
	if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80009ce:	f107 0318 	add.w	r3, r7, #24
 80009d2:	4619      	mov	r1, r3
 80009d4:	481a      	ldr	r0, [pc, #104]	; (8000a40 <MX_TIM5_Init+0xd8>)
 80009d6:	f001 ff0d 	bl	80027f4 <HAL_TIM_ConfigClockSource>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d001      	beq.n	80009e4 <MX_TIM5_Init+0x7c>
	{
		Error_Handler();
 80009e0:	f000 f95e 	bl	8000ca0 <Error_Handler>
	}
	if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 80009e4:	4816      	ldr	r0, [pc, #88]	; (8000a40 <MX_TIM5_Init+0xd8>)
 80009e6:	f001 fb3f 	bl	8002068 <HAL_TIM_IC_Init>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d001      	beq.n	80009f4 <MX_TIM5_Init+0x8c>
	{
		Error_Handler();
 80009f0:	f000 f956 	bl	8000ca0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009f4:	2300      	movs	r3, #0
 80009f6:	613b      	str	r3, [r7, #16]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009f8:	2300      	movs	r3, #0
 80009fa:	617b      	str	r3, [r7, #20]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80009fc:	f107 0310 	add.w	r3, r7, #16
 8000a00:	4619      	mov	r1, r3
 8000a02:	480f      	ldr	r0, [pc, #60]	; (8000a40 <MX_TIM5_Init+0xd8>)
 8000a04:	f002 fa7e 	bl	8002f04 <HAL_TIMEx_MasterConfigSynchronization>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <MX_TIM5_Init+0xaa>
	{
		Error_Handler();
 8000a0e:	f000 f947 	bl	8000ca0 <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8000a12:	230a      	movs	r3, #10
 8000a14:	603b      	str	r3, [r7, #0]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000a16:	2301      	movs	r3, #1
 8000a18:	607b      	str	r3, [r7, #4]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	60bb      	str	r3, [r7, #8]
	sConfigIC.ICFilter = 0;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	60fb      	str	r3, [r7, #12]
	if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8000a22:	463b      	mov	r3, r7
 8000a24:	220c      	movs	r2, #12
 8000a26:	4619      	mov	r1, r3
 8000a28:	4805      	ldr	r0, [pc, #20]	; (8000a40 <MX_TIM5_Init+0xd8>)
 8000a2a:	f001 fe47 	bl	80026bc <HAL_TIM_IC_ConfigChannel>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d001      	beq.n	8000a38 <MX_TIM5_Init+0xd0>
	{
		Error_Handler();
 8000a34:	f000 f934 	bl	8000ca0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM5_Init 2 */

	/* USER CODE END TIM5_Init 2 */

}
 8000a38:	bf00      	nop
 8000a3a:	3728      	adds	r7, #40	; 0x28
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	200002cc 	.word	0x200002cc
 8000a44:	40000c00 	.word	0x40000c00

08000a48 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8000a4c:	4b11      	ldr	r3, [pc, #68]	; (8000a94 <MX_USART1_UART_Init+0x4c>)
 8000a4e:	4a12      	ldr	r2, [pc, #72]	; (8000a98 <MX_USART1_UART_Init+0x50>)
 8000a50:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 9600;
 8000a52:	4b10      	ldr	r3, [pc, #64]	; (8000a94 <MX_USART1_UART_Init+0x4c>)
 8000a54:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000a58:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a5a:	4b0e      	ldr	r3, [pc, #56]	; (8000a94 <MX_USART1_UART_Init+0x4c>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8000a60:	4b0c      	ldr	r3, [pc, #48]	; (8000a94 <MX_USART1_UART_Init+0x4c>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8000a66:	4b0b      	ldr	r3, [pc, #44]	; (8000a94 <MX_USART1_UART_Init+0x4c>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000a6c:	4b09      	ldr	r3, [pc, #36]	; (8000a94 <MX_USART1_UART_Init+0x4c>)
 8000a6e:	220c      	movs	r2, #12
 8000a70:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a72:	4b08      	ldr	r3, [pc, #32]	; (8000a94 <MX_USART1_UART_Init+0x4c>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a78:	4b06      	ldr	r3, [pc, #24]	; (8000a94 <MX_USART1_UART_Init+0x4c>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a7e:	4805      	ldr	r0, [pc, #20]	; (8000a94 <MX_USART1_UART_Init+0x4c>)
 8000a80:	f002 fac2 	bl	8003008 <HAL_UART_Init>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d001      	beq.n	8000a8e <MX_USART1_UART_Init+0x46>
	{
		Error_Handler();
 8000a8a:	f000 f909 	bl	8000ca0 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8000a8e:	bf00      	nop
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	20000314 	.word	0x20000314
 8000a98:	40011000 	.word	0x40011000

08000a9c <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b088      	sub	sp, #32
 8000aa0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa2:	f107 030c 	add.w	r3, r7, #12
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	601a      	str	r2, [r3, #0]
 8000aaa:	605a      	str	r2, [r3, #4]
 8000aac:	609a      	str	r2, [r3, #8]
 8000aae:	60da      	str	r2, [r3, #12]
 8000ab0:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	60bb      	str	r3, [r7, #8]
 8000ab6:	4b22      	ldr	r3, [pc, #136]	; (8000b40 <MX_GPIO_Init+0xa4>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aba:	4a21      	ldr	r2, [pc, #132]	; (8000b40 <MX_GPIO_Init+0xa4>)
 8000abc:	f043 0301 	orr.w	r3, r3, #1
 8000ac0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ac2:	4b1f      	ldr	r3, [pc, #124]	; (8000b40 <MX_GPIO_Init+0xa4>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac6:	f003 0301 	and.w	r3, r3, #1
 8000aca:	60bb      	str	r3, [r7, #8]
 8000acc:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000ace:	2300      	movs	r3, #0
 8000ad0:	607b      	str	r3, [r7, #4]
 8000ad2:	4b1b      	ldr	r3, [pc, #108]	; (8000b40 <MX_GPIO_Init+0xa4>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad6:	4a1a      	ldr	r2, [pc, #104]	; (8000b40 <MX_GPIO_Init+0xa4>)
 8000ad8:	f043 0302 	orr.w	r3, r3, #2
 8000adc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ade:	4b18      	ldr	r3, [pc, #96]	; (8000b40 <MX_GPIO_Init+0xa4>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae2:	f003 0302 	and.w	r3, r3, #2
 8000ae6:	607b      	str	r3, [r7, #4]
 8000ae8:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4, GPIO_PIN_RESET);
 8000aea:	2200      	movs	r2, #0
 8000aec:	2116      	movs	r1, #22
 8000aee:	4815      	ldr	r0, [pc, #84]	; (8000b44 <MX_GPIO_Init+0xa8>)
 8000af0:	f000 fd64 	bl	80015bc <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 8000af4:	2200      	movs	r2, #0
 8000af6:	2107      	movs	r1, #7
 8000af8:	4813      	ldr	r0, [pc, #76]	; (8000b48 <MX_GPIO_Init+0xac>)
 8000afa:	f000 fd5f 	bl	80015bc <HAL_GPIO_WritePin>

	/*Configure GPIO pins : PA1 PA2 PA4 */
	GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4;
 8000afe:	2316      	movs	r3, #22
 8000b00:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b02:	2301      	movs	r3, #1
 8000b04:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b06:	2300      	movs	r3, #0
 8000b08:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b0e:	f107 030c 	add.w	r3, r7, #12
 8000b12:	4619      	mov	r1, r3
 8000b14:	480b      	ldr	r0, [pc, #44]	; (8000b44 <MX_GPIO_Init+0xa8>)
 8000b16:	f000 fbcd 	bl	80012b4 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB0 PB1 PB2 */
	GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000b1a:	2307      	movs	r3, #7
 8000b1c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b1e:	2301      	movs	r3, #1
 8000b20:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b22:	2300      	movs	r3, #0
 8000b24:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b26:	2300      	movs	r3, #0
 8000b28:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b2a:	f107 030c 	add.w	r3, r7, #12
 8000b2e:	4619      	mov	r1, r3
 8000b30:	4805      	ldr	r0, [pc, #20]	; (8000b48 <MX_GPIO_Init+0xac>)
 8000b32:	f000 fbbf 	bl	80012b4 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000b36:	bf00      	nop
 8000b38:	3720      	adds	r7, #32
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	40023800 	.word	0x40023800
 8000b44:	40020000 	.word	0x40020000
 8000b48:	40020400 	.word	0x40020400

08000b4c <EnableUltrasonic_1_TimerInterrutp>:

/* USER CODE BEGIN 4 */


void EnableUltrasonic_1_TimerInterrutp (void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8000b50:	b662      	cpsie	i
}
 8000b52:	bf00      	nop
	__enable_irq(); // enable global interrupt
	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1); // enable timer2
 8000b54:	2100      	movs	r1, #0
 8000b56:	4802      	ldr	r0, [pc, #8]	; (8000b60 <EnableUltrasonic_1_TimerInterrutp+0x14>)
 8000b58:	f001 fae0 	bl	800211c <HAL_TIM_IC_Start_IT>
}
 8000b5c:	bf00      	nop
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	20000284 	.word	0x20000284

08000b64 <triggerUltrasonic_1_Handeler>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_triggerUltrasonic_1_Handeler */
void triggerUltrasonic_1_Handeler(void const * argument)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b084      	sub	sp, #16
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
	/* Infinite loop */
	while(1)
	{
		// Trigger ultrasonic sensor
		//enable trigger for ultrasonic_1
		HAL_GPIO_WritePin(TRIG_PORT_U1, TRIG_PIN_U1,GPIO_PIN_SET);
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	2102      	movs	r1, #2
 8000b70:	480a      	ldr	r0, [pc, #40]	; (8000b9c <triggerUltrasonic_1_Handeler+0x38>)
 8000b72:	f000 fd23 	bl	80015bc <HAL_GPIO_WritePin>
		for( int i=0;i<80;i++); //delay for 10 us //put no ass operation
 8000b76:	2300      	movs	r3, #0
 8000b78:	60fb      	str	r3, [r7, #12]
 8000b7a:	e002      	b.n	8000b82 <triggerUltrasonic_1_Handeler+0x1e>
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	3301      	adds	r3, #1
 8000b80:	60fb      	str	r3, [r7, #12]
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	2b4f      	cmp	r3, #79	; 0x4f
 8000b86:	ddf9      	ble.n	8000b7c <triggerUltrasonic_1_Handeler+0x18>
		HAL_GPIO_WritePin(TRIG_PORT_U1, TRIG_PIN_U1,GPIO_PIN_RESET);
 8000b88:	2200      	movs	r2, #0
 8000b8a:	2102      	movs	r1, #2
 8000b8c:	4803      	ldr	r0, [pc, #12]	; (8000b9c <triggerUltrasonic_1_Handeler+0x38>)
 8000b8e:	f000 fd15 	bl	80015bc <HAL_GPIO_WritePin>
		vTaskDelay(DelayToRepeatTrig);
 8000b92:	2078      	movs	r0, #120	; 0x78
 8000b94:	f003 f8ac 	bl	8003cf0 <vTaskDelay>
		HAL_GPIO_WritePin(TRIG_PORT_U1, TRIG_PIN_U1,GPIO_PIN_SET);
 8000b98:	e7e8      	b.n	8000b6c <triggerUltrasonic_1_Handeler+0x8>
 8000b9a:	bf00      	nop
 8000b9c:	40020000 	.word	0x40020000

08000ba0 <triggerUltrasonic_2_Handeler>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_triggerUltrasonic_2_Handeler */
void triggerUltrasonic_2_Handeler(void const * argument)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b084      	sub	sp, #16
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN triggerUltrasonic_2_Handeler */
	vTaskDelay(DelayBetweenUltraSonics+10);
 8000ba8:	2046      	movs	r0, #70	; 0x46
 8000baa:	f003 f8a1 	bl	8003cf0 <vTaskDelay>
	/* Infinite loop */
	while(1)
	{
		// Trigger ultrasonic sensor
		//enable trigger for ultrasonic_1
		HAL_GPIO_WritePin(TRIG_PORT_U2, TRIG_PIN_U2,GPIO_PIN_SET);
 8000bae:	2201      	movs	r2, #1
 8000bb0:	2110      	movs	r1, #16
 8000bb2:	480a      	ldr	r0, [pc, #40]	; (8000bdc <triggerUltrasonic_2_Handeler+0x3c>)
 8000bb4:	f000 fd02 	bl	80015bc <HAL_GPIO_WritePin>
		for( int i=0;i<80;i++); //delay for 10 us //put no ass operation
 8000bb8:	2300      	movs	r3, #0
 8000bba:	60fb      	str	r3, [r7, #12]
 8000bbc:	e002      	b.n	8000bc4 <triggerUltrasonic_2_Handeler+0x24>
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	3301      	adds	r3, #1
 8000bc2:	60fb      	str	r3, [r7, #12]
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	2b4f      	cmp	r3, #79	; 0x4f
 8000bc8:	ddf9      	ble.n	8000bbe <triggerUltrasonic_2_Handeler+0x1e>
		HAL_GPIO_WritePin(TRIG_PORT_U2, TRIG_PIN_U2,GPIO_PIN_RESET);
 8000bca:	2200      	movs	r2, #0
 8000bcc:	2110      	movs	r1, #16
 8000bce:	4803      	ldr	r0, [pc, #12]	; (8000bdc <triggerUltrasonic_2_Handeler+0x3c>)
 8000bd0:	f000 fcf4 	bl	80015bc <HAL_GPIO_WritePin>
		vTaskDelay(DelayToRepeatTrig);
 8000bd4:	2078      	movs	r0, #120	; 0x78
 8000bd6:	f003 f88b 	bl	8003cf0 <vTaskDelay>
		HAL_GPIO_WritePin(TRIG_PORT_U2, TRIG_PIN_U2,GPIO_PIN_SET);
 8000bda:	e7e8      	b.n	8000bae <triggerUltrasonic_2_Handeler+0xe>
 8000bdc:	40020000 	.word	0x40020000

08000be0 <indecateOnLED_Handeler>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_indecateOnLED_Handeler */
void indecateOnLED_Handeler(void const * argument)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN indecateOnLED_Handeler */
	vTaskDelay(DelayTrigToRead); // first delay : time between trigger and getting read
 8000be8:	2032      	movs	r0, #50	; 0x32
 8000bea:	f003 f881 	bl	8003cf0 <vTaskDelay>
	for(;;)
	{
		// Check if an object is near

		// if there is something near ultrasonic1 the led will be on
		if(distance_u1<NEAR_OBJECT_THRESHOLD)
 8000bee:	4b1d      	ldr	r3, [pc, #116]	; (8000c64 <indecateOnLED_Handeler+0x84>)
 8000bf0:	881b      	ldrh	r3, [r3, #0]
 8000bf2:	b29b      	uxth	r3, r3
 8000bf4:	2b13      	cmp	r3, #19
 8000bf6:	d805      	bhi.n	8000c04 <indecateOnLED_Handeler+0x24>
		{
			HAL_GPIO_WritePin(LED_PORT_U1, LED_PIN_U1,GPIO_PIN_SET);
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	2104      	movs	r1, #4
 8000bfc:	481a      	ldr	r0, [pc, #104]	; (8000c68 <indecateOnLED_Handeler+0x88>)
 8000bfe:	f000 fcdd 	bl	80015bc <HAL_GPIO_WritePin>
 8000c02:	e004      	b.n	8000c0e <indecateOnLED_Handeler+0x2e>
		}
		else
		{
			HAL_GPIO_WritePin(LED_PORT_U1, LED_PIN_U1,GPIO_PIN_RESET);
 8000c04:	2200      	movs	r2, #0
 8000c06:	2104      	movs	r1, #4
 8000c08:	4817      	ldr	r0, [pc, #92]	; (8000c68 <indecateOnLED_Handeler+0x88>)
 8000c0a:	f000 fcd7 	bl	80015bc <HAL_GPIO_WritePin>
		}


		// if there is something near ultrasonic2 the led will be on
		if(distance_u2<NEAR_OBJECT_THRESHOLD)
 8000c0e:	4b17      	ldr	r3, [pc, #92]	; (8000c6c <indecateOnLED_Handeler+0x8c>)
 8000c10:	881b      	ldrh	r3, [r3, #0]
 8000c12:	b29b      	uxth	r3, r3
 8000c14:	2b13      	cmp	r3, #19
 8000c16:	d805      	bhi.n	8000c24 <indecateOnLED_Handeler+0x44>
		{
			HAL_GPIO_WritePin(LED_PORT_U2, LED_PIN_U2,GPIO_PIN_SET);
 8000c18:	2201      	movs	r2, #1
 8000c1a:	2101      	movs	r1, #1
 8000c1c:	4814      	ldr	r0, [pc, #80]	; (8000c70 <indecateOnLED_Handeler+0x90>)
 8000c1e:	f000 fccd 	bl	80015bc <HAL_GPIO_WritePin>
 8000c22:	e004      	b.n	8000c2e <indecateOnLED_Handeler+0x4e>
			//

		}
		else
		{
			HAL_GPIO_WritePin(LED_PORT_U2, LED_PIN_U2,GPIO_PIN_RESET);
 8000c24:	2200      	movs	r2, #0
 8000c26:	2101      	movs	r1, #1
 8000c28:	4811      	ldr	r0, [pc, #68]	; (8000c70 <indecateOnLED_Handeler+0x90>)
 8000c2a:	f000 fcc7 	bl	80015bc <HAL_GPIO_WritePin>
		}
		if (distance_u1 <= 1 || distance_u2 <= 1) {
 8000c2e:	4b0d      	ldr	r3, [pc, #52]	; (8000c64 <indecateOnLED_Handeler+0x84>)
 8000c30:	881b      	ldrh	r3, [r3, #0]
 8000c32:	b29b      	uxth	r3, r3
 8000c34:	2b01      	cmp	r3, #1
 8000c36:	d904      	bls.n	8000c42 <indecateOnLED_Handeler+0x62>
 8000c38:	4b0c      	ldr	r3, [pc, #48]	; (8000c6c <indecateOnLED_Handeler+0x8c>)
 8000c3a:	881b      	ldrh	r3, [r3, #0]
 8000c3c:	b29b      	uxth	r3, r3
 8000c3e:	2b01      	cmp	r3, #1
 8000c40:	d803      	bhi.n	8000c4a <indecateOnLED_Handeler+0x6a>
			 bsa_diagnose = ULTAR_IS_NOT_OK;
 8000c42:	4b0c      	ldr	r3, [pc, #48]	; (8000c74 <indecateOnLED_Handeler+0x94>)
 8000c44:	2238      	movs	r2, #56	; 0x38
 8000c46:	701a      	strb	r2, [r3, #0]
 8000c48:	e002      	b.n	8000c50 <indecateOnLED_Handeler+0x70>
		}
		else {
			 bsa_diagnose = ULTAR_IS_OK;
 8000c4a:	4b0a      	ldr	r3, [pc, #40]	; (8000c74 <indecateOnLED_Handeler+0x94>)
 8000c4c:	2233      	movs	r2, #51	; 0x33
 8000c4e:	701a      	strb	r2, [r3, #0]
		}

		HAL_UART_Transmit(&huart1, &bsa_diagnose, 1, 10);
 8000c50:	230a      	movs	r3, #10
 8000c52:	2201      	movs	r2, #1
 8000c54:	4907      	ldr	r1, [pc, #28]	; (8000c74 <indecateOnLED_Handeler+0x94>)
 8000c56:	4808      	ldr	r0, [pc, #32]	; (8000c78 <indecateOnLED_Handeler+0x98>)
 8000c58:	f002 fa23 	bl	80030a2 <HAL_UART_Transmit>
		vTaskDelay(DelayToRepeatTrig);// > 60 ms
 8000c5c:	2078      	movs	r0, #120	; 0x78
 8000c5e:	f003 f847 	bl	8003cf0 <vTaskDelay>
		if(distance_u1<NEAR_OBJECT_THRESHOLD)
 8000c62:	e7c4      	b.n	8000bee <indecateOnLED_Handeler+0xe>
 8000c64:	20000364 	.word	0x20000364
 8000c68:	40020000 	.word	0x40020000
 8000c6c:	20000366 	.word	0x20000366
 8000c70:	40020400 	.word	0x40020400
 8000c74:	20000000 	.word	0x20000000
 8000c78:	20000314 	.word	0x20000314

08000c7c <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b082      	sub	sp, #8
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM1) {
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4a04      	ldr	r2, [pc, #16]	; (8000c9c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c8a:	4293      	cmp	r3, r2
 8000c8c:	d101      	bne.n	8000c92 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8000c8e:	f000 fa0f 	bl	80010b0 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8000c92:	bf00      	nop
 8000c94:	3708      	adds	r7, #8
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	40010000 	.word	0x40010000

08000ca0 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ca4:	b672      	cpsid	i
}
 8000ca6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000ca8:	e7fe      	b.n	8000ca8 <Error_Handler+0x8>
	...

08000cac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	607b      	str	r3, [r7, #4]
 8000cb6:	4b12      	ldr	r3, [pc, #72]	; (8000d00 <HAL_MspInit+0x54>)
 8000cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cba:	4a11      	ldr	r2, [pc, #68]	; (8000d00 <HAL_MspInit+0x54>)
 8000cbc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cc0:	6453      	str	r3, [r2, #68]	; 0x44
 8000cc2:	4b0f      	ldr	r3, [pc, #60]	; (8000d00 <HAL_MspInit+0x54>)
 8000cc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cca:	607b      	str	r3, [r7, #4]
 8000ccc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cce:	2300      	movs	r3, #0
 8000cd0:	603b      	str	r3, [r7, #0]
 8000cd2:	4b0b      	ldr	r3, [pc, #44]	; (8000d00 <HAL_MspInit+0x54>)
 8000cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cd6:	4a0a      	ldr	r2, [pc, #40]	; (8000d00 <HAL_MspInit+0x54>)
 8000cd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cdc:	6413      	str	r3, [r2, #64]	; 0x40
 8000cde:	4b08      	ldr	r3, [pc, #32]	; (8000d00 <HAL_MspInit+0x54>)
 8000ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ce2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ce6:	603b      	str	r3, [r7, #0]
 8000ce8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000cea:	2200      	movs	r2, #0
 8000cec:	210f      	movs	r1, #15
 8000cee:	f06f 0001 	mvn.w	r0, #1
 8000cf2:	f000 fab5 	bl	8001260 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cf6:	bf00      	nop
 8000cf8:	3708      	adds	r7, #8
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	40023800 	.word	0x40023800

08000d04 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b08c      	sub	sp, #48	; 0x30
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d0c:	f107 031c 	add.w	r3, r7, #28
 8000d10:	2200      	movs	r2, #0
 8000d12:	601a      	str	r2, [r3, #0]
 8000d14:	605a      	str	r2, [r3, #4]
 8000d16:	609a      	str	r2, [r3, #8]
 8000d18:	60da      	str	r2, [r3, #12]
 8000d1a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d24:	d134      	bne.n	8000d90 <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d26:	2300      	movs	r3, #0
 8000d28:	61bb      	str	r3, [r7, #24]
 8000d2a:	4b38      	ldr	r3, [pc, #224]	; (8000e0c <HAL_TIM_Base_MspInit+0x108>)
 8000d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d2e:	4a37      	ldr	r2, [pc, #220]	; (8000e0c <HAL_TIM_Base_MspInit+0x108>)
 8000d30:	f043 0301 	orr.w	r3, r3, #1
 8000d34:	6413      	str	r3, [r2, #64]	; 0x40
 8000d36:	4b35      	ldr	r3, [pc, #212]	; (8000e0c <HAL_TIM_Base_MspInit+0x108>)
 8000d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d3a:	f003 0301 	and.w	r3, r3, #1
 8000d3e:	61bb      	str	r3, [r7, #24]
 8000d40:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d42:	2300      	movs	r3, #0
 8000d44:	617b      	str	r3, [r7, #20]
 8000d46:	4b31      	ldr	r3, [pc, #196]	; (8000e0c <HAL_TIM_Base_MspInit+0x108>)
 8000d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4a:	4a30      	ldr	r2, [pc, #192]	; (8000e0c <HAL_TIM_Base_MspInit+0x108>)
 8000d4c:	f043 0301 	orr.w	r3, r3, #1
 8000d50:	6313      	str	r3, [r2, #48]	; 0x30
 8000d52:	4b2e      	ldr	r3, [pc, #184]	; (8000e0c <HAL_TIM_Base_MspInit+0x108>)
 8000d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d56:	f003 0301 	and.w	r3, r3, #1
 8000d5a:	617b      	str	r3, [r7, #20]
 8000d5c:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000d5e:	2301      	movs	r3, #1
 8000d60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d62:	2302      	movs	r3, #2
 8000d64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d66:	2300      	movs	r3, #0
 8000d68:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000d6e:	2301      	movs	r3, #1
 8000d70:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d72:	f107 031c 	add.w	r3, r7, #28
 8000d76:	4619      	mov	r1, r3
 8000d78:	4825      	ldr	r0, [pc, #148]	; (8000e10 <HAL_TIM_Base_MspInit+0x10c>)
 8000d7a:	f000 fa9b 	bl	80012b4 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8000d7e:	2200      	movs	r2, #0
 8000d80:	2105      	movs	r1, #5
 8000d82:	201c      	movs	r0, #28
 8000d84:	f000 fa6c 	bl	8001260 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000d88:	201c      	movs	r0, #28
 8000d8a:	f000 fa85 	bl	8001298 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8000d8e:	e038      	b.n	8000e02 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM5)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a1f      	ldr	r2, [pc, #124]	; (8000e14 <HAL_TIM_Base_MspInit+0x110>)
 8000d96:	4293      	cmp	r3, r2
 8000d98:	d133      	bne.n	8000e02 <HAL_TIM_Base_MspInit+0xfe>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	613b      	str	r3, [r7, #16]
 8000d9e:	4b1b      	ldr	r3, [pc, #108]	; (8000e0c <HAL_TIM_Base_MspInit+0x108>)
 8000da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da2:	4a1a      	ldr	r2, [pc, #104]	; (8000e0c <HAL_TIM_Base_MspInit+0x108>)
 8000da4:	f043 0308 	orr.w	r3, r3, #8
 8000da8:	6413      	str	r3, [r2, #64]	; 0x40
 8000daa:	4b18      	ldr	r3, [pc, #96]	; (8000e0c <HAL_TIM_Base_MspInit+0x108>)
 8000dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dae:	f003 0308 	and.w	r3, r3, #8
 8000db2:	613b      	str	r3, [r7, #16]
 8000db4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000db6:	2300      	movs	r3, #0
 8000db8:	60fb      	str	r3, [r7, #12]
 8000dba:	4b14      	ldr	r3, [pc, #80]	; (8000e0c <HAL_TIM_Base_MspInit+0x108>)
 8000dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dbe:	4a13      	ldr	r2, [pc, #76]	; (8000e0c <HAL_TIM_Base_MspInit+0x108>)
 8000dc0:	f043 0301 	orr.w	r3, r3, #1
 8000dc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000dc6:	4b11      	ldr	r3, [pc, #68]	; (8000e0c <HAL_TIM_Base_MspInit+0x108>)
 8000dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dca:	f003 0301 	and.w	r3, r3, #1
 8000dce:	60fb      	str	r3, [r7, #12]
 8000dd0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000dd2:	2308      	movs	r3, #8
 8000dd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd6:	2302      	movs	r3, #2
 8000dd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dde:	2300      	movs	r3, #0
 8000de0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8000de2:	2302      	movs	r3, #2
 8000de4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000de6:	f107 031c 	add.w	r3, r7, #28
 8000dea:	4619      	mov	r1, r3
 8000dec:	4808      	ldr	r0, [pc, #32]	; (8000e10 <HAL_TIM_Base_MspInit+0x10c>)
 8000dee:	f000 fa61 	bl	80012b4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 8000df2:	2200      	movs	r2, #0
 8000df4:	2105      	movs	r1, #5
 8000df6:	2032      	movs	r0, #50	; 0x32
 8000df8:	f000 fa32 	bl	8001260 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8000dfc:	2032      	movs	r0, #50	; 0x32
 8000dfe:	f000 fa4b 	bl	8001298 <HAL_NVIC_EnableIRQ>
}
 8000e02:	bf00      	nop
 8000e04:	3730      	adds	r7, #48	; 0x30
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	40023800 	.word	0x40023800
 8000e10:	40020000 	.word	0x40020000
 8000e14:	40000c00 	.word	0x40000c00

08000e18 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b08a      	sub	sp, #40	; 0x28
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e20:	f107 0314 	add.w	r3, r7, #20
 8000e24:	2200      	movs	r2, #0
 8000e26:	601a      	str	r2, [r3, #0]
 8000e28:	605a      	str	r2, [r3, #4]
 8000e2a:	609a      	str	r2, [r3, #8]
 8000e2c:	60da      	str	r2, [r3, #12]
 8000e2e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4a19      	ldr	r2, [pc, #100]	; (8000e9c <HAL_UART_MspInit+0x84>)
 8000e36:	4293      	cmp	r3, r2
 8000e38:	d12c      	bne.n	8000e94 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	613b      	str	r3, [r7, #16]
 8000e3e:	4b18      	ldr	r3, [pc, #96]	; (8000ea0 <HAL_UART_MspInit+0x88>)
 8000e40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e42:	4a17      	ldr	r2, [pc, #92]	; (8000ea0 <HAL_UART_MspInit+0x88>)
 8000e44:	f043 0310 	orr.w	r3, r3, #16
 8000e48:	6453      	str	r3, [r2, #68]	; 0x44
 8000e4a:	4b15      	ldr	r3, [pc, #84]	; (8000ea0 <HAL_UART_MspInit+0x88>)
 8000e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e4e:	f003 0310 	and.w	r3, r3, #16
 8000e52:	613b      	str	r3, [r7, #16]
 8000e54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e56:	2300      	movs	r3, #0
 8000e58:	60fb      	str	r3, [r7, #12]
 8000e5a:	4b11      	ldr	r3, [pc, #68]	; (8000ea0 <HAL_UART_MspInit+0x88>)
 8000e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5e:	4a10      	ldr	r2, [pc, #64]	; (8000ea0 <HAL_UART_MspInit+0x88>)
 8000e60:	f043 0301 	orr.w	r3, r3, #1
 8000e64:	6313      	str	r3, [r2, #48]	; 0x30
 8000e66:	4b0e      	ldr	r3, [pc, #56]	; (8000ea0 <HAL_UART_MspInit+0x88>)
 8000e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6a:	f003 0301 	and.w	r3, r3, #1
 8000e6e:	60fb      	str	r3, [r7, #12]
 8000e70:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000e72:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000e76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e78:	2302      	movs	r3, #2
 8000e7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e80:	2303      	movs	r3, #3
 8000e82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000e84:	2307      	movs	r3, #7
 8000e86:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e88:	f107 0314 	add.w	r3, r7, #20
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	4805      	ldr	r0, [pc, #20]	; (8000ea4 <HAL_UART_MspInit+0x8c>)
 8000e90:	f000 fa10 	bl	80012b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000e94:	bf00      	nop
 8000e96:	3728      	adds	r7, #40	; 0x28
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	40011000 	.word	0x40011000
 8000ea0:	40023800 	.word	0x40023800
 8000ea4:	40020000 	.word	0x40020000

08000ea8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b08c      	sub	sp, #48	; 0x30
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000eb8:	2300      	movs	r3, #0
 8000eba:	60bb      	str	r3, [r7, #8]
 8000ebc:	4b2e      	ldr	r3, [pc, #184]	; (8000f78 <HAL_InitTick+0xd0>)
 8000ebe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ec0:	4a2d      	ldr	r2, [pc, #180]	; (8000f78 <HAL_InitTick+0xd0>)
 8000ec2:	f043 0301 	orr.w	r3, r3, #1
 8000ec6:	6453      	str	r3, [r2, #68]	; 0x44
 8000ec8:	4b2b      	ldr	r3, [pc, #172]	; (8000f78 <HAL_InitTick+0xd0>)
 8000eca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ecc:	f003 0301 	and.w	r3, r3, #1
 8000ed0:	60bb      	str	r3, [r7, #8]
 8000ed2:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ed4:	f107 020c 	add.w	r2, r7, #12
 8000ed8:	f107 0310 	add.w	r3, r7, #16
 8000edc:	4611      	mov	r1, r2
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f000 ffde 	bl	8001ea0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000ee4:	f000 ffc8 	bl	8001e78 <HAL_RCC_GetPCLK2Freq>
 8000ee8:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000eea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000eec:	4a23      	ldr	r2, [pc, #140]	; (8000f7c <HAL_InitTick+0xd4>)
 8000eee:	fba2 2303 	umull	r2, r3, r2, r3
 8000ef2:	0c9b      	lsrs	r3, r3, #18
 8000ef4:	3b01      	subs	r3, #1
 8000ef6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000ef8:	4b21      	ldr	r3, [pc, #132]	; (8000f80 <HAL_InitTick+0xd8>)
 8000efa:	4a22      	ldr	r2, [pc, #136]	; (8000f84 <HAL_InitTick+0xdc>)
 8000efc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000efe:	4b20      	ldr	r3, [pc, #128]	; (8000f80 <HAL_InitTick+0xd8>)
 8000f00:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000f04:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000f06:	4a1e      	ldr	r2, [pc, #120]	; (8000f80 <HAL_InitTick+0xd8>)
 8000f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f0a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000f0c:	4b1c      	ldr	r3, [pc, #112]	; (8000f80 <HAL_InitTick+0xd8>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f12:	4b1b      	ldr	r3, [pc, #108]	; (8000f80 <HAL_InitTick+0xd8>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f18:	4b19      	ldr	r3, [pc, #100]	; (8000f80 <HAL_InitTick+0xd8>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000f1e:	4818      	ldr	r0, [pc, #96]	; (8000f80 <HAL_InitTick+0xd8>)
 8000f20:	f000 fff0 	bl	8001f04 <HAL_TIM_Base_Init>
 8000f24:	4603      	mov	r3, r0
 8000f26:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000f2a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d11b      	bne.n	8000f6a <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000f32:	4813      	ldr	r0, [pc, #76]	; (8000f80 <HAL_InitTick+0xd8>)
 8000f34:	f001 f836 	bl	8001fa4 <HAL_TIM_Base_Start_IT>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000f3e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d111      	bne.n	8000f6a <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000f46:	2019      	movs	r0, #25
 8000f48:	f000 f9a6 	bl	8001298 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	2b0f      	cmp	r3, #15
 8000f50:	d808      	bhi.n	8000f64 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000f52:	2200      	movs	r2, #0
 8000f54:	6879      	ldr	r1, [r7, #4]
 8000f56:	2019      	movs	r0, #25
 8000f58:	f000 f982 	bl	8001260 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f5c:	4a0a      	ldr	r2, [pc, #40]	; (8000f88 <HAL_InitTick+0xe0>)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	6013      	str	r3, [r2, #0]
 8000f62:	e002      	b.n	8000f6a <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000f64:	2301      	movs	r3, #1
 8000f66:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000f6a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	3730      	adds	r7, #48	; 0x30
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	40023800 	.word	0x40023800
 8000f7c:	431bde83 	.word	0x431bde83
 8000f80:	20000388 	.word	0x20000388
 8000f84:	40010000 	.word	0x40010000
 8000f88:	20000008 	.word	0x20000008

08000f8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f90:	e7fe      	b.n	8000f90 <NMI_Handler+0x4>

08000f92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f92:	b480      	push	{r7}
 8000f94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f96:	e7fe      	b.n	8000f96 <HardFault_Handler+0x4>

08000f98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f9c:	e7fe      	b.n	8000f9c <MemManage_Handler+0x4>

08000f9e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f9e:	b480      	push	{r7}
 8000fa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fa2:	e7fe      	b.n	8000fa2 <BusFault_Handler+0x4>

08000fa4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fa8:	e7fe      	b.n	8000fa8 <UsageFault_Handler+0x4>

08000faa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000faa:	b480      	push	{r7}
 8000fac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fae:	bf00      	nop
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr

08000fb8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000fbc:	4802      	ldr	r0, [pc, #8]	; (8000fc8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000fbe:	f001 fa75 	bl	80024ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000fc2:	bf00      	nop
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	20000388 	.word	0x20000388

08000fcc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000fd0:	4802      	ldr	r0, [pc, #8]	; (8000fdc <TIM2_IRQHandler+0x10>)
 8000fd2:	f001 fa6b 	bl	80024ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000fd6:	bf00      	nop
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	20000284 	.word	0x20000284

08000fe0 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8000fe4:	4802      	ldr	r0, [pc, #8]	; (8000ff0 <TIM5_IRQHandler+0x10>)
 8000fe6:	f001 fa61 	bl	80024ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8000fea:	bf00      	nop
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	200002cc 	.word	0x200002cc

08000ff4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ff8:	4b06      	ldr	r3, [pc, #24]	; (8001014 <SystemInit+0x20>)
 8000ffa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ffe:	4a05      	ldr	r2, [pc, #20]	; (8001014 <SystemInit+0x20>)
 8001000:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001004:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001008:	bf00      	nop
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop
 8001014:	e000ed00 	.word	0xe000ed00

08001018 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001018:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001050 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800101c:	480d      	ldr	r0, [pc, #52]	; (8001054 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800101e:	490e      	ldr	r1, [pc, #56]	; (8001058 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001020:	4a0e      	ldr	r2, [pc, #56]	; (800105c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001022:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001024:	e002      	b.n	800102c <LoopCopyDataInit>

08001026 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001026:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001028:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800102a:	3304      	adds	r3, #4

0800102c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800102c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800102e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001030:	d3f9      	bcc.n	8001026 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001032:	4a0b      	ldr	r2, [pc, #44]	; (8001060 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001034:	4c0b      	ldr	r4, [pc, #44]	; (8001064 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001036:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001038:	e001      	b.n	800103e <LoopFillZerobss>

0800103a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800103a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800103c:	3204      	adds	r2, #4

0800103e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800103e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001040:	d3fb      	bcc.n	800103a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001042:	f7ff ffd7 	bl	8000ff4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001046:	f003 fde1 	bl	8004c0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800104a:	f7ff fb63 	bl	8000714 <main>
  bx  lr    
 800104e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001050:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001054:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001058:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 800105c:	08004d1c 	.word	0x08004d1c
  ldr r2, =_sbss
 8001060:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8001064:	20004128 	.word	0x20004128

08001068 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001068:	e7fe      	b.n	8001068 <ADC_IRQHandler>
	...

0800106c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001070:	4b0e      	ldr	r3, [pc, #56]	; (80010ac <HAL_Init+0x40>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4a0d      	ldr	r2, [pc, #52]	; (80010ac <HAL_Init+0x40>)
 8001076:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800107a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800107c:	4b0b      	ldr	r3, [pc, #44]	; (80010ac <HAL_Init+0x40>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a0a      	ldr	r2, [pc, #40]	; (80010ac <HAL_Init+0x40>)
 8001082:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001086:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001088:	4b08      	ldr	r3, [pc, #32]	; (80010ac <HAL_Init+0x40>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4a07      	ldr	r2, [pc, #28]	; (80010ac <HAL_Init+0x40>)
 800108e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001092:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001094:	2003      	movs	r0, #3
 8001096:	f000 f8d8 	bl	800124a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800109a:	200f      	movs	r0, #15
 800109c:	f7ff ff04 	bl	8000ea8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010a0:	f7ff fe04 	bl	8000cac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010a4:	2300      	movs	r3, #0
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	40023c00 	.word	0x40023c00

080010b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010b4:	4b06      	ldr	r3, [pc, #24]	; (80010d0 <HAL_IncTick+0x20>)
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	461a      	mov	r2, r3
 80010ba:	4b06      	ldr	r3, [pc, #24]	; (80010d4 <HAL_IncTick+0x24>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	4413      	add	r3, r2
 80010c0:	4a04      	ldr	r2, [pc, #16]	; (80010d4 <HAL_IncTick+0x24>)
 80010c2:	6013      	str	r3, [r2, #0]
}
 80010c4:	bf00      	nop
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop
 80010d0:	2000000c 	.word	0x2000000c
 80010d4:	200003d0 	.word	0x200003d0

080010d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
  return uwTick;
 80010dc:	4b03      	ldr	r3, [pc, #12]	; (80010ec <HAL_GetTick+0x14>)
 80010de:	681b      	ldr	r3, [r3, #0]
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop
 80010ec:	200003d0 	.word	0x200003d0

080010f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b085      	sub	sp, #20
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	f003 0307 	and.w	r3, r3, #7
 80010fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001100:	4b0c      	ldr	r3, [pc, #48]	; (8001134 <__NVIC_SetPriorityGrouping+0x44>)
 8001102:	68db      	ldr	r3, [r3, #12]
 8001104:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001106:	68ba      	ldr	r2, [r7, #8]
 8001108:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800110c:	4013      	ands	r3, r2
 800110e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001114:	68bb      	ldr	r3, [r7, #8]
 8001116:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001118:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800111c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001120:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001122:	4a04      	ldr	r2, [pc, #16]	; (8001134 <__NVIC_SetPriorityGrouping+0x44>)
 8001124:	68bb      	ldr	r3, [r7, #8]
 8001126:	60d3      	str	r3, [r2, #12]
}
 8001128:	bf00      	nop
 800112a:	3714      	adds	r7, #20
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr
 8001134:	e000ed00 	.word	0xe000ed00

08001138 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800113c:	4b04      	ldr	r3, [pc, #16]	; (8001150 <__NVIC_GetPriorityGrouping+0x18>)
 800113e:	68db      	ldr	r3, [r3, #12]
 8001140:	0a1b      	lsrs	r3, r3, #8
 8001142:	f003 0307 	and.w	r3, r3, #7
}
 8001146:	4618      	mov	r0, r3
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr
 8001150:	e000ed00 	.word	0xe000ed00

08001154 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	4603      	mov	r3, r0
 800115c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800115e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001162:	2b00      	cmp	r3, #0
 8001164:	db0b      	blt.n	800117e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001166:	79fb      	ldrb	r3, [r7, #7]
 8001168:	f003 021f 	and.w	r2, r3, #31
 800116c:	4907      	ldr	r1, [pc, #28]	; (800118c <__NVIC_EnableIRQ+0x38>)
 800116e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001172:	095b      	lsrs	r3, r3, #5
 8001174:	2001      	movs	r0, #1
 8001176:	fa00 f202 	lsl.w	r2, r0, r2
 800117a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800117e:	bf00      	nop
 8001180:	370c      	adds	r7, #12
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop
 800118c:	e000e100 	.word	0xe000e100

08001190 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001190:	b480      	push	{r7}
 8001192:	b083      	sub	sp, #12
 8001194:	af00      	add	r7, sp, #0
 8001196:	4603      	mov	r3, r0
 8001198:	6039      	str	r1, [r7, #0]
 800119a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800119c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	db0a      	blt.n	80011ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	b2da      	uxtb	r2, r3
 80011a8:	490c      	ldr	r1, [pc, #48]	; (80011dc <__NVIC_SetPriority+0x4c>)
 80011aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ae:	0112      	lsls	r2, r2, #4
 80011b0:	b2d2      	uxtb	r2, r2
 80011b2:	440b      	add	r3, r1
 80011b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011b8:	e00a      	b.n	80011d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	b2da      	uxtb	r2, r3
 80011be:	4908      	ldr	r1, [pc, #32]	; (80011e0 <__NVIC_SetPriority+0x50>)
 80011c0:	79fb      	ldrb	r3, [r7, #7]
 80011c2:	f003 030f 	and.w	r3, r3, #15
 80011c6:	3b04      	subs	r3, #4
 80011c8:	0112      	lsls	r2, r2, #4
 80011ca:	b2d2      	uxtb	r2, r2
 80011cc:	440b      	add	r3, r1
 80011ce:	761a      	strb	r2, [r3, #24]
}
 80011d0:	bf00      	nop
 80011d2:	370c      	adds	r7, #12
 80011d4:	46bd      	mov	sp, r7
 80011d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011da:	4770      	bx	lr
 80011dc:	e000e100 	.word	0xe000e100
 80011e0:	e000ed00 	.word	0xe000ed00

080011e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b089      	sub	sp, #36	; 0x24
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	60f8      	str	r0, [r7, #12]
 80011ec:	60b9      	str	r1, [r7, #8]
 80011ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	f003 0307 	and.w	r3, r3, #7
 80011f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011f8:	69fb      	ldr	r3, [r7, #28]
 80011fa:	f1c3 0307 	rsb	r3, r3, #7
 80011fe:	2b04      	cmp	r3, #4
 8001200:	bf28      	it	cs
 8001202:	2304      	movcs	r3, #4
 8001204:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001206:	69fb      	ldr	r3, [r7, #28]
 8001208:	3304      	adds	r3, #4
 800120a:	2b06      	cmp	r3, #6
 800120c:	d902      	bls.n	8001214 <NVIC_EncodePriority+0x30>
 800120e:	69fb      	ldr	r3, [r7, #28]
 8001210:	3b03      	subs	r3, #3
 8001212:	e000      	b.n	8001216 <NVIC_EncodePriority+0x32>
 8001214:	2300      	movs	r3, #0
 8001216:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001218:	f04f 32ff 	mov.w	r2, #4294967295
 800121c:	69bb      	ldr	r3, [r7, #24]
 800121e:	fa02 f303 	lsl.w	r3, r2, r3
 8001222:	43da      	mvns	r2, r3
 8001224:	68bb      	ldr	r3, [r7, #8]
 8001226:	401a      	ands	r2, r3
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800122c:	f04f 31ff 	mov.w	r1, #4294967295
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	fa01 f303 	lsl.w	r3, r1, r3
 8001236:	43d9      	mvns	r1, r3
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800123c:	4313      	orrs	r3, r2
         );
}
 800123e:	4618      	mov	r0, r3
 8001240:	3724      	adds	r7, #36	; 0x24
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr

0800124a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800124a:	b580      	push	{r7, lr}
 800124c:	b082      	sub	sp, #8
 800124e:	af00      	add	r7, sp, #0
 8001250:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001252:	6878      	ldr	r0, [r7, #4]
 8001254:	f7ff ff4c 	bl	80010f0 <__NVIC_SetPriorityGrouping>
}
 8001258:	bf00      	nop
 800125a:	3708      	adds	r7, #8
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}

08001260 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001260:	b580      	push	{r7, lr}
 8001262:	b086      	sub	sp, #24
 8001264:	af00      	add	r7, sp, #0
 8001266:	4603      	mov	r3, r0
 8001268:	60b9      	str	r1, [r7, #8]
 800126a:	607a      	str	r2, [r7, #4]
 800126c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800126e:	2300      	movs	r3, #0
 8001270:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001272:	f7ff ff61 	bl	8001138 <__NVIC_GetPriorityGrouping>
 8001276:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001278:	687a      	ldr	r2, [r7, #4]
 800127a:	68b9      	ldr	r1, [r7, #8]
 800127c:	6978      	ldr	r0, [r7, #20]
 800127e:	f7ff ffb1 	bl	80011e4 <NVIC_EncodePriority>
 8001282:	4602      	mov	r2, r0
 8001284:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001288:	4611      	mov	r1, r2
 800128a:	4618      	mov	r0, r3
 800128c:	f7ff ff80 	bl	8001190 <__NVIC_SetPriority>
}
 8001290:	bf00      	nop
 8001292:	3718      	adds	r7, #24
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}

08001298 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
 800129e:	4603      	mov	r3, r0
 80012a0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a6:	4618      	mov	r0, r3
 80012a8:	f7ff ff54 	bl	8001154 <__NVIC_EnableIRQ>
}
 80012ac:	bf00      	nop
 80012ae:	3708      	adds	r7, #8
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}

080012b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b089      	sub	sp, #36	; 0x24
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
 80012bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80012be:	2300      	movs	r3, #0
 80012c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80012c2:	2300      	movs	r3, #0
 80012c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80012c6:	2300      	movs	r3, #0
 80012c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012ca:	2300      	movs	r3, #0
 80012cc:	61fb      	str	r3, [r7, #28]
 80012ce:	e159      	b.n	8001584 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80012d0:	2201      	movs	r2, #1
 80012d2:	69fb      	ldr	r3, [r7, #28]
 80012d4:	fa02 f303 	lsl.w	r3, r2, r3
 80012d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	697a      	ldr	r2, [r7, #20]
 80012e0:	4013      	ands	r3, r2
 80012e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80012e4:	693a      	ldr	r2, [r7, #16]
 80012e6:	697b      	ldr	r3, [r7, #20]
 80012e8:	429a      	cmp	r2, r3
 80012ea:	f040 8148 	bne.w	800157e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	f003 0303 	and.w	r3, r3, #3
 80012f6:	2b01      	cmp	r3, #1
 80012f8:	d005      	beq.n	8001306 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001302:	2b02      	cmp	r3, #2
 8001304:	d130      	bne.n	8001368 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	689b      	ldr	r3, [r3, #8]
 800130a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800130c:	69fb      	ldr	r3, [r7, #28]
 800130e:	005b      	lsls	r3, r3, #1
 8001310:	2203      	movs	r2, #3
 8001312:	fa02 f303 	lsl.w	r3, r2, r3
 8001316:	43db      	mvns	r3, r3
 8001318:	69ba      	ldr	r2, [r7, #24]
 800131a:	4013      	ands	r3, r2
 800131c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	68da      	ldr	r2, [r3, #12]
 8001322:	69fb      	ldr	r3, [r7, #28]
 8001324:	005b      	lsls	r3, r3, #1
 8001326:	fa02 f303 	lsl.w	r3, r2, r3
 800132a:	69ba      	ldr	r2, [r7, #24]
 800132c:	4313      	orrs	r3, r2
 800132e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	69ba      	ldr	r2, [r7, #24]
 8001334:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800133c:	2201      	movs	r2, #1
 800133e:	69fb      	ldr	r3, [r7, #28]
 8001340:	fa02 f303 	lsl.w	r3, r2, r3
 8001344:	43db      	mvns	r3, r3
 8001346:	69ba      	ldr	r2, [r7, #24]
 8001348:	4013      	ands	r3, r2
 800134a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	091b      	lsrs	r3, r3, #4
 8001352:	f003 0201 	and.w	r2, r3, #1
 8001356:	69fb      	ldr	r3, [r7, #28]
 8001358:	fa02 f303 	lsl.w	r3, r2, r3
 800135c:	69ba      	ldr	r2, [r7, #24]
 800135e:	4313      	orrs	r3, r2
 8001360:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	69ba      	ldr	r2, [r7, #24]
 8001366:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	f003 0303 	and.w	r3, r3, #3
 8001370:	2b03      	cmp	r3, #3
 8001372:	d017      	beq.n	80013a4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	68db      	ldr	r3, [r3, #12]
 8001378:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800137a:	69fb      	ldr	r3, [r7, #28]
 800137c:	005b      	lsls	r3, r3, #1
 800137e:	2203      	movs	r2, #3
 8001380:	fa02 f303 	lsl.w	r3, r2, r3
 8001384:	43db      	mvns	r3, r3
 8001386:	69ba      	ldr	r2, [r7, #24]
 8001388:	4013      	ands	r3, r2
 800138a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	689a      	ldr	r2, [r3, #8]
 8001390:	69fb      	ldr	r3, [r7, #28]
 8001392:	005b      	lsls	r3, r3, #1
 8001394:	fa02 f303 	lsl.w	r3, r2, r3
 8001398:	69ba      	ldr	r2, [r7, #24]
 800139a:	4313      	orrs	r3, r2
 800139c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	69ba      	ldr	r2, [r7, #24]
 80013a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	f003 0303 	and.w	r3, r3, #3
 80013ac:	2b02      	cmp	r3, #2
 80013ae:	d123      	bne.n	80013f8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013b0:	69fb      	ldr	r3, [r7, #28]
 80013b2:	08da      	lsrs	r2, r3, #3
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	3208      	adds	r2, #8
 80013b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80013be:	69fb      	ldr	r3, [r7, #28]
 80013c0:	f003 0307 	and.w	r3, r3, #7
 80013c4:	009b      	lsls	r3, r3, #2
 80013c6:	220f      	movs	r2, #15
 80013c8:	fa02 f303 	lsl.w	r3, r2, r3
 80013cc:	43db      	mvns	r3, r3
 80013ce:	69ba      	ldr	r2, [r7, #24]
 80013d0:	4013      	ands	r3, r2
 80013d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	691a      	ldr	r2, [r3, #16]
 80013d8:	69fb      	ldr	r3, [r7, #28]
 80013da:	f003 0307 	and.w	r3, r3, #7
 80013de:	009b      	lsls	r3, r3, #2
 80013e0:	fa02 f303 	lsl.w	r3, r2, r3
 80013e4:	69ba      	ldr	r2, [r7, #24]
 80013e6:	4313      	orrs	r3, r2
 80013e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80013ea:	69fb      	ldr	r3, [r7, #28]
 80013ec:	08da      	lsrs	r2, r3, #3
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	3208      	adds	r2, #8
 80013f2:	69b9      	ldr	r1, [r7, #24]
 80013f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80013fe:	69fb      	ldr	r3, [r7, #28]
 8001400:	005b      	lsls	r3, r3, #1
 8001402:	2203      	movs	r2, #3
 8001404:	fa02 f303 	lsl.w	r3, r2, r3
 8001408:	43db      	mvns	r3, r3
 800140a:	69ba      	ldr	r2, [r7, #24]
 800140c:	4013      	ands	r3, r2
 800140e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	f003 0203 	and.w	r2, r3, #3
 8001418:	69fb      	ldr	r3, [r7, #28]
 800141a:	005b      	lsls	r3, r3, #1
 800141c:	fa02 f303 	lsl.w	r3, r2, r3
 8001420:	69ba      	ldr	r2, [r7, #24]
 8001422:	4313      	orrs	r3, r2
 8001424:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	69ba      	ldr	r2, [r7, #24]
 800142a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001434:	2b00      	cmp	r3, #0
 8001436:	f000 80a2 	beq.w	800157e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800143a:	2300      	movs	r3, #0
 800143c:	60fb      	str	r3, [r7, #12]
 800143e:	4b57      	ldr	r3, [pc, #348]	; (800159c <HAL_GPIO_Init+0x2e8>)
 8001440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001442:	4a56      	ldr	r2, [pc, #344]	; (800159c <HAL_GPIO_Init+0x2e8>)
 8001444:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001448:	6453      	str	r3, [r2, #68]	; 0x44
 800144a:	4b54      	ldr	r3, [pc, #336]	; (800159c <HAL_GPIO_Init+0x2e8>)
 800144c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800144e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001452:	60fb      	str	r3, [r7, #12]
 8001454:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001456:	4a52      	ldr	r2, [pc, #328]	; (80015a0 <HAL_GPIO_Init+0x2ec>)
 8001458:	69fb      	ldr	r3, [r7, #28]
 800145a:	089b      	lsrs	r3, r3, #2
 800145c:	3302      	adds	r3, #2
 800145e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001462:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001464:	69fb      	ldr	r3, [r7, #28]
 8001466:	f003 0303 	and.w	r3, r3, #3
 800146a:	009b      	lsls	r3, r3, #2
 800146c:	220f      	movs	r2, #15
 800146e:	fa02 f303 	lsl.w	r3, r2, r3
 8001472:	43db      	mvns	r3, r3
 8001474:	69ba      	ldr	r2, [r7, #24]
 8001476:	4013      	ands	r3, r2
 8001478:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	4a49      	ldr	r2, [pc, #292]	; (80015a4 <HAL_GPIO_Init+0x2f0>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d019      	beq.n	80014b6 <HAL_GPIO_Init+0x202>
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	4a48      	ldr	r2, [pc, #288]	; (80015a8 <HAL_GPIO_Init+0x2f4>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d013      	beq.n	80014b2 <HAL_GPIO_Init+0x1fe>
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	4a47      	ldr	r2, [pc, #284]	; (80015ac <HAL_GPIO_Init+0x2f8>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d00d      	beq.n	80014ae <HAL_GPIO_Init+0x1fa>
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	4a46      	ldr	r2, [pc, #280]	; (80015b0 <HAL_GPIO_Init+0x2fc>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d007      	beq.n	80014aa <HAL_GPIO_Init+0x1f6>
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	4a45      	ldr	r2, [pc, #276]	; (80015b4 <HAL_GPIO_Init+0x300>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d101      	bne.n	80014a6 <HAL_GPIO_Init+0x1f2>
 80014a2:	2304      	movs	r3, #4
 80014a4:	e008      	b.n	80014b8 <HAL_GPIO_Init+0x204>
 80014a6:	2307      	movs	r3, #7
 80014a8:	e006      	b.n	80014b8 <HAL_GPIO_Init+0x204>
 80014aa:	2303      	movs	r3, #3
 80014ac:	e004      	b.n	80014b8 <HAL_GPIO_Init+0x204>
 80014ae:	2302      	movs	r3, #2
 80014b0:	e002      	b.n	80014b8 <HAL_GPIO_Init+0x204>
 80014b2:	2301      	movs	r3, #1
 80014b4:	e000      	b.n	80014b8 <HAL_GPIO_Init+0x204>
 80014b6:	2300      	movs	r3, #0
 80014b8:	69fa      	ldr	r2, [r7, #28]
 80014ba:	f002 0203 	and.w	r2, r2, #3
 80014be:	0092      	lsls	r2, r2, #2
 80014c0:	4093      	lsls	r3, r2
 80014c2:	69ba      	ldr	r2, [r7, #24]
 80014c4:	4313      	orrs	r3, r2
 80014c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014c8:	4935      	ldr	r1, [pc, #212]	; (80015a0 <HAL_GPIO_Init+0x2ec>)
 80014ca:	69fb      	ldr	r3, [r7, #28]
 80014cc:	089b      	lsrs	r3, r3, #2
 80014ce:	3302      	adds	r3, #2
 80014d0:	69ba      	ldr	r2, [r7, #24]
 80014d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014d6:	4b38      	ldr	r3, [pc, #224]	; (80015b8 <HAL_GPIO_Init+0x304>)
 80014d8:	689b      	ldr	r3, [r3, #8]
 80014da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014dc:	693b      	ldr	r3, [r7, #16]
 80014de:	43db      	mvns	r3, r3
 80014e0:	69ba      	ldr	r2, [r7, #24]
 80014e2:	4013      	ands	r3, r2
 80014e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d003      	beq.n	80014fa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80014f2:	69ba      	ldr	r2, [r7, #24]
 80014f4:	693b      	ldr	r3, [r7, #16]
 80014f6:	4313      	orrs	r3, r2
 80014f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80014fa:	4a2f      	ldr	r2, [pc, #188]	; (80015b8 <HAL_GPIO_Init+0x304>)
 80014fc:	69bb      	ldr	r3, [r7, #24]
 80014fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001500:	4b2d      	ldr	r3, [pc, #180]	; (80015b8 <HAL_GPIO_Init+0x304>)
 8001502:	68db      	ldr	r3, [r3, #12]
 8001504:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001506:	693b      	ldr	r3, [r7, #16]
 8001508:	43db      	mvns	r3, r3
 800150a:	69ba      	ldr	r2, [r7, #24]
 800150c:	4013      	ands	r3, r2
 800150e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001518:	2b00      	cmp	r3, #0
 800151a:	d003      	beq.n	8001524 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800151c:	69ba      	ldr	r2, [r7, #24]
 800151e:	693b      	ldr	r3, [r7, #16]
 8001520:	4313      	orrs	r3, r2
 8001522:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001524:	4a24      	ldr	r2, [pc, #144]	; (80015b8 <HAL_GPIO_Init+0x304>)
 8001526:	69bb      	ldr	r3, [r7, #24]
 8001528:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800152a:	4b23      	ldr	r3, [pc, #140]	; (80015b8 <HAL_GPIO_Init+0x304>)
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001530:	693b      	ldr	r3, [r7, #16]
 8001532:	43db      	mvns	r3, r3
 8001534:	69ba      	ldr	r2, [r7, #24]
 8001536:	4013      	ands	r3, r2
 8001538:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001542:	2b00      	cmp	r3, #0
 8001544:	d003      	beq.n	800154e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001546:	69ba      	ldr	r2, [r7, #24]
 8001548:	693b      	ldr	r3, [r7, #16]
 800154a:	4313      	orrs	r3, r2
 800154c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800154e:	4a1a      	ldr	r2, [pc, #104]	; (80015b8 <HAL_GPIO_Init+0x304>)
 8001550:	69bb      	ldr	r3, [r7, #24]
 8001552:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001554:	4b18      	ldr	r3, [pc, #96]	; (80015b8 <HAL_GPIO_Init+0x304>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800155a:	693b      	ldr	r3, [r7, #16]
 800155c:	43db      	mvns	r3, r3
 800155e:	69ba      	ldr	r2, [r7, #24]
 8001560:	4013      	ands	r3, r2
 8001562:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800156c:	2b00      	cmp	r3, #0
 800156e:	d003      	beq.n	8001578 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001570:	69ba      	ldr	r2, [r7, #24]
 8001572:	693b      	ldr	r3, [r7, #16]
 8001574:	4313      	orrs	r3, r2
 8001576:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001578:	4a0f      	ldr	r2, [pc, #60]	; (80015b8 <HAL_GPIO_Init+0x304>)
 800157a:	69bb      	ldr	r3, [r7, #24]
 800157c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800157e:	69fb      	ldr	r3, [r7, #28]
 8001580:	3301      	adds	r3, #1
 8001582:	61fb      	str	r3, [r7, #28]
 8001584:	69fb      	ldr	r3, [r7, #28]
 8001586:	2b0f      	cmp	r3, #15
 8001588:	f67f aea2 	bls.w	80012d0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800158c:	bf00      	nop
 800158e:	bf00      	nop
 8001590:	3724      	adds	r7, #36	; 0x24
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr
 800159a:	bf00      	nop
 800159c:	40023800 	.word	0x40023800
 80015a0:	40013800 	.word	0x40013800
 80015a4:	40020000 	.word	0x40020000
 80015a8:	40020400 	.word	0x40020400
 80015ac:	40020800 	.word	0x40020800
 80015b0:	40020c00 	.word	0x40020c00
 80015b4:	40021000 	.word	0x40021000
 80015b8:	40013c00 	.word	0x40013c00

080015bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015bc:	b480      	push	{r7}
 80015be:	b083      	sub	sp, #12
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
 80015c4:	460b      	mov	r3, r1
 80015c6:	807b      	strh	r3, [r7, #2]
 80015c8:	4613      	mov	r3, r2
 80015ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015cc:	787b      	ldrb	r3, [r7, #1]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d003      	beq.n	80015da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015d2:	887a      	ldrh	r2, [r7, #2]
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80015d8:	e003      	b.n	80015e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80015da:	887b      	ldrh	r3, [r7, #2]
 80015dc:	041a      	lsls	r2, r3, #16
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	619a      	str	r2, [r3, #24]
}
 80015e2:	bf00      	nop
 80015e4:	370c      	adds	r7, #12
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr
	...

080015f0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b086      	sub	sp, #24
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d101      	bne.n	8001602 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015fe:	2301      	movs	r3, #1
 8001600:	e267      	b.n	8001ad2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f003 0301 	and.w	r3, r3, #1
 800160a:	2b00      	cmp	r3, #0
 800160c:	d075      	beq.n	80016fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800160e:	4b88      	ldr	r3, [pc, #544]	; (8001830 <HAL_RCC_OscConfig+0x240>)
 8001610:	689b      	ldr	r3, [r3, #8]
 8001612:	f003 030c 	and.w	r3, r3, #12
 8001616:	2b04      	cmp	r3, #4
 8001618:	d00c      	beq.n	8001634 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800161a:	4b85      	ldr	r3, [pc, #532]	; (8001830 <HAL_RCC_OscConfig+0x240>)
 800161c:	689b      	ldr	r3, [r3, #8]
 800161e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001622:	2b08      	cmp	r3, #8
 8001624:	d112      	bne.n	800164c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001626:	4b82      	ldr	r3, [pc, #520]	; (8001830 <HAL_RCC_OscConfig+0x240>)
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800162e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001632:	d10b      	bne.n	800164c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001634:	4b7e      	ldr	r3, [pc, #504]	; (8001830 <HAL_RCC_OscConfig+0x240>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800163c:	2b00      	cmp	r3, #0
 800163e:	d05b      	beq.n	80016f8 <HAL_RCC_OscConfig+0x108>
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d157      	bne.n	80016f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001648:	2301      	movs	r3, #1
 800164a:	e242      	b.n	8001ad2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001654:	d106      	bne.n	8001664 <HAL_RCC_OscConfig+0x74>
 8001656:	4b76      	ldr	r3, [pc, #472]	; (8001830 <HAL_RCC_OscConfig+0x240>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4a75      	ldr	r2, [pc, #468]	; (8001830 <HAL_RCC_OscConfig+0x240>)
 800165c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001660:	6013      	str	r3, [r2, #0]
 8001662:	e01d      	b.n	80016a0 <HAL_RCC_OscConfig+0xb0>
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800166c:	d10c      	bne.n	8001688 <HAL_RCC_OscConfig+0x98>
 800166e:	4b70      	ldr	r3, [pc, #448]	; (8001830 <HAL_RCC_OscConfig+0x240>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4a6f      	ldr	r2, [pc, #444]	; (8001830 <HAL_RCC_OscConfig+0x240>)
 8001674:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001678:	6013      	str	r3, [r2, #0]
 800167a:	4b6d      	ldr	r3, [pc, #436]	; (8001830 <HAL_RCC_OscConfig+0x240>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4a6c      	ldr	r2, [pc, #432]	; (8001830 <HAL_RCC_OscConfig+0x240>)
 8001680:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001684:	6013      	str	r3, [r2, #0]
 8001686:	e00b      	b.n	80016a0 <HAL_RCC_OscConfig+0xb0>
 8001688:	4b69      	ldr	r3, [pc, #420]	; (8001830 <HAL_RCC_OscConfig+0x240>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a68      	ldr	r2, [pc, #416]	; (8001830 <HAL_RCC_OscConfig+0x240>)
 800168e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001692:	6013      	str	r3, [r2, #0]
 8001694:	4b66      	ldr	r3, [pc, #408]	; (8001830 <HAL_RCC_OscConfig+0x240>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a65      	ldr	r2, [pc, #404]	; (8001830 <HAL_RCC_OscConfig+0x240>)
 800169a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800169e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d013      	beq.n	80016d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016a8:	f7ff fd16 	bl	80010d8 <HAL_GetTick>
 80016ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016ae:	e008      	b.n	80016c2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016b0:	f7ff fd12 	bl	80010d8 <HAL_GetTick>
 80016b4:	4602      	mov	r2, r0
 80016b6:	693b      	ldr	r3, [r7, #16]
 80016b8:	1ad3      	subs	r3, r2, r3
 80016ba:	2b64      	cmp	r3, #100	; 0x64
 80016bc:	d901      	bls.n	80016c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80016be:	2303      	movs	r3, #3
 80016c0:	e207      	b.n	8001ad2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016c2:	4b5b      	ldr	r3, [pc, #364]	; (8001830 <HAL_RCC_OscConfig+0x240>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d0f0      	beq.n	80016b0 <HAL_RCC_OscConfig+0xc0>
 80016ce:	e014      	b.n	80016fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016d0:	f7ff fd02 	bl	80010d8 <HAL_GetTick>
 80016d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016d6:	e008      	b.n	80016ea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016d8:	f7ff fcfe 	bl	80010d8 <HAL_GetTick>
 80016dc:	4602      	mov	r2, r0
 80016de:	693b      	ldr	r3, [r7, #16]
 80016e0:	1ad3      	subs	r3, r2, r3
 80016e2:	2b64      	cmp	r3, #100	; 0x64
 80016e4:	d901      	bls.n	80016ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80016e6:	2303      	movs	r3, #3
 80016e8:	e1f3      	b.n	8001ad2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016ea:	4b51      	ldr	r3, [pc, #324]	; (8001830 <HAL_RCC_OscConfig+0x240>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d1f0      	bne.n	80016d8 <HAL_RCC_OscConfig+0xe8>
 80016f6:	e000      	b.n	80016fa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f003 0302 	and.w	r3, r3, #2
 8001702:	2b00      	cmp	r3, #0
 8001704:	d063      	beq.n	80017ce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001706:	4b4a      	ldr	r3, [pc, #296]	; (8001830 <HAL_RCC_OscConfig+0x240>)
 8001708:	689b      	ldr	r3, [r3, #8]
 800170a:	f003 030c 	and.w	r3, r3, #12
 800170e:	2b00      	cmp	r3, #0
 8001710:	d00b      	beq.n	800172a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001712:	4b47      	ldr	r3, [pc, #284]	; (8001830 <HAL_RCC_OscConfig+0x240>)
 8001714:	689b      	ldr	r3, [r3, #8]
 8001716:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800171a:	2b08      	cmp	r3, #8
 800171c:	d11c      	bne.n	8001758 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800171e:	4b44      	ldr	r3, [pc, #272]	; (8001830 <HAL_RCC_OscConfig+0x240>)
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001726:	2b00      	cmp	r3, #0
 8001728:	d116      	bne.n	8001758 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800172a:	4b41      	ldr	r3, [pc, #260]	; (8001830 <HAL_RCC_OscConfig+0x240>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f003 0302 	and.w	r3, r3, #2
 8001732:	2b00      	cmp	r3, #0
 8001734:	d005      	beq.n	8001742 <HAL_RCC_OscConfig+0x152>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	68db      	ldr	r3, [r3, #12]
 800173a:	2b01      	cmp	r3, #1
 800173c:	d001      	beq.n	8001742 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800173e:	2301      	movs	r3, #1
 8001740:	e1c7      	b.n	8001ad2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001742:	4b3b      	ldr	r3, [pc, #236]	; (8001830 <HAL_RCC_OscConfig+0x240>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	691b      	ldr	r3, [r3, #16]
 800174e:	00db      	lsls	r3, r3, #3
 8001750:	4937      	ldr	r1, [pc, #220]	; (8001830 <HAL_RCC_OscConfig+0x240>)
 8001752:	4313      	orrs	r3, r2
 8001754:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001756:	e03a      	b.n	80017ce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	68db      	ldr	r3, [r3, #12]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d020      	beq.n	80017a2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001760:	4b34      	ldr	r3, [pc, #208]	; (8001834 <HAL_RCC_OscConfig+0x244>)
 8001762:	2201      	movs	r2, #1
 8001764:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001766:	f7ff fcb7 	bl	80010d8 <HAL_GetTick>
 800176a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800176c:	e008      	b.n	8001780 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800176e:	f7ff fcb3 	bl	80010d8 <HAL_GetTick>
 8001772:	4602      	mov	r2, r0
 8001774:	693b      	ldr	r3, [r7, #16]
 8001776:	1ad3      	subs	r3, r2, r3
 8001778:	2b02      	cmp	r3, #2
 800177a:	d901      	bls.n	8001780 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800177c:	2303      	movs	r3, #3
 800177e:	e1a8      	b.n	8001ad2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001780:	4b2b      	ldr	r3, [pc, #172]	; (8001830 <HAL_RCC_OscConfig+0x240>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f003 0302 	and.w	r3, r3, #2
 8001788:	2b00      	cmp	r3, #0
 800178a:	d0f0      	beq.n	800176e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800178c:	4b28      	ldr	r3, [pc, #160]	; (8001830 <HAL_RCC_OscConfig+0x240>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	691b      	ldr	r3, [r3, #16]
 8001798:	00db      	lsls	r3, r3, #3
 800179a:	4925      	ldr	r1, [pc, #148]	; (8001830 <HAL_RCC_OscConfig+0x240>)
 800179c:	4313      	orrs	r3, r2
 800179e:	600b      	str	r3, [r1, #0]
 80017a0:	e015      	b.n	80017ce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017a2:	4b24      	ldr	r3, [pc, #144]	; (8001834 <HAL_RCC_OscConfig+0x244>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017a8:	f7ff fc96 	bl	80010d8 <HAL_GetTick>
 80017ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017ae:	e008      	b.n	80017c2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017b0:	f7ff fc92 	bl	80010d8 <HAL_GetTick>
 80017b4:	4602      	mov	r2, r0
 80017b6:	693b      	ldr	r3, [r7, #16]
 80017b8:	1ad3      	subs	r3, r2, r3
 80017ba:	2b02      	cmp	r3, #2
 80017bc:	d901      	bls.n	80017c2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80017be:	2303      	movs	r3, #3
 80017c0:	e187      	b.n	8001ad2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017c2:	4b1b      	ldr	r3, [pc, #108]	; (8001830 <HAL_RCC_OscConfig+0x240>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f003 0302 	and.w	r3, r3, #2
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d1f0      	bne.n	80017b0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f003 0308 	and.w	r3, r3, #8
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d036      	beq.n	8001848 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	695b      	ldr	r3, [r3, #20]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d016      	beq.n	8001810 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017e2:	4b15      	ldr	r3, [pc, #84]	; (8001838 <HAL_RCC_OscConfig+0x248>)
 80017e4:	2201      	movs	r2, #1
 80017e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017e8:	f7ff fc76 	bl	80010d8 <HAL_GetTick>
 80017ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017ee:	e008      	b.n	8001802 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017f0:	f7ff fc72 	bl	80010d8 <HAL_GetTick>
 80017f4:	4602      	mov	r2, r0
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	1ad3      	subs	r3, r2, r3
 80017fa:	2b02      	cmp	r3, #2
 80017fc:	d901      	bls.n	8001802 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80017fe:	2303      	movs	r3, #3
 8001800:	e167      	b.n	8001ad2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001802:	4b0b      	ldr	r3, [pc, #44]	; (8001830 <HAL_RCC_OscConfig+0x240>)
 8001804:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001806:	f003 0302 	and.w	r3, r3, #2
 800180a:	2b00      	cmp	r3, #0
 800180c:	d0f0      	beq.n	80017f0 <HAL_RCC_OscConfig+0x200>
 800180e:	e01b      	b.n	8001848 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001810:	4b09      	ldr	r3, [pc, #36]	; (8001838 <HAL_RCC_OscConfig+0x248>)
 8001812:	2200      	movs	r2, #0
 8001814:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001816:	f7ff fc5f 	bl	80010d8 <HAL_GetTick>
 800181a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800181c:	e00e      	b.n	800183c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800181e:	f7ff fc5b 	bl	80010d8 <HAL_GetTick>
 8001822:	4602      	mov	r2, r0
 8001824:	693b      	ldr	r3, [r7, #16]
 8001826:	1ad3      	subs	r3, r2, r3
 8001828:	2b02      	cmp	r3, #2
 800182a:	d907      	bls.n	800183c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800182c:	2303      	movs	r3, #3
 800182e:	e150      	b.n	8001ad2 <HAL_RCC_OscConfig+0x4e2>
 8001830:	40023800 	.word	0x40023800
 8001834:	42470000 	.word	0x42470000
 8001838:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800183c:	4b88      	ldr	r3, [pc, #544]	; (8001a60 <HAL_RCC_OscConfig+0x470>)
 800183e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001840:	f003 0302 	and.w	r3, r3, #2
 8001844:	2b00      	cmp	r3, #0
 8001846:	d1ea      	bne.n	800181e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f003 0304 	and.w	r3, r3, #4
 8001850:	2b00      	cmp	r3, #0
 8001852:	f000 8097 	beq.w	8001984 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001856:	2300      	movs	r3, #0
 8001858:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800185a:	4b81      	ldr	r3, [pc, #516]	; (8001a60 <HAL_RCC_OscConfig+0x470>)
 800185c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001862:	2b00      	cmp	r3, #0
 8001864:	d10f      	bne.n	8001886 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001866:	2300      	movs	r3, #0
 8001868:	60bb      	str	r3, [r7, #8]
 800186a:	4b7d      	ldr	r3, [pc, #500]	; (8001a60 <HAL_RCC_OscConfig+0x470>)
 800186c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186e:	4a7c      	ldr	r2, [pc, #496]	; (8001a60 <HAL_RCC_OscConfig+0x470>)
 8001870:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001874:	6413      	str	r3, [r2, #64]	; 0x40
 8001876:	4b7a      	ldr	r3, [pc, #488]	; (8001a60 <HAL_RCC_OscConfig+0x470>)
 8001878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800187a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800187e:	60bb      	str	r3, [r7, #8]
 8001880:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001882:	2301      	movs	r3, #1
 8001884:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001886:	4b77      	ldr	r3, [pc, #476]	; (8001a64 <HAL_RCC_OscConfig+0x474>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800188e:	2b00      	cmp	r3, #0
 8001890:	d118      	bne.n	80018c4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001892:	4b74      	ldr	r3, [pc, #464]	; (8001a64 <HAL_RCC_OscConfig+0x474>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4a73      	ldr	r2, [pc, #460]	; (8001a64 <HAL_RCC_OscConfig+0x474>)
 8001898:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800189c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800189e:	f7ff fc1b 	bl	80010d8 <HAL_GetTick>
 80018a2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018a4:	e008      	b.n	80018b8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018a6:	f7ff fc17 	bl	80010d8 <HAL_GetTick>
 80018aa:	4602      	mov	r2, r0
 80018ac:	693b      	ldr	r3, [r7, #16]
 80018ae:	1ad3      	subs	r3, r2, r3
 80018b0:	2b02      	cmp	r3, #2
 80018b2:	d901      	bls.n	80018b8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80018b4:	2303      	movs	r3, #3
 80018b6:	e10c      	b.n	8001ad2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018b8:	4b6a      	ldr	r3, [pc, #424]	; (8001a64 <HAL_RCC_OscConfig+0x474>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d0f0      	beq.n	80018a6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	2b01      	cmp	r3, #1
 80018ca:	d106      	bne.n	80018da <HAL_RCC_OscConfig+0x2ea>
 80018cc:	4b64      	ldr	r3, [pc, #400]	; (8001a60 <HAL_RCC_OscConfig+0x470>)
 80018ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018d0:	4a63      	ldr	r2, [pc, #396]	; (8001a60 <HAL_RCC_OscConfig+0x470>)
 80018d2:	f043 0301 	orr.w	r3, r3, #1
 80018d6:	6713      	str	r3, [r2, #112]	; 0x70
 80018d8:	e01c      	b.n	8001914 <HAL_RCC_OscConfig+0x324>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	689b      	ldr	r3, [r3, #8]
 80018de:	2b05      	cmp	r3, #5
 80018e0:	d10c      	bne.n	80018fc <HAL_RCC_OscConfig+0x30c>
 80018e2:	4b5f      	ldr	r3, [pc, #380]	; (8001a60 <HAL_RCC_OscConfig+0x470>)
 80018e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018e6:	4a5e      	ldr	r2, [pc, #376]	; (8001a60 <HAL_RCC_OscConfig+0x470>)
 80018e8:	f043 0304 	orr.w	r3, r3, #4
 80018ec:	6713      	str	r3, [r2, #112]	; 0x70
 80018ee:	4b5c      	ldr	r3, [pc, #368]	; (8001a60 <HAL_RCC_OscConfig+0x470>)
 80018f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018f2:	4a5b      	ldr	r2, [pc, #364]	; (8001a60 <HAL_RCC_OscConfig+0x470>)
 80018f4:	f043 0301 	orr.w	r3, r3, #1
 80018f8:	6713      	str	r3, [r2, #112]	; 0x70
 80018fa:	e00b      	b.n	8001914 <HAL_RCC_OscConfig+0x324>
 80018fc:	4b58      	ldr	r3, [pc, #352]	; (8001a60 <HAL_RCC_OscConfig+0x470>)
 80018fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001900:	4a57      	ldr	r2, [pc, #348]	; (8001a60 <HAL_RCC_OscConfig+0x470>)
 8001902:	f023 0301 	bic.w	r3, r3, #1
 8001906:	6713      	str	r3, [r2, #112]	; 0x70
 8001908:	4b55      	ldr	r3, [pc, #340]	; (8001a60 <HAL_RCC_OscConfig+0x470>)
 800190a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800190c:	4a54      	ldr	r2, [pc, #336]	; (8001a60 <HAL_RCC_OscConfig+0x470>)
 800190e:	f023 0304 	bic.w	r3, r3, #4
 8001912:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	689b      	ldr	r3, [r3, #8]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d015      	beq.n	8001948 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800191c:	f7ff fbdc 	bl	80010d8 <HAL_GetTick>
 8001920:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001922:	e00a      	b.n	800193a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001924:	f7ff fbd8 	bl	80010d8 <HAL_GetTick>
 8001928:	4602      	mov	r2, r0
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	1ad3      	subs	r3, r2, r3
 800192e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001932:	4293      	cmp	r3, r2
 8001934:	d901      	bls.n	800193a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001936:	2303      	movs	r3, #3
 8001938:	e0cb      	b.n	8001ad2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800193a:	4b49      	ldr	r3, [pc, #292]	; (8001a60 <HAL_RCC_OscConfig+0x470>)
 800193c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800193e:	f003 0302 	and.w	r3, r3, #2
 8001942:	2b00      	cmp	r3, #0
 8001944:	d0ee      	beq.n	8001924 <HAL_RCC_OscConfig+0x334>
 8001946:	e014      	b.n	8001972 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001948:	f7ff fbc6 	bl	80010d8 <HAL_GetTick>
 800194c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800194e:	e00a      	b.n	8001966 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001950:	f7ff fbc2 	bl	80010d8 <HAL_GetTick>
 8001954:	4602      	mov	r2, r0
 8001956:	693b      	ldr	r3, [r7, #16]
 8001958:	1ad3      	subs	r3, r2, r3
 800195a:	f241 3288 	movw	r2, #5000	; 0x1388
 800195e:	4293      	cmp	r3, r2
 8001960:	d901      	bls.n	8001966 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001962:	2303      	movs	r3, #3
 8001964:	e0b5      	b.n	8001ad2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001966:	4b3e      	ldr	r3, [pc, #248]	; (8001a60 <HAL_RCC_OscConfig+0x470>)
 8001968:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800196a:	f003 0302 	and.w	r3, r3, #2
 800196e:	2b00      	cmp	r3, #0
 8001970:	d1ee      	bne.n	8001950 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001972:	7dfb      	ldrb	r3, [r7, #23]
 8001974:	2b01      	cmp	r3, #1
 8001976:	d105      	bne.n	8001984 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001978:	4b39      	ldr	r3, [pc, #228]	; (8001a60 <HAL_RCC_OscConfig+0x470>)
 800197a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800197c:	4a38      	ldr	r2, [pc, #224]	; (8001a60 <HAL_RCC_OscConfig+0x470>)
 800197e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001982:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	699b      	ldr	r3, [r3, #24]
 8001988:	2b00      	cmp	r3, #0
 800198a:	f000 80a1 	beq.w	8001ad0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800198e:	4b34      	ldr	r3, [pc, #208]	; (8001a60 <HAL_RCC_OscConfig+0x470>)
 8001990:	689b      	ldr	r3, [r3, #8]
 8001992:	f003 030c 	and.w	r3, r3, #12
 8001996:	2b08      	cmp	r3, #8
 8001998:	d05c      	beq.n	8001a54 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	699b      	ldr	r3, [r3, #24]
 800199e:	2b02      	cmp	r3, #2
 80019a0:	d141      	bne.n	8001a26 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019a2:	4b31      	ldr	r3, [pc, #196]	; (8001a68 <HAL_RCC_OscConfig+0x478>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019a8:	f7ff fb96 	bl	80010d8 <HAL_GetTick>
 80019ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019ae:	e008      	b.n	80019c2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019b0:	f7ff fb92 	bl	80010d8 <HAL_GetTick>
 80019b4:	4602      	mov	r2, r0
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	1ad3      	subs	r3, r2, r3
 80019ba:	2b02      	cmp	r3, #2
 80019bc:	d901      	bls.n	80019c2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80019be:	2303      	movs	r3, #3
 80019c0:	e087      	b.n	8001ad2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019c2:	4b27      	ldr	r3, [pc, #156]	; (8001a60 <HAL_RCC_OscConfig+0x470>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d1f0      	bne.n	80019b0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	69da      	ldr	r2, [r3, #28]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6a1b      	ldr	r3, [r3, #32]
 80019d6:	431a      	orrs	r2, r3
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019dc:	019b      	lsls	r3, r3, #6
 80019de:	431a      	orrs	r2, r3
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019e4:	085b      	lsrs	r3, r3, #1
 80019e6:	3b01      	subs	r3, #1
 80019e8:	041b      	lsls	r3, r3, #16
 80019ea:	431a      	orrs	r2, r3
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019f0:	061b      	lsls	r3, r3, #24
 80019f2:	491b      	ldr	r1, [pc, #108]	; (8001a60 <HAL_RCC_OscConfig+0x470>)
 80019f4:	4313      	orrs	r3, r2
 80019f6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019f8:	4b1b      	ldr	r3, [pc, #108]	; (8001a68 <HAL_RCC_OscConfig+0x478>)
 80019fa:	2201      	movs	r2, #1
 80019fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019fe:	f7ff fb6b 	bl	80010d8 <HAL_GetTick>
 8001a02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a04:	e008      	b.n	8001a18 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a06:	f7ff fb67 	bl	80010d8 <HAL_GetTick>
 8001a0a:	4602      	mov	r2, r0
 8001a0c:	693b      	ldr	r3, [r7, #16]
 8001a0e:	1ad3      	subs	r3, r2, r3
 8001a10:	2b02      	cmp	r3, #2
 8001a12:	d901      	bls.n	8001a18 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001a14:	2303      	movs	r3, #3
 8001a16:	e05c      	b.n	8001ad2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a18:	4b11      	ldr	r3, [pc, #68]	; (8001a60 <HAL_RCC_OscConfig+0x470>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d0f0      	beq.n	8001a06 <HAL_RCC_OscConfig+0x416>
 8001a24:	e054      	b.n	8001ad0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a26:	4b10      	ldr	r3, [pc, #64]	; (8001a68 <HAL_RCC_OscConfig+0x478>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a2c:	f7ff fb54 	bl	80010d8 <HAL_GetTick>
 8001a30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a32:	e008      	b.n	8001a46 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a34:	f7ff fb50 	bl	80010d8 <HAL_GetTick>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	1ad3      	subs	r3, r2, r3
 8001a3e:	2b02      	cmp	r3, #2
 8001a40:	d901      	bls.n	8001a46 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001a42:	2303      	movs	r3, #3
 8001a44:	e045      	b.n	8001ad2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a46:	4b06      	ldr	r3, [pc, #24]	; (8001a60 <HAL_RCC_OscConfig+0x470>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d1f0      	bne.n	8001a34 <HAL_RCC_OscConfig+0x444>
 8001a52:	e03d      	b.n	8001ad0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	699b      	ldr	r3, [r3, #24]
 8001a58:	2b01      	cmp	r3, #1
 8001a5a:	d107      	bne.n	8001a6c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	e038      	b.n	8001ad2 <HAL_RCC_OscConfig+0x4e2>
 8001a60:	40023800 	.word	0x40023800
 8001a64:	40007000 	.word	0x40007000
 8001a68:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001a6c:	4b1b      	ldr	r3, [pc, #108]	; (8001adc <HAL_RCC_OscConfig+0x4ec>)
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	699b      	ldr	r3, [r3, #24]
 8001a76:	2b01      	cmp	r3, #1
 8001a78:	d028      	beq.n	8001acc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a84:	429a      	cmp	r2, r3
 8001a86:	d121      	bne.n	8001acc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a92:	429a      	cmp	r2, r3
 8001a94:	d11a      	bne.n	8001acc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a96:	68fa      	ldr	r2, [r7, #12]
 8001a98:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	687a      	ldr	r2, [r7, #4]
 8001aa0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001aa2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d111      	bne.n	8001acc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ab2:	085b      	lsrs	r3, r3, #1
 8001ab4:	3b01      	subs	r3, #1
 8001ab6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	d107      	bne.n	8001acc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ac6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	d001      	beq.n	8001ad0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001acc:	2301      	movs	r3, #1
 8001ace:	e000      	b.n	8001ad2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001ad0:	2300      	movs	r3, #0
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3718      	adds	r7, #24
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	40023800 	.word	0x40023800

08001ae0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b084      	sub	sp, #16
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
 8001ae8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d101      	bne.n	8001af4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001af0:	2301      	movs	r3, #1
 8001af2:	e0cc      	b.n	8001c8e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001af4:	4b68      	ldr	r3, [pc, #416]	; (8001c98 <HAL_RCC_ClockConfig+0x1b8>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f003 0307 	and.w	r3, r3, #7
 8001afc:	683a      	ldr	r2, [r7, #0]
 8001afe:	429a      	cmp	r2, r3
 8001b00:	d90c      	bls.n	8001b1c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b02:	4b65      	ldr	r3, [pc, #404]	; (8001c98 <HAL_RCC_ClockConfig+0x1b8>)
 8001b04:	683a      	ldr	r2, [r7, #0]
 8001b06:	b2d2      	uxtb	r2, r2
 8001b08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b0a:	4b63      	ldr	r3, [pc, #396]	; (8001c98 <HAL_RCC_ClockConfig+0x1b8>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f003 0307 	and.w	r3, r3, #7
 8001b12:	683a      	ldr	r2, [r7, #0]
 8001b14:	429a      	cmp	r2, r3
 8001b16:	d001      	beq.n	8001b1c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	e0b8      	b.n	8001c8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f003 0302 	and.w	r3, r3, #2
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d020      	beq.n	8001b6a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f003 0304 	and.w	r3, r3, #4
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d005      	beq.n	8001b40 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b34:	4b59      	ldr	r3, [pc, #356]	; (8001c9c <HAL_RCC_ClockConfig+0x1bc>)
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	4a58      	ldr	r2, [pc, #352]	; (8001c9c <HAL_RCC_ClockConfig+0x1bc>)
 8001b3a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001b3e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f003 0308 	and.w	r3, r3, #8
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d005      	beq.n	8001b58 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b4c:	4b53      	ldr	r3, [pc, #332]	; (8001c9c <HAL_RCC_ClockConfig+0x1bc>)
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	4a52      	ldr	r2, [pc, #328]	; (8001c9c <HAL_RCC_ClockConfig+0x1bc>)
 8001b52:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001b56:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b58:	4b50      	ldr	r3, [pc, #320]	; (8001c9c <HAL_RCC_ClockConfig+0x1bc>)
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	494d      	ldr	r1, [pc, #308]	; (8001c9c <HAL_RCC_ClockConfig+0x1bc>)
 8001b66:	4313      	orrs	r3, r2
 8001b68:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f003 0301 	and.w	r3, r3, #1
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d044      	beq.n	8001c00 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	2b01      	cmp	r3, #1
 8001b7c:	d107      	bne.n	8001b8e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b7e:	4b47      	ldr	r3, [pc, #284]	; (8001c9c <HAL_RCC_ClockConfig+0x1bc>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d119      	bne.n	8001bbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e07f      	b.n	8001c8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	2b02      	cmp	r3, #2
 8001b94:	d003      	beq.n	8001b9e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b9a:	2b03      	cmp	r3, #3
 8001b9c:	d107      	bne.n	8001bae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b9e:	4b3f      	ldr	r3, [pc, #252]	; (8001c9c <HAL_RCC_ClockConfig+0x1bc>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d109      	bne.n	8001bbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
 8001bac:	e06f      	b.n	8001c8e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bae:	4b3b      	ldr	r3, [pc, #236]	; (8001c9c <HAL_RCC_ClockConfig+0x1bc>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f003 0302 	and.w	r3, r3, #2
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d101      	bne.n	8001bbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e067      	b.n	8001c8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001bbe:	4b37      	ldr	r3, [pc, #220]	; (8001c9c <HAL_RCC_ClockConfig+0x1bc>)
 8001bc0:	689b      	ldr	r3, [r3, #8]
 8001bc2:	f023 0203 	bic.w	r2, r3, #3
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	4934      	ldr	r1, [pc, #208]	; (8001c9c <HAL_RCC_ClockConfig+0x1bc>)
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001bd0:	f7ff fa82 	bl	80010d8 <HAL_GetTick>
 8001bd4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bd6:	e00a      	b.n	8001bee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bd8:	f7ff fa7e 	bl	80010d8 <HAL_GetTick>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	1ad3      	subs	r3, r2, r3
 8001be2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d901      	bls.n	8001bee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001bea:	2303      	movs	r3, #3
 8001bec:	e04f      	b.n	8001c8e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bee:	4b2b      	ldr	r3, [pc, #172]	; (8001c9c <HAL_RCC_ClockConfig+0x1bc>)
 8001bf0:	689b      	ldr	r3, [r3, #8]
 8001bf2:	f003 020c 	and.w	r2, r3, #12
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	d1eb      	bne.n	8001bd8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c00:	4b25      	ldr	r3, [pc, #148]	; (8001c98 <HAL_RCC_ClockConfig+0x1b8>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f003 0307 	and.w	r3, r3, #7
 8001c08:	683a      	ldr	r2, [r7, #0]
 8001c0a:	429a      	cmp	r2, r3
 8001c0c:	d20c      	bcs.n	8001c28 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c0e:	4b22      	ldr	r3, [pc, #136]	; (8001c98 <HAL_RCC_ClockConfig+0x1b8>)
 8001c10:	683a      	ldr	r2, [r7, #0]
 8001c12:	b2d2      	uxtb	r2, r2
 8001c14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c16:	4b20      	ldr	r3, [pc, #128]	; (8001c98 <HAL_RCC_ClockConfig+0x1b8>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f003 0307 	and.w	r3, r3, #7
 8001c1e:	683a      	ldr	r2, [r7, #0]
 8001c20:	429a      	cmp	r2, r3
 8001c22:	d001      	beq.n	8001c28 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001c24:	2301      	movs	r3, #1
 8001c26:	e032      	b.n	8001c8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f003 0304 	and.w	r3, r3, #4
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d008      	beq.n	8001c46 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c34:	4b19      	ldr	r3, [pc, #100]	; (8001c9c <HAL_RCC_ClockConfig+0x1bc>)
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	68db      	ldr	r3, [r3, #12]
 8001c40:	4916      	ldr	r1, [pc, #88]	; (8001c9c <HAL_RCC_ClockConfig+0x1bc>)
 8001c42:	4313      	orrs	r3, r2
 8001c44:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f003 0308 	and.w	r3, r3, #8
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d009      	beq.n	8001c66 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c52:	4b12      	ldr	r3, [pc, #72]	; (8001c9c <HAL_RCC_ClockConfig+0x1bc>)
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	691b      	ldr	r3, [r3, #16]
 8001c5e:	00db      	lsls	r3, r3, #3
 8001c60:	490e      	ldr	r1, [pc, #56]	; (8001c9c <HAL_RCC_ClockConfig+0x1bc>)
 8001c62:	4313      	orrs	r3, r2
 8001c64:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001c66:	f000 f821 	bl	8001cac <HAL_RCC_GetSysClockFreq>
 8001c6a:	4602      	mov	r2, r0
 8001c6c:	4b0b      	ldr	r3, [pc, #44]	; (8001c9c <HAL_RCC_ClockConfig+0x1bc>)
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	091b      	lsrs	r3, r3, #4
 8001c72:	f003 030f 	and.w	r3, r3, #15
 8001c76:	490a      	ldr	r1, [pc, #40]	; (8001ca0 <HAL_RCC_ClockConfig+0x1c0>)
 8001c78:	5ccb      	ldrb	r3, [r1, r3]
 8001c7a:	fa22 f303 	lsr.w	r3, r2, r3
 8001c7e:	4a09      	ldr	r2, [pc, #36]	; (8001ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001c82:	4b09      	ldr	r3, [pc, #36]	; (8001ca8 <HAL_RCC_ClockConfig+0x1c8>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4618      	mov	r0, r3
 8001c88:	f7ff f90e 	bl	8000ea8 <HAL_InitTick>

  return HAL_OK;
 8001c8c:	2300      	movs	r3, #0
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	3710      	adds	r7, #16
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	40023c00 	.word	0x40023c00
 8001c9c:	40023800 	.word	0x40023800
 8001ca0:	08004cf4 	.word	0x08004cf4
 8001ca4:	20000004 	.word	0x20000004
 8001ca8:	20000008 	.word	0x20000008

08001cac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001cb0:	b090      	sub	sp, #64	; 0x40
 8001cb2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	637b      	str	r3, [r7, #52]	; 0x34
 8001cb8:	2300      	movs	r3, #0
 8001cba:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001cc4:	4b59      	ldr	r3, [pc, #356]	; (8001e2c <HAL_RCC_GetSysClockFreq+0x180>)
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	f003 030c 	and.w	r3, r3, #12
 8001ccc:	2b08      	cmp	r3, #8
 8001cce:	d00d      	beq.n	8001cec <HAL_RCC_GetSysClockFreq+0x40>
 8001cd0:	2b08      	cmp	r3, #8
 8001cd2:	f200 80a1 	bhi.w	8001e18 <HAL_RCC_GetSysClockFreq+0x16c>
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d002      	beq.n	8001ce0 <HAL_RCC_GetSysClockFreq+0x34>
 8001cda:	2b04      	cmp	r3, #4
 8001cdc:	d003      	beq.n	8001ce6 <HAL_RCC_GetSysClockFreq+0x3a>
 8001cde:	e09b      	b.n	8001e18 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ce0:	4b53      	ldr	r3, [pc, #332]	; (8001e30 <HAL_RCC_GetSysClockFreq+0x184>)
 8001ce2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001ce4:	e09b      	b.n	8001e1e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001ce6:	4b53      	ldr	r3, [pc, #332]	; (8001e34 <HAL_RCC_GetSysClockFreq+0x188>)
 8001ce8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001cea:	e098      	b.n	8001e1e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001cec:	4b4f      	ldr	r3, [pc, #316]	; (8001e2c <HAL_RCC_GetSysClockFreq+0x180>)
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001cf4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001cf6:	4b4d      	ldr	r3, [pc, #308]	; (8001e2c <HAL_RCC_GetSysClockFreq+0x180>)
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d028      	beq.n	8001d54 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d02:	4b4a      	ldr	r3, [pc, #296]	; (8001e2c <HAL_RCC_GetSysClockFreq+0x180>)
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	099b      	lsrs	r3, r3, #6
 8001d08:	2200      	movs	r2, #0
 8001d0a:	623b      	str	r3, [r7, #32]
 8001d0c:	627a      	str	r2, [r7, #36]	; 0x24
 8001d0e:	6a3b      	ldr	r3, [r7, #32]
 8001d10:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001d14:	2100      	movs	r1, #0
 8001d16:	4b47      	ldr	r3, [pc, #284]	; (8001e34 <HAL_RCC_GetSysClockFreq+0x188>)
 8001d18:	fb03 f201 	mul.w	r2, r3, r1
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	fb00 f303 	mul.w	r3, r0, r3
 8001d22:	4413      	add	r3, r2
 8001d24:	4a43      	ldr	r2, [pc, #268]	; (8001e34 <HAL_RCC_GetSysClockFreq+0x188>)
 8001d26:	fba0 1202 	umull	r1, r2, r0, r2
 8001d2a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001d2c:	460a      	mov	r2, r1
 8001d2e:	62ba      	str	r2, [r7, #40]	; 0x28
 8001d30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d32:	4413      	add	r3, r2
 8001d34:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d38:	2200      	movs	r2, #0
 8001d3a:	61bb      	str	r3, [r7, #24]
 8001d3c:	61fa      	str	r2, [r7, #28]
 8001d3e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d42:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001d46:	f7fe fa4b 	bl	80001e0 <__aeabi_uldivmod>
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	460b      	mov	r3, r1
 8001d4e:	4613      	mov	r3, r2
 8001d50:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001d52:	e053      	b.n	8001dfc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d54:	4b35      	ldr	r3, [pc, #212]	; (8001e2c <HAL_RCC_GetSysClockFreq+0x180>)
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	099b      	lsrs	r3, r3, #6
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	613b      	str	r3, [r7, #16]
 8001d5e:	617a      	str	r2, [r7, #20]
 8001d60:	693b      	ldr	r3, [r7, #16]
 8001d62:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001d66:	f04f 0b00 	mov.w	fp, #0
 8001d6a:	4652      	mov	r2, sl
 8001d6c:	465b      	mov	r3, fp
 8001d6e:	f04f 0000 	mov.w	r0, #0
 8001d72:	f04f 0100 	mov.w	r1, #0
 8001d76:	0159      	lsls	r1, r3, #5
 8001d78:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d7c:	0150      	lsls	r0, r2, #5
 8001d7e:	4602      	mov	r2, r0
 8001d80:	460b      	mov	r3, r1
 8001d82:	ebb2 080a 	subs.w	r8, r2, sl
 8001d86:	eb63 090b 	sbc.w	r9, r3, fp
 8001d8a:	f04f 0200 	mov.w	r2, #0
 8001d8e:	f04f 0300 	mov.w	r3, #0
 8001d92:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001d96:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001d9a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001d9e:	ebb2 0408 	subs.w	r4, r2, r8
 8001da2:	eb63 0509 	sbc.w	r5, r3, r9
 8001da6:	f04f 0200 	mov.w	r2, #0
 8001daa:	f04f 0300 	mov.w	r3, #0
 8001dae:	00eb      	lsls	r3, r5, #3
 8001db0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001db4:	00e2      	lsls	r2, r4, #3
 8001db6:	4614      	mov	r4, r2
 8001db8:	461d      	mov	r5, r3
 8001dba:	eb14 030a 	adds.w	r3, r4, sl
 8001dbe:	603b      	str	r3, [r7, #0]
 8001dc0:	eb45 030b 	adc.w	r3, r5, fp
 8001dc4:	607b      	str	r3, [r7, #4]
 8001dc6:	f04f 0200 	mov.w	r2, #0
 8001dca:	f04f 0300 	mov.w	r3, #0
 8001dce:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001dd2:	4629      	mov	r1, r5
 8001dd4:	028b      	lsls	r3, r1, #10
 8001dd6:	4621      	mov	r1, r4
 8001dd8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001ddc:	4621      	mov	r1, r4
 8001dde:	028a      	lsls	r2, r1, #10
 8001de0:	4610      	mov	r0, r2
 8001de2:	4619      	mov	r1, r3
 8001de4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001de6:	2200      	movs	r2, #0
 8001de8:	60bb      	str	r3, [r7, #8]
 8001dea:	60fa      	str	r2, [r7, #12]
 8001dec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001df0:	f7fe f9f6 	bl	80001e0 <__aeabi_uldivmod>
 8001df4:	4602      	mov	r2, r0
 8001df6:	460b      	mov	r3, r1
 8001df8:	4613      	mov	r3, r2
 8001dfa:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001dfc:	4b0b      	ldr	r3, [pc, #44]	; (8001e2c <HAL_RCC_GetSysClockFreq+0x180>)
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	0c1b      	lsrs	r3, r3, #16
 8001e02:	f003 0303 	and.w	r3, r3, #3
 8001e06:	3301      	adds	r3, #1
 8001e08:	005b      	lsls	r3, r3, #1
 8001e0a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001e0c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e10:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e14:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001e16:	e002      	b.n	8001e1e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001e18:	4b05      	ldr	r3, [pc, #20]	; (8001e30 <HAL_RCC_GetSysClockFreq+0x184>)
 8001e1a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001e1c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	3740      	adds	r7, #64	; 0x40
 8001e24:	46bd      	mov	sp, r7
 8001e26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e2a:	bf00      	nop
 8001e2c:	40023800 	.word	0x40023800
 8001e30:	00f42400 	.word	0x00f42400
 8001e34:	017d7840 	.word	0x017d7840

08001e38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e3c:	4b03      	ldr	r3, [pc, #12]	; (8001e4c <HAL_RCC_GetHCLKFreq+0x14>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr
 8001e4a:	bf00      	nop
 8001e4c:	20000004 	.word	0x20000004

08001e50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001e54:	f7ff fff0 	bl	8001e38 <HAL_RCC_GetHCLKFreq>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	4b05      	ldr	r3, [pc, #20]	; (8001e70 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e5c:	689b      	ldr	r3, [r3, #8]
 8001e5e:	0a9b      	lsrs	r3, r3, #10
 8001e60:	f003 0307 	and.w	r3, r3, #7
 8001e64:	4903      	ldr	r1, [pc, #12]	; (8001e74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e66:	5ccb      	ldrb	r3, [r1, r3]
 8001e68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	40023800 	.word	0x40023800
 8001e74:	08004d04 	.word	0x08004d04

08001e78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001e7c:	f7ff ffdc 	bl	8001e38 <HAL_RCC_GetHCLKFreq>
 8001e80:	4602      	mov	r2, r0
 8001e82:	4b05      	ldr	r3, [pc, #20]	; (8001e98 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e84:	689b      	ldr	r3, [r3, #8]
 8001e86:	0b5b      	lsrs	r3, r3, #13
 8001e88:	f003 0307 	and.w	r3, r3, #7
 8001e8c:	4903      	ldr	r1, [pc, #12]	; (8001e9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e8e:	5ccb      	ldrb	r3, [r1, r3]
 8001e90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	bd80      	pop	{r7, pc}
 8001e98:	40023800 	.word	0x40023800
 8001e9c:	08004d04 	.word	0x08004d04

08001ea0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b083      	sub	sp, #12
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
 8001ea8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	220f      	movs	r2, #15
 8001eae:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001eb0:	4b12      	ldr	r3, [pc, #72]	; (8001efc <HAL_RCC_GetClockConfig+0x5c>)
 8001eb2:	689b      	ldr	r3, [r3, #8]
 8001eb4:	f003 0203 	and.w	r2, r3, #3
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001ebc:	4b0f      	ldr	r3, [pc, #60]	; (8001efc <HAL_RCC_GetClockConfig+0x5c>)
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001ec8:	4b0c      	ldr	r3, [pc, #48]	; (8001efc <HAL_RCC_GetClockConfig+0x5c>)
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001ed4:	4b09      	ldr	r3, [pc, #36]	; (8001efc <HAL_RCC_GetClockConfig+0x5c>)
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	08db      	lsrs	r3, r3, #3
 8001eda:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001ee2:	4b07      	ldr	r3, [pc, #28]	; (8001f00 <HAL_RCC_GetClockConfig+0x60>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 0207 	and.w	r2, r3, #7
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	601a      	str	r2, [r3, #0]
}
 8001eee:	bf00      	nop
 8001ef0:	370c      	adds	r7, #12
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr
 8001efa:	bf00      	nop
 8001efc:	40023800 	.word	0x40023800
 8001f00:	40023c00 	.word	0x40023c00

08001f04 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b082      	sub	sp, #8
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d101      	bne.n	8001f16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	e041      	b.n	8001f9a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f1c:	b2db      	uxtb	r3, r3
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d106      	bne.n	8001f30 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2200      	movs	r2, #0
 8001f26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	f7fe feea 	bl	8000d04 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2202      	movs	r2, #2
 8001f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	3304      	adds	r3, #4
 8001f40:	4619      	mov	r1, r3
 8001f42:	4610      	mov	r0, r2
 8001f44:	f000 fd80 	bl	8002a48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2201      	movs	r2, #1
 8001f54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2201      	movs	r2, #1
 8001f64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2201      	movs	r2, #1
 8001f74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2201      	movs	r2, #1
 8001f84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2201      	movs	r2, #1
 8001f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001f98:	2300      	movs	r3, #0
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	3708      	adds	r7, #8
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
	...

08001fa4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b085      	sub	sp, #20
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fb2:	b2db      	uxtb	r3, r3
 8001fb4:	2b01      	cmp	r3, #1
 8001fb6:	d001      	beq.n	8001fbc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	e044      	b.n	8002046 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2202      	movs	r2, #2
 8001fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	68da      	ldr	r2, [r3, #12]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f042 0201 	orr.w	r2, r2, #1
 8001fd2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a1e      	ldr	r2, [pc, #120]	; (8002054 <HAL_TIM_Base_Start_IT+0xb0>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d018      	beq.n	8002010 <HAL_TIM_Base_Start_IT+0x6c>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fe6:	d013      	beq.n	8002010 <HAL_TIM_Base_Start_IT+0x6c>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a1a      	ldr	r2, [pc, #104]	; (8002058 <HAL_TIM_Base_Start_IT+0xb4>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d00e      	beq.n	8002010 <HAL_TIM_Base_Start_IT+0x6c>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a19      	ldr	r2, [pc, #100]	; (800205c <HAL_TIM_Base_Start_IT+0xb8>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d009      	beq.n	8002010 <HAL_TIM_Base_Start_IT+0x6c>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a17      	ldr	r2, [pc, #92]	; (8002060 <HAL_TIM_Base_Start_IT+0xbc>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d004      	beq.n	8002010 <HAL_TIM_Base_Start_IT+0x6c>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a16      	ldr	r2, [pc, #88]	; (8002064 <HAL_TIM_Base_Start_IT+0xc0>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d111      	bne.n	8002034 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	689b      	ldr	r3, [r3, #8]
 8002016:	f003 0307 	and.w	r3, r3, #7
 800201a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	2b06      	cmp	r3, #6
 8002020:	d010      	beq.n	8002044 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	681a      	ldr	r2, [r3, #0]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f042 0201 	orr.w	r2, r2, #1
 8002030:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002032:	e007      	b.n	8002044 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	681a      	ldr	r2, [r3, #0]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f042 0201 	orr.w	r2, r2, #1
 8002042:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002044:	2300      	movs	r3, #0
}
 8002046:	4618      	mov	r0, r3
 8002048:	3714      	adds	r7, #20
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr
 8002052:	bf00      	nop
 8002054:	40010000 	.word	0x40010000
 8002058:	40000400 	.word	0x40000400
 800205c:	40000800 	.word	0x40000800
 8002060:	40000c00 	.word	0x40000c00
 8002064:	40014000 	.word	0x40014000

08002068 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b082      	sub	sp, #8
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d101      	bne.n	800207a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002076:	2301      	movs	r3, #1
 8002078:	e041      	b.n	80020fe <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002080:	b2db      	uxtb	r3, r3
 8002082:	2b00      	cmp	r3, #0
 8002084:	d106      	bne.n	8002094 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2200      	movs	r2, #0
 800208a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800208e:	6878      	ldr	r0, [r7, #4]
 8002090:	f000 f839 	bl	8002106 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2202      	movs	r2, #2
 8002098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	3304      	adds	r3, #4
 80020a4:	4619      	mov	r1, r3
 80020a6:	4610      	mov	r0, r2
 80020a8:	f000 fcce 	bl	8002a48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2201      	movs	r2, #1
 80020b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2201      	movs	r2, #1
 80020b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2201      	movs	r2, #1
 80020c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2201      	movs	r2, #1
 80020c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2201      	movs	r2, #1
 80020d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2201      	movs	r2, #1
 80020d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2201      	movs	r2, #1
 80020e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2201      	movs	r2, #1
 80020e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2201      	movs	r2, #1
 80020f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2201      	movs	r2, #1
 80020f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80020fc:	2300      	movs	r3, #0
}
 80020fe:	4618      	mov	r0, r3
 8002100:	3708      	adds	r7, #8
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}

08002106 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8002106:	b480      	push	{r7}
 8002108:	b083      	sub	sp, #12
 800210a:	af00      	add	r7, sp, #0
 800210c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800210e:	bf00      	nop
 8002110:	370c      	adds	r7, #12
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr
	...

0800211c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b084      	sub	sp, #16
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
 8002124:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002126:	2300      	movs	r3, #0
 8002128:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d104      	bne.n	800213a <HAL_TIM_IC_Start_IT+0x1e>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002136:	b2db      	uxtb	r3, r3
 8002138:	e013      	b.n	8002162 <HAL_TIM_IC_Start_IT+0x46>
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	2b04      	cmp	r3, #4
 800213e:	d104      	bne.n	800214a <HAL_TIM_IC_Start_IT+0x2e>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002146:	b2db      	uxtb	r3, r3
 8002148:	e00b      	b.n	8002162 <HAL_TIM_IC_Start_IT+0x46>
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	2b08      	cmp	r3, #8
 800214e:	d104      	bne.n	800215a <HAL_TIM_IC_Start_IT+0x3e>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002156:	b2db      	uxtb	r3, r3
 8002158:	e003      	b.n	8002162 <HAL_TIM_IC_Start_IT+0x46>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002160:	b2db      	uxtb	r3, r3
 8002162:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d104      	bne.n	8002174 <HAL_TIM_IC_Start_IT+0x58>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002170:	b2db      	uxtb	r3, r3
 8002172:	e013      	b.n	800219c <HAL_TIM_IC_Start_IT+0x80>
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	2b04      	cmp	r3, #4
 8002178:	d104      	bne.n	8002184 <HAL_TIM_IC_Start_IT+0x68>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002180:	b2db      	uxtb	r3, r3
 8002182:	e00b      	b.n	800219c <HAL_TIM_IC_Start_IT+0x80>
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	2b08      	cmp	r3, #8
 8002188:	d104      	bne.n	8002194 <HAL_TIM_IC_Start_IT+0x78>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002190:	b2db      	uxtb	r3, r3
 8002192:	e003      	b.n	800219c <HAL_TIM_IC_Start_IT+0x80>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800219a:	b2db      	uxtb	r3, r3
 800219c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800219e:	7bbb      	ldrb	r3, [r7, #14]
 80021a0:	2b01      	cmp	r3, #1
 80021a2:	d102      	bne.n	80021aa <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80021a4:	7b7b      	ldrb	r3, [r7, #13]
 80021a6:	2b01      	cmp	r3, #1
 80021a8:	d001      	beq.n	80021ae <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 80021aa:	2301      	movs	r3, #1
 80021ac:	e0c2      	b.n	8002334 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d104      	bne.n	80021be <HAL_TIM_IC_Start_IT+0xa2>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2202      	movs	r2, #2
 80021b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80021bc:	e013      	b.n	80021e6 <HAL_TIM_IC_Start_IT+0xca>
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	2b04      	cmp	r3, #4
 80021c2:	d104      	bne.n	80021ce <HAL_TIM_IC_Start_IT+0xb2>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2202      	movs	r2, #2
 80021c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80021cc:	e00b      	b.n	80021e6 <HAL_TIM_IC_Start_IT+0xca>
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	2b08      	cmp	r3, #8
 80021d2:	d104      	bne.n	80021de <HAL_TIM_IC_Start_IT+0xc2>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2202      	movs	r2, #2
 80021d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80021dc:	e003      	b.n	80021e6 <HAL_TIM_IC_Start_IT+0xca>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2202      	movs	r2, #2
 80021e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d104      	bne.n	80021f6 <HAL_TIM_IC_Start_IT+0xda>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2202      	movs	r2, #2
 80021f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80021f4:	e013      	b.n	800221e <HAL_TIM_IC_Start_IT+0x102>
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	2b04      	cmp	r3, #4
 80021fa:	d104      	bne.n	8002206 <HAL_TIM_IC_Start_IT+0xea>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2202      	movs	r2, #2
 8002200:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002204:	e00b      	b.n	800221e <HAL_TIM_IC_Start_IT+0x102>
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	2b08      	cmp	r3, #8
 800220a:	d104      	bne.n	8002216 <HAL_TIM_IC_Start_IT+0xfa>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2202      	movs	r2, #2
 8002210:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002214:	e003      	b.n	800221e <HAL_TIM_IC_Start_IT+0x102>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2202      	movs	r2, #2
 800221a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	2b0c      	cmp	r3, #12
 8002222:	d841      	bhi.n	80022a8 <HAL_TIM_IC_Start_IT+0x18c>
 8002224:	a201      	add	r2, pc, #4	; (adr r2, 800222c <HAL_TIM_IC_Start_IT+0x110>)
 8002226:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800222a:	bf00      	nop
 800222c:	08002261 	.word	0x08002261
 8002230:	080022a9 	.word	0x080022a9
 8002234:	080022a9 	.word	0x080022a9
 8002238:	080022a9 	.word	0x080022a9
 800223c:	08002273 	.word	0x08002273
 8002240:	080022a9 	.word	0x080022a9
 8002244:	080022a9 	.word	0x080022a9
 8002248:	080022a9 	.word	0x080022a9
 800224c:	08002285 	.word	0x08002285
 8002250:	080022a9 	.word	0x080022a9
 8002254:	080022a9 	.word	0x080022a9
 8002258:	080022a9 	.word	0x080022a9
 800225c:	08002297 	.word	0x08002297
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	68da      	ldr	r2, [r3, #12]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f042 0202 	orr.w	r2, r2, #2
 800226e:	60da      	str	r2, [r3, #12]
      break;
 8002270:	e01d      	b.n	80022ae <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	68da      	ldr	r2, [r3, #12]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f042 0204 	orr.w	r2, r2, #4
 8002280:	60da      	str	r2, [r3, #12]
      break;
 8002282:	e014      	b.n	80022ae <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	68da      	ldr	r2, [r3, #12]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f042 0208 	orr.w	r2, r2, #8
 8002292:	60da      	str	r2, [r3, #12]
      break;
 8002294:	e00b      	b.n	80022ae <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	68da      	ldr	r2, [r3, #12]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f042 0210 	orr.w	r2, r2, #16
 80022a4:	60da      	str	r2, [r3, #12]
      break;
 80022a6:	e002      	b.n	80022ae <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80022a8:	2301      	movs	r3, #1
 80022aa:	73fb      	strb	r3, [r7, #15]
      break;
 80022ac:	bf00      	nop
  }

  if (status == HAL_OK)
 80022ae:	7bfb      	ldrb	r3, [r7, #15]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d13e      	bne.n	8002332 <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	2201      	movs	r2, #1
 80022ba:	6839      	ldr	r1, [r7, #0]
 80022bc:	4618      	mov	r0, r3
 80022be:	f000 fdfb 	bl	8002eb8 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a1d      	ldr	r2, [pc, #116]	; (800233c <HAL_TIM_IC_Start_IT+0x220>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d018      	beq.n	80022fe <HAL_TIM_IC_Start_IT+0x1e2>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022d4:	d013      	beq.n	80022fe <HAL_TIM_IC_Start_IT+0x1e2>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a19      	ldr	r2, [pc, #100]	; (8002340 <HAL_TIM_IC_Start_IT+0x224>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d00e      	beq.n	80022fe <HAL_TIM_IC_Start_IT+0x1e2>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a17      	ldr	r2, [pc, #92]	; (8002344 <HAL_TIM_IC_Start_IT+0x228>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d009      	beq.n	80022fe <HAL_TIM_IC_Start_IT+0x1e2>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a16      	ldr	r2, [pc, #88]	; (8002348 <HAL_TIM_IC_Start_IT+0x22c>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d004      	beq.n	80022fe <HAL_TIM_IC_Start_IT+0x1e2>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a14      	ldr	r2, [pc, #80]	; (800234c <HAL_TIM_IC_Start_IT+0x230>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d111      	bne.n	8002322 <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	f003 0307 	and.w	r3, r3, #7
 8002308:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	2b06      	cmp	r3, #6
 800230e:	d010      	beq.n	8002332 <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	681a      	ldr	r2, [r3, #0]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f042 0201 	orr.w	r2, r2, #1
 800231e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002320:	e007      	b.n	8002332 <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	681a      	ldr	r2, [r3, #0]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f042 0201 	orr.w	r2, r2, #1
 8002330:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8002332:	7bfb      	ldrb	r3, [r7, #15]
}
 8002334:	4618      	mov	r0, r3
 8002336:	3710      	adds	r7, #16
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}
 800233c:	40010000 	.word	0x40010000
 8002340:	40000400 	.word	0x40000400
 8002344:	40000800 	.word	0x40000800
 8002348:	40000c00 	.word	0x40000c00
 800234c:	40014000 	.word	0x40014000

08002350 <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b084      	sub	sp, #16
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
 8002358:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800235a:	2300      	movs	r3, #0
 800235c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	2b0c      	cmp	r3, #12
 8002362:	d841      	bhi.n	80023e8 <HAL_TIM_IC_Stop_IT+0x98>
 8002364:	a201      	add	r2, pc, #4	; (adr r2, 800236c <HAL_TIM_IC_Stop_IT+0x1c>)
 8002366:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800236a:	bf00      	nop
 800236c:	080023a1 	.word	0x080023a1
 8002370:	080023e9 	.word	0x080023e9
 8002374:	080023e9 	.word	0x080023e9
 8002378:	080023e9 	.word	0x080023e9
 800237c:	080023b3 	.word	0x080023b3
 8002380:	080023e9 	.word	0x080023e9
 8002384:	080023e9 	.word	0x080023e9
 8002388:	080023e9 	.word	0x080023e9
 800238c:	080023c5 	.word	0x080023c5
 8002390:	080023e9 	.word	0x080023e9
 8002394:	080023e9 	.word	0x080023e9
 8002398:	080023e9 	.word	0x080023e9
 800239c:	080023d7 	.word	0x080023d7
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	68da      	ldr	r2, [r3, #12]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f022 0202 	bic.w	r2, r2, #2
 80023ae:	60da      	str	r2, [r3, #12]
      break;
 80023b0:	e01d      	b.n	80023ee <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	68da      	ldr	r2, [r3, #12]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f022 0204 	bic.w	r2, r2, #4
 80023c0:	60da      	str	r2, [r3, #12]
      break;
 80023c2:	e014      	b.n	80023ee <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	68da      	ldr	r2, [r3, #12]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f022 0208 	bic.w	r2, r2, #8
 80023d2:	60da      	str	r2, [r3, #12]
      break;
 80023d4:	e00b      	b.n	80023ee <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	68da      	ldr	r2, [r3, #12]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f022 0210 	bic.w	r2, r2, #16
 80023e4:	60da      	str	r2, [r3, #12]
      break;
 80023e6:	e002      	b.n	80023ee <HAL_TIM_IC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 80023e8:	2301      	movs	r3, #1
 80023ea:	73fb      	strb	r3, [r7, #15]
      break;
 80023ec:	bf00      	nop
  }

  if (status == HAL_OK)
 80023ee:	7bfb      	ldrb	r3, [r7, #15]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d156      	bne.n	80024a2 <HAL_TIM_IC_Stop_IT+0x152>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	2200      	movs	r2, #0
 80023fa:	6839      	ldr	r1, [r7, #0]
 80023fc:	4618      	mov	r0, r3
 80023fe:	f000 fd5b 	bl	8002eb8 <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	6a1a      	ldr	r2, [r3, #32]
 8002408:	f241 1311 	movw	r3, #4369	; 0x1111
 800240c:	4013      	ands	r3, r2
 800240e:	2b00      	cmp	r3, #0
 8002410:	d10f      	bne.n	8002432 <HAL_TIM_IC_Stop_IT+0xe2>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	6a1a      	ldr	r2, [r3, #32]
 8002418:	f240 4344 	movw	r3, #1092	; 0x444
 800241c:	4013      	ands	r3, r2
 800241e:	2b00      	cmp	r3, #0
 8002420:	d107      	bne.n	8002432 <HAL_TIM_IC_Stop_IT+0xe2>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	681a      	ldr	r2, [r3, #0]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f022 0201 	bic.w	r2, r2, #1
 8002430:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d104      	bne.n	8002442 <HAL_TIM_IC_Stop_IT+0xf2>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2201      	movs	r2, #1
 800243c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002440:	e013      	b.n	800246a <HAL_TIM_IC_Stop_IT+0x11a>
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	2b04      	cmp	r3, #4
 8002446:	d104      	bne.n	8002452 <HAL_TIM_IC_Stop_IT+0x102>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2201      	movs	r2, #1
 800244c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002450:	e00b      	b.n	800246a <HAL_TIM_IC_Stop_IT+0x11a>
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	2b08      	cmp	r3, #8
 8002456:	d104      	bne.n	8002462 <HAL_TIM_IC_Stop_IT+0x112>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2201      	movs	r2, #1
 800245c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002460:	e003      	b.n	800246a <HAL_TIM_IC_Stop_IT+0x11a>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2201      	movs	r2, #1
 8002466:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d104      	bne.n	800247a <HAL_TIM_IC_Stop_IT+0x12a>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2201      	movs	r2, #1
 8002474:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002478:	e013      	b.n	80024a2 <HAL_TIM_IC_Stop_IT+0x152>
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	2b04      	cmp	r3, #4
 800247e:	d104      	bne.n	800248a <HAL_TIM_IC_Stop_IT+0x13a>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2201      	movs	r2, #1
 8002484:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002488:	e00b      	b.n	80024a2 <HAL_TIM_IC_Stop_IT+0x152>
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	2b08      	cmp	r3, #8
 800248e:	d104      	bne.n	800249a <HAL_TIM_IC_Stop_IT+0x14a>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2201      	movs	r2, #1
 8002494:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002498:	e003      	b.n	80024a2 <HAL_TIM_IC_Stop_IT+0x152>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2201      	movs	r2, #1
 800249e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }

  /* Return function status */
  return status;
 80024a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	3710      	adds	r7, #16
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}

080024ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b082      	sub	sp, #8
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	691b      	ldr	r3, [r3, #16]
 80024ba:	f003 0302 	and.w	r3, r3, #2
 80024be:	2b02      	cmp	r3, #2
 80024c0:	d122      	bne.n	8002508 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	68db      	ldr	r3, [r3, #12]
 80024c8:	f003 0302 	and.w	r3, r3, #2
 80024cc:	2b02      	cmp	r3, #2
 80024ce:	d11b      	bne.n	8002508 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f06f 0202 	mvn.w	r2, #2
 80024d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2201      	movs	r2, #1
 80024de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	699b      	ldr	r3, [r3, #24]
 80024e6:	f003 0303 	and.w	r3, r3, #3
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d003      	beq.n	80024f6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80024ee:	6878      	ldr	r0, [r7, #4]
 80024f0:	f7fe f80e 	bl	8000510 <HAL_TIM_IC_CaptureCallback>
 80024f4:	e005      	b.n	8002502 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80024f6:	6878      	ldr	r0, [r7, #4]
 80024f8:	f000 fa88 	bl	8002a0c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024fc:	6878      	ldr	r0, [r7, #4]
 80024fe:	f000 fa8f 	bl	8002a20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2200      	movs	r2, #0
 8002506:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	691b      	ldr	r3, [r3, #16]
 800250e:	f003 0304 	and.w	r3, r3, #4
 8002512:	2b04      	cmp	r3, #4
 8002514:	d122      	bne.n	800255c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	68db      	ldr	r3, [r3, #12]
 800251c:	f003 0304 	and.w	r3, r3, #4
 8002520:	2b04      	cmp	r3, #4
 8002522:	d11b      	bne.n	800255c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f06f 0204 	mvn.w	r2, #4
 800252c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2202      	movs	r2, #2
 8002532:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	699b      	ldr	r3, [r3, #24]
 800253a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800253e:	2b00      	cmp	r3, #0
 8002540:	d003      	beq.n	800254a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002542:	6878      	ldr	r0, [r7, #4]
 8002544:	f7fd ffe4 	bl	8000510 <HAL_TIM_IC_CaptureCallback>
 8002548:	e005      	b.n	8002556 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800254a:	6878      	ldr	r0, [r7, #4]
 800254c:	f000 fa5e 	bl	8002a0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002550:	6878      	ldr	r0, [r7, #4]
 8002552:	f000 fa65 	bl	8002a20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2200      	movs	r2, #0
 800255a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	691b      	ldr	r3, [r3, #16]
 8002562:	f003 0308 	and.w	r3, r3, #8
 8002566:	2b08      	cmp	r3, #8
 8002568:	d122      	bne.n	80025b0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	68db      	ldr	r3, [r3, #12]
 8002570:	f003 0308 	and.w	r3, r3, #8
 8002574:	2b08      	cmp	r3, #8
 8002576:	d11b      	bne.n	80025b0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f06f 0208 	mvn.w	r2, #8
 8002580:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2204      	movs	r2, #4
 8002586:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	69db      	ldr	r3, [r3, #28]
 800258e:	f003 0303 	and.w	r3, r3, #3
 8002592:	2b00      	cmp	r3, #0
 8002594:	d003      	beq.n	800259e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002596:	6878      	ldr	r0, [r7, #4]
 8002598:	f7fd ffba 	bl	8000510 <HAL_TIM_IC_CaptureCallback>
 800259c:	e005      	b.n	80025aa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800259e:	6878      	ldr	r0, [r7, #4]
 80025a0:	f000 fa34 	bl	8002a0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025a4:	6878      	ldr	r0, [r7, #4]
 80025a6:	f000 fa3b 	bl	8002a20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2200      	movs	r2, #0
 80025ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	691b      	ldr	r3, [r3, #16]
 80025b6:	f003 0310 	and.w	r3, r3, #16
 80025ba:	2b10      	cmp	r3, #16
 80025bc:	d122      	bne.n	8002604 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	68db      	ldr	r3, [r3, #12]
 80025c4:	f003 0310 	and.w	r3, r3, #16
 80025c8:	2b10      	cmp	r3, #16
 80025ca:	d11b      	bne.n	8002604 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f06f 0210 	mvn.w	r2, #16
 80025d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2208      	movs	r2, #8
 80025da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	69db      	ldr	r3, [r3, #28]
 80025e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d003      	beq.n	80025f2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025ea:	6878      	ldr	r0, [r7, #4]
 80025ec:	f7fd ff90 	bl	8000510 <HAL_TIM_IC_CaptureCallback>
 80025f0:	e005      	b.n	80025fe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025f2:	6878      	ldr	r0, [r7, #4]
 80025f4:	f000 fa0a 	bl	8002a0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025f8:	6878      	ldr	r0, [r7, #4]
 80025fa:	f000 fa11 	bl	8002a20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2200      	movs	r2, #0
 8002602:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	691b      	ldr	r3, [r3, #16]
 800260a:	f003 0301 	and.w	r3, r3, #1
 800260e:	2b01      	cmp	r3, #1
 8002610:	d10e      	bne.n	8002630 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	68db      	ldr	r3, [r3, #12]
 8002618:	f003 0301 	and.w	r3, r3, #1
 800261c:	2b01      	cmp	r3, #1
 800261e:	d107      	bne.n	8002630 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f06f 0201 	mvn.w	r2, #1
 8002628:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800262a:	6878      	ldr	r0, [r7, #4]
 800262c:	f7fe fb26 	bl	8000c7c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	691b      	ldr	r3, [r3, #16]
 8002636:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800263a:	2b80      	cmp	r3, #128	; 0x80
 800263c:	d10e      	bne.n	800265c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	68db      	ldr	r3, [r3, #12]
 8002644:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002648:	2b80      	cmp	r3, #128	; 0x80
 800264a:	d107      	bne.n	800265c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002654:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002656:	6878      	ldr	r0, [r7, #4]
 8002658:	f000 fccc 	bl	8002ff4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	691b      	ldr	r3, [r3, #16]
 8002662:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002666:	2b40      	cmp	r3, #64	; 0x40
 8002668:	d10e      	bne.n	8002688 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	68db      	ldr	r3, [r3, #12]
 8002670:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002674:	2b40      	cmp	r3, #64	; 0x40
 8002676:	d107      	bne.n	8002688 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002680:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002682:	6878      	ldr	r0, [r7, #4]
 8002684:	f000 f9d6 	bl	8002a34 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	691b      	ldr	r3, [r3, #16]
 800268e:	f003 0320 	and.w	r3, r3, #32
 8002692:	2b20      	cmp	r3, #32
 8002694:	d10e      	bne.n	80026b4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	68db      	ldr	r3, [r3, #12]
 800269c:	f003 0320 	and.w	r3, r3, #32
 80026a0:	2b20      	cmp	r3, #32
 80026a2:	d107      	bne.n	80026b4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f06f 0220 	mvn.w	r2, #32
 80026ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80026ae:	6878      	ldr	r0, [r7, #4]
 80026b0:	f000 fc96 	bl	8002fe0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80026b4:	bf00      	nop
 80026b6:	3708      	adds	r7, #8
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}

080026bc <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b086      	sub	sp, #24
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	60f8      	str	r0, [r7, #12]
 80026c4:	60b9      	str	r1, [r7, #8]
 80026c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80026c8:	2300      	movs	r3, #0
 80026ca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026d2:	2b01      	cmp	r3, #1
 80026d4:	d101      	bne.n	80026da <HAL_TIM_IC_ConfigChannel+0x1e>
 80026d6:	2302      	movs	r3, #2
 80026d8:	e088      	b.n	80027ec <HAL_TIM_IC_ConfigChannel+0x130>
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	2201      	movs	r2, #1
 80026de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d11b      	bne.n	8002720 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	6818      	ldr	r0, [r3, #0]
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	6819      	ldr	r1, [r3, #0]
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	685a      	ldr	r2, [r3, #4]
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	68db      	ldr	r3, [r3, #12]
 80026f8:	f000 fa26 	bl	8002b48 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	699a      	ldr	r2, [r3, #24]
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f022 020c 	bic.w	r2, r2, #12
 800270a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	6999      	ldr	r1, [r3, #24]
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	689a      	ldr	r2, [r3, #8]
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	430a      	orrs	r2, r1
 800271c:	619a      	str	r2, [r3, #24]
 800271e:	e060      	b.n	80027e2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2b04      	cmp	r3, #4
 8002724:	d11c      	bne.n	8002760 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	6818      	ldr	r0, [r3, #0]
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	6819      	ldr	r1, [r3, #0]
 800272e:	68bb      	ldr	r3, [r7, #8]
 8002730:	685a      	ldr	r2, [r3, #4]
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	68db      	ldr	r3, [r3, #12]
 8002736:	f000 fa9e 	bl	8002c76 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	699a      	ldr	r2, [r3, #24]
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002748:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	6999      	ldr	r1, [r3, #24]
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	021a      	lsls	r2, r3, #8
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	430a      	orrs	r2, r1
 800275c:	619a      	str	r2, [r3, #24]
 800275e:	e040      	b.n	80027e2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2b08      	cmp	r3, #8
 8002764:	d11b      	bne.n	800279e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	6818      	ldr	r0, [r3, #0]
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	6819      	ldr	r1, [r3, #0]
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	685a      	ldr	r2, [r3, #4]
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	68db      	ldr	r3, [r3, #12]
 8002776:	f000 faeb 	bl	8002d50 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	69da      	ldr	r2, [r3, #28]
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f022 020c 	bic.w	r2, r2, #12
 8002788:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	69d9      	ldr	r1, [r3, #28]
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	689a      	ldr	r2, [r3, #8]
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	430a      	orrs	r2, r1
 800279a:	61da      	str	r2, [r3, #28]
 800279c:	e021      	b.n	80027e2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2b0c      	cmp	r3, #12
 80027a2:	d11c      	bne.n	80027de <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	6818      	ldr	r0, [r3, #0]
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	6819      	ldr	r1, [r3, #0]
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	685a      	ldr	r2, [r3, #4]
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	68db      	ldr	r3, [r3, #12]
 80027b4:	f000 fb08 	bl	8002dc8 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	69da      	ldr	r2, [r3, #28]
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80027c6:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	69d9      	ldr	r1, [r3, #28]
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	021a      	lsls	r2, r3, #8
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	430a      	orrs	r2, r1
 80027da:	61da      	str	r2, [r3, #28]
 80027dc:	e001      	b.n	80027e2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	2200      	movs	r2, #0
 80027e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80027ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	3718      	adds	r7, #24
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}

080027f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b084      	sub	sp, #16
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
 80027fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80027fe:	2300      	movs	r3, #0
 8002800:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002808:	2b01      	cmp	r3, #1
 800280a:	d101      	bne.n	8002810 <HAL_TIM_ConfigClockSource+0x1c>
 800280c:	2302      	movs	r3, #2
 800280e:	e0b4      	b.n	800297a <HAL_TIM_ConfigClockSource+0x186>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2201      	movs	r2, #1
 8002814:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2202      	movs	r2, #2
 800281c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800282e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002836:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	68ba      	ldr	r2, [r7, #8]
 800283e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002848:	d03e      	beq.n	80028c8 <HAL_TIM_ConfigClockSource+0xd4>
 800284a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800284e:	f200 8087 	bhi.w	8002960 <HAL_TIM_ConfigClockSource+0x16c>
 8002852:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002856:	f000 8086 	beq.w	8002966 <HAL_TIM_ConfigClockSource+0x172>
 800285a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800285e:	d87f      	bhi.n	8002960 <HAL_TIM_ConfigClockSource+0x16c>
 8002860:	2b70      	cmp	r3, #112	; 0x70
 8002862:	d01a      	beq.n	800289a <HAL_TIM_ConfigClockSource+0xa6>
 8002864:	2b70      	cmp	r3, #112	; 0x70
 8002866:	d87b      	bhi.n	8002960 <HAL_TIM_ConfigClockSource+0x16c>
 8002868:	2b60      	cmp	r3, #96	; 0x60
 800286a:	d050      	beq.n	800290e <HAL_TIM_ConfigClockSource+0x11a>
 800286c:	2b60      	cmp	r3, #96	; 0x60
 800286e:	d877      	bhi.n	8002960 <HAL_TIM_ConfigClockSource+0x16c>
 8002870:	2b50      	cmp	r3, #80	; 0x50
 8002872:	d03c      	beq.n	80028ee <HAL_TIM_ConfigClockSource+0xfa>
 8002874:	2b50      	cmp	r3, #80	; 0x50
 8002876:	d873      	bhi.n	8002960 <HAL_TIM_ConfigClockSource+0x16c>
 8002878:	2b40      	cmp	r3, #64	; 0x40
 800287a:	d058      	beq.n	800292e <HAL_TIM_ConfigClockSource+0x13a>
 800287c:	2b40      	cmp	r3, #64	; 0x40
 800287e:	d86f      	bhi.n	8002960 <HAL_TIM_ConfigClockSource+0x16c>
 8002880:	2b30      	cmp	r3, #48	; 0x30
 8002882:	d064      	beq.n	800294e <HAL_TIM_ConfigClockSource+0x15a>
 8002884:	2b30      	cmp	r3, #48	; 0x30
 8002886:	d86b      	bhi.n	8002960 <HAL_TIM_ConfigClockSource+0x16c>
 8002888:	2b20      	cmp	r3, #32
 800288a:	d060      	beq.n	800294e <HAL_TIM_ConfigClockSource+0x15a>
 800288c:	2b20      	cmp	r3, #32
 800288e:	d867      	bhi.n	8002960 <HAL_TIM_ConfigClockSource+0x16c>
 8002890:	2b00      	cmp	r3, #0
 8002892:	d05c      	beq.n	800294e <HAL_TIM_ConfigClockSource+0x15a>
 8002894:	2b10      	cmp	r3, #16
 8002896:	d05a      	beq.n	800294e <HAL_TIM_ConfigClockSource+0x15a>
 8002898:	e062      	b.n	8002960 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6818      	ldr	r0, [r3, #0]
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	6899      	ldr	r1, [r3, #8]
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	685a      	ldr	r2, [r3, #4]
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	68db      	ldr	r3, [r3, #12]
 80028aa:	f000 fae5 	bl	8002e78 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80028bc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	68ba      	ldr	r2, [r7, #8]
 80028c4:	609a      	str	r2, [r3, #8]
      break;
 80028c6:	e04f      	b.n	8002968 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6818      	ldr	r0, [r3, #0]
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	6899      	ldr	r1, [r3, #8]
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	685a      	ldr	r2, [r3, #4]
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	68db      	ldr	r3, [r3, #12]
 80028d8:	f000 face 	bl	8002e78 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	689a      	ldr	r2, [r3, #8]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80028ea:	609a      	str	r2, [r3, #8]
      break;
 80028ec:	e03c      	b.n	8002968 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6818      	ldr	r0, [r3, #0]
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	6859      	ldr	r1, [r3, #4]
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	68db      	ldr	r3, [r3, #12]
 80028fa:	461a      	mov	r2, r3
 80028fc:	f000 f98c 	bl	8002c18 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	2150      	movs	r1, #80	; 0x50
 8002906:	4618      	mov	r0, r3
 8002908:	f000 fa9b 	bl	8002e42 <TIM_ITRx_SetConfig>
      break;
 800290c:	e02c      	b.n	8002968 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6818      	ldr	r0, [r3, #0]
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	6859      	ldr	r1, [r3, #4]
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	68db      	ldr	r3, [r3, #12]
 800291a:	461a      	mov	r2, r3
 800291c:	f000 f9e8 	bl	8002cf0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	2160      	movs	r1, #96	; 0x60
 8002926:	4618      	mov	r0, r3
 8002928:	f000 fa8b 	bl	8002e42 <TIM_ITRx_SetConfig>
      break;
 800292c:	e01c      	b.n	8002968 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6818      	ldr	r0, [r3, #0]
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	6859      	ldr	r1, [r3, #4]
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	68db      	ldr	r3, [r3, #12]
 800293a:	461a      	mov	r2, r3
 800293c:	f000 f96c 	bl	8002c18 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	2140      	movs	r1, #64	; 0x40
 8002946:	4618      	mov	r0, r3
 8002948:	f000 fa7b 	bl	8002e42 <TIM_ITRx_SetConfig>
      break;
 800294c:	e00c      	b.n	8002968 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681a      	ldr	r2, [r3, #0]
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4619      	mov	r1, r3
 8002958:	4610      	mov	r0, r2
 800295a:	f000 fa72 	bl	8002e42 <TIM_ITRx_SetConfig>
      break;
 800295e:	e003      	b.n	8002968 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002960:	2301      	movs	r3, #1
 8002962:	73fb      	strb	r3, [r7, #15]
      break;
 8002964:	e000      	b.n	8002968 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002966:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2201      	movs	r2, #1
 800296c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2200      	movs	r2, #0
 8002974:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002978:	7bfb      	ldrb	r3, [r7, #15]
}
 800297a:	4618      	mov	r0, r3
 800297c:	3710      	adds	r7, #16
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}
	...

08002984 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002984:	b480      	push	{r7}
 8002986:	b085      	sub	sp, #20
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
 800298c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800298e:	2300      	movs	r3, #0
 8002990:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	2b0c      	cmp	r3, #12
 8002996:	d831      	bhi.n	80029fc <HAL_TIM_ReadCapturedValue+0x78>
 8002998:	a201      	add	r2, pc, #4	; (adr r2, 80029a0 <HAL_TIM_ReadCapturedValue+0x1c>)
 800299a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800299e:	bf00      	nop
 80029a0:	080029d5 	.word	0x080029d5
 80029a4:	080029fd 	.word	0x080029fd
 80029a8:	080029fd 	.word	0x080029fd
 80029ac:	080029fd 	.word	0x080029fd
 80029b0:	080029df 	.word	0x080029df
 80029b4:	080029fd 	.word	0x080029fd
 80029b8:	080029fd 	.word	0x080029fd
 80029bc:	080029fd 	.word	0x080029fd
 80029c0:	080029e9 	.word	0x080029e9
 80029c4:	080029fd 	.word	0x080029fd
 80029c8:	080029fd 	.word	0x080029fd
 80029cc:	080029fd 	.word	0x080029fd
 80029d0:	080029f3 	.word	0x080029f3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029da:	60fb      	str	r3, [r7, #12]

      break;
 80029dc:	e00f      	b.n	80029fe <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029e4:	60fb      	str	r3, [r7, #12]

      break;
 80029e6:	e00a      	b.n	80029fe <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029ee:	60fb      	str	r3, [r7, #12]

      break;
 80029f0:	e005      	b.n	80029fe <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f8:	60fb      	str	r3, [r7, #12]

      break;
 80029fa:	e000      	b.n	80029fe <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80029fc:	bf00      	nop
  }

  return tmpreg;
 80029fe:	68fb      	ldr	r3, [r7, #12]
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	3714      	adds	r7, #20
 8002a04:	46bd      	mov	sp, r7
 8002a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0a:	4770      	bx	lr

08002a0c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b083      	sub	sp, #12
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002a14:	bf00      	nop
 8002a16:	370c      	adds	r7, #12
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1e:	4770      	bx	lr

08002a20 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b083      	sub	sp, #12
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002a28:	bf00      	nop
 8002a2a:	370c      	adds	r7, #12
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a32:	4770      	bx	lr

08002a34 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b083      	sub	sp, #12
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002a3c:	bf00      	nop
 8002a3e:	370c      	adds	r7, #12
 8002a40:	46bd      	mov	sp, r7
 8002a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a46:	4770      	bx	lr

08002a48 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b085      	sub	sp, #20
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
 8002a50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	4a34      	ldr	r2, [pc, #208]	; (8002b2c <TIM_Base_SetConfig+0xe4>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d00f      	beq.n	8002a80 <TIM_Base_SetConfig+0x38>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a66:	d00b      	beq.n	8002a80 <TIM_Base_SetConfig+0x38>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	4a31      	ldr	r2, [pc, #196]	; (8002b30 <TIM_Base_SetConfig+0xe8>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d007      	beq.n	8002a80 <TIM_Base_SetConfig+0x38>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	4a30      	ldr	r2, [pc, #192]	; (8002b34 <TIM_Base_SetConfig+0xec>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d003      	beq.n	8002a80 <TIM_Base_SetConfig+0x38>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	4a2f      	ldr	r2, [pc, #188]	; (8002b38 <TIM_Base_SetConfig+0xf0>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d108      	bne.n	8002a92 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	68fa      	ldr	r2, [r7, #12]
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	4a25      	ldr	r2, [pc, #148]	; (8002b2c <TIM_Base_SetConfig+0xe4>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d01b      	beq.n	8002ad2 <TIM_Base_SetConfig+0x8a>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002aa0:	d017      	beq.n	8002ad2 <TIM_Base_SetConfig+0x8a>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	4a22      	ldr	r2, [pc, #136]	; (8002b30 <TIM_Base_SetConfig+0xe8>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d013      	beq.n	8002ad2 <TIM_Base_SetConfig+0x8a>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	4a21      	ldr	r2, [pc, #132]	; (8002b34 <TIM_Base_SetConfig+0xec>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d00f      	beq.n	8002ad2 <TIM_Base_SetConfig+0x8a>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	4a20      	ldr	r2, [pc, #128]	; (8002b38 <TIM_Base_SetConfig+0xf0>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d00b      	beq.n	8002ad2 <TIM_Base_SetConfig+0x8a>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	4a1f      	ldr	r2, [pc, #124]	; (8002b3c <TIM_Base_SetConfig+0xf4>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d007      	beq.n	8002ad2 <TIM_Base_SetConfig+0x8a>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	4a1e      	ldr	r2, [pc, #120]	; (8002b40 <TIM_Base_SetConfig+0xf8>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d003      	beq.n	8002ad2 <TIM_Base_SetConfig+0x8a>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	4a1d      	ldr	r2, [pc, #116]	; (8002b44 <TIM_Base_SetConfig+0xfc>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d108      	bne.n	8002ae4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ad8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	68db      	ldr	r3, [r3, #12]
 8002ade:	68fa      	ldr	r2, [r7, #12]
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	695b      	ldr	r3, [r3, #20]
 8002aee:	4313      	orrs	r3, r2
 8002af0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	68fa      	ldr	r2, [r7, #12]
 8002af6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	689a      	ldr	r2, [r3, #8]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	681a      	ldr	r2, [r3, #0]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	4a08      	ldr	r2, [pc, #32]	; (8002b2c <TIM_Base_SetConfig+0xe4>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d103      	bne.n	8002b18 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	691a      	ldr	r2, [r3, #16]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	615a      	str	r2, [r3, #20]
}
 8002b1e:	bf00      	nop
 8002b20:	3714      	adds	r7, #20
 8002b22:	46bd      	mov	sp, r7
 8002b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b28:	4770      	bx	lr
 8002b2a:	bf00      	nop
 8002b2c:	40010000 	.word	0x40010000
 8002b30:	40000400 	.word	0x40000400
 8002b34:	40000800 	.word	0x40000800
 8002b38:	40000c00 	.word	0x40000c00
 8002b3c:	40014000 	.word	0x40014000
 8002b40:	40014400 	.word	0x40014400
 8002b44:	40014800 	.word	0x40014800

08002b48 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b087      	sub	sp, #28
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	60f8      	str	r0, [r7, #12]
 8002b50:	60b9      	str	r1, [r7, #8]
 8002b52:	607a      	str	r2, [r7, #4]
 8002b54:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	6a1b      	ldr	r3, [r3, #32]
 8002b5a:	f023 0201 	bic.w	r2, r3, #1
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	699b      	ldr	r3, [r3, #24]
 8002b66:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	6a1b      	ldr	r3, [r3, #32]
 8002b6c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	4a24      	ldr	r2, [pc, #144]	; (8002c04 <TIM_TI1_SetConfig+0xbc>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d013      	beq.n	8002b9e <TIM_TI1_SetConfig+0x56>
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b7c:	d00f      	beq.n	8002b9e <TIM_TI1_SetConfig+0x56>
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	4a21      	ldr	r2, [pc, #132]	; (8002c08 <TIM_TI1_SetConfig+0xc0>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d00b      	beq.n	8002b9e <TIM_TI1_SetConfig+0x56>
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	4a20      	ldr	r2, [pc, #128]	; (8002c0c <TIM_TI1_SetConfig+0xc4>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d007      	beq.n	8002b9e <TIM_TI1_SetConfig+0x56>
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	4a1f      	ldr	r2, [pc, #124]	; (8002c10 <TIM_TI1_SetConfig+0xc8>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d003      	beq.n	8002b9e <TIM_TI1_SetConfig+0x56>
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	4a1e      	ldr	r2, [pc, #120]	; (8002c14 <TIM_TI1_SetConfig+0xcc>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d101      	bne.n	8002ba2 <TIM_TI1_SetConfig+0x5a>
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e000      	b.n	8002ba4 <TIM_TI1_SetConfig+0x5c>
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d008      	beq.n	8002bba <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	f023 0303 	bic.w	r3, r3, #3
 8002bae:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8002bb0:	697a      	ldr	r2, [r7, #20]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	617b      	str	r3, [r7, #20]
 8002bb8:	e003      	b.n	8002bc2 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	f043 0301 	orr.w	r3, r3, #1
 8002bc0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002bc8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	011b      	lsls	r3, r3, #4
 8002bce:	b2db      	uxtb	r3, r3
 8002bd0:	697a      	ldr	r2, [r7, #20]
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	f023 030a 	bic.w	r3, r3, #10
 8002bdc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	f003 030a 	and.w	r3, r3, #10
 8002be4:	693a      	ldr	r2, [r7, #16]
 8002be6:	4313      	orrs	r3, r2
 8002be8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	697a      	ldr	r2, [r7, #20]
 8002bee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	693a      	ldr	r2, [r7, #16]
 8002bf4:	621a      	str	r2, [r3, #32]
}
 8002bf6:	bf00      	nop
 8002bf8:	371c      	adds	r7, #28
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c00:	4770      	bx	lr
 8002c02:	bf00      	nop
 8002c04:	40010000 	.word	0x40010000
 8002c08:	40000400 	.word	0x40000400
 8002c0c:	40000800 	.word	0x40000800
 8002c10:	40000c00 	.word	0x40000c00
 8002c14:	40014000 	.word	0x40014000

08002c18 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b087      	sub	sp, #28
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	60f8      	str	r0, [r7, #12]
 8002c20:	60b9      	str	r1, [r7, #8]
 8002c22:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	6a1b      	ldr	r3, [r3, #32]
 8002c28:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	6a1b      	ldr	r3, [r3, #32]
 8002c2e:	f023 0201 	bic.w	r2, r3, #1
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	699b      	ldr	r3, [r3, #24]
 8002c3a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002c3c:	693b      	ldr	r3, [r7, #16]
 8002c3e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002c42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	011b      	lsls	r3, r3, #4
 8002c48:	693a      	ldr	r2, [r7, #16]
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	f023 030a 	bic.w	r3, r3, #10
 8002c54:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002c56:	697a      	ldr	r2, [r7, #20]
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	693a      	ldr	r2, [r7, #16]
 8002c62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	697a      	ldr	r2, [r7, #20]
 8002c68:	621a      	str	r2, [r3, #32]
}
 8002c6a:	bf00      	nop
 8002c6c:	371c      	adds	r7, #28
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c74:	4770      	bx	lr

08002c76 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002c76:	b480      	push	{r7}
 8002c78:	b087      	sub	sp, #28
 8002c7a:	af00      	add	r7, sp, #0
 8002c7c:	60f8      	str	r0, [r7, #12]
 8002c7e:	60b9      	str	r1, [r7, #8]
 8002c80:	607a      	str	r2, [r7, #4]
 8002c82:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	6a1b      	ldr	r3, [r3, #32]
 8002c88:	f023 0210 	bic.w	r2, r3, #16
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	699b      	ldr	r3, [r3, #24]
 8002c94:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	6a1b      	ldr	r3, [r3, #32]
 8002c9a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ca2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	021b      	lsls	r3, r3, #8
 8002ca8:	697a      	ldr	r2, [r7, #20]
 8002caa:	4313      	orrs	r3, r2
 8002cac:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002cb4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	031b      	lsls	r3, r3, #12
 8002cba:	b29b      	uxth	r3, r3
 8002cbc:	697a      	ldr	r2, [r7, #20]
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002cc8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	011b      	lsls	r3, r3, #4
 8002cce:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8002cd2:	693a      	ldr	r2, [r7, #16]
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	697a      	ldr	r2, [r7, #20]
 8002cdc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	693a      	ldr	r2, [r7, #16]
 8002ce2:	621a      	str	r2, [r3, #32]
}
 8002ce4:	bf00      	nop
 8002ce6:	371c      	adds	r7, #28
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cee:	4770      	bx	lr

08002cf0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b087      	sub	sp, #28
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	60f8      	str	r0, [r7, #12]
 8002cf8:	60b9      	str	r1, [r7, #8]
 8002cfa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	6a1b      	ldr	r3, [r3, #32]
 8002d00:	f023 0210 	bic.w	r2, r3, #16
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	699b      	ldr	r3, [r3, #24]
 8002d0c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	6a1b      	ldr	r3, [r3, #32]
 8002d12:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002d1a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	031b      	lsls	r3, r3, #12
 8002d20:	697a      	ldr	r2, [r7, #20]
 8002d22:	4313      	orrs	r3, r2
 8002d24:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002d2c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002d2e:	68bb      	ldr	r3, [r7, #8]
 8002d30:	011b      	lsls	r3, r3, #4
 8002d32:	693a      	ldr	r2, [r7, #16]
 8002d34:	4313      	orrs	r3, r2
 8002d36:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	697a      	ldr	r2, [r7, #20]
 8002d3c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	693a      	ldr	r2, [r7, #16]
 8002d42:	621a      	str	r2, [r3, #32]
}
 8002d44:	bf00      	nop
 8002d46:	371c      	adds	r7, #28
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4e:	4770      	bx	lr

08002d50 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b087      	sub	sp, #28
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	60f8      	str	r0, [r7, #12]
 8002d58:	60b9      	str	r1, [r7, #8]
 8002d5a:	607a      	str	r2, [r7, #4]
 8002d5c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	6a1b      	ldr	r3, [r3, #32]
 8002d62:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	69db      	ldr	r3, [r3, #28]
 8002d6e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	6a1b      	ldr	r3, [r3, #32]
 8002d74:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	f023 0303 	bic.w	r3, r3, #3
 8002d7c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8002d7e:	697a      	ldr	r2, [r7, #20]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	4313      	orrs	r3, r2
 8002d84:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d8c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	011b      	lsls	r3, r3, #4
 8002d92:	b2db      	uxtb	r3, r3
 8002d94:	697a      	ldr	r2, [r7, #20]
 8002d96:	4313      	orrs	r3, r2
 8002d98:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8002da0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	021b      	lsls	r3, r3, #8
 8002da6:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8002daa:	693a      	ldr	r2, [r7, #16]
 8002dac:	4313      	orrs	r3, r2
 8002dae:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	697a      	ldr	r2, [r7, #20]
 8002db4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	693a      	ldr	r2, [r7, #16]
 8002dba:	621a      	str	r2, [r3, #32]
}
 8002dbc:	bf00      	nop
 8002dbe:	371c      	adds	r7, #28
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc6:	4770      	bx	lr

08002dc8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b087      	sub	sp, #28
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	60f8      	str	r0, [r7, #12]
 8002dd0:	60b9      	str	r1, [r7, #8]
 8002dd2:	607a      	str	r2, [r7, #4]
 8002dd4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	6a1b      	ldr	r3, [r3, #32]
 8002dda:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	69db      	ldr	r3, [r3, #28]
 8002de6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	6a1b      	ldr	r3, [r3, #32]
 8002dec:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002df4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	021b      	lsls	r3, r3, #8
 8002dfa:	697a      	ldr	r2, [r7, #20]
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002e06:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	031b      	lsls	r3, r3, #12
 8002e0c:	b29b      	uxth	r3, r3
 8002e0e:	697a      	ldr	r2, [r7, #20]
 8002e10:	4313      	orrs	r3, r2
 8002e12:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8002e1a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	031b      	lsls	r3, r3, #12
 8002e20:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8002e24:	693a      	ldr	r2, [r7, #16]
 8002e26:	4313      	orrs	r3, r2
 8002e28:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	697a      	ldr	r2, [r7, #20]
 8002e2e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	693a      	ldr	r2, [r7, #16]
 8002e34:	621a      	str	r2, [r3, #32]
}
 8002e36:	bf00      	nop
 8002e38:	371c      	adds	r7, #28
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e40:	4770      	bx	lr

08002e42 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002e42:	b480      	push	{r7}
 8002e44:	b085      	sub	sp, #20
 8002e46:	af00      	add	r7, sp, #0
 8002e48:	6078      	str	r0, [r7, #4]
 8002e4a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e58:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002e5a:	683a      	ldr	r2, [r7, #0]
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	f043 0307 	orr.w	r3, r3, #7
 8002e64:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	68fa      	ldr	r2, [r7, #12]
 8002e6a:	609a      	str	r2, [r3, #8]
}
 8002e6c:	bf00      	nop
 8002e6e:	3714      	adds	r7, #20
 8002e70:	46bd      	mov	sp, r7
 8002e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e76:	4770      	bx	lr

08002e78 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b087      	sub	sp, #28
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	60f8      	str	r0, [r7, #12]
 8002e80:	60b9      	str	r1, [r7, #8]
 8002e82:	607a      	str	r2, [r7, #4]
 8002e84:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e92:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	021a      	lsls	r2, r3, #8
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	431a      	orrs	r2, r3
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	697a      	ldr	r2, [r7, #20]
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	697a      	ldr	r2, [r7, #20]
 8002eaa:	609a      	str	r2, [r3, #8]
}
 8002eac:	bf00      	nop
 8002eae:	371c      	adds	r7, #28
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb6:	4770      	bx	lr

08002eb8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b087      	sub	sp, #28
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	60f8      	str	r0, [r7, #12]
 8002ec0:	60b9      	str	r1, [r7, #8]
 8002ec2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	f003 031f 	and.w	r3, r3, #31
 8002eca:	2201      	movs	r2, #1
 8002ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	6a1a      	ldr	r2, [r3, #32]
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	43db      	mvns	r3, r3
 8002eda:	401a      	ands	r2, r3
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	6a1a      	ldr	r2, [r3, #32]
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	f003 031f 	and.w	r3, r3, #31
 8002eea:	6879      	ldr	r1, [r7, #4]
 8002eec:	fa01 f303 	lsl.w	r3, r1, r3
 8002ef0:	431a      	orrs	r2, r3
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	621a      	str	r2, [r3, #32]
}
 8002ef6:	bf00      	nop
 8002ef8:	371c      	adds	r7, #28
 8002efa:	46bd      	mov	sp, r7
 8002efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f00:	4770      	bx	lr
	...

08002f04 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b085      	sub	sp, #20
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
 8002f0c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f14:	2b01      	cmp	r3, #1
 8002f16:	d101      	bne.n	8002f1c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002f18:	2302      	movs	r3, #2
 8002f1a:	e050      	b.n	8002fbe <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2201      	movs	r2, #1
 8002f20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2202      	movs	r2, #2
 8002f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	689b      	ldr	r3, [r3, #8]
 8002f3a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f42:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	68fa      	ldr	r2, [r7, #12]
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	68fa      	ldr	r2, [r7, #12]
 8002f54:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a1c      	ldr	r2, [pc, #112]	; (8002fcc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d018      	beq.n	8002f92 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f68:	d013      	beq.n	8002f92 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a18      	ldr	r2, [pc, #96]	; (8002fd0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d00e      	beq.n	8002f92 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a16      	ldr	r2, [pc, #88]	; (8002fd4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d009      	beq.n	8002f92 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a15      	ldr	r2, [pc, #84]	; (8002fd8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d004      	beq.n	8002f92 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a13      	ldr	r2, [pc, #76]	; (8002fdc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d10c      	bne.n	8002fac <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f98:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	68ba      	ldr	r2, [r7, #8]
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	68ba      	ldr	r2, [r7, #8]
 8002faa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2201      	movs	r2, #1
 8002fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002fbc:	2300      	movs	r3, #0
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	3714      	adds	r7, #20
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc8:	4770      	bx	lr
 8002fca:	bf00      	nop
 8002fcc:	40010000 	.word	0x40010000
 8002fd0:	40000400 	.word	0x40000400
 8002fd4:	40000800 	.word	0x40000800
 8002fd8:	40000c00 	.word	0x40000c00
 8002fdc:	40014000 	.word	0x40014000

08002fe0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b083      	sub	sp, #12
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002fe8:	bf00      	nop
 8002fea:	370c      	adds	r7, #12
 8002fec:	46bd      	mov	sp, r7
 8002fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff2:	4770      	bx	lr

08002ff4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b083      	sub	sp, #12
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002ffc:	bf00      	nop
 8002ffe:	370c      	adds	r7, #12
 8003000:	46bd      	mov	sp, r7
 8003002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003006:	4770      	bx	lr

08003008 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b082      	sub	sp, #8
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d101      	bne.n	800301a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	e03f      	b.n	800309a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003020:	b2db      	uxtb	r3, r3
 8003022:	2b00      	cmp	r3, #0
 8003024:	d106      	bne.n	8003034 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2200      	movs	r2, #0
 800302a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800302e:	6878      	ldr	r0, [r7, #4]
 8003030:	f7fd fef2 	bl	8000e18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2224      	movs	r2, #36	; 0x24
 8003038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	68da      	ldr	r2, [r3, #12]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800304a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800304c:	6878      	ldr	r0, [r7, #4]
 800304e:	f000 f929 	bl	80032a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	691a      	ldr	r2, [r3, #16]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003060:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	695a      	ldr	r2, [r3, #20]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003070:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	68da      	ldr	r2, [r3, #12]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003080:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2200      	movs	r2, #0
 8003086:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2220      	movs	r2, #32
 800308c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2220      	movs	r2, #32
 8003094:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003098:	2300      	movs	r3, #0
}
 800309a:	4618      	mov	r0, r3
 800309c:	3708      	adds	r7, #8
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}

080030a2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030a2:	b580      	push	{r7, lr}
 80030a4:	b08a      	sub	sp, #40	; 0x28
 80030a6:	af02      	add	r7, sp, #8
 80030a8:	60f8      	str	r0, [r7, #12]
 80030aa:	60b9      	str	r1, [r7, #8]
 80030ac:	603b      	str	r3, [r7, #0]
 80030ae:	4613      	mov	r3, r2
 80030b0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80030b2:	2300      	movs	r3, #0
 80030b4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030bc:	b2db      	uxtb	r3, r3
 80030be:	2b20      	cmp	r3, #32
 80030c0:	d17c      	bne.n	80031bc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d002      	beq.n	80030ce <HAL_UART_Transmit+0x2c>
 80030c8:	88fb      	ldrh	r3, [r7, #6]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d101      	bne.n	80030d2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	e075      	b.n	80031be <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030d8:	2b01      	cmp	r3, #1
 80030da:	d101      	bne.n	80030e0 <HAL_UART_Transmit+0x3e>
 80030dc:	2302      	movs	r3, #2
 80030de:	e06e      	b.n	80031be <HAL_UART_Transmit+0x11c>
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	2201      	movs	r2, #1
 80030e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	2200      	movs	r2, #0
 80030ec:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	2221      	movs	r2, #33	; 0x21
 80030f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80030f6:	f7fd ffef 	bl	80010d8 <HAL_GetTick>
 80030fa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	88fa      	ldrh	r2, [r7, #6]
 8003100:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	88fa      	ldrh	r2, [r7, #6]
 8003106:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003110:	d108      	bne.n	8003124 <HAL_UART_Transmit+0x82>
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	691b      	ldr	r3, [r3, #16]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d104      	bne.n	8003124 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800311a:	2300      	movs	r3, #0
 800311c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800311e:	68bb      	ldr	r3, [r7, #8]
 8003120:	61bb      	str	r3, [r7, #24]
 8003122:	e003      	b.n	800312c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003128:	2300      	movs	r3, #0
 800312a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	2200      	movs	r2, #0
 8003130:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003134:	e02a      	b.n	800318c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	9300      	str	r3, [sp, #0]
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	2200      	movs	r2, #0
 800313e:	2180      	movs	r1, #128	; 0x80
 8003140:	68f8      	ldr	r0, [r7, #12]
 8003142:	f000 f840 	bl	80031c6 <UART_WaitOnFlagUntilTimeout>
 8003146:	4603      	mov	r3, r0
 8003148:	2b00      	cmp	r3, #0
 800314a:	d001      	beq.n	8003150 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800314c:	2303      	movs	r3, #3
 800314e:	e036      	b.n	80031be <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003150:	69fb      	ldr	r3, [r7, #28]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d10b      	bne.n	800316e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003156:	69bb      	ldr	r3, [r7, #24]
 8003158:	881b      	ldrh	r3, [r3, #0]
 800315a:	461a      	mov	r2, r3
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003164:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003166:	69bb      	ldr	r3, [r7, #24]
 8003168:	3302      	adds	r3, #2
 800316a:	61bb      	str	r3, [r7, #24]
 800316c:	e007      	b.n	800317e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800316e:	69fb      	ldr	r3, [r7, #28]
 8003170:	781a      	ldrb	r2, [r3, #0]
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003178:	69fb      	ldr	r3, [r7, #28]
 800317a:	3301      	adds	r3, #1
 800317c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003182:	b29b      	uxth	r3, r3
 8003184:	3b01      	subs	r3, #1
 8003186:	b29a      	uxth	r2, r3
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003190:	b29b      	uxth	r3, r3
 8003192:	2b00      	cmp	r3, #0
 8003194:	d1cf      	bne.n	8003136 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	9300      	str	r3, [sp, #0]
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	2200      	movs	r2, #0
 800319e:	2140      	movs	r1, #64	; 0x40
 80031a0:	68f8      	ldr	r0, [r7, #12]
 80031a2:	f000 f810 	bl	80031c6 <UART_WaitOnFlagUntilTimeout>
 80031a6:	4603      	mov	r3, r0
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d001      	beq.n	80031b0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80031ac:	2303      	movs	r3, #3
 80031ae:	e006      	b.n	80031be <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2220      	movs	r2, #32
 80031b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80031b8:	2300      	movs	r3, #0
 80031ba:	e000      	b.n	80031be <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80031bc:	2302      	movs	r3, #2
  }
}
 80031be:	4618      	mov	r0, r3
 80031c0:	3720      	adds	r7, #32
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}

080031c6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80031c6:	b580      	push	{r7, lr}
 80031c8:	b090      	sub	sp, #64	; 0x40
 80031ca:	af00      	add	r7, sp, #0
 80031cc:	60f8      	str	r0, [r7, #12]
 80031ce:	60b9      	str	r1, [r7, #8]
 80031d0:	603b      	str	r3, [r7, #0]
 80031d2:	4613      	mov	r3, r2
 80031d4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031d6:	e050      	b.n	800327a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031de:	d04c      	beq.n	800327a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80031e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d007      	beq.n	80031f6 <UART_WaitOnFlagUntilTimeout+0x30>
 80031e6:	f7fd ff77 	bl	80010d8 <HAL_GetTick>
 80031ea:	4602      	mov	r2, r0
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	1ad3      	subs	r3, r2, r3
 80031f0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80031f2:	429a      	cmp	r2, r3
 80031f4:	d241      	bcs.n	800327a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	330c      	adds	r3, #12
 80031fc:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003200:	e853 3f00 	ldrex	r3, [r3]
 8003204:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003208:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800320c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	330c      	adds	r3, #12
 8003214:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003216:	637a      	str	r2, [r7, #52]	; 0x34
 8003218:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800321a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800321c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800321e:	e841 2300 	strex	r3, r2, [r1]
 8003222:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003226:	2b00      	cmp	r3, #0
 8003228:	d1e5      	bne.n	80031f6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	3314      	adds	r3, #20
 8003230:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	e853 3f00 	ldrex	r3, [r3]
 8003238:	613b      	str	r3, [r7, #16]
   return(result);
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	f023 0301 	bic.w	r3, r3, #1
 8003240:	63bb      	str	r3, [r7, #56]	; 0x38
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	3314      	adds	r3, #20
 8003248:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800324a:	623a      	str	r2, [r7, #32]
 800324c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800324e:	69f9      	ldr	r1, [r7, #28]
 8003250:	6a3a      	ldr	r2, [r7, #32]
 8003252:	e841 2300 	strex	r3, r2, [r1]
 8003256:	61bb      	str	r3, [r7, #24]
   return(result);
 8003258:	69bb      	ldr	r3, [r7, #24]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d1e5      	bne.n	800322a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	2220      	movs	r2, #32
 8003262:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	2220      	movs	r2, #32
 800326a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	2200      	movs	r2, #0
 8003272:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003276:	2303      	movs	r3, #3
 8003278:	e00f      	b.n	800329a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	681a      	ldr	r2, [r3, #0]
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	4013      	ands	r3, r2
 8003284:	68ba      	ldr	r2, [r7, #8]
 8003286:	429a      	cmp	r2, r3
 8003288:	bf0c      	ite	eq
 800328a:	2301      	moveq	r3, #1
 800328c:	2300      	movne	r3, #0
 800328e:	b2db      	uxtb	r3, r3
 8003290:	461a      	mov	r2, r3
 8003292:	79fb      	ldrb	r3, [r7, #7]
 8003294:	429a      	cmp	r2, r3
 8003296:	d09f      	beq.n	80031d8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003298:	2300      	movs	r3, #0
}
 800329a:	4618      	mov	r0, r3
 800329c:	3740      	adds	r7, #64	; 0x40
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}
	...

080032a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80032a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80032a8:	b0c0      	sub	sp, #256	; 0x100
 80032aa:	af00      	add	r7, sp, #0
 80032ac:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80032b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	691b      	ldr	r3, [r3, #16]
 80032b8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80032bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032c0:	68d9      	ldr	r1, [r3, #12]
 80032c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032c6:	681a      	ldr	r2, [r3, #0]
 80032c8:	ea40 0301 	orr.w	r3, r0, r1
 80032cc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80032ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032d2:	689a      	ldr	r2, [r3, #8]
 80032d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032d8:	691b      	ldr	r3, [r3, #16]
 80032da:	431a      	orrs	r2, r3
 80032dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032e0:	695b      	ldr	r3, [r3, #20]
 80032e2:	431a      	orrs	r2, r3
 80032e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032e8:	69db      	ldr	r3, [r3, #28]
 80032ea:	4313      	orrs	r3, r2
 80032ec:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80032f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	68db      	ldr	r3, [r3, #12]
 80032f8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80032fc:	f021 010c 	bic.w	r1, r1, #12
 8003300:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003304:	681a      	ldr	r2, [r3, #0]
 8003306:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800330a:	430b      	orrs	r3, r1
 800330c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800330e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	695b      	ldr	r3, [r3, #20]
 8003316:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800331a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800331e:	6999      	ldr	r1, [r3, #24]
 8003320:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003324:	681a      	ldr	r2, [r3, #0]
 8003326:	ea40 0301 	orr.w	r3, r0, r1
 800332a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800332c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003330:	681a      	ldr	r2, [r3, #0]
 8003332:	4b8f      	ldr	r3, [pc, #572]	; (8003570 <UART_SetConfig+0x2cc>)
 8003334:	429a      	cmp	r2, r3
 8003336:	d005      	beq.n	8003344 <UART_SetConfig+0xa0>
 8003338:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800333c:	681a      	ldr	r2, [r3, #0]
 800333e:	4b8d      	ldr	r3, [pc, #564]	; (8003574 <UART_SetConfig+0x2d0>)
 8003340:	429a      	cmp	r2, r3
 8003342:	d104      	bne.n	800334e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003344:	f7fe fd98 	bl	8001e78 <HAL_RCC_GetPCLK2Freq>
 8003348:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800334c:	e003      	b.n	8003356 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800334e:	f7fe fd7f 	bl	8001e50 <HAL_RCC_GetPCLK1Freq>
 8003352:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003356:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800335a:	69db      	ldr	r3, [r3, #28]
 800335c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003360:	f040 810c 	bne.w	800357c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003364:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003368:	2200      	movs	r2, #0
 800336a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800336e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003372:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003376:	4622      	mov	r2, r4
 8003378:	462b      	mov	r3, r5
 800337a:	1891      	adds	r1, r2, r2
 800337c:	65b9      	str	r1, [r7, #88]	; 0x58
 800337e:	415b      	adcs	r3, r3
 8003380:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003382:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003386:	4621      	mov	r1, r4
 8003388:	eb12 0801 	adds.w	r8, r2, r1
 800338c:	4629      	mov	r1, r5
 800338e:	eb43 0901 	adc.w	r9, r3, r1
 8003392:	f04f 0200 	mov.w	r2, #0
 8003396:	f04f 0300 	mov.w	r3, #0
 800339a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800339e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80033a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80033a6:	4690      	mov	r8, r2
 80033a8:	4699      	mov	r9, r3
 80033aa:	4623      	mov	r3, r4
 80033ac:	eb18 0303 	adds.w	r3, r8, r3
 80033b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80033b4:	462b      	mov	r3, r5
 80033b6:	eb49 0303 	adc.w	r3, r9, r3
 80033ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80033be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	2200      	movs	r2, #0
 80033c6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80033ca:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80033ce:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80033d2:	460b      	mov	r3, r1
 80033d4:	18db      	adds	r3, r3, r3
 80033d6:	653b      	str	r3, [r7, #80]	; 0x50
 80033d8:	4613      	mov	r3, r2
 80033da:	eb42 0303 	adc.w	r3, r2, r3
 80033de:	657b      	str	r3, [r7, #84]	; 0x54
 80033e0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80033e4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80033e8:	f7fc fefa 	bl	80001e0 <__aeabi_uldivmod>
 80033ec:	4602      	mov	r2, r0
 80033ee:	460b      	mov	r3, r1
 80033f0:	4b61      	ldr	r3, [pc, #388]	; (8003578 <UART_SetConfig+0x2d4>)
 80033f2:	fba3 2302 	umull	r2, r3, r3, r2
 80033f6:	095b      	lsrs	r3, r3, #5
 80033f8:	011c      	lsls	r4, r3, #4
 80033fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80033fe:	2200      	movs	r2, #0
 8003400:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003404:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003408:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800340c:	4642      	mov	r2, r8
 800340e:	464b      	mov	r3, r9
 8003410:	1891      	adds	r1, r2, r2
 8003412:	64b9      	str	r1, [r7, #72]	; 0x48
 8003414:	415b      	adcs	r3, r3
 8003416:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003418:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800341c:	4641      	mov	r1, r8
 800341e:	eb12 0a01 	adds.w	sl, r2, r1
 8003422:	4649      	mov	r1, r9
 8003424:	eb43 0b01 	adc.w	fp, r3, r1
 8003428:	f04f 0200 	mov.w	r2, #0
 800342c:	f04f 0300 	mov.w	r3, #0
 8003430:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003434:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003438:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800343c:	4692      	mov	sl, r2
 800343e:	469b      	mov	fp, r3
 8003440:	4643      	mov	r3, r8
 8003442:	eb1a 0303 	adds.w	r3, sl, r3
 8003446:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800344a:	464b      	mov	r3, r9
 800344c:	eb4b 0303 	adc.w	r3, fp, r3
 8003450:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003454:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	2200      	movs	r2, #0
 800345c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003460:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003464:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003468:	460b      	mov	r3, r1
 800346a:	18db      	adds	r3, r3, r3
 800346c:	643b      	str	r3, [r7, #64]	; 0x40
 800346e:	4613      	mov	r3, r2
 8003470:	eb42 0303 	adc.w	r3, r2, r3
 8003474:	647b      	str	r3, [r7, #68]	; 0x44
 8003476:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800347a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800347e:	f7fc feaf 	bl	80001e0 <__aeabi_uldivmod>
 8003482:	4602      	mov	r2, r0
 8003484:	460b      	mov	r3, r1
 8003486:	4611      	mov	r1, r2
 8003488:	4b3b      	ldr	r3, [pc, #236]	; (8003578 <UART_SetConfig+0x2d4>)
 800348a:	fba3 2301 	umull	r2, r3, r3, r1
 800348e:	095b      	lsrs	r3, r3, #5
 8003490:	2264      	movs	r2, #100	; 0x64
 8003492:	fb02 f303 	mul.w	r3, r2, r3
 8003496:	1acb      	subs	r3, r1, r3
 8003498:	00db      	lsls	r3, r3, #3
 800349a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800349e:	4b36      	ldr	r3, [pc, #216]	; (8003578 <UART_SetConfig+0x2d4>)
 80034a0:	fba3 2302 	umull	r2, r3, r3, r2
 80034a4:	095b      	lsrs	r3, r3, #5
 80034a6:	005b      	lsls	r3, r3, #1
 80034a8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80034ac:	441c      	add	r4, r3
 80034ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80034b2:	2200      	movs	r2, #0
 80034b4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80034b8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80034bc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80034c0:	4642      	mov	r2, r8
 80034c2:	464b      	mov	r3, r9
 80034c4:	1891      	adds	r1, r2, r2
 80034c6:	63b9      	str	r1, [r7, #56]	; 0x38
 80034c8:	415b      	adcs	r3, r3
 80034ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80034cc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80034d0:	4641      	mov	r1, r8
 80034d2:	1851      	adds	r1, r2, r1
 80034d4:	6339      	str	r1, [r7, #48]	; 0x30
 80034d6:	4649      	mov	r1, r9
 80034d8:	414b      	adcs	r3, r1
 80034da:	637b      	str	r3, [r7, #52]	; 0x34
 80034dc:	f04f 0200 	mov.w	r2, #0
 80034e0:	f04f 0300 	mov.w	r3, #0
 80034e4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80034e8:	4659      	mov	r1, fp
 80034ea:	00cb      	lsls	r3, r1, #3
 80034ec:	4651      	mov	r1, sl
 80034ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80034f2:	4651      	mov	r1, sl
 80034f4:	00ca      	lsls	r2, r1, #3
 80034f6:	4610      	mov	r0, r2
 80034f8:	4619      	mov	r1, r3
 80034fa:	4603      	mov	r3, r0
 80034fc:	4642      	mov	r2, r8
 80034fe:	189b      	adds	r3, r3, r2
 8003500:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003504:	464b      	mov	r3, r9
 8003506:	460a      	mov	r2, r1
 8003508:	eb42 0303 	adc.w	r3, r2, r3
 800350c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003510:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	2200      	movs	r2, #0
 8003518:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800351c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003520:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003524:	460b      	mov	r3, r1
 8003526:	18db      	adds	r3, r3, r3
 8003528:	62bb      	str	r3, [r7, #40]	; 0x28
 800352a:	4613      	mov	r3, r2
 800352c:	eb42 0303 	adc.w	r3, r2, r3
 8003530:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003532:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003536:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800353a:	f7fc fe51 	bl	80001e0 <__aeabi_uldivmod>
 800353e:	4602      	mov	r2, r0
 8003540:	460b      	mov	r3, r1
 8003542:	4b0d      	ldr	r3, [pc, #52]	; (8003578 <UART_SetConfig+0x2d4>)
 8003544:	fba3 1302 	umull	r1, r3, r3, r2
 8003548:	095b      	lsrs	r3, r3, #5
 800354a:	2164      	movs	r1, #100	; 0x64
 800354c:	fb01 f303 	mul.w	r3, r1, r3
 8003550:	1ad3      	subs	r3, r2, r3
 8003552:	00db      	lsls	r3, r3, #3
 8003554:	3332      	adds	r3, #50	; 0x32
 8003556:	4a08      	ldr	r2, [pc, #32]	; (8003578 <UART_SetConfig+0x2d4>)
 8003558:	fba2 2303 	umull	r2, r3, r2, r3
 800355c:	095b      	lsrs	r3, r3, #5
 800355e:	f003 0207 	and.w	r2, r3, #7
 8003562:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4422      	add	r2, r4
 800356a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800356c:	e106      	b.n	800377c <UART_SetConfig+0x4d8>
 800356e:	bf00      	nop
 8003570:	40011000 	.word	0x40011000
 8003574:	40011400 	.word	0x40011400
 8003578:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800357c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003580:	2200      	movs	r2, #0
 8003582:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003586:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800358a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800358e:	4642      	mov	r2, r8
 8003590:	464b      	mov	r3, r9
 8003592:	1891      	adds	r1, r2, r2
 8003594:	6239      	str	r1, [r7, #32]
 8003596:	415b      	adcs	r3, r3
 8003598:	627b      	str	r3, [r7, #36]	; 0x24
 800359a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800359e:	4641      	mov	r1, r8
 80035a0:	1854      	adds	r4, r2, r1
 80035a2:	4649      	mov	r1, r9
 80035a4:	eb43 0501 	adc.w	r5, r3, r1
 80035a8:	f04f 0200 	mov.w	r2, #0
 80035ac:	f04f 0300 	mov.w	r3, #0
 80035b0:	00eb      	lsls	r3, r5, #3
 80035b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80035b6:	00e2      	lsls	r2, r4, #3
 80035b8:	4614      	mov	r4, r2
 80035ba:	461d      	mov	r5, r3
 80035bc:	4643      	mov	r3, r8
 80035be:	18e3      	adds	r3, r4, r3
 80035c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80035c4:	464b      	mov	r3, r9
 80035c6:	eb45 0303 	adc.w	r3, r5, r3
 80035ca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80035ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	2200      	movs	r2, #0
 80035d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80035da:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80035de:	f04f 0200 	mov.w	r2, #0
 80035e2:	f04f 0300 	mov.w	r3, #0
 80035e6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80035ea:	4629      	mov	r1, r5
 80035ec:	008b      	lsls	r3, r1, #2
 80035ee:	4621      	mov	r1, r4
 80035f0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80035f4:	4621      	mov	r1, r4
 80035f6:	008a      	lsls	r2, r1, #2
 80035f8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80035fc:	f7fc fdf0 	bl	80001e0 <__aeabi_uldivmod>
 8003600:	4602      	mov	r2, r0
 8003602:	460b      	mov	r3, r1
 8003604:	4b60      	ldr	r3, [pc, #384]	; (8003788 <UART_SetConfig+0x4e4>)
 8003606:	fba3 2302 	umull	r2, r3, r3, r2
 800360a:	095b      	lsrs	r3, r3, #5
 800360c:	011c      	lsls	r4, r3, #4
 800360e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003612:	2200      	movs	r2, #0
 8003614:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003618:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800361c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003620:	4642      	mov	r2, r8
 8003622:	464b      	mov	r3, r9
 8003624:	1891      	adds	r1, r2, r2
 8003626:	61b9      	str	r1, [r7, #24]
 8003628:	415b      	adcs	r3, r3
 800362a:	61fb      	str	r3, [r7, #28]
 800362c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003630:	4641      	mov	r1, r8
 8003632:	1851      	adds	r1, r2, r1
 8003634:	6139      	str	r1, [r7, #16]
 8003636:	4649      	mov	r1, r9
 8003638:	414b      	adcs	r3, r1
 800363a:	617b      	str	r3, [r7, #20]
 800363c:	f04f 0200 	mov.w	r2, #0
 8003640:	f04f 0300 	mov.w	r3, #0
 8003644:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003648:	4659      	mov	r1, fp
 800364a:	00cb      	lsls	r3, r1, #3
 800364c:	4651      	mov	r1, sl
 800364e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003652:	4651      	mov	r1, sl
 8003654:	00ca      	lsls	r2, r1, #3
 8003656:	4610      	mov	r0, r2
 8003658:	4619      	mov	r1, r3
 800365a:	4603      	mov	r3, r0
 800365c:	4642      	mov	r2, r8
 800365e:	189b      	adds	r3, r3, r2
 8003660:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003664:	464b      	mov	r3, r9
 8003666:	460a      	mov	r2, r1
 8003668:	eb42 0303 	adc.w	r3, r2, r3
 800366c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003670:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	2200      	movs	r2, #0
 8003678:	67bb      	str	r3, [r7, #120]	; 0x78
 800367a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800367c:	f04f 0200 	mov.w	r2, #0
 8003680:	f04f 0300 	mov.w	r3, #0
 8003684:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003688:	4649      	mov	r1, r9
 800368a:	008b      	lsls	r3, r1, #2
 800368c:	4641      	mov	r1, r8
 800368e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003692:	4641      	mov	r1, r8
 8003694:	008a      	lsls	r2, r1, #2
 8003696:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800369a:	f7fc fda1 	bl	80001e0 <__aeabi_uldivmod>
 800369e:	4602      	mov	r2, r0
 80036a0:	460b      	mov	r3, r1
 80036a2:	4611      	mov	r1, r2
 80036a4:	4b38      	ldr	r3, [pc, #224]	; (8003788 <UART_SetConfig+0x4e4>)
 80036a6:	fba3 2301 	umull	r2, r3, r3, r1
 80036aa:	095b      	lsrs	r3, r3, #5
 80036ac:	2264      	movs	r2, #100	; 0x64
 80036ae:	fb02 f303 	mul.w	r3, r2, r3
 80036b2:	1acb      	subs	r3, r1, r3
 80036b4:	011b      	lsls	r3, r3, #4
 80036b6:	3332      	adds	r3, #50	; 0x32
 80036b8:	4a33      	ldr	r2, [pc, #204]	; (8003788 <UART_SetConfig+0x4e4>)
 80036ba:	fba2 2303 	umull	r2, r3, r2, r3
 80036be:	095b      	lsrs	r3, r3, #5
 80036c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80036c4:	441c      	add	r4, r3
 80036c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80036ca:	2200      	movs	r2, #0
 80036cc:	673b      	str	r3, [r7, #112]	; 0x70
 80036ce:	677a      	str	r2, [r7, #116]	; 0x74
 80036d0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80036d4:	4642      	mov	r2, r8
 80036d6:	464b      	mov	r3, r9
 80036d8:	1891      	adds	r1, r2, r2
 80036da:	60b9      	str	r1, [r7, #8]
 80036dc:	415b      	adcs	r3, r3
 80036de:	60fb      	str	r3, [r7, #12]
 80036e0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80036e4:	4641      	mov	r1, r8
 80036e6:	1851      	adds	r1, r2, r1
 80036e8:	6039      	str	r1, [r7, #0]
 80036ea:	4649      	mov	r1, r9
 80036ec:	414b      	adcs	r3, r1
 80036ee:	607b      	str	r3, [r7, #4]
 80036f0:	f04f 0200 	mov.w	r2, #0
 80036f4:	f04f 0300 	mov.w	r3, #0
 80036f8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80036fc:	4659      	mov	r1, fp
 80036fe:	00cb      	lsls	r3, r1, #3
 8003700:	4651      	mov	r1, sl
 8003702:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003706:	4651      	mov	r1, sl
 8003708:	00ca      	lsls	r2, r1, #3
 800370a:	4610      	mov	r0, r2
 800370c:	4619      	mov	r1, r3
 800370e:	4603      	mov	r3, r0
 8003710:	4642      	mov	r2, r8
 8003712:	189b      	adds	r3, r3, r2
 8003714:	66bb      	str	r3, [r7, #104]	; 0x68
 8003716:	464b      	mov	r3, r9
 8003718:	460a      	mov	r2, r1
 800371a:	eb42 0303 	adc.w	r3, r2, r3
 800371e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003720:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	2200      	movs	r2, #0
 8003728:	663b      	str	r3, [r7, #96]	; 0x60
 800372a:	667a      	str	r2, [r7, #100]	; 0x64
 800372c:	f04f 0200 	mov.w	r2, #0
 8003730:	f04f 0300 	mov.w	r3, #0
 8003734:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003738:	4649      	mov	r1, r9
 800373a:	008b      	lsls	r3, r1, #2
 800373c:	4641      	mov	r1, r8
 800373e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003742:	4641      	mov	r1, r8
 8003744:	008a      	lsls	r2, r1, #2
 8003746:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800374a:	f7fc fd49 	bl	80001e0 <__aeabi_uldivmod>
 800374e:	4602      	mov	r2, r0
 8003750:	460b      	mov	r3, r1
 8003752:	4b0d      	ldr	r3, [pc, #52]	; (8003788 <UART_SetConfig+0x4e4>)
 8003754:	fba3 1302 	umull	r1, r3, r3, r2
 8003758:	095b      	lsrs	r3, r3, #5
 800375a:	2164      	movs	r1, #100	; 0x64
 800375c:	fb01 f303 	mul.w	r3, r1, r3
 8003760:	1ad3      	subs	r3, r2, r3
 8003762:	011b      	lsls	r3, r3, #4
 8003764:	3332      	adds	r3, #50	; 0x32
 8003766:	4a08      	ldr	r2, [pc, #32]	; (8003788 <UART_SetConfig+0x4e4>)
 8003768:	fba2 2303 	umull	r2, r3, r2, r3
 800376c:	095b      	lsrs	r3, r3, #5
 800376e:	f003 020f 	and.w	r2, r3, #15
 8003772:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4422      	add	r2, r4
 800377a:	609a      	str	r2, [r3, #8]
}
 800377c:	bf00      	nop
 800377e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003782:	46bd      	mov	sp, r7
 8003784:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003788:	51eb851f 	.word	0x51eb851f

0800378c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800378c:	b480      	push	{r7}
 800378e:	b085      	sub	sp, #20
 8003790:	af00      	add	r7, sp, #0
 8003792:	4603      	mov	r3, r0
 8003794:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003796:	2300      	movs	r3, #0
 8003798:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800379a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800379e:	2b84      	cmp	r3, #132	; 0x84
 80037a0:	d005      	beq.n	80037ae <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80037a2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	4413      	add	r3, r2
 80037aa:	3303      	adds	r3, #3
 80037ac:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80037ae:	68fb      	ldr	r3, [r7, #12]
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	3714      	adds	r7, #20
 80037b4:	46bd      	mov	sp, r7
 80037b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ba:	4770      	bx	lr

080037bc <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80037c0:	f000 faca 	bl	8003d58 <vTaskStartScheduler>
  
  return osOK;
 80037c4:	2300      	movs	r3, #0
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	bd80      	pop	{r7, pc}

080037ca <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80037ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 80037cc:	b089      	sub	sp, #36	; 0x24
 80037ce:	af04      	add	r7, sp, #16
 80037d0:	6078      	str	r0, [r7, #4]
 80037d2:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	695b      	ldr	r3, [r3, #20]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d020      	beq.n	800381e <osThreadCreate+0x54>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	699b      	ldr	r3, [r3, #24]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d01c      	beq.n	800381e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	685c      	ldr	r4, [r3, #4]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	691e      	ldr	r6, [r3, #16]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80037f6:	4618      	mov	r0, r3
 80037f8:	f7ff ffc8 	bl	800378c <makeFreeRtosPriority>
 80037fc:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	695b      	ldr	r3, [r3, #20]
 8003802:	687a      	ldr	r2, [r7, #4]
 8003804:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003806:	9202      	str	r2, [sp, #8]
 8003808:	9301      	str	r3, [sp, #4]
 800380a:	9100      	str	r1, [sp, #0]
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	4632      	mov	r2, r6
 8003810:	4629      	mov	r1, r5
 8003812:	4620      	mov	r0, r4
 8003814:	f000 f8d9 	bl	80039ca <xTaskCreateStatic>
 8003818:	4603      	mov	r3, r0
 800381a:	60fb      	str	r3, [r7, #12]
 800381c:	e01c      	b.n	8003858 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	685c      	ldr	r4, [r3, #4]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800382a:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003832:	4618      	mov	r0, r3
 8003834:	f7ff ffaa 	bl	800378c <makeFreeRtosPriority>
 8003838:	4602      	mov	r2, r0
 800383a:	f107 030c 	add.w	r3, r7, #12
 800383e:	9301      	str	r3, [sp, #4]
 8003840:	9200      	str	r2, [sp, #0]
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	4632      	mov	r2, r6
 8003846:	4629      	mov	r1, r5
 8003848:	4620      	mov	r0, r4
 800384a:	f000 f91b 	bl	8003a84 <xTaskCreate>
 800384e:	4603      	mov	r3, r0
 8003850:	2b01      	cmp	r3, #1
 8003852:	d001      	beq.n	8003858 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003854:	2300      	movs	r3, #0
 8003856:	e000      	b.n	800385a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003858:	68fb      	ldr	r3, [r7, #12]
}
 800385a:	4618      	mov	r0, r3
 800385c:	3714      	adds	r7, #20
 800385e:	46bd      	mov	sp, r7
 8003860:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003862 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003862:	b480      	push	{r7}
 8003864:	b083      	sub	sp, #12
 8003866:	af00      	add	r7, sp, #0
 8003868:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	f103 0208 	add.w	r2, r3, #8
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	f04f 32ff 	mov.w	r2, #4294967295
 800387a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	f103 0208 	add.w	r2, r3, #8
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	f103 0208 	add.w	r2, r3, #8
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2200      	movs	r2, #0
 8003894:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003896:	bf00      	nop
 8003898:	370c      	adds	r7, #12
 800389a:	46bd      	mov	sp, r7
 800389c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a0:	4770      	bx	lr

080038a2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80038a2:	b480      	push	{r7}
 80038a4:	b083      	sub	sp, #12
 80038a6:	af00      	add	r7, sp, #0
 80038a8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2200      	movs	r2, #0
 80038ae:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80038b0:	bf00      	nop
 80038b2:	370c      	adds	r7, #12
 80038b4:	46bd      	mov	sp, r7
 80038b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ba:	4770      	bx	lr

080038bc <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80038bc:	b480      	push	{r7}
 80038be:	b085      	sub	sp, #20
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
 80038c4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	68fa      	ldr	r2, [r7, #12]
 80038d0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	689a      	ldr	r2, [r3, #8]
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	689b      	ldr	r3, [r3, #8]
 80038de:	683a      	ldr	r2, [r7, #0]
 80038e0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	683a      	ldr	r2, [r7, #0]
 80038e6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	687a      	ldr	r2, [r7, #4]
 80038ec:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	1c5a      	adds	r2, r3, #1
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	601a      	str	r2, [r3, #0]
}
 80038f8:	bf00      	nop
 80038fa:	3714      	adds	r7, #20
 80038fc:	46bd      	mov	sp, r7
 80038fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003902:	4770      	bx	lr

08003904 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003904:	b480      	push	{r7}
 8003906:	b085      	sub	sp, #20
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
 800390c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003914:	68bb      	ldr	r3, [r7, #8]
 8003916:	f1b3 3fff 	cmp.w	r3, #4294967295
 800391a:	d103      	bne.n	8003924 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	691b      	ldr	r3, [r3, #16]
 8003920:	60fb      	str	r3, [r7, #12]
 8003922:	e00c      	b.n	800393e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	3308      	adds	r3, #8
 8003928:	60fb      	str	r3, [r7, #12]
 800392a:	e002      	b.n	8003932 <vListInsert+0x2e>
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	60fb      	str	r3, [r7, #12]
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	68ba      	ldr	r2, [r7, #8]
 800393a:	429a      	cmp	r2, r3
 800393c:	d2f6      	bcs.n	800392c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	685a      	ldr	r2, [r3, #4]
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	683a      	ldr	r2, [r7, #0]
 800394c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	68fa      	ldr	r2, [r7, #12]
 8003952:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	683a      	ldr	r2, [r7, #0]
 8003958:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	687a      	ldr	r2, [r7, #4]
 800395e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	1c5a      	adds	r2, r3, #1
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	601a      	str	r2, [r3, #0]
}
 800396a:	bf00      	nop
 800396c:	3714      	adds	r7, #20
 800396e:	46bd      	mov	sp, r7
 8003970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003974:	4770      	bx	lr

08003976 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003976:	b480      	push	{r7}
 8003978:	b085      	sub	sp, #20
 800397a:	af00      	add	r7, sp, #0
 800397c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	691b      	ldr	r3, [r3, #16]
 8003982:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	687a      	ldr	r2, [r7, #4]
 800398a:	6892      	ldr	r2, [r2, #8]
 800398c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	689b      	ldr	r3, [r3, #8]
 8003992:	687a      	ldr	r2, [r7, #4]
 8003994:	6852      	ldr	r2, [r2, #4]
 8003996:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	687a      	ldr	r2, [r7, #4]
 800399e:	429a      	cmp	r2, r3
 80039a0:	d103      	bne.n	80039aa <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	689a      	ldr	r2, [r3, #8]
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2200      	movs	r2, #0
 80039ae:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	1e5a      	subs	r2, r3, #1
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
}
 80039be:	4618      	mov	r0, r3
 80039c0:	3714      	adds	r7, #20
 80039c2:	46bd      	mov	sp, r7
 80039c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c8:	4770      	bx	lr

080039ca <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80039ca:	b580      	push	{r7, lr}
 80039cc:	b08e      	sub	sp, #56	; 0x38
 80039ce:	af04      	add	r7, sp, #16
 80039d0:	60f8      	str	r0, [r7, #12]
 80039d2:	60b9      	str	r1, [r7, #8]
 80039d4:	607a      	str	r2, [r7, #4]
 80039d6:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80039d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d10a      	bne.n	80039f4 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80039de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039e2:	f383 8811 	msr	BASEPRI, r3
 80039e6:	f3bf 8f6f 	isb	sy
 80039ea:	f3bf 8f4f 	dsb	sy
 80039ee:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80039f0:	bf00      	nop
 80039f2:	e7fe      	b.n	80039f2 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80039f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d10a      	bne.n	8003a10 <xTaskCreateStatic+0x46>
	__asm volatile
 80039fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039fe:	f383 8811 	msr	BASEPRI, r3
 8003a02:	f3bf 8f6f 	isb	sy
 8003a06:	f3bf 8f4f 	dsb	sy
 8003a0a:	61fb      	str	r3, [r7, #28]
}
 8003a0c:	bf00      	nop
 8003a0e:	e7fe      	b.n	8003a0e <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003a10:	2354      	movs	r3, #84	; 0x54
 8003a12:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003a14:	693b      	ldr	r3, [r7, #16]
 8003a16:	2b54      	cmp	r3, #84	; 0x54
 8003a18:	d00a      	beq.n	8003a30 <xTaskCreateStatic+0x66>
	__asm volatile
 8003a1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a1e:	f383 8811 	msr	BASEPRI, r3
 8003a22:	f3bf 8f6f 	isb	sy
 8003a26:	f3bf 8f4f 	dsb	sy
 8003a2a:	61bb      	str	r3, [r7, #24]
}
 8003a2c:	bf00      	nop
 8003a2e:	e7fe      	b.n	8003a2e <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003a30:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003a32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d01e      	beq.n	8003a76 <xTaskCreateStatic+0xac>
 8003a38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d01b      	beq.n	8003a76 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003a3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a40:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a44:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003a46:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a4a:	2202      	movs	r2, #2
 8003a4c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003a50:	2300      	movs	r3, #0
 8003a52:	9303      	str	r3, [sp, #12]
 8003a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a56:	9302      	str	r3, [sp, #8]
 8003a58:	f107 0314 	add.w	r3, r7, #20
 8003a5c:	9301      	str	r3, [sp, #4]
 8003a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a60:	9300      	str	r3, [sp, #0]
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	687a      	ldr	r2, [r7, #4]
 8003a66:	68b9      	ldr	r1, [r7, #8]
 8003a68:	68f8      	ldr	r0, [r7, #12]
 8003a6a:	f000 f850 	bl	8003b0e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003a6e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003a70:	f000 f8d4 	bl	8003c1c <prvAddNewTaskToReadyList>
 8003a74:	e001      	b.n	8003a7a <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003a76:	2300      	movs	r3, #0
 8003a78:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003a7a:	697b      	ldr	r3, [r7, #20]
	}
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	3728      	adds	r7, #40	; 0x28
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bd80      	pop	{r7, pc}

08003a84 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b08c      	sub	sp, #48	; 0x30
 8003a88:	af04      	add	r7, sp, #16
 8003a8a:	60f8      	str	r0, [r7, #12]
 8003a8c:	60b9      	str	r1, [r7, #8]
 8003a8e:	603b      	str	r3, [r7, #0]
 8003a90:	4613      	mov	r3, r2
 8003a92:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003a94:	88fb      	ldrh	r3, [r7, #6]
 8003a96:	009b      	lsls	r3, r3, #2
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f000 fec5 	bl	8004828 <pvPortMalloc>
 8003a9e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d00e      	beq.n	8003ac4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003aa6:	2054      	movs	r0, #84	; 0x54
 8003aa8:	f000 febe 	bl	8004828 <pvPortMalloc>
 8003aac:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003aae:	69fb      	ldr	r3, [r7, #28]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d003      	beq.n	8003abc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003ab4:	69fb      	ldr	r3, [r7, #28]
 8003ab6:	697a      	ldr	r2, [r7, #20]
 8003ab8:	631a      	str	r2, [r3, #48]	; 0x30
 8003aba:	e005      	b.n	8003ac8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003abc:	6978      	ldr	r0, [r7, #20]
 8003abe:	f000 ff7f 	bl	80049c0 <vPortFree>
 8003ac2:	e001      	b.n	8003ac8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003ac8:	69fb      	ldr	r3, [r7, #28]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d017      	beq.n	8003afe <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003ace:	69fb      	ldr	r3, [r7, #28]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003ad6:	88fa      	ldrh	r2, [r7, #6]
 8003ad8:	2300      	movs	r3, #0
 8003ada:	9303      	str	r3, [sp, #12]
 8003adc:	69fb      	ldr	r3, [r7, #28]
 8003ade:	9302      	str	r3, [sp, #8]
 8003ae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ae2:	9301      	str	r3, [sp, #4]
 8003ae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ae6:	9300      	str	r3, [sp, #0]
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	68b9      	ldr	r1, [r7, #8]
 8003aec:	68f8      	ldr	r0, [r7, #12]
 8003aee:	f000 f80e 	bl	8003b0e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003af2:	69f8      	ldr	r0, [r7, #28]
 8003af4:	f000 f892 	bl	8003c1c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003af8:	2301      	movs	r3, #1
 8003afa:	61bb      	str	r3, [r7, #24]
 8003afc:	e002      	b.n	8003b04 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003afe:	f04f 33ff 	mov.w	r3, #4294967295
 8003b02:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003b04:	69bb      	ldr	r3, [r7, #24]
	}
 8003b06:	4618      	mov	r0, r3
 8003b08:	3720      	adds	r7, #32
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}

08003b0e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003b0e:	b580      	push	{r7, lr}
 8003b10:	b088      	sub	sp, #32
 8003b12:	af00      	add	r7, sp, #0
 8003b14:	60f8      	str	r0, [r7, #12]
 8003b16:	60b9      	str	r1, [r7, #8]
 8003b18:	607a      	str	r2, [r7, #4]
 8003b1a:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003b1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003b26:	3b01      	subs	r3, #1
 8003b28:	009b      	lsls	r3, r3, #2
 8003b2a:	4413      	add	r3, r2
 8003b2c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003b2e:	69bb      	ldr	r3, [r7, #24]
 8003b30:	f023 0307 	bic.w	r3, r3, #7
 8003b34:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003b36:	69bb      	ldr	r3, [r7, #24]
 8003b38:	f003 0307 	and.w	r3, r3, #7
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d00a      	beq.n	8003b56 <prvInitialiseNewTask+0x48>
	__asm volatile
 8003b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b44:	f383 8811 	msr	BASEPRI, r3
 8003b48:	f3bf 8f6f 	isb	sy
 8003b4c:	f3bf 8f4f 	dsb	sy
 8003b50:	617b      	str	r3, [r7, #20]
}
 8003b52:	bf00      	nop
 8003b54:	e7fe      	b.n	8003b54 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d01f      	beq.n	8003b9c <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	61fb      	str	r3, [r7, #28]
 8003b60:	e012      	b.n	8003b88 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003b62:	68ba      	ldr	r2, [r7, #8]
 8003b64:	69fb      	ldr	r3, [r7, #28]
 8003b66:	4413      	add	r3, r2
 8003b68:	7819      	ldrb	r1, [r3, #0]
 8003b6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b6c:	69fb      	ldr	r3, [r7, #28]
 8003b6e:	4413      	add	r3, r2
 8003b70:	3334      	adds	r3, #52	; 0x34
 8003b72:	460a      	mov	r2, r1
 8003b74:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003b76:	68ba      	ldr	r2, [r7, #8]
 8003b78:	69fb      	ldr	r3, [r7, #28]
 8003b7a:	4413      	add	r3, r2
 8003b7c:	781b      	ldrb	r3, [r3, #0]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d006      	beq.n	8003b90 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003b82:	69fb      	ldr	r3, [r7, #28]
 8003b84:	3301      	adds	r3, #1
 8003b86:	61fb      	str	r3, [r7, #28]
 8003b88:	69fb      	ldr	r3, [r7, #28]
 8003b8a:	2b0f      	cmp	r3, #15
 8003b8c:	d9e9      	bls.n	8003b62 <prvInitialiseNewTask+0x54>
 8003b8e:	e000      	b.n	8003b92 <prvInitialiseNewTask+0x84>
			{
				break;
 8003b90:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b94:	2200      	movs	r2, #0
 8003b96:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003b9a:	e003      	b.n	8003ba4 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ba6:	2b06      	cmp	r3, #6
 8003ba8:	d901      	bls.n	8003bae <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003baa:	2306      	movs	r3, #6
 8003bac:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bb0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003bb2:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003bb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bb6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003bb8:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003bc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bc2:	3304      	adds	r3, #4
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	f7ff fe6c 	bl	80038a2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bcc:	3318      	adds	r3, #24
 8003bce:	4618      	mov	r0, r3
 8003bd0:	f7ff fe67 	bl	80038a2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003bd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bd6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003bd8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003bda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bdc:	f1c3 0207 	rsb	r2, r3, #7
 8003be0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003be2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003be4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003be6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003be8:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bec:	2200      	movs	r2, #0
 8003bee:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003bf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003bf8:	683a      	ldr	r2, [r7, #0]
 8003bfa:	68f9      	ldr	r1, [r7, #12]
 8003bfc:	69b8      	ldr	r0, [r7, #24]
 8003bfe:	f000 fc05 	bl	800440c <pxPortInitialiseStack>
 8003c02:	4602      	mov	r2, r0
 8003c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c06:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003c08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d002      	beq.n	8003c14 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c12:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003c14:	bf00      	nop
 8003c16:	3720      	adds	r7, #32
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bd80      	pop	{r7, pc}

08003c1c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b082      	sub	sp, #8
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003c24:	f000 fd1e 	bl	8004664 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003c28:	4b2a      	ldr	r3, [pc, #168]	; (8003cd4 <prvAddNewTaskToReadyList+0xb8>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	3301      	adds	r3, #1
 8003c2e:	4a29      	ldr	r2, [pc, #164]	; (8003cd4 <prvAddNewTaskToReadyList+0xb8>)
 8003c30:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003c32:	4b29      	ldr	r3, [pc, #164]	; (8003cd8 <prvAddNewTaskToReadyList+0xbc>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d109      	bne.n	8003c4e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003c3a:	4a27      	ldr	r2, [pc, #156]	; (8003cd8 <prvAddNewTaskToReadyList+0xbc>)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003c40:	4b24      	ldr	r3, [pc, #144]	; (8003cd4 <prvAddNewTaskToReadyList+0xb8>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	2b01      	cmp	r3, #1
 8003c46:	d110      	bne.n	8003c6a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003c48:	f000 fabc 	bl	80041c4 <prvInitialiseTaskLists>
 8003c4c:	e00d      	b.n	8003c6a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003c4e:	4b23      	ldr	r3, [pc, #140]	; (8003cdc <prvAddNewTaskToReadyList+0xc0>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d109      	bne.n	8003c6a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003c56:	4b20      	ldr	r3, [pc, #128]	; (8003cd8 <prvAddNewTaskToReadyList+0xbc>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c60:	429a      	cmp	r2, r3
 8003c62:	d802      	bhi.n	8003c6a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003c64:	4a1c      	ldr	r2, [pc, #112]	; (8003cd8 <prvAddNewTaskToReadyList+0xbc>)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003c6a:	4b1d      	ldr	r3, [pc, #116]	; (8003ce0 <prvAddNewTaskToReadyList+0xc4>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	3301      	adds	r3, #1
 8003c70:	4a1b      	ldr	r2, [pc, #108]	; (8003ce0 <prvAddNewTaskToReadyList+0xc4>)
 8003c72:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c78:	2201      	movs	r2, #1
 8003c7a:	409a      	lsls	r2, r3
 8003c7c:	4b19      	ldr	r3, [pc, #100]	; (8003ce4 <prvAddNewTaskToReadyList+0xc8>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4313      	orrs	r3, r2
 8003c82:	4a18      	ldr	r2, [pc, #96]	; (8003ce4 <prvAddNewTaskToReadyList+0xc8>)
 8003c84:	6013      	str	r3, [r2, #0]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c8a:	4613      	mov	r3, r2
 8003c8c:	009b      	lsls	r3, r3, #2
 8003c8e:	4413      	add	r3, r2
 8003c90:	009b      	lsls	r3, r3, #2
 8003c92:	4a15      	ldr	r2, [pc, #84]	; (8003ce8 <prvAddNewTaskToReadyList+0xcc>)
 8003c94:	441a      	add	r2, r3
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	3304      	adds	r3, #4
 8003c9a:	4619      	mov	r1, r3
 8003c9c:	4610      	mov	r0, r2
 8003c9e:	f7ff fe0d 	bl	80038bc <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003ca2:	f000 fd0f 	bl	80046c4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003ca6:	4b0d      	ldr	r3, [pc, #52]	; (8003cdc <prvAddNewTaskToReadyList+0xc0>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d00e      	beq.n	8003ccc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003cae:	4b0a      	ldr	r3, [pc, #40]	; (8003cd8 <prvAddNewTaskToReadyList+0xbc>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cb8:	429a      	cmp	r2, r3
 8003cba:	d207      	bcs.n	8003ccc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003cbc:	4b0b      	ldr	r3, [pc, #44]	; (8003cec <prvAddNewTaskToReadyList+0xd0>)
 8003cbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003cc2:	601a      	str	r2, [r3, #0]
 8003cc4:	f3bf 8f4f 	dsb	sy
 8003cc8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003ccc:	bf00      	nop
 8003cce:	3708      	adds	r7, #8
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	bd80      	pop	{r7, pc}
 8003cd4:	200004d4 	.word	0x200004d4
 8003cd8:	200003d4 	.word	0x200003d4
 8003cdc:	200004e0 	.word	0x200004e0
 8003ce0:	200004f0 	.word	0x200004f0
 8003ce4:	200004dc 	.word	0x200004dc
 8003ce8:	200003d8 	.word	0x200003d8
 8003cec:	e000ed04 	.word	0xe000ed04

08003cf0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b084      	sub	sp, #16
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d017      	beq.n	8003d32 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003d02:	4b13      	ldr	r3, [pc, #76]	; (8003d50 <vTaskDelay+0x60>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d00a      	beq.n	8003d20 <vTaskDelay+0x30>
	__asm volatile
 8003d0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d0e:	f383 8811 	msr	BASEPRI, r3
 8003d12:	f3bf 8f6f 	isb	sy
 8003d16:	f3bf 8f4f 	dsb	sy
 8003d1a:	60bb      	str	r3, [r7, #8]
}
 8003d1c:	bf00      	nop
 8003d1e:	e7fe      	b.n	8003d1e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003d20:	f000 f87a 	bl	8003e18 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003d24:	2100      	movs	r1, #0
 8003d26:	6878      	ldr	r0, [r7, #4]
 8003d28:	f000 fb0a 	bl	8004340 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003d2c:	f000 f882 	bl	8003e34 <xTaskResumeAll>
 8003d30:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d107      	bne.n	8003d48 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003d38:	4b06      	ldr	r3, [pc, #24]	; (8003d54 <vTaskDelay+0x64>)
 8003d3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d3e:	601a      	str	r2, [r3, #0]
 8003d40:	f3bf 8f4f 	dsb	sy
 8003d44:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003d48:	bf00      	nop
 8003d4a:	3710      	adds	r7, #16
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bd80      	pop	{r7, pc}
 8003d50:	200004fc 	.word	0x200004fc
 8003d54:	e000ed04 	.word	0xe000ed04

08003d58 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b08a      	sub	sp, #40	; 0x28
 8003d5c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003d62:	2300      	movs	r3, #0
 8003d64:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003d66:	463a      	mov	r2, r7
 8003d68:	1d39      	adds	r1, r7, #4
 8003d6a:	f107 0308 	add.w	r3, r7, #8
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f7fc fbb4 	bl	80004dc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003d74:	6839      	ldr	r1, [r7, #0]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	68ba      	ldr	r2, [r7, #8]
 8003d7a:	9202      	str	r2, [sp, #8]
 8003d7c:	9301      	str	r3, [sp, #4]
 8003d7e:	2300      	movs	r3, #0
 8003d80:	9300      	str	r3, [sp, #0]
 8003d82:	2300      	movs	r3, #0
 8003d84:	460a      	mov	r2, r1
 8003d86:	491e      	ldr	r1, [pc, #120]	; (8003e00 <vTaskStartScheduler+0xa8>)
 8003d88:	481e      	ldr	r0, [pc, #120]	; (8003e04 <vTaskStartScheduler+0xac>)
 8003d8a:	f7ff fe1e 	bl	80039ca <xTaskCreateStatic>
 8003d8e:	4603      	mov	r3, r0
 8003d90:	4a1d      	ldr	r2, [pc, #116]	; (8003e08 <vTaskStartScheduler+0xb0>)
 8003d92:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003d94:	4b1c      	ldr	r3, [pc, #112]	; (8003e08 <vTaskStartScheduler+0xb0>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d002      	beq.n	8003da2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	617b      	str	r3, [r7, #20]
 8003da0:	e001      	b.n	8003da6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003da2:	2300      	movs	r3, #0
 8003da4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	2b01      	cmp	r3, #1
 8003daa:	d116      	bne.n	8003dda <vTaskStartScheduler+0x82>
	__asm volatile
 8003dac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003db0:	f383 8811 	msr	BASEPRI, r3
 8003db4:	f3bf 8f6f 	isb	sy
 8003db8:	f3bf 8f4f 	dsb	sy
 8003dbc:	613b      	str	r3, [r7, #16]
}
 8003dbe:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003dc0:	4b12      	ldr	r3, [pc, #72]	; (8003e0c <vTaskStartScheduler+0xb4>)
 8003dc2:	f04f 32ff 	mov.w	r2, #4294967295
 8003dc6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003dc8:	4b11      	ldr	r3, [pc, #68]	; (8003e10 <vTaskStartScheduler+0xb8>)
 8003dca:	2201      	movs	r2, #1
 8003dcc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003dce:	4b11      	ldr	r3, [pc, #68]	; (8003e14 <vTaskStartScheduler+0xbc>)
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003dd4:	f000 fba4 	bl	8004520 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003dd8:	e00e      	b.n	8003df8 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003de0:	d10a      	bne.n	8003df8 <vTaskStartScheduler+0xa0>
	__asm volatile
 8003de2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003de6:	f383 8811 	msr	BASEPRI, r3
 8003dea:	f3bf 8f6f 	isb	sy
 8003dee:	f3bf 8f4f 	dsb	sy
 8003df2:	60fb      	str	r3, [r7, #12]
}
 8003df4:	bf00      	nop
 8003df6:	e7fe      	b.n	8003df6 <vTaskStartScheduler+0x9e>
}
 8003df8:	bf00      	nop
 8003dfa:	3718      	adds	r7, #24
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bd80      	pop	{r7, pc}
 8003e00:	08004cec 	.word	0x08004cec
 8003e04:	08004195 	.word	0x08004195
 8003e08:	200004f8 	.word	0x200004f8
 8003e0c:	200004f4 	.word	0x200004f4
 8003e10:	200004e0 	.word	0x200004e0
 8003e14:	200004d8 	.word	0x200004d8

08003e18 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003e18:	b480      	push	{r7}
 8003e1a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003e1c:	4b04      	ldr	r3, [pc, #16]	; (8003e30 <vTaskSuspendAll+0x18>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	3301      	adds	r3, #1
 8003e22:	4a03      	ldr	r2, [pc, #12]	; (8003e30 <vTaskSuspendAll+0x18>)
 8003e24:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003e26:	bf00      	nop
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2e:	4770      	bx	lr
 8003e30:	200004fc 	.word	0x200004fc

08003e34 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b084      	sub	sp, #16
 8003e38:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003e3e:	2300      	movs	r3, #0
 8003e40:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003e42:	4b41      	ldr	r3, [pc, #260]	; (8003f48 <xTaskResumeAll+0x114>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d10a      	bne.n	8003e60 <xTaskResumeAll+0x2c>
	__asm volatile
 8003e4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e4e:	f383 8811 	msr	BASEPRI, r3
 8003e52:	f3bf 8f6f 	isb	sy
 8003e56:	f3bf 8f4f 	dsb	sy
 8003e5a:	603b      	str	r3, [r7, #0]
}
 8003e5c:	bf00      	nop
 8003e5e:	e7fe      	b.n	8003e5e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003e60:	f000 fc00 	bl	8004664 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003e64:	4b38      	ldr	r3, [pc, #224]	; (8003f48 <xTaskResumeAll+0x114>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	3b01      	subs	r3, #1
 8003e6a:	4a37      	ldr	r2, [pc, #220]	; (8003f48 <xTaskResumeAll+0x114>)
 8003e6c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003e6e:	4b36      	ldr	r3, [pc, #216]	; (8003f48 <xTaskResumeAll+0x114>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d161      	bne.n	8003f3a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003e76:	4b35      	ldr	r3, [pc, #212]	; (8003f4c <xTaskResumeAll+0x118>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d05d      	beq.n	8003f3a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003e7e:	e02e      	b.n	8003ede <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e80:	4b33      	ldr	r3, [pc, #204]	; (8003f50 <xTaskResumeAll+0x11c>)
 8003e82:	68db      	ldr	r3, [r3, #12]
 8003e84:	68db      	ldr	r3, [r3, #12]
 8003e86:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	3318      	adds	r3, #24
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	f7ff fd72 	bl	8003976 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	3304      	adds	r3, #4
 8003e96:	4618      	mov	r0, r3
 8003e98:	f7ff fd6d 	bl	8003976 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ea0:	2201      	movs	r2, #1
 8003ea2:	409a      	lsls	r2, r3
 8003ea4:	4b2b      	ldr	r3, [pc, #172]	; (8003f54 <xTaskResumeAll+0x120>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	4a2a      	ldr	r2, [pc, #168]	; (8003f54 <xTaskResumeAll+0x120>)
 8003eac:	6013      	str	r3, [r2, #0]
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003eb2:	4613      	mov	r3, r2
 8003eb4:	009b      	lsls	r3, r3, #2
 8003eb6:	4413      	add	r3, r2
 8003eb8:	009b      	lsls	r3, r3, #2
 8003eba:	4a27      	ldr	r2, [pc, #156]	; (8003f58 <xTaskResumeAll+0x124>)
 8003ebc:	441a      	add	r2, r3
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	3304      	adds	r3, #4
 8003ec2:	4619      	mov	r1, r3
 8003ec4:	4610      	mov	r0, r2
 8003ec6:	f7ff fcf9 	bl	80038bc <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ece:	4b23      	ldr	r3, [pc, #140]	; (8003f5c <xTaskResumeAll+0x128>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ed4:	429a      	cmp	r2, r3
 8003ed6:	d302      	bcc.n	8003ede <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8003ed8:	4b21      	ldr	r3, [pc, #132]	; (8003f60 <xTaskResumeAll+0x12c>)
 8003eda:	2201      	movs	r2, #1
 8003edc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003ede:	4b1c      	ldr	r3, [pc, #112]	; (8003f50 <xTaskResumeAll+0x11c>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d1cc      	bne.n	8003e80 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d001      	beq.n	8003ef0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003eec:	f000 fa08 	bl	8004300 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003ef0:	4b1c      	ldr	r3, [pc, #112]	; (8003f64 <xTaskResumeAll+0x130>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d010      	beq.n	8003f1e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003efc:	f000 f836 	bl	8003f6c <xTaskIncrementTick>
 8003f00:	4603      	mov	r3, r0
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d002      	beq.n	8003f0c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8003f06:	4b16      	ldr	r3, [pc, #88]	; (8003f60 <xTaskResumeAll+0x12c>)
 8003f08:	2201      	movs	r2, #1
 8003f0a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	3b01      	subs	r3, #1
 8003f10:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d1f1      	bne.n	8003efc <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8003f18:	4b12      	ldr	r3, [pc, #72]	; (8003f64 <xTaskResumeAll+0x130>)
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003f1e:	4b10      	ldr	r3, [pc, #64]	; (8003f60 <xTaskResumeAll+0x12c>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d009      	beq.n	8003f3a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003f26:	2301      	movs	r3, #1
 8003f28:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003f2a:	4b0f      	ldr	r3, [pc, #60]	; (8003f68 <xTaskResumeAll+0x134>)
 8003f2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f30:	601a      	str	r2, [r3, #0]
 8003f32:	f3bf 8f4f 	dsb	sy
 8003f36:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003f3a:	f000 fbc3 	bl	80046c4 <vPortExitCritical>

	return xAlreadyYielded;
 8003f3e:	68bb      	ldr	r3, [r7, #8]
}
 8003f40:	4618      	mov	r0, r3
 8003f42:	3710      	adds	r7, #16
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bd80      	pop	{r7, pc}
 8003f48:	200004fc 	.word	0x200004fc
 8003f4c:	200004d4 	.word	0x200004d4
 8003f50:	20000494 	.word	0x20000494
 8003f54:	200004dc 	.word	0x200004dc
 8003f58:	200003d8 	.word	0x200003d8
 8003f5c:	200003d4 	.word	0x200003d4
 8003f60:	200004e8 	.word	0x200004e8
 8003f64:	200004e4 	.word	0x200004e4
 8003f68:	e000ed04 	.word	0xe000ed04

08003f6c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b086      	sub	sp, #24
 8003f70:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003f72:	2300      	movs	r3, #0
 8003f74:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003f76:	4b4e      	ldr	r3, [pc, #312]	; (80040b0 <xTaskIncrementTick+0x144>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	f040 808e 	bne.w	800409c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003f80:	4b4c      	ldr	r3, [pc, #304]	; (80040b4 <xTaskIncrementTick+0x148>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	3301      	adds	r3, #1
 8003f86:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003f88:	4a4a      	ldr	r2, [pc, #296]	; (80040b4 <xTaskIncrementTick+0x148>)
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d120      	bne.n	8003fd6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003f94:	4b48      	ldr	r3, [pc, #288]	; (80040b8 <xTaskIncrementTick+0x14c>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d00a      	beq.n	8003fb4 <xTaskIncrementTick+0x48>
	__asm volatile
 8003f9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fa2:	f383 8811 	msr	BASEPRI, r3
 8003fa6:	f3bf 8f6f 	isb	sy
 8003faa:	f3bf 8f4f 	dsb	sy
 8003fae:	603b      	str	r3, [r7, #0]
}
 8003fb0:	bf00      	nop
 8003fb2:	e7fe      	b.n	8003fb2 <xTaskIncrementTick+0x46>
 8003fb4:	4b40      	ldr	r3, [pc, #256]	; (80040b8 <xTaskIncrementTick+0x14c>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	60fb      	str	r3, [r7, #12]
 8003fba:	4b40      	ldr	r3, [pc, #256]	; (80040bc <xTaskIncrementTick+0x150>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a3e      	ldr	r2, [pc, #248]	; (80040b8 <xTaskIncrementTick+0x14c>)
 8003fc0:	6013      	str	r3, [r2, #0]
 8003fc2:	4a3e      	ldr	r2, [pc, #248]	; (80040bc <xTaskIncrementTick+0x150>)
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	6013      	str	r3, [r2, #0]
 8003fc8:	4b3d      	ldr	r3, [pc, #244]	; (80040c0 <xTaskIncrementTick+0x154>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	3301      	adds	r3, #1
 8003fce:	4a3c      	ldr	r2, [pc, #240]	; (80040c0 <xTaskIncrementTick+0x154>)
 8003fd0:	6013      	str	r3, [r2, #0]
 8003fd2:	f000 f995 	bl	8004300 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003fd6:	4b3b      	ldr	r3, [pc, #236]	; (80040c4 <xTaskIncrementTick+0x158>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	693a      	ldr	r2, [r7, #16]
 8003fdc:	429a      	cmp	r2, r3
 8003fde:	d348      	bcc.n	8004072 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003fe0:	4b35      	ldr	r3, [pc, #212]	; (80040b8 <xTaskIncrementTick+0x14c>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d104      	bne.n	8003ff4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003fea:	4b36      	ldr	r3, [pc, #216]	; (80040c4 <xTaskIncrementTick+0x158>)
 8003fec:	f04f 32ff 	mov.w	r2, #4294967295
 8003ff0:	601a      	str	r2, [r3, #0]
					break;
 8003ff2:	e03e      	b.n	8004072 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ff4:	4b30      	ldr	r3, [pc, #192]	; (80040b8 <xTaskIncrementTick+0x14c>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	68db      	ldr	r3, [r3, #12]
 8003ffa:	68db      	ldr	r3, [r3, #12]
 8003ffc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003ffe:	68bb      	ldr	r3, [r7, #8]
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004004:	693a      	ldr	r2, [r7, #16]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	429a      	cmp	r2, r3
 800400a:	d203      	bcs.n	8004014 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800400c:	4a2d      	ldr	r2, [pc, #180]	; (80040c4 <xTaskIncrementTick+0x158>)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004012:	e02e      	b.n	8004072 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	3304      	adds	r3, #4
 8004018:	4618      	mov	r0, r3
 800401a:	f7ff fcac 	bl	8003976 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004022:	2b00      	cmp	r3, #0
 8004024:	d004      	beq.n	8004030 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	3318      	adds	r3, #24
 800402a:	4618      	mov	r0, r3
 800402c:	f7ff fca3 	bl	8003976 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004034:	2201      	movs	r2, #1
 8004036:	409a      	lsls	r2, r3
 8004038:	4b23      	ldr	r3, [pc, #140]	; (80040c8 <xTaskIncrementTick+0x15c>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4313      	orrs	r3, r2
 800403e:	4a22      	ldr	r2, [pc, #136]	; (80040c8 <xTaskIncrementTick+0x15c>)
 8004040:	6013      	str	r3, [r2, #0]
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004046:	4613      	mov	r3, r2
 8004048:	009b      	lsls	r3, r3, #2
 800404a:	4413      	add	r3, r2
 800404c:	009b      	lsls	r3, r3, #2
 800404e:	4a1f      	ldr	r2, [pc, #124]	; (80040cc <xTaskIncrementTick+0x160>)
 8004050:	441a      	add	r2, r3
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	3304      	adds	r3, #4
 8004056:	4619      	mov	r1, r3
 8004058:	4610      	mov	r0, r2
 800405a:	f7ff fc2f 	bl	80038bc <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004062:	4b1b      	ldr	r3, [pc, #108]	; (80040d0 <xTaskIncrementTick+0x164>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004068:	429a      	cmp	r2, r3
 800406a:	d3b9      	bcc.n	8003fe0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800406c:	2301      	movs	r3, #1
 800406e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004070:	e7b6      	b.n	8003fe0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004072:	4b17      	ldr	r3, [pc, #92]	; (80040d0 <xTaskIncrementTick+0x164>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004078:	4914      	ldr	r1, [pc, #80]	; (80040cc <xTaskIncrementTick+0x160>)
 800407a:	4613      	mov	r3, r2
 800407c:	009b      	lsls	r3, r3, #2
 800407e:	4413      	add	r3, r2
 8004080:	009b      	lsls	r3, r3, #2
 8004082:	440b      	add	r3, r1
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	2b01      	cmp	r3, #1
 8004088:	d901      	bls.n	800408e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800408a:	2301      	movs	r3, #1
 800408c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800408e:	4b11      	ldr	r3, [pc, #68]	; (80040d4 <xTaskIncrementTick+0x168>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d007      	beq.n	80040a6 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8004096:	2301      	movs	r3, #1
 8004098:	617b      	str	r3, [r7, #20]
 800409a:	e004      	b.n	80040a6 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800409c:	4b0e      	ldr	r3, [pc, #56]	; (80040d8 <xTaskIncrementTick+0x16c>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	3301      	adds	r3, #1
 80040a2:	4a0d      	ldr	r2, [pc, #52]	; (80040d8 <xTaskIncrementTick+0x16c>)
 80040a4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80040a6:	697b      	ldr	r3, [r7, #20]
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	3718      	adds	r7, #24
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bd80      	pop	{r7, pc}
 80040b0:	200004fc 	.word	0x200004fc
 80040b4:	200004d8 	.word	0x200004d8
 80040b8:	2000048c 	.word	0x2000048c
 80040bc:	20000490 	.word	0x20000490
 80040c0:	200004ec 	.word	0x200004ec
 80040c4:	200004f4 	.word	0x200004f4
 80040c8:	200004dc 	.word	0x200004dc
 80040cc:	200003d8 	.word	0x200003d8
 80040d0:	200003d4 	.word	0x200003d4
 80040d4:	200004e8 	.word	0x200004e8
 80040d8:	200004e4 	.word	0x200004e4

080040dc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80040dc:	b480      	push	{r7}
 80040de:	b087      	sub	sp, #28
 80040e0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80040e2:	4b27      	ldr	r3, [pc, #156]	; (8004180 <vTaskSwitchContext+0xa4>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d003      	beq.n	80040f2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80040ea:	4b26      	ldr	r3, [pc, #152]	; (8004184 <vTaskSwitchContext+0xa8>)
 80040ec:	2201      	movs	r2, #1
 80040ee:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80040f0:	e03f      	b.n	8004172 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 80040f2:	4b24      	ldr	r3, [pc, #144]	; (8004184 <vTaskSwitchContext+0xa8>)
 80040f4:	2200      	movs	r2, #0
 80040f6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80040f8:	4b23      	ldr	r3, [pc, #140]	; (8004188 <vTaskSwitchContext+0xac>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	fab3 f383 	clz	r3, r3
 8004104:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004106:	7afb      	ldrb	r3, [r7, #11]
 8004108:	f1c3 031f 	rsb	r3, r3, #31
 800410c:	617b      	str	r3, [r7, #20]
 800410e:	491f      	ldr	r1, [pc, #124]	; (800418c <vTaskSwitchContext+0xb0>)
 8004110:	697a      	ldr	r2, [r7, #20]
 8004112:	4613      	mov	r3, r2
 8004114:	009b      	lsls	r3, r3, #2
 8004116:	4413      	add	r3, r2
 8004118:	009b      	lsls	r3, r3, #2
 800411a:	440b      	add	r3, r1
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d10a      	bne.n	8004138 <vTaskSwitchContext+0x5c>
	__asm volatile
 8004122:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004126:	f383 8811 	msr	BASEPRI, r3
 800412a:	f3bf 8f6f 	isb	sy
 800412e:	f3bf 8f4f 	dsb	sy
 8004132:	607b      	str	r3, [r7, #4]
}
 8004134:	bf00      	nop
 8004136:	e7fe      	b.n	8004136 <vTaskSwitchContext+0x5a>
 8004138:	697a      	ldr	r2, [r7, #20]
 800413a:	4613      	mov	r3, r2
 800413c:	009b      	lsls	r3, r3, #2
 800413e:	4413      	add	r3, r2
 8004140:	009b      	lsls	r3, r3, #2
 8004142:	4a12      	ldr	r2, [pc, #72]	; (800418c <vTaskSwitchContext+0xb0>)
 8004144:	4413      	add	r3, r2
 8004146:	613b      	str	r3, [r7, #16]
 8004148:	693b      	ldr	r3, [r7, #16]
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	685a      	ldr	r2, [r3, #4]
 800414e:	693b      	ldr	r3, [r7, #16]
 8004150:	605a      	str	r2, [r3, #4]
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	685a      	ldr	r2, [r3, #4]
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	3308      	adds	r3, #8
 800415a:	429a      	cmp	r2, r3
 800415c:	d104      	bne.n	8004168 <vTaskSwitchContext+0x8c>
 800415e:	693b      	ldr	r3, [r7, #16]
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	685a      	ldr	r2, [r3, #4]
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	605a      	str	r2, [r3, #4]
 8004168:	693b      	ldr	r3, [r7, #16]
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	68db      	ldr	r3, [r3, #12]
 800416e:	4a08      	ldr	r2, [pc, #32]	; (8004190 <vTaskSwitchContext+0xb4>)
 8004170:	6013      	str	r3, [r2, #0]
}
 8004172:	bf00      	nop
 8004174:	371c      	adds	r7, #28
 8004176:	46bd      	mov	sp, r7
 8004178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417c:	4770      	bx	lr
 800417e:	bf00      	nop
 8004180:	200004fc 	.word	0x200004fc
 8004184:	200004e8 	.word	0x200004e8
 8004188:	200004dc 	.word	0x200004dc
 800418c:	200003d8 	.word	0x200003d8
 8004190:	200003d4 	.word	0x200003d4

08004194 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b082      	sub	sp, #8
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800419c:	f000 f852 	bl	8004244 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80041a0:	4b06      	ldr	r3, [pc, #24]	; (80041bc <prvIdleTask+0x28>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	2b01      	cmp	r3, #1
 80041a6:	d9f9      	bls.n	800419c <prvIdleTask+0x8>
			{
				taskYIELD();
 80041a8:	4b05      	ldr	r3, [pc, #20]	; (80041c0 <prvIdleTask+0x2c>)
 80041aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041ae:	601a      	str	r2, [r3, #0]
 80041b0:	f3bf 8f4f 	dsb	sy
 80041b4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80041b8:	e7f0      	b.n	800419c <prvIdleTask+0x8>
 80041ba:	bf00      	nop
 80041bc:	200003d8 	.word	0x200003d8
 80041c0:	e000ed04 	.word	0xe000ed04

080041c4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b082      	sub	sp, #8
 80041c8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80041ca:	2300      	movs	r3, #0
 80041cc:	607b      	str	r3, [r7, #4]
 80041ce:	e00c      	b.n	80041ea <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80041d0:	687a      	ldr	r2, [r7, #4]
 80041d2:	4613      	mov	r3, r2
 80041d4:	009b      	lsls	r3, r3, #2
 80041d6:	4413      	add	r3, r2
 80041d8:	009b      	lsls	r3, r3, #2
 80041da:	4a12      	ldr	r2, [pc, #72]	; (8004224 <prvInitialiseTaskLists+0x60>)
 80041dc:	4413      	add	r3, r2
 80041de:	4618      	mov	r0, r3
 80041e0:	f7ff fb3f 	bl	8003862 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	3301      	adds	r3, #1
 80041e8:	607b      	str	r3, [r7, #4]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2b06      	cmp	r3, #6
 80041ee:	d9ef      	bls.n	80041d0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80041f0:	480d      	ldr	r0, [pc, #52]	; (8004228 <prvInitialiseTaskLists+0x64>)
 80041f2:	f7ff fb36 	bl	8003862 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80041f6:	480d      	ldr	r0, [pc, #52]	; (800422c <prvInitialiseTaskLists+0x68>)
 80041f8:	f7ff fb33 	bl	8003862 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80041fc:	480c      	ldr	r0, [pc, #48]	; (8004230 <prvInitialiseTaskLists+0x6c>)
 80041fe:	f7ff fb30 	bl	8003862 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004202:	480c      	ldr	r0, [pc, #48]	; (8004234 <prvInitialiseTaskLists+0x70>)
 8004204:	f7ff fb2d 	bl	8003862 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004208:	480b      	ldr	r0, [pc, #44]	; (8004238 <prvInitialiseTaskLists+0x74>)
 800420a:	f7ff fb2a 	bl	8003862 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800420e:	4b0b      	ldr	r3, [pc, #44]	; (800423c <prvInitialiseTaskLists+0x78>)
 8004210:	4a05      	ldr	r2, [pc, #20]	; (8004228 <prvInitialiseTaskLists+0x64>)
 8004212:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004214:	4b0a      	ldr	r3, [pc, #40]	; (8004240 <prvInitialiseTaskLists+0x7c>)
 8004216:	4a05      	ldr	r2, [pc, #20]	; (800422c <prvInitialiseTaskLists+0x68>)
 8004218:	601a      	str	r2, [r3, #0]
}
 800421a:	bf00      	nop
 800421c:	3708      	adds	r7, #8
 800421e:	46bd      	mov	sp, r7
 8004220:	bd80      	pop	{r7, pc}
 8004222:	bf00      	nop
 8004224:	200003d8 	.word	0x200003d8
 8004228:	20000464 	.word	0x20000464
 800422c:	20000478 	.word	0x20000478
 8004230:	20000494 	.word	0x20000494
 8004234:	200004a8 	.word	0x200004a8
 8004238:	200004c0 	.word	0x200004c0
 800423c:	2000048c 	.word	0x2000048c
 8004240:	20000490 	.word	0x20000490

08004244 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b082      	sub	sp, #8
 8004248:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800424a:	e019      	b.n	8004280 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800424c:	f000 fa0a 	bl	8004664 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004250:	4b10      	ldr	r3, [pc, #64]	; (8004294 <prvCheckTasksWaitingTermination+0x50>)
 8004252:	68db      	ldr	r3, [r3, #12]
 8004254:	68db      	ldr	r3, [r3, #12]
 8004256:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	3304      	adds	r3, #4
 800425c:	4618      	mov	r0, r3
 800425e:	f7ff fb8a 	bl	8003976 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004262:	4b0d      	ldr	r3, [pc, #52]	; (8004298 <prvCheckTasksWaitingTermination+0x54>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	3b01      	subs	r3, #1
 8004268:	4a0b      	ldr	r2, [pc, #44]	; (8004298 <prvCheckTasksWaitingTermination+0x54>)
 800426a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800426c:	4b0b      	ldr	r3, [pc, #44]	; (800429c <prvCheckTasksWaitingTermination+0x58>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	3b01      	subs	r3, #1
 8004272:	4a0a      	ldr	r2, [pc, #40]	; (800429c <prvCheckTasksWaitingTermination+0x58>)
 8004274:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004276:	f000 fa25 	bl	80046c4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800427a:	6878      	ldr	r0, [r7, #4]
 800427c:	f000 f810 	bl	80042a0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004280:	4b06      	ldr	r3, [pc, #24]	; (800429c <prvCheckTasksWaitingTermination+0x58>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d1e1      	bne.n	800424c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004288:	bf00      	nop
 800428a:	bf00      	nop
 800428c:	3708      	adds	r7, #8
 800428e:	46bd      	mov	sp, r7
 8004290:	bd80      	pop	{r7, pc}
 8004292:	bf00      	nop
 8004294:	200004a8 	.word	0x200004a8
 8004298:	200004d4 	.word	0x200004d4
 800429c:	200004bc 	.word	0x200004bc

080042a0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b084      	sub	sp, #16
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d108      	bne.n	80042c4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042b6:	4618      	mov	r0, r3
 80042b8:	f000 fb82 	bl	80049c0 <vPortFree>
				vPortFree( pxTCB );
 80042bc:	6878      	ldr	r0, [r7, #4]
 80042be:	f000 fb7f 	bl	80049c0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80042c2:	e018      	b.n	80042f6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80042ca:	2b01      	cmp	r3, #1
 80042cc:	d103      	bne.n	80042d6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80042ce:	6878      	ldr	r0, [r7, #4]
 80042d0:	f000 fb76 	bl	80049c0 <vPortFree>
	}
 80042d4:	e00f      	b.n	80042f6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80042dc:	2b02      	cmp	r3, #2
 80042de:	d00a      	beq.n	80042f6 <prvDeleteTCB+0x56>
	__asm volatile
 80042e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042e4:	f383 8811 	msr	BASEPRI, r3
 80042e8:	f3bf 8f6f 	isb	sy
 80042ec:	f3bf 8f4f 	dsb	sy
 80042f0:	60fb      	str	r3, [r7, #12]
}
 80042f2:	bf00      	nop
 80042f4:	e7fe      	b.n	80042f4 <prvDeleteTCB+0x54>
	}
 80042f6:	bf00      	nop
 80042f8:	3710      	adds	r7, #16
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd80      	pop	{r7, pc}
	...

08004300 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004300:	b480      	push	{r7}
 8004302:	b083      	sub	sp, #12
 8004304:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004306:	4b0c      	ldr	r3, [pc, #48]	; (8004338 <prvResetNextTaskUnblockTime+0x38>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d104      	bne.n	800431a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004310:	4b0a      	ldr	r3, [pc, #40]	; (800433c <prvResetNextTaskUnblockTime+0x3c>)
 8004312:	f04f 32ff 	mov.w	r2, #4294967295
 8004316:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004318:	e008      	b.n	800432c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800431a:	4b07      	ldr	r3, [pc, #28]	; (8004338 <prvResetNextTaskUnblockTime+0x38>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	68db      	ldr	r3, [r3, #12]
 8004320:	68db      	ldr	r3, [r3, #12]
 8004322:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	4a04      	ldr	r2, [pc, #16]	; (800433c <prvResetNextTaskUnblockTime+0x3c>)
 800432a:	6013      	str	r3, [r2, #0]
}
 800432c:	bf00      	nop
 800432e:	370c      	adds	r7, #12
 8004330:	46bd      	mov	sp, r7
 8004332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004336:	4770      	bx	lr
 8004338:	2000048c 	.word	0x2000048c
 800433c:	200004f4 	.word	0x200004f4

08004340 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b084      	sub	sp, #16
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
 8004348:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800434a:	4b29      	ldr	r3, [pc, #164]	; (80043f0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004350:	4b28      	ldr	r3, [pc, #160]	; (80043f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	3304      	adds	r3, #4
 8004356:	4618      	mov	r0, r3
 8004358:	f7ff fb0d 	bl	8003976 <uxListRemove>
 800435c:	4603      	mov	r3, r0
 800435e:	2b00      	cmp	r3, #0
 8004360:	d10b      	bne.n	800437a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004362:	4b24      	ldr	r3, [pc, #144]	; (80043f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004368:	2201      	movs	r2, #1
 800436a:	fa02 f303 	lsl.w	r3, r2, r3
 800436e:	43da      	mvns	r2, r3
 8004370:	4b21      	ldr	r3, [pc, #132]	; (80043f8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4013      	ands	r3, r2
 8004376:	4a20      	ldr	r2, [pc, #128]	; (80043f8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004378:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004380:	d10a      	bne.n	8004398 <prvAddCurrentTaskToDelayedList+0x58>
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d007      	beq.n	8004398 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004388:	4b1a      	ldr	r3, [pc, #104]	; (80043f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	3304      	adds	r3, #4
 800438e:	4619      	mov	r1, r3
 8004390:	481a      	ldr	r0, [pc, #104]	; (80043fc <prvAddCurrentTaskToDelayedList+0xbc>)
 8004392:	f7ff fa93 	bl	80038bc <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004396:	e026      	b.n	80043e6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004398:	68fa      	ldr	r2, [r7, #12]
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	4413      	add	r3, r2
 800439e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80043a0:	4b14      	ldr	r3, [pc, #80]	; (80043f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	68ba      	ldr	r2, [r7, #8]
 80043a6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80043a8:	68ba      	ldr	r2, [r7, #8]
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	429a      	cmp	r2, r3
 80043ae:	d209      	bcs.n	80043c4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80043b0:	4b13      	ldr	r3, [pc, #76]	; (8004400 <prvAddCurrentTaskToDelayedList+0xc0>)
 80043b2:	681a      	ldr	r2, [r3, #0]
 80043b4:	4b0f      	ldr	r3, [pc, #60]	; (80043f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	3304      	adds	r3, #4
 80043ba:	4619      	mov	r1, r3
 80043bc:	4610      	mov	r0, r2
 80043be:	f7ff faa1 	bl	8003904 <vListInsert>
}
 80043c2:	e010      	b.n	80043e6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80043c4:	4b0f      	ldr	r3, [pc, #60]	; (8004404 <prvAddCurrentTaskToDelayedList+0xc4>)
 80043c6:	681a      	ldr	r2, [r3, #0]
 80043c8:	4b0a      	ldr	r3, [pc, #40]	; (80043f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	3304      	adds	r3, #4
 80043ce:	4619      	mov	r1, r3
 80043d0:	4610      	mov	r0, r2
 80043d2:	f7ff fa97 	bl	8003904 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80043d6:	4b0c      	ldr	r3, [pc, #48]	; (8004408 <prvAddCurrentTaskToDelayedList+0xc8>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	68ba      	ldr	r2, [r7, #8]
 80043dc:	429a      	cmp	r2, r3
 80043de:	d202      	bcs.n	80043e6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80043e0:	4a09      	ldr	r2, [pc, #36]	; (8004408 <prvAddCurrentTaskToDelayedList+0xc8>)
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	6013      	str	r3, [r2, #0]
}
 80043e6:	bf00      	nop
 80043e8:	3710      	adds	r7, #16
 80043ea:	46bd      	mov	sp, r7
 80043ec:	bd80      	pop	{r7, pc}
 80043ee:	bf00      	nop
 80043f0:	200004d8 	.word	0x200004d8
 80043f4:	200003d4 	.word	0x200003d4
 80043f8:	200004dc 	.word	0x200004dc
 80043fc:	200004c0 	.word	0x200004c0
 8004400:	20000490 	.word	0x20000490
 8004404:	2000048c 	.word	0x2000048c
 8004408:	200004f4 	.word	0x200004f4

0800440c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800440c:	b480      	push	{r7}
 800440e:	b085      	sub	sp, #20
 8004410:	af00      	add	r7, sp, #0
 8004412:	60f8      	str	r0, [r7, #12]
 8004414:	60b9      	str	r1, [r7, #8]
 8004416:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	3b04      	subs	r3, #4
 800441c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004424:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	3b04      	subs	r3, #4
 800442a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	f023 0201 	bic.w	r2, r3, #1
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	3b04      	subs	r3, #4
 800443a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800443c:	4a0c      	ldr	r2, [pc, #48]	; (8004470 <pxPortInitialiseStack+0x64>)
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	3b14      	subs	r3, #20
 8004446:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004448:	687a      	ldr	r2, [r7, #4]
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	3b04      	subs	r3, #4
 8004452:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	f06f 0202 	mvn.w	r2, #2
 800445a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	3b20      	subs	r3, #32
 8004460:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004462:	68fb      	ldr	r3, [r7, #12]
}
 8004464:	4618      	mov	r0, r3
 8004466:	3714      	adds	r7, #20
 8004468:	46bd      	mov	sp, r7
 800446a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446e:	4770      	bx	lr
 8004470:	08004475 	.word	0x08004475

08004474 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004474:	b480      	push	{r7}
 8004476:	b085      	sub	sp, #20
 8004478:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800447a:	2300      	movs	r3, #0
 800447c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800447e:	4b12      	ldr	r3, [pc, #72]	; (80044c8 <prvTaskExitError+0x54>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004486:	d00a      	beq.n	800449e <prvTaskExitError+0x2a>
	__asm volatile
 8004488:	f04f 0350 	mov.w	r3, #80	; 0x50
 800448c:	f383 8811 	msr	BASEPRI, r3
 8004490:	f3bf 8f6f 	isb	sy
 8004494:	f3bf 8f4f 	dsb	sy
 8004498:	60fb      	str	r3, [r7, #12]
}
 800449a:	bf00      	nop
 800449c:	e7fe      	b.n	800449c <prvTaskExitError+0x28>
	__asm volatile
 800449e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044a2:	f383 8811 	msr	BASEPRI, r3
 80044a6:	f3bf 8f6f 	isb	sy
 80044aa:	f3bf 8f4f 	dsb	sy
 80044ae:	60bb      	str	r3, [r7, #8]
}
 80044b0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80044b2:	bf00      	nop
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d0fc      	beq.n	80044b4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80044ba:	bf00      	nop
 80044bc:	bf00      	nop
 80044be:	3714      	adds	r7, #20
 80044c0:	46bd      	mov	sp, r7
 80044c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c6:	4770      	bx	lr
 80044c8:	20000010 	.word	0x20000010
 80044cc:	00000000 	.word	0x00000000

080044d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80044d0:	4b07      	ldr	r3, [pc, #28]	; (80044f0 <pxCurrentTCBConst2>)
 80044d2:	6819      	ldr	r1, [r3, #0]
 80044d4:	6808      	ldr	r0, [r1, #0]
 80044d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044da:	f380 8809 	msr	PSP, r0
 80044de:	f3bf 8f6f 	isb	sy
 80044e2:	f04f 0000 	mov.w	r0, #0
 80044e6:	f380 8811 	msr	BASEPRI, r0
 80044ea:	4770      	bx	lr
 80044ec:	f3af 8000 	nop.w

080044f0 <pxCurrentTCBConst2>:
 80044f0:	200003d4 	.word	0x200003d4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80044f4:	bf00      	nop
 80044f6:	bf00      	nop

080044f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80044f8:	4808      	ldr	r0, [pc, #32]	; (800451c <prvPortStartFirstTask+0x24>)
 80044fa:	6800      	ldr	r0, [r0, #0]
 80044fc:	6800      	ldr	r0, [r0, #0]
 80044fe:	f380 8808 	msr	MSP, r0
 8004502:	f04f 0000 	mov.w	r0, #0
 8004506:	f380 8814 	msr	CONTROL, r0
 800450a:	b662      	cpsie	i
 800450c:	b661      	cpsie	f
 800450e:	f3bf 8f4f 	dsb	sy
 8004512:	f3bf 8f6f 	isb	sy
 8004516:	df00      	svc	0
 8004518:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800451a:	bf00      	nop
 800451c:	e000ed08 	.word	0xe000ed08

08004520 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b086      	sub	sp, #24
 8004524:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004526:	4b46      	ldr	r3, [pc, #280]	; (8004640 <xPortStartScheduler+0x120>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a46      	ldr	r2, [pc, #280]	; (8004644 <xPortStartScheduler+0x124>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d10a      	bne.n	8004546 <xPortStartScheduler+0x26>
	__asm volatile
 8004530:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004534:	f383 8811 	msr	BASEPRI, r3
 8004538:	f3bf 8f6f 	isb	sy
 800453c:	f3bf 8f4f 	dsb	sy
 8004540:	613b      	str	r3, [r7, #16]
}
 8004542:	bf00      	nop
 8004544:	e7fe      	b.n	8004544 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004546:	4b3e      	ldr	r3, [pc, #248]	; (8004640 <xPortStartScheduler+0x120>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4a3f      	ldr	r2, [pc, #252]	; (8004648 <xPortStartScheduler+0x128>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d10a      	bne.n	8004566 <xPortStartScheduler+0x46>
	__asm volatile
 8004550:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004554:	f383 8811 	msr	BASEPRI, r3
 8004558:	f3bf 8f6f 	isb	sy
 800455c:	f3bf 8f4f 	dsb	sy
 8004560:	60fb      	str	r3, [r7, #12]
}
 8004562:	bf00      	nop
 8004564:	e7fe      	b.n	8004564 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004566:	4b39      	ldr	r3, [pc, #228]	; (800464c <xPortStartScheduler+0x12c>)
 8004568:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800456a:	697b      	ldr	r3, [r7, #20]
 800456c:	781b      	ldrb	r3, [r3, #0]
 800456e:	b2db      	uxtb	r3, r3
 8004570:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	22ff      	movs	r2, #255	; 0xff
 8004576:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	781b      	ldrb	r3, [r3, #0]
 800457c:	b2db      	uxtb	r3, r3
 800457e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004580:	78fb      	ldrb	r3, [r7, #3]
 8004582:	b2db      	uxtb	r3, r3
 8004584:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004588:	b2da      	uxtb	r2, r3
 800458a:	4b31      	ldr	r3, [pc, #196]	; (8004650 <xPortStartScheduler+0x130>)
 800458c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800458e:	4b31      	ldr	r3, [pc, #196]	; (8004654 <xPortStartScheduler+0x134>)
 8004590:	2207      	movs	r2, #7
 8004592:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004594:	e009      	b.n	80045aa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004596:	4b2f      	ldr	r3, [pc, #188]	; (8004654 <xPortStartScheduler+0x134>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	3b01      	subs	r3, #1
 800459c:	4a2d      	ldr	r2, [pc, #180]	; (8004654 <xPortStartScheduler+0x134>)
 800459e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80045a0:	78fb      	ldrb	r3, [r7, #3]
 80045a2:	b2db      	uxtb	r3, r3
 80045a4:	005b      	lsls	r3, r3, #1
 80045a6:	b2db      	uxtb	r3, r3
 80045a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80045aa:	78fb      	ldrb	r3, [r7, #3]
 80045ac:	b2db      	uxtb	r3, r3
 80045ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045b2:	2b80      	cmp	r3, #128	; 0x80
 80045b4:	d0ef      	beq.n	8004596 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80045b6:	4b27      	ldr	r3, [pc, #156]	; (8004654 <xPortStartScheduler+0x134>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f1c3 0307 	rsb	r3, r3, #7
 80045be:	2b04      	cmp	r3, #4
 80045c0:	d00a      	beq.n	80045d8 <xPortStartScheduler+0xb8>
	__asm volatile
 80045c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045c6:	f383 8811 	msr	BASEPRI, r3
 80045ca:	f3bf 8f6f 	isb	sy
 80045ce:	f3bf 8f4f 	dsb	sy
 80045d2:	60bb      	str	r3, [r7, #8]
}
 80045d4:	bf00      	nop
 80045d6:	e7fe      	b.n	80045d6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80045d8:	4b1e      	ldr	r3, [pc, #120]	; (8004654 <xPortStartScheduler+0x134>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	021b      	lsls	r3, r3, #8
 80045de:	4a1d      	ldr	r2, [pc, #116]	; (8004654 <xPortStartScheduler+0x134>)
 80045e0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80045e2:	4b1c      	ldr	r3, [pc, #112]	; (8004654 <xPortStartScheduler+0x134>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80045ea:	4a1a      	ldr	r2, [pc, #104]	; (8004654 <xPortStartScheduler+0x134>)
 80045ec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	b2da      	uxtb	r2, r3
 80045f2:	697b      	ldr	r3, [r7, #20]
 80045f4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80045f6:	4b18      	ldr	r3, [pc, #96]	; (8004658 <xPortStartScheduler+0x138>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4a17      	ldr	r2, [pc, #92]	; (8004658 <xPortStartScheduler+0x138>)
 80045fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004600:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004602:	4b15      	ldr	r3, [pc, #84]	; (8004658 <xPortStartScheduler+0x138>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a14      	ldr	r2, [pc, #80]	; (8004658 <xPortStartScheduler+0x138>)
 8004608:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800460c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800460e:	f000 f8dd 	bl	80047cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004612:	4b12      	ldr	r3, [pc, #72]	; (800465c <xPortStartScheduler+0x13c>)
 8004614:	2200      	movs	r2, #0
 8004616:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004618:	f000 f8fc 	bl	8004814 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800461c:	4b10      	ldr	r3, [pc, #64]	; (8004660 <xPortStartScheduler+0x140>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4a0f      	ldr	r2, [pc, #60]	; (8004660 <xPortStartScheduler+0x140>)
 8004622:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004626:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004628:	f7ff ff66 	bl	80044f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800462c:	f7ff fd56 	bl	80040dc <vTaskSwitchContext>
	prvTaskExitError();
 8004630:	f7ff ff20 	bl	8004474 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004634:	2300      	movs	r3, #0
}
 8004636:	4618      	mov	r0, r3
 8004638:	3718      	adds	r7, #24
 800463a:	46bd      	mov	sp, r7
 800463c:	bd80      	pop	{r7, pc}
 800463e:	bf00      	nop
 8004640:	e000ed00 	.word	0xe000ed00
 8004644:	410fc271 	.word	0x410fc271
 8004648:	410fc270 	.word	0x410fc270
 800464c:	e000e400 	.word	0xe000e400
 8004650:	20000500 	.word	0x20000500
 8004654:	20000504 	.word	0x20000504
 8004658:	e000ed20 	.word	0xe000ed20
 800465c:	20000010 	.word	0x20000010
 8004660:	e000ef34 	.word	0xe000ef34

08004664 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004664:	b480      	push	{r7}
 8004666:	b083      	sub	sp, #12
 8004668:	af00      	add	r7, sp, #0
	__asm volatile
 800466a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800466e:	f383 8811 	msr	BASEPRI, r3
 8004672:	f3bf 8f6f 	isb	sy
 8004676:	f3bf 8f4f 	dsb	sy
 800467a:	607b      	str	r3, [r7, #4]
}
 800467c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800467e:	4b0f      	ldr	r3, [pc, #60]	; (80046bc <vPortEnterCritical+0x58>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	3301      	adds	r3, #1
 8004684:	4a0d      	ldr	r2, [pc, #52]	; (80046bc <vPortEnterCritical+0x58>)
 8004686:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004688:	4b0c      	ldr	r3, [pc, #48]	; (80046bc <vPortEnterCritical+0x58>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	2b01      	cmp	r3, #1
 800468e:	d10f      	bne.n	80046b0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004690:	4b0b      	ldr	r3, [pc, #44]	; (80046c0 <vPortEnterCritical+0x5c>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	b2db      	uxtb	r3, r3
 8004696:	2b00      	cmp	r3, #0
 8004698:	d00a      	beq.n	80046b0 <vPortEnterCritical+0x4c>
	__asm volatile
 800469a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800469e:	f383 8811 	msr	BASEPRI, r3
 80046a2:	f3bf 8f6f 	isb	sy
 80046a6:	f3bf 8f4f 	dsb	sy
 80046aa:	603b      	str	r3, [r7, #0]
}
 80046ac:	bf00      	nop
 80046ae:	e7fe      	b.n	80046ae <vPortEnterCritical+0x4a>
	}
}
 80046b0:	bf00      	nop
 80046b2:	370c      	adds	r7, #12
 80046b4:	46bd      	mov	sp, r7
 80046b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ba:	4770      	bx	lr
 80046bc:	20000010 	.word	0x20000010
 80046c0:	e000ed04 	.word	0xe000ed04

080046c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80046c4:	b480      	push	{r7}
 80046c6:	b083      	sub	sp, #12
 80046c8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80046ca:	4b12      	ldr	r3, [pc, #72]	; (8004714 <vPortExitCritical+0x50>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d10a      	bne.n	80046e8 <vPortExitCritical+0x24>
	__asm volatile
 80046d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046d6:	f383 8811 	msr	BASEPRI, r3
 80046da:	f3bf 8f6f 	isb	sy
 80046de:	f3bf 8f4f 	dsb	sy
 80046e2:	607b      	str	r3, [r7, #4]
}
 80046e4:	bf00      	nop
 80046e6:	e7fe      	b.n	80046e6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80046e8:	4b0a      	ldr	r3, [pc, #40]	; (8004714 <vPortExitCritical+0x50>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	3b01      	subs	r3, #1
 80046ee:	4a09      	ldr	r2, [pc, #36]	; (8004714 <vPortExitCritical+0x50>)
 80046f0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80046f2:	4b08      	ldr	r3, [pc, #32]	; (8004714 <vPortExitCritical+0x50>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d105      	bne.n	8004706 <vPortExitCritical+0x42>
 80046fa:	2300      	movs	r3, #0
 80046fc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004704:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004706:	bf00      	nop
 8004708:	370c      	adds	r7, #12
 800470a:	46bd      	mov	sp, r7
 800470c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004710:	4770      	bx	lr
 8004712:	bf00      	nop
 8004714:	20000010 	.word	0x20000010
	...

08004720 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004720:	f3ef 8009 	mrs	r0, PSP
 8004724:	f3bf 8f6f 	isb	sy
 8004728:	4b15      	ldr	r3, [pc, #84]	; (8004780 <pxCurrentTCBConst>)
 800472a:	681a      	ldr	r2, [r3, #0]
 800472c:	f01e 0f10 	tst.w	lr, #16
 8004730:	bf08      	it	eq
 8004732:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004736:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800473a:	6010      	str	r0, [r2, #0]
 800473c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004740:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004744:	f380 8811 	msr	BASEPRI, r0
 8004748:	f3bf 8f4f 	dsb	sy
 800474c:	f3bf 8f6f 	isb	sy
 8004750:	f7ff fcc4 	bl	80040dc <vTaskSwitchContext>
 8004754:	f04f 0000 	mov.w	r0, #0
 8004758:	f380 8811 	msr	BASEPRI, r0
 800475c:	bc09      	pop	{r0, r3}
 800475e:	6819      	ldr	r1, [r3, #0]
 8004760:	6808      	ldr	r0, [r1, #0]
 8004762:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004766:	f01e 0f10 	tst.w	lr, #16
 800476a:	bf08      	it	eq
 800476c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004770:	f380 8809 	msr	PSP, r0
 8004774:	f3bf 8f6f 	isb	sy
 8004778:	4770      	bx	lr
 800477a:	bf00      	nop
 800477c:	f3af 8000 	nop.w

08004780 <pxCurrentTCBConst>:
 8004780:	200003d4 	.word	0x200003d4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004784:	bf00      	nop
 8004786:	bf00      	nop

08004788 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b082      	sub	sp, #8
 800478c:	af00      	add	r7, sp, #0
	__asm volatile
 800478e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004792:	f383 8811 	msr	BASEPRI, r3
 8004796:	f3bf 8f6f 	isb	sy
 800479a:	f3bf 8f4f 	dsb	sy
 800479e:	607b      	str	r3, [r7, #4]
}
 80047a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80047a2:	f7ff fbe3 	bl	8003f6c <xTaskIncrementTick>
 80047a6:	4603      	mov	r3, r0
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d003      	beq.n	80047b4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80047ac:	4b06      	ldr	r3, [pc, #24]	; (80047c8 <SysTick_Handler+0x40>)
 80047ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047b2:	601a      	str	r2, [r3, #0]
 80047b4:	2300      	movs	r3, #0
 80047b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	f383 8811 	msr	BASEPRI, r3
}
 80047be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80047c0:	bf00      	nop
 80047c2:	3708      	adds	r7, #8
 80047c4:	46bd      	mov	sp, r7
 80047c6:	bd80      	pop	{r7, pc}
 80047c8:	e000ed04 	.word	0xe000ed04

080047cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80047cc:	b480      	push	{r7}
 80047ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80047d0:	4b0b      	ldr	r3, [pc, #44]	; (8004800 <vPortSetupTimerInterrupt+0x34>)
 80047d2:	2200      	movs	r2, #0
 80047d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80047d6:	4b0b      	ldr	r3, [pc, #44]	; (8004804 <vPortSetupTimerInterrupt+0x38>)
 80047d8:	2200      	movs	r2, #0
 80047da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80047dc:	4b0a      	ldr	r3, [pc, #40]	; (8004808 <vPortSetupTimerInterrupt+0x3c>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a0a      	ldr	r2, [pc, #40]	; (800480c <vPortSetupTimerInterrupt+0x40>)
 80047e2:	fba2 2303 	umull	r2, r3, r2, r3
 80047e6:	099b      	lsrs	r3, r3, #6
 80047e8:	4a09      	ldr	r2, [pc, #36]	; (8004810 <vPortSetupTimerInterrupt+0x44>)
 80047ea:	3b01      	subs	r3, #1
 80047ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80047ee:	4b04      	ldr	r3, [pc, #16]	; (8004800 <vPortSetupTimerInterrupt+0x34>)
 80047f0:	2207      	movs	r2, #7
 80047f2:	601a      	str	r2, [r3, #0]
}
 80047f4:	bf00      	nop
 80047f6:	46bd      	mov	sp, r7
 80047f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fc:	4770      	bx	lr
 80047fe:	bf00      	nop
 8004800:	e000e010 	.word	0xe000e010
 8004804:	e000e018 	.word	0xe000e018
 8004808:	20000004 	.word	0x20000004
 800480c:	10624dd3 	.word	0x10624dd3
 8004810:	e000e014 	.word	0xe000e014

08004814 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004814:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004824 <vPortEnableVFP+0x10>
 8004818:	6801      	ldr	r1, [r0, #0]
 800481a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800481e:	6001      	str	r1, [r0, #0]
 8004820:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004822:	bf00      	nop
 8004824:	e000ed88 	.word	0xe000ed88

08004828 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b08a      	sub	sp, #40	; 0x28
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004830:	2300      	movs	r3, #0
 8004832:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004834:	f7ff faf0 	bl	8003e18 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004838:	4b5b      	ldr	r3, [pc, #364]	; (80049a8 <pvPortMalloc+0x180>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d101      	bne.n	8004844 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004840:	f000 f920 	bl	8004a84 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004844:	4b59      	ldr	r3, [pc, #356]	; (80049ac <pvPortMalloc+0x184>)
 8004846:	681a      	ldr	r2, [r3, #0]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	4013      	ands	r3, r2
 800484c:	2b00      	cmp	r3, #0
 800484e:	f040 8093 	bne.w	8004978 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d01d      	beq.n	8004894 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004858:	2208      	movs	r2, #8
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	4413      	add	r3, r2
 800485e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	f003 0307 	and.w	r3, r3, #7
 8004866:	2b00      	cmp	r3, #0
 8004868:	d014      	beq.n	8004894 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	f023 0307 	bic.w	r3, r3, #7
 8004870:	3308      	adds	r3, #8
 8004872:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	f003 0307 	and.w	r3, r3, #7
 800487a:	2b00      	cmp	r3, #0
 800487c:	d00a      	beq.n	8004894 <pvPortMalloc+0x6c>
	__asm volatile
 800487e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004882:	f383 8811 	msr	BASEPRI, r3
 8004886:	f3bf 8f6f 	isb	sy
 800488a:	f3bf 8f4f 	dsb	sy
 800488e:	617b      	str	r3, [r7, #20]
}
 8004890:	bf00      	nop
 8004892:	e7fe      	b.n	8004892 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d06e      	beq.n	8004978 <pvPortMalloc+0x150>
 800489a:	4b45      	ldr	r3, [pc, #276]	; (80049b0 <pvPortMalloc+0x188>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	687a      	ldr	r2, [r7, #4]
 80048a0:	429a      	cmp	r2, r3
 80048a2:	d869      	bhi.n	8004978 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80048a4:	4b43      	ldr	r3, [pc, #268]	; (80049b4 <pvPortMalloc+0x18c>)
 80048a6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80048a8:	4b42      	ldr	r3, [pc, #264]	; (80049b4 <pvPortMalloc+0x18c>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80048ae:	e004      	b.n	80048ba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80048b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80048b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80048ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	687a      	ldr	r2, [r7, #4]
 80048c0:	429a      	cmp	r2, r3
 80048c2:	d903      	bls.n	80048cc <pvPortMalloc+0xa4>
 80048c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d1f1      	bne.n	80048b0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80048cc:	4b36      	ldr	r3, [pc, #216]	; (80049a8 <pvPortMalloc+0x180>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048d2:	429a      	cmp	r2, r3
 80048d4:	d050      	beq.n	8004978 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80048d6:	6a3b      	ldr	r3, [r7, #32]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	2208      	movs	r2, #8
 80048dc:	4413      	add	r3, r2
 80048de:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80048e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e2:	681a      	ldr	r2, [r3, #0]
 80048e4:	6a3b      	ldr	r3, [r7, #32]
 80048e6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80048e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ea:	685a      	ldr	r2, [r3, #4]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	1ad2      	subs	r2, r2, r3
 80048f0:	2308      	movs	r3, #8
 80048f2:	005b      	lsls	r3, r3, #1
 80048f4:	429a      	cmp	r2, r3
 80048f6:	d91f      	bls.n	8004938 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80048f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	4413      	add	r3, r2
 80048fe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004900:	69bb      	ldr	r3, [r7, #24]
 8004902:	f003 0307 	and.w	r3, r3, #7
 8004906:	2b00      	cmp	r3, #0
 8004908:	d00a      	beq.n	8004920 <pvPortMalloc+0xf8>
	__asm volatile
 800490a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800490e:	f383 8811 	msr	BASEPRI, r3
 8004912:	f3bf 8f6f 	isb	sy
 8004916:	f3bf 8f4f 	dsb	sy
 800491a:	613b      	str	r3, [r7, #16]
}
 800491c:	bf00      	nop
 800491e:	e7fe      	b.n	800491e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004922:	685a      	ldr	r2, [r3, #4]
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	1ad2      	subs	r2, r2, r3
 8004928:	69bb      	ldr	r3, [r7, #24]
 800492a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800492c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800492e:	687a      	ldr	r2, [r7, #4]
 8004930:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004932:	69b8      	ldr	r0, [r7, #24]
 8004934:	f000 f908 	bl	8004b48 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004938:	4b1d      	ldr	r3, [pc, #116]	; (80049b0 <pvPortMalloc+0x188>)
 800493a:	681a      	ldr	r2, [r3, #0]
 800493c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	1ad3      	subs	r3, r2, r3
 8004942:	4a1b      	ldr	r2, [pc, #108]	; (80049b0 <pvPortMalloc+0x188>)
 8004944:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004946:	4b1a      	ldr	r3, [pc, #104]	; (80049b0 <pvPortMalloc+0x188>)
 8004948:	681a      	ldr	r2, [r3, #0]
 800494a:	4b1b      	ldr	r3, [pc, #108]	; (80049b8 <pvPortMalloc+0x190>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	429a      	cmp	r2, r3
 8004950:	d203      	bcs.n	800495a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004952:	4b17      	ldr	r3, [pc, #92]	; (80049b0 <pvPortMalloc+0x188>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4a18      	ldr	r2, [pc, #96]	; (80049b8 <pvPortMalloc+0x190>)
 8004958:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800495a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800495c:	685a      	ldr	r2, [r3, #4]
 800495e:	4b13      	ldr	r3, [pc, #76]	; (80049ac <pvPortMalloc+0x184>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	431a      	orrs	r2, r3
 8004964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004966:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800496a:	2200      	movs	r2, #0
 800496c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800496e:	4b13      	ldr	r3, [pc, #76]	; (80049bc <pvPortMalloc+0x194>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	3301      	adds	r3, #1
 8004974:	4a11      	ldr	r2, [pc, #68]	; (80049bc <pvPortMalloc+0x194>)
 8004976:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004978:	f7ff fa5c 	bl	8003e34 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800497c:	69fb      	ldr	r3, [r7, #28]
 800497e:	f003 0307 	and.w	r3, r3, #7
 8004982:	2b00      	cmp	r3, #0
 8004984:	d00a      	beq.n	800499c <pvPortMalloc+0x174>
	__asm volatile
 8004986:	f04f 0350 	mov.w	r3, #80	; 0x50
 800498a:	f383 8811 	msr	BASEPRI, r3
 800498e:	f3bf 8f6f 	isb	sy
 8004992:	f3bf 8f4f 	dsb	sy
 8004996:	60fb      	str	r3, [r7, #12]
}
 8004998:	bf00      	nop
 800499a:	e7fe      	b.n	800499a <pvPortMalloc+0x172>
	return pvReturn;
 800499c:	69fb      	ldr	r3, [r7, #28]
}
 800499e:	4618      	mov	r0, r3
 80049a0:	3728      	adds	r7, #40	; 0x28
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bd80      	pop	{r7, pc}
 80049a6:	bf00      	nop
 80049a8:	20004110 	.word	0x20004110
 80049ac:	20004124 	.word	0x20004124
 80049b0:	20004114 	.word	0x20004114
 80049b4:	20004108 	.word	0x20004108
 80049b8:	20004118 	.word	0x20004118
 80049bc:	2000411c 	.word	0x2000411c

080049c0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b086      	sub	sp, #24
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d04d      	beq.n	8004a6e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80049d2:	2308      	movs	r3, #8
 80049d4:	425b      	negs	r3, r3
 80049d6:	697a      	ldr	r2, [r7, #20]
 80049d8:	4413      	add	r3, r2
 80049da:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80049dc:	697b      	ldr	r3, [r7, #20]
 80049de:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80049e0:	693b      	ldr	r3, [r7, #16]
 80049e2:	685a      	ldr	r2, [r3, #4]
 80049e4:	4b24      	ldr	r3, [pc, #144]	; (8004a78 <vPortFree+0xb8>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4013      	ands	r3, r2
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d10a      	bne.n	8004a04 <vPortFree+0x44>
	__asm volatile
 80049ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049f2:	f383 8811 	msr	BASEPRI, r3
 80049f6:	f3bf 8f6f 	isb	sy
 80049fa:	f3bf 8f4f 	dsb	sy
 80049fe:	60fb      	str	r3, [r7, #12]
}
 8004a00:	bf00      	nop
 8004a02:	e7fe      	b.n	8004a02 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004a04:	693b      	ldr	r3, [r7, #16]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d00a      	beq.n	8004a22 <vPortFree+0x62>
	__asm volatile
 8004a0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a10:	f383 8811 	msr	BASEPRI, r3
 8004a14:	f3bf 8f6f 	isb	sy
 8004a18:	f3bf 8f4f 	dsb	sy
 8004a1c:	60bb      	str	r3, [r7, #8]
}
 8004a1e:	bf00      	nop
 8004a20:	e7fe      	b.n	8004a20 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	685a      	ldr	r2, [r3, #4]
 8004a26:	4b14      	ldr	r3, [pc, #80]	; (8004a78 <vPortFree+0xb8>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4013      	ands	r3, r2
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d01e      	beq.n	8004a6e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004a30:	693b      	ldr	r3, [r7, #16]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d11a      	bne.n	8004a6e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004a38:	693b      	ldr	r3, [r7, #16]
 8004a3a:	685a      	ldr	r2, [r3, #4]
 8004a3c:	4b0e      	ldr	r3, [pc, #56]	; (8004a78 <vPortFree+0xb8>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	43db      	mvns	r3, r3
 8004a42:	401a      	ands	r2, r3
 8004a44:	693b      	ldr	r3, [r7, #16]
 8004a46:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004a48:	f7ff f9e6 	bl	8003e18 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004a4c:	693b      	ldr	r3, [r7, #16]
 8004a4e:	685a      	ldr	r2, [r3, #4]
 8004a50:	4b0a      	ldr	r3, [pc, #40]	; (8004a7c <vPortFree+0xbc>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4413      	add	r3, r2
 8004a56:	4a09      	ldr	r2, [pc, #36]	; (8004a7c <vPortFree+0xbc>)
 8004a58:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004a5a:	6938      	ldr	r0, [r7, #16]
 8004a5c:	f000 f874 	bl	8004b48 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004a60:	4b07      	ldr	r3, [pc, #28]	; (8004a80 <vPortFree+0xc0>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	3301      	adds	r3, #1
 8004a66:	4a06      	ldr	r2, [pc, #24]	; (8004a80 <vPortFree+0xc0>)
 8004a68:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004a6a:	f7ff f9e3 	bl	8003e34 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004a6e:	bf00      	nop
 8004a70:	3718      	adds	r7, #24
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bd80      	pop	{r7, pc}
 8004a76:	bf00      	nop
 8004a78:	20004124 	.word	0x20004124
 8004a7c:	20004114 	.word	0x20004114
 8004a80:	20004120 	.word	0x20004120

08004a84 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004a84:	b480      	push	{r7}
 8004a86:	b085      	sub	sp, #20
 8004a88:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004a8a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8004a8e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004a90:	4b27      	ldr	r3, [pc, #156]	; (8004b30 <prvHeapInit+0xac>)
 8004a92:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	f003 0307 	and.w	r3, r3, #7
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d00c      	beq.n	8004ab8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	3307      	adds	r3, #7
 8004aa2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	f023 0307 	bic.w	r3, r3, #7
 8004aaa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004aac:	68ba      	ldr	r2, [r7, #8]
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	1ad3      	subs	r3, r2, r3
 8004ab2:	4a1f      	ldr	r2, [pc, #124]	; (8004b30 <prvHeapInit+0xac>)
 8004ab4:	4413      	add	r3, r2
 8004ab6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004abc:	4a1d      	ldr	r2, [pc, #116]	; (8004b34 <prvHeapInit+0xb0>)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004ac2:	4b1c      	ldr	r3, [pc, #112]	; (8004b34 <prvHeapInit+0xb0>)
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	68ba      	ldr	r2, [r7, #8]
 8004acc:	4413      	add	r3, r2
 8004ace:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004ad0:	2208      	movs	r2, #8
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	1a9b      	subs	r3, r3, r2
 8004ad6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	f023 0307 	bic.w	r3, r3, #7
 8004ade:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	4a15      	ldr	r2, [pc, #84]	; (8004b38 <prvHeapInit+0xb4>)
 8004ae4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004ae6:	4b14      	ldr	r3, [pc, #80]	; (8004b38 <prvHeapInit+0xb4>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	2200      	movs	r2, #0
 8004aec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004aee:	4b12      	ldr	r3, [pc, #72]	; (8004b38 <prvHeapInit+0xb4>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	2200      	movs	r2, #0
 8004af4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	68fa      	ldr	r2, [r7, #12]
 8004afe:	1ad2      	subs	r2, r2, r3
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004b04:	4b0c      	ldr	r3, [pc, #48]	; (8004b38 <prvHeapInit+0xb4>)
 8004b06:	681a      	ldr	r2, [r3, #0]
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	4a0a      	ldr	r2, [pc, #40]	; (8004b3c <prvHeapInit+0xb8>)
 8004b12:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	685b      	ldr	r3, [r3, #4]
 8004b18:	4a09      	ldr	r2, [pc, #36]	; (8004b40 <prvHeapInit+0xbc>)
 8004b1a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004b1c:	4b09      	ldr	r3, [pc, #36]	; (8004b44 <prvHeapInit+0xc0>)
 8004b1e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004b22:	601a      	str	r2, [r3, #0]
}
 8004b24:	bf00      	nop
 8004b26:	3714      	adds	r7, #20
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2e:	4770      	bx	lr
 8004b30:	20000508 	.word	0x20000508
 8004b34:	20004108 	.word	0x20004108
 8004b38:	20004110 	.word	0x20004110
 8004b3c:	20004118 	.word	0x20004118
 8004b40:	20004114 	.word	0x20004114
 8004b44:	20004124 	.word	0x20004124

08004b48 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b085      	sub	sp, #20
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004b50:	4b28      	ldr	r3, [pc, #160]	; (8004bf4 <prvInsertBlockIntoFreeList+0xac>)
 8004b52:	60fb      	str	r3, [r7, #12]
 8004b54:	e002      	b.n	8004b5c <prvInsertBlockIntoFreeList+0x14>
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	60fb      	str	r3, [r7, #12]
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	687a      	ldr	r2, [r7, #4]
 8004b62:	429a      	cmp	r2, r3
 8004b64:	d8f7      	bhi.n	8004b56 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	685b      	ldr	r3, [r3, #4]
 8004b6e:	68ba      	ldr	r2, [r7, #8]
 8004b70:	4413      	add	r3, r2
 8004b72:	687a      	ldr	r2, [r7, #4]
 8004b74:	429a      	cmp	r2, r3
 8004b76:	d108      	bne.n	8004b8a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	685a      	ldr	r2, [r3, #4]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	441a      	add	r2, r3
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	68ba      	ldr	r2, [r7, #8]
 8004b94:	441a      	add	r2, r3
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	429a      	cmp	r2, r3
 8004b9c:	d118      	bne.n	8004bd0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681a      	ldr	r2, [r3, #0]
 8004ba2:	4b15      	ldr	r3, [pc, #84]	; (8004bf8 <prvInsertBlockIntoFreeList+0xb0>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	429a      	cmp	r2, r3
 8004ba8:	d00d      	beq.n	8004bc6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	685a      	ldr	r2, [r3, #4]
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	441a      	add	r2, r3
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	681a      	ldr	r2, [r3, #0]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	601a      	str	r2, [r3, #0]
 8004bc4:	e008      	b.n	8004bd8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004bc6:	4b0c      	ldr	r3, [pc, #48]	; (8004bf8 <prvInsertBlockIntoFreeList+0xb0>)
 8004bc8:	681a      	ldr	r2, [r3, #0]
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	601a      	str	r2, [r3, #0]
 8004bce:	e003      	b.n	8004bd8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681a      	ldr	r2, [r3, #0]
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004bd8:	68fa      	ldr	r2, [r7, #12]
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	429a      	cmp	r2, r3
 8004bde:	d002      	beq.n	8004be6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	687a      	ldr	r2, [r7, #4]
 8004be4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004be6:	bf00      	nop
 8004be8:	3714      	adds	r7, #20
 8004bea:	46bd      	mov	sp, r7
 8004bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf0:	4770      	bx	lr
 8004bf2:	bf00      	nop
 8004bf4:	20004108 	.word	0x20004108
 8004bf8:	20004110 	.word	0x20004110

08004bfc <memset>:
 8004bfc:	4402      	add	r2, r0
 8004bfe:	4603      	mov	r3, r0
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d100      	bne.n	8004c06 <memset+0xa>
 8004c04:	4770      	bx	lr
 8004c06:	f803 1b01 	strb.w	r1, [r3], #1
 8004c0a:	e7f9      	b.n	8004c00 <memset+0x4>

08004c0c <__libc_init_array>:
 8004c0c:	b570      	push	{r4, r5, r6, lr}
 8004c0e:	4d0d      	ldr	r5, [pc, #52]	; (8004c44 <__libc_init_array+0x38>)
 8004c10:	4c0d      	ldr	r4, [pc, #52]	; (8004c48 <__libc_init_array+0x3c>)
 8004c12:	1b64      	subs	r4, r4, r5
 8004c14:	10a4      	asrs	r4, r4, #2
 8004c16:	2600      	movs	r6, #0
 8004c18:	42a6      	cmp	r6, r4
 8004c1a:	d109      	bne.n	8004c30 <__libc_init_array+0x24>
 8004c1c:	4d0b      	ldr	r5, [pc, #44]	; (8004c4c <__libc_init_array+0x40>)
 8004c1e:	4c0c      	ldr	r4, [pc, #48]	; (8004c50 <__libc_init_array+0x44>)
 8004c20:	f000 f818 	bl	8004c54 <_init>
 8004c24:	1b64      	subs	r4, r4, r5
 8004c26:	10a4      	asrs	r4, r4, #2
 8004c28:	2600      	movs	r6, #0
 8004c2a:	42a6      	cmp	r6, r4
 8004c2c:	d105      	bne.n	8004c3a <__libc_init_array+0x2e>
 8004c2e:	bd70      	pop	{r4, r5, r6, pc}
 8004c30:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c34:	4798      	blx	r3
 8004c36:	3601      	adds	r6, #1
 8004c38:	e7ee      	b.n	8004c18 <__libc_init_array+0xc>
 8004c3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c3e:	4798      	blx	r3
 8004c40:	3601      	adds	r6, #1
 8004c42:	e7f2      	b.n	8004c2a <__libc_init_array+0x1e>
 8004c44:	08004d14 	.word	0x08004d14
 8004c48:	08004d14 	.word	0x08004d14
 8004c4c:	08004d14 	.word	0x08004d14
 8004c50:	08004d18 	.word	0x08004d18

08004c54 <_init>:
 8004c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c56:	bf00      	nop
 8004c58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c5a:	bc08      	pop	{r3}
 8004c5c:	469e      	mov	lr, r3
 8004c5e:	4770      	bx	lr

08004c60 <_fini>:
 8004c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c62:	bf00      	nop
 8004c64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c66:	bc08      	pop	{r3}
 8004c68:	469e      	mov	lr, r3
 8004c6a:	4770      	bx	lr
