
Blind spot assistant v3.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000042ac  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  0800444c  0800444c  0001444c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080044ec  080044ec  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080044ec  080044ec  000144ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080044f4  080044f4  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080044f4  080044f4  000144f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080044f8  080044f8  000144f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080044fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000412c  20000010  0800450c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000413c  0800450c  0002413c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000fdf6  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000289d  00000000  00000000  0002fe79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001060  00000000  00000000  00032718  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ca0  00000000  00000000  00033778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017049  00000000  00000000  00034418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000115e0  00000000  00000000  0004b461  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000947f0  00000000  00000000  0005ca41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000043e0  00000000  00000000  000f1234  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000f5614  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000010 	.word	0x20000010
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004434 	.word	0x08004434

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000014 	.word	0x20000014
 80001dc:	08004434 	.word	0x08004434

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b970 	b.w	80004d8 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	460d      	mov	r5, r1
 8000218:	4604      	mov	r4, r0
 800021a:	460f      	mov	r7, r1
 800021c:	2b00      	cmp	r3, #0
 800021e:	d14a      	bne.n	80002b6 <__udivmoddi4+0xa6>
 8000220:	428a      	cmp	r2, r1
 8000222:	4694      	mov	ip, r2
 8000224:	d965      	bls.n	80002f2 <__udivmoddi4+0xe2>
 8000226:	fab2 f382 	clz	r3, r2
 800022a:	b143      	cbz	r3, 800023e <__udivmoddi4+0x2e>
 800022c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000230:	f1c3 0220 	rsb	r2, r3, #32
 8000234:	409f      	lsls	r7, r3
 8000236:	fa20 f202 	lsr.w	r2, r0, r2
 800023a:	4317      	orrs	r7, r2
 800023c:	409c      	lsls	r4, r3
 800023e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000242:	fa1f f58c 	uxth.w	r5, ip
 8000246:	fbb7 f1fe 	udiv	r1, r7, lr
 800024a:	0c22      	lsrs	r2, r4, #16
 800024c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000250:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000254:	fb01 f005 	mul.w	r0, r1, r5
 8000258:	4290      	cmp	r0, r2
 800025a:	d90a      	bls.n	8000272 <__udivmoddi4+0x62>
 800025c:	eb1c 0202 	adds.w	r2, ip, r2
 8000260:	f101 37ff 	add.w	r7, r1, #4294967295
 8000264:	f080 811c 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000268:	4290      	cmp	r0, r2
 800026a:	f240 8119 	bls.w	80004a0 <__udivmoddi4+0x290>
 800026e:	3902      	subs	r1, #2
 8000270:	4462      	add	r2, ip
 8000272:	1a12      	subs	r2, r2, r0
 8000274:	b2a4      	uxth	r4, r4
 8000276:	fbb2 f0fe 	udiv	r0, r2, lr
 800027a:	fb0e 2210 	mls	r2, lr, r0, r2
 800027e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000282:	fb00 f505 	mul.w	r5, r0, r5
 8000286:	42a5      	cmp	r5, r4
 8000288:	d90a      	bls.n	80002a0 <__udivmoddi4+0x90>
 800028a:	eb1c 0404 	adds.w	r4, ip, r4
 800028e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000292:	f080 8107 	bcs.w	80004a4 <__udivmoddi4+0x294>
 8000296:	42a5      	cmp	r5, r4
 8000298:	f240 8104 	bls.w	80004a4 <__udivmoddi4+0x294>
 800029c:	4464      	add	r4, ip
 800029e:	3802      	subs	r0, #2
 80002a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002a4:	1b64      	subs	r4, r4, r5
 80002a6:	2100      	movs	r1, #0
 80002a8:	b11e      	cbz	r6, 80002b2 <__udivmoddi4+0xa2>
 80002aa:	40dc      	lsrs	r4, r3
 80002ac:	2300      	movs	r3, #0
 80002ae:	e9c6 4300 	strd	r4, r3, [r6]
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d908      	bls.n	80002cc <__udivmoddi4+0xbc>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80ed 	beq.w	800049a <__udivmoddi4+0x28a>
 80002c0:	2100      	movs	r1, #0
 80002c2:	e9c6 0500 	strd	r0, r5, [r6]
 80002c6:	4608      	mov	r0, r1
 80002c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002cc:	fab3 f183 	clz	r1, r3
 80002d0:	2900      	cmp	r1, #0
 80002d2:	d149      	bne.n	8000368 <__udivmoddi4+0x158>
 80002d4:	42ab      	cmp	r3, r5
 80002d6:	d302      	bcc.n	80002de <__udivmoddi4+0xce>
 80002d8:	4282      	cmp	r2, r0
 80002da:	f200 80f8 	bhi.w	80004ce <__udivmoddi4+0x2be>
 80002de:	1a84      	subs	r4, r0, r2
 80002e0:	eb65 0203 	sbc.w	r2, r5, r3
 80002e4:	2001      	movs	r0, #1
 80002e6:	4617      	mov	r7, r2
 80002e8:	2e00      	cmp	r6, #0
 80002ea:	d0e2      	beq.n	80002b2 <__udivmoddi4+0xa2>
 80002ec:	e9c6 4700 	strd	r4, r7, [r6]
 80002f0:	e7df      	b.n	80002b2 <__udivmoddi4+0xa2>
 80002f2:	b902      	cbnz	r2, 80002f6 <__udivmoddi4+0xe6>
 80002f4:	deff      	udf	#255	; 0xff
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x210>
 8000300:	1a8a      	subs	r2, r1, r2
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2101      	movs	r1, #1
 800030c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000310:	fb07 2015 	mls	r0, r7, r5, r2
 8000314:	0c22      	lsrs	r2, r4, #16
 8000316:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800031a:	fb0e f005 	mul.w	r0, lr, r5
 800031e:	4290      	cmp	r0, r2
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x124>
 8000322:	eb1c 0202 	adds.w	r2, ip, r2
 8000326:	f105 38ff 	add.w	r8, r5, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4290      	cmp	r0, r2
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2b8>
 8000332:	4645      	mov	r5, r8
 8000334:	1a12      	subs	r2, r2, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb2 f0f7 	udiv	r0, r2, r7
 800033c:	fb07 2210 	mls	r2, r7, r0, r2
 8000340:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x14e>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 32ff 	add.w	r2, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x14c>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2c2>
 800035c:	4610      	mov	r0, r2
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000366:	e79f      	b.n	80002a8 <__udivmoddi4+0x98>
 8000368:	f1c1 0720 	rsb	r7, r1, #32
 800036c:	408b      	lsls	r3, r1
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa05 f401 	lsl.w	r4, r5, r1
 800037a:	fa20 f307 	lsr.w	r3, r0, r7
 800037e:	40fd      	lsrs	r5, r7
 8000380:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000384:	4323      	orrs	r3, r4
 8000386:	fbb5 f8f9 	udiv	r8, r5, r9
 800038a:	fa1f fe8c 	uxth.w	lr, ip
 800038e:	fb09 5518 	mls	r5, r9, r8, r5
 8000392:	0c1c      	lsrs	r4, r3, #16
 8000394:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000398:	fb08 f50e 	mul.w	r5, r8, lr
 800039c:	42a5      	cmp	r5, r4
 800039e:	fa02 f201 	lsl.w	r2, r2, r1
 80003a2:	fa00 f001 	lsl.w	r0, r0, r1
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2b4>
 80003b4:	42a5      	cmp	r5, r4
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2b4>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4464      	add	r4, ip
 80003c0:	1b64      	subs	r4, r4, r5
 80003c2:	b29d      	uxth	r5, r3
 80003c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c8:	fb09 4413 	mls	r4, r9, r3, r4
 80003cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f103 35ff 	add.w	r5, r3, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2ac>
 80003e2:	45a6      	cmp	lr, r4
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2ac>
 80003e6:	3b02      	subs	r3, #2
 80003e8:	4464      	add	r4, ip
 80003ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003ee:	fba3 9502 	umull	r9, r5, r3, r2
 80003f2:	eba4 040e 	sub.w	r4, r4, lr
 80003f6:	42ac      	cmp	r4, r5
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46ae      	mov	lr, r5
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x29c>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x298>
 8000400:	b156      	cbz	r6, 8000418 <__udivmoddi4+0x208>
 8000402:	ebb0 0208 	subs.w	r2, r0, r8
 8000406:	eb64 040e 	sbc.w	r4, r4, lr
 800040a:	fa04 f707 	lsl.w	r7, r4, r7
 800040e:	40ca      	lsrs	r2, r1
 8000410:	40cc      	lsrs	r4, r1
 8000412:	4317      	orrs	r7, r2
 8000414:	e9c6 7400 	strd	r7, r4, [r6]
 8000418:	4618      	mov	r0, r3
 800041a:	2100      	movs	r1, #0
 800041c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000420:	f1c3 0120 	rsb	r1, r3, #32
 8000424:	fa02 fc03 	lsl.w	ip, r2, r3
 8000428:	fa20 f201 	lsr.w	r2, r0, r1
 800042c:	fa25 f101 	lsr.w	r1, r5, r1
 8000430:	409d      	lsls	r5, r3
 8000432:	432a      	orrs	r2, r5
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000440:	fb07 1510 	mls	r5, r7, r0, r1
 8000444:	0c11      	lsrs	r1, r2, #16
 8000446:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800044a:	fb00 f50e 	mul.w	r5, r0, lr
 800044e:	428d      	cmp	r5, r1
 8000450:	fa04 f403 	lsl.w	r4, r4, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x258>
 8000456:	eb1c 0101 	adds.w	r1, ip, r1
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000460:	428d      	cmp	r5, r1
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000464:	3802      	subs	r0, #2
 8000466:	4461      	add	r1, ip
 8000468:	1b49      	subs	r1, r1, r5
 800046a:	b292      	uxth	r2, r2
 800046c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000470:	fb07 1115 	mls	r1, r7, r5, r1
 8000474:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000478:	fb05 f10e 	mul.w	r1, r5, lr
 800047c:	4291      	cmp	r1, r2
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x282>
 8000480:	eb1c 0202 	adds.w	r2, ip, r2
 8000484:	f105 38ff 	add.w	r8, r5, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2a8>
 800048a:	4291      	cmp	r1, r2
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2a8>
 800048e:	3d02      	subs	r5, #2
 8000490:	4462      	add	r2, ip
 8000492:	1a52      	subs	r2, r2, r1
 8000494:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0xfc>
 800049a:	4631      	mov	r1, r6
 800049c:	4630      	mov	r0, r6
 800049e:	e708      	b.n	80002b2 <__udivmoddi4+0xa2>
 80004a0:	4639      	mov	r1, r7
 80004a2:	e6e6      	b.n	8000272 <__udivmoddi4+0x62>
 80004a4:	4610      	mov	r0, r2
 80004a6:	e6fb      	b.n	80002a0 <__udivmoddi4+0x90>
 80004a8:	4548      	cmp	r0, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004b4:	3b01      	subs	r3, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b8:	4645      	mov	r5, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x282>
 80004bc:	462b      	mov	r3, r5
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1da>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x258>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c8:	3d02      	subs	r5, #2
 80004ca:	4462      	add	r2, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x124>
 80004ce:	4608      	mov	r0, r1
 80004d0:	e70a      	b.n	80002e8 <__udivmoddi4+0xd8>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x14e>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004dc:	b480      	push	{r7}
 80004de:	b085      	sub	sp, #20
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	60f8      	str	r0, [r7, #12]
 80004e4:	60b9      	str	r1, [r7, #8]
 80004e6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004e8:	68fb      	ldr	r3, [r7, #12]
 80004ea:	4a07      	ldr	r2, [pc, #28]	; (8000508 <vApplicationGetIdleTaskMemory+0x2c>)
 80004ec:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004ee:	68bb      	ldr	r3, [r7, #8]
 80004f0:	4a06      	ldr	r2, [pc, #24]	; (800050c <vApplicationGetIdleTaskMemory+0x30>)
 80004f2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	2280      	movs	r2, #128	; 0x80
 80004f8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004fa:	bf00      	nop
 80004fc:	3714      	adds	r7, #20
 80004fe:	46bd      	mov	sp, r7
 8000500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop
 8000508:	2000002c 	.word	0x2000002c
 800050c:	20000080 	.word	0x20000080

08000510 <HAL_TIM_IC_CaptureCallback>:



//ISR for timer ICU
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b082      	sub	sp, #8
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
	// checking on timer ICU interrupt source if TIM2 or TIM 5
	if (htim->Instance == TIM2)
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000520:	d163      	bne.n	80005ea <HAL_TIM_IC_CaptureCallback+0xda>
	{
		// Check if the callback is triggered by the correct timer (TIMx)
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	7f1b      	ldrb	r3, [r3, #28]
 8000526:	2b01      	cmp	r3, #1
 8000528:	d15f      	bne.n	80005ea <HAL_TIM_IC_CaptureCallback+0xda>
		{
			if (flag_timer2==0)
 800052a:	4b66      	ldr	r3, [pc, #408]	; (80006c4 <HAL_TIM_IC_CaptureCallback+0x1b4>)
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	2b00      	cmp	r3, #0
 8000530:	d10d      	bne.n	800054e <HAL_TIM_IC_CaptureCallback+0x3e>
			{
				t1_timer2=HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000532:	2100      	movs	r1, #0
 8000534:	6878      	ldr	r0, [r7, #4]
 8000536:	f002 f9d9 	bl	80028ec <HAL_TIM_ReadCapturedValue>
 800053a:	4603      	mov	r3, r0
 800053c:	461a      	mov	r2, r3
 800053e:	4b62      	ldr	r3, [pc, #392]	; (80006c8 <HAL_TIM_IC_CaptureCallback+0x1b8>)
 8000540:	601a      	str	r2, [r3, #0]

				flag_timer2++;
 8000542:	4b60      	ldr	r3, [pc, #384]	; (80006c4 <HAL_TIM_IC_CaptureCallback+0x1b4>)
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	3301      	adds	r3, #1
 8000548:	4a5e      	ldr	r2, [pc, #376]	; (80006c4 <HAL_TIM_IC_CaptureCallback+0x1b4>)
 800054a:	6013      	str	r3, [r2, #0]
 800054c:	e04d      	b.n	80005ea <HAL_TIM_IC_CaptureCallback+0xda>
			}
			else if(flag_timer2==1)
 800054e:	4b5d      	ldr	r3, [pc, #372]	; (80006c4 <HAL_TIM_IC_CaptureCallback+0x1b4>)
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	2b01      	cmp	r3, #1
 8000554:	d149      	bne.n	80005ea <HAL_TIM_IC_CaptureCallback+0xda>
			{
				t2_timer2=HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000556:	2100      	movs	r1, #0
 8000558:	6878      	ldr	r0, [r7, #4]
 800055a:	f002 f9c7 	bl	80028ec <HAL_TIM_ReadCapturedValue>
 800055e:	4603      	mov	r3, r0
 8000560:	461a      	mov	r2, r3
 8000562:	4b5a      	ldr	r3, [pc, #360]	; (80006cc <HAL_TIM_IC_CaptureCallback+0x1bc>)
 8000564:	601a      	str	r2, [r3, #0]
				if(t2_timer2>t1_timer2)
 8000566:	4b59      	ldr	r3, [pc, #356]	; (80006cc <HAL_TIM_IC_CaptureCallback+0x1bc>)
 8000568:	681a      	ldr	r2, [r3, #0]
 800056a:	4b57      	ldr	r3, [pc, #348]	; (80006c8 <HAL_TIM_IC_CaptureCallback+0x1b8>)
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	429a      	cmp	r2, r3
 8000570:	dd07      	ble.n	8000582 <HAL_TIM_IC_CaptureCallback+0x72>
				{
					time_timer2=t2_timer2-t1_timer2;
 8000572:	4b56      	ldr	r3, [pc, #344]	; (80006cc <HAL_TIM_IC_CaptureCallback+0x1bc>)
 8000574:	681a      	ldr	r2, [r3, #0]
 8000576:	4b54      	ldr	r3, [pc, #336]	; (80006c8 <HAL_TIM_IC_CaptureCallback+0x1b8>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	1ad3      	subs	r3, r2, r3
 800057c:	4a54      	ldr	r2, [pc, #336]	; (80006d0 <HAL_TIM_IC_CaptureCallback+0x1c0>)
 800057e:	6013      	str	r3, [r2, #0]
 8000580:	e010      	b.n	80005a4 <HAL_TIM_IC_CaptureCallback+0x94>
				}
				else if(t1_timer2>t2_timer2)
 8000582:	4b51      	ldr	r3, [pc, #324]	; (80006c8 <HAL_TIM_IC_CaptureCallback+0x1b8>)
 8000584:	681a      	ldr	r2, [r3, #0]
 8000586:	4b51      	ldr	r3, [pc, #324]	; (80006cc <HAL_TIM_IC_CaptureCallback+0x1bc>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	429a      	cmp	r2, r3
 800058c:	dd0a      	ble.n	80005a4 <HAL_TIM_IC_CaptureCallback+0x94>
				{
					time_timer2 = ((0xffff-t1_timer2)+t2_timer2)+1;
 800058e:	4b4e      	ldr	r3, [pc, #312]	; (80006c8 <HAL_TIM_IC_CaptureCallback+0x1b8>)
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8000596:	33ff      	adds	r3, #255	; 0xff
 8000598:	4a4c      	ldr	r2, [pc, #304]	; (80006cc <HAL_TIM_IC_CaptureCallback+0x1bc>)
 800059a:	6812      	ldr	r2, [r2, #0]
 800059c:	4413      	add	r3, r2
 800059e:	3301      	adds	r3, #1
 80005a0:	4a4b      	ldr	r2, [pc, #300]	; (80006d0 <HAL_TIM_IC_CaptureCallback+0x1c0>)
 80005a2:	6013      	str	r3, [r2, #0]
				}
				distance_u1=(((int)time_timer2*340*100)/((int)2*1000000))+1;
 80005a4:	4b4a      	ldr	r3, [pc, #296]	; (80006d0 <HAL_TIM_IC_CaptureCallback+0x1c0>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	f248 42d0 	movw	r2, #34000	; 0x84d0
 80005ac:	fb02 f303 	mul.w	r3, r2, r3
 80005b0:	4a48      	ldr	r2, [pc, #288]	; (80006d4 <HAL_TIM_IC_CaptureCallback+0x1c4>)
 80005b2:	fb82 1203 	smull	r1, r2, r2, r3
 80005b6:	14d2      	asrs	r2, r2, #19
 80005b8:	17db      	asrs	r3, r3, #31
 80005ba:	1ad3      	subs	r3, r2, r3
 80005bc:	3301      	adds	r3, #1
 80005be:	4a46      	ldr	r2, [pc, #280]	; (80006d8 <HAL_TIM_IC_CaptureCallback+0x1c8>)
 80005c0:	6013      	str	r3, [r2, #0]

				// Ensure that the distance is within the range (0 to 50 cm)
				if (distance_u1 > 500)
 80005c2:	4b45      	ldr	r3, [pc, #276]	; (80006d8 <HAL_TIM_IC_CaptureCallback+0x1c8>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80005ca:	dd04      	ble.n	80005d6 <HAL_TIM_IC_CaptureCallback+0xc6>
				{
					distance_u1 = 500;
 80005cc:	4b42      	ldr	r3, [pc, #264]	; (80006d8 <HAL_TIM_IC_CaptureCallback+0x1c8>)
 80005ce:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80005d2:	601a      	str	r2, [r3, #0]
 80005d4:	e006      	b.n	80005e4 <HAL_TIM_IC_CaptureCallback+0xd4>
				}
				else if (distance_u1<0)
 80005d6:	4b40      	ldr	r3, [pc, #256]	; (80006d8 <HAL_TIM_IC_CaptureCallback+0x1c8>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	2b00      	cmp	r3, #0
 80005dc:	da02      	bge.n	80005e4 <HAL_TIM_IC_CaptureCallback+0xd4>
				{
					distance_u1=0;
 80005de:	4b3e      	ldr	r3, [pc, #248]	; (80006d8 <HAL_TIM_IC_CaptureCallback+0x1c8>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	601a      	str	r2, [r3, #0]
				}
				flag_timer2=0;
 80005e4:	4b37      	ldr	r3, [pc, #220]	; (80006c4 <HAL_TIM_IC_CaptureCallback+0x1b4>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	601a      	str	r2, [r3, #0]
			}

		}
	}

		if (htim->Instance == TIM5)
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	4a3b      	ldr	r2, [pc, #236]	; (80006dc <HAL_TIM_IC_CaptureCallback+0x1cc>)
 80005f0:	4293      	cmp	r3, r2
 80005f2:	d163      	bne.n	80006bc <HAL_TIM_IC_CaptureCallback+0x1ac>
		{
			// Check if the callback is triggered by the correct timer (TIMx)
			if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4)
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	7f1b      	ldrb	r3, [r3, #28]
 80005f8:	2b08      	cmp	r3, #8
 80005fa:	d15f      	bne.n	80006bc <HAL_TIM_IC_CaptureCallback+0x1ac>
			{
				if (flag_timer5==0)
 80005fc:	4b38      	ldr	r3, [pc, #224]	; (80006e0 <HAL_TIM_IC_CaptureCallback+0x1d0>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	2b00      	cmp	r3, #0
 8000602:	d10d      	bne.n	8000620 <HAL_TIM_IC_CaptureCallback+0x110>
				{
					t1_timer5=HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_4);
 8000604:	210c      	movs	r1, #12
 8000606:	6878      	ldr	r0, [r7, #4]
 8000608:	f002 f970 	bl	80028ec <HAL_TIM_ReadCapturedValue>
 800060c:	4603      	mov	r3, r0
 800060e:	461a      	mov	r2, r3
 8000610:	4b34      	ldr	r3, [pc, #208]	; (80006e4 <HAL_TIM_IC_CaptureCallback+0x1d4>)
 8000612:	601a      	str	r2, [r3, #0]

					flag_timer5++;
 8000614:	4b32      	ldr	r3, [pc, #200]	; (80006e0 <HAL_TIM_IC_CaptureCallback+0x1d0>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	3301      	adds	r3, #1
 800061a:	4a31      	ldr	r2, [pc, #196]	; (80006e0 <HAL_TIM_IC_CaptureCallback+0x1d0>)
 800061c:	6013      	str	r3, [r2, #0]

				}

			}
		}
}
 800061e:	e04d      	b.n	80006bc <HAL_TIM_IC_CaptureCallback+0x1ac>
				else if(flag_timer5==1)
 8000620:	4b2f      	ldr	r3, [pc, #188]	; (80006e0 <HAL_TIM_IC_CaptureCallback+0x1d0>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	2b01      	cmp	r3, #1
 8000626:	d149      	bne.n	80006bc <HAL_TIM_IC_CaptureCallback+0x1ac>
					t2_timer5=HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_4);
 8000628:	210c      	movs	r1, #12
 800062a:	6878      	ldr	r0, [r7, #4]
 800062c:	f002 f95e 	bl	80028ec <HAL_TIM_ReadCapturedValue>
 8000630:	4603      	mov	r3, r0
 8000632:	461a      	mov	r2, r3
 8000634:	4b2c      	ldr	r3, [pc, #176]	; (80006e8 <HAL_TIM_IC_CaptureCallback+0x1d8>)
 8000636:	601a      	str	r2, [r3, #0]
					if(t2_timer5>t1_timer5)
 8000638:	4b2b      	ldr	r3, [pc, #172]	; (80006e8 <HAL_TIM_IC_CaptureCallback+0x1d8>)
 800063a:	681a      	ldr	r2, [r3, #0]
 800063c:	4b29      	ldr	r3, [pc, #164]	; (80006e4 <HAL_TIM_IC_CaptureCallback+0x1d4>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	429a      	cmp	r2, r3
 8000642:	dd07      	ble.n	8000654 <HAL_TIM_IC_CaptureCallback+0x144>
						time_timer5=t2_timer5-t1_timer5;
 8000644:	4b28      	ldr	r3, [pc, #160]	; (80006e8 <HAL_TIM_IC_CaptureCallback+0x1d8>)
 8000646:	681a      	ldr	r2, [r3, #0]
 8000648:	4b26      	ldr	r3, [pc, #152]	; (80006e4 <HAL_TIM_IC_CaptureCallback+0x1d4>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	1ad3      	subs	r3, r2, r3
 800064e:	4a27      	ldr	r2, [pc, #156]	; (80006ec <HAL_TIM_IC_CaptureCallback+0x1dc>)
 8000650:	6013      	str	r3, [r2, #0]
 8000652:	e010      	b.n	8000676 <HAL_TIM_IC_CaptureCallback+0x166>
					else if(t1_timer5>t2_timer5)
 8000654:	4b23      	ldr	r3, [pc, #140]	; (80006e4 <HAL_TIM_IC_CaptureCallback+0x1d4>)
 8000656:	681a      	ldr	r2, [r3, #0]
 8000658:	4b23      	ldr	r3, [pc, #140]	; (80006e8 <HAL_TIM_IC_CaptureCallback+0x1d8>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	429a      	cmp	r2, r3
 800065e:	dd0a      	ble.n	8000676 <HAL_TIM_IC_CaptureCallback+0x166>
						time_timer5 = ((0xffff-t1_timer5)+t2_timer5)+1;
 8000660:	4b20      	ldr	r3, [pc, #128]	; (80006e4 <HAL_TIM_IC_CaptureCallback+0x1d4>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8000668:	33ff      	adds	r3, #255	; 0xff
 800066a:	4a1f      	ldr	r2, [pc, #124]	; (80006e8 <HAL_TIM_IC_CaptureCallback+0x1d8>)
 800066c:	6812      	ldr	r2, [r2, #0]
 800066e:	4413      	add	r3, r2
 8000670:	3301      	adds	r3, #1
 8000672:	4a1e      	ldr	r2, [pc, #120]	; (80006ec <HAL_TIM_IC_CaptureCallback+0x1dc>)
 8000674:	6013      	str	r3, [r2, #0]
					distance_u2=(((int)time_timer5*340*100)/((int)2*1000000))+1;
 8000676:	4b1d      	ldr	r3, [pc, #116]	; (80006ec <HAL_TIM_IC_CaptureCallback+0x1dc>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	f248 42d0 	movw	r2, #34000	; 0x84d0
 800067e:	fb02 f303 	mul.w	r3, r2, r3
 8000682:	4a14      	ldr	r2, [pc, #80]	; (80006d4 <HAL_TIM_IC_CaptureCallback+0x1c4>)
 8000684:	fb82 1203 	smull	r1, r2, r2, r3
 8000688:	14d2      	asrs	r2, r2, #19
 800068a:	17db      	asrs	r3, r3, #31
 800068c:	1ad3      	subs	r3, r2, r3
 800068e:	3301      	adds	r3, #1
 8000690:	4a17      	ldr	r2, [pc, #92]	; (80006f0 <HAL_TIM_IC_CaptureCallback+0x1e0>)
 8000692:	6013      	str	r3, [r2, #0]
					if (distance_u2 > 500)
 8000694:	4b16      	ldr	r3, [pc, #88]	; (80006f0 <HAL_TIM_IC_CaptureCallback+0x1e0>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800069c:	dd04      	ble.n	80006a8 <HAL_TIM_IC_CaptureCallback+0x198>
							distance_u2 = 500;
 800069e:	4b14      	ldr	r3, [pc, #80]	; (80006f0 <HAL_TIM_IC_CaptureCallback+0x1e0>)
 80006a0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80006a4:	601a      	str	r2, [r3, #0]
 80006a6:	e006      	b.n	80006b6 <HAL_TIM_IC_CaptureCallback+0x1a6>
					else if (distance_u2<0)
 80006a8:	4b11      	ldr	r3, [pc, #68]	; (80006f0 <HAL_TIM_IC_CaptureCallback+0x1e0>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	da02      	bge.n	80006b6 <HAL_TIM_IC_CaptureCallback+0x1a6>
							distance_u2=0;
 80006b0:	4b0f      	ldr	r3, [pc, #60]	; (80006f0 <HAL_TIM_IC_CaptureCallback+0x1e0>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	601a      	str	r2, [r3, #0]
					flag_timer5=0;
 80006b6:	4b0a      	ldr	r3, [pc, #40]	; (80006e0 <HAL_TIM_IC_CaptureCallback+0x1d0>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	601a      	str	r2, [r3, #0]
}
 80006bc:	bf00      	nop
 80006be:	3708      	adds	r7, #8
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	2000037c 	.word	0x2000037c
 80006c8:	20000380 	.word	0x20000380
 80006cc:	20000384 	.word	0x20000384
 80006d0:	20000388 	.word	0x20000388
 80006d4:	431bde83 	.word	0x431bde83
 80006d8:	20000374 	.word	0x20000374
 80006dc:	40000c00 	.word	0x40000c00
 80006e0:	2000038c 	.word	0x2000038c
 80006e4:	20000390 	.word	0x20000390
 80006e8:	20000394 	.word	0x20000394
 80006ec:	20000398 	.word	0x20000398
 80006f0:	20000378 	.word	0x20000378

080006f4 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80006f4:	b5b0      	push	{r4, r5, r7, lr}
 80006f6:	b096      	sub	sp, #88	; 0x58
 80006f8:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80006fa:	f000 fca5 	bl	8001048 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80006fe:	f000 f853 	bl	80007a8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000702:	f000 f9c9 	bl	8000a98 <MX_GPIO_Init>
	MX_TIM2_Init();
 8000706:	f000 f8e7 	bl	80008d8 <MX_TIM2_Init>
	MX_TIM5_Init();
 800070a:	f000 f955 	bl	80009b8 <MX_TIM5_Init>
	MX_SPI1_Init();
 800070e:	f000 f8ad 	bl	800086c <MX_SPI1_Init>
	/* USER CODE BEGIN 2 */
	EnableUltrasonic_1_TimerInterrutp();
 8000712:	f000 fa19 	bl	8000b48 <EnableUltrasonic_1_TimerInterrutp>
	EnableUltrasonic_2_TimerInterrutp();
 8000716:	f000 fa23 	bl	8000b60 <EnableUltrasonic_2_TimerInterrutp>
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* definition and creation of trigSonic1_Task */
	osThreadDef(trigSonic1_Task, triggerUltrasonic_1_Handeler, osPriorityNormal, 0, 128);
 800071a:	4b1d      	ldr	r3, [pc, #116]	; (8000790 <main+0x9c>)
 800071c:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000720:	461d      	mov	r5, r3
 8000722:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000724:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000726:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800072a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	trigSonic1_TaskHandle = osThreadCreate(osThread(trigSonic1_Task), NULL);
 800072e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000732:	2100      	movs	r1, #0
 8000734:	4618      	mov	r0, r3
 8000736:	f002 fc3a 	bl	8002fae <osThreadCreate>
 800073a:	4603      	mov	r3, r0
 800073c:	4a15      	ldr	r2, [pc, #84]	; (8000794 <main+0xa0>)
 800073e:	6013      	str	r3, [r2, #0]

	/* definition and creation of trigSonic2_Task */
	osThreadDef(trigSonic2_Task, triggerUltrasonic_2_Handeler, osPriorityIdle, 0, 128);
 8000740:	4b15      	ldr	r3, [pc, #84]	; (8000798 <main+0xa4>)
 8000742:	f107 0420 	add.w	r4, r7, #32
 8000746:	461d      	mov	r5, r3
 8000748:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800074a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800074c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000750:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	trigSonic2_TaskHandle = osThreadCreate(osThread(trigSonic2_Task), NULL);
 8000754:	f107 0320 	add.w	r3, r7, #32
 8000758:	2100      	movs	r1, #0
 800075a:	4618      	mov	r0, r3
 800075c:	f002 fc27 	bl	8002fae <osThreadCreate>
 8000760:	4603      	mov	r3, r0
 8000762:	4a0e      	ldr	r2, [pc, #56]	; (800079c <main+0xa8>)
 8000764:	6013      	str	r3, [r2, #0]

	/* definition and creation of LEDS_Task */
	osThreadDef(LEDS_Task, indecateOnLED_Handeler, osPriorityIdle, 0, 128);
 8000766:	4b0e      	ldr	r3, [pc, #56]	; (80007a0 <main+0xac>)
 8000768:	1d3c      	adds	r4, r7, #4
 800076a:	461d      	mov	r5, r3
 800076c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800076e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000770:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000774:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	LEDS_TaskHandle = osThreadCreate(osThread(LEDS_Task), NULL);
 8000778:	1d3b      	adds	r3, r7, #4
 800077a:	2100      	movs	r1, #0
 800077c:	4618      	mov	r0, r3
 800077e:	f002 fc16 	bl	8002fae <osThreadCreate>
 8000782:	4603      	mov	r3, r0
 8000784:	4a07      	ldr	r2, [pc, #28]	; (80007a4 <main+0xb0>)
 8000786:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

	/* Start scheduler */
	osKernelStart();
 8000788:	f002 fc0a 	bl	8002fa0 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 800078c:	e7fe      	b.n	800078c <main+0x98>
 800078e:	bf00      	nop
 8000790:	0800445c 	.word	0x0800445c
 8000794:	20000368 	.word	0x20000368
 8000798:	08004488 	.word	0x08004488
 800079c:	2000036c 	.word	0x2000036c
 80007a0:	080044b0 	.word	0x080044b0
 80007a4:	20000370 	.word	0x20000370

080007a8 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b094      	sub	sp, #80	; 0x50
 80007ac:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ae:	f107 0320 	add.w	r3, r7, #32
 80007b2:	2230      	movs	r2, #48	; 0x30
 80007b4:	2100      	movs	r1, #0
 80007b6:	4618      	mov	r0, r3
 80007b8:	f003 fe10 	bl	80043dc <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007bc:	f107 030c 	add.w	r3, r7, #12
 80007c0:	2200      	movs	r2, #0
 80007c2:	601a      	str	r2, [r3, #0]
 80007c4:	605a      	str	r2, [r3, #4]
 80007c6:	609a      	str	r2, [r3, #8]
 80007c8:	60da      	str	r2, [r3, #12]
 80007ca:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80007cc:	2300      	movs	r3, #0
 80007ce:	60bb      	str	r3, [r7, #8]
 80007d0:	4b24      	ldr	r3, [pc, #144]	; (8000864 <SystemClock_Config+0xbc>)
 80007d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007d4:	4a23      	ldr	r2, [pc, #140]	; (8000864 <SystemClock_Config+0xbc>)
 80007d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007da:	6413      	str	r3, [r2, #64]	; 0x40
 80007dc:	4b21      	ldr	r3, [pc, #132]	; (8000864 <SystemClock_Config+0xbc>)
 80007de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007e4:	60bb      	str	r3, [r7, #8]
 80007e6:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80007e8:	2300      	movs	r3, #0
 80007ea:	607b      	str	r3, [r7, #4]
 80007ec:	4b1e      	ldr	r3, [pc, #120]	; (8000868 <SystemClock_Config+0xc0>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80007f4:	4a1c      	ldr	r2, [pc, #112]	; (8000868 <SystemClock_Config+0xc0>)
 80007f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80007fa:	6013      	str	r3, [r2, #0]
 80007fc:	4b1a      	ldr	r3, [pc, #104]	; (8000868 <SystemClock_Config+0xc0>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000804:	607b      	str	r3, [r7, #4]
 8000806:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000808:	230a      	movs	r3, #10
 800080a:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800080c:	2301      	movs	r3, #1
 800080e:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000810:	2310      	movs	r3, #16
 8000812:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000814:	2301      	movs	r3, #1
 8000816:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000818:	2300      	movs	r3, #0
 800081a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800081c:	f107 0320 	add.w	r3, r7, #32
 8000820:	4618      	mov	r0, r3
 8000822:	f000 fed3 	bl	80015cc <HAL_RCC_OscConfig>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <SystemClock_Config+0x88>
	{
		Error_Handler();
 800082c:	f000 fa26 	bl	8000c7c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000830:	230f      	movs	r3, #15
 8000832:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000834:	2300      	movs	r3, #0
 8000836:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000838:	2380      	movs	r3, #128	; 0x80
 800083a:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800083c:	2300      	movs	r3, #0
 800083e:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000840:	2300      	movs	r3, #0
 8000842:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000844:	f107 030c 	add.w	r3, r7, #12
 8000848:	2100      	movs	r1, #0
 800084a:	4618      	mov	r0, r3
 800084c:	f001 f936 	bl	8001abc <HAL_RCC_ClockConfig>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <SystemClock_Config+0xb2>
	{
		Error_Handler();
 8000856:	f000 fa11 	bl	8000c7c <Error_Handler>
	}
}
 800085a:	bf00      	nop
 800085c:	3750      	adds	r7, #80	; 0x50
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	40023800 	.word	0x40023800
 8000868:	40007000 	.word	0x40007000

0800086c <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8000870:	4b17      	ldr	r3, [pc, #92]	; (80008d0 <MX_SPI1_Init+0x64>)
 8000872:	4a18      	ldr	r2, [pc, #96]	; (80008d4 <MX_SPI1_Init+0x68>)
 8000874:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8000876:	4b16      	ldr	r3, [pc, #88]	; (80008d0 <MX_SPI1_Init+0x64>)
 8000878:	f44f 7282 	mov.w	r2, #260	; 0x104
 800087c:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800087e:	4b14      	ldr	r3, [pc, #80]	; (80008d0 <MX_SPI1_Init+0x64>)
 8000880:	2200      	movs	r2, #0
 8000882:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000884:	4b12      	ldr	r3, [pc, #72]	; (80008d0 <MX_SPI1_Init+0x64>)
 8000886:	2200      	movs	r2, #0
 8000888:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800088a:	4b11      	ldr	r3, [pc, #68]	; (80008d0 <MX_SPI1_Init+0x64>)
 800088c:	2200      	movs	r2, #0
 800088e:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000890:	4b0f      	ldr	r3, [pc, #60]	; (80008d0 <MX_SPI1_Init+0x64>)
 8000892:	2200      	movs	r2, #0
 8000894:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8000896:	4b0e      	ldr	r3, [pc, #56]	; (80008d0 <MX_SPI1_Init+0x64>)
 8000898:	f44f 7200 	mov.w	r2, #512	; 0x200
 800089c:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800089e:	4b0c      	ldr	r3, [pc, #48]	; (80008d0 <MX_SPI1_Init+0x64>)
 80008a0:	2210      	movs	r2, #16
 80008a2:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008a4:	4b0a      	ldr	r3, [pc, #40]	; (80008d0 <MX_SPI1_Init+0x64>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80008aa:	4b09      	ldr	r3, [pc, #36]	; (80008d0 <MX_SPI1_Init+0x64>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008b0:	4b07      	ldr	r3, [pc, #28]	; (80008d0 <MX_SPI1_Init+0x64>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 80008b6:	4b06      	ldr	r3, [pc, #24]	; (80008d0 <MX_SPI1_Init+0x64>)
 80008b8:	220a      	movs	r2, #10
 80008ba:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80008bc:	4804      	ldr	r0, [pc, #16]	; (80008d0 <MX_SPI1_Init+0x64>)
 80008be:	f001 fafb 	bl	8001eb8 <HAL_SPI_Init>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <MX_SPI1_Init+0x60>
	{
		Error_Handler();
 80008c8:	f000 f9d8 	bl	8000c7c <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 80008cc:	bf00      	nop
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	20000280 	.word	0x20000280
 80008d4:	40013000 	.word	0x40013000

080008d8 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b08a      	sub	sp, #40	; 0x28
 80008dc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008de:	f107 0318 	add.w	r3, r7, #24
 80008e2:	2200      	movs	r2, #0
 80008e4:	601a      	str	r2, [r3, #0]
 80008e6:	605a      	str	r2, [r3, #4]
 80008e8:	609a      	str	r2, [r3, #8]
 80008ea:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008ec:	f107 0310 	add.w	r3, r7, #16
 80008f0:	2200      	movs	r2, #0
 80008f2:	601a      	str	r2, [r3, #0]
 80008f4:	605a      	str	r2, [r3, #4]
	TIM_IC_InitTypeDef sConfigIC = {0};
 80008f6:	463b      	mov	r3, r7
 80008f8:	2200      	movs	r2, #0
 80008fa:	601a      	str	r2, [r3, #0]
 80008fc:	605a      	str	r2, [r3, #4]
 80008fe:	609a      	str	r2, [r3, #8]
 8000900:	60da      	str	r2, [r3, #12]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8000902:	4b2c      	ldr	r3, [pc, #176]	; (80009b4 <MX_TIM2_Init+0xdc>)
 8000904:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000908:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 15;
 800090a:	4b2a      	ldr	r3, [pc, #168]	; (80009b4 <MX_TIM2_Init+0xdc>)
 800090c:	220f      	movs	r2, #15
 800090e:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000910:	4b28      	ldr	r3, [pc, #160]	; (80009b4 <MX_TIM2_Init+0xdc>)
 8000912:	2200      	movs	r2, #0
 8000914:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 65535;
 8000916:	4b27      	ldr	r3, [pc, #156]	; (80009b4 <MX_TIM2_Init+0xdc>)
 8000918:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800091c:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800091e:	4b25      	ldr	r3, [pc, #148]	; (80009b4 <MX_TIM2_Init+0xdc>)
 8000920:	2200      	movs	r2, #0
 8000922:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000924:	4b23      	ldr	r3, [pc, #140]	; (80009b4 <MX_TIM2_Init+0xdc>)
 8000926:	2200      	movs	r2, #0
 8000928:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800092a:	4822      	ldr	r0, [pc, #136]	; (80009b4 <MX_TIM2_Init+0xdc>)
 800092c:	f001 fb4d 	bl	8001fca <HAL_TIM_Base_Init>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <MX_TIM2_Init+0x62>
	{
		Error_Handler();
 8000936:	f000 f9a1 	bl	8000c7c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800093a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800093e:	61bb      	str	r3, [r7, #24]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000940:	f107 0318 	add.w	r3, r7, #24
 8000944:	4619      	mov	r1, r3
 8000946:	481b      	ldr	r0, [pc, #108]	; (80009b4 <MX_TIM2_Init+0xdc>)
 8000948:	f001 ff08 	bl	800275c <HAL_TIM_ConfigClockSource>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <MX_TIM2_Init+0x7e>
	{
		Error_Handler();
 8000952:	f000 f993 	bl	8000c7c <Error_Handler>
	}
	if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000956:	4817      	ldr	r0, [pc, #92]	; (80009b4 <MX_TIM2_Init+0xdc>)
 8000958:	f001 fbe8 	bl	800212c <HAL_TIM_IC_Init>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d001      	beq.n	8000966 <MX_TIM2_Init+0x8e>
	{
		Error_Handler();
 8000962:	f000 f98b 	bl	8000c7c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000966:	2300      	movs	r3, #0
 8000968:	613b      	str	r3, [r7, #16]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800096a:	2300      	movs	r3, #0
 800096c:	617b      	str	r3, [r7, #20]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800096e:	f107 0310 	add.w	r3, r7, #16
 8000972:	4619      	mov	r1, r3
 8000974:	480f      	ldr	r0, [pc, #60]	; (80009b4 <MX_TIM2_Init+0xdc>)
 8000976:	f002 fa79 	bl	8002e6c <HAL_TIMEx_MasterConfigSynchronization>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <MX_TIM2_Init+0xac>
	{
		Error_Handler();
 8000980:	f000 f97c 	bl	8000c7c <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8000984:	230a      	movs	r3, #10
 8000986:	603b      	str	r3, [r7, #0]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000988:	2301      	movs	r3, #1
 800098a:	607b      	str	r3, [r7, #4]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800098c:	2300      	movs	r3, #0
 800098e:	60bb      	str	r3, [r7, #8]
	sConfigIC.ICFilter = 0;
 8000990:	2300      	movs	r3, #0
 8000992:	60fb      	str	r3, [r7, #12]
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000994:	463b      	mov	r3, r7
 8000996:	2200      	movs	r2, #0
 8000998:	4619      	mov	r1, r3
 800099a:	4806      	ldr	r0, [pc, #24]	; (80009b4 <MX_TIM2_Init+0xdc>)
 800099c:	f001 fe42 	bl	8002624 <HAL_TIM_IC_ConfigChannel>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <MX_TIM2_Init+0xd2>
	{
		Error_Handler();
 80009a6:	f000 f969 	bl	8000c7c <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 80009aa:	bf00      	nop
 80009ac:	3728      	adds	r7, #40	; 0x28
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	200002d8 	.word	0x200002d8

080009b8 <MX_TIM5_Init>:
 * @brief TIM5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM5_Init(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b08a      	sub	sp, #40	; 0x28
 80009bc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM5_Init 0 */

	/* USER CODE END TIM5_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009be:	f107 0318 	add.w	r3, r7, #24
 80009c2:	2200      	movs	r2, #0
 80009c4:	601a      	str	r2, [r3, #0]
 80009c6:	605a      	str	r2, [r3, #4]
 80009c8:	609a      	str	r2, [r3, #8]
 80009ca:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009cc:	f107 0310 	add.w	r3, r7, #16
 80009d0:	2200      	movs	r2, #0
 80009d2:	601a      	str	r2, [r3, #0]
 80009d4:	605a      	str	r2, [r3, #4]
	TIM_IC_InitTypeDef sConfigIC = {0};
 80009d6:	463b      	mov	r3, r7
 80009d8:	2200      	movs	r2, #0
 80009da:	601a      	str	r2, [r3, #0]
 80009dc:	605a      	str	r2, [r3, #4]
 80009de:	609a      	str	r2, [r3, #8]
 80009e0:	60da      	str	r2, [r3, #12]

	/* USER CODE BEGIN TIM5_Init 1 */

	/* USER CODE END TIM5_Init 1 */
	htim5.Instance = TIM5;
 80009e2:	4b2b      	ldr	r3, [pc, #172]	; (8000a90 <MX_TIM5_Init+0xd8>)
 80009e4:	4a2b      	ldr	r2, [pc, #172]	; (8000a94 <MX_TIM5_Init+0xdc>)
 80009e6:	601a      	str	r2, [r3, #0]
	htim5.Init.Prescaler = 15;
 80009e8:	4b29      	ldr	r3, [pc, #164]	; (8000a90 <MX_TIM5_Init+0xd8>)
 80009ea:	220f      	movs	r2, #15
 80009ec:	605a      	str	r2, [r3, #4]
	htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009ee:	4b28      	ldr	r3, [pc, #160]	; (8000a90 <MX_TIM5_Init+0xd8>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	609a      	str	r2, [r3, #8]
	htim5.Init.Period = 65535;
 80009f4:	4b26      	ldr	r3, [pc, #152]	; (8000a90 <MX_TIM5_Init+0xd8>)
 80009f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80009fa:	60da      	str	r2, [r3, #12]
	htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009fc:	4b24      	ldr	r3, [pc, #144]	; (8000a90 <MX_TIM5_Init+0xd8>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	611a      	str	r2, [r3, #16]
	htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a02:	4b23      	ldr	r3, [pc, #140]	; (8000a90 <MX_TIM5_Init+0xd8>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000a08:	4821      	ldr	r0, [pc, #132]	; (8000a90 <MX_TIM5_Init+0xd8>)
 8000a0a:	f001 fade 	bl	8001fca <HAL_TIM_Base_Init>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d001      	beq.n	8000a18 <MX_TIM5_Init+0x60>
	{
		Error_Handler();
 8000a14:	f000 f932 	bl	8000c7c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a1c:	61bb      	str	r3, [r7, #24]
	if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000a1e:	f107 0318 	add.w	r3, r7, #24
 8000a22:	4619      	mov	r1, r3
 8000a24:	481a      	ldr	r0, [pc, #104]	; (8000a90 <MX_TIM5_Init+0xd8>)
 8000a26:	f001 fe99 	bl	800275c <HAL_TIM_ConfigClockSource>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d001      	beq.n	8000a34 <MX_TIM5_Init+0x7c>
	{
		Error_Handler();
 8000a30:	f000 f924 	bl	8000c7c <Error_Handler>
	}
	if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 8000a34:	4816      	ldr	r0, [pc, #88]	; (8000a90 <MX_TIM5_Init+0xd8>)
 8000a36:	f001 fb79 	bl	800212c <HAL_TIM_IC_Init>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <MX_TIM5_Init+0x8c>
	{
		Error_Handler();
 8000a40:	f000 f91c 	bl	8000c7c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a44:	2300      	movs	r3, #0
 8000a46:	613b      	str	r3, [r7, #16]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	617b      	str	r3, [r7, #20]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000a4c:	f107 0310 	add.w	r3, r7, #16
 8000a50:	4619      	mov	r1, r3
 8000a52:	480f      	ldr	r0, [pc, #60]	; (8000a90 <MX_TIM5_Init+0xd8>)
 8000a54:	f002 fa0a 	bl	8002e6c <HAL_TIMEx_MasterConfigSynchronization>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d001      	beq.n	8000a62 <MX_TIM5_Init+0xaa>
	{
		Error_Handler();
 8000a5e:	f000 f90d 	bl	8000c7c <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8000a62:	230a      	movs	r3, #10
 8000a64:	603b      	str	r3, [r7, #0]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000a66:	2301      	movs	r3, #1
 8000a68:	607b      	str	r3, [r7, #4]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	60bb      	str	r3, [r7, #8]
	sConfigIC.ICFilter = 0;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	60fb      	str	r3, [r7, #12]
	if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8000a72:	463b      	mov	r3, r7
 8000a74:	220c      	movs	r2, #12
 8000a76:	4619      	mov	r1, r3
 8000a78:	4805      	ldr	r0, [pc, #20]	; (8000a90 <MX_TIM5_Init+0xd8>)
 8000a7a:	f001 fdd3 	bl	8002624 <HAL_TIM_IC_ConfigChannel>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d001      	beq.n	8000a88 <MX_TIM5_Init+0xd0>
	{
		Error_Handler();
 8000a84:	f000 f8fa 	bl	8000c7c <Error_Handler>
	}
	/* USER CODE BEGIN TIM5_Init 2 */

	/* USER CODE END TIM5_Init 2 */

}
 8000a88:	bf00      	nop
 8000a8a:	3728      	adds	r7, #40	; 0x28
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	20000320 	.word	0x20000320
 8000a94:	40000c00 	.word	0x40000c00

08000a98 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b088      	sub	sp, #32
 8000a9c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a9e:	f107 030c 	add.w	r3, r7, #12
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	601a      	str	r2, [r3, #0]
 8000aa6:	605a      	str	r2, [r3, #4]
 8000aa8:	609a      	str	r2, [r3, #8]
 8000aaa:	60da      	str	r2, [r3, #12]
 8000aac:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000aae:	2300      	movs	r3, #0
 8000ab0:	60bb      	str	r3, [r7, #8]
 8000ab2:	4b22      	ldr	r3, [pc, #136]	; (8000b3c <MX_GPIO_Init+0xa4>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab6:	4a21      	ldr	r2, [pc, #132]	; (8000b3c <MX_GPIO_Init+0xa4>)
 8000ab8:	f043 0301 	orr.w	r3, r3, #1
 8000abc:	6313      	str	r3, [r2, #48]	; 0x30
 8000abe:	4b1f      	ldr	r3, [pc, #124]	; (8000b3c <MX_GPIO_Init+0xa4>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	f003 0301 	and.w	r3, r3, #1
 8000ac6:	60bb      	str	r3, [r7, #8]
 8000ac8:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000aca:	2300      	movs	r3, #0
 8000acc:	607b      	str	r3, [r7, #4]
 8000ace:	4b1b      	ldr	r3, [pc, #108]	; (8000b3c <MX_GPIO_Init+0xa4>)
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad2:	4a1a      	ldr	r2, [pc, #104]	; (8000b3c <MX_GPIO_Init+0xa4>)
 8000ad4:	f043 0302 	orr.w	r3, r3, #2
 8000ad8:	6313      	str	r3, [r2, #48]	; 0x30
 8000ada:	4b18      	ldr	r3, [pc, #96]	; (8000b3c <MX_GPIO_Init+0xa4>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ade:	f003 0302 	and.w	r3, r3, #2
 8000ae2:	607b      	str	r3, [r7, #4]
 8000ae4:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4, GPIO_PIN_RESET);
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	2116      	movs	r1, #22
 8000aea:	4815      	ldr	r0, [pc, #84]	; (8000b40 <MX_GPIO_Init+0xa8>)
 8000aec:	f000 fd54 	bl	8001598 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 8000af0:	2200      	movs	r2, #0
 8000af2:	2107      	movs	r1, #7
 8000af4:	4813      	ldr	r0, [pc, #76]	; (8000b44 <MX_GPIO_Init+0xac>)
 8000af6:	f000 fd4f 	bl	8001598 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : PA1 PA2 PA4 */
	GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4;
 8000afa:	2316      	movs	r3, #22
 8000afc:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000afe:	2301      	movs	r3, #1
 8000b00:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b02:	2300      	movs	r3, #0
 8000b04:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b06:	2300      	movs	r3, #0
 8000b08:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b0a:	f107 030c 	add.w	r3, r7, #12
 8000b0e:	4619      	mov	r1, r3
 8000b10:	480b      	ldr	r0, [pc, #44]	; (8000b40 <MX_GPIO_Init+0xa8>)
 8000b12:	f000 fbbd 	bl	8001290 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB0 PB1 PB2 */
	GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000b16:	2307      	movs	r3, #7
 8000b18:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b22:	2300      	movs	r3, #0
 8000b24:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b26:	f107 030c 	add.w	r3, r7, #12
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	4805      	ldr	r0, [pc, #20]	; (8000b44 <MX_GPIO_Init+0xac>)
 8000b2e:	f000 fbaf 	bl	8001290 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000b32:	bf00      	nop
 8000b34:	3720      	adds	r7, #32
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	40023800 	.word	0x40023800
 8000b40:	40020000 	.word	0x40020000
 8000b44:	40020400 	.word	0x40020400

08000b48 <EnableUltrasonic_1_TimerInterrutp>:

/* USER CODE BEGIN 4 */


void EnableUltrasonic_1_TimerInterrutp (void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8000b4c:	b662      	cpsie	i
}
 8000b4e:	bf00      	nop
	__enable_irq(); // enable global interrupt
	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1); // enable timer2
 8000b50:	2100      	movs	r1, #0
 8000b52:	4802      	ldr	r0, [pc, #8]	; (8000b5c <EnableUltrasonic_1_TimerInterrutp+0x14>)
 8000b54:	f001 fb44 	bl	80021e0 <HAL_TIM_IC_Start_IT>
}
 8000b58:	bf00      	nop
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	200002d8 	.word	0x200002d8

08000b60 <EnableUltrasonic_2_TimerInterrutp>:
void EnableUltrasonic_2_TimerInterrutp (void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsie i" : : : "memory");
 8000b64:	b662      	cpsie	i
}
 8000b66:	bf00      	nop
	__enable_irq(); // enable global interrupt
	HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_4); // enable timer5
 8000b68:	210c      	movs	r1, #12
 8000b6a:	4802      	ldr	r0, [pc, #8]	; (8000b74 <EnableUltrasonic_2_TimerInterrutp+0x14>)
 8000b6c:	f001 fb38 	bl	80021e0 <HAL_TIM_IC_Start_IT>
}
 8000b70:	bf00      	nop
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	20000320 	.word	0x20000320

08000b78 <triggerUltrasonic_1_Handeler>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_triggerUltrasonic_1_Handeler */
void triggerUltrasonic_1_Handeler(void const * argument)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b084      	sub	sp, #16
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
	/* Infinite loop */
	while(1)
	{
		// Trigger ultrasonic sensor
		//enable trigger for ultrasonic_1
		HAL_GPIO_WritePin(TRIG_PORT_U1, TRIG_PIN_U1,GPIO_PIN_SET);
 8000b80:	2201      	movs	r2, #1
 8000b82:	2102      	movs	r1, #2
 8000b84:	480a      	ldr	r0, [pc, #40]	; (8000bb0 <triggerUltrasonic_1_Handeler+0x38>)
 8000b86:	f000 fd07 	bl	8001598 <HAL_GPIO_WritePin>
		for( int i=0;i<80;i++); //delay for 10 us //put no ass operation
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	60fb      	str	r3, [r7, #12]
 8000b8e:	e002      	b.n	8000b96 <triggerUltrasonic_1_Handeler+0x1e>
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	3301      	adds	r3, #1
 8000b94:	60fb      	str	r3, [r7, #12]
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	2b4f      	cmp	r3, #79	; 0x4f
 8000b9a:	ddf9      	ble.n	8000b90 <triggerUltrasonic_1_Handeler+0x18>
		HAL_GPIO_WritePin(TRIG_PORT_U1, TRIG_PIN_U1,GPIO_PIN_RESET);
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	2102      	movs	r1, #2
 8000ba0:	4803      	ldr	r0, [pc, #12]	; (8000bb0 <triggerUltrasonic_1_Handeler+0x38>)
 8000ba2:	f000 fcf9 	bl	8001598 <HAL_GPIO_WritePin>
		vTaskDelay(DelayToRepeatTrig);
 8000ba6:	2078      	movs	r0, #120	; 0x78
 8000ba8:	f002 fc94 	bl	80034d4 <vTaskDelay>
		HAL_GPIO_WritePin(TRIG_PORT_U1, TRIG_PIN_U1,GPIO_PIN_SET);
 8000bac:	e7e8      	b.n	8000b80 <triggerUltrasonic_1_Handeler+0x8>
 8000bae:	bf00      	nop
 8000bb0:	40020000 	.word	0x40020000

08000bb4 <triggerUltrasonic_2_Handeler>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_triggerUltrasonic_2_Handeler */
void triggerUltrasonic_2_Handeler(void const * argument)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b084      	sub	sp, #16
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
	vTaskDelay(DelayBetweenUltraSonics);// 60m
 8000bbc:	203c      	movs	r0, #60	; 0x3c
 8000bbe:	f002 fc89 	bl	80034d4 <vTaskDelay>
	/* Infinite loop */
	while(1)
	{
		// Trigger ultrasonic sensor
		//enable trigger for ultrasonic_1
		HAL_GPIO_WritePin(TRIG_PORT_U2, TRIG_PIN_U2,GPIO_PIN_SET);
 8000bc2:	2201      	movs	r2, #1
 8000bc4:	2110      	movs	r1, #16
 8000bc6:	480a      	ldr	r0, [pc, #40]	; (8000bf0 <triggerUltrasonic_2_Handeler+0x3c>)
 8000bc8:	f000 fce6 	bl	8001598 <HAL_GPIO_WritePin>
		for( int i=0;i<80;i++); //delay for 10 us //put no ass operation
 8000bcc:	2300      	movs	r3, #0
 8000bce:	60fb      	str	r3, [r7, #12]
 8000bd0:	e002      	b.n	8000bd8 <triggerUltrasonic_2_Handeler+0x24>
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	3301      	adds	r3, #1
 8000bd6:	60fb      	str	r3, [r7, #12]
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	2b4f      	cmp	r3, #79	; 0x4f
 8000bdc:	ddf9      	ble.n	8000bd2 <triggerUltrasonic_2_Handeler+0x1e>
		HAL_GPIO_WritePin(TRIG_PORT_U2, TRIG_PIN_U2,GPIO_PIN_RESET);
 8000bde:	2200      	movs	r2, #0
 8000be0:	2110      	movs	r1, #16
 8000be2:	4803      	ldr	r0, [pc, #12]	; (8000bf0 <triggerUltrasonic_2_Handeler+0x3c>)
 8000be4:	f000 fcd8 	bl	8001598 <HAL_GPIO_WritePin>
		vTaskDelay(DelayToRepeatTrig);
 8000be8:	2078      	movs	r0, #120	; 0x78
 8000bea:	f002 fc73 	bl	80034d4 <vTaskDelay>
		HAL_GPIO_WritePin(TRIG_PORT_U2, TRIG_PIN_U2,GPIO_PIN_SET);
 8000bee:	e7e8      	b.n	8000bc2 <triggerUltrasonic_2_Handeler+0xe>
 8000bf0:	40020000 	.word	0x40020000

08000bf4 <indecateOnLED_Handeler>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_indecateOnLED_Handeler */
void indecateOnLED_Handeler(void const * argument)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN indecateOnLED_Handeler */
	vTaskDelay(DelayTrigToRead); // first delay : time between trigger and getting read
 8000bfc:	2032      	movs	r0, #50	; 0x32
 8000bfe:	f002 fc69 	bl	80034d4 <vTaskDelay>
		for(;;)
		{
			// Check if an object is near

			// if there is something near ultrasonic1 the led will be on
			if(distance_u1<NEAR_OBJECT_THRESHOLD)
 8000c02:	4b11      	ldr	r3, [pc, #68]	; (8000c48 <indecateOnLED_Handeler+0x54>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	2b13      	cmp	r3, #19
 8000c08:	dc05      	bgt.n	8000c16 <indecateOnLED_Handeler+0x22>
			{
				HAL_GPIO_WritePin(LED_PORT_U1, LED_PIN_U1,GPIO_PIN_SET);
 8000c0a:	2201      	movs	r2, #1
 8000c0c:	2104      	movs	r1, #4
 8000c0e:	480f      	ldr	r0, [pc, #60]	; (8000c4c <indecateOnLED_Handeler+0x58>)
 8000c10:	f000 fcc2 	bl	8001598 <HAL_GPIO_WritePin>
 8000c14:	e004      	b.n	8000c20 <indecateOnLED_Handeler+0x2c>
			}
			else
			{
				HAL_GPIO_WritePin(LED_PORT_U1, LED_PIN_U1,GPIO_PIN_RESET);
 8000c16:	2200      	movs	r2, #0
 8000c18:	2104      	movs	r1, #4
 8000c1a:	480c      	ldr	r0, [pc, #48]	; (8000c4c <indecateOnLED_Handeler+0x58>)
 8000c1c:	f000 fcbc 	bl	8001598 <HAL_GPIO_WritePin>
			}


			// if there is something near ultrasonic2 the led will be on
			if(distance_u2<NEAR_OBJECT_THRESHOLD)
 8000c20:	4b0b      	ldr	r3, [pc, #44]	; (8000c50 <indecateOnLED_Handeler+0x5c>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	2b13      	cmp	r3, #19
 8000c26:	dc05      	bgt.n	8000c34 <indecateOnLED_Handeler+0x40>
				{
					HAL_GPIO_WritePin(LED_PORT_U2, LED_PIN_U2,GPIO_PIN_SET);
 8000c28:	2201      	movs	r2, #1
 8000c2a:	2101      	movs	r1, #1
 8000c2c:	4809      	ldr	r0, [pc, #36]	; (8000c54 <indecateOnLED_Handeler+0x60>)
 8000c2e:	f000 fcb3 	bl	8001598 <HAL_GPIO_WritePin>
 8000c32:	e004      	b.n	8000c3e <indecateOnLED_Handeler+0x4a>
				}
				else
				{
					HAL_GPIO_WritePin(LED_PORT_U2, LED_PIN_U2,GPIO_PIN_RESET);
 8000c34:	2200      	movs	r2, #0
 8000c36:	2101      	movs	r1, #1
 8000c38:	4806      	ldr	r0, [pc, #24]	; (8000c54 <indecateOnLED_Handeler+0x60>)
 8000c3a:	f000 fcad 	bl	8001598 <HAL_GPIO_WritePin>
				}

			vTaskDelay(DelayBetweenUltraSonics);// > 60 ms
 8000c3e:	203c      	movs	r0, #60	; 0x3c
 8000c40:	f002 fc48 	bl	80034d4 <vTaskDelay>
			if(distance_u1<NEAR_OBJECT_THRESHOLD)
 8000c44:	e7dd      	b.n	8000c02 <indecateOnLED_Handeler+0xe>
 8000c46:	bf00      	nop
 8000c48:	20000374 	.word	0x20000374
 8000c4c:	40020000 	.word	0x40020000
 8000c50:	20000378 	.word	0x20000378
 8000c54:	40020400 	.word	0x40020400

08000c58 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM1) {
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4a04      	ldr	r2, [pc, #16]	; (8000c78 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c66:	4293      	cmp	r3, r2
 8000c68:	d101      	bne.n	8000c6e <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8000c6a:	f000 fa0f 	bl	800108c <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8000c6e:	bf00      	nop
 8000c70:	3708      	adds	r7, #8
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	40010000 	.word	0x40010000

08000c7c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c80:	b672      	cpsid	i
}
 8000c82:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000c84:	e7fe      	b.n	8000c84 <Error_Handler+0x8>
	...

08000c88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c8e:	2300      	movs	r3, #0
 8000c90:	607b      	str	r3, [r7, #4]
 8000c92:	4b12      	ldr	r3, [pc, #72]	; (8000cdc <HAL_MspInit+0x54>)
 8000c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c96:	4a11      	ldr	r2, [pc, #68]	; (8000cdc <HAL_MspInit+0x54>)
 8000c98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c9c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c9e:	4b0f      	ldr	r3, [pc, #60]	; (8000cdc <HAL_MspInit+0x54>)
 8000ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ca2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ca6:	607b      	str	r3, [r7, #4]
 8000ca8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000caa:	2300      	movs	r3, #0
 8000cac:	603b      	str	r3, [r7, #0]
 8000cae:	4b0b      	ldr	r3, [pc, #44]	; (8000cdc <HAL_MspInit+0x54>)
 8000cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb2:	4a0a      	ldr	r2, [pc, #40]	; (8000cdc <HAL_MspInit+0x54>)
 8000cb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cb8:	6413      	str	r3, [r2, #64]	; 0x40
 8000cba:	4b08      	ldr	r3, [pc, #32]	; (8000cdc <HAL_MspInit+0x54>)
 8000cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cc2:	603b      	str	r3, [r7, #0]
 8000cc4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	210f      	movs	r1, #15
 8000cca:	f06f 0001 	mvn.w	r0, #1
 8000cce:	f000 fab5 	bl	800123c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cd2:	bf00      	nop
 8000cd4:	3708      	adds	r7, #8
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	40023800 	.word	0x40023800

08000ce0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b08a      	sub	sp, #40	; 0x28
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce8:	f107 0314 	add.w	r3, r7, #20
 8000cec:	2200      	movs	r2, #0
 8000cee:	601a      	str	r2, [r3, #0]
 8000cf0:	605a      	str	r2, [r3, #4]
 8000cf2:	609a      	str	r2, [r3, #8]
 8000cf4:	60da      	str	r2, [r3, #12]
 8000cf6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4a19      	ldr	r2, [pc, #100]	; (8000d64 <HAL_SPI_MspInit+0x84>)
 8000cfe:	4293      	cmp	r3, r2
 8000d00:	d12b      	bne.n	8000d5a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d02:	2300      	movs	r3, #0
 8000d04:	613b      	str	r3, [r7, #16]
 8000d06:	4b18      	ldr	r3, [pc, #96]	; (8000d68 <HAL_SPI_MspInit+0x88>)
 8000d08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d0a:	4a17      	ldr	r2, [pc, #92]	; (8000d68 <HAL_SPI_MspInit+0x88>)
 8000d0c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d10:	6453      	str	r3, [r2, #68]	; 0x44
 8000d12:	4b15      	ldr	r3, [pc, #84]	; (8000d68 <HAL_SPI_MspInit+0x88>)
 8000d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d16:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d1a:	613b      	str	r3, [r7, #16]
 8000d1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d1e:	2300      	movs	r3, #0
 8000d20:	60fb      	str	r3, [r7, #12]
 8000d22:	4b11      	ldr	r3, [pc, #68]	; (8000d68 <HAL_SPI_MspInit+0x88>)
 8000d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d26:	4a10      	ldr	r2, [pc, #64]	; (8000d68 <HAL_SPI_MspInit+0x88>)
 8000d28:	f043 0301 	orr.w	r3, r3, #1
 8000d2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d2e:	4b0e      	ldr	r3, [pc, #56]	; (8000d68 <HAL_SPI_MspInit+0x88>)
 8000d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d32:	f003 0301 	and.w	r3, r3, #1
 8000d36:	60fb      	str	r3, [r7, #12]
 8000d38:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000d3a:	23e0      	movs	r3, #224	; 0xe0
 8000d3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d3e:	2302      	movs	r3, #2
 8000d40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d42:	2300      	movs	r3, #0
 8000d44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d46:	2303      	movs	r3, #3
 8000d48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d4a:	2305      	movs	r3, #5
 8000d4c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d4e:	f107 0314 	add.w	r3, r7, #20
 8000d52:	4619      	mov	r1, r3
 8000d54:	4805      	ldr	r0, [pc, #20]	; (8000d6c <HAL_SPI_MspInit+0x8c>)
 8000d56:	f000 fa9b 	bl	8001290 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000d5a:	bf00      	nop
 8000d5c:	3728      	adds	r7, #40	; 0x28
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	40013000 	.word	0x40013000
 8000d68:	40023800 	.word	0x40023800
 8000d6c:	40020000 	.word	0x40020000

08000d70 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b08c      	sub	sp, #48	; 0x30
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d78:	f107 031c 	add.w	r3, r7, #28
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	601a      	str	r2, [r3, #0]
 8000d80:	605a      	str	r2, [r3, #4]
 8000d82:	609a      	str	r2, [r3, #8]
 8000d84:	60da      	str	r2, [r3, #12]
 8000d86:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d90:	d134      	bne.n	8000dfc <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d92:	2300      	movs	r3, #0
 8000d94:	61bb      	str	r3, [r7, #24]
 8000d96:	4b38      	ldr	r3, [pc, #224]	; (8000e78 <HAL_TIM_Base_MspInit+0x108>)
 8000d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d9a:	4a37      	ldr	r2, [pc, #220]	; (8000e78 <HAL_TIM_Base_MspInit+0x108>)
 8000d9c:	f043 0301 	orr.w	r3, r3, #1
 8000da0:	6413      	str	r3, [r2, #64]	; 0x40
 8000da2:	4b35      	ldr	r3, [pc, #212]	; (8000e78 <HAL_TIM_Base_MspInit+0x108>)
 8000da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da6:	f003 0301 	and.w	r3, r3, #1
 8000daa:	61bb      	str	r3, [r7, #24]
 8000dac:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dae:	2300      	movs	r3, #0
 8000db0:	617b      	str	r3, [r7, #20]
 8000db2:	4b31      	ldr	r3, [pc, #196]	; (8000e78 <HAL_TIM_Base_MspInit+0x108>)
 8000db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db6:	4a30      	ldr	r2, [pc, #192]	; (8000e78 <HAL_TIM_Base_MspInit+0x108>)
 8000db8:	f043 0301 	orr.w	r3, r3, #1
 8000dbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dbe:	4b2e      	ldr	r3, [pc, #184]	; (8000e78 <HAL_TIM_Base_MspInit+0x108>)
 8000dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc2:	f003 0301 	and.w	r3, r3, #1
 8000dc6:	617b      	str	r3, [r7, #20]
 8000dc8:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000dca:	2301      	movs	r3, #1
 8000dcc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dce:	2302      	movs	r3, #2
 8000dd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000dda:	2301      	movs	r3, #1
 8000ddc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dde:	f107 031c 	add.w	r3, r7, #28
 8000de2:	4619      	mov	r1, r3
 8000de4:	4825      	ldr	r0, [pc, #148]	; (8000e7c <HAL_TIM_Base_MspInit+0x10c>)
 8000de6:	f000 fa53 	bl	8001290 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8000dea:	2200      	movs	r2, #0
 8000dec:	2105      	movs	r1, #5
 8000dee:	201c      	movs	r0, #28
 8000df0:	f000 fa24 	bl	800123c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000df4:	201c      	movs	r0, #28
 8000df6:	f000 fa3d 	bl	8001274 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8000dfa:	e038      	b.n	8000e6e <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM5)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a1f      	ldr	r2, [pc, #124]	; (8000e80 <HAL_TIM_Base_MspInit+0x110>)
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d133      	bne.n	8000e6e <HAL_TIM_Base_MspInit+0xfe>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8000e06:	2300      	movs	r3, #0
 8000e08:	613b      	str	r3, [r7, #16]
 8000e0a:	4b1b      	ldr	r3, [pc, #108]	; (8000e78 <HAL_TIM_Base_MspInit+0x108>)
 8000e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e0e:	4a1a      	ldr	r2, [pc, #104]	; (8000e78 <HAL_TIM_Base_MspInit+0x108>)
 8000e10:	f043 0308 	orr.w	r3, r3, #8
 8000e14:	6413      	str	r3, [r2, #64]	; 0x40
 8000e16:	4b18      	ldr	r3, [pc, #96]	; (8000e78 <HAL_TIM_Base_MspInit+0x108>)
 8000e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e1a:	f003 0308 	and.w	r3, r3, #8
 8000e1e:	613b      	str	r3, [r7, #16]
 8000e20:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e22:	2300      	movs	r3, #0
 8000e24:	60fb      	str	r3, [r7, #12]
 8000e26:	4b14      	ldr	r3, [pc, #80]	; (8000e78 <HAL_TIM_Base_MspInit+0x108>)
 8000e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2a:	4a13      	ldr	r2, [pc, #76]	; (8000e78 <HAL_TIM_Base_MspInit+0x108>)
 8000e2c:	f043 0301 	orr.w	r3, r3, #1
 8000e30:	6313      	str	r3, [r2, #48]	; 0x30
 8000e32:	4b11      	ldr	r3, [pc, #68]	; (8000e78 <HAL_TIM_Base_MspInit+0x108>)
 8000e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e36:	f003 0301 	and.w	r3, r3, #1
 8000e3a:	60fb      	str	r3, [r7, #12]
 8000e3c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000e3e:	2308      	movs	r3, #8
 8000e40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e42:	2302      	movs	r3, #2
 8000e44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e46:	2300      	movs	r3, #0
 8000e48:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8000e4e:	2302      	movs	r3, #2
 8000e50:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e52:	f107 031c 	add.w	r3, r7, #28
 8000e56:	4619      	mov	r1, r3
 8000e58:	4808      	ldr	r0, [pc, #32]	; (8000e7c <HAL_TIM_Base_MspInit+0x10c>)
 8000e5a:	f000 fa19 	bl	8001290 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 8000e5e:	2200      	movs	r2, #0
 8000e60:	2105      	movs	r1, #5
 8000e62:	2032      	movs	r0, #50	; 0x32
 8000e64:	f000 f9ea 	bl	800123c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8000e68:	2032      	movs	r0, #50	; 0x32
 8000e6a:	f000 fa03 	bl	8001274 <HAL_NVIC_EnableIRQ>
}
 8000e6e:	bf00      	nop
 8000e70:	3730      	adds	r7, #48	; 0x30
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	40023800 	.word	0x40023800
 8000e7c:	40020000 	.word	0x40020000
 8000e80:	40000c00 	.word	0x40000c00

08000e84 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b08c      	sub	sp, #48	; 0x30
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000e90:	2300      	movs	r3, #0
 8000e92:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000e94:	2300      	movs	r3, #0
 8000e96:	60bb      	str	r3, [r7, #8]
 8000e98:	4b2e      	ldr	r3, [pc, #184]	; (8000f54 <HAL_InitTick+0xd0>)
 8000e9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e9c:	4a2d      	ldr	r2, [pc, #180]	; (8000f54 <HAL_InitTick+0xd0>)
 8000e9e:	f043 0301 	orr.w	r3, r3, #1
 8000ea2:	6453      	str	r3, [r2, #68]	; 0x44
 8000ea4:	4b2b      	ldr	r3, [pc, #172]	; (8000f54 <HAL_InitTick+0xd0>)
 8000ea6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ea8:	f003 0301 	and.w	r3, r3, #1
 8000eac:	60bb      	str	r3, [r7, #8]
 8000eae:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000eb0:	f107 020c 	add.w	r2, r7, #12
 8000eb4:	f107 0310 	add.w	r3, r7, #16
 8000eb8:	4611      	mov	r1, r2
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f000 ffca 	bl	8001e54 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000ec0:	f000 ffb4 	bl	8001e2c <HAL_RCC_GetPCLK2Freq>
 8000ec4:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ec8:	4a23      	ldr	r2, [pc, #140]	; (8000f58 <HAL_InitTick+0xd4>)
 8000eca:	fba2 2303 	umull	r2, r3, r2, r3
 8000ece:	0c9b      	lsrs	r3, r3, #18
 8000ed0:	3b01      	subs	r3, #1
 8000ed2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000ed4:	4b21      	ldr	r3, [pc, #132]	; (8000f5c <HAL_InitTick+0xd8>)
 8000ed6:	4a22      	ldr	r2, [pc, #136]	; (8000f60 <HAL_InitTick+0xdc>)
 8000ed8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000eda:	4b20      	ldr	r3, [pc, #128]	; (8000f5c <HAL_InitTick+0xd8>)
 8000edc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ee0:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000ee2:	4a1e      	ldr	r2, [pc, #120]	; (8000f5c <HAL_InitTick+0xd8>)
 8000ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ee6:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000ee8:	4b1c      	ldr	r3, [pc, #112]	; (8000f5c <HAL_InitTick+0xd8>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eee:	4b1b      	ldr	r3, [pc, #108]	; (8000f5c <HAL_InitTick+0xd8>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ef4:	4b19      	ldr	r3, [pc, #100]	; (8000f5c <HAL_InitTick+0xd8>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000efa:	4818      	ldr	r0, [pc, #96]	; (8000f5c <HAL_InitTick+0xd8>)
 8000efc:	f001 f865 	bl	8001fca <HAL_TIM_Base_Init>
 8000f00:	4603      	mov	r3, r0
 8000f02:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000f06:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d11b      	bne.n	8000f46 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000f0e:	4813      	ldr	r0, [pc, #76]	; (8000f5c <HAL_InitTick+0xd8>)
 8000f10:	f001 f8aa 	bl	8002068 <HAL_TIM_Base_Start_IT>
 8000f14:	4603      	mov	r3, r0
 8000f16:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000f1a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d111      	bne.n	8000f46 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000f22:	2019      	movs	r0, #25
 8000f24:	f000 f9a6 	bl	8001274 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	2b0f      	cmp	r3, #15
 8000f2c:	d808      	bhi.n	8000f40 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000f2e:	2200      	movs	r2, #0
 8000f30:	6879      	ldr	r1, [r7, #4]
 8000f32:	2019      	movs	r0, #25
 8000f34:	f000 f982 	bl	800123c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f38:	4a0a      	ldr	r2, [pc, #40]	; (8000f64 <HAL_InitTick+0xe0>)
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	6013      	str	r3, [r2, #0]
 8000f3e:	e002      	b.n	8000f46 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000f40:	2301      	movs	r3, #1
 8000f42:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000f46:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	3730      	adds	r7, #48	; 0x30
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	40023800 	.word	0x40023800
 8000f58:	431bde83 	.word	0x431bde83
 8000f5c:	2000039c 	.word	0x2000039c
 8000f60:	40010000 	.word	0x40010000
 8000f64:	20000004 	.word	0x20000004

08000f68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f6c:	e7fe      	b.n	8000f6c <NMI_Handler+0x4>

08000f6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f6e:	b480      	push	{r7}
 8000f70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f72:	e7fe      	b.n	8000f72 <HardFault_Handler+0x4>

08000f74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f78:	e7fe      	b.n	8000f78 <MemManage_Handler+0x4>

08000f7a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f7a:	b480      	push	{r7}
 8000f7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f7e:	e7fe      	b.n	8000f7e <BusFault_Handler+0x4>

08000f80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f84:	e7fe      	b.n	8000f84 <UsageFault_Handler+0x4>

08000f86 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f86:	b480      	push	{r7}
 8000f88:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f8a:	bf00      	nop
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr

08000f94 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000f98:	4802      	ldr	r0, [pc, #8]	; (8000fa4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000f9a:	f001 fa3b 	bl	8002414 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000f9e:	bf00      	nop
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	2000039c 	.word	0x2000039c

08000fa8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000fac:	4802      	ldr	r0, [pc, #8]	; (8000fb8 <TIM2_IRQHandler+0x10>)
 8000fae:	f001 fa31 	bl	8002414 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000fb2:	bf00      	nop
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	200002d8 	.word	0x200002d8

08000fbc <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8000fc0:	4802      	ldr	r0, [pc, #8]	; (8000fcc <TIM5_IRQHandler+0x10>)
 8000fc2:	f001 fa27 	bl	8002414 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8000fc6:	bf00      	nop
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	20000320 	.word	0x20000320

08000fd0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fd4:	4b06      	ldr	r3, [pc, #24]	; (8000ff0 <SystemInit+0x20>)
 8000fd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fda:	4a05      	ldr	r2, [pc, #20]	; (8000ff0 <SystemInit+0x20>)
 8000fdc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fe0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fe4:	bf00      	nop
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop
 8000ff0:	e000ed00 	.word	0xe000ed00

08000ff4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000ff4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800102c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ff8:	480d      	ldr	r0, [pc, #52]	; (8001030 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000ffa:	490e      	ldr	r1, [pc, #56]	; (8001034 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ffc:	4a0e      	ldr	r2, [pc, #56]	; (8001038 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ffe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001000:	e002      	b.n	8001008 <LoopCopyDataInit>

08001002 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001002:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001004:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001006:	3304      	adds	r3, #4

08001008 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001008:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800100a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800100c:	d3f9      	bcc.n	8001002 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800100e:	4a0b      	ldr	r2, [pc, #44]	; (800103c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001010:	4c0b      	ldr	r4, [pc, #44]	; (8001040 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001012:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001014:	e001      	b.n	800101a <LoopFillZerobss>

08001016 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001016:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001018:	3204      	adds	r2, #4

0800101a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800101a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800101c:	d3fb      	bcc.n	8001016 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800101e:	f7ff ffd7 	bl	8000fd0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001022:	f003 f9e3 	bl	80043ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001026:	f7ff fb65 	bl	80006f4 <main>
  bx  lr    
 800102a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800102c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001030:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001034:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001038:	080044fc 	.word	0x080044fc
  ldr r2, =_sbss
 800103c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001040:	2000413c 	.word	0x2000413c

08001044 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001044:	e7fe      	b.n	8001044 <ADC_IRQHandler>
	...

08001048 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800104c:	4b0e      	ldr	r3, [pc, #56]	; (8001088 <HAL_Init+0x40>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4a0d      	ldr	r2, [pc, #52]	; (8001088 <HAL_Init+0x40>)
 8001052:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001056:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001058:	4b0b      	ldr	r3, [pc, #44]	; (8001088 <HAL_Init+0x40>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4a0a      	ldr	r2, [pc, #40]	; (8001088 <HAL_Init+0x40>)
 800105e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001062:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001064:	4b08      	ldr	r3, [pc, #32]	; (8001088 <HAL_Init+0x40>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4a07      	ldr	r2, [pc, #28]	; (8001088 <HAL_Init+0x40>)
 800106a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800106e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001070:	2003      	movs	r0, #3
 8001072:	f000 f8d8 	bl	8001226 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001076:	200f      	movs	r0, #15
 8001078:	f7ff ff04 	bl	8000e84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800107c:	f7ff fe04 	bl	8000c88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001080:	2300      	movs	r3, #0
}
 8001082:	4618      	mov	r0, r3
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	40023c00 	.word	0x40023c00

0800108c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001090:	4b06      	ldr	r3, [pc, #24]	; (80010ac <HAL_IncTick+0x20>)
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	461a      	mov	r2, r3
 8001096:	4b06      	ldr	r3, [pc, #24]	; (80010b0 <HAL_IncTick+0x24>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	4413      	add	r3, r2
 800109c:	4a04      	ldr	r2, [pc, #16]	; (80010b0 <HAL_IncTick+0x24>)
 800109e:	6013      	str	r3, [r2, #0]
}
 80010a0:	bf00      	nop
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop
 80010ac:	20000008 	.word	0x20000008
 80010b0:	200003e4 	.word	0x200003e4

080010b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
  return uwTick;
 80010b8:	4b03      	ldr	r3, [pc, #12]	; (80010c8 <HAL_GetTick+0x14>)
 80010ba:	681b      	ldr	r3, [r3, #0]
}
 80010bc:	4618      	mov	r0, r3
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop
 80010c8:	200003e4 	.word	0x200003e4

080010cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b085      	sub	sp, #20
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	f003 0307 	and.w	r3, r3, #7
 80010da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010dc:	4b0c      	ldr	r3, [pc, #48]	; (8001110 <__NVIC_SetPriorityGrouping+0x44>)
 80010de:	68db      	ldr	r3, [r3, #12]
 80010e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010e2:	68ba      	ldr	r2, [r7, #8]
 80010e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010e8:	4013      	ands	r3, r2
 80010ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010f0:	68bb      	ldr	r3, [r7, #8]
 80010f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010fe:	4a04      	ldr	r2, [pc, #16]	; (8001110 <__NVIC_SetPriorityGrouping+0x44>)
 8001100:	68bb      	ldr	r3, [r7, #8]
 8001102:	60d3      	str	r3, [r2, #12]
}
 8001104:	bf00      	nop
 8001106:	3714      	adds	r7, #20
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr
 8001110:	e000ed00 	.word	0xe000ed00

08001114 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001118:	4b04      	ldr	r3, [pc, #16]	; (800112c <__NVIC_GetPriorityGrouping+0x18>)
 800111a:	68db      	ldr	r3, [r3, #12]
 800111c:	0a1b      	lsrs	r3, r3, #8
 800111e:	f003 0307 	and.w	r3, r3, #7
}
 8001122:	4618      	mov	r0, r3
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr
 800112c:	e000ed00 	.word	0xe000ed00

08001130 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001130:	b480      	push	{r7}
 8001132:	b083      	sub	sp, #12
 8001134:	af00      	add	r7, sp, #0
 8001136:	4603      	mov	r3, r0
 8001138:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800113a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800113e:	2b00      	cmp	r3, #0
 8001140:	db0b      	blt.n	800115a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001142:	79fb      	ldrb	r3, [r7, #7]
 8001144:	f003 021f 	and.w	r2, r3, #31
 8001148:	4907      	ldr	r1, [pc, #28]	; (8001168 <__NVIC_EnableIRQ+0x38>)
 800114a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800114e:	095b      	lsrs	r3, r3, #5
 8001150:	2001      	movs	r0, #1
 8001152:	fa00 f202 	lsl.w	r2, r0, r2
 8001156:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800115a:	bf00      	nop
 800115c:	370c      	adds	r7, #12
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr
 8001166:	bf00      	nop
 8001168:	e000e100 	.word	0xe000e100

0800116c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800116c:	b480      	push	{r7}
 800116e:	b083      	sub	sp, #12
 8001170:	af00      	add	r7, sp, #0
 8001172:	4603      	mov	r3, r0
 8001174:	6039      	str	r1, [r7, #0]
 8001176:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001178:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800117c:	2b00      	cmp	r3, #0
 800117e:	db0a      	blt.n	8001196 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	b2da      	uxtb	r2, r3
 8001184:	490c      	ldr	r1, [pc, #48]	; (80011b8 <__NVIC_SetPriority+0x4c>)
 8001186:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800118a:	0112      	lsls	r2, r2, #4
 800118c:	b2d2      	uxtb	r2, r2
 800118e:	440b      	add	r3, r1
 8001190:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001194:	e00a      	b.n	80011ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	b2da      	uxtb	r2, r3
 800119a:	4908      	ldr	r1, [pc, #32]	; (80011bc <__NVIC_SetPriority+0x50>)
 800119c:	79fb      	ldrb	r3, [r7, #7]
 800119e:	f003 030f 	and.w	r3, r3, #15
 80011a2:	3b04      	subs	r3, #4
 80011a4:	0112      	lsls	r2, r2, #4
 80011a6:	b2d2      	uxtb	r2, r2
 80011a8:	440b      	add	r3, r1
 80011aa:	761a      	strb	r2, [r3, #24]
}
 80011ac:	bf00      	nop
 80011ae:	370c      	adds	r7, #12
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr
 80011b8:	e000e100 	.word	0xe000e100
 80011bc:	e000ed00 	.word	0xe000ed00

080011c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b089      	sub	sp, #36	; 0x24
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	60f8      	str	r0, [r7, #12]
 80011c8:	60b9      	str	r1, [r7, #8]
 80011ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	f003 0307 	and.w	r3, r3, #7
 80011d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011d4:	69fb      	ldr	r3, [r7, #28]
 80011d6:	f1c3 0307 	rsb	r3, r3, #7
 80011da:	2b04      	cmp	r3, #4
 80011dc:	bf28      	it	cs
 80011de:	2304      	movcs	r3, #4
 80011e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011e2:	69fb      	ldr	r3, [r7, #28]
 80011e4:	3304      	adds	r3, #4
 80011e6:	2b06      	cmp	r3, #6
 80011e8:	d902      	bls.n	80011f0 <NVIC_EncodePriority+0x30>
 80011ea:	69fb      	ldr	r3, [r7, #28]
 80011ec:	3b03      	subs	r3, #3
 80011ee:	e000      	b.n	80011f2 <NVIC_EncodePriority+0x32>
 80011f0:	2300      	movs	r3, #0
 80011f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011f4:	f04f 32ff 	mov.w	r2, #4294967295
 80011f8:	69bb      	ldr	r3, [r7, #24]
 80011fa:	fa02 f303 	lsl.w	r3, r2, r3
 80011fe:	43da      	mvns	r2, r3
 8001200:	68bb      	ldr	r3, [r7, #8]
 8001202:	401a      	ands	r2, r3
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001208:	f04f 31ff 	mov.w	r1, #4294967295
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	fa01 f303 	lsl.w	r3, r1, r3
 8001212:	43d9      	mvns	r1, r3
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001218:	4313      	orrs	r3, r2
         );
}
 800121a:	4618      	mov	r0, r3
 800121c:	3724      	adds	r7, #36	; 0x24
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr

08001226 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001226:	b580      	push	{r7, lr}
 8001228:	b082      	sub	sp, #8
 800122a:	af00      	add	r7, sp, #0
 800122c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800122e:	6878      	ldr	r0, [r7, #4]
 8001230:	f7ff ff4c 	bl	80010cc <__NVIC_SetPriorityGrouping>
}
 8001234:	bf00      	nop
 8001236:	3708      	adds	r7, #8
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}

0800123c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800123c:	b580      	push	{r7, lr}
 800123e:	b086      	sub	sp, #24
 8001240:	af00      	add	r7, sp, #0
 8001242:	4603      	mov	r3, r0
 8001244:	60b9      	str	r1, [r7, #8]
 8001246:	607a      	str	r2, [r7, #4]
 8001248:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800124a:	2300      	movs	r3, #0
 800124c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800124e:	f7ff ff61 	bl	8001114 <__NVIC_GetPriorityGrouping>
 8001252:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001254:	687a      	ldr	r2, [r7, #4]
 8001256:	68b9      	ldr	r1, [r7, #8]
 8001258:	6978      	ldr	r0, [r7, #20]
 800125a:	f7ff ffb1 	bl	80011c0 <NVIC_EncodePriority>
 800125e:	4602      	mov	r2, r0
 8001260:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001264:	4611      	mov	r1, r2
 8001266:	4618      	mov	r0, r3
 8001268:	f7ff ff80 	bl	800116c <__NVIC_SetPriority>
}
 800126c:	bf00      	nop
 800126e:	3718      	adds	r7, #24
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}

08001274 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
 800127a:	4603      	mov	r3, r0
 800127c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800127e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001282:	4618      	mov	r0, r3
 8001284:	f7ff ff54 	bl	8001130 <__NVIC_EnableIRQ>
}
 8001288:	bf00      	nop
 800128a:	3708      	adds	r7, #8
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}

08001290 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001290:	b480      	push	{r7}
 8001292:	b089      	sub	sp, #36	; 0x24
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
 8001298:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800129a:	2300      	movs	r3, #0
 800129c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800129e:	2300      	movs	r3, #0
 80012a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80012a2:	2300      	movs	r3, #0
 80012a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012a6:	2300      	movs	r3, #0
 80012a8:	61fb      	str	r3, [r7, #28]
 80012aa:	e159      	b.n	8001560 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80012ac:	2201      	movs	r2, #1
 80012ae:	69fb      	ldr	r3, [r7, #28]
 80012b0:	fa02 f303 	lsl.w	r3, r2, r3
 80012b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	697a      	ldr	r2, [r7, #20]
 80012bc:	4013      	ands	r3, r2
 80012be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80012c0:	693a      	ldr	r2, [r7, #16]
 80012c2:	697b      	ldr	r3, [r7, #20]
 80012c4:	429a      	cmp	r2, r3
 80012c6:	f040 8148 	bne.w	800155a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	f003 0303 	and.w	r3, r3, #3
 80012d2:	2b01      	cmp	r3, #1
 80012d4:	d005      	beq.n	80012e2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012de:	2b02      	cmp	r3, #2
 80012e0:	d130      	bne.n	8001344 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	689b      	ldr	r3, [r3, #8]
 80012e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80012e8:	69fb      	ldr	r3, [r7, #28]
 80012ea:	005b      	lsls	r3, r3, #1
 80012ec:	2203      	movs	r2, #3
 80012ee:	fa02 f303 	lsl.w	r3, r2, r3
 80012f2:	43db      	mvns	r3, r3
 80012f4:	69ba      	ldr	r2, [r7, #24]
 80012f6:	4013      	ands	r3, r2
 80012f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	68da      	ldr	r2, [r3, #12]
 80012fe:	69fb      	ldr	r3, [r7, #28]
 8001300:	005b      	lsls	r3, r3, #1
 8001302:	fa02 f303 	lsl.w	r3, r2, r3
 8001306:	69ba      	ldr	r2, [r7, #24]
 8001308:	4313      	orrs	r3, r2
 800130a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	69ba      	ldr	r2, [r7, #24]
 8001310:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001318:	2201      	movs	r2, #1
 800131a:	69fb      	ldr	r3, [r7, #28]
 800131c:	fa02 f303 	lsl.w	r3, r2, r3
 8001320:	43db      	mvns	r3, r3
 8001322:	69ba      	ldr	r2, [r7, #24]
 8001324:	4013      	ands	r3, r2
 8001326:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	091b      	lsrs	r3, r3, #4
 800132e:	f003 0201 	and.w	r2, r3, #1
 8001332:	69fb      	ldr	r3, [r7, #28]
 8001334:	fa02 f303 	lsl.w	r3, r2, r3
 8001338:	69ba      	ldr	r2, [r7, #24]
 800133a:	4313      	orrs	r3, r2
 800133c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	69ba      	ldr	r2, [r7, #24]
 8001342:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	f003 0303 	and.w	r3, r3, #3
 800134c:	2b03      	cmp	r3, #3
 800134e:	d017      	beq.n	8001380 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	68db      	ldr	r3, [r3, #12]
 8001354:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001356:	69fb      	ldr	r3, [r7, #28]
 8001358:	005b      	lsls	r3, r3, #1
 800135a:	2203      	movs	r2, #3
 800135c:	fa02 f303 	lsl.w	r3, r2, r3
 8001360:	43db      	mvns	r3, r3
 8001362:	69ba      	ldr	r2, [r7, #24]
 8001364:	4013      	ands	r3, r2
 8001366:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	689a      	ldr	r2, [r3, #8]
 800136c:	69fb      	ldr	r3, [r7, #28]
 800136e:	005b      	lsls	r3, r3, #1
 8001370:	fa02 f303 	lsl.w	r3, r2, r3
 8001374:	69ba      	ldr	r2, [r7, #24]
 8001376:	4313      	orrs	r3, r2
 8001378:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	69ba      	ldr	r2, [r7, #24]
 800137e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	f003 0303 	and.w	r3, r3, #3
 8001388:	2b02      	cmp	r3, #2
 800138a:	d123      	bne.n	80013d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800138c:	69fb      	ldr	r3, [r7, #28]
 800138e:	08da      	lsrs	r2, r3, #3
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	3208      	adds	r2, #8
 8001394:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001398:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800139a:	69fb      	ldr	r3, [r7, #28]
 800139c:	f003 0307 	and.w	r3, r3, #7
 80013a0:	009b      	lsls	r3, r3, #2
 80013a2:	220f      	movs	r2, #15
 80013a4:	fa02 f303 	lsl.w	r3, r2, r3
 80013a8:	43db      	mvns	r3, r3
 80013aa:	69ba      	ldr	r2, [r7, #24]
 80013ac:	4013      	ands	r3, r2
 80013ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	691a      	ldr	r2, [r3, #16]
 80013b4:	69fb      	ldr	r3, [r7, #28]
 80013b6:	f003 0307 	and.w	r3, r3, #7
 80013ba:	009b      	lsls	r3, r3, #2
 80013bc:	fa02 f303 	lsl.w	r3, r2, r3
 80013c0:	69ba      	ldr	r2, [r7, #24]
 80013c2:	4313      	orrs	r3, r2
 80013c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80013c6:	69fb      	ldr	r3, [r7, #28]
 80013c8:	08da      	lsrs	r2, r3, #3
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	3208      	adds	r2, #8
 80013ce:	69b9      	ldr	r1, [r7, #24]
 80013d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80013da:	69fb      	ldr	r3, [r7, #28]
 80013dc:	005b      	lsls	r3, r3, #1
 80013de:	2203      	movs	r2, #3
 80013e0:	fa02 f303 	lsl.w	r3, r2, r3
 80013e4:	43db      	mvns	r3, r3
 80013e6:	69ba      	ldr	r2, [r7, #24]
 80013e8:	4013      	ands	r3, r2
 80013ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	f003 0203 	and.w	r2, r3, #3
 80013f4:	69fb      	ldr	r3, [r7, #28]
 80013f6:	005b      	lsls	r3, r3, #1
 80013f8:	fa02 f303 	lsl.w	r3, r2, r3
 80013fc:	69ba      	ldr	r2, [r7, #24]
 80013fe:	4313      	orrs	r3, r2
 8001400:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	69ba      	ldr	r2, [r7, #24]
 8001406:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001410:	2b00      	cmp	r3, #0
 8001412:	f000 80a2 	beq.w	800155a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001416:	2300      	movs	r3, #0
 8001418:	60fb      	str	r3, [r7, #12]
 800141a:	4b57      	ldr	r3, [pc, #348]	; (8001578 <HAL_GPIO_Init+0x2e8>)
 800141c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800141e:	4a56      	ldr	r2, [pc, #344]	; (8001578 <HAL_GPIO_Init+0x2e8>)
 8001420:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001424:	6453      	str	r3, [r2, #68]	; 0x44
 8001426:	4b54      	ldr	r3, [pc, #336]	; (8001578 <HAL_GPIO_Init+0x2e8>)
 8001428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800142a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800142e:	60fb      	str	r3, [r7, #12]
 8001430:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001432:	4a52      	ldr	r2, [pc, #328]	; (800157c <HAL_GPIO_Init+0x2ec>)
 8001434:	69fb      	ldr	r3, [r7, #28]
 8001436:	089b      	lsrs	r3, r3, #2
 8001438:	3302      	adds	r3, #2
 800143a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800143e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001440:	69fb      	ldr	r3, [r7, #28]
 8001442:	f003 0303 	and.w	r3, r3, #3
 8001446:	009b      	lsls	r3, r3, #2
 8001448:	220f      	movs	r2, #15
 800144a:	fa02 f303 	lsl.w	r3, r2, r3
 800144e:	43db      	mvns	r3, r3
 8001450:	69ba      	ldr	r2, [r7, #24]
 8001452:	4013      	ands	r3, r2
 8001454:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	4a49      	ldr	r2, [pc, #292]	; (8001580 <HAL_GPIO_Init+0x2f0>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d019      	beq.n	8001492 <HAL_GPIO_Init+0x202>
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	4a48      	ldr	r2, [pc, #288]	; (8001584 <HAL_GPIO_Init+0x2f4>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d013      	beq.n	800148e <HAL_GPIO_Init+0x1fe>
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	4a47      	ldr	r2, [pc, #284]	; (8001588 <HAL_GPIO_Init+0x2f8>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d00d      	beq.n	800148a <HAL_GPIO_Init+0x1fa>
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	4a46      	ldr	r2, [pc, #280]	; (800158c <HAL_GPIO_Init+0x2fc>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d007      	beq.n	8001486 <HAL_GPIO_Init+0x1f6>
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	4a45      	ldr	r2, [pc, #276]	; (8001590 <HAL_GPIO_Init+0x300>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d101      	bne.n	8001482 <HAL_GPIO_Init+0x1f2>
 800147e:	2304      	movs	r3, #4
 8001480:	e008      	b.n	8001494 <HAL_GPIO_Init+0x204>
 8001482:	2307      	movs	r3, #7
 8001484:	e006      	b.n	8001494 <HAL_GPIO_Init+0x204>
 8001486:	2303      	movs	r3, #3
 8001488:	e004      	b.n	8001494 <HAL_GPIO_Init+0x204>
 800148a:	2302      	movs	r3, #2
 800148c:	e002      	b.n	8001494 <HAL_GPIO_Init+0x204>
 800148e:	2301      	movs	r3, #1
 8001490:	e000      	b.n	8001494 <HAL_GPIO_Init+0x204>
 8001492:	2300      	movs	r3, #0
 8001494:	69fa      	ldr	r2, [r7, #28]
 8001496:	f002 0203 	and.w	r2, r2, #3
 800149a:	0092      	lsls	r2, r2, #2
 800149c:	4093      	lsls	r3, r2
 800149e:	69ba      	ldr	r2, [r7, #24]
 80014a0:	4313      	orrs	r3, r2
 80014a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014a4:	4935      	ldr	r1, [pc, #212]	; (800157c <HAL_GPIO_Init+0x2ec>)
 80014a6:	69fb      	ldr	r3, [r7, #28]
 80014a8:	089b      	lsrs	r3, r3, #2
 80014aa:	3302      	adds	r3, #2
 80014ac:	69ba      	ldr	r2, [r7, #24]
 80014ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014b2:	4b38      	ldr	r3, [pc, #224]	; (8001594 <HAL_GPIO_Init+0x304>)
 80014b4:	689b      	ldr	r3, [r3, #8]
 80014b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014b8:	693b      	ldr	r3, [r7, #16]
 80014ba:	43db      	mvns	r3, r3
 80014bc:	69ba      	ldr	r2, [r7, #24]
 80014be:	4013      	ands	r3, r2
 80014c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d003      	beq.n	80014d6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80014ce:	69ba      	ldr	r2, [r7, #24]
 80014d0:	693b      	ldr	r3, [r7, #16]
 80014d2:	4313      	orrs	r3, r2
 80014d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80014d6:	4a2f      	ldr	r2, [pc, #188]	; (8001594 <HAL_GPIO_Init+0x304>)
 80014d8:	69bb      	ldr	r3, [r7, #24]
 80014da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80014dc:	4b2d      	ldr	r3, [pc, #180]	; (8001594 <HAL_GPIO_Init+0x304>)
 80014de:	68db      	ldr	r3, [r3, #12]
 80014e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014e2:	693b      	ldr	r3, [r7, #16]
 80014e4:	43db      	mvns	r3, r3
 80014e6:	69ba      	ldr	r2, [r7, #24]
 80014e8:	4013      	ands	r3, r2
 80014ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d003      	beq.n	8001500 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80014f8:	69ba      	ldr	r2, [r7, #24]
 80014fa:	693b      	ldr	r3, [r7, #16]
 80014fc:	4313      	orrs	r3, r2
 80014fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001500:	4a24      	ldr	r2, [pc, #144]	; (8001594 <HAL_GPIO_Init+0x304>)
 8001502:	69bb      	ldr	r3, [r7, #24]
 8001504:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001506:	4b23      	ldr	r3, [pc, #140]	; (8001594 <HAL_GPIO_Init+0x304>)
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800150c:	693b      	ldr	r3, [r7, #16]
 800150e:	43db      	mvns	r3, r3
 8001510:	69ba      	ldr	r2, [r7, #24]
 8001512:	4013      	ands	r3, r2
 8001514:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800151e:	2b00      	cmp	r3, #0
 8001520:	d003      	beq.n	800152a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001522:	69ba      	ldr	r2, [r7, #24]
 8001524:	693b      	ldr	r3, [r7, #16]
 8001526:	4313      	orrs	r3, r2
 8001528:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800152a:	4a1a      	ldr	r2, [pc, #104]	; (8001594 <HAL_GPIO_Init+0x304>)
 800152c:	69bb      	ldr	r3, [r7, #24]
 800152e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001530:	4b18      	ldr	r3, [pc, #96]	; (8001594 <HAL_GPIO_Init+0x304>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001536:	693b      	ldr	r3, [r7, #16]
 8001538:	43db      	mvns	r3, r3
 800153a:	69ba      	ldr	r2, [r7, #24]
 800153c:	4013      	ands	r3, r2
 800153e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001548:	2b00      	cmp	r3, #0
 800154a:	d003      	beq.n	8001554 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800154c:	69ba      	ldr	r2, [r7, #24]
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	4313      	orrs	r3, r2
 8001552:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001554:	4a0f      	ldr	r2, [pc, #60]	; (8001594 <HAL_GPIO_Init+0x304>)
 8001556:	69bb      	ldr	r3, [r7, #24]
 8001558:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800155a:	69fb      	ldr	r3, [r7, #28]
 800155c:	3301      	adds	r3, #1
 800155e:	61fb      	str	r3, [r7, #28]
 8001560:	69fb      	ldr	r3, [r7, #28]
 8001562:	2b0f      	cmp	r3, #15
 8001564:	f67f aea2 	bls.w	80012ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001568:	bf00      	nop
 800156a:	bf00      	nop
 800156c:	3724      	adds	r7, #36	; 0x24
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr
 8001576:	bf00      	nop
 8001578:	40023800 	.word	0x40023800
 800157c:	40013800 	.word	0x40013800
 8001580:	40020000 	.word	0x40020000
 8001584:	40020400 	.word	0x40020400
 8001588:	40020800 	.word	0x40020800
 800158c:	40020c00 	.word	0x40020c00
 8001590:	40021000 	.word	0x40021000
 8001594:	40013c00 	.word	0x40013c00

08001598 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001598:	b480      	push	{r7}
 800159a:	b083      	sub	sp, #12
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
 80015a0:	460b      	mov	r3, r1
 80015a2:	807b      	strh	r3, [r7, #2]
 80015a4:	4613      	mov	r3, r2
 80015a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015a8:	787b      	ldrb	r3, [r7, #1]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d003      	beq.n	80015b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015ae:	887a      	ldrh	r2, [r7, #2]
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80015b4:	e003      	b.n	80015be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80015b6:	887b      	ldrh	r3, [r7, #2]
 80015b8:	041a      	lsls	r2, r3, #16
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	619a      	str	r2, [r3, #24]
}
 80015be:	bf00      	nop
 80015c0:	370c      	adds	r7, #12
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr
	...

080015cc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b086      	sub	sp, #24
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d101      	bne.n	80015de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015da:	2301      	movs	r3, #1
 80015dc:	e267      	b.n	8001aae <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f003 0301 	and.w	r3, r3, #1
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d075      	beq.n	80016d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80015ea:	4b88      	ldr	r3, [pc, #544]	; (800180c <HAL_RCC_OscConfig+0x240>)
 80015ec:	689b      	ldr	r3, [r3, #8]
 80015ee:	f003 030c 	and.w	r3, r3, #12
 80015f2:	2b04      	cmp	r3, #4
 80015f4:	d00c      	beq.n	8001610 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015f6:	4b85      	ldr	r3, [pc, #532]	; (800180c <HAL_RCC_OscConfig+0x240>)
 80015f8:	689b      	ldr	r3, [r3, #8]
 80015fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80015fe:	2b08      	cmp	r3, #8
 8001600:	d112      	bne.n	8001628 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001602:	4b82      	ldr	r3, [pc, #520]	; (800180c <HAL_RCC_OscConfig+0x240>)
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800160a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800160e:	d10b      	bne.n	8001628 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001610:	4b7e      	ldr	r3, [pc, #504]	; (800180c <HAL_RCC_OscConfig+0x240>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001618:	2b00      	cmp	r3, #0
 800161a:	d05b      	beq.n	80016d4 <HAL_RCC_OscConfig+0x108>
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d157      	bne.n	80016d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001624:	2301      	movs	r3, #1
 8001626:	e242      	b.n	8001aae <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001630:	d106      	bne.n	8001640 <HAL_RCC_OscConfig+0x74>
 8001632:	4b76      	ldr	r3, [pc, #472]	; (800180c <HAL_RCC_OscConfig+0x240>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4a75      	ldr	r2, [pc, #468]	; (800180c <HAL_RCC_OscConfig+0x240>)
 8001638:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800163c:	6013      	str	r3, [r2, #0]
 800163e:	e01d      	b.n	800167c <HAL_RCC_OscConfig+0xb0>
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001648:	d10c      	bne.n	8001664 <HAL_RCC_OscConfig+0x98>
 800164a:	4b70      	ldr	r3, [pc, #448]	; (800180c <HAL_RCC_OscConfig+0x240>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4a6f      	ldr	r2, [pc, #444]	; (800180c <HAL_RCC_OscConfig+0x240>)
 8001650:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001654:	6013      	str	r3, [r2, #0]
 8001656:	4b6d      	ldr	r3, [pc, #436]	; (800180c <HAL_RCC_OscConfig+0x240>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4a6c      	ldr	r2, [pc, #432]	; (800180c <HAL_RCC_OscConfig+0x240>)
 800165c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001660:	6013      	str	r3, [r2, #0]
 8001662:	e00b      	b.n	800167c <HAL_RCC_OscConfig+0xb0>
 8001664:	4b69      	ldr	r3, [pc, #420]	; (800180c <HAL_RCC_OscConfig+0x240>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a68      	ldr	r2, [pc, #416]	; (800180c <HAL_RCC_OscConfig+0x240>)
 800166a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800166e:	6013      	str	r3, [r2, #0]
 8001670:	4b66      	ldr	r3, [pc, #408]	; (800180c <HAL_RCC_OscConfig+0x240>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a65      	ldr	r2, [pc, #404]	; (800180c <HAL_RCC_OscConfig+0x240>)
 8001676:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800167a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d013      	beq.n	80016ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001684:	f7ff fd16 	bl	80010b4 <HAL_GetTick>
 8001688:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800168a:	e008      	b.n	800169e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800168c:	f7ff fd12 	bl	80010b4 <HAL_GetTick>
 8001690:	4602      	mov	r2, r0
 8001692:	693b      	ldr	r3, [r7, #16]
 8001694:	1ad3      	subs	r3, r2, r3
 8001696:	2b64      	cmp	r3, #100	; 0x64
 8001698:	d901      	bls.n	800169e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800169a:	2303      	movs	r3, #3
 800169c:	e207      	b.n	8001aae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800169e:	4b5b      	ldr	r3, [pc, #364]	; (800180c <HAL_RCC_OscConfig+0x240>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d0f0      	beq.n	800168c <HAL_RCC_OscConfig+0xc0>
 80016aa:	e014      	b.n	80016d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016ac:	f7ff fd02 	bl	80010b4 <HAL_GetTick>
 80016b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016b2:	e008      	b.n	80016c6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016b4:	f7ff fcfe 	bl	80010b4 <HAL_GetTick>
 80016b8:	4602      	mov	r2, r0
 80016ba:	693b      	ldr	r3, [r7, #16]
 80016bc:	1ad3      	subs	r3, r2, r3
 80016be:	2b64      	cmp	r3, #100	; 0x64
 80016c0:	d901      	bls.n	80016c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80016c2:	2303      	movs	r3, #3
 80016c4:	e1f3      	b.n	8001aae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016c6:	4b51      	ldr	r3, [pc, #324]	; (800180c <HAL_RCC_OscConfig+0x240>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d1f0      	bne.n	80016b4 <HAL_RCC_OscConfig+0xe8>
 80016d2:	e000      	b.n	80016d6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f003 0302 	and.w	r3, r3, #2
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d063      	beq.n	80017aa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80016e2:	4b4a      	ldr	r3, [pc, #296]	; (800180c <HAL_RCC_OscConfig+0x240>)
 80016e4:	689b      	ldr	r3, [r3, #8]
 80016e6:	f003 030c 	and.w	r3, r3, #12
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d00b      	beq.n	8001706 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016ee:	4b47      	ldr	r3, [pc, #284]	; (800180c <HAL_RCC_OscConfig+0x240>)
 80016f0:	689b      	ldr	r3, [r3, #8]
 80016f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80016f6:	2b08      	cmp	r3, #8
 80016f8:	d11c      	bne.n	8001734 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016fa:	4b44      	ldr	r3, [pc, #272]	; (800180c <HAL_RCC_OscConfig+0x240>)
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001702:	2b00      	cmp	r3, #0
 8001704:	d116      	bne.n	8001734 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001706:	4b41      	ldr	r3, [pc, #260]	; (800180c <HAL_RCC_OscConfig+0x240>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f003 0302 	and.w	r3, r3, #2
 800170e:	2b00      	cmp	r3, #0
 8001710:	d005      	beq.n	800171e <HAL_RCC_OscConfig+0x152>
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	68db      	ldr	r3, [r3, #12]
 8001716:	2b01      	cmp	r3, #1
 8001718:	d001      	beq.n	800171e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800171a:	2301      	movs	r3, #1
 800171c:	e1c7      	b.n	8001aae <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800171e:	4b3b      	ldr	r3, [pc, #236]	; (800180c <HAL_RCC_OscConfig+0x240>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	691b      	ldr	r3, [r3, #16]
 800172a:	00db      	lsls	r3, r3, #3
 800172c:	4937      	ldr	r1, [pc, #220]	; (800180c <HAL_RCC_OscConfig+0x240>)
 800172e:	4313      	orrs	r3, r2
 8001730:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001732:	e03a      	b.n	80017aa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	68db      	ldr	r3, [r3, #12]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d020      	beq.n	800177e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800173c:	4b34      	ldr	r3, [pc, #208]	; (8001810 <HAL_RCC_OscConfig+0x244>)
 800173e:	2201      	movs	r2, #1
 8001740:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001742:	f7ff fcb7 	bl	80010b4 <HAL_GetTick>
 8001746:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001748:	e008      	b.n	800175c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800174a:	f7ff fcb3 	bl	80010b4 <HAL_GetTick>
 800174e:	4602      	mov	r2, r0
 8001750:	693b      	ldr	r3, [r7, #16]
 8001752:	1ad3      	subs	r3, r2, r3
 8001754:	2b02      	cmp	r3, #2
 8001756:	d901      	bls.n	800175c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001758:	2303      	movs	r3, #3
 800175a:	e1a8      	b.n	8001aae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800175c:	4b2b      	ldr	r3, [pc, #172]	; (800180c <HAL_RCC_OscConfig+0x240>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f003 0302 	and.w	r3, r3, #2
 8001764:	2b00      	cmp	r3, #0
 8001766:	d0f0      	beq.n	800174a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001768:	4b28      	ldr	r3, [pc, #160]	; (800180c <HAL_RCC_OscConfig+0x240>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	691b      	ldr	r3, [r3, #16]
 8001774:	00db      	lsls	r3, r3, #3
 8001776:	4925      	ldr	r1, [pc, #148]	; (800180c <HAL_RCC_OscConfig+0x240>)
 8001778:	4313      	orrs	r3, r2
 800177a:	600b      	str	r3, [r1, #0]
 800177c:	e015      	b.n	80017aa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800177e:	4b24      	ldr	r3, [pc, #144]	; (8001810 <HAL_RCC_OscConfig+0x244>)
 8001780:	2200      	movs	r2, #0
 8001782:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001784:	f7ff fc96 	bl	80010b4 <HAL_GetTick>
 8001788:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800178a:	e008      	b.n	800179e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800178c:	f7ff fc92 	bl	80010b4 <HAL_GetTick>
 8001790:	4602      	mov	r2, r0
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	1ad3      	subs	r3, r2, r3
 8001796:	2b02      	cmp	r3, #2
 8001798:	d901      	bls.n	800179e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800179a:	2303      	movs	r3, #3
 800179c:	e187      	b.n	8001aae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800179e:	4b1b      	ldr	r3, [pc, #108]	; (800180c <HAL_RCC_OscConfig+0x240>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f003 0302 	and.w	r3, r3, #2
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d1f0      	bne.n	800178c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f003 0308 	and.w	r3, r3, #8
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d036      	beq.n	8001824 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	695b      	ldr	r3, [r3, #20]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d016      	beq.n	80017ec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017be:	4b15      	ldr	r3, [pc, #84]	; (8001814 <HAL_RCC_OscConfig+0x248>)
 80017c0:	2201      	movs	r2, #1
 80017c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017c4:	f7ff fc76 	bl	80010b4 <HAL_GetTick>
 80017c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017ca:	e008      	b.n	80017de <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017cc:	f7ff fc72 	bl	80010b4 <HAL_GetTick>
 80017d0:	4602      	mov	r2, r0
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	1ad3      	subs	r3, r2, r3
 80017d6:	2b02      	cmp	r3, #2
 80017d8:	d901      	bls.n	80017de <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80017da:	2303      	movs	r3, #3
 80017dc:	e167      	b.n	8001aae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017de:	4b0b      	ldr	r3, [pc, #44]	; (800180c <HAL_RCC_OscConfig+0x240>)
 80017e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017e2:	f003 0302 	and.w	r3, r3, #2
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d0f0      	beq.n	80017cc <HAL_RCC_OscConfig+0x200>
 80017ea:	e01b      	b.n	8001824 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017ec:	4b09      	ldr	r3, [pc, #36]	; (8001814 <HAL_RCC_OscConfig+0x248>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017f2:	f7ff fc5f 	bl	80010b4 <HAL_GetTick>
 80017f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017f8:	e00e      	b.n	8001818 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017fa:	f7ff fc5b 	bl	80010b4 <HAL_GetTick>
 80017fe:	4602      	mov	r2, r0
 8001800:	693b      	ldr	r3, [r7, #16]
 8001802:	1ad3      	subs	r3, r2, r3
 8001804:	2b02      	cmp	r3, #2
 8001806:	d907      	bls.n	8001818 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001808:	2303      	movs	r3, #3
 800180a:	e150      	b.n	8001aae <HAL_RCC_OscConfig+0x4e2>
 800180c:	40023800 	.word	0x40023800
 8001810:	42470000 	.word	0x42470000
 8001814:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001818:	4b88      	ldr	r3, [pc, #544]	; (8001a3c <HAL_RCC_OscConfig+0x470>)
 800181a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800181c:	f003 0302 	and.w	r3, r3, #2
 8001820:	2b00      	cmp	r3, #0
 8001822:	d1ea      	bne.n	80017fa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f003 0304 	and.w	r3, r3, #4
 800182c:	2b00      	cmp	r3, #0
 800182e:	f000 8097 	beq.w	8001960 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001832:	2300      	movs	r3, #0
 8001834:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001836:	4b81      	ldr	r3, [pc, #516]	; (8001a3c <HAL_RCC_OscConfig+0x470>)
 8001838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800183a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800183e:	2b00      	cmp	r3, #0
 8001840:	d10f      	bne.n	8001862 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001842:	2300      	movs	r3, #0
 8001844:	60bb      	str	r3, [r7, #8]
 8001846:	4b7d      	ldr	r3, [pc, #500]	; (8001a3c <HAL_RCC_OscConfig+0x470>)
 8001848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184a:	4a7c      	ldr	r2, [pc, #496]	; (8001a3c <HAL_RCC_OscConfig+0x470>)
 800184c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001850:	6413      	str	r3, [r2, #64]	; 0x40
 8001852:	4b7a      	ldr	r3, [pc, #488]	; (8001a3c <HAL_RCC_OscConfig+0x470>)
 8001854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001856:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800185a:	60bb      	str	r3, [r7, #8]
 800185c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800185e:	2301      	movs	r3, #1
 8001860:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001862:	4b77      	ldr	r3, [pc, #476]	; (8001a40 <HAL_RCC_OscConfig+0x474>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800186a:	2b00      	cmp	r3, #0
 800186c:	d118      	bne.n	80018a0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800186e:	4b74      	ldr	r3, [pc, #464]	; (8001a40 <HAL_RCC_OscConfig+0x474>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a73      	ldr	r2, [pc, #460]	; (8001a40 <HAL_RCC_OscConfig+0x474>)
 8001874:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001878:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800187a:	f7ff fc1b 	bl	80010b4 <HAL_GetTick>
 800187e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001880:	e008      	b.n	8001894 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001882:	f7ff fc17 	bl	80010b4 <HAL_GetTick>
 8001886:	4602      	mov	r2, r0
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	1ad3      	subs	r3, r2, r3
 800188c:	2b02      	cmp	r3, #2
 800188e:	d901      	bls.n	8001894 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001890:	2303      	movs	r3, #3
 8001892:	e10c      	b.n	8001aae <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001894:	4b6a      	ldr	r3, [pc, #424]	; (8001a40 <HAL_RCC_OscConfig+0x474>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800189c:	2b00      	cmp	r3, #0
 800189e:	d0f0      	beq.n	8001882 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	689b      	ldr	r3, [r3, #8]
 80018a4:	2b01      	cmp	r3, #1
 80018a6:	d106      	bne.n	80018b6 <HAL_RCC_OscConfig+0x2ea>
 80018a8:	4b64      	ldr	r3, [pc, #400]	; (8001a3c <HAL_RCC_OscConfig+0x470>)
 80018aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018ac:	4a63      	ldr	r2, [pc, #396]	; (8001a3c <HAL_RCC_OscConfig+0x470>)
 80018ae:	f043 0301 	orr.w	r3, r3, #1
 80018b2:	6713      	str	r3, [r2, #112]	; 0x70
 80018b4:	e01c      	b.n	80018f0 <HAL_RCC_OscConfig+0x324>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	689b      	ldr	r3, [r3, #8]
 80018ba:	2b05      	cmp	r3, #5
 80018bc:	d10c      	bne.n	80018d8 <HAL_RCC_OscConfig+0x30c>
 80018be:	4b5f      	ldr	r3, [pc, #380]	; (8001a3c <HAL_RCC_OscConfig+0x470>)
 80018c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018c2:	4a5e      	ldr	r2, [pc, #376]	; (8001a3c <HAL_RCC_OscConfig+0x470>)
 80018c4:	f043 0304 	orr.w	r3, r3, #4
 80018c8:	6713      	str	r3, [r2, #112]	; 0x70
 80018ca:	4b5c      	ldr	r3, [pc, #368]	; (8001a3c <HAL_RCC_OscConfig+0x470>)
 80018cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018ce:	4a5b      	ldr	r2, [pc, #364]	; (8001a3c <HAL_RCC_OscConfig+0x470>)
 80018d0:	f043 0301 	orr.w	r3, r3, #1
 80018d4:	6713      	str	r3, [r2, #112]	; 0x70
 80018d6:	e00b      	b.n	80018f0 <HAL_RCC_OscConfig+0x324>
 80018d8:	4b58      	ldr	r3, [pc, #352]	; (8001a3c <HAL_RCC_OscConfig+0x470>)
 80018da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018dc:	4a57      	ldr	r2, [pc, #348]	; (8001a3c <HAL_RCC_OscConfig+0x470>)
 80018de:	f023 0301 	bic.w	r3, r3, #1
 80018e2:	6713      	str	r3, [r2, #112]	; 0x70
 80018e4:	4b55      	ldr	r3, [pc, #340]	; (8001a3c <HAL_RCC_OscConfig+0x470>)
 80018e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018e8:	4a54      	ldr	r2, [pc, #336]	; (8001a3c <HAL_RCC_OscConfig+0x470>)
 80018ea:	f023 0304 	bic.w	r3, r3, #4
 80018ee:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	689b      	ldr	r3, [r3, #8]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d015      	beq.n	8001924 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018f8:	f7ff fbdc 	bl	80010b4 <HAL_GetTick>
 80018fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018fe:	e00a      	b.n	8001916 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001900:	f7ff fbd8 	bl	80010b4 <HAL_GetTick>
 8001904:	4602      	mov	r2, r0
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	f241 3288 	movw	r2, #5000	; 0x1388
 800190e:	4293      	cmp	r3, r2
 8001910:	d901      	bls.n	8001916 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001912:	2303      	movs	r3, #3
 8001914:	e0cb      	b.n	8001aae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001916:	4b49      	ldr	r3, [pc, #292]	; (8001a3c <HAL_RCC_OscConfig+0x470>)
 8001918:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800191a:	f003 0302 	and.w	r3, r3, #2
 800191e:	2b00      	cmp	r3, #0
 8001920:	d0ee      	beq.n	8001900 <HAL_RCC_OscConfig+0x334>
 8001922:	e014      	b.n	800194e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001924:	f7ff fbc6 	bl	80010b4 <HAL_GetTick>
 8001928:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800192a:	e00a      	b.n	8001942 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800192c:	f7ff fbc2 	bl	80010b4 <HAL_GetTick>
 8001930:	4602      	mov	r2, r0
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	1ad3      	subs	r3, r2, r3
 8001936:	f241 3288 	movw	r2, #5000	; 0x1388
 800193a:	4293      	cmp	r3, r2
 800193c:	d901      	bls.n	8001942 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800193e:	2303      	movs	r3, #3
 8001940:	e0b5      	b.n	8001aae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001942:	4b3e      	ldr	r3, [pc, #248]	; (8001a3c <HAL_RCC_OscConfig+0x470>)
 8001944:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001946:	f003 0302 	and.w	r3, r3, #2
 800194a:	2b00      	cmp	r3, #0
 800194c:	d1ee      	bne.n	800192c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800194e:	7dfb      	ldrb	r3, [r7, #23]
 8001950:	2b01      	cmp	r3, #1
 8001952:	d105      	bne.n	8001960 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001954:	4b39      	ldr	r3, [pc, #228]	; (8001a3c <HAL_RCC_OscConfig+0x470>)
 8001956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001958:	4a38      	ldr	r2, [pc, #224]	; (8001a3c <HAL_RCC_OscConfig+0x470>)
 800195a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800195e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	699b      	ldr	r3, [r3, #24]
 8001964:	2b00      	cmp	r3, #0
 8001966:	f000 80a1 	beq.w	8001aac <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800196a:	4b34      	ldr	r3, [pc, #208]	; (8001a3c <HAL_RCC_OscConfig+0x470>)
 800196c:	689b      	ldr	r3, [r3, #8]
 800196e:	f003 030c 	and.w	r3, r3, #12
 8001972:	2b08      	cmp	r3, #8
 8001974:	d05c      	beq.n	8001a30 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	699b      	ldr	r3, [r3, #24]
 800197a:	2b02      	cmp	r3, #2
 800197c:	d141      	bne.n	8001a02 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800197e:	4b31      	ldr	r3, [pc, #196]	; (8001a44 <HAL_RCC_OscConfig+0x478>)
 8001980:	2200      	movs	r2, #0
 8001982:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001984:	f7ff fb96 	bl	80010b4 <HAL_GetTick>
 8001988:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800198a:	e008      	b.n	800199e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800198c:	f7ff fb92 	bl	80010b4 <HAL_GetTick>
 8001990:	4602      	mov	r2, r0
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	1ad3      	subs	r3, r2, r3
 8001996:	2b02      	cmp	r3, #2
 8001998:	d901      	bls.n	800199e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800199a:	2303      	movs	r3, #3
 800199c:	e087      	b.n	8001aae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800199e:	4b27      	ldr	r3, [pc, #156]	; (8001a3c <HAL_RCC_OscConfig+0x470>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d1f0      	bne.n	800198c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	69da      	ldr	r2, [r3, #28]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6a1b      	ldr	r3, [r3, #32]
 80019b2:	431a      	orrs	r2, r3
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019b8:	019b      	lsls	r3, r3, #6
 80019ba:	431a      	orrs	r2, r3
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019c0:	085b      	lsrs	r3, r3, #1
 80019c2:	3b01      	subs	r3, #1
 80019c4:	041b      	lsls	r3, r3, #16
 80019c6:	431a      	orrs	r2, r3
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019cc:	061b      	lsls	r3, r3, #24
 80019ce:	491b      	ldr	r1, [pc, #108]	; (8001a3c <HAL_RCC_OscConfig+0x470>)
 80019d0:	4313      	orrs	r3, r2
 80019d2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019d4:	4b1b      	ldr	r3, [pc, #108]	; (8001a44 <HAL_RCC_OscConfig+0x478>)
 80019d6:	2201      	movs	r2, #1
 80019d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019da:	f7ff fb6b 	bl	80010b4 <HAL_GetTick>
 80019de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019e0:	e008      	b.n	80019f4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019e2:	f7ff fb67 	bl	80010b4 <HAL_GetTick>
 80019e6:	4602      	mov	r2, r0
 80019e8:	693b      	ldr	r3, [r7, #16]
 80019ea:	1ad3      	subs	r3, r2, r3
 80019ec:	2b02      	cmp	r3, #2
 80019ee:	d901      	bls.n	80019f4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80019f0:	2303      	movs	r3, #3
 80019f2:	e05c      	b.n	8001aae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019f4:	4b11      	ldr	r3, [pc, #68]	; (8001a3c <HAL_RCC_OscConfig+0x470>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d0f0      	beq.n	80019e2 <HAL_RCC_OscConfig+0x416>
 8001a00:	e054      	b.n	8001aac <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a02:	4b10      	ldr	r3, [pc, #64]	; (8001a44 <HAL_RCC_OscConfig+0x478>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a08:	f7ff fb54 	bl	80010b4 <HAL_GetTick>
 8001a0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a0e:	e008      	b.n	8001a22 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a10:	f7ff fb50 	bl	80010b4 <HAL_GetTick>
 8001a14:	4602      	mov	r2, r0
 8001a16:	693b      	ldr	r3, [r7, #16]
 8001a18:	1ad3      	subs	r3, r2, r3
 8001a1a:	2b02      	cmp	r3, #2
 8001a1c:	d901      	bls.n	8001a22 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001a1e:	2303      	movs	r3, #3
 8001a20:	e045      	b.n	8001aae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a22:	4b06      	ldr	r3, [pc, #24]	; (8001a3c <HAL_RCC_OscConfig+0x470>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d1f0      	bne.n	8001a10 <HAL_RCC_OscConfig+0x444>
 8001a2e:	e03d      	b.n	8001aac <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	699b      	ldr	r3, [r3, #24]
 8001a34:	2b01      	cmp	r3, #1
 8001a36:	d107      	bne.n	8001a48 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	e038      	b.n	8001aae <HAL_RCC_OscConfig+0x4e2>
 8001a3c:	40023800 	.word	0x40023800
 8001a40:	40007000 	.word	0x40007000
 8001a44:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001a48:	4b1b      	ldr	r3, [pc, #108]	; (8001ab8 <HAL_RCC_OscConfig+0x4ec>)
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	699b      	ldr	r3, [r3, #24]
 8001a52:	2b01      	cmp	r3, #1
 8001a54:	d028      	beq.n	8001aa8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a60:	429a      	cmp	r2, r3
 8001a62:	d121      	bne.n	8001aa8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a6e:	429a      	cmp	r2, r3
 8001a70:	d11a      	bne.n	8001aa8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a72:	68fa      	ldr	r2, [r7, #12]
 8001a74:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001a78:	4013      	ands	r3, r2
 8001a7a:	687a      	ldr	r2, [r7, #4]
 8001a7c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001a7e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d111      	bne.n	8001aa8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a8e:	085b      	lsrs	r3, r3, #1
 8001a90:	3b01      	subs	r3, #1
 8001a92:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a94:	429a      	cmp	r2, r3
 8001a96:	d107      	bne.n	8001aa8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aa2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001aa4:	429a      	cmp	r2, r3
 8001aa6:	d001      	beq.n	8001aac <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	e000      	b.n	8001aae <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001aac:	2300      	movs	r3, #0
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	3718      	adds	r7, #24
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	40023800 	.word	0x40023800

08001abc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b084      	sub	sp, #16
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
 8001ac4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d101      	bne.n	8001ad0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001acc:	2301      	movs	r3, #1
 8001ace:	e0cc      	b.n	8001c6a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ad0:	4b68      	ldr	r3, [pc, #416]	; (8001c74 <HAL_RCC_ClockConfig+0x1b8>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f003 0307 	and.w	r3, r3, #7
 8001ad8:	683a      	ldr	r2, [r7, #0]
 8001ada:	429a      	cmp	r2, r3
 8001adc:	d90c      	bls.n	8001af8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ade:	4b65      	ldr	r3, [pc, #404]	; (8001c74 <HAL_RCC_ClockConfig+0x1b8>)
 8001ae0:	683a      	ldr	r2, [r7, #0]
 8001ae2:	b2d2      	uxtb	r2, r2
 8001ae4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ae6:	4b63      	ldr	r3, [pc, #396]	; (8001c74 <HAL_RCC_ClockConfig+0x1b8>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f003 0307 	and.w	r3, r3, #7
 8001aee:	683a      	ldr	r2, [r7, #0]
 8001af0:	429a      	cmp	r2, r3
 8001af2:	d001      	beq.n	8001af8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001af4:	2301      	movs	r3, #1
 8001af6:	e0b8      	b.n	8001c6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f003 0302 	and.w	r3, r3, #2
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d020      	beq.n	8001b46 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f003 0304 	and.w	r3, r3, #4
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d005      	beq.n	8001b1c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b10:	4b59      	ldr	r3, [pc, #356]	; (8001c78 <HAL_RCC_ClockConfig+0x1bc>)
 8001b12:	689b      	ldr	r3, [r3, #8]
 8001b14:	4a58      	ldr	r2, [pc, #352]	; (8001c78 <HAL_RCC_ClockConfig+0x1bc>)
 8001b16:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001b1a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f003 0308 	and.w	r3, r3, #8
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d005      	beq.n	8001b34 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b28:	4b53      	ldr	r3, [pc, #332]	; (8001c78 <HAL_RCC_ClockConfig+0x1bc>)
 8001b2a:	689b      	ldr	r3, [r3, #8]
 8001b2c:	4a52      	ldr	r2, [pc, #328]	; (8001c78 <HAL_RCC_ClockConfig+0x1bc>)
 8001b2e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001b32:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b34:	4b50      	ldr	r3, [pc, #320]	; (8001c78 <HAL_RCC_ClockConfig+0x1bc>)
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	494d      	ldr	r1, [pc, #308]	; (8001c78 <HAL_RCC_ClockConfig+0x1bc>)
 8001b42:	4313      	orrs	r3, r2
 8001b44:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f003 0301 	and.w	r3, r3, #1
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d044      	beq.n	8001bdc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	2b01      	cmp	r3, #1
 8001b58:	d107      	bne.n	8001b6a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b5a:	4b47      	ldr	r3, [pc, #284]	; (8001c78 <HAL_RCC_ClockConfig+0x1bc>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d119      	bne.n	8001b9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	e07f      	b.n	8001c6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	2b02      	cmp	r3, #2
 8001b70:	d003      	beq.n	8001b7a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b76:	2b03      	cmp	r3, #3
 8001b78:	d107      	bne.n	8001b8a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b7a:	4b3f      	ldr	r3, [pc, #252]	; (8001c78 <HAL_RCC_ClockConfig+0x1bc>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d109      	bne.n	8001b9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	e06f      	b.n	8001c6a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b8a:	4b3b      	ldr	r3, [pc, #236]	; (8001c78 <HAL_RCC_ClockConfig+0x1bc>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f003 0302 	and.w	r3, r3, #2
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d101      	bne.n	8001b9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b96:	2301      	movs	r3, #1
 8001b98:	e067      	b.n	8001c6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b9a:	4b37      	ldr	r3, [pc, #220]	; (8001c78 <HAL_RCC_ClockConfig+0x1bc>)
 8001b9c:	689b      	ldr	r3, [r3, #8]
 8001b9e:	f023 0203 	bic.w	r2, r3, #3
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	4934      	ldr	r1, [pc, #208]	; (8001c78 <HAL_RCC_ClockConfig+0x1bc>)
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001bac:	f7ff fa82 	bl	80010b4 <HAL_GetTick>
 8001bb0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bb2:	e00a      	b.n	8001bca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bb4:	f7ff fa7e 	bl	80010b4 <HAL_GetTick>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	1ad3      	subs	r3, r2, r3
 8001bbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d901      	bls.n	8001bca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001bc6:	2303      	movs	r3, #3
 8001bc8:	e04f      	b.n	8001c6a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bca:	4b2b      	ldr	r3, [pc, #172]	; (8001c78 <HAL_RCC_ClockConfig+0x1bc>)
 8001bcc:	689b      	ldr	r3, [r3, #8]
 8001bce:	f003 020c 	and.w	r2, r3, #12
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	009b      	lsls	r3, r3, #2
 8001bd8:	429a      	cmp	r2, r3
 8001bda:	d1eb      	bne.n	8001bb4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001bdc:	4b25      	ldr	r3, [pc, #148]	; (8001c74 <HAL_RCC_ClockConfig+0x1b8>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f003 0307 	and.w	r3, r3, #7
 8001be4:	683a      	ldr	r2, [r7, #0]
 8001be6:	429a      	cmp	r2, r3
 8001be8:	d20c      	bcs.n	8001c04 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bea:	4b22      	ldr	r3, [pc, #136]	; (8001c74 <HAL_RCC_ClockConfig+0x1b8>)
 8001bec:	683a      	ldr	r2, [r7, #0]
 8001bee:	b2d2      	uxtb	r2, r2
 8001bf0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bf2:	4b20      	ldr	r3, [pc, #128]	; (8001c74 <HAL_RCC_ClockConfig+0x1b8>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f003 0307 	and.w	r3, r3, #7
 8001bfa:	683a      	ldr	r2, [r7, #0]
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	d001      	beq.n	8001c04 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001c00:	2301      	movs	r3, #1
 8001c02:	e032      	b.n	8001c6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f003 0304 	and.w	r3, r3, #4
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d008      	beq.n	8001c22 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c10:	4b19      	ldr	r3, [pc, #100]	; (8001c78 <HAL_RCC_ClockConfig+0x1bc>)
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	68db      	ldr	r3, [r3, #12]
 8001c1c:	4916      	ldr	r1, [pc, #88]	; (8001c78 <HAL_RCC_ClockConfig+0x1bc>)
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f003 0308 	and.w	r3, r3, #8
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d009      	beq.n	8001c42 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c2e:	4b12      	ldr	r3, [pc, #72]	; (8001c78 <HAL_RCC_ClockConfig+0x1bc>)
 8001c30:	689b      	ldr	r3, [r3, #8]
 8001c32:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	691b      	ldr	r3, [r3, #16]
 8001c3a:	00db      	lsls	r3, r3, #3
 8001c3c:	490e      	ldr	r1, [pc, #56]	; (8001c78 <HAL_RCC_ClockConfig+0x1bc>)
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001c42:	f000 f821 	bl	8001c88 <HAL_RCC_GetSysClockFreq>
 8001c46:	4602      	mov	r2, r0
 8001c48:	4b0b      	ldr	r3, [pc, #44]	; (8001c78 <HAL_RCC_ClockConfig+0x1bc>)
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	091b      	lsrs	r3, r3, #4
 8001c4e:	f003 030f 	and.w	r3, r3, #15
 8001c52:	490a      	ldr	r1, [pc, #40]	; (8001c7c <HAL_RCC_ClockConfig+0x1c0>)
 8001c54:	5ccb      	ldrb	r3, [r1, r3]
 8001c56:	fa22 f303 	lsr.w	r3, r2, r3
 8001c5a:	4a09      	ldr	r2, [pc, #36]	; (8001c80 <HAL_RCC_ClockConfig+0x1c4>)
 8001c5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001c5e:	4b09      	ldr	r3, [pc, #36]	; (8001c84 <HAL_RCC_ClockConfig+0x1c8>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4618      	mov	r0, r3
 8001c64:	f7ff f90e 	bl	8000e84 <HAL_InitTick>

  return HAL_OK;
 8001c68:	2300      	movs	r3, #0
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3710      	adds	r7, #16
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	40023c00 	.word	0x40023c00
 8001c78:	40023800 	.word	0x40023800
 8001c7c:	080044d4 	.word	0x080044d4
 8001c80:	20000000 	.word	0x20000000
 8001c84:	20000004 	.word	0x20000004

08001c88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c8c:	b090      	sub	sp, #64	; 0x40
 8001c8e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001c90:	2300      	movs	r3, #0
 8001c92:	637b      	str	r3, [r7, #52]	; 0x34
 8001c94:	2300      	movs	r3, #0
 8001c96:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c98:	2300      	movs	r3, #0
 8001c9a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ca0:	4b59      	ldr	r3, [pc, #356]	; (8001e08 <HAL_RCC_GetSysClockFreq+0x180>)
 8001ca2:	689b      	ldr	r3, [r3, #8]
 8001ca4:	f003 030c 	and.w	r3, r3, #12
 8001ca8:	2b08      	cmp	r3, #8
 8001caa:	d00d      	beq.n	8001cc8 <HAL_RCC_GetSysClockFreq+0x40>
 8001cac:	2b08      	cmp	r3, #8
 8001cae:	f200 80a1 	bhi.w	8001df4 <HAL_RCC_GetSysClockFreq+0x16c>
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d002      	beq.n	8001cbc <HAL_RCC_GetSysClockFreq+0x34>
 8001cb6:	2b04      	cmp	r3, #4
 8001cb8:	d003      	beq.n	8001cc2 <HAL_RCC_GetSysClockFreq+0x3a>
 8001cba:	e09b      	b.n	8001df4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001cbc:	4b53      	ldr	r3, [pc, #332]	; (8001e0c <HAL_RCC_GetSysClockFreq+0x184>)
 8001cbe:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001cc0:	e09b      	b.n	8001dfa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001cc2:	4b53      	ldr	r3, [pc, #332]	; (8001e10 <HAL_RCC_GetSysClockFreq+0x188>)
 8001cc4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001cc6:	e098      	b.n	8001dfa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001cc8:	4b4f      	ldr	r3, [pc, #316]	; (8001e08 <HAL_RCC_GetSysClockFreq+0x180>)
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001cd0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001cd2:	4b4d      	ldr	r3, [pc, #308]	; (8001e08 <HAL_RCC_GetSysClockFreq+0x180>)
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d028      	beq.n	8001d30 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cde:	4b4a      	ldr	r3, [pc, #296]	; (8001e08 <HAL_RCC_GetSysClockFreq+0x180>)
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	099b      	lsrs	r3, r3, #6
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	623b      	str	r3, [r7, #32]
 8001ce8:	627a      	str	r2, [r7, #36]	; 0x24
 8001cea:	6a3b      	ldr	r3, [r7, #32]
 8001cec:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001cf0:	2100      	movs	r1, #0
 8001cf2:	4b47      	ldr	r3, [pc, #284]	; (8001e10 <HAL_RCC_GetSysClockFreq+0x188>)
 8001cf4:	fb03 f201 	mul.w	r2, r3, r1
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	fb00 f303 	mul.w	r3, r0, r3
 8001cfe:	4413      	add	r3, r2
 8001d00:	4a43      	ldr	r2, [pc, #268]	; (8001e10 <HAL_RCC_GetSysClockFreq+0x188>)
 8001d02:	fba0 1202 	umull	r1, r2, r0, r2
 8001d06:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001d08:	460a      	mov	r2, r1
 8001d0a:	62ba      	str	r2, [r7, #40]	; 0x28
 8001d0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d0e:	4413      	add	r3, r2
 8001d10:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d14:	2200      	movs	r2, #0
 8001d16:	61bb      	str	r3, [r7, #24]
 8001d18:	61fa      	str	r2, [r7, #28]
 8001d1a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d1e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001d22:	f7fe fa5d 	bl	80001e0 <__aeabi_uldivmod>
 8001d26:	4602      	mov	r2, r0
 8001d28:	460b      	mov	r3, r1
 8001d2a:	4613      	mov	r3, r2
 8001d2c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001d2e:	e053      	b.n	8001dd8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d30:	4b35      	ldr	r3, [pc, #212]	; (8001e08 <HAL_RCC_GetSysClockFreq+0x180>)
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	099b      	lsrs	r3, r3, #6
 8001d36:	2200      	movs	r2, #0
 8001d38:	613b      	str	r3, [r7, #16]
 8001d3a:	617a      	str	r2, [r7, #20]
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001d42:	f04f 0b00 	mov.w	fp, #0
 8001d46:	4652      	mov	r2, sl
 8001d48:	465b      	mov	r3, fp
 8001d4a:	f04f 0000 	mov.w	r0, #0
 8001d4e:	f04f 0100 	mov.w	r1, #0
 8001d52:	0159      	lsls	r1, r3, #5
 8001d54:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d58:	0150      	lsls	r0, r2, #5
 8001d5a:	4602      	mov	r2, r0
 8001d5c:	460b      	mov	r3, r1
 8001d5e:	ebb2 080a 	subs.w	r8, r2, sl
 8001d62:	eb63 090b 	sbc.w	r9, r3, fp
 8001d66:	f04f 0200 	mov.w	r2, #0
 8001d6a:	f04f 0300 	mov.w	r3, #0
 8001d6e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001d72:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001d76:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001d7a:	ebb2 0408 	subs.w	r4, r2, r8
 8001d7e:	eb63 0509 	sbc.w	r5, r3, r9
 8001d82:	f04f 0200 	mov.w	r2, #0
 8001d86:	f04f 0300 	mov.w	r3, #0
 8001d8a:	00eb      	lsls	r3, r5, #3
 8001d8c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001d90:	00e2      	lsls	r2, r4, #3
 8001d92:	4614      	mov	r4, r2
 8001d94:	461d      	mov	r5, r3
 8001d96:	eb14 030a 	adds.w	r3, r4, sl
 8001d9a:	603b      	str	r3, [r7, #0]
 8001d9c:	eb45 030b 	adc.w	r3, r5, fp
 8001da0:	607b      	str	r3, [r7, #4]
 8001da2:	f04f 0200 	mov.w	r2, #0
 8001da6:	f04f 0300 	mov.w	r3, #0
 8001daa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001dae:	4629      	mov	r1, r5
 8001db0:	028b      	lsls	r3, r1, #10
 8001db2:	4621      	mov	r1, r4
 8001db4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001db8:	4621      	mov	r1, r4
 8001dba:	028a      	lsls	r2, r1, #10
 8001dbc:	4610      	mov	r0, r2
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	60bb      	str	r3, [r7, #8]
 8001dc6:	60fa      	str	r2, [r7, #12]
 8001dc8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001dcc:	f7fe fa08 	bl	80001e0 <__aeabi_uldivmod>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	460b      	mov	r3, r1
 8001dd4:	4613      	mov	r3, r2
 8001dd6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001dd8:	4b0b      	ldr	r3, [pc, #44]	; (8001e08 <HAL_RCC_GetSysClockFreq+0x180>)
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	0c1b      	lsrs	r3, r3, #16
 8001dde:	f003 0303 	and.w	r3, r3, #3
 8001de2:	3301      	adds	r3, #1
 8001de4:	005b      	lsls	r3, r3, #1
 8001de6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001de8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dec:	fbb2 f3f3 	udiv	r3, r2, r3
 8001df0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001df2:	e002      	b.n	8001dfa <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001df4:	4b05      	ldr	r3, [pc, #20]	; (8001e0c <HAL_RCC_GetSysClockFreq+0x184>)
 8001df6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001df8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001dfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	3740      	adds	r7, #64	; 0x40
 8001e00:	46bd      	mov	sp, r7
 8001e02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e06:	bf00      	nop
 8001e08:	40023800 	.word	0x40023800
 8001e0c:	00f42400 	.word	0x00f42400
 8001e10:	017d7840 	.word	0x017d7840

08001e14 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e18:	4b03      	ldr	r3, [pc, #12]	; (8001e28 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr
 8001e26:	bf00      	nop
 8001e28:	20000000 	.word	0x20000000

08001e2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001e30:	f7ff fff0 	bl	8001e14 <HAL_RCC_GetHCLKFreq>
 8001e34:	4602      	mov	r2, r0
 8001e36:	4b05      	ldr	r3, [pc, #20]	; (8001e4c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	0b5b      	lsrs	r3, r3, #13
 8001e3c:	f003 0307 	and.w	r3, r3, #7
 8001e40:	4903      	ldr	r1, [pc, #12]	; (8001e50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e42:	5ccb      	ldrb	r3, [r1, r3]
 8001e44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	40023800 	.word	0x40023800
 8001e50:	080044e4 	.word	0x080044e4

08001e54 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b083      	sub	sp, #12
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
 8001e5c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	220f      	movs	r2, #15
 8001e62:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001e64:	4b12      	ldr	r3, [pc, #72]	; (8001eb0 <HAL_RCC_GetClockConfig+0x5c>)
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	f003 0203 	and.w	r2, r3, #3
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001e70:	4b0f      	ldr	r3, [pc, #60]	; (8001eb0 <HAL_RCC_GetClockConfig+0x5c>)
 8001e72:	689b      	ldr	r3, [r3, #8]
 8001e74:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001e7c:	4b0c      	ldr	r3, [pc, #48]	; (8001eb0 <HAL_RCC_GetClockConfig+0x5c>)
 8001e7e:	689b      	ldr	r3, [r3, #8]
 8001e80:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001e88:	4b09      	ldr	r3, [pc, #36]	; (8001eb0 <HAL_RCC_GetClockConfig+0x5c>)
 8001e8a:	689b      	ldr	r3, [r3, #8]
 8001e8c:	08db      	lsrs	r3, r3, #3
 8001e8e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001e96:	4b07      	ldr	r3, [pc, #28]	; (8001eb4 <HAL_RCC_GetClockConfig+0x60>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f003 0207 	and.w	r2, r3, #7
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	601a      	str	r2, [r3, #0]
}
 8001ea2:	bf00      	nop
 8001ea4:	370c      	adds	r7, #12
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr
 8001eae:	bf00      	nop
 8001eb0:	40023800 	.word	0x40023800
 8001eb4:	40023c00 	.word	0x40023c00

08001eb8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b082      	sub	sp, #8
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d101      	bne.n	8001eca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e07b      	b.n	8001fc2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d108      	bne.n	8001ee4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001eda:	d009      	beq.n	8001ef0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2200      	movs	r2, #0
 8001ee0:	61da      	str	r2, [r3, #28]
 8001ee2:	e005      	b.n	8001ef0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2200      	movs	r2, #0
 8001eee:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001efc:	b2db      	uxtb	r3, r3
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d106      	bne.n	8001f10 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2200      	movs	r2, #0
 8001f06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001f0a:	6878      	ldr	r0, [r7, #4]
 8001f0c:	f7fe fee8 	bl	8000ce0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2202      	movs	r2, #2
 8001f14:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	681a      	ldr	r2, [r3, #0]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001f26:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	689b      	ldr	r3, [r3, #8]
 8001f34:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001f38:	431a      	orrs	r2, r3
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	68db      	ldr	r3, [r3, #12]
 8001f3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f42:	431a      	orrs	r2, r3
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	691b      	ldr	r3, [r3, #16]
 8001f48:	f003 0302 	and.w	r3, r3, #2
 8001f4c:	431a      	orrs	r2, r3
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	695b      	ldr	r3, [r3, #20]
 8001f52:	f003 0301 	and.w	r3, r3, #1
 8001f56:	431a      	orrs	r2, r3
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	699b      	ldr	r3, [r3, #24]
 8001f5c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f60:	431a      	orrs	r2, r3
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	69db      	ldr	r3, [r3, #28]
 8001f66:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001f6a:	431a      	orrs	r2, r3
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6a1b      	ldr	r3, [r3, #32]
 8001f70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f74:	ea42 0103 	orr.w	r1, r2, r3
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f7c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	430a      	orrs	r2, r1
 8001f86:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	699b      	ldr	r3, [r3, #24]
 8001f8c:	0c1b      	lsrs	r3, r3, #16
 8001f8e:	f003 0104 	and.w	r1, r3, #4
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f96:	f003 0210 	and.w	r2, r3, #16
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	430a      	orrs	r2, r1
 8001fa0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	69da      	ldr	r2, [r3, #28]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001fb0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2201      	movs	r2, #1
 8001fbc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001fc0:	2300      	movs	r3, #0
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3708      	adds	r7, #8
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}

08001fca <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001fca:	b580      	push	{r7, lr}
 8001fcc:	b082      	sub	sp, #8
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d101      	bne.n	8001fdc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	e041      	b.n	8002060 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fe2:	b2db      	uxtb	r3, r3
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d106      	bne.n	8001ff6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2200      	movs	r2, #0
 8001fec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001ff0:	6878      	ldr	r0, [r7, #4]
 8001ff2:	f7fe febd 	bl	8000d70 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2202      	movs	r2, #2
 8001ffa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	3304      	adds	r3, #4
 8002006:	4619      	mov	r1, r3
 8002008:	4610      	mov	r0, r2
 800200a:	f000 fcd1 	bl	80029b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2201      	movs	r2, #1
 8002012:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2201      	movs	r2, #1
 800201a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2201      	movs	r2, #1
 8002022:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2201      	movs	r2, #1
 800202a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2201      	movs	r2, #1
 8002032:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2201      	movs	r2, #1
 800203a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2201      	movs	r2, #1
 8002042:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2201      	movs	r2, #1
 800204a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2201      	movs	r2, #1
 8002052:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2201      	movs	r2, #1
 800205a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800205e:	2300      	movs	r3, #0
}
 8002060:	4618      	mov	r0, r3
 8002062:	3708      	adds	r7, #8
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}

08002068 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002068:	b480      	push	{r7}
 800206a:	b085      	sub	sp, #20
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002076:	b2db      	uxtb	r3, r3
 8002078:	2b01      	cmp	r3, #1
 800207a:	d001      	beq.n	8002080 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800207c:	2301      	movs	r3, #1
 800207e:	e044      	b.n	800210a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2202      	movs	r2, #2
 8002084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	68da      	ldr	r2, [r3, #12]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f042 0201 	orr.w	r2, r2, #1
 8002096:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a1e      	ldr	r2, [pc, #120]	; (8002118 <HAL_TIM_Base_Start_IT+0xb0>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d018      	beq.n	80020d4 <HAL_TIM_Base_Start_IT+0x6c>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020aa:	d013      	beq.n	80020d4 <HAL_TIM_Base_Start_IT+0x6c>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a1a      	ldr	r2, [pc, #104]	; (800211c <HAL_TIM_Base_Start_IT+0xb4>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d00e      	beq.n	80020d4 <HAL_TIM_Base_Start_IT+0x6c>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a19      	ldr	r2, [pc, #100]	; (8002120 <HAL_TIM_Base_Start_IT+0xb8>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d009      	beq.n	80020d4 <HAL_TIM_Base_Start_IT+0x6c>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a17      	ldr	r2, [pc, #92]	; (8002124 <HAL_TIM_Base_Start_IT+0xbc>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d004      	beq.n	80020d4 <HAL_TIM_Base_Start_IT+0x6c>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4a16      	ldr	r2, [pc, #88]	; (8002128 <HAL_TIM_Base_Start_IT+0xc0>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d111      	bne.n	80020f8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	f003 0307 	and.w	r3, r3, #7
 80020de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	2b06      	cmp	r3, #6
 80020e4:	d010      	beq.n	8002108 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	681a      	ldr	r2, [r3, #0]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f042 0201 	orr.w	r2, r2, #1
 80020f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020f6:	e007      	b.n	8002108 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	681a      	ldr	r2, [r3, #0]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f042 0201 	orr.w	r2, r2, #1
 8002106:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002108:	2300      	movs	r3, #0
}
 800210a:	4618      	mov	r0, r3
 800210c:	3714      	adds	r7, #20
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr
 8002116:	bf00      	nop
 8002118:	40010000 	.word	0x40010000
 800211c:	40000400 	.word	0x40000400
 8002120:	40000800 	.word	0x40000800
 8002124:	40000c00 	.word	0x40000c00
 8002128:	40014000 	.word	0x40014000

0800212c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b082      	sub	sp, #8
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d101      	bne.n	800213e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	e041      	b.n	80021c2 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002144:	b2db      	uxtb	r3, r3
 8002146:	2b00      	cmp	r3, #0
 8002148:	d106      	bne.n	8002158 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2200      	movs	r2, #0
 800214e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002152:	6878      	ldr	r0, [r7, #4]
 8002154:	f000 f839 	bl	80021ca <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2202      	movs	r2, #2
 800215c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681a      	ldr	r2, [r3, #0]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	3304      	adds	r3, #4
 8002168:	4619      	mov	r1, r3
 800216a:	4610      	mov	r0, r2
 800216c:	f000 fc20 	bl	80029b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2201      	movs	r2, #1
 8002174:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2201      	movs	r2, #1
 800217c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2201      	movs	r2, #1
 8002184:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2201      	movs	r2, #1
 800218c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2201      	movs	r2, #1
 8002194:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2201      	movs	r2, #1
 800219c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2201      	movs	r2, #1
 80021a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2201      	movs	r2, #1
 80021ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2201      	movs	r2, #1
 80021b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2201      	movs	r2, #1
 80021bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80021c0:	2300      	movs	r3, #0
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	3708      	adds	r7, #8
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}

080021ca <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80021ca:	b480      	push	{r7}
 80021cc:	b083      	sub	sp, #12
 80021ce:	af00      	add	r7, sp, #0
 80021d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80021d2:	bf00      	nop
 80021d4:	370c      	adds	r7, #12
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr
	...

080021e0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b084      	sub	sp, #16
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
 80021e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80021ea:	2300      	movs	r3, #0
 80021ec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d104      	bne.n	80021fe <HAL_TIM_IC_Start_IT+0x1e>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80021fa:	b2db      	uxtb	r3, r3
 80021fc:	e013      	b.n	8002226 <HAL_TIM_IC_Start_IT+0x46>
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	2b04      	cmp	r3, #4
 8002202:	d104      	bne.n	800220e <HAL_TIM_IC_Start_IT+0x2e>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800220a:	b2db      	uxtb	r3, r3
 800220c:	e00b      	b.n	8002226 <HAL_TIM_IC_Start_IT+0x46>
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	2b08      	cmp	r3, #8
 8002212:	d104      	bne.n	800221e <HAL_TIM_IC_Start_IT+0x3e>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800221a:	b2db      	uxtb	r3, r3
 800221c:	e003      	b.n	8002226 <HAL_TIM_IC_Start_IT+0x46>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002224:	b2db      	uxtb	r3, r3
 8002226:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d104      	bne.n	8002238 <HAL_TIM_IC_Start_IT+0x58>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002234:	b2db      	uxtb	r3, r3
 8002236:	e013      	b.n	8002260 <HAL_TIM_IC_Start_IT+0x80>
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	2b04      	cmp	r3, #4
 800223c:	d104      	bne.n	8002248 <HAL_TIM_IC_Start_IT+0x68>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002244:	b2db      	uxtb	r3, r3
 8002246:	e00b      	b.n	8002260 <HAL_TIM_IC_Start_IT+0x80>
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	2b08      	cmp	r3, #8
 800224c:	d104      	bne.n	8002258 <HAL_TIM_IC_Start_IT+0x78>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002254:	b2db      	uxtb	r3, r3
 8002256:	e003      	b.n	8002260 <HAL_TIM_IC_Start_IT+0x80>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800225e:	b2db      	uxtb	r3, r3
 8002260:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8002262:	7bbb      	ldrb	r3, [r7, #14]
 8002264:	2b01      	cmp	r3, #1
 8002266:	d102      	bne.n	800226e <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8002268:	7b7b      	ldrb	r3, [r7, #13]
 800226a:	2b01      	cmp	r3, #1
 800226c:	d001      	beq.n	8002272 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 800226e:	2301      	movs	r3, #1
 8002270:	e0c2      	b.n	80023f8 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d104      	bne.n	8002282 <HAL_TIM_IC_Start_IT+0xa2>
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2202      	movs	r2, #2
 800227c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002280:	e013      	b.n	80022aa <HAL_TIM_IC_Start_IT+0xca>
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	2b04      	cmp	r3, #4
 8002286:	d104      	bne.n	8002292 <HAL_TIM_IC_Start_IT+0xb2>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2202      	movs	r2, #2
 800228c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002290:	e00b      	b.n	80022aa <HAL_TIM_IC_Start_IT+0xca>
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	2b08      	cmp	r3, #8
 8002296:	d104      	bne.n	80022a2 <HAL_TIM_IC_Start_IT+0xc2>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2202      	movs	r2, #2
 800229c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80022a0:	e003      	b.n	80022aa <HAL_TIM_IC_Start_IT+0xca>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2202      	movs	r2, #2
 80022a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d104      	bne.n	80022ba <HAL_TIM_IC_Start_IT+0xda>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2202      	movs	r2, #2
 80022b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80022b8:	e013      	b.n	80022e2 <HAL_TIM_IC_Start_IT+0x102>
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	2b04      	cmp	r3, #4
 80022be:	d104      	bne.n	80022ca <HAL_TIM_IC_Start_IT+0xea>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2202      	movs	r2, #2
 80022c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80022c8:	e00b      	b.n	80022e2 <HAL_TIM_IC_Start_IT+0x102>
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	2b08      	cmp	r3, #8
 80022ce:	d104      	bne.n	80022da <HAL_TIM_IC_Start_IT+0xfa>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2202      	movs	r2, #2
 80022d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80022d8:	e003      	b.n	80022e2 <HAL_TIM_IC_Start_IT+0x102>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2202      	movs	r2, #2
 80022de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	2b0c      	cmp	r3, #12
 80022e6:	d841      	bhi.n	800236c <HAL_TIM_IC_Start_IT+0x18c>
 80022e8:	a201      	add	r2, pc, #4	; (adr r2, 80022f0 <HAL_TIM_IC_Start_IT+0x110>)
 80022ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022ee:	bf00      	nop
 80022f0:	08002325 	.word	0x08002325
 80022f4:	0800236d 	.word	0x0800236d
 80022f8:	0800236d 	.word	0x0800236d
 80022fc:	0800236d 	.word	0x0800236d
 8002300:	08002337 	.word	0x08002337
 8002304:	0800236d 	.word	0x0800236d
 8002308:	0800236d 	.word	0x0800236d
 800230c:	0800236d 	.word	0x0800236d
 8002310:	08002349 	.word	0x08002349
 8002314:	0800236d 	.word	0x0800236d
 8002318:	0800236d 	.word	0x0800236d
 800231c:	0800236d 	.word	0x0800236d
 8002320:	0800235b 	.word	0x0800235b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	68da      	ldr	r2, [r3, #12]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f042 0202 	orr.w	r2, r2, #2
 8002332:	60da      	str	r2, [r3, #12]
      break;
 8002334:	e01d      	b.n	8002372 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	68da      	ldr	r2, [r3, #12]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f042 0204 	orr.w	r2, r2, #4
 8002344:	60da      	str	r2, [r3, #12]
      break;
 8002346:	e014      	b.n	8002372 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	68da      	ldr	r2, [r3, #12]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f042 0208 	orr.w	r2, r2, #8
 8002356:	60da      	str	r2, [r3, #12]
      break;
 8002358:	e00b      	b.n	8002372 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	68da      	ldr	r2, [r3, #12]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f042 0210 	orr.w	r2, r2, #16
 8002368:	60da      	str	r2, [r3, #12]
      break;
 800236a:	e002      	b.n	8002372 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800236c:	2301      	movs	r3, #1
 800236e:	73fb      	strb	r3, [r7, #15]
      break;
 8002370:	bf00      	nop
  }

  if (status == HAL_OK)
 8002372:	7bfb      	ldrb	r3, [r7, #15]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d13e      	bne.n	80023f6 <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	2201      	movs	r2, #1
 800237e:	6839      	ldr	r1, [r7, #0]
 8002380:	4618      	mov	r0, r3
 8002382:	f000 fd4d 	bl	8002e20 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a1d      	ldr	r2, [pc, #116]	; (8002400 <HAL_TIM_IC_Start_IT+0x220>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d018      	beq.n	80023c2 <HAL_TIM_IC_Start_IT+0x1e2>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002398:	d013      	beq.n	80023c2 <HAL_TIM_IC_Start_IT+0x1e2>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a19      	ldr	r2, [pc, #100]	; (8002404 <HAL_TIM_IC_Start_IT+0x224>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d00e      	beq.n	80023c2 <HAL_TIM_IC_Start_IT+0x1e2>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a17      	ldr	r2, [pc, #92]	; (8002408 <HAL_TIM_IC_Start_IT+0x228>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d009      	beq.n	80023c2 <HAL_TIM_IC_Start_IT+0x1e2>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a16      	ldr	r2, [pc, #88]	; (800240c <HAL_TIM_IC_Start_IT+0x22c>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d004      	beq.n	80023c2 <HAL_TIM_IC_Start_IT+0x1e2>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a14      	ldr	r2, [pc, #80]	; (8002410 <HAL_TIM_IC_Start_IT+0x230>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d111      	bne.n	80023e6 <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	f003 0307 	and.w	r3, r3, #7
 80023cc:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023ce:	68bb      	ldr	r3, [r7, #8]
 80023d0:	2b06      	cmp	r3, #6
 80023d2:	d010      	beq.n	80023f6 <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f042 0201 	orr.w	r2, r2, #1
 80023e2:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023e4:	e007      	b.n	80023f6 <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	681a      	ldr	r2, [r3, #0]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f042 0201 	orr.w	r2, r2, #1
 80023f4:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80023f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	3710      	adds	r7, #16
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}
 8002400:	40010000 	.word	0x40010000
 8002404:	40000400 	.word	0x40000400
 8002408:	40000800 	.word	0x40000800
 800240c:	40000c00 	.word	0x40000c00
 8002410:	40014000 	.word	0x40014000

08002414 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b082      	sub	sp, #8
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	691b      	ldr	r3, [r3, #16]
 8002422:	f003 0302 	and.w	r3, r3, #2
 8002426:	2b02      	cmp	r3, #2
 8002428:	d122      	bne.n	8002470 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	68db      	ldr	r3, [r3, #12]
 8002430:	f003 0302 	and.w	r3, r3, #2
 8002434:	2b02      	cmp	r3, #2
 8002436:	d11b      	bne.n	8002470 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f06f 0202 	mvn.w	r2, #2
 8002440:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2201      	movs	r2, #1
 8002446:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	699b      	ldr	r3, [r3, #24]
 800244e:	f003 0303 	and.w	r3, r3, #3
 8002452:	2b00      	cmp	r3, #0
 8002454:	d003      	beq.n	800245e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002456:	6878      	ldr	r0, [r7, #4]
 8002458:	f7fe f85a 	bl	8000510 <HAL_TIM_IC_CaptureCallback>
 800245c:	e005      	b.n	800246a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800245e:	6878      	ldr	r0, [r7, #4]
 8002460:	f000 fa88 	bl	8002974 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002464:	6878      	ldr	r0, [r7, #4]
 8002466:	f000 fa8f 	bl	8002988 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2200      	movs	r2, #0
 800246e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	691b      	ldr	r3, [r3, #16]
 8002476:	f003 0304 	and.w	r3, r3, #4
 800247a:	2b04      	cmp	r3, #4
 800247c:	d122      	bne.n	80024c4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	68db      	ldr	r3, [r3, #12]
 8002484:	f003 0304 	and.w	r3, r3, #4
 8002488:	2b04      	cmp	r3, #4
 800248a:	d11b      	bne.n	80024c4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f06f 0204 	mvn.w	r2, #4
 8002494:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2202      	movs	r2, #2
 800249a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	699b      	ldr	r3, [r3, #24]
 80024a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d003      	beq.n	80024b2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024aa:	6878      	ldr	r0, [r7, #4]
 80024ac:	f7fe f830 	bl	8000510 <HAL_TIM_IC_CaptureCallback>
 80024b0:	e005      	b.n	80024be <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024b2:	6878      	ldr	r0, [r7, #4]
 80024b4:	f000 fa5e 	bl	8002974 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024b8:	6878      	ldr	r0, [r7, #4]
 80024ba:	f000 fa65 	bl	8002988 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2200      	movs	r2, #0
 80024c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	691b      	ldr	r3, [r3, #16]
 80024ca:	f003 0308 	and.w	r3, r3, #8
 80024ce:	2b08      	cmp	r3, #8
 80024d0:	d122      	bne.n	8002518 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	68db      	ldr	r3, [r3, #12]
 80024d8:	f003 0308 	and.w	r3, r3, #8
 80024dc:	2b08      	cmp	r3, #8
 80024de:	d11b      	bne.n	8002518 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f06f 0208 	mvn.w	r2, #8
 80024e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2204      	movs	r2, #4
 80024ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	69db      	ldr	r3, [r3, #28]
 80024f6:	f003 0303 	and.w	r3, r3, #3
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d003      	beq.n	8002506 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024fe:	6878      	ldr	r0, [r7, #4]
 8002500:	f7fe f806 	bl	8000510 <HAL_TIM_IC_CaptureCallback>
 8002504:	e005      	b.n	8002512 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002506:	6878      	ldr	r0, [r7, #4]
 8002508:	f000 fa34 	bl	8002974 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800250c:	6878      	ldr	r0, [r7, #4]
 800250e:	f000 fa3b 	bl	8002988 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2200      	movs	r2, #0
 8002516:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	691b      	ldr	r3, [r3, #16]
 800251e:	f003 0310 	and.w	r3, r3, #16
 8002522:	2b10      	cmp	r3, #16
 8002524:	d122      	bne.n	800256c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	68db      	ldr	r3, [r3, #12]
 800252c:	f003 0310 	and.w	r3, r3, #16
 8002530:	2b10      	cmp	r3, #16
 8002532:	d11b      	bne.n	800256c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f06f 0210 	mvn.w	r2, #16
 800253c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2208      	movs	r2, #8
 8002542:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	69db      	ldr	r3, [r3, #28]
 800254a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800254e:	2b00      	cmp	r3, #0
 8002550:	d003      	beq.n	800255a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002552:	6878      	ldr	r0, [r7, #4]
 8002554:	f7fd ffdc 	bl	8000510 <HAL_TIM_IC_CaptureCallback>
 8002558:	e005      	b.n	8002566 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	f000 fa0a 	bl	8002974 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002560:	6878      	ldr	r0, [r7, #4]
 8002562:	f000 fa11 	bl	8002988 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2200      	movs	r2, #0
 800256a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	691b      	ldr	r3, [r3, #16]
 8002572:	f003 0301 	and.w	r3, r3, #1
 8002576:	2b01      	cmp	r3, #1
 8002578:	d10e      	bne.n	8002598 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	68db      	ldr	r3, [r3, #12]
 8002580:	f003 0301 	and.w	r3, r3, #1
 8002584:	2b01      	cmp	r3, #1
 8002586:	d107      	bne.n	8002598 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f06f 0201 	mvn.w	r2, #1
 8002590:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002592:	6878      	ldr	r0, [r7, #4]
 8002594:	f7fe fb60 	bl	8000c58 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	691b      	ldr	r3, [r3, #16]
 800259e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025a2:	2b80      	cmp	r3, #128	; 0x80
 80025a4:	d10e      	bne.n	80025c4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025b0:	2b80      	cmp	r3, #128	; 0x80
 80025b2:	d107      	bne.n	80025c4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80025bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80025be:	6878      	ldr	r0, [r7, #4]
 80025c0:	f000 fccc 	bl	8002f5c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	691b      	ldr	r3, [r3, #16]
 80025ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025ce:	2b40      	cmp	r3, #64	; 0x40
 80025d0:	d10e      	bne.n	80025f0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	68db      	ldr	r3, [r3, #12]
 80025d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025dc:	2b40      	cmp	r3, #64	; 0x40
 80025de:	d107      	bne.n	80025f0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80025e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80025ea:	6878      	ldr	r0, [r7, #4]
 80025ec:	f000 f9d6 	bl	800299c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	691b      	ldr	r3, [r3, #16]
 80025f6:	f003 0320 	and.w	r3, r3, #32
 80025fa:	2b20      	cmp	r3, #32
 80025fc:	d10e      	bne.n	800261c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	68db      	ldr	r3, [r3, #12]
 8002604:	f003 0320 	and.w	r3, r3, #32
 8002608:	2b20      	cmp	r3, #32
 800260a:	d107      	bne.n	800261c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f06f 0220 	mvn.w	r2, #32
 8002614:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002616:	6878      	ldr	r0, [r7, #4]
 8002618:	f000 fc96 	bl	8002f48 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800261c:	bf00      	nop
 800261e:	3708      	adds	r7, #8
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}

08002624 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b086      	sub	sp, #24
 8002628:	af00      	add	r7, sp, #0
 800262a:	60f8      	str	r0, [r7, #12]
 800262c:	60b9      	str	r1, [r7, #8]
 800262e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002630:	2300      	movs	r3, #0
 8002632:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800263a:	2b01      	cmp	r3, #1
 800263c:	d101      	bne.n	8002642 <HAL_TIM_IC_ConfigChannel+0x1e>
 800263e:	2302      	movs	r3, #2
 8002640:	e088      	b.n	8002754 <HAL_TIM_IC_ConfigChannel+0x130>
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	2201      	movs	r2, #1
 8002646:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d11b      	bne.n	8002688 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	6818      	ldr	r0, [r3, #0]
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	6819      	ldr	r1, [r3, #0]
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	685a      	ldr	r2, [r3, #4]
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	68db      	ldr	r3, [r3, #12]
 8002660:	f000 fa26 	bl	8002ab0 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	699a      	ldr	r2, [r3, #24]
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f022 020c 	bic.w	r2, r2, #12
 8002672:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	6999      	ldr	r1, [r3, #24]
 800267a:	68bb      	ldr	r3, [r7, #8]
 800267c:	689a      	ldr	r2, [r3, #8]
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	430a      	orrs	r2, r1
 8002684:	619a      	str	r2, [r3, #24]
 8002686:	e060      	b.n	800274a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2b04      	cmp	r3, #4
 800268c:	d11c      	bne.n	80026c8 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	6818      	ldr	r0, [r3, #0]
 8002692:	68bb      	ldr	r3, [r7, #8]
 8002694:	6819      	ldr	r1, [r3, #0]
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	685a      	ldr	r2, [r3, #4]
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	68db      	ldr	r3, [r3, #12]
 800269e:	f000 fa9e 	bl	8002bde <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	699a      	ldr	r2, [r3, #24]
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80026b0:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	6999      	ldr	r1, [r3, #24]
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	021a      	lsls	r2, r3, #8
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	430a      	orrs	r2, r1
 80026c4:	619a      	str	r2, [r3, #24]
 80026c6:	e040      	b.n	800274a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2b08      	cmp	r3, #8
 80026cc:	d11b      	bne.n	8002706 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	6818      	ldr	r0, [r3, #0]
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	6819      	ldr	r1, [r3, #0]
 80026d6:	68bb      	ldr	r3, [r7, #8]
 80026d8:	685a      	ldr	r2, [r3, #4]
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	68db      	ldr	r3, [r3, #12]
 80026de:	f000 faeb 	bl	8002cb8 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	69da      	ldr	r2, [r3, #28]
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f022 020c 	bic.w	r2, r2, #12
 80026f0:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	69d9      	ldr	r1, [r3, #28]
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	689a      	ldr	r2, [r3, #8]
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	430a      	orrs	r2, r1
 8002702:	61da      	str	r2, [r3, #28]
 8002704:	e021      	b.n	800274a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2b0c      	cmp	r3, #12
 800270a:	d11c      	bne.n	8002746 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	6818      	ldr	r0, [r3, #0]
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	6819      	ldr	r1, [r3, #0]
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	685a      	ldr	r2, [r3, #4]
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	68db      	ldr	r3, [r3, #12]
 800271c:	f000 fb08 	bl	8002d30 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	69da      	ldr	r2, [r3, #28]
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800272e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	69d9      	ldr	r1, [r3, #28]
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	021a      	lsls	r2, r3, #8
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	430a      	orrs	r2, r1
 8002742:	61da      	str	r2, [r3, #28]
 8002744:	e001      	b.n	800274a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	2200      	movs	r2, #0
 800274e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002752:	7dfb      	ldrb	r3, [r7, #23]
}
 8002754:	4618      	mov	r0, r3
 8002756:	3718      	adds	r7, #24
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}

0800275c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b084      	sub	sp, #16
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
 8002764:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002766:	2300      	movs	r3, #0
 8002768:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002770:	2b01      	cmp	r3, #1
 8002772:	d101      	bne.n	8002778 <HAL_TIM_ConfigClockSource+0x1c>
 8002774:	2302      	movs	r3, #2
 8002776:	e0b4      	b.n	80028e2 <HAL_TIM_ConfigClockSource+0x186>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2201      	movs	r2, #1
 800277c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2202      	movs	r2, #2
 8002784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002796:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800279e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	68ba      	ldr	r2, [r7, #8]
 80027a6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027b0:	d03e      	beq.n	8002830 <HAL_TIM_ConfigClockSource+0xd4>
 80027b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027b6:	f200 8087 	bhi.w	80028c8 <HAL_TIM_ConfigClockSource+0x16c>
 80027ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027be:	f000 8086 	beq.w	80028ce <HAL_TIM_ConfigClockSource+0x172>
 80027c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027c6:	d87f      	bhi.n	80028c8 <HAL_TIM_ConfigClockSource+0x16c>
 80027c8:	2b70      	cmp	r3, #112	; 0x70
 80027ca:	d01a      	beq.n	8002802 <HAL_TIM_ConfigClockSource+0xa6>
 80027cc:	2b70      	cmp	r3, #112	; 0x70
 80027ce:	d87b      	bhi.n	80028c8 <HAL_TIM_ConfigClockSource+0x16c>
 80027d0:	2b60      	cmp	r3, #96	; 0x60
 80027d2:	d050      	beq.n	8002876 <HAL_TIM_ConfigClockSource+0x11a>
 80027d4:	2b60      	cmp	r3, #96	; 0x60
 80027d6:	d877      	bhi.n	80028c8 <HAL_TIM_ConfigClockSource+0x16c>
 80027d8:	2b50      	cmp	r3, #80	; 0x50
 80027da:	d03c      	beq.n	8002856 <HAL_TIM_ConfigClockSource+0xfa>
 80027dc:	2b50      	cmp	r3, #80	; 0x50
 80027de:	d873      	bhi.n	80028c8 <HAL_TIM_ConfigClockSource+0x16c>
 80027e0:	2b40      	cmp	r3, #64	; 0x40
 80027e2:	d058      	beq.n	8002896 <HAL_TIM_ConfigClockSource+0x13a>
 80027e4:	2b40      	cmp	r3, #64	; 0x40
 80027e6:	d86f      	bhi.n	80028c8 <HAL_TIM_ConfigClockSource+0x16c>
 80027e8:	2b30      	cmp	r3, #48	; 0x30
 80027ea:	d064      	beq.n	80028b6 <HAL_TIM_ConfigClockSource+0x15a>
 80027ec:	2b30      	cmp	r3, #48	; 0x30
 80027ee:	d86b      	bhi.n	80028c8 <HAL_TIM_ConfigClockSource+0x16c>
 80027f0:	2b20      	cmp	r3, #32
 80027f2:	d060      	beq.n	80028b6 <HAL_TIM_ConfigClockSource+0x15a>
 80027f4:	2b20      	cmp	r3, #32
 80027f6:	d867      	bhi.n	80028c8 <HAL_TIM_ConfigClockSource+0x16c>
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d05c      	beq.n	80028b6 <HAL_TIM_ConfigClockSource+0x15a>
 80027fc:	2b10      	cmp	r3, #16
 80027fe:	d05a      	beq.n	80028b6 <HAL_TIM_ConfigClockSource+0x15a>
 8002800:	e062      	b.n	80028c8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6818      	ldr	r0, [r3, #0]
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	6899      	ldr	r1, [r3, #8]
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	685a      	ldr	r2, [r3, #4]
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	68db      	ldr	r3, [r3, #12]
 8002812:	f000 fae5 	bl	8002de0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002824:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	68ba      	ldr	r2, [r7, #8]
 800282c:	609a      	str	r2, [r3, #8]
      break;
 800282e:	e04f      	b.n	80028d0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6818      	ldr	r0, [r3, #0]
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	6899      	ldr	r1, [r3, #8]
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	685a      	ldr	r2, [r3, #4]
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	68db      	ldr	r3, [r3, #12]
 8002840:	f000 face 	bl	8002de0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	689a      	ldr	r2, [r3, #8]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002852:	609a      	str	r2, [r3, #8]
      break;
 8002854:	e03c      	b.n	80028d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6818      	ldr	r0, [r3, #0]
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	6859      	ldr	r1, [r3, #4]
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	68db      	ldr	r3, [r3, #12]
 8002862:	461a      	mov	r2, r3
 8002864:	f000 f98c 	bl	8002b80 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	2150      	movs	r1, #80	; 0x50
 800286e:	4618      	mov	r0, r3
 8002870:	f000 fa9b 	bl	8002daa <TIM_ITRx_SetConfig>
      break;
 8002874:	e02c      	b.n	80028d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6818      	ldr	r0, [r3, #0]
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	6859      	ldr	r1, [r3, #4]
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	68db      	ldr	r3, [r3, #12]
 8002882:	461a      	mov	r2, r3
 8002884:	f000 f9e8 	bl	8002c58 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	2160      	movs	r1, #96	; 0x60
 800288e:	4618      	mov	r0, r3
 8002890:	f000 fa8b 	bl	8002daa <TIM_ITRx_SetConfig>
      break;
 8002894:	e01c      	b.n	80028d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6818      	ldr	r0, [r3, #0]
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	6859      	ldr	r1, [r3, #4]
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	68db      	ldr	r3, [r3, #12]
 80028a2:	461a      	mov	r2, r3
 80028a4:	f000 f96c 	bl	8002b80 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	2140      	movs	r1, #64	; 0x40
 80028ae:	4618      	mov	r0, r3
 80028b0:	f000 fa7b 	bl	8002daa <TIM_ITRx_SetConfig>
      break;
 80028b4:	e00c      	b.n	80028d0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681a      	ldr	r2, [r3, #0]
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4619      	mov	r1, r3
 80028c0:	4610      	mov	r0, r2
 80028c2:	f000 fa72 	bl	8002daa <TIM_ITRx_SetConfig>
      break;
 80028c6:	e003      	b.n	80028d0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80028c8:	2301      	movs	r3, #1
 80028ca:	73fb      	strb	r3, [r7, #15]
      break;
 80028cc:	e000      	b.n	80028d0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80028ce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2201      	movs	r2, #1
 80028d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2200      	movs	r2, #0
 80028dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80028e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	3710      	adds	r7, #16
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}
	...

080028ec <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b085      	sub	sp, #20
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
 80028f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80028f6:	2300      	movs	r3, #0
 80028f8:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	2b0c      	cmp	r3, #12
 80028fe:	d831      	bhi.n	8002964 <HAL_TIM_ReadCapturedValue+0x78>
 8002900:	a201      	add	r2, pc, #4	; (adr r2, 8002908 <HAL_TIM_ReadCapturedValue+0x1c>)
 8002902:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002906:	bf00      	nop
 8002908:	0800293d 	.word	0x0800293d
 800290c:	08002965 	.word	0x08002965
 8002910:	08002965 	.word	0x08002965
 8002914:	08002965 	.word	0x08002965
 8002918:	08002947 	.word	0x08002947
 800291c:	08002965 	.word	0x08002965
 8002920:	08002965 	.word	0x08002965
 8002924:	08002965 	.word	0x08002965
 8002928:	08002951 	.word	0x08002951
 800292c:	08002965 	.word	0x08002965
 8002930:	08002965 	.word	0x08002965
 8002934:	08002965 	.word	0x08002965
 8002938:	0800295b 	.word	0x0800295b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002942:	60fb      	str	r3, [r7, #12]

      break;
 8002944:	e00f      	b.n	8002966 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800294c:	60fb      	str	r3, [r7, #12]

      break;
 800294e:	e00a      	b.n	8002966 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002956:	60fb      	str	r3, [r7, #12]

      break;
 8002958:	e005      	b.n	8002966 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002960:	60fb      	str	r3, [r7, #12]

      break;
 8002962:	e000      	b.n	8002966 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8002964:	bf00      	nop
  }

  return tmpreg;
 8002966:	68fb      	ldr	r3, [r7, #12]
}
 8002968:	4618      	mov	r0, r3
 800296a:	3714      	adds	r7, #20
 800296c:	46bd      	mov	sp, r7
 800296e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002972:	4770      	bx	lr

08002974 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002974:	b480      	push	{r7}
 8002976:	b083      	sub	sp, #12
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800297c:	bf00      	nop
 800297e:	370c      	adds	r7, #12
 8002980:	46bd      	mov	sp, r7
 8002982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002986:	4770      	bx	lr

08002988 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002988:	b480      	push	{r7}
 800298a:	b083      	sub	sp, #12
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002990:	bf00      	nop
 8002992:	370c      	adds	r7, #12
 8002994:	46bd      	mov	sp, r7
 8002996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299a:	4770      	bx	lr

0800299c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800299c:	b480      	push	{r7}
 800299e:	b083      	sub	sp, #12
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80029a4:	bf00      	nop
 80029a6:	370c      	adds	r7, #12
 80029a8:	46bd      	mov	sp, r7
 80029aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ae:	4770      	bx	lr

080029b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b085      	sub	sp, #20
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
 80029b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	4a34      	ldr	r2, [pc, #208]	; (8002a94 <TIM_Base_SetConfig+0xe4>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d00f      	beq.n	80029e8 <TIM_Base_SetConfig+0x38>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029ce:	d00b      	beq.n	80029e8 <TIM_Base_SetConfig+0x38>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	4a31      	ldr	r2, [pc, #196]	; (8002a98 <TIM_Base_SetConfig+0xe8>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d007      	beq.n	80029e8 <TIM_Base_SetConfig+0x38>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	4a30      	ldr	r2, [pc, #192]	; (8002a9c <TIM_Base_SetConfig+0xec>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d003      	beq.n	80029e8 <TIM_Base_SetConfig+0x38>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	4a2f      	ldr	r2, [pc, #188]	; (8002aa0 <TIM_Base_SetConfig+0xf0>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d108      	bne.n	80029fa <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	68fa      	ldr	r2, [r7, #12]
 80029f6:	4313      	orrs	r3, r2
 80029f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	4a25      	ldr	r2, [pc, #148]	; (8002a94 <TIM_Base_SetConfig+0xe4>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d01b      	beq.n	8002a3a <TIM_Base_SetConfig+0x8a>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a08:	d017      	beq.n	8002a3a <TIM_Base_SetConfig+0x8a>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	4a22      	ldr	r2, [pc, #136]	; (8002a98 <TIM_Base_SetConfig+0xe8>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d013      	beq.n	8002a3a <TIM_Base_SetConfig+0x8a>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	4a21      	ldr	r2, [pc, #132]	; (8002a9c <TIM_Base_SetConfig+0xec>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d00f      	beq.n	8002a3a <TIM_Base_SetConfig+0x8a>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	4a20      	ldr	r2, [pc, #128]	; (8002aa0 <TIM_Base_SetConfig+0xf0>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d00b      	beq.n	8002a3a <TIM_Base_SetConfig+0x8a>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	4a1f      	ldr	r2, [pc, #124]	; (8002aa4 <TIM_Base_SetConfig+0xf4>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d007      	beq.n	8002a3a <TIM_Base_SetConfig+0x8a>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	4a1e      	ldr	r2, [pc, #120]	; (8002aa8 <TIM_Base_SetConfig+0xf8>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d003      	beq.n	8002a3a <TIM_Base_SetConfig+0x8a>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	4a1d      	ldr	r2, [pc, #116]	; (8002aac <TIM_Base_SetConfig+0xfc>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d108      	bne.n	8002a4c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	68db      	ldr	r3, [r3, #12]
 8002a46:	68fa      	ldr	r2, [r7, #12]
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	695b      	ldr	r3, [r3, #20]
 8002a56:	4313      	orrs	r3, r2
 8002a58:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	68fa      	ldr	r2, [r7, #12]
 8002a5e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	689a      	ldr	r2, [r3, #8]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	681a      	ldr	r2, [r3, #0]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	4a08      	ldr	r2, [pc, #32]	; (8002a94 <TIM_Base_SetConfig+0xe4>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d103      	bne.n	8002a80 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	691a      	ldr	r2, [r3, #16]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2201      	movs	r2, #1
 8002a84:	615a      	str	r2, [r3, #20]
}
 8002a86:	bf00      	nop
 8002a88:	3714      	adds	r7, #20
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a90:	4770      	bx	lr
 8002a92:	bf00      	nop
 8002a94:	40010000 	.word	0x40010000
 8002a98:	40000400 	.word	0x40000400
 8002a9c:	40000800 	.word	0x40000800
 8002aa0:	40000c00 	.word	0x40000c00
 8002aa4:	40014000 	.word	0x40014000
 8002aa8:	40014400 	.word	0x40014400
 8002aac:	40014800 	.word	0x40014800

08002ab0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b087      	sub	sp, #28
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	60f8      	str	r0, [r7, #12]
 8002ab8:	60b9      	str	r1, [r7, #8]
 8002aba:	607a      	str	r2, [r7, #4]
 8002abc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	6a1b      	ldr	r3, [r3, #32]
 8002ac2:	f023 0201 	bic.w	r2, r3, #1
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	699b      	ldr	r3, [r3, #24]
 8002ace:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	6a1b      	ldr	r3, [r3, #32]
 8002ad4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	4a24      	ldr	r2, [pc, #144]	; (8002b6c <TIM_TI1_SetConfig+0xbc>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d013      	beq.n	8002b06 <TIM_TI1_SetConfig+0x56>
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ae4:	d00f      	beq.n	8002b06 <TIM_TI1_SetConfig+0x56>
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	4a21      	ldr	r2, [pc, #132]	; (8002b70 <TIM_TI1_SetConfig+0xc0>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d00b      	beq.n	8002b06 <TIM_TI1_SetConfig+0x56>
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	4a20      	ldr	r2, [pc, #128]	; (8002b74 <TIM_TI1_SetConfig+0xc4>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d007      	beq.n	8002b06 <TIM_TI1_SetConfig+0x56>
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	4a1f      	ldr	r2, [pc, #124]	; (8002b78 <TIM_TI1_SetConfig+0xc8>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d003      	beq.n	8002b06 <TIM_TI1_SetConfig+0x56>
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	4a1e      	ldr	r2, [pc, #120]	; (8002b7c <TIM_TI1_SetConfig+0xcc>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d101      	bne.n	8002b0a <TIM_TI1_SetConfig+0x5a>
 8002b06:	2301      	movs	r3, #1
 8002b08:	e000      	b.n	8002b0c <TIM_TI1_SetConfig+0x5c>
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d008      	beq.n	8002b22 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	f023 0303 	bic.w	r3, r3, #3
 8002b16:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8002b18:	697a      	ldr	r2, [r7, #20]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	617b      	str	r3, [r7, #20]
 8002b20:	e003      	b.n	8002b2a <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	f043 0301 	orr.w	r3, r3, #1
 8002b28:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b30:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	011b      	lsls	r3, r3, #4
 8002b36:	b2db      	uxtb	r3, r3
 8002b38:	697a      	ldr	r2, [r7, #20]
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	f023 030a 	bic.w	r3, r3, #10
 8002b44:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	f003 030a 	and.w	r3, r3, #10
 8002b4c:	693a      	ldr	r2, [r7, #16]
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	697a      	ldr	r2, [r7, #20]
 8002b56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	693a      	ldr	r2, [r7, #16]
 8002b5c:	621a      	str	r2, [r3, #32]
}
 8002b5e:	bf00      	nop
 8002b60:	371c      	adds	r7, #28
 8002b62:	46bd      	mov	sp, r7
 8002b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b68:	4770      	bx	lr
 8002b6a:	bf00      	nop
 8002b6c:	40010000 	.word	0x40010000
 8002b70:	40000400 	.word	0x40000400
 8002b74:	40000800 	.word	0x40000800
 8002b78:	40000c00 	.word	0x40000c00
 8002b7c:	40014000 	.word	0x40014000

08002b80 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b087      	sub	sp, #28
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	60f8      	str	r0, [r7, #12]
 8002b88:	60b9      	str	r1, [r7, #8]
 8002b8a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	6a1b      	ldr	r3, [r3, #32]
 8002b90:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	6a1b      	ldr	r3, [r3, #32]
 8002b96:	f023 0201 	bic.w	r2, r3, #1
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	699b      	ldr	r3, [r3, #24]
 8002ba2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002ba4:	693b      	ldr	r3, [r7, #16]
 8002ba6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002baa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	011b      	lsls	r3, r3, #4
 8002bb0:	693a      	ldr	r2, [r7, #16]
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	f023 030a 	bic.w	r3, r3, #10
 8002bbc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002bbe:	697a      	ldr	r2, [r7, #20]
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	693a      	ldr	r2, [r7, #16]
 8002bca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	697a      	ldr	r2, [r7, #20]
 8002bd0:	621a      	str	r2, [r3, #32]
}
 8002bd2:	bf00      	nop
 8002bd4:	371c      	adds	r7, #28
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bdc:	4770      	bx	lr

08002bde <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002bde:	b480      	push	{r7}
 8002be0:	b087      	sub	sp, #28
 8002be2:	af00      	add	r7, sp, #0
 8002be4:	60f8      	str	r0, [r7, #12]
 8002be6:	60b9      	str	r1, [r7, #8]
 8002be8:	607a      	str	r2, [r7, #4]
 8002bea:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	6a1b      	ldr	r3, [r3, #32]
 8002bf0:	f023 0210 	bic.w	r2, r3, #16
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	699b      	ldr	r3, [r3, #24]
 8002bfc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	6a1b      	ldr	r3, [r3, #32]
 8002c02:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c0a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	021b      	lsls	r3, r3, #8
 8002c10:	697a      	ldr	r2, [r7, #20]
 8002c12:	4313      	orrs	r3, r2
 8002c14:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002c1c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	031b      	lsls	r3, r3, #12
 8002c22:	b29b      	uxth	r3, r3
 8002c24:	697a      	ldr	r2, [r7, #20]
 8002c26:	4313      	orrs	r3, r2
 8002c28:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002c30:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	011b      	lsls	r3, r3, #4
 8002c36:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8002c3a:	693a      	ldr	r2, [r7, #16]
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	697a      	ldr	r2, [r7, #20]
 8002c44:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	693a      	ldr	r2, [r7, #16]
 8002c4a:	621a      	str	r2, [r3, #32]
}
 8002c4c:	bf00      	nop
 8002c4e:	371c      	adds	r7, #28
 8002c50:	46bd      	mov	sp, r7
 8002c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c56:	4770      	bx	lr

08002c58 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b087      	sub	sp, #28
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	60f8      	str	r0, [r7, #12]
 8002c60:	60b9      	str	r1, [r7, #8]
 8002c62:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	6a1b      	ldr	r3, [r3, #32]
 8002c68:	f023 0210 	bic.w	r2, r3, #16
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	699b      	ldr	r3, [r3, #24]
 8002c74:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	6a1b      	ldr	r3, [r3, #32]
 8002c7a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002c82:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	031b      	lsls	r3, r3, #12
 8002c88:	697a      	ldr	r2, [r7, #20]
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002c94:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	011b      	lsls	r3, r3, #4
 8002c9a:	693a      	ldr	r2, [r7, #16]
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	697a      	ldr	r2, [r7, #20]
 8002ca4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	693a      	ldr	r2, [r7, #16]
 8002caa:	621a      	str	r2, [r3, #32]
}
 8002cac:	bf00      	nop
 8002cae:	371c      	adds	r7, #28
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb6:	4770      	bx	lr

08002cb8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b087      	sub	sp, #28
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	60f8      	str	r0, [r7, #12]
 8002cc0:	60b9      	str	r1, [r7, #8]
 8002cc2:	607a      	str	r2, [r7, #4]
 8002cc4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	6a1b      	ldr	r3, [r3, #32]
 8002cca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	69db      	ldr	r3, [r3, #28]
 8002cd6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	6a1b      	ldr	r3, [r3, #32]
 8002cdc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	f023 0303 	bic.w	r3, r3, #3
 8002ce4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8002ce6:	697a      	ldr	r2, [r7, #20]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	4313      	orrs	r3, r2
 8002cec:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002cf4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	011b      	lsls	r3, r3, #4
 8002cfa:	b2db      	uxtb	r3, r3
 8002cfc:	697a      	ldr	r2, [r7, #20]
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8002d08:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	021b      	lsls	r3, r3, #8
 8002d0e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8002d12:	693a      	ldr	r2, [r7, #16]
 8002d14:	4313      	orrs	r3, r2
 8002d16:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	697a      	ldr	r2, [r7, #20]
 8002d1c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	693a      	ldr	r2, [r7, #16]
 8002d22:	621a      	str	r2, [r3, #32]
}
 8002d24:	bf00      	nop
 8002d26:	371c      	adds	r7, #28
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2e:	4770      	bx	lr

08002d30 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b087      	sub	sp, #28
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	60f8      	str	r0, [r7, #12]
 8002d38:	60b9      	str	r1, [r7, #8]
 8002d3a:	607a      	str	r2, [r7, #4]
 8002d3c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	6a1b      	ldr	r3, [r3, #32]
 8002d42:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	69db      	ldr	r3, [r3, #28]
 8002d4e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	6a1b      	ldr	r3, [r3, #32]
 8002d54:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d5c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	021b      	lsls	r3, r3, #8
 8002d62:	697a      	ldr	r2, [r7, #20]
 8002d64:	4313      	orrs	r3, r2
 8002d66:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8002d68:	697b      	ldr	r3, [r7, #20]
 8002d6a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002d6e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	031b      	lsls	r3, r3, #12
 8002d74:	b29b      	uxth	r3, r3
 8002d76:	697a      	ldr	r2, [r7, #20]
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8002d7c:	693b      	ldr	r3, [r7, #16]
 8002d7e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8002d82:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	031b      	lsls	r3, r3, #12
 8002d88:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8002d8c:	693a      	ldr	r2, [r7, #16]
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	697a      	ldr	r2, [r7, #20]
 8002d96:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	693a      	ldr	r2, [r7, #16]
 8002d9c:	621a      	str	r2, [r3, #32]
}
 8002d9e:	bf00      	nop
 8002da0:	371c      	adds	r7, #28
 8002da2:	46bd      	mov	sp, r7
 8002da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da8:	4770      	bx	lr

08002daa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002daa:	b480      	push	{r7}
 8002dac:	b085      	sub	sp, #20
 8002dae:	af00      	add	r7, sp, #0
 8002db0:	6078      	str	r0, [r7, #4]
 8002db2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dc0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002dc2:	683a      	ldr	r2, [r7, #0]
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	f043 0307 	orr.w	r3, r3, #7
 8002dcc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	68fa      	ldr	r2, [r7, #12]
 8002dd2:	609a      	str	r2, [r3, #8]
}
 8002dd4:	bf00      	nop
 8002dd6:	3714      	adds	r7, #20
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dde:	4770      	bx	lr

08002de0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b087      	sub	sp, #28
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	60f8      	str	r0, [r7, #12]
 8002de8:	60b9      	str	r1, [r7, #8]
 8002dea:	607a      	str	r2, [r7, #4]
 8002dec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	689b      	ldr	r3, [r3, #8]
 8002df2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002dfa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	021a      	lsls	r2, r3, #8
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	431a      	orrs	r2, r3
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	4313      	orrs	r3, r2
 8002e08:	697a      	ldr	r2, [r7, #20]
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	697a      	ldr	r2, [r7, #20]
 8002e12:	609a      	str	r2, [r3, #8]
}
 8002e14:	bf00      	nop
 8002e16:	371c      	adds	r7, #28
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1e:	4770      	bx	lr

08002e20 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b087      	sub	sp, #28
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	60f8      	str	r0, [r7, #12]
 8002e28:	60b9      	str	r1, [r7, #8]
 8002e2a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	f003 031f 	and.w	r3, r3, #31
 8002e32:	2201      	movs	r2, #1
 8002e34:	fa02 f303 	lsl.w	r3, r2, r3
 8002e38:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	6a1a      	ldr	r2, [r3, #32]
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	43db      	mvns	r3, r3
 8002e42:	401a      	ands	r2, r3
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	6a1a      	ldr	r2, [r3, #32]
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	f003 031f 	and.w	r3, r3, #31
 8002e52:	6879      	ldr	r1, [r7, #4]
 8002e54:	fa01 f303 	lsl.w	r3, r1, r3
 8002e58:	431a      	orrs	r2, r3
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	621a      	str	r2, [r3, #32]
}
 8002e5e:	bf00      	nop
 8002e60:	371c      	adds	r7, #28
 8002e62:	46bd      	mov	sp, r7
 8002e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e68:	4770      	bx	lr
	...

08002e6c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b085      	sub	sp, #20
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
 8002e74:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d101      	bne.n	8002e84 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002e80:	2302      	movs	r3, #2
 8002e82:	e050      	b.n	8002f26 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2201      	movs	r2, #1
 8002e88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2202      	movs	r2, #2
 8002e90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002eaa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	68fa      	ldr	r2, [r7, #12]
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	68fa      	ldr	r2, [r7, #12]
 8002ebc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a1c      	ldr	r2, [pc, #112]	; (8002f34 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d018      	beq.n	8002efa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ed0:	d013      	beq.n	8002efa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a18      	ldr	r2, [pc, #96]	; (8002f38 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d00e      	beq.n	8002efa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a16      	ldr	r2, [pc, #88]	; (8002f3c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d009      	beq.n	8002efa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a15      	ldr	r2, [pc, #84]	; (8002f40 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d004      	beq.n	8002efa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a13      	ldr	r2, [pc, #76]	; (8002f44 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d10c      	bne.n	8002f14 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f00:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	68ba      	ldr	r2, [r7, #8]
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	68ba      	ldr	r2, [r7, #8]
 8002f12:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2201      	movs	r2, #1
 8002f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f24:	2300      	movs	r3, #0
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	3714      	adds	r7, #20
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f30:	4770      	bx	lr
 8002f32:	bf00      	nop
 8002f34:	40010000 	.word	0x40010000
 8002f38:	40000400 	.word	0x40000400
 8002f3c:	40000800 	.word	0x40000800
 8002f40:	40000c00 	.word	0x40000c00
 8002f44:	40014000 	.word	0x40014000

08002f48 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b083      	sub	sp, #12
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002f50:	bf00      	nop
 8002f52:	370c      	adds	r7, #12
 8002f54:	46bd      	mov	sp, r7
 8002f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5a:	4770      	bx	lr

08002f5c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b083      	sub	sp, #12
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002f64:	bf00      	nop
 8002f66:	370c      	adds	r7, #12
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6e:	4770      	bx	lr

08002f70 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b085      	sub	sp, #20
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	4603      	mov	r3, r0
 8002f78:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8002f7e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f82:	2b84      	cmp	r3, #132	; 0x84
 8002f84:	d005      	beq.n	8002f92 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8002f86:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	4413      	add	r3, r2
 8002f8e:	3303      	adds	r3, #3
 8002f90:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8002f92:	68fb      	ldr	r3, [r7, #12]
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	3714      	adds	r7, #20
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9e:	4770      	bx	lr

08002fa0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002fa4:	f000 faca 	bl	800353c <vTaskStartScheduler>
  
  return osOK;
 8002fa8:	2300      	movs	r3, #0
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	bd80      	pop	{r7, pc}

08002fae <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002fae:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002fb0:	b089      	sub	sp, #36	; 0x24
 8002fb2:	af04      	add	r7, sp, #16
 8002fb4:	6078      	str	r0, [r7, #4]
 8002fb6:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	695b      	ldr	r3, [r3, #20]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d020      	beq.n	8003002 <osThreadCreate+0x54>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	699b      	ldr	r3, [r3, #24]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d01c      	beq.n	8003002 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	685c      	ldr	r4, [r3, #4]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	691e      	ldr	r6, [r3, #16]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f7ff ffc8 	bl	8002f70 <makeFreeRtosPriority>
 8002fe0:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	695b      	ldr	r3, [r3, #20]
 8002fe6:	687a      	ldr	r2, [r7, #4]
 8002fe8:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002fea:	9202      	str	r2, [sp, #8]
 8002fec:	9301      	str	r3, [sp, #4]
 8002fee:	9100      	str	r1, [sp, #0]
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	4632      	mov	r2, r6
 8002ff4:	4629      	mov	r1, r5
 8002ff6:	4620      	mov	r0, r4
 8002ff8:	f000 f8d9 	bl	80031ae <xTaskCreateStatic>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	60fb      	str	r3, [r7, #12]
 8003000:	e01c      	b.n	800303c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	685c      	ldr	r4, [r3, #4]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800300e:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003016:	4618      	mov	r0, r3
 8003018:	f7ff ffaa 	bl	8002f70 <makeFreeRtosPriority>
 800301c:	4602      	mov	r2, r0
 800301e:	f107 030c 	add.w	r3, r7, #12
 8003022:	9301      	str	r3, [sp, #4]
 8003024:	9200      	str	r2, [sp, #0]
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	4632      	mov	r2, r6
 800302a:	4629      	mov	r1, r5
 800302c:	4620      	mov	r0, r4
 800302e:	f000 f91b 	bl	8003268 <xTaskCreate>
 8003032:	4603      	mov	r3, r0
 8003034:	2b01      	cmp	r3, #1
 8003036:	d001      	beq.n	800303c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003038:	2300      	movs	r3, #0
 800303a:	e000      	b.n	800303e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800303c:	68fb      	ldr	r3, [r7, #12]
}
 800303e:	4618      	mov	r0, r3
 8003040:	3714      	adds	r7, #20
 8003042:	46bd      	mov	sp, r7
 8003044:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003046 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003046:	b480      	push	{r7}
 8003048:	b083      	sub	sp, #12
 800304a:	af00      	add	r7, sp, #0
 800304c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	f103 0208 	add.w	r2, r3, #8
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	f04f 32ff 	mov.w	r2, #4294967295
 800305e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	f103 0208 	add.w	r2, r3, #8
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	f103 0208 	add.w	r2, r3, #8
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2200      	movs	r2, #0
 8003078:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800307a:	bf00      	nop
 800307c:	370c      	adds	r7, #12
 800307e:	46bd      	mov	sp, r7
 8003080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003084:	4770      	bx	lr

08003086 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003086:	b480      	push	{r7}
 8003088:	b083      	sub	sp, #12
 800308a:	af00      	add	r7, sp, #0
 800308c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2200      	movs	r2, #0
 8003092:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003094:	bf00      	nop
 8003096:	370c      	adds	r7, #12
 8003098:	46bd      	mov	sp, r7
 800309a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309e:	4770      	bx	lr

080030a0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80030a0:	b480      	push	{r7}
 80030a2:	b085      	sub	sp, #20
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
 80030a8:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	68fa      	ldr	r2, [r7, #12]
 80030b4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	689a      	ldr	r2, [r3, #8]
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	689b      	ldr	r3, [r3, #8]
 80030c2:	683a      	ldr	r2, [r7, #0]
 80030c4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	683a      	ldr	r2, [r7, #0]
 80030ca:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	687a      	ldr	r2, [r7, #4]
 80030d0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	1c5a      	adds	r2, r3, #1
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	601a      	str	r2, [r3, #0]
}
 80030dc:	bf00      	nop
 80030de:	3714      	adds	r7, #20
 80030e0:	46bd      	mov	sp, r7
 80030e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e6:	4770      	bx	lr

080030e8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80030e8:	b480      	push	{r7}
 80030ea:	b085      	sub	sp, #20
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
 80030f0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030fe:	d103      	bne.n	8003108 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	691b      	ldr	r3, [r3, #16]
 8003104:	60fb      	str	r3, [r7, #12]
 8003106:	e00c      	b.n	8003122 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	3308      	adds	r3, #8
 800310c:	60fb      	str	r3, [r7, #12]
 800310e:	e002      	b.n	8003116 <vListInsert+0x2e>
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	60fb      	str	r3, [r7, #12]
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	68ba      	ldr	r2, [r7, #8]
 800311e:	429a      	cmp	r2, r3
 8003120:	d2f6      	bcs.n	8003110 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	685a      	ldr	r2, [r3, #4]
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	683a      	ldr	r2, [r7, #0]
 8003130:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	68fa      	ldr	r2, [r7, #12]
 8003136:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	683a      	ldr	r2, [r7, #0]
 800313c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	687a      	ldr	r2, [r7, #4]
 8003142:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	1c5a      	adds	r2, r3, #1
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	601a      	str	r2, [r3, #0]
}
 800314e:	bf00      	nop
 8003150:	3714      	adds	r7, #20
 8003152:	46bd      	mov	sp, r7
 8003154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003158:	4770      	bx	lr

0800315a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800315a:	b480      	push	{r7}
 800315c:	b085      	sub	sp, #20
 800315e:	af00      	add	r7, sp, #0
 8003160:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	691b      	ldr	r3, [r3, #16]
 8003166:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	687a      	ldr	r2, [r7, #4]
 800316e:	6892      	ldr	r2, [r2, #8]
 8003170:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	689b      	ldr	r3, [r3, #8]
 8003176:	687a      	ldr	r2, [r7, #4]
 8003178:	6852      	ldr	r2, [r2, #4]
 800317a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	687a      	ldr	r2, [r7, #4]
 8003182:	429a      	cmp	r2, r3
 8003184:	d103      	bne.n	800318e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	689a      	ldr	r2, [r3, #8]
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2200      	movs	r2, #0
 8003192:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	1e5a      	subs	r2, r3, #1
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	3714      	adds	r7, #20
 80031a6:	46bd      	mov	sp, r7
 80031a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ac:	4770      	bx	lr

080031ae <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80031ae:	b580      	push	{r7, lr}
 80031b0:	b08e      	sub	sp, #56	; 0x38
 80031b2:	af04      	add	r7, sp, #16
 80031b4:	60f8      	str	r0, [r7, #12]
 80031b6:	60b9      	str	r1, [r7, #8]
 80031b8:	607a      	str	r2, [r7, #4]
 80031ba:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80031bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d10a      	bne.n	80031d8 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80031c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031c6:	f383 8811 	msr	BASEPRI, r3
 80031ca:	f3bf 8f6f 	isb	sy
 80031ce:	f3bf 8f4f 	dsb	sy
 80031d2:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80031d4:	bf00      	nop
 80031d6:	e7fe      	b.n	80031d6 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80031d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d10a      	bne.n	80031f4 <xTaskCreateStatic+0x46>
	__asm volatile
 80031de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031e2:	f383 8811 	msr	BASEPRI, r3
 80031e6:	f3bf 8f6f 	isb	sy
 80031ea:	f3bf 8f4f 	dsb	sy
 80031ee:	61fb      	str	r3, [r7, #28]
}
 80031f0:	bf00      	nop
 80031f2:	e7fe      	b.n	80031f2 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80031f4:	2354      	movs	r3, #84	; 0x54
 80031f6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	2b54      	cmp	r3, #84	; 0x54
 80031fc:	d00a      	beq.n	8003214 <xTaskCreateStatic+0x66>
	__asm volatile
 80031fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003202:	f383 8811 	msr	BASEPRI, r3
 8003206:	f3bf 8f6f 	isb	sy
 800320a:	f3bf 8f4f 	dsb	sy
 800320e:	61bb      	str	r3, [r7, #24]
}
 8003210:	bf00      	nop
 8003212:	e7fe      	b.n	8003212 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003214:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003218:	2b00      	cmp	r3, #0
 800321a:	d01e      	beq.n	800325a <xTaskCreateStatic+0xac>
 800321c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800321e:	2b00      	cmp	r3, #0
 8003220:	d01b      	beq.n	800325a <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003222:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003224:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003228:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800322a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800322c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800322e:	2202      	movs	r2, #2
 8003230:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003234:	2300      	movs	r3, #0
 8003236:	9303      	str	r3, [sp, #12]
 8003238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800323a:	9302      	str	r3, [sp, #8]
 800323c:	f107 0314 	add.w	r3, r7, #20
 8003240:	9301      	str	r3, [sp, #4]
 8003242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003244:	9300      	str	r3, [sp, #0]
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	687a      	ldr	r2, [r7, #4]
 800324a:	68b9      	ldr	r1, [r7, #8]
 800324c:	68f8      	ldr	r0, [r7, #12]
 800324e:	f000 f850 	bl	80032f2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003252:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003254:	f000 f8d4 	bl	8003400 <prvAddNewTaskToReadyList>
 8003258:	e001      	b.n	800325e <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800325a:	2300      	movs	r3, #0
 800325c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800325e:	697b      	ldr	r3, [r7, #20]
	}
 8003260:	4618      	mov	r0, r3
 8003262:	3728      	adds	r7, #40	; 0x28
 8003264:	46bd      	mov	sp, r7
 8003266:	bd80      	pop	{r7, pc}

08003268 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003268:	b580      	push	{r7, lr}
 800326a:	b08c      	sub	sp, #48	; 0x30
 800326c:	af04      	add	r7, sp, #16
 800326e:	60f8      	str	r0, [r7, #12]
 8003270:	60b9      	str	r1, [r7, #8]
 8003272:	603b      	str	r3, [r7, #0]
 8003274:	4613      	mov	r3, r2
 8003276:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003278:	88fb      	ldrh	r3, [r7, #6]
 800327a:	009b      	lsls	r3, r3, #2
 800327c:	4618      	mov	r0, r3
 800327e:	f000 fec3 	bl	8004008 <pvPortMalloc>
 8003282:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d00e      	beq.n	80032a8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800328a:	2054      	movs	r0, #84	; 0x54
 800328c:	f000 febc 	bl	8004008 <pvPortMalloc>
 8003290:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003292:	69fb      	ldr	r3, [r7, #28]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d003      	beq.n	80032a0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003298:	69fb      	ldr	r3, [r7, #28]
 800329a:	697a      	ldr	r2, [r7, #20]
 800329c:	631a      	str	r2, [r3, #48]	; 0x30
 800329e:	e005      	b.n	80032ac <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80032a0:	6978      	ldr	r0, [r7, #20]
 80032a2:	f000 ff7d 	bl	80041a0 <vPortFree>
 80032a6:	e001      	b.n	80032ac <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80032a8:	2300      	movs	r3, #0
 80032aa:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80032ac:	69fb      	ldr	r3, [r7, #28]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d017      	beq.n	80032e2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80032b2:	69fb      	ldr	r3, [r7, #28]
 80032b4:	2200      	movs	r2, #0
 80032b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80032ba:	88fa      	ldrh	r2, [r7, #6]
 80032bc:	2300      	movs	r3, #0
 80032be:	9303      	str	r3, [sp, #12]
 80032c0:	69fb      	ldr	r3, [r7, #28]
 80032c2:	9302      	str	r3, [sp, #8]
 80032c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032c6:	9301      	str	r3, [sp, #4]
 80032c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032ca:	9300      	str	r3, [sp, #0]
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	68b9      	ldr	r1, [r7, #8]
 80032d0:	68f8      	ldr	r0, [r7, #12]
 80032d2:	f000 f80e 	bl	80032f2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80032d6:	69f8      	ldr	r0, [r7, #28]
 80032d8:	f000 f892 	bl	8003400 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80032dc:	2301      	movs	r3, #1
 80032de:	61bb      	str	r3, [r7, #24]
 80032e0:	e002      	b.n	80032e8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80032e2:	f04f 33ff 	mov.w	r3, #4294967295
 80032e6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80032e8:	69bb      	ldr	r3, [r7, #24]
	}
 80032ea:	4618      	mov	r0, r3
 80032ec:	3720      	adds	r7, #32
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}

080032f2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80032f2:	b580      	push	{r7, lr}
 80032f4:	b088      	sub	sp, #32
 80032f6:	af00      	add	r7, sp, #0
 80032f8:	60f8      	str	r0, [r7, #12]
 80032fa:	60b9      	str	r1, [r7, #8]
 80032fc:	607a      	str	r2, [r7, #4]
 80032fe:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003302:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800330a:	3b01      	subs	r3, #1
 800330c:	009b      	lsls	r3, r3, #2
 800330e:	4413      	add	r3, r2
 8003310:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003312:	69bb      	ldr	r3, [r7, #24]
 8003314:	f023 0307 	bic.w	r3, r3, #7
 8003318:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800331a:	69bb      	ldr	r3, [r7, #24]
 800331c:	f003 0307 	and.w	r3, r3, #7
 8003320:	2b00      	cmp	r3, #0
 8003322:	d00a      	beq.n	800333a <prvInitialiseNewTask+0x48>
	__asm volatile
 8003324:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003328:	f383 8811 	msr	BASEPRI, r3
 800332c:	f3bf 8f6f 	isb	sy
 8003330:	f3bf 8f4f 	dsb	sy
 8003334:	617b      	str	r3, [r7, #20]
}
 8003336:	bf00      	nop
 8003338:	e7fe      	b.n	8003338 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d01f      	beq.n	8003380 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003340:	2300      	movs	r3, #0
 8003342:	61fb      	str	r3, [r7, #28]
 8003344:	e012      	b.n	800336c <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003346:	68ba      	ldr	r2, [r7, #8]
 8003348:	69fb      	ldr	r3, [r7, #28]
 800334a:	4413      	add	r3, r2
 800334c:	7819      	ldrb	r1, [r3, #0]
 800334e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003350:	69fb      	ldr	r3, [r7, #28]
 8003352:	4413      	add	r3, r2
 8003354:	3334      	adds	r3, #52	; 0x34
 8003356:	460a      	mov	r2, r1
 8003358:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800335a:	68ba      	ldr	r2, [r7, #8]
 800335c:	69fb      	ldr	r3, [r7, #28]
 800335e:	4413      	add	r3, r2
 8003360:	781b      	ldrb	r3, [r3, #0]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d006      	beq.n	8003374 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003366:	69fb      	ldr	r3, [r7, #28]
 8003368:	3301      	adds	r3, #1
 800336a:	61fb      	str	r3, [r7, #28]
 800336c:	69fb      	ldr	r3, [r7, #28]
 800336e:	2b0f      	cmp	r3, #15
 8003370:	d9e9      	bls.n	8003346 <prvInitialiseNewTask+0x54>
 8003372:	e000      	b.n	8003376 <prvInitialiseNewTask+0x84>
			{
				break;
 8003374:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003378:	2200      	movs	r2, #0
 800337a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800337e:	e003      	b.n	8003388 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003382:	2200      	movs	r2, #0
 8003384:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800338a:	2b06      	cmp	r3, #6
 800338c:	d901      	bls.n	8003392 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800338e:	2306      	movs	r3, #6
 8003390:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003394:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003396:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800339a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800339c:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800339e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033a0:	2200      	movs	r2, #0
 80033a2:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80033a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033a6:	3304      	adds	r3, #4
 80033a8:	4618      	mov	r0, r3
 80033aa:	f7ff fe6c 	bl	8003086 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80033ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033b0:	3318      	adds	r3, #24
 80033b2:	4618      	mov	r0, r3
 80033b4:	f7ff fe67 	bl	8003086 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80033b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033bc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80033be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033c0:	f1c3 0207 	rsb	r2, r3, #7
 80033c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033c6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80033c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033cc:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80033ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033d0:	2200      	movs	r2, #0
 80033d2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80033d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033d6:	2200      	movs	r2, #0
 80033d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80033dc:	683a      	ldr	r2, [r7, #0]
 80033de:	68f9      	ldr	r1, [r7, #12]
 80033e0:	69b8      	ldr	r0, [r7, #24]
 80033e2:	f000 fc05 	bl	8003bf0 <pxPortInitialiseStack>
 80033e6:	4602      	mov	r2, r0
 80033e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033ea:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80033ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d002      	beq.n	80033f8 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80033f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033f6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80033f8:	bf00      	nop
 80033fa:	3720      	adds	r7, #32
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bd80      	pop	{r7, pc}

08003400 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b082      	sub	sp, #8
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003408:	f000 fd1c 	bl	8003e44 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800340c:	4b2a      	ldr	r3, [pc, #168]	; (80034b8 <prvAddNewTaskToReadyList+0xb8>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	3301      	adds	r3, #1
 8003412:	4a29      	ldr	r2, [pc, #164]	; (80034b8 <prvAddNewTaskToReadyList+0xb8>)
 8003414:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003416:	4b29      	ldr	r3, [pc, #164]	; (80034bc <prvAddNewTaskToReadyList+0xbc>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d109      	bne.n	8003432 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800341e:	4a27      	ldr	r2, [pc, #156]	; (80034bc <prvAddNewTaskToReadyList+0xbc>)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003424:	4b24      	ldr	r3, [pc, #144]	; (80034b8 <prvAddNewTaskToReadyList+0xb8>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	2b01      	cmp	r3, #1
 800342a:	d110      	bne.n	800344e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800342c:	f000 fabc 	bl	80039a8 <prvInitialiseTaskLists>
 8003430:	e00d      	b.n	800344e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003432:	4b23      	ldr	r3, [pc, #140]	; (80034c0 <prvAddNewTaskToReadyList+0xc0>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d109      	bne.n	800344e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800343a:	4b20      	ldr	r3, [pc, #128]	; (80034bc <prvAddNewTaskToReadyList+0xbc>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003444:	429a      	cmp	r2, r3
 8003446:	d802      	bhi.n	800344e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003448:	4a1c      	ldr	r2, [pc, #112]	; (80034bc <prvAddNewTaskToReadyList+0xbc>)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800344e:	4b1d      	ldr	r3, [pc, #116]	; (80034c4 <prvAddNewTaskToReadyList+0xc4>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	3301      	adds	r3, #1
 8003454:	4a1b      	ldr	r2, [pc, #108]	; (80034c4 <prvAddNewTaskToReadyList+0xc4>)
 8003456:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800345c:	2201      	movs	r2, #1
 800345e:	409a      	lsls	r2, r3
 8003460:	4b19      	ldr	r3, [pc, #100]	; (80034c8 <prvAddNewTaskToReadyList+0xc8>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4313      	orrs	r3, r2
 8003466:	4a18      	ldr	r2, [pc, #96]	; (80034c8 <prvAddNewTaskToReadyList+0xc8>)
 8003468:	6013      	str	r3, [r2, #0]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800346e:	4613      	mov	r3, r2
 8003470:	009b      	lsls	r3, r3, #2
 8003472:	4413      	add	r3, r2
 8003474:	009b      	lsls	r3, r3, #2
 8003476:	4a15      	ldr	r2, [pc, #84]	; (80034cc <prvAddNewTaskToReadyList+0xcc>)
 8003478:	441a      	add	r2, r3
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	3304      	adds	r3, #4
 800347e:	4619      	mov	r1, r3
 8003480:	4610      	mov	r0, r2
 8003482:	f7ff fe0d 	bl	80030a0 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003486:	f000 fd0d 	bl	8003ea4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800348a:	4b0d      	ldr	r3, [pc, #52]	; (80034c0 <prvAddNewTaskToReadyList+0xc0>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d00e      	beq.n	80034b0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003492:	4b0a      	ldr	r3, [pc, #40]	; (80034bc <prvAddNewTaskToReadyList+0xbc>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800349c:	429a      	cmp	r2, r3
 800349e:	d207      	bcs.n	80034b0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80034a0:	4b0b      	ldr	r3, [pc, #44]	; (80034d0 <prvAddNewTaskToReadyList+0xd0>)
 80034a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034a6:	601a      	str	r2, [r3, #0]
 80034a8:	f3bf 8f4f 	dsb	sy
 80034ac:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80034b0:	bf00      	nop
 80034b2:	3708      	adds	r7, #8
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd80      	pop	{r7, pc}
 80034b8:	200004e8 	.word	0x200004e8
 80034bc:	200003e8 	.word	0x200003e8
 80034c0:	200004f4 	.word	0x200004f4
 80034c4:	20000504 	.word	0x20000504
 80034c8:	200004f0 	.word	0x200004f0
 80034cc:	200003ec 	.word	0x200003ec
 80034d0:	e000ed04 	.word	0xe000ed04

080034d4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b084      	sub	sp, #16
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80034dc:	2300      	movs	r3, #0
 80034de:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d017      	beq.n	8003516 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80034e6:	4b13      	ldr	r3, [pc, #76]	; (8003534 <vTaskDelay+0x60>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d00a      	beq.n	8003504 <vTaskDelay+0x30>
	__asm volatile
 80034ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034f2:	f383 8811 	msr	BASEPRI, r3
 80034f6:	f3bf 8f6f 	isb	sy
 80034fa:	f3bf 8f4f 	dsb	sy
 80034fe:	60bb      	str	r3, [r7, #8]
}
 8003500:	bf00      	nop
 8003502:	e7fe      	b.n	8003502 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003504:	f000 f87a 	bl	80035fc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003508:	2100      	movs	r1, #0
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	f000 fb0a 	bl	8003b24 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003510:	f000 f882 	bl	8003618 <xTaskResumeAll>
 8003514:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d107      	bne.n	800352c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800351c:	4b06      	ldr	r3, [pc, #24]	; (8003538 <vTaskDelay+0x64>)
 800351e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003522:	601a      	str	r2, [r3, #0]
 8003524:	f3bf 8f4f 	dsb	sy
 8003528:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800352c:	bf00      	nop
 800352e:	3710      	adds	r7, #16
 8003530:	46bd      	mov	sp, r7
 8003532:	bd80      	pop	{r7, pc}
 8003534:	20000510 	.word	0x20000510
 8003538:	e000ed04 	.word	0xe000ed04

0800353c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b08a      	sub	sp, #40	; 0x28
 8003540:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003542:	2300      	movs	r3, #0
 8003544:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003546:	2300      	movs	r3, #0
 8003548:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800354a:	463a      	mov	r2, r7
 800354c:	1d39      	adds	r1, r7, #4
 800354e:	f107 0308 	add.w	r3, r7, #8
 8003552:	4618      	mov	r0, r3
 8003554:	f7fc ffc2 	bl	80004dc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003558:	6839      	ldr	r1, [r7, #0]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	68ba      	ldr	r2, [r7, #8]
 800355e:	9202      	str	r2, [sp, #8]
 8003560:	9301      	str	r3, [sp, #4]
 8003562:	2300      	movs	r3, #0
 8003564:	9300      	str	r3, [sp, #0]
 8003566:	2300      	movs	r3, #0
 8003568:	460a      	mov	r2, r1
 800356a:	491e      	ldr	r1, [pc, #120]	; (80035e4 <vTaskStartScheduler+0xa8>)
 800356c:	481e      	ldr	r0, [pc, #120]	; (80035e8 <vTaskStartScheduler+0xac>)
 800356e:	f7ff fe1e 	bl	80031ae <xTaskCreateStatic>
 8003572:	4603      	mov	r3, r0
 8003574:	4a1d      	ldr	r2, [pc, #116]	; (80035ec <vTaskStartScheduler+0xb0>)
 8003576:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003578:	4b1c      	ldr	r3, [pc, #112]	; (80035ec <vTaskStartScheduler+0xb0>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d002      	beq.n	8003586 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003580:	2301      	movs	r3, #1
 8003582:	617b      	str	r3, [r7, #20]
 8003584:	e001      	b.n	800358a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003586:	2300      	movs	r3, #0
 8003588:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	2b01      	cmp	r3, #1
 800358e:	d116      	bne.n	80035be <vTaskStartScheduler+0x82>
	__asm volatile
 8003590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003594:	f383 8811 	msr	BASEPRI, r3
 8003598:	f3bf 8f6f 	isb	sy
 800359c:	f3bf 8f4f 	dsb	sy
 80035a0:	613b      	str	r3, [r7, #16]
}
 80035a2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80035a4:	4b12      	ldr	r3, [pc, #72]	; (80035f0 <vTaskStartScheduler+0xb4>)
 80035a6:	f04f 32ff 	mov.w	r2, #4294967295
 80035aa:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80035ac:	4b11      	ldr	r3, [pc, #68]	; (80035f4 <vTaskStartScheduler+0xb8>)
 80035ae:	2201      	movs	r2, #1
 80035b0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80035b2:	4b11      	ldr	r3, [pc, #68]	; (80035f8 <vTaskStartScheduler+0xbc>)
 80035b4:	2200      	movs	r2, #0
 80035b6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80035b8:	f000 fba2 	bl	8003d00 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80035bc:	e00e      	b.n	80035dc <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035c4:	d10a      	bne.n	80035dc <vTaskStartScheduler+0xa0>
	__asm volatile
 80035c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035ca:	f383 8811 	msr	BASEPRI, r3
 80035ce:	f3bf 8f6f 	isb	sy
 80035d2:	f3bf 8f4f 	dsb	sy
 80035d6:	60fb      	str	r3, [r7, #12]
}
 80035d8:	bf00      	nop
 80035da:	e7fe      	b.n	80035da <vTaskStartScheduler+0x9e>
}
 80035dc:	bf00      	nop
 80035de:	3718      	adds	r7, #24
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}
 80035e4:	080044cc 	.word	0x080044cc
 80035e8:	08003979 	.word	0x08003979
 80035ec:	2000050c 	.word	0x2000050c
 80035f0:	20000508 	.word	0x20000508
 80035f4:	200004f4 	.word	0x200004f4
 80035f8:	200004ec 	.word	0x200004ec

080035fc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80035fc:	b480      	push	{r7}
 80035fe:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003600:	4b04      	ldr	r3, [pc, #16]	; (8003614 <vTaskSuspendAll+0x18>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	3301      	adds	r3, #1
 8003606:	4a03      	ldr	r2, [pc, #12]	; (8003614 <vTaskSuspendAll+0x18>)
 8003608:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800360a:	bf00      	nop
 800360c:	46bd      	mov	sp, r7
 800360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003612:	4770      	bx	lr
 8003614:	20000510 	.word	0x20000510

08003618 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b084      	sub	sp, #16
 800361c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800361e:	2300      	movs	r3, #0
 8003620:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003622:	2300      	movs	r3, #0
 8003624:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003626:	4b41      	ldr	r3, [pc, #260]	; (800372c <xTaskResumeAll+0x114>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d10a      	bne.n	8003644 <xTaskResumeAll+0x2c>
	__asm volatile
 800362e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003632:	f383 8811 	msr	BASEPRI, r3
 8003636:	f3bf 8f6f 	isb	sy
 800363a:	f3bf 8f4f 	dsb	sy
 800363e:	603b      	str	r3, [r7, #0]
}
 8003640:	bf00      	nop
 8003642:	e7fe      	b.n	8003642 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003644:	f000 fbfe 	bl	8003e44 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003648:	4b38      	ldr	r3, [pc, #224]	; (800372c <xTaskResumeAll+0x114>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	3b01      	subs	r3, #1
 800364e:	4a37      	ldr	r2, [pc, #220]	; (800372c <xTaskResumeAll+0x114>)
 8003650:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003652:	4b36      	ldr	r3, [pc, #216]	; (800372c <xTaskResumeAll+0x114>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d161      	bne.n	800371e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800365a:	4b35      	ldr	r3, [pc, #212]	; (8003730 <xTaskResumeAll+0x118>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d05d      	beq.n	800371e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003662:	e02e      	b.n	80036c2 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003664:	4b33      	ldr	r3, [pc, #204]	; (8003734 <xTaskResumeAll+0x11c>)
 8003666:	68db      	ldr	r3, [r3, #12]
 8003668:	68db      	ldr	r3, [r3, #12]
 800366a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	3318      	adds	r3, #24
 8003670:	4618      	mov	r0, r3
 8003672:	f7ff fd72 	bl	800315a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	3304      	adds	r3, #4
 800367a:	4618      	mov	r0, r3
 800367c:	f7ff fd6d 	bl	800315a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003684:	2201      	movs	r2, #1
 8003686:	409a      	lsls	r2, r3
 8003688:	4b2b      	ldr	r3, [pc, #172]	; (8003738 <xTaskResumeAll+0x120>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4313      	orrs	r3, r2
 800368e:	4a2a      	ldr	r2, [pc, #168]	; (8003738 <xTaskResumeAll+0x120>)
 8003690:	6013      	str	r3, [r2, #0]
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003696:	4613      	mov	r3, r2
 8003698:	009b      	lsls	r3, r3, #2
 800369a:	4413      	add	r3, r2
 800369c:	009b      	lsls	r3, r3, #2
 800369e:	4a27      	ldr	r2, [pc, #156]	; (800373c <xTaskResumeAll+0x124>)
 80036a0:	441a      	add	r2, r3
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	3304      	adds	r3, #4
 80036a6:	4619      	mov	r1, r3
 80036a8:	4610      	mov	r0, r2
 80036aa:	f7ff fcf9 	bl	80030a0 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036b2:	4b23      	ldr	r3, [pc, #140]	; (8003740 <xTaskResumeAll+0x128>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036b8:	429a      	cmp	r2, r3
 80036ba:	d302      	bcc.n	80036c2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80036bc:	4b21      	ldr	r3, [pc, #132]	; (8003744 <xTaskResumeAll+0x12c>)
 80036be:	2201      	movs	r2, #1
 80036c0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80036c2:	4b1c      	ldr	r3, [pc, #112]	; (8003734 <xTaskResumeAll+0x11c>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d1cc      	bne.n	8003664 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d001      	beq.n	80036d4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80036d0:	f000 fa08 	bl	8003ae4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80036d4:	4b1c      	ldr	r3, [pc, #112]	; (8003748 <xTaskResumeAll+0x130>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d010      	beq.n	8003702 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80036e0:	f000 f836 	bl	8003750 <xTaskIncrementTick>
 80036e4:	4603      	mov	r3, r0
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d002      	beq.n	80036f0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80036ea:	4b16      	ldr	r3, [pc, #88]	; (8003744 <xTaskResumeAll+0x12c>)
 80036ec:	2201      	movs	r2, #1
 80036ee:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	3b01      	subs	r3, #1
 80036f4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d1f1      	bne.n	80036e0 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80036fc:	4b12      	ldr	r3, [pc, #72]	; (8003748 <xTaskResumeAll+0x130>)
 80036fe:	2200      	movs	r2, #0
 8003700:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003702:	4b10      	ldr	r3, [pc, #64]	; (8003744 <xTaskResumeAll+0x12c>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d009      	beq.n	800371e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800370a:	2301      	movs	r3, #1
 800370c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800370e:	4b0f      	ldr	r3, [pc, #60]	; (800374c <xTaskResumeAll+0x134>)
 8003710:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003714:	601a      	str	r2, [r3, #0]
 8003716:	f3bf 8f4f 	dsb	sy
 800371a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800371e:	f000 fbc1 	bl	8003ea4 <vPortExitCritical>

	return xAlreadyYielded;
 8003722:	68bb      	ldr	r3, [r7, #8]
}
 8003724:	4618      	mov	r0, r3
 8003726:	3710      	adds	r7, #16
 8003728:	46bd      	mov	sp, r7
 800372a:	bd80      	pop	{r7, pc}
 800372c:	20000510 	.word	0x20000510
 8003730:	200004e8 	.word	0x200004e8
 8003734:	200004a8 	.word	0x200004a8
 8003738:	200004f0 	.word	0x200004f0
 800373c:	200003ec 	.word	0x200003ec
 8003740:	200003e8 	.word	0x200003e8
 8003744:	200004fc 	.word	0x200004fc
 8003748:	200004f8 	.word	0x200004f8
 800374c:	e000ed04 	.word	0xe000ed04

08003750 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b086      	sub	sp, #24
 8003754:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003756:	2300      	movs	r3, #0
 8003758:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800375a:	4b4e      	ldr	r3, [pc, #312]	; (8003894 <xTaskIncrementTick+0x144>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	2b00      	cmp	r3, #0
 8003760:	f040 808e 	bne.w	8003880 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003764:	4b4c      	ldr	r3, [pc, #304]	; (8003898 <xTaskIncrementTick+0x148>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	3301      	adds	r3, #1
 800376a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800376c:	4a4a      	ldr	r2, [pc, #296]	; (8003898 <xTaskIncrementTick+0x148>)
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d120      	bne.n	80037ba <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003778:	4b48      	ldr	r3, [pc, #288]	; (800389c <xTaskIncrementTick+0x14c>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d00a      	beq.n	8003798 <xTaskIncrementTick+0x48>
	__asm volatile
 8003782:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003786:	f383 8811 	msr	BASEPRI, r3
 800378a:	f3bf 8f6f 	isb	sy
 800378e:	f3bf 8f4f 	dsb	sy
 8003792:	603b      	str	r3, [r7, #0]
}
 8003794:	bf00      	nop
 8003796:	e7fe      	b.n	8003796 <xTaskIncrementTick+0x46>
 8003798:	4b40      	ldr	r3, [pc, #256]	; (800389c <xTaskIncrementTick+0x14c>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	60fb      	str	r3, [r7, #12]
 800379e:	4b40      	ldr	r3, [pc, #256]	; (80038a0 <xTaskIncrementTick+0x150>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a3e      	ldr	r2, [pc, #248]	; (800389c <xTaskIncrementTick+0x14c>)
 80037a4:	6013      	str	r3, [r2, #0]
 80037a6:	4a3e      	ldr	r2, [pc, #248]	; (80038a0 <xTaskIncrementTick+0x150>)
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	6013      	str	r3, [r2, #0]
 80037ac:	4b3d      	ldr	r3, [pc, #244]	; (80038a4 <xTaskIncrementTick+0x154>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	3301      	adds	r3, #1
 80037b2:	4a3c      	ldr	r2, [pc, #240]	; (80038a4 <xTaskIncrementTick+0x154>)
 80037b4:	6013      	str	r3, [r2, #0]
 80037b6:	f000 f995 	bl	8003ae4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80037ba:	4b3b      	ldr	r3, [pc, #236]	; (80038a8 <xTaskIncrementTick+0x158>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	693a      	ldr	r2, [r7, #16]
 80037c0:	429a      	cmp	r2, r3
 80037c2:	d348      	bcc.n	8003856 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80037c4:	4b35      	ldr	r3, [pc, #212]	; (800389c <xTaskIncrementTick+0x14c>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d104      	bne.n	80037d8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80037ce:	4b36      	ldr	r3, [pc, #216]	; (80038a8 <xTaskIncrementTick+0x158>)
 80037d0:	f04f 32ff 	mov.w	r2, #4294967295
 80037d4:	601a      	str	r2, [r3, #0]
					break;
 80037d6:	e03e      	b.n	8003856 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80037d8:	4b30      	ldr	r3, [pc, #192]	; (800389c <xTaskIncrementTick+0x14c>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	68db      	ldr	r3, [r3, #12]
 80037de:	68db      	ldr	r3, [r3, #12]
 80037e0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80037e8:	693a      	ldr	r2, [r7, #16]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	429a      	cmp	r2, r3
 80037ee:	d203      	bcs.n	80037f8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80037f0:	4a2d      	ldr	r2, [pc, #180]	; (80038a8 <xTaskIncrementTick+0x158>)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80037f6:	e02e      	b.n	8003856 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	3304      	adds	r3, #4
 80037fc:	4618      	mov	r0, r3
 80037fe:	f7ff fcac 	bl	800315a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003806:	2b00      	cmp	r3, #0
 8003808:	d004      	beq.n	8003814 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	3318      	adds	r3, #24
 800380e:	4618      	mov	r0, r3
 8003810:	f7ff fca3 	bl	800315a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003818:	2201      	movs	r2, #1
 800381a:	409a      	lsls	r2, r3
 800381c:	4b23      	ldr	r3, [pc, #140]	; (80038ac <xTaskIncrementTick+0x15c>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4313      	orrs	r3, r2
 8003822:	4a22      	ldr	r2, [pc, #136]	; (80038ac <xTaskIncrementTick+0x15c>)
 8003824:	6013      	str	r3, [r2, #0]
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800382a:	4613      	mov	r3, r2
 800382c:	009b      	lsls	r3, r3, #2
 800382e:	4413      	add	r3, r2
 8003830:	009b      	lsls	r3, r3, #2
 8003832:	4a1f      	ldr	r2, [pc, #124]	; (80038b0 <xTaskIncrementTick+0x160>)
 8003834:	441a      	add	r2, r3
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	3304      	adds	r3, #4
 800383a:	4619      	mov	r1, r3
 800383c:	4610      	mov	r0, r2
 800383e:	f7ff fc2f 	bl	80030a0 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003842:	68bb      	ldr	r3, [r7, #8]
 8003844:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003846:	4b1b      	ldr	r3, [pc, #108]	; (80038b4 <xTaskIncrementTick+0x164>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800384c:	429a      	cmp	r2, r3
 800384e:	d3b9      	bcc.n	80037c4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003850:	2301      	movs	r3, #1
 8003852:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003854:	e7b6      	b.n	80037c4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003856:	4b17      	ldr	r3, [pc, #92]	; (80038b4 <xTaskIncrementTick+0x164>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800385c:	4914      	ldr	r1, [pc, #80]	; (80038b0 <xTaskIncrementTick+0x160>)
 800385e:	4613      	mov	r3, r2
 8003860:	009b      	lsls	r3, r3, #2
 8003862:	4413      	add	r3, r2
 8003864:	009b      	lsls	r3, r3, #2
 8003866:	440b      	add	r3, r1
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	2b01      	cmp	r3, #1
 800386c:	d901      	bls.n	8003872 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800386e:	2301      	movs	r3, #1
 8003870:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003872:	4b11      	ldr	r3, [pc, #68]	; (80038b8 <xTaskIncrementTick+0x168>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d007      	beq.n	800388a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800387a:	2301      	movs	r3, #1
 800387c:	617b      	str	r3, [r7, #20]
 800387e:	e004      	b.n	800388a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003880:	4b0e      	ldr	r3, [pc, #56]	; (80038bc <xTaskIncrementTick+0x16c>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	3301      	adds	r3, #1
 8003886:	4a0d      	ldr	r2, [pc, #52]	; (80038bc <xTaskIncrementTick+0x16c>)
 8003888:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800388a:	697b      	ldr	r3, [r7, #20]
}
 800388c:	4618      	mov	r0, r3
 800388e:	3718      	adds	r7, #24
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}
 8003894:	20000510 	.word	0x20000510
 8003898:	200004ec 	.word	0x200004ec
 800389c:	200004a0 	.word	0x200004a0
 80038a0:	200004a4 	.word	0x200004a4
 80038a4:	20000500 	.word	0x20000500
 80038a8:	20000508 	.word	0x20000508
 80038ac:	200004f0 	.word	0x200004f0
 80038b0:	200003ec 	.word	0x200003ec
 80038b4:	200003e8 	.word	0x200003e8
 80038b8:	200004fc 	.word	0x200004fc
 80038bc:	200004f8 	.word	0x200004f8

080038c0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80038c0:	b480      	push	{r7}
 80038c2:	b087      	sub	sp, #28
 80038c4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80038c6:	4b27      	ldr	r3, [pc, #156]	; (8003964 <vTaskSwitchContext+0xa4>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d003      	beq.n	80038d6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80038ce:	4b26      	ldr	r3, [pc, #152]	; (8003968 <vTaskSwitchContext+0xa8>)
 80038d0:	2201      	movs	r2, #1
 80038d2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80038d4:	e03f      	b.n	8003956 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 80038d6:	4b24      	ldr	r3, [pc, #144]	; (8003968 <vTaskSwitchContext+0xa8>)
 80038d8:	2200      	movs	r2, #0
 80038da:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80038dc:	4b23      	ldr	r3, [pc, #140]	; (800396c <vTaskSwitchContext+0xac>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	fab3 f383 	clz	r3, r3
 80038e8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80038ea:	7afb      	ldrb	r3, [r7, #11]
 80038ec:	f1c3 031f 	rsb	r3, r3, #31
 80038f0:	617b      	str	r3, [r7, #20]
 80038f2:	491f      	ldr	r1, [pc, #124]	; (8003970 <vTaskSwitchContext+0xb0>)
 80038f4:	697a      	ldr	r2, [r7, #20]
 80038f6:	4613      	mov	r3, r2
 80038f8:	009b      	lsls	r3, r3, #2
 80038fa:	4413      	add	r3, r2
 80038fc:	009b      	lsls	r3, r3, #2
 80038fe:	440b      	add	r3, r1
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d10a      	bne.n	800391c <vTaskSwitchContext+0x5c>
	__asm volatile
 8003906:	f04f 0350 	mov.w	r3, #80	; 0x50
 800390a:	f383 8811 	msr	BASEPRI, r3
 800390e:	f3bf 8f6f 	isb	sy
 8003912:	f3bf 8f4f 	dsb	sy
 8003916:	607b      	str	r3, [r7, #4]
}
 8003918:	bf00      	nop
 800391a:	e7fe      	b.n	800391a <vTaskSwitchContext+0x5a>
 800391c:	697a      	ldr	r2, [r7, #20]
 800391e:	4613      	mov	r3, r2
 8003920:	009b      	lsls	r3, r3, #2
 8003922:	4413      	add	r3, r2
 8003924:	009b      	lsls	r3, r3, #2
 8003926:	4a12      	ldr	r2, [pc, #72]	; (8003970 <vTaskSwitchContext+0xb0>)
 8003928:	4413      	add	r3, r2
 800392a:	613b      	str	r3, [r7, #16]
 800392c:	693b      	ldr	r3, [r7, #16]
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	685a      	ldr	r2, [r3, #4]
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	605a      	str	r2, [r3, #4]
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	685a      	ldr	r2, [r3, #4]
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	3308      	adds	r3, #8
 800393e:	429a      	cmp	r2, r3
 8003940:	d104      	bne.n	800394c <vTaskSwitchContext+0x8c>
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	685a      	ldr	r2, [r3, #4]
 8003948:	693b      	ldr	r3, [r7, #16]
 800394a:	605a      	str	r2, [r3, #4]
 800394c:	693b      	ldr	r3, [r7, #16]
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	68db      	ldr	r3, [r3, #12]
 8003952:	4a08      	ldr	r2, [pc, #32]	; (8003974 <vTaskSwitchContext+0xb4>)
 8003954:	6013      	str	r3, [r2, #0]
}
 8003956:	bf00      	nop
 8003958:	371c      	adds	r7, #28
 800395a:	46bd      	mov	sp, r7
 800395c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003960:	4770      	bx	lr
 8003962:	bf00      	nop
 8003964:	20000510 	.word	0x20000510
 8003968:	200004fc 	.word	0x200004fc
 800396c:	200004f0 	.word	0x200004f0
 8003970:	200003ec 	.word	0x200003ec
 8003974:	200003e8 	.word	0x200003e8

08003978 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b082      	sub	sp, #8
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003980:	f000 f852 	bl	8003a28 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003984:	4b06      	ldr	r3, [pc, #24]	; (80039a0 <prvIdleTask+0x28>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	2b01      	cmp	r3, #1
 800398a:	d9f9      	bls.n	8003980 <prvIdleTask+0x8>
			{
				taskYIELD();
 800398c:	4b05      	ldr	r3, [pc, #20]	; (80039a4 <prvIdleTask+0x2c>)
 800398e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003992:	601a      	str	r2, [r3, #0]
 8003994:	f3bf 8f4f 	dsb	sy
 8003998:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800399c:	e7f0      	b.n	8003980 <prvIdleTask+0x8>
 800399e:	bf00      	nop
 80039a0:	200003ec 	.word	0x200003ec
 80039a4:	e000ed04 	.word	0xe000ed04

080039a8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b082      	sub	sp, #8
 80039ac:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80039ae:	2300      	movs	r3, #0
 80039b0:	607b      	str	r3, [r7, #4]
 80039b2:	e00c      	b.n	80039ce <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80039b4:	687a      	ldr	r2, [r7, #4]
 80039b6:	4613      	mov	r3, r2
 80039b8:	009b      	lsls	r3, r3, #2
 80039ba:	4413      	add	r3, r2
 80039bc:	009b      	lsls	r3, r3, #2
 80039be:	4a12      	ldr	r2, [pc, #72]	; (8003a08 <prvInitialiseTaskLists+0x60>)
 80039c0:	4413      	add	r3, r2
 80039c2:	4618      	mov	r0, r3
 80039c4:	f7ff fb3f 	bl	8003046 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	3301      	adds	r3, #1
 80039cc:	607b      	str	r3, [r7, #4]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2b06      	cmp	r3, #6
 80039d2:	d9ef      	bls.n	80039b4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80039d4:	480d      	ldr	r0, [pc, #52]	; (8003a0c <prvInitialiseTaskLists+0x64>)
 80039d6:	f7ff fb36 	bl	8003046 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80039da:	480d      	ldr	r0, [pc, #52]	; (8003a10 <prvInitialiseTaskLists+0x68>)
 80039dc:	f7ff fb33 	bl	8003046 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80039e0:	480c      	ldr	r0, [pc, #48]	; (8003a14 <prvInitialiseTaskLists+0x6c>)
 80039e2:	f7ff fb30 	bl	8003046 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80039e6:	480c      	ldr	r0, [pc, #48]	; (8003a18 <prvInitialiseTaskLists+0x70>)
 80039e8:	f7ff fb2d 	bl	8003046 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80039ec:	480b      	ldr	r0, [pc, #44]	; (8003a1c <prvInitialiseTaskLists+0x74>)
 80039ee:	f7ff fb2a 	bl	8003046 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80039f2:	4b0b      	ldr	r3, [pc, #44]	; (8003a20 <prvInitialiseTaskLists+0x78>)
 80039f4:	4a05      	ldr	r2, [pc, #20]	; (8003a0c <prvInitialiseTaskLists+0x64>)
 80039f6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80039f8:	4b0a      	ldr	r3, [pc, #40]	; (8003a24 <prvInitialiseTaskLists+0x7c>)
 80039fa:	4a05      	ldr	r2, [pc, #20]	; (8003a10 <prvInitialiseTaskLists+0x68>)
 80039fc:	601a      	str	r2, [r3, #0]
}
 80039fe:	bf00      	nop
 8003a00:	3708      	adds	r7, #8
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}
 8003a06:	bf00      	nop
 8003a08:	200003ec 	.word	0x200003ec
 8003a0c:	20000478 	.word	0x20000478
 8003a10:	2000048c 	.word	0x2000048c
 8003a14:	200004a8 	.word	0x200004a8
 8003a18:	200004bc 	.word	0x200004bc
 8003a1c:	200004d4 	.word	0x200004d4
 8003a20:	200004a0 	.word	0x200004a0
 8003a24:	200004a4 	.word	0x200004a4

08003a28 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b082      	sub	sp, #8
 8003a2c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003a2e:	e019      	b.n	8003a64 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003a30:	f000 fa08 	bl	8003e44 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a34:	4b10      	ldr	r3, [pc, #64]	; (8003a78 <prvCheckTasksWaitingTermination+0x50>)
 8003a36:	68db      	ldr	r3, [r3, #12]
 8003a38:	68db      	ldr	r3, [r3, #12]
 8003a3a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	3304      	adds	r3, #4
 8003a40:	4618      	mov	r0, r3
 8003a42:	f7ff fb8a 	bl	800315a <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003a46:	4b0d      	ldr	r3, [pc, #52]	; (8003a7c <prvCheckTasksWaitingTermination+0x54>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	3b01      	subs	r3, #1
 8003a4c:	4a0b      	ldr	r2, [pc, #44]	; (8003a7c <prvCheckTasksWaitingTermination+0x54>)
 8003a4e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003a50:	4b0b      	ldr	r3, [pc, #44]	; (8003a80 <prvCheckTasksWaitingTermination+0x58>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	3b01      	subs	r3, #1
 8003a56:	4a0a      	ldr	r2, [pc, #40]	; (8003a80 <prvCheckTasksWaitingTermination+0x58>)
 8003a58:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003a5a:	f000 fa23 	bl	8003ea4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003a5e:	6878      	ldr	r0, [r7, #4]
 8003a60:	f000 f810 	bl	8003a84 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003a64:	4b06      	ldr	r3, [pc, #24]	; (8003a80 <prvCheckTasksWaitingTermination+0x58>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d1e1      	bne.n	8003a30 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003a6c:	bf00      	nop
 8003a6e:	bf00      	nop
 8003a70:	3708      	adds	r7, #8
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}
 8003a76:	bf00      	nop
 8003a78:	200004bc 	.word	0x200004bc
 8003a7c:	200004e8 	.word	0x200004e8
 8003a80:	200004d0 	.word	0x200004d0

08003a84 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b084      	sub	sp, #16
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d108      	bne.n	8003aa8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f000 fb80 	bl	80041a0 <vPortFree>
				vPortFree( pxTCB );
 8003aa0:	6878      	ldr	r0, [r7, #4]
 8003aa2:	f000 fb7d 	bl	80041a0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003aa6:	e018      	b.n	8003ada <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003aae:	2b01      	cmp	r3, #1
 8003ab0:	d103      	bne.n	8003aba <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	f000 fb74 	bl	80041a0 <vPortFree>
	}
 8003ab8:	e00f      	b.n	8003ada <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003ac0:	2b02      	cmp	r3, #2
 8003ac2:	d00a      	beq.n	8003ada <prvDeleteTCB+0x56>
	__asm volatile
 8003ac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ac8:	f383 8811 	msr	BASEPRI, r3
 8003acc:	f3bf 8f6f 	isb	sy
 8003ad0:	f3bf 8f4f 	dsb	sy
 8003ad4:	60fb      	str	r3, [r7, #12]
}
 8003ad6:	bf00      	nop
 8003ad8:	e7fe      	b.n	8003ad8 <prvDeleteTCB+0x54>
	}
 8003ada:	bf00      	nop
 8003adc:	3710      	adds	r7, #16
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bd80      	pop	{r7, pc}
	...

08003ae4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b083      	sub	sp, #12
 8003ae8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003aea:	4b0c      	ldr	r3, [pc, #48]	; (8003b1c <prvResetNextTaskUnblockTime+0x38>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d104      	bne.n	8003afe <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003af4:	4b0a      	ldr	r3, [pc, #40]	; (8003b20 <prvResetNextTaskUnblockTime+0x3c>)
 8003af6:	f04f 32ff 	mov.w	r2, #4294967295
 8003afa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003afc:	e008      	b.n	8003b10 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003afe:	4b07      	ldr	r3, [pc, #28]	; (8003b1c <prvResetNextTaskUnblockTime+0x38>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	68db      	ldr	r3, [r3, #12]
 8003b04:	68db      	ldr	r3, [r3, #12]
 8003b06:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	4a04      	ldr	r2, [pc, #16]	; (8003b20 <prvResetNextTaskUnblockTime+0x3c>)
 8003b0e:	6013      	str	r3, [r2, #0]
}
 8003b10:	bf00      	nop
 8003b12:	370c      	adds	r7, #12
 8003b14:	46bd      	mov	sp, r7
 8003b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1a:	4770      	bx	lr
 8003b1c:	200004a0 	.word	0x200004a0
 8003b20:	20000508 	.word	0x20000508

08003b24 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b084      	sub	sp, #16
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
 8003b2c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003b2e:	4b29      	ldr	r3, [pc, #164]	; (8003bd4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003b34:	4b28      	ldr	r3, [pc, #160]	; (8003bd8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	3304      	adds	r3, #4
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f7ff fb0d 	bl	800315a <uxListRemove>
 8003b40:	4603      	mov	r3, r0
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d10b      	bne.n	8003b5e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003b46:	4b24      	ldr	r3, [pc, #144]	; (8003bd8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b4c:	2201      	movs	r2, #1
 8003b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b52:	43da      	mvns	r2, r3
 8003b54:	4b21      	ldr	r3, [pc, #132]	; (8003bdc <prvAddCurrentTaskToDelayedList+0xb8>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4013      	ands	r3, r2
 8003b5a:	4a20      	ldr	r2, [pc, #128]	; (8003bdc <prvAddCurrentTaskToDelayedList+0xb8>)
 8003b5c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b64:	d10a      	bne.n	8003b7c <prvAddCurrentTaskToDelayedList+0x58>
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d007      	beq.n	8003b7c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003b6c:	4b1a      	ldr	r3, [pc, #104]	; (8003bd8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	3304      	adds	r3, #4
 8003b72:	4619      	mov	r1, r3
 8003b74:	481a      	ldr	r0, [pc, #104]	; (8003be0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8003b76:	f7ff fa93 	bl	80030a0 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003b7a:	e026      	b.n	8003bca <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003b7c:	68fa      	ldr	r2, [r7, #12]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	4413      	add	r3, r2
 8003b82:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003b84:	4b14      	ldr	r3, [pc, #80]	; (8003bd8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	68ba      	ldr	r2, [r7, #8]
 8003b8a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003b8c:	68ba      	ldr	r2, [r7, #8]
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	429a      	cmp	r2, r3
 8003b92:	d209      	bcs.n	8003ba8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003b94:	4b13      	ldr	r3, [pc, #76]	; (8003be4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8003b96:	681a      	ldr	r2, [r3, #0]
 8003b98:	4b0f      	ldr	r3, [pc, #60]	; (8003bd8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	3304      	adds	r3, #4
 8003b9e:	4619      	mov	r1, r3
 8003ba0:	4610      	mov	r0, r2
 8003ba2:	f7ff faa1 	bl	80030e8 <vListInsert>
}
 8003ba6:	e010      	b.n	8003bca <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003ba8:	4b0f      	ldr	r3, [pc, #60]	; (8003be8 <prvAddCurrentTaskToDelayedList+0xc4>)
 8003baa:	681a      	ldr	r2, [r3, #0]
 8003bac:	4b0a      	ldr	r3, [pc, #40]	; (8003bd8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	3304      	adds	r3, #4
 8003bb2:	4619      	mov	r1, r3
 8003bb4:	4610      	mov	r0, r2
 8003bb6:	f7ff fa97 	bl	80030e8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003bba:	4b0c      	ldr	r3, [pc, #48]	; (8003bec <prvAddCurrentTaskToDelayedList+0xc8>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	68ba      	ldr	r2, [r7, #8]
 8003bc0:	429a      	cmp	r2, r3
 8003bc2:	d202      	bcs.n	8003bca <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003bc4:	4a09      	ldr	r2, [pc, #36]	; (8003bec <prvAddCurrentTaskToDelayedList+0xc8>)
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	6013      	str	r3, [r2, #0]
}
 8003bca:	bf00      	nop
 8003bcc:	3710      	adds	r7, #16
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}
 8003bd2:	bf00      	nop
 8003bd4:	200004ec 	.word	0x200004ec
 8003bd8:	200003e8 	.word	0x200003e8
 8003bdc:	200004f0 	.word	0x200004f0
 8003be0:	200004d4 	.word	0x200004d4
 8003be4:	200004a4 	.word	0x200004a4
 8003be8:	200004a0 	.word	0x200004a0
 8003bec:	20000508 	.word	0x20000508

08003bf0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b085      	sub	sp, #20
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	60f8      	str	r0, [r7, #12]
 8003bf8:	60b9      	str	r1, [r7, #8]
 8003bfa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	3b04      	subs	r3, #4
 8003c00:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003c08:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	3b04      	subs	r3, #4
 8003c0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	f023 0201 	bic.w	r2, r3, #1
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	3b04      	subs	r3, #4
 8003c1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003c20:	4a0c      	ldr	r2, [pc, #48]	; (8003c54 <pxPortInitialiseStack+0x64>)
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	3b14      	subs	r3, #20
 8003c2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003c2c:	687a      	ldr	r2, [r7, #4]
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	3b04      	subs	r3, #4
 8003c36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	f06f 0202 	mvn.w	r2, #2
 8003c3e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	3b20      	subs	r3, #32
 8003c44:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003c46:	68fb      	ldr	r3, [r7, #12]
}
 8003c48:	4618      	mov	r0, r3
 8003c4a:	3714      	adds	r7, #20
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c52:	4770      	bx	lr
 8003c54:	08003c59 	.word	0x08003c59

08003c58 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b085      	sub	sp, #20
 8003c5c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8003c5e:	2300      	movs	r3, #0
 8003c60:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003c62:	4b12      	ldr	r3, [pc, #72]	; (8003cac <prvTaskExitError+0x54>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c6a:	d00a      	beq.n	8003c82 <prvTaskExitError+0x2a>
	__asm volatile
 8003c6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c70:	f383 8811 	msr	BASEPRI, r3
 8003c74:	f3bf 8f6f 	isb	sy
 8003c78:	f3bf 8f4f 	dsb	sy
 8003c7c:	60fb      	str	r3, [r7, #12]
}
 8003c7e:	bf00      	nop
 8003c80:	e7fe      	b.n	8003c80 <prvTaskExitError+0x28>
	__asm volatile
 8003c82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c86:	f383 8811 	msr	BASEPRI, r3
 8003c8a:	f3bf 8f6f 	isb	sy
 8003c8e:	f3bf 8f4f 	dsb	sy
 8003c92:	60bb      	str	r3, [r7, #8]
}
 8003c94:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003c96:	bf00      	nop
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d0fc      	beq.n	8003c98 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003c9e:	bf00      	nop
 8003ca0:	bf00      	nop
 8003ca2:	3714      	adds	r7, #20
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003caa:	4770      	bx	lr
 8003cac:	2000000c 	.word	0x2000000c

08003cb0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003cb0:	4b07      	ldr	r3, [pc, #28]	; (8003cd0 <pxCurrentTCBConst2>)
 8003cb2:	6819      	ldr	r1, [r3, #0]
 8003cb4:	6808      	ldr	r0, [r1, #0]
 8003cb6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003cba:	f380 8809 	msr	PSP, r0
 8003cbe:	f3bf 8f6f 	isb	sy
 8003cc2:	f04f 0000 	mov.w	r0, #0
 8003cc6:	f380 8811 	msr	BASEPRI, r0
 8003cca:	4770      	bx	lr
 8003ccc:	f3af 8000 	nop.w

08003cd0 <pxCurrentTCBConst2>:
 8003cd0:	200003e8 	.word	0x200003e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003cd4:	bf00      	nop
 8003cd6:	bf00      	nop

08003cd8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003cd8:	4808      	ldr	r0, [pc, #32]	; (8003cfc <prvPortStartFirstTask+0x24>)
 8003cda:	6800      	ldr	r0, [r0, #0]
 8003cdc:	6800      	ldr	r0, [r0, #0]
 8003cde:	f380 8808 	msr	MSP, r0
 8003ce2:	f04f 0000 	mov.w	r0, #0
 8003ce6:	f380 8814 	msr	CONTROL, r0
 8003cea:	b662      	cpsie	i
 8003cec:	b661      	cpsie	f
 8003cee:	f3bf 8f4f 	dsb	sy
 8003cf2:	f3bf 8f6f 	isb	sy
 8003cf6:	df00      	svc	0
 8003cf8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003cfa:	bf00      	nop
 8003cfc:	e000ed08 	.word	0xe000ed08

08003d00 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b086      	sub	sp, #24
 8003d04:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003d06:	4b46      	ldr	r3, [pc, #280]	; (8003e20 <xPortStartScheduler+0x120>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a46      	ldr	r2, [pc, #280]	; (8003e24 <xPortStartScheduler+0x124>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d10a      	bne.n	8003d26 <xPortStartScheduler+0x26>
	__asm volatile
 8003d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d14:	f383 8811 	msr	BASEPRI, r3
 8003d18:	f3bf 8f6f 	isb	sy
 8003d1c:	f3bf 8f4f 	dsb	sy
 8003d20:	613b      	str	r3, [r7, #16]
}
 8003d22:	bf00      	nop
 8003d24:	e7fe      	b.n	8003d24 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003d26:	4b3e      	ldr	r3, [pc, #248]	; (8003e20 <xPortStartScheduler+0x120>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a3f      	ldr	r2, [pc, #252]	; (8003e28 <xPortStartScheduler+0x128>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d10a      	bne.n	8003d46 <xPortStartScheduler+0x46>
	__asm volatile
 8003d30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d34:	f383 8811 	msr	BASEPRI, r3
 8003d38:	f3bf 8f6f 	isb	sy
 8003d3c:	f3bf 8f4f 	dsb	sy
 8003d40:	60fb      	str	r3, [r7, #12]
}
 8003d42:	bf00      	nop
 8003d44:	e7fe      	b.n	8003d44 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003d46:	4b39      	ldr	r3, [pc, #228]	; (8003e2c <xPortStartScheduler+0x12c>)
 8003d48:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	781b      	ldrb	r3, [r3, #0]
 8003d4e:	b2db      	uxtb	r3, r3
 8003d50:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	22ff      	movs	r2, #255	; 0xff
 8003d56:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	781b      	ldrb	r3, [r3, #0]
 8003d5c:	b2db      	uxtb	r3, r3
 8003d5e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003d60:	78fb      	ldrb	r3, [r7, #3]
 8003d62:	b2db      	uxtb	r3, r3
 8003d64:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003d68:	b2da      	uxtb	r2, r3
 8003d6a:	4b31      	ldr	r3, [pc, #196]	; (8003e30 <xPortStartScheduler+0x130>)
 8003d6c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003d6e:	4b31      	ldr	r3, [pc, #196]	; (8003e34 <xPortStartScheduler+0x134>)
 8003d70:	2207      	movs	r2, #7
 8003d72:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003d74:	e009      	b.n	8003d8a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8003d76:	4b2f      	ldr	r3, [pc, #188]	; (8003e34 <xPortStartScheduler+0x134>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	3b01      	subs	r3, #1
 8003d7c:	4a2d      	ldr	r2, [pc, #180]	; (8003e34 <xPortStartScheduler+0x134>)
 8003d7e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003d80:	78fb      	ldrb	r3, [r7, #3]
 8003d82:	b2db      	uxtb	r3, r3
 8003d84:	005b      	lsls	r3, r3, #1
 8003d86:	b2db      	uxtb	r3, r3
 8003d88:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003d8a:	78fb      	ldrb	r3, [r7, #3]
 8003d8c:	b2db      	uxtb	r3, r3
 8003d8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d92:	2b80      	cmp	r3, #128	; 0x80
 8003d94:	d0ef      	beq.n	8003d76 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003d96:	4b27      	ldr	r3, [pc, #156]	; (8003e34 <xPortStartScheduler+0x134>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f1c3 0307 	rsb	r3, r3, #7
 8003d9e:	2b04      	cmp	r3, #4
 8003da0:	d00a      	beq.n	8003db8 <xPortStartScheduler+0xb8>
	__asm volatile
 8003da2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003da6:	f383 8811 	msr	BASEPRI, r3
 8003daa:	f3bf 8f6f 	isb	sy
 8003dae:	f3bf 8f4f 	dsb	sy
 8003db2:	60bb      	str	r3, [r7, #8]
}
 8003db4:	bf00      	nop
 8003db6:	e7fe      	b.n	8003db6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003db8:	4b1e      	ldr	r3, [pc, #120]	; (8003e34 <xPortStartScheduler+0x134>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	021b      	lsls	r3, r3, #8
 8003dbe:	4a1d      	ldr	r2, [pc, #116]	; (8003e34 <xPortStartScheduler+0x134>)
 8003dc0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003dc2:	4b1c      	ldr	r3, [pc, #112]	; (8003e34 <xPortStartScheduler+0x134>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003dca:	4a1a      	ldr	r2, [pc, #104]	; (8003e34 <xPortStartScheduler+0x134>)
 8003dcc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	b2da      	uxtb	r2, r3
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003dd6:	4b18      	ldr	r3, [pc, #96]	; (8003e38 <xPortStartScheduler+0x138>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a17      	ldr	r2, [pc, #92]	; (8003e38 <xPortStartScheduler+0x138>)
 8003ddc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003de0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003de2:	4b15      	ldr	r3, [pc, #84]	; (8003e38 <xPortStartScheduler+0x138>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a14      	ldr	r2, [pc, #80]	; (8003e38 <xPortStartScheduler+0x138>)
 8003de8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003dec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003dee:	f000 f8dd 	bl	8003fac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003df2:	4b12      	ldr	r3, [pc, #72]	; (8003e3c <xPortStartScheduler+0x13c>)
 8003df4:	2200      	movs	r2, #0
 8003df6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003df8:	f000 f8fc 	bl	8003ff4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003dfc:	4b10      	ldr	r3, [pc, #64]	; (8003e40 <xPortStartScheduler+0x140>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a0f      	ldr	r2, [pc, #60]	; (8003e40 <xPortStartScheduler+0x140>)
 8003e02:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003e06:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003e08:	f7ff ff66 	bl	8003cd8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003e0c:	f7ff fd58 	bl	80038c0 <vTaskSwitchContext>
	prvTaskExitError();
 8003e10:	f7ff ff22 	bl	8003c58 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003e14:	2300      	movs	r3, #0
}
 8003e16:	4618      	mov	r0, r3
 8003e18:	3718      	adds	r7, #24
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}
 8003e1e:	bf00      	nop
 8003e20:	e000ed00 	.word	0xe000ed00
 8003e24:	410fc271 	.word	0x410fc271
 8003e28:	410fc270 	.word	0x410fc270
 8003e2c:	e000e400 	.word	0xe000e400
 8003e30:	20000514 	.word	0x20000514
 8003e34:	20000518 	.word	0x20000518
 8003e38:	e000ed20 	.word	0xe000ed20
 8003e3c:	2000000c 	.word	0x2000000c
 8003e40:	e000ef34 	.word	0xe000ef34

08003e44 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003e44:	b480      	push	{r7}
 8003e46:	b083      	sub	sp, #12
 8003e48:	af00      	add	r7, sp, #0
	__asm volatile
 8003e4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e4e:	f383 8811 	msr	BASEPRI, r3
 8003e52:	f3bf 8f6f 	isb	sy
 8003e56:	f3bf 8f4f 	dsb	sy
 8003e5a:	607b      	str	r3, [r7, #4]
}
 8003e5c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003e5e:	4b0f      	ldr	r3, [pc, #60]	; (8003e9c <vPortEnterCritical+0x58>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	3301      	adds	r3, #1
 8003e64:	4a0d      	ldr	r2, [pc, #52]	; (8003e9c <vPortEnterCritical+0x58>)
 8003e66:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003e68:	4b0c      	ldr	r3, [pc, #48]	; (8003e9c <vPortEnterCritical+0x58>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	2b01      	cmp	r3, #1
 8003e6e:	d10f      	bne.n	8003e90 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003e70:	4b0b      	ldr	r3, [pc, #44]	; (8003ea0 <vPortEnterCritical+0x5c>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	b2db      	uxtb	r3, r3
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d00a      	beq.n	8003e90 <vPortEnterCritical+0x4c>
	__asm volatile
 8003e7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e7e:	f383 8811 	msr	BASEPRI, r3
 8003e82:	f3bf 8f6f 	isb	sy
 8003e86:	f3bf 8f4f 	dsb	sy
 8003e8a:	603b      	str	r3, [r7, #0]
}
 8003e8c:	bf00      	nop
 8003e8e:	e7fe      	b.n	8003e8e <vPortEnterCritical+0x4a>
	}
}
 8003e90:	bf00      	nop
 8003e92:	370c      	adds	r7, #12
 8003e94:	46bd      	mov	sp, r7
 8003e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9a:	4770      	bx	lr
 8003e9c:	2000000c 	.word	0x2000000c
 8003ea0:	e000ed04 	.word	0xe000ed04

08003ea4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b083      	sub	sp, #12
 8003ea8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003eaa:	4b12      	ldr	r3, [pc, #72]	; (8003ef4 <vPortExitCritical+0x50>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d10a      	bne.n	8003ec8 <vPortExitCritical+0x24>
	__asm volatile
 8003eb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eb6:	f383 8811 	msr	BASEPRI, r3
 8003eba:	f3bf 8f6f 	isb	sy
 8003ebe:	f3bf 8f4f 	dsb	sy
 8003ec2:	607b      	str	r3, [r7, #4]
}
 8003ec4:	bf00      	nop
 8003ec6:	e7fe      	b.n	8003ec6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003ec8:	4b0a      	ldr	r3, [pc, #40]	; (8003ef4 <vPortExitCritical+0x50>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	3b01      	subs	r3, #1
 8003ece:	4a09      	ldr	r2, [pc, #36]	; (8003ef4 <vPortExitCritical+0x50>)
 8003ed0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003ed2:	4b08      	ldr	r3, [pc, #32]	; (8003ef4 <vPortExitCritical+0x50>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d105      	bne.n	8003ee6 <vPortExitCritical+0x42>
 8003eda:	2300      	movs	r3, #0
 8003edc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003ee4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003ee6:	bf00      	nop
 8003ee8:	370c      	adds	r7, #12
 8003eea:	46bd      	mov	sp, r7
 8003eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef0:	4770      	bx	lr
 8003ef2:	bf00      	nop
 8003ef4:	2000000c 	.word	0x2000000c
	...

08003f00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003f00:	f3ef 8009 	mrs	r0, PSP
 8003f04:	f3bf 8f6f 	isb	sy
 8003f08:	4b15      	ldr	r3, [pc, #84]	; (8003f60 <pxCurrentTCBConst>)
 8003f0a:	681a      	ldr	r2, [r3, #0]
 8003f0c:	f01e 0f10 	tst.w	lr, #16
 8003f10:	bf08      	it	eq
 8003f12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003f16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f1a:	6010      	str	r0, [r2, #0]
 8003f1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003f20:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003f24:	f380 8811 	msr	BASEPRI, r0
 8003f28:	f3bf 8f4f 	dsb	sy
 8003f2c:	f3bf 8f6f 	isb	sy
 8003f30:	f7ff fcc6 	bl	80038c0 <vTaskSwitchContext>
 8003f34:	f04f 0000 	mov.w	r0, #0
 8003f38:	f380 8811 	msr	BASEPRI, r0
 8003f3c:	bc09      	pop	{r0, r3}
 8003f3e:	6819      	ldr	r1, [r3, #0]
 8003f40:	6808      	ldr	r0, [r1, #0]
 8003f42:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f46:	f01e 0f10 	tst.w	lr, #16
 8003f4a:	bf08      	it	eq
 8003f4c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003f50:	f380 8809 	msr	PSP, r0
 8003f54:	f3bf 8f6f 	isb	sy
 8003f58:	4770      	bx	lr
 8003f5a:	bf00      	nop
 8003f5c:	f3af 8000 	nop.w

08003f60 <pxCurrentTCBConst>:
 8003f60:	200003e8 	.word	0x200003e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003f64:	bf00      	nop
 8003f66:	bf00      	nop

08003f68 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b082      	sub	sp, #8
 8003f6c:	af00      	add	r7, sp, #0
	__asm volatile
 8003f6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f72:	f383 8811 	msr	BASEPRI, r3
 8003f76:	f3bf 8f6f 	isb	sy
 8003f7a:	f3bf 8f4f 	dsb	sy
 8003f7e:	607b      	str	r3, [r7, #4]
}
 8003f80:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003f82:	f7ff fbe5 	bl	8003750 <xTaskIncrementTick>
 8003f86:	4603      	mov	r3, r0
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d003      	beq.n	8003f94 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003f8c:	4b06      	ldr	r3, [pc, #24]	; (8003fa8 <SysTick_Handler+0x40>)
 8003f8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f92:	601a      	str	r2, [r3, #0]
 8003f94:	2300      	movs	r3, #0
 8003f96:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	f383 8811 	msr	BASEPRI, r3
}
 8003f9e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003fa0:	bf00      	nop
 8003fa2:	3708      	adds	r7, #8
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bd80      	pop	{r7, pc}
 8003fa8:	e000ed04 	.word	0xe000ed04

08003fac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003fac:	b480      	push	{r7}
 8003fae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003fb0:	4b0b      	ldr	r3, [pc, #44]	; (8003fe0 <vPortSetupTimerInterrupt+0x34>)
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003fb6:	4b0b      	ldr	r3, [pc, #44]	; (8003fe4 <vPortSetupTimerInterrupt+0x38>)
 8003fb8:	2200      	movs	r2, #0
 8003fba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003fbc:	4b0a      	ldr	r3, [pc, #40]	; (8003fe8 <vPortSetupTimerInterrupt+0x3c>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a0a      	ldr	r2, [pc, #40]	; (8003fec <vPortSetupTimerInterrupt+0x40>)
 8003fc2:	fba2 2303 	umull	r2, r3, r2, r3
 8003fc6:	099b      	lsrs	r3, r3, #6
 8003fc8:	4a09      	ldr	r2, [pc, #36]	; (8003ff0 <vPortSetupTimerInterrupt+0x44>)
 8003fca:	3b01      	subs	r3, #1
 8003fcc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003fce:	4b04      	ldr	r3, [pc, #16]	; (8003fe0 <vPortSetupTimerInterrupt+0x34>)
 8003fd0:	2207      	movs	r2, #7
 8003fd2:	601a      	str	r2, [r3, #0]
}
 8003fd4:	bf00      	nop
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fdc:	4770      	bx	lr
 8003fde:	bf00      	nop
 8003fe0:	e000e010 	.word	0xe000e010
 8003fe4:	e000e018 	.word	0xe000e018
 8003fe8:	20000000 	.word	0x20000000
 8003fec:	10624dd3 	.word	0x10624dd3
 8003ff0:	e000e014 	.word	0xe000e014

08003ff4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003ff4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004004 <vPortEnableVFP+0x10>
 8003ff8:	6801      	ldr	r1, [r0, #0]
 8003ffa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003ffe:	6001      	str	r1, [r0, #0]
 8004000:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004002:	bf00      	nop
 8004004:	e000ed88 	.word	0xe000ed88

08004008 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b08a      	sub	sp, #40	; 0x28
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004010:	2300      	movs	r3, #0
 8004012:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004014:	f7ff faf2 	bl	80035fc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004018:	4b5b      	ldr	r3, [pc, #364]	; (8004188 <pvPortMalloc+0x180>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d101      	bne.n	8004024 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004020:	f000 f920 	bl	8004264 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004024:	4b59      	ldr	r3, [pc, #356]	; (800418c <pvPortMalloc+0x184>)
 8004026:	681a      	ldr	r2, [r3, #0]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	4013      	ands	r3, r2
 800402c:	2b00      	cmp	r3, #0
 800402e:	f040 8093 	bne.w	8004158 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d01d      	beq.n	8004074 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004038:	2208      	movs	r2, #8
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	4413      	add	r3, r2
 800403e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	f003 0307 	and.w	r3, r3, #7
 8004046:	2b00      	cmp	r3, #0
 8004048:	d014      	beq.n	8004074 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	f023 0307 	bic.w	r3, r3, #7
 8004050:	3308      	adds	r3, #8
 8004052:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	f003 0307 	and.w	r3, r3, #7
 800405a:	2b00      	cmp	r3, #0
 800405c:	d00a      	beq.n	8004074 <pvPortMalloc+0x6c>
	__asm volatile
 800405e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004062:	f383 8811 	msr	BASEPRI, r3
 8004066:	f3bf 8f6f 	isb	sy
 800406a:	f3bf 8f4f 	dsb	sy
 800406e:	617b      	str	r3, [r7, #20]
}
 8004070:	bf00      	nop
 8004072:	e7fe      	b.n	8004072 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d06e      	beq.n	8004158 <pvPortMalloc+0x150>
 800407a:	4b45      	ldr	r3, [pc, #276]	; (8004190 <pvPortMalloc+0x188>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	687a      	ldr	r2, [r7, #4]
 8004080:	429a      	cmp	r2, r3
 8004082:	d869      	bhi.n	8004158 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004084:	4b43      	ldr	r3, [pc, #268]	; (8004194 <pvPortMalloc+0x18c>)
 8004086:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004088:	4b42      	ldr	r3, [pc, #264]	; (8004194 <pvPortMalloc+0x18c>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800408e:	e004      	b.n	800409a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004092:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800409a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	687a      	ldr	r2, [r7, #4]
 80040a0:	429a      	cmp	r2, r3
 80040a2:	d903      	bls.n	80040ac <pvPortMalloc+0xa4>
 80040a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d1f1      	bne.n	8004090 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80040ac:	4b36      	ldr	r3, [pc, #216]	; (8004188 <pvPortMalloc+0x180>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040b2:	429a      	cmp	r2, r3
 80040b4:	d050      	beq.n	8004158 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80040b6:	6a3b      	ldr	r3, [r7, #32]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	2208      	movs	r2, #8
 80040bc:	4413      	add	r3, r2
 80040be:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80040c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c2:	681a      	ldr	r2, [r3, #0]
 80040c4:	6a3b      	ldr	r3, [r7, #32]
 80040c6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80040c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ca:	685a      	ldr	r2, [r3, #4]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	1ad2      	subs	r2, r2, r3
 80040d0:	2308      	movs	r3, #8
 80040d2:	005b      	lsls	r3, r3, #1
 80040d4:	429a      	cmp	r2, r3
 80040d6:	d91f      	bls.n	8004118 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80040d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	4413      	add	r3, r2
 80040de:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80040e0:	69bb      	ldr	r3, [r7, #24]
 80040e2:	f003 0307 	and.w	r3, r3, #7
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d00a      	beq.n	8004100 <pvPortMalloc+0xf8>
	__asm volatile
 80040ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040ee:	f383 8811 	msr	BASEPRI, r3
 80040f2:	f3bf 8f6f 	isb	sy
 80040f6:	f3bf 8f4f 	dsb	sy
 80040fa:	613b      	str	r3, [r7, #16]
}
 80040fc:	bf00      	nop
 80040fe:	e7fe      	b.n	80040fe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004102:	685a      	ldr	r2, [r3, #4]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	1ad2      	subs	r2, r2, r3
 8004108:	69bb      	ldr	r3, [r7, #24]
 800410a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800410c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800410e:	687a      	ldr	r2, [r7, #4]
 8004110:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004112:	69b8      	ldr	r0, [r7, #24]
 8004114:	f000 f908 	bl	8004328 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004118:	4b1d      	ldr	r3, [pc, #116]	; (8004190 <pvPortMalloc+0x188>)
 800411a:	681a      	ldr	r2, [r3, #0]
 800411c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	1ad3      	subs	r3, r2, r3
 8004122:	4a1b      	ldr	r2, [pc, #108]	; (8004190 <pvPortMalloc+0x188>)
 8004124:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004126:	4b1a      	ldr	r3, [pc, #104]	; (8004190 <pvPortMalloc+0x188>)
 8004128:	681a      	ldr	r2, [r3, #0]
 800412a:	4b1b      	ldr	r3, [pc, #108]	; (8004198 <pvPortMalloc+0x190>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	429a      	cmp	r2, r3
 8004130:	d203      	bcs.n	800413a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004132:	4b17      	ldr	r3, [pc, #92]	; (8004190 <pvPortMalloc+0x188>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a18      	ldr	r2, [pc, #96]	; (8004198 <pvPortMalloc+0x190>)
 8004138:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800413a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800413c:	685a      	ldr	r2, [r3, #4]
 800413e:	4b13      	ldr	r3, [pc, #76]	; (800418c <pvPortMalloc+0x184>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	431a      	orrs	r2, r3
 8004144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004146:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800414a:	2200      	movs	r2, #0
 800414c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800414e:	4b13      	ldr	r3, [pc, #76]	; (800419c <pvPortMalloc+0x194>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	3301      	adds	r3, #1
 8004154:	4a11      	ldr	r2, [pc, #68]	; (800419c <pvPortMalloc+0x194>)
 8004156:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004158:	f7ff fa5e 	bl	8003618 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800415c:	69fb      	ldr	r3, [r7, #28]
 800415e:	f003 0307 	and.w	r3, r3, #7
 8004162:	2b00      	cmp	r3, #0
 8004164:	d00a      	beq.n	800417c <pvPortMalloc+0x174>
	__asm volatile
 8004166:	f04f 0350 	mov.w	r3, #80	; 0x50
 800416a:	f383 8811 	msr	BASEPRI, r3
 800416e:	f3bf 8f6f 	isb	sy
 8004172:	f3bf 8f4f 	dsb	sy
 8004176:	60fb      	str	r3, [r7, #12]
}
 8004178:	bf00      	nop
 800417a:	e7fe      	b.n	800417a <pvPortMalloc+0x172>
	return pvReturn;
 800417c:	69fb      	ldr	r3, [r7, #28]
}
 800417e:	4618      	mov	r0, r3
 8004180:	3728      	adds	r7, #40	; 0x28
 8004182:	46bd      	mov	sp, r7
 8004184:	bd80      	pop	{r7, pc}
 8004186:	bf00      	nop
 8004188:	20004124 	.word	0x20004124
 800418c:	20004138 	.word	0x20004138
 8004190:	20004128 	.word	0x20004128
 8004194:	2000411c 	.word	0x2000411c
 8004198:	2000412c 	.word	0x2000412c
 800419c:	20004130 	.word	0x20004130

080041a0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b086      	sub	sp, #24
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d04d      	beq.n	800424e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80041b2:	2308      	movs	r3, #8
 80041b4:	425b      	negs	r3, r3
 80041b6:	697a      	ldr	r2, [r7, #20]
 80041b8:	4413      	add	r3, r2
 80041ba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80041bc:	697b      	ldr	r3, [r7, #20]
 80041be:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80041c0:	693b      	ldr	r3, [r7, #16]
 80041c2:	685a      	ldr	r2, [r3, #4]
 80041c4:	4b24      	ldr	r3, [pc, #144]	; (8004258 <vPortFree+0xb8>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4013      	ands	r3, r2
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d10a      	bne.n	80041e4 <vPortFree+0x44>
	__asm volatile
 80041ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041d2:	f383 8811 	msr	BASEPRI, r3
 80041d6:	f3bf 8f6f 	isb	sy
 80041da:	f3bf 8f4f 	dsb	sy
 80041de:	60fb      	str	r3, [r7, #12]
}
 80041e0:	bf00      	nop
 80041e2:	e7fe      	b.n	80041e2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80041e4:	693b      	ldr	r3, [r7, #16]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d00a      	beq.n	8004202 <vPortFree+0x62>
	__asm volatile
 80041ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041f0:	f383 8811 	msr	BASEPRI, r3
 80041f4:	f3bf 8f6f 	isb	sy
 80041f8:	f3bf 8f4f 	dsb	sy
 80041fc:	60bb      	str	r3, [r7, #8]
}
 80041fe:	bf00      	nop
 8004200:	e7fe      	b.n	8004200 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004202:	693b      	ldr	r3, [r7, #16]
 8004204:	685a      	ldr	r2, [r3, #4]
 8004206:	4b14      	ldr	r3, [pc, #80]	; (8004258 <vPortFree+0xb8>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4013      	ands	r3, r2
 800420c:	2b00      	cmp	r3, #0
 800420e:	d01e      	beq.n	800424e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d11a      	bne.n	800424e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004218:	693b      	ldr	r3, [r7, #16]
 800421a:	685a      	ldr	r2, [r3, #4]
 800421c:	4b0e      	ldr	r3, [pc, #56]	; (8004258 <vPortFree+0xb8>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	43db      	mvns	r3, r3
 8004222:	401a      	ands	r2, r3
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004228:	f7ff f9e8 	bl	80035fc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800422c:	693b      	ldr	r3, [r7, #16]
 800422e:	685a      	ldr	r2, [r3, #4]
 8004230:	4b0a      	ldr	r3, [pc, #40]	; (800425c <vPortFree+0xbc>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4413      	add	r3, r2
 8004236:	4a09      	ldr	r2, [pc, #36]	; (800425c <vPortFree+0xbc>)
 8004238:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800423a:	6938      	ldr	r0, [r7, #16]
 800423c:	f000 f874 	bl	8004328 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004240:	4b07      	ldr	r3, [pc, #28]	; (8004260 <vPortFree+0xc0>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	3301      	adds	r3, #1
 8004246:	4a06      	ldr	r2, [pc, #24]	; (8004260 <vPortFree+0xc0>)
 8004248:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800424a:	f7ff f9e5 	bl	8003618 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800424e:	bf00      	nop
 8004250:	3718      	adds	r7, #24
 8004252:	46bd      	mov	sp, r7
 8004254:	bd80      	pop	{r7, pc}
 8004256:	bf00      	nop
 8004258:	20004138 	.word	0x20004138
 800425c:	20004128 	.word	0x20004128
 8004260:	20004134 	.word	0x20004134

08004264 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004264:	b480      	push	{r7}
 8004266:	b085      	sub	sp, #20
 8004268:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800426a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800426e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004270:	4b27      	ldr	r3, [pc, #156]	; (8004310 <prvHeapInit+0xac>)
 8004272:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	f003 0307 	and.w	r3, r3, #7
 800427a:	2b00      	cmp	r3, #0
 800427c:	d00c      	beq.n	8004298 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	3307      	adds	r3, #7
 8004282:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	f023 0307 	bic.w	r3, r3, #7
 800428a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800428c:	68ba      	ldr	r2, [r7, #8]
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	1ad3      	subs	r3, r2, r3
 8004292:	4a1f      	ldr	r2, [pc, #124]	; (8004310 <prvHeapInit+0xac>)
 8004294:	4413      	add	r3, r2
 8004296:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800429c:	4a1d      	ldr	r2, [pc, #116]	; (8004314 <prvHeapInit+0xb0>)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80042a2:	4b1c      	ldr	r3, [pc, #112]	; (8004314 <prvHeapInit+0xb0>)
 80042a4:	2200      	movs	r2, #0
 80042a6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	68ba      	ldr	r2, [r7, #8]
 80042ac:	4413      	add	r3, r2
 80042ae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80042b0:	2208      	movs	r2, #8
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	1a9b      	subs	r3, r3, r2
 80042b6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	f023 0307 	bic.w	r3, r3, #7
 80042be:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	4a15      	ldr	r2, [pc, #84]	; (8004318 <prvHeapInit+0xb4>)
 80042c4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80042c6:	4b14      	ldr	r3, [pc, #80]	; (8004318 <prvHeapInit+0xb4>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	2200      	movs	r2, #0
 80042cc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80042ce:	4b12      	ldr	r3, [pc, #72]	; (8004318 <prvHeapInit+0xb4>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	2200      	movs	r2, #0
 80042d4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	68fa      	ldr	r2, [r7, #12]
 80042de:	1ad2      	subs	r2, r2, r3
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80042e4:	4b0c      	ldr	r3, [pc, #48]	; (8004318 <prvHeapInit+0xb4>)
 80042e6:	681a      	ldr	r2, [r3, #0]
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	4a0a      	ldr	r2, [pc, #40]	; (800431c <prvHeapInit+0xb8>)
 80042f2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	4a09      	ldr	r2, [pc, #36]	; (8004320 <prvHeapInit+0xbc>)
 80042fa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80042fc:	4b09      	ldr	r3, [pc, #36]	; (8004324 <prvHeapInit+0xc0>)
 80042fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004302:	601a      	str	r2, [r3, #0]
}
 8004304:	bf00      	nop
 8004306:	3714      	adds	r7, #20
 8004308:	46bd      	mov	sp, r7
 800430a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430e:	4770      	bx	lr
 8004310:	2000051c 	.word	0x2000051c
 8004314:	2000411c 	.word	0x2000411c
 8004318:	20004124 	.word	0x20004124
 800431c:	2000412c 	.word	0x2000412c
 8004320:	20004128 	.word	0x20004128
 8004324:	20004138 	.word	0x20004138

08004328 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004328:	b480      	push	{r7}
 800432a:	b085      	sub	sp, #20
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004330:	4b28      	ldr	r3, [pc, #160]	; (80043d4 <prvInsertBlockIntoFreeList+0xac>)
 8004332:	60fb      	str	r3, [r7, #12]
 8004334:	e002      	b.n	800433c <prvInsertBlockIntoFreeList+0x14>
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	60fb      	str	r3, [r7, #12]
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	687a      	ldr	r2, [r7, #4]
 8004342:	429a      	cmp	r2, r3
 8004344:	d8f7      	bhi.n	8004336 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	68ba      	ldr	r2, [r7, #8]
 8004350:	4413      	add	r3, r2
 8004352:	687a      	ldr	r2, [r7, #4]
 8004354:	429a      	cmp	r2, r3
 8004356:	d108      	bne.n	800436a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	685a      	ldr	r2, [r3, #4]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	441a      	add	r2, r3
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	68ba      	ldr	r2, [r7, #8]
 8004374:	441a      	add	r2, r3
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	429a      	cmp	r2, r3
 800437c:	d118      	bne.n	80043b0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681a      	ldr	r2, [r3, #0]
 8004382:	4b15      	ldr	r3, [pc, #84]	; (80043d8 <prvInsertBlockIntoFreeList+0xb0>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	429a      	cmp	r2, r3
 8004388:	d00d      	beq.n	80043a6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	685a      	ldr	r2, [r3, #4]
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	441a      	add	r2, r3
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	681a      	ldr	r2, [r3, #0]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	601a      	str	r2, [r3, #0]
 80043a4:	e008      	b.n	80043b8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80043a6:	4b0c      	ldr	r3, [pc, #48]	; (80043d8 <prvInsertBlockIntoFreeList+0xb0>)
 80043a8:	681a      	ldr	r2, [r3, #0]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	601a      	str	r2, [r3, #0]
 80043ae:	e003      	b.n	80043b8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681a      	ldr	r2, [r3, #0]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80043b8:	68fa      	ldr	r2, [r7, #12]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	429a      	cmp	r2, r3
 80043be:	d002      	beq.n	80043c6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	687a      	ldr	r2, [r7, #4]
 80043c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80043c6:	bf00      	nop
 80043c8:	3714      	adds	r7, #20
 80043ca:	46bd      	mov	sp, r7
 80043cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d0:	4770      	bx	lr
 80043d2:	bf00      	nop
 80043d4:	2000411c 	.word	0x2000411c
 80043d8:	20004124 	.word	0x20004124

080043dc <memset>:
 80043dc:	4402      	add	r2, r0
 80043de:	4603      	mov	r3, r0
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d100      	bne.n	80043e6 <memset+0xa>
 80043e4:	4770      	bx	lr
 80043e6:	f803 1b01 	strb.w	r1, [r3], #1
 80043ea:	e7f9      	b.n	80043e0 <memset+0x4>

080043ec <__libc_init_array>:
 80043ec:	b570      	push	{r4, r5, r6, lr}
 80043ee:	4d0d      	ldr	r5, [pc, #52]	; (8004424 <__libc_init_array+0x38>)
 80043f0:	4c0d      	ldr	r4, [pc, #52]	; (8004428 <__libc_init_array+0x3c>)
 80043f2:	1b64      	subs	r4, r4, r5
 80043f4:	10a4      	asrs	r4, r4, #2
 80043f6:	2600      	movs	r6, #0
 80043f8:	42a6      	cmp	r6, r4
 80043fa:	d109      	bne.n	8004410 <__libc_init_array+0x24>
 80043fc:	4d0b      	ldr	r5, [pc, #44]	; (800442c <__libc_init_array+0x40>)
 80043fe:	4c0c      	ldr	r4, [pc, #48]	; (8004430 <__libc_init_array+0x44>)
 8004400:	f000 f818 	bl	8004434 <_init>
 8004404:	1b64      	subs	r4, r4, r5
 8004406:	10a4      	asrs	r4, r4, #2
 8004408:	2600      	movs	r6, #0
 800440a:	42a6      	cmp	r6, r4
 800440c:	d105      	bne.n	800441a <__libc_init_array+0x2e>
 800440e:	bd70      	pop	{r4, r5, r6, pc}
 8004410:	f855 3b04 	ldr.w	r3, [r5], #4
 8004414:	4798      	blx	r3
 8004416:	3601      	adds	r6, #1
 8004418:	e7ee      	b.n	80043f8 <__libc_init_array+0xc>
 800441a:	f855 3b04 	ldr.w	r3, [r5], #4
 800441e:	4798      	blx	r3
 8004420:	3601      	adds	r6, #1
 8004422:	e7f2      	b.n	800440a <__libc_init_array+0x1e>
 8004424:	080044f4 	.word	0x080044f4
 8004428:	080044f4 	.word	0x080044f4
 800442c:	080044f4 	.word	0x080044f4
 8004430:	080044f8 	.word	0x080044f8

08004434 <_init>:
 8004434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004436:	bf00      	nop
 8004438:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800443a:	bc08      	pop	{r3}
 800443c:	469e      	mov	lr, r3
 800443e:	4770      	bx	lr

08004440 <_fini>:
 8004440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004442:	bf00      	nop
 8004444:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004446:	bc08      	pop	{r3}
 8004448:	469e      	mov	lr, r3
 800444a:	4770      	bx	lr
