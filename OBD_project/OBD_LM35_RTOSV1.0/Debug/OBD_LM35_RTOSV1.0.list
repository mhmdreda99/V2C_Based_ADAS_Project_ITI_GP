
OBD_LM35_RTOSV1.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005238  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  080053d8  080053d8  000153d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005438  08005438  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08005438  08005438  00015438  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005440  08005440  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005440  08005440  00015440  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005444  08005444  00015444  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005448  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004a08  20000010  08005458  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004a18  08005458  00024a18  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011f70  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002a95  00000000  00000000  00031ff3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f28  00000000  00000000  00034a88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ba7  00000000  00000000  000359b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002b6c  00000000  00000000  00036557  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011228  00000000  00000000  000390c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009a372  00000000  00000000  0004a2eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003ec4  00000000  00000000  000e4660  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000e8524  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000010 	.word	0x20000010
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080053c0 	.word	0x080053c0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000014 	.word	0x20000014
 80001dc:	080053c0 	.word	0x080053c0

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b970 	b.w	80004d8 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	460d      	mov	r5, r1
 8000218:	4604      	mov	r4, r0
 800021a:	460f      	mov	r7, r1
 800021c:	2b00      	cmp	r3, #0
 800021e:	d14a      	bne.n	80002b6 <__udivmoddi4+0xa6>
 8000220:	428a      	cmp	r2, r1
 8000222:	4694      	mov	ip, r2
 8000224:	d965      	bls.n	80002f2 <__udivmoddi4+0xe2>
 8000226:	fab2 f382 	clz	r3, r2
 800022a:	b143      	cbz	r3, 800023e <__udivmoddi4+0x2e>
 800022c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000230:	f1c3 0220 	rsb	r2, r3, #32
 8000234:	409f      	lsls	r7, r3
 8000236:	fa20 f202 	lsr.w	r2, r0, r2
 800023a:	4317      	orrs	r7, r2
 800023c:	409c      	lsls	r4, r3
 800023e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000242:	fa1f f58c 	uxth.w	r5, ip
 8000246:	fbb7 f1fe 	udiv	r1, r7, lr
 800024a:	0c22      	lsrs	r2, r4, #16
 800024c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000250:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000254:	fb01 f005 	mul.w	r0, r1, r5
 8000258:	4290      	cmp	r0, r2
 800025a:	d90a      	bls.n	8000272 <__udivmoddi4+0x62>
 800025c:	eb1c 0202 	adds.w	r2, ip, r2
 8000260:	f101 37ff 	add.w	r7, r1, #4294967295
 8000264:	f080 811c 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000268:	4290      	cmp	r0, r2
 800026a:	f240 8119 	bls.w	80004a0 <__udivmoddi4+0x290>
 800026e:	3902      	subs	r1, #2
 8000270:	4462      	add	r2, ip
 8000272:	1a12      	subs	r2, r2, r0
 8000274:	b2a4      	uxth	r4, r4
 8000276:	fbb2 f0fe 	udiv	r0, r2, lr
 800027a:	fb0e 2210 	mls	r2, lr, r0, r2
 800027e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000282:	fb00 f505 	mul.w	r5, r0, r5
 8000286:	42a5      	cmp	r5, r4
 8000288:	d90a      	bls.n	80002a0 <__udivmoddi4+0x90>
 800028a:	eb1c 0404 	adds.w	r4, ip, r4
 800028e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000292:	f080 8107 	bcs.w	80004a4 <__udivmoddi4+0x294>
 8000296:	42a5      	cmp	r5, r4
 8000298:	f240 8104 	bls.w	80004a4 <__udivmoddi4+0x294>
 800029c:	4464      	add	r4, ip
 800029e:	3802      	subs	r0, #2
 80002a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002a4:	1b64      	subs	r4, r4, r5
 80002a6:	2100      	movs	r1, #0
 80002a8:	b11e      	cbz	r6, 80002b2 <__udivmoddi4+0xa2>
 80002aa:	40dc      	lsrs	r4, r3
 80002ac:	2300      	movs	r3, #0
 80002ae:	e9c6 4300 	strd	r4, r3, [r6]
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d908      	bls.n	80002cc <__udivmoddi4+0xbc>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80ed 	beq.w	800049a <__udivmoddi4+0x28a>
 80002c0:	2100      	movs	r1, #0
 80002c2:	e9c6 0500 	strd	r0, r5, [r6]
 80002c6:	4608      	mov	r0, r1
 80002c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002cc:	fab3 f183 	clz	r1, r3
 80002d0:	2900      	cmp	r1, #0
 80002d2:	d149      	bne.n	8000368 <__udivmoddi4+0x158>
 80002d4:	42ab      	cmp	r3, r5
 80002d6:	d302      	bcc.n	80002de <__udivmoddi4+0xce>
 80002d8:	4282      	cmp	r2, r0
 80002da:	f200 80f8 	bhi.w	80004ce <__udivmoddi4+0x2be>
 80002de:	1a84      	subs	r4, r0, r2
 80002e0:	eb65 0203 	sbc.w	r2, r5, r3
 80002e4:	2001      	movs	r0, #1
 80002e6:	4617      	mov	r7, r2
 80002e8:	2e00      	cmp	r6, #0
 80002ea:	d0e2      	beq.n	80002b2 <__udivmoddi4+0xa2>
 80002ec:	e9c6 4700 	strd	r4, r7, [r6]
 80002f0:	e7df      	b.n	80002b2 <__udivmoddi4+0xa2>
 80002f2:	b902      	cbnz	r2, 80002f6 <__udivmoddi4+0xe6>
 80002f4:	deff      	udf	#255	; 0xff
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x210>
 8000300:	1a8a      	subs	r2, r1, r2
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2101      	movs	r1, #1
 800030c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000310:	fb07 2015 	mls	r0, r7, r5, r2
 8000314:	0c22      	lsrs	r2, r4, #16
 8000316:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800031a:	fb0e f005 	mul.w	r0, lr, r5
 800031e:	4290      	cmp	r0, r2
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x124>
 8000322:	eb1c 0202 	adds.w	r2, ip, r2
 8000326:	f105 38ff 	add.w	r8, r5, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4290      	cmp	r0, r2
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2b8>
 8000332:	4645      	mov	r5, r8
 8000334:	1a12      	subs	r2, r2, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb2 f0f7 	udiv	r0, r2, r7
 800033c:	fb07 2210 	mls	r2, r7, r0, r2
 8000340:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x14e>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 32ff 	add.w	r2, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x14c>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2c2>
 800035c:	4610      	mov	r0, r2
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000366:	e79f      	b.n	80002a8 <__udivmoddi4+0x98>
 8000368:	f1c1 0720 	rsb	r7, r1, #32
 800036c:	408b      	lsls	r3, r1
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa05 f401 	lsl.w	r4, r5, r1
 800037a:	fa20 f307 	lsr.w	r3, r0, r7
 800037e:	40fd      	lsrs	r5, r7
 8000380:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000384:	4323      	orrs	r3, r4
 8000386:	fbb5 f8f9 	udiv	r8, r5, r9
 800038a:	fa1f fe8c 	uxth.w	lr, ip
 800038e:	fb09 5518 	mls	r5, r9, r8, r5
 8000392:	0c1c      	lsrs	r4, r3, #16
 8000394:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000398:	fb08 f50e 	mul.w	r5, r8, lr
 800039c:	42a5      	cmp	r5, r4
 800039e:	fa02 f201 	lsl.w	r2, r2, r1
 80003a2:	fa00 f001 	lsl.w	r0, r0, r1
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2b4>
 80003b4:	42a5      	cmp	r5, r4
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2b4>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4464      	add	r4, ip
 80003c0:	1b64      	subs	r4, r4, r5
 80003c2:	b29d      	uxth	r5, r3
 80003c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c8:	fb09 4413 	mls	r4, r9, r3, r4
 80003cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f103 35ff 	add.w	r5, r3, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2ac>
 80003e2:	45a6      	cmp	lr, r4
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2ac>
 80003e6:	3b02      	subs	r3, #2
 80003e8:	4464      	add	r4, ip
 80003ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003ee:	fba3 9502 	umull	r9, r5, r3, r2
 80003f2:	eba4 040e 	sub.w	r4, r4, lr
 80003f6:	42ac      	cmp	r4, r5
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46ae      	mov	lr, r5
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x29c>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x298>
 8000400:	b156      	cbz	r6, 8000418 <__udivmoddi4+0x208>
 8000402:	ebb0 0208 	subs.w	r2, r0, r8
 8000406:	eb64 040e 	sbc.w	r4, r4, lr
 800040a:	fa04 f707 	lsl.w	r7, r4, r7
 800040e:	40ca      	lsrs	r2, r1
 8000410:	40cc      	lsrs	r4, r1
 8000412:	4317      	orrs	r7, r2
 8000414:	e9c6 7400 	strd	r7, r4, [r6]
 8000418:	4618      	mov	r0, r3
 800041a:	2100      	movs	r1, #0
 800041c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000420:	f1c3 0120 	rsb	r1, r3, #32
 8000424:	fa02 fc03 	lsl.w	ip, r2, r3
 8000428:	fa20 f201 	lsr.w	r2, r0, r1
 800042c:	fa25 f101 	lsr.w	r1, r5, r1
 8000430:	409d      	lsls	r5, r3
 8000432:	432a      	orrs	r2, r5
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000440:	fb07 1510 	mls	r5, r7, r0, r1
 8000444:	0c11      	lsrs	r1, r2, #16
 8000446:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800044a:	fb00 f50e 	mul.w	r5, r0, lr
 800044e:	428d      	cmp	r5, r1
 8000450:	fa04 f403 	lsl.w	r4, r4, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x258>
 8000456:	eb1c 0101 	adds.w	r1, ip, r1
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000460:	428d      	cmp	r5, r1
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000464:	3802      	subs	r0, #2
 8000466:	4461      	add	r1, ip
 8000468:	1b49      	subs	r1, r1, r5
 800046a:	b292      	uxth	r2, r2
 800046c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000470:	fb07 1115 	mls	r1, r7, r5, r1
 8000474:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000478:	fb05 f10e 	mul.w	r1, r5, lr
 800047c:	4291      	cmp	r1, r2
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x282>
 8000480:	eb1c 0202 	adds.w	r2, ip, r2
 8000484:	f105 38ff 	add.w	r8, r5, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2a8>
 800048a:	4291      	cmp	r1, r2
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2a8>
 800048e:	3d02      	subs	r5, #2
 8000490:	4462      	add	r2, ip
 8000492:	1a52      	subs	r2, r2, r1
 8000494:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0xfc>
 800049a:	4631      	mov	r1, r6
 800049c:	4630      	mov	r0, r6
 800049e:	e708      	b.n	80002b2 <__udivmoddi4+0xa2>
 80004a0:	4639      	mov	r1, r7
 80004a2:	e6e6      	b.n	8000272 <__udivmoddi4+0x62>
 80004a4:	4610      	mov	r0, r2
 80004a6:	e6fb      	b.n	80002a0 <__udivmoddi4+0x90>
 80004a8:	4548      	cmp	r0, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004b4:	3b01      	subs	r3, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b8:	4645      	mov	r5, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x282>
 80004bc:	462b      	mov	r3, r5
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1da>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x258>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c8:	3d02      	subs	r5, #2
 80004ca:	4462      	add	r2, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x124>
 80004ce:	4608      	mov	r0, r1
 80004d0:	e70a      	b.n	80002e8 <__udivmoddi4+0xd8>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x14e>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80004e0:	f000 fad6 	bl	8000a90 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80004e4:	f000 f81a 	bl	800051c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80004e8:	f000 f8f4 	bl	80006d4 <MX_GPIO_Init>
	MX_ADC1_Init();
 80004ec:	f000 f876 	bl	80005dc <MX_ADC1_Init>
	MX_USART2_UART_Init();
 80004f0:	f000 f8c6 	bl	8000680 <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */

	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize();
 80004f4:	f002 f9d8 	bl	80028a8 <osKernelInitialize>
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of LM35Task0 */
	LM35Task0Handle = osThreadNew(LM35_getTemprature, NULL, &LM35Task0_attributes);
 80004f8:	4a05      	ldr	r2, [pc, #20]	; (8000510 <main+0x34>)
 80004fa:	2100      	movs	r1, #0
 80004fc:	4805      	ldr	r0, [pc, #20]	; (8000514 <main+0x38>)
 80004fe:	f002 fa1d 	bl	800293c <osThreadNew>
 8000502:	4603      	mov	r3, r0
 8000504:	4a04      	ldr	r2, [pc, #16]	; (8000518 <main+0x3c>)
 8000506:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	/* USER CODE END RTOS_EVENTS */

	/* Start scheduler */
	osKernelStart();
 8000508:	f002 f9f2 	bl	80028f0 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 800050c:	e7fe      	b.n	800050c <main+0x30>
 800050e:	bf00      	nop
 8000510:	080053fc 	.word	0x080053fc
 8000514:	080007a5 	.word	0x080007a5
 8000518:	200000b8 	.word	0x200000b8

0800051c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b094      	sub	sp, #80	; 0x50
 8000520:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000522:	f107 0320 	add.w	r3, r7, #32
 8000526:	2230      	movs	r2, #48	; 0x30
 8000528:	2100      	movs	r1, #0
 800052a:	4618      	mov	r0, r3
 800052c:	f004 ff0e 	bl	800534c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000530:	f107 030c 	add.w	r3, r7, #12
 8000534:	2200      	movs	r2, #0
 8000536:	601a      	str	r2, [r3, #0]
 8000538:	605a      	str	r2, [r3, #4]
 800053a:	609a      	str	r2, [r3, #8]
 800053c:	60da      	str	r2, [r3, #12]
 800053e:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000540:	2300      	movs	r3, #0
 8000542:	60bb      	str	r3, [r7, #8]
 8000544:	4b23      	ldr	r3, [pc, #140]	; (80005d4 <SystemClock_Config+0xb8>)
 8000546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000548:	4a22      	ldr	r2, [pc, #136]	; (80005d4 <SystemClock_Config+0xb8>)
 800054a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800054e:	6413      	str	r3, [r2, #64]	; 0x40
 8000550:	4b20      	ldr	r3, [pc, #128]	; (80005d4 <SystemClock_Config+0xb8>)
 8000552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000554:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000558:	60bb      	str	r3, [r7, #8]
 800055a:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800055c:	2300      	movs	r3, #0
 800055e:	607b      	str	r3, [r7, #4]
 8000560:	4b1d      	ldr	r3, [pc, #116]	; (80005d8 <SystemClock_Config+0xbc>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000568:	4a1b      	ldr	r2, [pc, #108]	; (80005d8 <SystemClock_Config+0xbc>)
 800056a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800056e:	6013      	str	r3, [r2, #0]
 8000570:	4b19      	ldr	r3, [pc, #100]	; (80005d8 <SystemClock_Config+0xbc>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000578:	607b      	str	r3, [r7, #4]
 800057a:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800057c:	2302      	movs	r3, #2
 800057e:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000580:	2301      	movs	r3, #1
 8000582:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000584:	2310      	movs	r3, #16
 8000586:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000588:	2300      	movs	r3, #0
 800058a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800058c:	f107 0320 	add.w	r3, r7, #32
 8000590:	4618      	mov	r0, r3
 8000592:	f001 f93b 	bl	800180c <HAL_RCC_OscConfig>
 8000596:	4603      	mov	r3, r0
 8000598:	2b00      	cmp	r3, #0
 800059a:	d001      	beq.n	80005a0 <SystemClock_Config+0x84>
	{
		Error_Handler();
 800059c:	f000 f95a 	bl	8000854 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005a0:	230f      	movs	r3, #15
 80005a2:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005a4:	2300      	movs	r3, #0
 80005a6:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005a8:	2300      	movs	r3, #0
 80005aa:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005ac:	2300      	movs	r3, #0
 80005ae:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005b0:	2300      	movs	r3, #0
 80005b2:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005b4:	f107 030c 	add.w	r3, r7, #12
 80005b8:	2100      	movs	r1, #0
 80005ba:	4618      	mov	r0, r3
 80005bc:	f001 fb9e 	bl	8001cfc <HAL_RCC_ClockConfig>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d001      	beq.n	80005ca <SystemClock_Config+0xae>
	{
		Error_Handler();
 80005c6:	f000 f945 	bl	8000854 <Error_Handler>
	}
}
 80005ca:	bf00      	nop
 80005cc:	3750      	adds	r7, #80	; 0x50
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	40023800 	.word	0x40023800
 80005d8:	40007000 	.word	0x40007000

080005dc <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b084      	sub	sp, #16
 80005e0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = {0};
 80005e2:	463b      	mov	r3, r7
 80005e4:	2200      	movs	r2, #0
 80005e6:	601a      	str	r2, [r3, #0]
 80005e8:	605a      	str	r2, [r3, #4]
 80005ea:	609a      	str	r2, [r3, #8]
 80005ec:	60da      	str	r2, [r3, #12]

	/* USER CODE END ADC1_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 80005ee:	4b21      	ldr	r3, [pc, #132]	; (8000674 <MX_ADC1_Init+0x98>)
 80005f0:	4a21      	ldr	r2, [pc, #132]	; (8000678 <MX_ADC1_Init+0x9c>)
 80005f2:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80005f4:	4b1f      	ldr	r3, [pc, #124]	; (8000674 <MX_ADC1_Init+0x98>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005fa:	4b1e      	ldr	r3, [pc, #120]	; (8000674 <MX_ADC1_Init+0x98>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = DISABLE;
 8000600:	4b1c      	ldr	r3, [pc, #112]	; (8000674 <MX_ADC1_Init+0x98>)
 8000602:	2200      	movs	r2, #0
 8000604:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8000606:	4b1b      	ldr	r3, [pc, #108]	; (8000674 <MX_ADC1_Init+0x98>)
 8000608:	2200      	movs	r2, #0
 800060a:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 800060c:	4b19      	ldr	r3, [pc, #100]	; (8000674 <MX_ADC1_Init+0x98>)
 800060e:	2200      	movs	r2, #0
 8000610:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000614:	4b17      	ldr	r3, [pc, #92]	; (8000674 <MX_ADC1_Init+0x98>)
 8000616:	2200      	movs	r2, #0
 8000618:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800061a:	4b16      	ldr	r3, [pc, #88]	; (8000674 <MX_ADC1_Init+0x98>)
 800061c:	4a17      	ldr	r2, [pc, #92]	; (800067c <MX_ADC1_Init+0xa0>)
 800061e:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000620:	4b14      	ldr	r3, [pc, #80]	; (8000674 <MX_ADC1_Init+0x98>)
 8000622:	2200      	movs	r2, #0
 8000624:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 8000626:	4b13      	ldr	r3, [pc, #76]	; (8000674 <MX_ADC1_Init+0x98>)
 8000628:	2201      	movs	r2, #1
 800062a:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 800062c:	4b11      	ldr	r3, [pc, #68]	; (8000674 <MX_ADC1_Init+0x98>)
 800062e:	2200      	movs	r2, #0
 8000630:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000634:	4b0f      	ldr	r3, [pc, #60]	; (8000674 <MX_ADC1_Init+0x98>)
 8000636:	2201      	movs	r2, #1
 8000638:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800063a:	480e      	ldr	r0, [pc, #56]	; (8000674 <MX_ADC1_Init+0x98>)
 800063c:	f000 fa9a 	bl	8000b74 <HAL_ADC_Init>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d001      	beq.n	800064a <MX_ADC1_Init+0x6e>
	{
		Error_Handler();
 8000646:	f000 f905 	bl	8000854 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_5;
 800064a:	2305      	movs	r3, #5
 800064c:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 800064e:	2301      	movs	r3, #1
 8000650:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000652:	2300      	movs	r3, #0
 8000654:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000656:	463b      	mov	r3, r7
 8000658:	4619      	mov	r1, r3
 800065a:	4806      	ldr	r0, [pc, #24]	; (8000674 <MX_ADC1_Init+0x98>)
 800065c:	f000 fc4e 	bl	8000efc <HAL_ADC_ConfigChannel>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <MX_ADC1_Init+0x8e>
	{
		Error_Handler();
 8000666:	f000 f8f5 	bl	8000854 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 800066a:	bf00      	nop
 800066c:	3710      	adds	r7, #16
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	2000002c 	.word	0x2000002c
 8000678:	40012000 	.word	0x40012000
 800067c:	0f000001 	.word	0x0f000001

08000680 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000684:	4b11      	ldr	r3, [pc, #68]	; (80006cc <MX_USART2_UART_Init+0x4c>)
 8000686:	4a12      	ldr	r2, [pc, #72]	; (80006d0 <MX_USART2_UART_Init+0x50>)
 8000688:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 800068a:	4b10      	ldr	r3, [pc, #64]	; (80006cc <MX_USART2_UART_Init+0x4c>)
 800068c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000690:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000692:	4b0e      	ldr	r3, [pc, #56]	; (80006cc <MX_USART2_UART_Init+0x4c>)
 8000694:	2200      	movs	r2, #0
 8000696:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000698:	4b0c      	ldr	r3, [pc, #48]	; (80006cc <MX_USART2_UART_Init+0x4c>)
 800069a:	2200      	movs	r2, #0
 800069c:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800069e:	4b0b      	ldr	r3, [pc, #44]	; (80006cc <MX_USART2_UART_Init+0x4c>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80006a4:	4b09      	ldr	r3, [pc, #36]	; (80006cc <MX_USART2_UART_Init+0x4c>)
 80006a6:	220c      	movs	r2, #12
 80006a8:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006aa:	4b08      	ldr	r3, [pc, #32]	; (80006cc <MX_USART2_UART_Init+0x4c>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006b0:	4b06      	ldr	r3, [pc, #24]	; (80006cc <MX_USART2_UART_Init+0x4c>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK)
 80006b6:	4805      	ldr	r0, [pc, #20]	; (80006cc <MX_USART2_UART_Init+0x4c>)
 80006b8:	f001 fd00 	bl	80020bc <HAL_UART_Init>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <MX_USART2_UART_Init+0x46>
	{
		Error_Handler();
 80006c2:	f000 f8c7 	bl	8000854 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80006c6:	bf00      	nop
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	20000074 	.word	0x20000074
 80006d0:	40004400 	.word	0x40004400

080006d4 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80006d4:	b480      	push	{r7}
 80006d6:	b083      	sub	sp, #12
 80006d8:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80006da:	2300      	movs	r3, #0
 80006dc:	607b      	str	r3, [r7, #4]
 80006de:	4b09      	ldr	r3, [pc, #36]	; (8000704 <MX_GPIO_Init+0x30>)
 80006e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e2:	4a08      	ldr	r2, [pc, #32]	; (8000704 <MX_GPIO_Init+0x30>)
 80006e4:	f043 0301 	orr.w	r3, r3, #1
 80006e8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ea:	4b06      	ldr	r3, [pc, #24]	; (8000704 <MX_GPIO_Init+0x30>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ee:	f003 0301 	and.w	r3, r3, #1
 80006f2:	607b      	str	r3, [r7, #4]
 80006f4:	687b      	ldr	r3, [r7, #4]

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80006f6:	bf00      	nop
 80006f8:	370c      	adds	r7, #12
 80006fa:	46bd      	mov	sp, r7
 80006fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000700:	4770      	bx	lr
 8000702:	bf00      	nop
 8000704:	40023800 	.word	0x40023800

08000708 <getDigitalTemperatureFromADC>:

/* USER CODE BEGIN 4 */

void getDigitalTemperatureFromADC (){
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc1);
 800070c:	4809      	ldr	r0, [pc, #36]	; (8000734 <getDigitalTemperatureFromADC+0x2c>)
 800070e:	f000 fa75 	bl	8000bfc <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 100);
 8000712:	2164      	movs	r1, #100	; 0x64
 8000714:	4807      	ldr	r0, [pc, #28]	; (8000734 <getDigitalTemperatureFromADC+0x2c>)
 8000716:	f000 fb58 	bl	8000dca <HAL_ADC_PollForConversion>
	ADC_TempratureDigitalRead = HAL_ADC_GetValue(&hadc1);
 800071a:	4806      	ldr	r0, [pc, #24]	; (8000734 <getDigitalTemperatureFromADC+0x2c>)
 800071c:	f000 fbe0 	bl	8000ee0 <HAL_ADC_GetValue>
 8000720:	4603      	mov	r3, r0
 8000722:	b29a      	uxth	r2, r3
 8000724:	4b04      	ldr	r3, [pc, #16]	; (8000738 <getDigitalTemperatureFromADC+0x30>)
 8000726:	801a      	strh	r2, [r3, #0]
	HAL_ADC_Stop(&hadc1);
 8000728:	4802      	ldr	r0, [pc, #8]	; (8000734 <getDigitalTemperatureFromADC+0x2c>)
 800072a:	f000 fb1b 	bl	8000d64 <HAL_ADC_Stop>
}
 800072e:	bf00      	nop
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	2000002c 	.word	0x2000002c
 8000738:	200000bc 	.word	0x200000bc

0800073c <mapDigitalTemperatureToVolt>:
void mapDigitalTemperatureToVolt() {
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0
	temperatureInMVolt = (ADC_TempratureDigitalRead*(LM35_MAX_OUT_VOLt-LM35_MINIMUM_OUT_VOLT))/(LM35_MAX_DIGITA_VALUE)+LM35_MINIMUM_OUT_VOLT;
 8000740:	4b09      	ldr	r3, [pc, #36]	; (8000768 <mapDigitalTemperatureToVolt+0x2c>)
 8000742:	881b      	ldrh	r3, [r3, #0]
 8000744:	461a      	mov	r2, r3
 8000746:	f44f 63b9 	mov.w	r3, #1480	; 0x5c8
 800074a:	fb02 f303 	mul.w	r3, r2, r3
 800074e:	2b00      	cmp	r3, #0
 8000750:	da01      	bge.n	8000756 <mapDigitalTemperatureToVolt+0x1a>
 8000752:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8000756:	131b      	asrs	r3, r3, #12
 8000758:	b29a      	uxth	r2, r3
 800075a:	4b04      	ldr	r3, [pc, #16]	; (800076c <mapDigitalTemperatureToVolt+0x30>)
 800075c:	801a      	strh	r2, [r3, #0]
}
 800075e:	bf00      	nop
 8000760:	46bd      	mov	sp, r7
 8000762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000766:	4770      	bx	lr
 8000768:	200000bc 	.word	0x200000bc
 800076c:	200000c0 	.word	0x200000c0

08000770 <mapMVoltToCelsius>:

void mapMVoltToCelsius() {
 8000770:	b480      	push	{r7}
 8000772:	af00      	add	r7, sp, #0
	temperatureInCelsius = (temperatureInMVolt*(LM35_MAX_TEMPRATURE-LM35_MINIMUM_TEMPRATURE))/(LM35_MAX_OUT_VOLt-LM35_MINIMUM_OUT_VOLT) + LM35_MINIMUM_TEMPRATURE ;
 8000774:	4b08      	ldr	r3, [pc, #32]	; (8000798 <mapMVoltToCelsius+0x28>)
 8000776:	881b      	ldrh	r3, [r3, #0]
 8000778:	4a08      	ldr	r2, [pc, #32]	; (800079c <mapMVoltToCelsius+0x2c>)
 800077a:	fb82 1203 	smull	r1, r2, r2, r3
 800077e:	1092      	asrs	r2, r2, #2
 8000780:	17db      	asrs	r3, r3, #31
 8000782:	1ad3      	subs	r3, r2, r3
 8000784:	b2db      	uxtb	r3, r3
 8000786:	3302      	adds	r3, #2
 8000788:	b2da      	uxtb	r2, r3
 800078a:	4b05      	ldr	r3, [pc, #20]	; (80007a0 <mapMVoltToCelsius+0x30>)
 800078c:	701a      	strb	r2, [r3, #0]
}
 800078e:	bf00      	nop
 8000790:	46bd      	mov	sp, r7
 8000792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000796:	4770      	bx	lr
 8000798:	200000c0 	.word	0x200000c0
 800079c:	66666667 	.word	0x66666667
 80007a0:	200000be 	.word	0x200000be

080007a4 <LM35_getTemprature>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_LM35_getTemprature */
void LM35_getTemprature(void *argument)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b084      	sub	sp, #16
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for(;;)
	{
		//getting temperature digital value from adc
		getDigitalTemperatureFromADC();
 80007ac:	f7ff ffac 	bl	8000708 <getDigitalTemperatureFromADC>
		//mapping Digital temperature to volt
		mapDigitalTemperatureToVolt();
 80007b0:	f7ff ffc4 	bl	800073c <mapDigitalTemperatureToVolt>
		//mapping volt to celsius
		mapMVoltToCelsius();
 80007b4:	f7ff ffdc 	bl	8000770 <mapMVoltToCelsius>
		uint8_t temp0 = (temperatureInCelsius%10 ) 		+ 48;
 80007b8:	4b22      	ldr	r3, [pc, #136]	; (8000844 <LM35_getTemprature+0xa0>)
 80007ba:	781a      	ldrb	r2, [r3, #0]
 80007bc:	4b22      	ldr	r3, [pc, #136]	; (8000848 <LM35_getTemprature+0xa4>)
 80007be:	fba3 1302 	umull	r1, r3, r3, r2
 80007c2:	08d9      	lsrs	r1, r3, #3
 80007c4:	460b      	mov	r3, r1
 80007c6:	009b      	lsls	r3, r3, #2
 80007c8:	440b      	add	r3, r1
 80007ca:	005b      	lsls	r3, r3, #1
 80007cc:	1ad3      	subs	r3, r2, r3
 80007ce:	b2db      	uxtb	r3, r3
 80007d0:	3330      	adds	r3, #48	; 0x30
 80007d2:	b2db      	uxtb	r3, r3
 80007d4:	73fb      	strb	r3, [r7, #15]
		uint8_t temp1 = (temperatureInCelsius%100) /10 	+ 48;
 80007d6:	4b1b      	ldr	r3, [pc, #108]	; (8000844 <LM35_getTemprature+0xa0>)
 80007d8:	781b      	ldrb	r3, [r3, #0]
 80007da:	4a1c      	ldr	r2, [pc, #112]	; (800084c <LM35_getTemprature+0xa8>)
 80007dc:	fba2 1203 	umull	r1, r2, r2, r3
 80007e0:	0952      	lsrs	r2, r2, #5
 80007e2:	2164      	movs	r1, #100	; 0x64
 80007e4:	fb01 f202 	mul.w	r2, r1, r2
 80007e8:	1a9b      	subs	r3, r3, r2
 80007ea:	b2db      	uxtb	r3, r3
 80007ec:	4a16      	ldr	r2, [pc, #88]	; (8000848 <LM35_getTemprature+0xa4>)
 80007ee:	fba2 2303 	umull	r2, r3, r2, r3
 80007f2:	08db      	lsrs	r3, r3, #3
 80007f4:	b2db      	uxtb	r3, r3
 80007f6:	3330      	adds	r3, #48	; 0x30
 80007f8:	b2db      	uxtb	r3, r3
 80007fa:	73bb      	strb	r3, [r7, #14]
		uint8_t temp2 = (temperatureInCelsius/100) 		+ 48;
 80007fc:	4b11      	ldr	r3, [pc, #68]	; (8000844 <LM35_getTemprature+0xa0>)
 80007fe:	781b      	ldrb	r3, [r3, #0]
 8000800:	4a12      	ldr	r2, [pc, #72]	; (800084c <LM35_getTemprature+0xa8>)
 8000802:	fba2 2303 	umull	r2, r3, r2, r3
 8000806:	095b      	lsrs	r3, r3, #5
 8000808:	b2db      	uxtb	r3, r3
 800080a:	3330      	adds	r3, #48	; 0x30
 800080c:	b2db      	uxtb	r3, r3
 800080e:	737b      	strb	r3, [r7, #13]


		HAL_UART_Transmit(&huart2, &temp2, 1, 100);
 8000810:	f107 010d 	add.w	r1, r7, #13
 8000814:	2364      	movs	r3, #100	; 0x64
 8000816:	2201      	movs	r2, #1
 8000818:	480d      	ldr	r0, [pc, #52]	; (8000850 <LM35_getTemprature+0xac>)
 800081a:	f001 fc9c 	bl	8002156 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, &temp1, 1, 100);
 800081e:	f107 010e 	add.w	r1, r7, #14
 8000822:	2364      	movs	r3, #100	; 0x64
 8000824:	2201      	movs	r2, #1
 8000826:	480a      	ldr	r0, [pc, #40]	; (8000850 <LM35_getTemprature+0xac>)
 8000828:	f001 fc95 	bl	8002156 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, &temp0, 1, 100);
 800082c:	f107 010f 	add.w	r1, r7, #15
 8000830:	2364      	movs	r3, #100	; 0x64
 8000832:	2201      	movs	r2, #1
 8000834:	4806      	ldr	r0, [pc, #24]	; (8000850 <LM35_getTemprature+0xac>)
 8000836:	f001 fc8e 	bl	8002156 <HAL_UART_Transmit>
		osDelay(1000);
 800083a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800083e:	f002 f90f 	bl	8002a60 <osDelay>
	{
 8000842:	e7b3      	b.n	80007ac <LM35_getTemprature+0x8>
 8000844:	200000be 	.word	0x200000be
 8000848:	cccccccd 	.word	0xcccccccd
 800084c:	51eb851f 	.word	0x51eb851f
 8000850:	20000074 	.word	0x20000074

08000854 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000858:	b672      	cpsid	i
}
 800085a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800085c:	e7fe      	b.n	800085c <Error_Handler+0x8>
	...

08000860 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b082      	sub	sp, #8
 8000864:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000866:	2300      	movs	r3, #0
 8000868:	607b      	str	r3, [r7, #4]
 800086a:	4b12      	ldr	r3, [pc, #72]	; (80008b4 <HAL_MspInit+0x54>)
 800086c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800086e:	4a11      	ldr	r2, [pc, #68]	; (80008b4 <HAL_MspInit+0x54>)
 8000870:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000874:	6453      	str	r3, [r2, #68]	; 0x44
 8000876:	4b0f      	ldr	r3, [pc, #60]	; (80008b4 <HAL_MspInit+0x54>)
 8000878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800087a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800087e:	607b      	str	r3, [r7, #4]
 8000880:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000882:	2300      	movs	r3, #0
 8000884:	603b      	str	r3, [r7, #0]
 8000886:	4b0b      	ldr	r3, [pc, #44]	; (80008b4 <HAL_MspInit+0x54>)
 8000888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800088a:	4a0a      	ldr	r2, [pc, #40]	; (80008b4 <HAL_MspInit+0x54>)
 800088c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000890:	6413      	str	r3, [r2, #64]	; 0x40
 8000892:	4b08      	ldr	r3, [pc, #32]	; (80008b4 <HAL_MspInit+0x54>)
 8000894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000896:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800089a:	603b      	str	r3, [r7, #0]
 800089c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800089e:	2200      	movs	r2, #0
 80008a0:	210f      	movs	r1, #15
 80008a2:	f06f 0001 	mvn.w	r0, #1
 80008a6:	f000 fe04 	bl	80014b2 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008aa:	bf00      	nop
 80008ac:	3708      	adds	r7, #8
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	40023800 	.word	0x40023800

080008b8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b08a      	sub	sp, #40	; 0x28
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c0:	f107 0314 	add.w	r3, r7, #20
 80008c4:	2200      	movs	r2, #0
 80008c6:	601a      	str	r2, [r3, #0]
 80008c8:	605a      	str	r2, [r3, #4]
 80008ca:	609a      	str	r2, [r3, #8]
 80008cc:	60da      	str	r2, [r3, #12]
 80008ce:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	4a17      	ldr	r2, [pc, #92]	; (8000934 <HAL_ADC_MspInit+0x7c>)
 80008d6:	4293      	cmp	r3, r2
 80008d8:	d127      	bne.n	800092a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80008da:	2300      	movs	r3, #0
 80008dc:	613b      	str	r3, [r7, #16]
 80008de:	4b16      	ldr	r3, [pc, #88]	; (8000938 <HAL_ADC_MspInit+0x80>)
 80008e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008e2:	4a15      	ldr	r2, [pc, #84]	; (8000938 <HAL_ADC_MspInit+0x80>)
 80008e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008e8:	6453      	str	r3, [r2, #68]	; 0x44
 80008ea:	4b13      	ldr	r3, [pc, #76]	; (8000938 <HAL_ADC_MspInit+0x80>)
 80008ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80008f2:	613b      	str	r3, [r7, #16]
 80008f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008f6:	2300      	movs	r3, #0
 80008f8:	60fb      	str	r3, [r7, #12]
 80008fa:	4b0f      	ldr	r3, [pc, #60]	; (8000938 <HAL_ADC_MspInit+0x80>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fe:	4a0e      	ldr	r2, [pc, #56]	; (8000938 <HAL_ADC_MspInit+0x80>)
 8000900:	f043 0301 	orr.w	r3, r3, #1
 8000904:	6313      	str	r3, [r2, #48]	; 0x30
 8000906:	4b0c      	ldr	r3, [pc, #48]	; (8000938 <HAL_ADC_MspInit+0x80>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090a:	f003 0301 	and.w	r3, r3, #1
 800090e:	60fb      	str	r3, [r7, #12]
 8000910:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000912:	2320      	movs	r3, #32
 8000914:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000916:	2303      	movs	r3, #3
 8000918:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091a:	2300      	movs	r3, #0
 800091c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800091e:	f107 0314 	add.w	r3, r7, #20
 8000922:	4619      	mov	r1, r3
 8000924:	4805      	ldr	r0, [pc, #20]	; (800093c <HAL_ADC_MspInit+0x84>)
 8000926:	f000 fded 	bl	8001504 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800092a:	bf00      	nop
 800092c:	3728      	adds	r7, #40	; 0x28
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	40012000 	.word	0x40012000
 8000938:	40023800 	.word	0x40023800
 800093c:	40020000 	.word	0x40020000

08000940 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b08a      	sub	sp, #40	; 0x28
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000948:	f107 0314 	add.w	r3, r7, #20
 800094c:	2200      	movs	r2, #0
 800094e:	601a      	str	r2, [r3, #0]
 8000950:	605a      	str	r2, [r3, #4]
 8000952:	609a      	str	r2, [r3, #8]
 8000954:	60da      	str	r2, [r3, #12]
 8000956:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	4a19      	ldr	r2, [pc, #100]	; (80009c4 <HAL_UART_MspInit+0x84>)
 800095e:	4293      	cmp	r3, r2
 8000960:	d12b      	bne.n	80009ba <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000962:	2300      	movs	r3, #0
 8000964:	613b      	str	r3, [r7, #16]
 8000966:	4b18      	ldr	r3, [pc, #96]	; (80009c8 <HAL_UART_MspInit+0x88>)
 8000968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800096a:	4a17      	ldr	r2, [pc, #92]	; (80009c8 <HAL_UART_MspInit+0x88>)
 800096c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000970:	6413      	str	r3, [r2, #64]	; 0x40
 8000972:	4b15      	ldr	r3, [pc, #84]	; (80009c8 <HAL_UART_MspInit+0x88>)
 8000974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000976:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800097a:	613b      	str	r3, [r7, #16]
 800097c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800097e:	2300      	movs	r3, #0
 8000980:	60fb      	str	r3, [r7, #12]
 8000982:	4b11      	ldr	r3, [pc, #68]	; (80009c8 <HAL_UART_MspInit+0x88>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000986:	4a10      	ldr	r2, [pc, #64]	; (80009c8 <HAL_UART_MspInit+0x88>)
 8000988:	f043 0301 	orr.w	r3, r3, #1
 800098c:	6313      	str	r3, [r2, #48]	; 0x30
 800098e:	4b0e      	ldr	r3, [pc, #56]	; (80009c8 <HAL_UART_MspInit+0x88>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000992:	f003 0301 	and.w	r3, r3, #1
 8000996:	60fb      	str	r3, [r7, #12]
 8000998:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800099a:	230c      	movs	r3, #12
 800099c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800099e:	2302      	movs	r3, #2
 80009a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a2:	2300      	movs	r3, #0
 80009a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009a6:	2303      	movs	r3, #3
 80009a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009aa:	2307      	movs	r3, #7
 80009ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ae:	f107 0314 	add.w	r3, r7, #20
 80009b2:	4619      	mov	r1, r3
 80009b4:	4805      	ldr	r0, [pc, #20]	; (80009cc <HAL_UART_MspInit+0x8c>)
 80009b6:	f000 fda5 	bl	8001504 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80009ba:	bf00      	nop
 80009bc:	3728      	adds	r7, #40	; 0x28
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	40004400 	.word	0x40004400
 80009c8:	40023800 	.word	0x40023800
 80009cc:	40020000 	.word	0x40020000

080009d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009d4:	e7fe      	b.n	80009d4 <NMI_Handler+0x4>

080009d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009d6:	b480      	push	{r7}
 80009d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009da:	e7fe      	b.n	80009da <HardFault_Handler+0x4>

080009dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009e0:	e7fe      	b.n	80009e0 <MemManage_Handler+0x4>

080009e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009e2:	b480      	push	{r7}
 80009e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009e6:	e7fe      	b.n	80009e6 <BusFault_Handler+0x4>

080009e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009ec:	e7fe      	b.n	80009ec <UsageFault_Handler+0x4>

080009ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009ee:	b480      	push	{r7}
 80009f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009f2:	bf00      	nop
 80009f4:	46bd      	mov	sp, r7
 80009f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fa:	4770      	bx	lr

080009fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a00:	f000 f898 	bl	8000b34 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000a04:	f003 fc3a 	bl	800427c <xTaskGetSchedulerState>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b01      	cmp	r3, #1
 8000a0c:	d001      	beq.n	8000a12 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000a0e:	f004 fa23 	bl	8004e58 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a12:	bf00      	nop
 8000a14:	bd80      	pop	{r7, pc}
	...

08000a18 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a1c:	4b06      	ldr	r3, [pc, #24]	; (8000a38 <SystemInit+0x20>)
 8000a1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a22:	4a05      	ldr	r2, [pc, #20]	; (8000a38 <SystemInit+0x20>)
 8000a24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a2c:	bf00      	nop
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop
 8000a38:	e000ed00 	.word	0xe000ed00

08000a3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000a3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a74 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a40:	480d      	ldr	r0, [pc, #52]	; (8000a78 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a42:	490e      	ldr	r1, [pc, #56]	; (8000a7c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a44:	4a0e      	ldr	r2, [pc, #56]	; (8000a80 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a48:	e002      	b.n	8000a50 <LoopCopyDataInit>

08000a4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a4e:	3304      	adds	r3, #4

08000a50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a54:	d3f9      	bcc.n	8000a4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a56:	4a0b      	ldr	r2, [pc, #44]	; (8000a84 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000a58:	4c0b      	ldr	r4, [pc, #44]	; (8000a88 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000a5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a5c:	e001      	b.n	8000a62 <LoopFillZerobss>

08000a5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a60:	3204      	adds	r2, #4

08000a62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a64:	d3fb      	bcc.n	8000a5e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a66:	f7ff ffd7 	bl	8000a18 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a6a:	f004 fc77 	bl	800535c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a6e:	f7ff fd35 	bl	80004dc <main>
  bx  lr    
 8000a72:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000a74:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000a78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a7c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000a80:	08005448 	.word	0x08005448
  ldr r2, =_sbss
 8000a84:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000a88:	20004a18 	.word	0x20004a18

08000a8c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a8c:	e7fe      	b.n	8000a8c <ADC_IRQHandler>
	...

08000a90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a94:	4b0e      	ldr	r3, [pc, #56]	; (8000ad0 <HAL_Init+0x40>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4a0d      	ldr	r2, [pc, #52]	; (8000ad0 <HAL_Init+0x40>)
 8000a9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a9e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000aa0:	4b0b      	ldr	r3, [pc, #44]	; (8000ad0 <HAL_Init+0x40>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	4a0a      	ldr	r2, [pc, #40]	; (8000ad0 <HAL_Init+0x40>)
 8000aa6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000aaa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000aac:	4b08      	ldr	r3, [pc, #32]	; (8000ad0 <HAL_Init+0x40>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	4a07      	ldr	r2, [pc, #28]	; (8000ad0 <HAL_Init+0x40>)
 8000ab2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ab6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ab8:	2003      	movs	r0, #3
 8000aba:	f000 fcef 	bl	800149c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000abe:	200f      	movs	r0, #15
 8000ac0:	f000 f808 	bl	8000ad4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ac4:	f7ff fecc 	bl	8000860 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ac8:	2300      	movs	r3, #0
}
 8000aca:	4618      	mov	r0, r3
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	40023c00 	.word	0x40023c00

08000ad4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b082      	sub	sp, #8
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000adc:	4b12      	ldr	r3, [pc, #72]	; (8000b28 <HAL_InitTick+0x54>)
 8000ade:	681a      	ldr	r2, [r3, #0]
 8000ae0:	4b12      	ldr	r3, [pc, #72]	; (8000b2c <HAL_InitTick+0x58>)
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000aea:	fbb3 f3f1 	udiv	r3, r3, r1
 8000aee:	fbb2 f3f3 	udiv	r3, r2, r3
 8000af2:	4618      	mov	r0, r3
 8000af4:	f000 fcf9 	bl	80014ea <HAL_SYSTICK_Config>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000afe:	2301      	movs	r3, #1
 8000b00:	e00e      	b.n	8000b20 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	2b0f      	cmp	r3, #15
 8000b06:	d80a      	bhi.n	8000b1e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b08:	2200      	movs	r2, #0
 8000b0a:	6879      	ldr	r1, [r7, #4]
 8000b0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b10:	f000 fccf 	bl	80014b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b14:	4a06      	ldr	r2, [pc, #24]	; (8000b30 <HAL_InitTick+0x5c>)
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	e000      	b.n	8000b20 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b1e:	2301      	movs	r3, #1
}
 8000b20:	4618      	mov	r0, r3
 8000b22:	3708      	adds	r7, #8
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	20000000 	.word	0x20000000
 8000b2c:	20000008 	.word	0x20000008
 8000b30:	20000004 	.word	0x20000004

08000b34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b38:	4b06      	ldr	r3, [pc, #24]	; (8000b54 <HAL_IncTick+0x20>)
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	461a      	mov	r2, r3
 8000b3e:	4b06      	ldr	r3, [pc, #24]	; (8000b58 <HAL_IncTick+0x24>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	4413      	add	r3, r2
 8000b44:	4a04      	ldr	r2, [pc, #16]	; (8000b58 <HAL_IncTick+0x24>)
 8000b46:	6013      	str	r3, [r2, #0]
}
 8000b48:	bf00      	nop
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr
 8000b52:	bf00      	nop
 8000b54:	20000008 	.word	0x20000008
 8000b58:	200000c4 	.word	0x200000c4

08000b5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b60:	4b03      	ldr	r3, [pc, #12]	; (8000b70 <HAL_GetTick+0x14>)
 8000b62:	681b      	ldr	r3, [r3, #0]
}
 8000b64:	4618      	mov	r0, r3
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop
 8000b70:	200000c4 	.word	0x200000c4

08000b74 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b084      	sub	sp, #16
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d101      	bne.n	8000b8a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000b86:	2301      	movs	r3, #1
 8000b88:	e033      	b.n	8000bf2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d109      	bne.n	8000ba6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000b92:	6878      	ldr	r0, [r7, #4]
 8000b94:	f7ff fe90 	bl	80008b8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000baa:	f003 0310 	and.w	r3, r3, #16
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d118      	bne.n	8000be4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000bba:	f023 0302 	bic.w	r3, r3, #2
 8000bbe:	f043 0202 	orr.w	r2, r3, #2
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000bc6:	6878      	ldr	r0, [r7, #4]
 8000bc8:	f000 faba 	bl	8001140 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	2200      	movs	r2, #0
 8000bd0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd6:	f023 0303 	bic.w	r3, r3, #3
 8000bda:	f043 0201 	orr.w	r2, r3, #1
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	641a      	str	r2, [r3, #64]	; 0x40
 8000be2:	e001      	b.n	8000be8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000be4:	2301      	movs	r3, #1
 8000be6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	2200      	movs	r2, #0
 8000bec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000bf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	3710      	adds	r7, #16
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
	...

08000bfc <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b085      	sub	sp, #20
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8000c04:	2300      	movs	r3, #0
 8000c06:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000c0e:	2b01      	cmp	r3, #1
 8000c10:	d101      	bne.n	8000c16 <HAL_ADC_Start+0x1a>
 8000c12:	2302      	movs	r3, #2
 8000c14:	e097      	b.n	8000d46 <HAL_ADC_Start+0x14a>
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	2201      	movs	r2, #1
 8000c1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	689b      	ldr	r3, [r3, #8]
 8000c24:	f003 0301 	and.w	r3, r3, #1
 8000c28:	2b01      	cmp	r3, #1
 8000c2a:	d018      	beq.n	8000c5e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	689a      	ldr	r2, [r3, #8]
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	f042 0201 	orr.w	r2, r2, #1
 8000c3a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000c3c:	4b45      	ldr	r3, [pc, #276]	; (8000d54 <HAL_ADC_Start+0x158>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4a45      	ldr	r2, [pc, #276]	; (8000d58 <HAL_ADC_Start+0x15c>)
 8000c42:	fba2 2303 	umull	r2, r3, r2, r3
 8000c46:	0c9a      	lsrs	r2, r3, #18
 8000c48:	4613      	mov	r3, r2
 8000c4a:	005b      	lsls	r3, r3, #1
 8000c4c:	4413      	add	r3, r2
 8000c4e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8000c50:	e002      	b.n	8000c58 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8000c52:	68bb      	ldr	r3, [r7, #8]
 8000c54:	3b01      	subs	r3, #1
 8000c56:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8000c58:	68bb      	ldr	r3, [r7, #8]
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d1f9      	bne.n	8000c52 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	689b      	ldr	r3, [r3, #8]
 8000c64:	f003 0301 	and.w	r3, r3, #1
 8000c68:	2b01      	cmp	r3, #1
 8000c6a:	d15f      	bne.n	8000d2c <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c70:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000c74:	f023 0301 	bic.w	r3, r3, #1
 8000c78:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	685b      	ldr	r3, [r3, #4]
 8000c86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d007      	beq.n	8000c9e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c92:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000c96:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ca6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000caa:	d106      	bne.n	8000cba <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cb0:	f023 0206 	bic.w	r2, r3, #6
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	645a      	str	r2, [r3, #68]	; 0x44
 8000cb8:	e002      	b.n	8000cc0 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000cc8:	4b24      	ldr	r3, [pc, #144]	; (8000d5c <HAL_ADC_Start+0x160>)
 8000cca:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000cd4:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	685b      	ldr	r3, [r3, #4]
 8000cda:	f003 031f 	and.w	r3, r3, #31
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d10f      	bne.n	8000d02 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	689b      	ldr	r3, [r3, #8]
 8000ce8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d129      	bne.n	8000d44 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	689a      	ldr	r2, [r3, #8]
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000cfe:	609a      	str	r2, [r3, #8]
 8000d00:	e020      	b.n	8000d44 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	4a16      	ldr	r2, [pc, #88]	; (8000d60 <HAL_ADC_Start+0x164>)
 8000d08:	4293      	cmp	r3, r2
 8000d0a:	d11b      	bne.n	8000d44 <HAL_ADC_Start+0x148>
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	689b      	ldr	r3, [r3, #8]
 8000d12:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d114      	bne.n	8000d44 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	689a      	ldr	r2, [r3, #8]
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000d28:	609a      	str	r2, [r3, #8]
 8000d2a:	e00b      	b.n	8000d44 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d30:	f043 0210 	orr.w	r2, r3, #16
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d3c:	f043 0201 	orr.w	r2, r3, #1
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8000d44:	2300      	movs	r3, #0
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	3714      	adds	r7, #20
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop
 8000d54:	20000000 	.word	0x20000000
 8000d58:	431bde83 	.word	0x431bde83
 8000d5c:	40012300 	.word	0x40012300
 8000d60:	40012000 	.word	0x40012000

08000d64 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b083      	sub	sp, #12
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000d72:	2b01      	cmp	r3, #1
 8000d74:	d101      	bne.n	8000d7a <HAL_ADC_Stop+0x16>
 8000d76:	2302      	movs	r3, #2
 8000d78:	e021      	b.n	8000dbe <HAL_ADC_Stop+0x5a>
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	2201      	movs	r2, #1
 8000d7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	689a      	ldr	r2, [r3, #8]
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	f022 0201 	bic.w	r2, r2, #1
 8000d90:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	689b      	ldr	r3, [r3, #8]
 8000d98:	f003 0301 	and.w	r3, r3, #1
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d109      	bne.n	8000db4 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000da8:	f023 0301 	bic.w	r3, r3, #1
 8000dac:	f043 0201 	orr.w	r2, r3, #1
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	2200      	movs	r2, #0
 8000db8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8000dbc:	2300      	movs	r3, #0
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	370c      	adds	r7, #12
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr

08000dca <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000dca:	b580      	push	{r7, lr}
 8000dcc:	b084      	sub	sp, #16
 8000dce:	af00      	add	r7, sp, #0
 8000dd0:	6078      	str	r0, [r7, #4]
 8000dd2:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	689b      	ldr	r3, [r3, #8]
 8000dde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000de2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000de6:	d113      	bne.n	8000e10 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	689b      	ldr	r3, [r3, #8]
 8000dee:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8000df2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000df6:	d10b      	bne.n	8000e10 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dfc:	f043 0220 	orr.w	r2, r3, #32
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	2200      	movs	r2, #0
 8000e08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8000e0c:	2301      	movs	r3, #1
 8000e0e:	e063      	b.n	8000ed8 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8000e10:	f7ff fea4 	bl	8000b5c <HAL_GetTick>
 8000e14:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8000e16:	e021      	b.n	8000e5c <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e1e:	d01d      	beq.n	8000e5c <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d007      	beq.n	8000e36 <HAL_ADC_PollForConversion+0x6c>
 8000e26:	f7ff fe99 	bl	8000b5c <HAL_GetTick>
 8000e2a:	4602      	mov	r2, r0
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	1ad3      	subs	r3, r2, r3
 8000e30:	683a      	ldr	r2, [r7, #0]
 8000e32:	429a      	cmp	r2, r3
 8000e34:	d212      	bcs.n	8000e5c <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	f003 0302 	and.w	r3, r3, #2
 8000e40:	2b02      	cmp	r3, #2
 8000e42:	d00b      	beq.n	8000e5c <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e48:	f043 0204 	orr.w	r2, r3, #4
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	2200      	movs	r2, #0
 8000e54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8000e58:	2303      	movs	r3, #3
 8000e5a:	e03d      	b.n	8000ed8 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	f003 0302 	and.w	r3, r3, #2
 8000e66:	2b02      	cmp	r3, #2
 8000e68:	d1d6      	bne.n	8000e18 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	f06f 0212 	mvn.w	r2, #18
 8000e72:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e78:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	689b      	ldr	r3, [r3, #8]
 8000e86:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d123      	bne.n	8000ed6 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d11f      	bne.n	8000ed6 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e9c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d006      	beq.n	8000eb2 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	689b      	ldr	r3, [r3, #8]
 8000eaa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d111      	bne.n	8000ed6 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d105      	bne.n	8000ed6 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ece:	f043 0201 	orr.w	r2, r3, #1
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8000ed6:	2300      	movs	r3, #0
}
 8000ed8:	4618      	mov	r0, r3
 8000eda:	3710      	adds	r7, #16
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}

08000ee0 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8000ee0:	b480      	push	{r7}
 8000ee2:	b083      	sub	sp, #12
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	370c      	adds	r7, #12
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr
	...

08000efc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b085      	sub	sp, #20
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
 8000f04:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8000f06:	2300      	movs	r3, #0
 8000f08:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000f10:	2b01      	cmp	r3, #1
 8000f12:	d101      	bne.n	8000f18 <HAL_ADC_ConfigChannel+0x1c>
 8000f14:	2302      	movs	r3, #2
 8000f16:	e105      	b.n	8001124 <HAL_ADC_ConfigChannel+0x228>
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	2b09      	cmp	r3, #9
 8000f26:	d925      	bls.n	8000f74 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	68d9      	ldr	r1, [r3, #12]
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	b29b      	uxth	r3, r3
 8000f34:	461a      	mov	r2, r3
 8000f36:	4613      	mov	r3, r2
 8000f38:	005b      	lsls	r3, r3, #1
 8000f3a:	4413      	add	r3, r2
 8000f3c:	3b1e      	subs	r3, #30
 8000f3e:	2207      	movs	r2, #7
 8000f40:	fa02 f303 	lsl.w	r3, r2, r3
 8000f44:	43da      	mvns	r2, r3
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	400a      	ands	r2, r1
 8000f4c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	68d9      	ldr	r1, [r3, #12]
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	689a      	ldr	r2, [r3, #8]
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	b29b      	uxth	r3, r3
 8000f5e:	4618      	mov	r0, r3
 8000f60:	4603      	mov	r3, r0
 8000f62:	005b      	lsls	r3, r3, #1
 8000f64:	4403      	add	r3, r0
 8000f66:	3b1e      	subs	r3, #30
 8000f68:	409a      	lsls	r2, r3
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	430a      	orrs	r2, r1
 8000f70:	60da      	str	r2, [r3, #12]
 8000f72:	e022      	b.n	8000fba <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	6919      	ldr	r1, [r3, #16]
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	b29b      	uxth	r3, r3
 8000f80:	461a      	mov	r2, r3
 8000f82:	4613      	mov	r3, r2
 8000f84:	005b      	lsls	r3, r3, #1
 8000f86:	4413      	add	r3, r2
 8000f88:	2207      	movs	r2, #7
 8000f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8e:	43da      	mvns	r2, r3
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	400a      	ands	r2, r1
 8000f96:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	6919      	ldr	r1, [r3, #16]
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	689a      	ldr	r2, [r3, #8]
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	b29b      	uxth	r3, r3
 8000fa8:	4618      	mov	r0, r3
 8000faa:	4603      	mov	r3, r0
 8000fac:	005b      	lsls	r3, r3, #1
 8000fae:	4403      	add	r3, r0
 8000fb0:	409a      	lsls	r2, r3
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	430a      	orrs	r2, r1
 8000fb8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	2b06      	cmp	r3, #6
 8000fc0:	d824      	bhi.n	800100c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	685a      	ldr	r2, [r3, #4]
 8000fcc:	4613      	mov	r3, r2
 8000fce:	009b      	lsls	r3, r3, #2
 8000fd0:	4413      	add	r3, r2
 8000fd2:	3b05      	subs	r3, #5
 8000fd4:	221f      	movs	r2, #31
 8000fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fda:	43da      	mvns	r2, r3
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	400a      	ands	r2, r1
 8000fe2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	b29b      	uxth	r3, r3
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	685a      	ldr	r2, [r3, #4]
 8000ff6:	4613      	mov	r3, r2
 8000ff8:	009b      	lsls	r3, r3, #2
 8000ffa:	4413      	add	r3, r2
 8000ffc:	3b05      	subs	r3, #5
 8000ffe:	fa00 f203 	lsl.w	r2, r0, r3
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	430a      	orrs	r2, r1
 8001008:	635a      	str	r2, [r3, #52]	; 0x34
 800100a:	e04c      	b.n	80010a6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	2b0c      	cmp	r3, #12
 8001012:	d824      	bhi.n	800105e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	685a      	ldr	r2, [r3, #4]
 800101e:	4613      	mov	r3, r2
 8001020:	009b      	lsls	r3, r3, #2
 8001022:	4413      	add	r3, r2
 8001024:	3b23      	subs	r3, #35	; 0x23
 8001026:	221f      	movs	r2, #31
 8001028:	fa02 f303 	lsl.w	r3, r2, r3
 800102c:	43da      	mvns	r2, r3
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	400a      	ands	r2, r1
 8001034:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	b29b      	uxth	r3, r3
 8001042:	4618      	mov	r0, r3
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	685a      	ldr	r2, [r3, #4]
 8001048:	4613      	mov	r3, r2
 800104a:	009b      	lsls	r3, r3, #2
 800104c:	4413      	add	r3, r2
 800104e:	3b23      	subs	r3, #35	; 0x23
 8001050:	fa00 f203 	lsl.w	r2, r0, r3
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	430a      	orrs	r2, r1
 800105a:	631a      	str	r2, [r3, #48]	; 0x30
 800105c:	e023      	b.n	80010a6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	685a      	ldr	r2, [r3, #4]
 8001068:	4613      	mov	r3, r2
 800106a:	009b      	lsls	r3, r3, #2
 800106c:	4413      	add	r3, r2
 800106e:	3b41      	subs	r3, #65	; 0x41
 8001070:	221f      	movs	r2, #31
 8001072:	fa02 f303 	lsl.w	r3, r2, r3
 8001076:	43da      	mvns	r2, r3
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	400a      	ands	r2, r1
 800107e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	b29b      	uxth	r3, r3
 800108c:	4618      	mov	r0, r3
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	685a      	ldr	r2, [r3, #4]
 8001092:	4613      	mov	r3, r2
 8001094:	009b      	lsls	r3, r3, #2
 8001096:	4413      	add	r3, r2
 8001098:	3b41      	subs	r3, #65	; 0x41
 800109a:	fa00 f203 	lsl.w	r2, r0, r3
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	430a      	orrs	r2, r1
 80010a4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80010a6:	4b22      	ldr	r3, [pc, #136]	; (8001130 <HAL_ADC_ConfigChannel+0x234>)
 80010a8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	4a21      	ldr	r2, [pc, #132]	; (8001134 <HAL_ADC_ConfigChannel+0x238>)
 80010b0:	4293      	cmp	r3, r2
 80010b2:	d109      	bne.n	80010c8 <HAL_ADC_ConfigChannel+0x1cc>
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	2b12      	cmp	r3, #18
 80010ba:	d105      	bne.n	80010c8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a19      	ldr	r2, [pc, #100]	; (8001134 <HAL_ADC_ConfigChannel+0x238>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d123      	bne.n	800111a <HAL_ADC_ConfigChannel+0x21e>
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	2b10      	cmp	r3, #16
 80010d8:	d003      	beq.n	80010e2 <HAL_ADC_ConfigChannel+0x1e6>
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	2b11      	cmp	r3, #17
 80010e0:	d11b      	bne.n	800111a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	2b10      	cmp	r3, #16
 80010f4:	d111      	bne.n	800111a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80010f6:	4b10      	ldr	r3, [pc, #64]	; (8001138 <HAL_ADC_ConfigChannel+0x23c>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	4a10      	ldr	r2, [pc, #64]	; (800113c <HAL_ADC_ConfigChannel+0x240>)
 80010fc:	fba2 2303 	umull	r2, r3, r2, r3
 8001100:	0c9a      	lsrs	r2, r3, #18
 8001102:	4613      	mov	r3, r2
 8001104:	009b      	lsls	r3, r3, #2
 8001106:	4413      	add	r3, r2
 8001108:	005b      	lsls	r3, r3, #1
 800110a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800110c:	e002      	b.n	8001114 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800110e:	68bb      	ldr	r3, [r7, #8]
 8001110:	3b01      	subs	r3, #1
 8001112:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001114:	68bb      	ldr	r3, [r7, #8]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d1f9      	bne.n	800110e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	2200      	movs	r2, #0
 800111e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001122:	2300      	movs	r3, #0
}
 8001124:	4618      	mov	r0, r3
 8001126:	3714      	adds	r7, #20
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr
 8001130:	40012300 	.word	0x40012300
 8001134:	40012000 	.word	0x40012000
 8001138:	20000000 	.word	0x20000000
 800113c:	431bde83 	.word	0x431bde83

08001140 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001140:	b480      	push	{r7}
 8001142:	b085      	sub	sp, #20
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001148:	4b79      	ldr	r3, [pc, #484]	; (8001330 <ADC_Init+0x1f0>)
 800114a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	685a      	ldr	r2, [r3, #4]
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	431a      	orrs	r2, r3
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	685a      	ldr	r2, [r3, #4]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001174:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	6859      	ldr	r1, [r3, #4]
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	691b      	ldr	r3, [r3, #16]
 8001180:	021a      	lsls	r2, r3, #8
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	430a      	orrs	r2, r1
 8001188:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	685a      	ldr	r2, [r3, #4]
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001198:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	6859      	ldr	r1, [r3, #4]
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	689a      	ldr	r2, [r3, #8]
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	430a      	orrs	r2, r1
 80011aa:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	689a      	ldr	r2, [r3, #8]
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80011ba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	6899      	ldr	r1, [r3, #8]
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	68da      	ldr	r2, [r3, #12]
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	430a      	orrs	r2, r1
 80011cc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011d2:	4a58      	ldr	r2, [pc, #352]	; (8001334 <ADC_Init+0x1f4>)
 80011d4:	4293      	cmp	r3, r2
 80011d6:	d022      	beq.n	800121e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	689a      	ldr	r2, [r3, #8]
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80011e6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	6899      	ldr	r1, [r3, #8]
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	430a      	orrs	r2, r1
 80011f8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	689a      	ldr	r2, [r3, #8]
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001208:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	6899      	ldr	r1, [r3, #8]
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	430a      	orrs	r2, r1
 800121a:	609a      	str	r2, [r3, #8]
 800121c:	e00f      	b.n	800123e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	689a      	ldr	r2, [r3, #8]
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800122c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	689a      	ldr	r2, [r3, #8]
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800123c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	689a      	ldr	r2, [r3, #8]
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f022 0202 	bic.w	r2, r2, #2
 800124c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	6899      	ldr	r1, [r3, #8]
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	7e1b      	ldrb	r3, [r3, #24]
 8001258:	005a      	lsls	r2, r3, #1
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	430a      	orrs	r2, r1
 8001260:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d01b      	beq.n	80012a4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	685a      	ldr	r2, [r3, #4]
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800127a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	685a      	ldr	r2, [r3, #4]
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800128a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	6859      	ldr	r1, [r3, #4]
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001296:	3b01      	subs	r3, #1
 8001298:	035a      	lsls	r2, r3, #13
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	430a      	orrs	r2, r1
 80012a0:	605a      	str	r2, [r3, #4]
 80012a2:	e007      	b.n	80012b4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	685a      	ldr	r2, [r3, #4]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80012b2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80012c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	69db      	ldr	r3, [r3, #28]
 80012ce:	3b01      	subs	r3, #1
 80012d0:	051a      	lsls	r2, r3, #20
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	430a      	orrs	r2, r1
 80012d8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	689a      	ldr	r2, [r3, #8]
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80012e8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	6899      	ldr	r1, [r3, #8]
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80012f6:	025a      	lsls	r2, r3, #9
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	430a      	orrs	r2, r1
 80012fe:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	689a      	ldr	r2, [r3, #8]
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800130e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	6899      	ldr	r1, [r3, #8]
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	695b      	ldr	r3, [r3, #20]
 800131a:	029a      	lsls	r2, r3, #10
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	430a      	orrs	r2, r1
 8001322:	609a      	str	r2, [r3, #8]
}
 8001324:	bf00      	nop
 8001326:	3714      	adds	r7, #20
 8001328:	46bd      	mov	sp, r7
 800132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132e:	4770      	bx	lr
 8001330:	40012300 	.word	0x40012300
 8001334:	0f000001 	.word	0x0f000001

08001338 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001338:	b480      	push	{r7}
 800133a:	b085      	sub	sp, #20
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	f003 0307 	and.w	r3, r3, #7
 8001346:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001348:	4b0c      	ldr	r3, [pc, #48]	; (800137c <__NVIC_SetPriorityGrouping+0x44>)
 800134a:	68db      	ldr	r3, [r3, #12]
 800134c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800134e:	68ba      	ldr	r2, [r7, #8]
 8001350:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001354:	4013      	ands	r3, r2
 8001356:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800135c:	68bb      	ldr	r3, [r7, #8]
 800135e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001360:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001364:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001368:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800136a:	4a04      	ldr	r2, [pc, #16]	; (800137c <__NVIC_SetPriorityGrouping+0x44>)
 800136c:	68bb      	ldr	r3, [r7, #8]
 800136e:	60d3      	str	r3, [r2, #12]
}
 8001370:	bf00      	nop
 8001372:	3714      	adds	r7, #20
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr
 800137c:	e000ed00 	.word	0xe000ed00

08001380 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001384:	4b04      	ldr	r3, [pc, #16]	; (8001398 <__NVIC_GetPriorityGrouping+0x18>)
 8001386:	68db      	ldr	r3, [r3, #12]
 8001388:	0a1b      	lsrs	r3, r3, #8
 800138a:	f003 0307 	and.w	r3, r3, #7
}
 800138e:	4618      	mov	r0, r3
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr
 8001398:	e000ed00 	.word	0xe000ed00

0800139c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	4603      	mov	r3, r0
 80013a4:	6039      	str	r1, [r7, #0]
 80013a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	db0a      	blt.n	80013c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	b2da      	uxtb	r2, r3
 80013b4:	490c      	ldr	r1, [pc, #48]	; (80013e8 <__NVIC_SetPriority+0x4c>)
 80013b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ba:	0112      	lsls	r2, r2, #4
 80013bc:	b2d2      	uxtb	r2, r2
 80013be:	440b      	add	r3, r1
 80013c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013c4:	e00a      	b.n	80013dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	b2da      	uxtb	r2, r3
 80013ca:	4908      	ldr	r1, [pc, #32]	; (80013ec <__NVIC_SetPriority+0x50>)
 80013cc:	79fb      	ldrb	r3, [r7, #7]
 80013ce:	f003 030f 	and.w	r3, r3, #15
 80013d2:	3b04      	subs	r3, #4
 80013d4:	0112      	lsls	r2, r2, #4
 80013d6:	b2d2      	uxtb	r2, r2
 80013d8:	440b      	add	r3, r1
 80013da:	761a      	strb	r2, [r3, #24]
}
 80013dc:	bf00      	nop
 80013de:	370c      	adds	r7, #12
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr
 80013e8:	e000e100 	.word	0xe000e100
 80013ec:	e000ed00 	.word	0xe000ed00

080013f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b089      	sub	sp, #36	; 0x24
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	60f8      	str	r0, [r7, #12]
 80013f8:	60b9      	str	r1, [r7, #8]
 80013fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	f003 0307 	and.w	r3, r3, #7
 8001402:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001404:	69fb      	ldr	r3, [r7, #28]
 8001406:	f1c3 0307 	rsb	r3, r3, #7
 800140a:	2b04      	cmp	r3, #4
 800140c:	bf28      	it	cs
 800140e:	2304      	movcs	r3, #4
 8001410:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001412:	69fb      	ldr	r3, [r7, #28]
 8001414:	3304      	adds	r3, #4
 8001416:	2b06      	cmp	r3, #6
 8001418:	d902      	bls.n	8001420 <NVIC_EncodePriority+0x30>
 800141a:	69fb      	ldr	r3, [r7, #28]
 800141c:	3b03      	subs	r3, #3
 800141e:	e000      	b.n	8001422 <NVIC_EncodePriority+0x32>
 8001420:	2300      	movs	r3, #0
 8001422:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001424:	f04f 32ff 	mov.w	r2, #4294967295
 8001428:	69bb      	ldr	r3, [r7, #24]
 800142a:	fa02 f303 	lsl.w	r3, r2, r3
 800142e:	43da      	mvns	r2, r3
 8001430:	68bb      	ldr	r3, [r7, #8]
 8001432:	401a      	ands	r2, r3
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001438:	f04f 31ff 	mov.w	r1, #4294967295
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	fa01 f303 	lsl.w	r3, r1, r3
 8001442:	43d9      	mvns	r1, r3
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001448:	4313      	orrs	r3, r2
         );
}
 800144a:	4618      	mov	r0, r3
 800144c:	3724      	adds	r7, #36	; 0x24
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr
	...

08001458 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	3b01      	subs	r3, #1
 8001464:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001468:	d301      	bcc.n	800146e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800146a:	2301      	movs	r3, #1
 800146c:	e00f      	b.n	800148e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800146e:	4a0a      	ldr	r2, [pc, #40]	; (8001498 <SysTick_Config+0x40>)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	3b01      	subs	r3, #1
 8001474:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001476:	210f      	movs	r1, #15
 8001478:	f04f 30ff 	mov.w	r0, #4294967295
 800147c:	f7ff ff8e 	bl	800139c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001480:	4b05      	ldr	r3, [pc, #20]	; (8001498 <SysTick_Config+0x40>)
 8001482:	2200      	movs	r2, #0
 8001484:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001486:	4b04      	ldr	r3, [pc, #16]	; (8001498 <SysTick_Config+0x40>)
 8001488:	2207      	movs	r2, #7
 800148a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800148c:	2300      	movs	r3, #0
}
 800148e:	4618      	mov	r0, r3
 8001490:	3708      	adds	r7, #8
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	e000e010 	.word	0xe000e010

0800149c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b082      	sub	sp, #8
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014a4:	6878      	ldr	r0, [r7, #4]
 80014a6:	f7ff ff47 	bl	8001338 <__NVIC_SetPriorityGrouping>
}
 80014aa:	bf00      	nop
 80014ac:	3708      	adds	r7, #8
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}

080014b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014b2:	b580      	push	{r7, lr}
 80014b4:	b086      	sub	sp, #24
 80014b6:	af00      	add	r7, sp, #0
 80014b8:	4603      	mov	r3, r0
 80014ba:	60b9      	str	r1, [r7, #8]
 80014bc:	607a      	str	r2, [r7, #4]
 80014be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014c0:	2300      	movs	r3, #0
 80014c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014c4:	f7ff ff5c 	bl	8001380 <__NVIC_GetPriorityGrouping>
 80014c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014ca:	687a      	ldr	r2, [r7, #4]
 80014cc:	68b9      	ldr	r1, [r7, #8]
 80014ce:	6978      	ldr	r0, [r7, #20]
 80014d0:	f7ff ff8e 	bl	80013f0 <NVIC_EncodePriority>
 80014d4:	4602      	mov	r2, r0
 80014d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014da:	4611      	mov	r1, r2
 80014dc:	4618      	mov	r0, r3
 80014de:	f7ff ff5d 	bl	800139c <__NVIC_SetPriority>
}
 80014e2:	bf00      	nop
 80014e4:	3718      	adds	r7, #24
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}

080014ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014ea:	b580      	push	{r7, lr}
 80014ec:	b082      	sub	sp, #8
 80014ee:	af00      	add	r7, sp, #0
 80014f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014f2:	6878      	ldr	r0, [r7, #4]
 80014f4:	f7ff ffb0 	bl	8001458 <SysTick_Config>
 80014f8:	4603      	mov	r3, r0
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	3708      	adds	r7, #8
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
	...

08001504 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001504:	b480      	push	{r7}
 8001506:	b089      	sub	sp, #36	; 0x24
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
 800150c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800150e:	2300      	movs	r3, #0
 8001510:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001512:	2300      	movs	r3, #0
 8001514:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001516:	2300      	movs	r3, #0
 8001518:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800151a:	2300      	movs	r3, #0
 800151c:	61fb      	str	r3, [r7, #28]
 800151e:	e159      	b.n	80017d4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001520:	2201      	movs	r2, #1
 8001522:	69fb      	ldr	r3, [r7, #28]
 8001524:	fa02 f303 	lsl.w	r3, r2, r3
 8001528:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	697a      	ldr	r2, [r7, #20]
 8001530:	4013      	ands	r3, r2
 8001532:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001534:	693a      	ldr	r2, [r7, #16]
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	429a      	cmp	r2, r3
 800153a:	f040 8148 	bne.w	80017ce <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	f003 0303 	and.w	r3, r3, #3
 8001546:	2b01      	cmp	r3, #1
 8001548:	d005      	beq.n	8001556 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001552:	2b02      	cmp	r3, #2
 8001554:	d130      	bne.n	80015b8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	689b      	ldr	r3, [r3, #8]
 800155a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800155c:	69fb      	ldr	r3, [r7, #28]
 800155e:	005b      	lsls	r3, r3, #1
 8001560:	2203      	movs	r2, #3
 8001562:	fa02 f303 	lsl.w	r3, r2, r3
 8001566:	43db      	mvns	r3, r3
 8001568:	69ba      	ldr	r2, [r7, #24]
 800156a:	4013      	ands	r3, r2
 800156c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	68da      	ldr	r2, [r3, #12]
 8001572:	69fb      	ldr	r3, [r7, #28]
 8001574:	005b      	lsls	r3, r3, #1
 8001576:	fa02 f303 	lsl.w	r3, r2, r3
 800157a:	69ba      	ldr	r2, [r7, #24]
 800157c:	4313      	orrs	r3, r2
 800157e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	69ba      	ldr	r2, [r7, #24]
 8001584:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800158c:	2201      	movs	r2, #1
 800158e:	69fb      	ldr	r3, [r7, #28]
 8001590:	fa02 f303 	lsl.w	r3, r2, r3
 8001594:	43db      	mvns	r3, r3
 8001596:	69ba      	ldr	r2, [r7, #24]
 8001598:	4013      	ands	r3, r2
 800159a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	091b      	lsrs	r3, r3, #4
 80015a2:	f003 0201 	and.w	r2, r3, #1
 80015a6:	69fb      	ldr	r3, [r7, #28]
 80015a8:	fa02 f303 	lsl.w	r3, r2, r3
 80015ac:	69ba      	ldr	r2, [r7, #24]
 80015ae:	4313      	orrs	r3, r2
 80015b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	69ba      	ldr	r2, [r7, #24]
 80015b6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	f003 0303 	and.w	r3, r3, #3
 80015c0:	2b03      	cmp	r3, #3
 80015c2:	d017      	beq.n	80015f4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	68db      	ldr	r3, [r3, #12]
 80015c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80015ca:	69fb      	ldr	r3, [r7, #28]
 80015cc:	005b      	lsls	r3, r3, #1
 80015ce:	2203      	movs	r2, #3
 80015d0:	fa02 f303 	lsl.w	r3, r2, r3
 80015d4:	43db      	mvns	r3, r3
 80015d6:	69ba      	ldr	r2, [r7, #24]
 80015d8:	4013      	ands	r3, r2
 80015da:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	689a      	ldr	r2, [r3, #8]
 80015e0:	69fb      	ldr	r3, [r7, #28]
 80015e2:	005b      	lsls	r3, r3, #1
 80015e4:	fa02 f303 	lsl.w	r3, r2, r3
 80015e8:	69ba      	ldr	r2, [r7, #24]
 80015ea:	4313      	orrs	r3, r2
 80015ec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	69ba      	ldr	r2, [r7, #24]
 80015f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	f003 0303 	and.w	r3, r3, #3
 80015fc:	2b02      	cmp	r3, #2
 80015fe:	d123      	bne.n	8001648 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001600:	69fb      	ldr	r3, [r7, #28]
 8001602:	08da      	lsrs	r2, r3, #3
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	3208      	adds	r2, #8
 8001608:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800160c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800160e:	69fb      	ldr	r3, [r7, #28]
 8001610:	f003 0307 	and.w	r3, r3, #7
 8001614:	009b      	lsls	r3, r3, #2
 8001616:	220f      	movs	r2, #15
 8001618:	fa02 f303 	lsl.w	r3, r2, r3
 800161c:	43db      	mvns	r3, r3
 800161e:	69ba      	ldr	r2, [r7, #24]
 8001620:	4013      	ands	r3, r2
 8001622:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	691a      	ldr	r2, [r3, #16]
 8001628:	69fb      	ldr	r3, [r7, #28]
 800162a:	f003 0307 	and.w	r3, r3, #7
 800162e:	009b      	lsls	r3, r3, #2
 8001630:	fa02 f303 	lsl.w	r3, r2, r3
 8001634:	69ba      	ldr	r2, [r7, #24]
 8001636:	4313      	orrs	r3, r2
 8001638:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800163a:	69fb      	ldr	r3, [r7, #28]
 800163c:	08da      	lsrs	r2, r3, #3
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	3208      	adds	r2, #8
 8001642:	69b9      	ldr	r1, [r7, #24]
 8001644:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800164e:	69fb      	ldr	r3, [r7, #28]
 8001650:	005b      	lsls	r3, r3, #1
 8001652:	2203      	movs	r2, #3
 8001654:	fa02 f303 	lsl.w	r3, r2, r3
 8001658:	43db      	mvns	r3, r3
 800165a:	69ba      	ldr	r2, [r7, #24]
 800165c:	4013      	ands	r3, r2
 800165e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	f003 0203 	and.w	r2, r3, #3
 8001668:	69fb      	ldr	r3, [r7, #28]
 800166a:	005b      	lsls	r3, r3, #1
 800166c:	fa02 f303 	lsl.w	r3, r2, r3
 8001670:	69ba      	ldr	r2, [r7, #24]
 8001672:	4313      	orrs	r3, r2
 8001674:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	69ba      	ldr	r2, [r7, #24]
 800167a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001684:	2b00      	cmp	r3, #0
 8001686:	f000 80a2 	beq.w	80017ce <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800168a:	2300      	movs	r3, #0
 800168c:	60fb      	str	r3, [r7, #12]
 800168e:	4b57      	ldr	r3, [pc, #348]	; (80017ec <HAL_GPIO_Init+0x2e8>)
 8001690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001692:	4a56      	ldr	r2, [pc, #344]	; (80017ec <HAL_GPIO_Init+0x2e8>)
 8001694:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001698:	6453      	str	r3, [r2, #68]	; 0x44
 800169a:	4b54      	ldr	r3, [pc, #336]	; (80017ec <HAL_GPIO_Init+0x2e8>)
 800169c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800169e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016a2:	60fb      	str	r3, [r7, #12]
 80016a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80016a6:	4a52      	ldr	r2, [pc, #328]	; (80017f0 <HAL_GPIO_Init+0x2ec>)
 80016a8:	69fb      	ldr	r3, [r7, #28]
 80016aa:	089b      	lsrs	r3, r3, #2
 80016ac:	3302      	adds	r3, #2
 80016ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80016b4:	69fb      	ldr	r3, [r7, #28]
 80016b6:	f003 0303 	and.w	r3, r3, #3
 80016ba:	009b      	lsls	r3, r3, #2
 80016bc:	220f      	movs	r2, #15
 80016be:	fa02 f303 	lsl.w	r3, r2, r3
 80016c2:	43db      	mvns	r3, r3
 80016c4:	69ba      	ldr	r2, [r7, #24]
 80016c6:	4013      	ands	r3, r2
 80016c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	4a49      	ldr	r2, [pc, #292]	; (80017f4 <HAL_GPIO_Init+0x2f0>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d019      	beq.n	8001706 <HAL_GPIO_Init+0x202>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	4a48      	ldr	r2, [pc, #288]	; (80017f8 <HAL_GPIO_Init+0x2f4>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d013      	beq.n	8001702 <HAL_GPIO_Init+0x1fe>
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	4a47      	ldr	r2, [pc, #284]	; (80017fc <HAL_GPIO_Init+0x2f8>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d00d      	beq.n	80016fe <HAL_GPIO_Init+0x1fa>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	4a46      	ldr	r2, [pc, #280]	; (8001800 <HAL_GPIO_Init+0x2fc>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d007      	beq.n	80016fa <HAL_GPIO_Init+0x1f6>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	4a45      	ldr	r2, [pc, #276]	; (8001804 <HAL_GPIO_Init+0x300>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d101      	bne.n	80016f6 <HAL_GPIO_Init+0x1f2>
 80016f2:	2304      	movs	r3, #4
 80016f4:	e008      	b.n	8001708 <HAL_GPIO_Init+0x204>
 80016f6:	2307      	movs	r3, #7
 80016f8:	e006      	b.n	8001708 <HAL_GPIO_Init+0x204>
 80016fa:	2303      	movs	r3, #3
 80016fc:	e004      	b.n	8001708 <HAL_GPIO_Init+0x204>
 80016fe:	2302      	movs	r3, #2
 8001700:	e002      	b.n	8001708 <HAL_GPIO_Init+0x204>
 8001702:	2301      	movs	r3, #1
 8001704:	e000      	b.n	8001708 <HAL_GPIO_Init+0x204>
 8001706:	2300      	movs	r3, #0
 8001708:	69fa      	ldr	r2, [r7, #28]
 800170a:	f002 0203 	and.w	r2, r2, #3
 800170e:	0092      	lsls	r2, r2, #2
 8001710:	4093      	lsls	r3, r2
 8001712:	69ba      	ldr	r2, [r7, #24]
 8001714:	4313      	orrs	r3, r2
 8001716:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001718:	4935      	ldr	r1, [pc, #212]	; (80017f0 <HAL_GPIO_Init+0x2ec>)
 800171a:	69fb      	ldr	r3, [r7, #28]
 800171c:	089b      	lsrs	r3, r3, #2
 800171e:	3302      	adds	r3, #2
 8001720:	69ba      	ldr	r2, [r7, #24]
 8001722:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001726:	4b38      	ldr	r3, [pc, #224]	; (8001808 <HAL_GPIO_Init+0x304>)
 8001728:	689b      	ldr	r3, [r3, #8]
 800172a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800172c:	693b      	ldr	r3, [r7, #16]
 800172e:	43db      	mvns	r3, r3
 8001730:	69ba      	ldr	r2, [r7, #24]
 8001732:	4013      	ands	r3, r2
 8001734:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800173e:	2b00      	cmp	r3, #0
 8001740:	d003      	beq.n	800174a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001742:	69ba      	ldr	r2, [r7, #24]
 8001744:	693b      	ldr	r3, [r7, #16]
 8001746:	4313      	orrs	r3, r2
 8001748:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800174a:	4a2f      	ldr	r2, [pc, #188]	; (8001808 <HAL_GPIO_Init+0x304>)
 800174c:	69bb      	ldr	r3, [r7, #24]
 800174e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001750:	4b2d      	ldr	r3, [pc, #180]	; (8001808 <HAL_GPIO_Init+0x304>)
 8001752:	68db      	ldr	r3, [r3, #12]
 8001754:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001756:	693b      	ldr	r3, [r7, #16]
 8001758:	43db      	mvns	r3, r3
 800175a:	69ba      	ldr	r2, [r7, #24]
 800175c:	4013      	ands	r3, r2
 800175e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001768:	2b00      	cmp	r3, #0
 800176a:	d003      	beq.n	8001774 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800176c:	69ba      	ldr	r2, [r7, #24]
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	4313      	orrs	r3, r2
 8001772:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001774:	4a24      	ldr	r2, [pc, #144]	; (8001808 <HAL_GPIO_Init+0x304>)
 8001776:	69bb      	ldr	r3, [r7, #24]
 8001778:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800177a:	4b23      	ldr	r3, [pc, #140]	; (8001808 <HAL_GPIO_Init+0x304>)
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001780:	693b      	ldr	r3, [r7, #16]
 8001782:	43db      	mvns	r3, r3
 8001784:	69ba      	ldr	r2, [r7, #24]
 8001786:	4013      	ands	r3, r2
 8001788:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001792:	2b00      	cmp	r3, #0
 8001794:	d003      	beq.n	800179e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001796:	69ba      	ldr	r2, [r7, #24]
 8001798:	693b      	ldr	r3, [r7, #16]
 800179a:	4313      	orrs	r3, r2
 800179c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800179e:	4a1a      	ldr	r2, [pc, #104]	; (8001808 <HAL_GPIO_Init+0x304>)
 80017a0:	69bb      	ldr	r3, [r7, #24]
 80017a2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017a4:	4b18      	ldr	r3, [pc, #96]	; (8001808 <HAL_GPIO_Init+0x304>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017aa:	693b      	ldr	r3, [r7, #16]
 80017ac:	43db      	mvns	r3, r3
 80017ae:	69ba      	ldr	r2, [r7, #24]
 80017b0:	4013      	ands	r3, r2
 80017b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d003      	beq.n	80017c8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80017c0:	69ba      	ldr	r2, [r7, #24]
 80017c2:	693b      	ldr	r3, [r7, #16]
 80017c4:	4313      	orrs	r3, r2
 80017c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80017c8:	4a0f      	ldr	r2, [pc, #60]	; (8001808 <HAL_GPIO_Init+0x304>)
 80017ca:	69bb      	ldr	r3, [r7, #24]
 80017cc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017ce:	69fb      	ldr	r3, [r7, #28]
 80017d0:	3301      	adds	r3, #1
 80017d2:	61fb      	str	r3, [r7, #28]
 80017d4:	69fb      	ldr	r3, [r7, #28]
 80017d6:	2b0f      	cmp	r3, #15
 80017d8:	f67f aea2 	bls.w	8001520 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80017dc:	bf00      	nop
 80017de:	bf00      	nop
 80017e0:	3724      	adds	r7, #36	; 0x24
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr
 80017ea:	bf00      	nop
 80017ec:	40023800 	.word	0x40023800
 80017f0:	40013800 	.word	0x40013800
 80017f4:	40020000 	.word	0x40020000
 80017f8:	40020400 	.word	0x40020400
 80017fc:	40020800 	.word	0x40020800
 8001800:	40020c00 	.word	0x40020c00
 8001804:	40021000 	.word	0x40021000
 8001808:	40013c00 	.word	0x40013c00

0800180c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b086      	sub	sp, #24
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d101      	bne.n	800181e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800181a:	2301      	movs	r3, #1
 800181c:	e267      	b.n	8001cee <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f003 0301 	and.w	r3, r3, #1
 8001826:	2b00      	cmp	r3, #0
 8001828:	d075      	beq.n	8001916 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800182a:	4b88      	ldr	r3, [pc, #544]	; (8001a4c <HAL_RCC_OscConfig+0x240>)
 800182c:	689b      	ldr	r3, [r3, #8]
 800182e:	f003 030c 	and.w	r3, r3, #12
 8001832:	2b04      	cmp	r3, #4
 8001834:	d00c      	beq.n	8001850 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001836:	4b85      	ldr	r3, [pc, #532]	; (8001a4c <HAL_RCC_OscConfig+0x240>)
 8001838:	689b      	ldr	r3, [r3, #8]
 800183a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800183e:	2b08      	cmp	r3, #8
 8001840:	d112      	bne.n	8001868 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001842:	4b82      	ldr	r3, [pc, #520]	; (8001a4c <HAL_RCC_OscConfig+0x240>)
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800184a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800184e:	d10b      	bne.n	8001868 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001850:	4b7e      	ldr	r3, [pc, #504]	; (8001a4c <HAL_RCC_OscConfig+0x240>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001858:	2b00      	cmp	r3, #0
 800185a:	d05b      	beq.n	8001914 <HAL_RCC_OscConfig+0x108>
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d157      	bne.n	8001914 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001864:	2301      	movs	r3, #1
 8001866:	e242      	b.n	8001cee <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001870:	d106      	bne.n	8001880 <HAL_RCC_OscConfig+0x74>
 8001872:	4b76      	ldr	r3, [pc, #472]	; (8001a4c <HAL_RCC_OscConfig+0x240>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4a75      	ldr	r2, [pc, #468]	; (8001a4c <HAL_RCC_OscConfig+0x240>)
 8001878:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800187c:	6013      	str	r3, [r2, #0]
 800187e:	e01d      	b.n	80018bc <HAL_RCC_OscConfig+0xb0>
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001888:	d10c      	bne.n	80018a4 <HAL_RCC_OscConfig+0x98>
 800188a:	4b70      	ldr	r3, [pc, #448]	; (8001a4c <HAL_RCC_OscConfig+0x240>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4a6f      	ldr	r2, [pc, #444]	; (8001a4c <HAL_RCC_OscConfig+0x240>)
 8001890:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001894:	6013      	str	r3, [r2, #0]
 8001896:	4b6d      	ldr	r3, [pc, #436]	; (8001a4c <HAL_RCC_OscConfig+0x240>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4a6c      	ldr	r2, [pc, #432]	; (8001a4c <HAL_RCC_OscConfig+0x240>)
 800189c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018a0:	6013      	str	r3, [r2, #0]
 80018a2:	e00b      	b.n	80018bc <HAL_RCC_OscConfig+0xb0>
 80018a4:	4b69      	ldr	r3, [pc, #420]	; (8001a4c <HAL_RCC_OscConfig+0x240>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a68      	ldr	r2, [pc, #416]	; (8001a4c <HAL_RCC_OscConfig+0x240>)
 80018aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018ae:	6013      	str	r3, [r2, #0]
 80018b0:	4b66      	ldr	r3, [pc, #408]	; (8001a4c <HAL_RCC_OscConfig+0x240>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a65      	ldr	r2, [pc, #404]	; (8001a4c <HAL_RCC_OscConfig+0x240>)
 80018b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d013      	beq.n	80018ec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018c4:	f7ff f94a 	bl	8000b5c <HAL_GetTick>
 80018c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018ca:	e008      	b.n	80018de <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018cc:	f7ff f946 	bl	8000b5c <HAL_GetTick>
 80018d0:	4602      	mov	r2, r0
 80018d2:	693b      	ldr	r3, [r7, #16]
 80018d4:	1ad3      	subs	r3, r2, r3
 80018d6:	2b64      	cmp	r3, #100	; 0x64
 80018d8:	d901      	bls.n	80018de <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80018da:	2303      	movs	r3, #3
 80018dc:	e207      	b.n	8001cee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018de:	4b5b      	ldr	r3, [pc, #364]	; (8001a4c <HAL_RCC_OscConfig+0x240>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d0f0      	beq.n	80018cc <HAL_RCC_OscConfig+0xc0>
 80018ea:	e014      	b.n	8001916 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018ec:	f7ff f936 	bl	8000b5c <HAL_GetTick>
 80018f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018f2:	e008      	b.n	8001906 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018f4:	f7ff f932 	bl	8000b5c <HAL_GetTick>
 80018f8:	4602      	mov	r2, r0
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	1ad3      	subs	r3, r2, r3
 80018fe:	2b64      	cmp	r3, #100	; 0x64
 8001900:	d901      	bls.n	8001906 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001902:	2303      	movs	r3, #3
 8001904:	e1f3      	b.n	8001cee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001906:	4b51      	ldr	r3, [pc, #324]	; (8001a4c <HAL_RCC_OscConfig+0x240>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800190e:	2b00      	cmp	r3, #0
 8001910:	d1f0      	bne.n	80018f4 <HAL_RCC_OscConfig+0xe8>
 8001912:	e000      	b.n	8001916 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001914:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f003 0302 	and.w	r3, r3, #2
 800191e:	2b00      	cmp	r3, #0
 8001920:	d063      	beq.n	80019ea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001922:	4b4a      	ldr	r3, [pc, #296]	; (8001a4c <HAL_RCC_OscConfig+0x240>)
 8001924:	689b      	ldr	r3, [r3, #8]
 8001926:	f003 030c 	and.w	r3, r3, #12
 800192a:	2b00      	cmp	r3, #0
 800192c:	d00b      	beq.n	8001946 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800192e:	4b47      	ldr	r3, [pc, #284]	; (8001a4c <HAL_RCC_OscConfig+0x240>)
 8001930:	689b      	ldr	r3, [r3, #8]
 8001932:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001936:	2b08      	cmp	r3, #8
 8001938:	d11c      	bne.n	8001974 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800193a:	4b44      	ldr	r3, [pc, #272]	; (8001a4c <HAL_RCC_OscConfig+0x240>)
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001942:	2b00      	cmp	r3, #0
 8001944:	d116      	bne.n	8001974 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001946:	4b41      	ldr	r3, [pc, #260]	; (8001a4c <HAL_RCC_OscConfig+0x240>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f003 0302 	and.w	r3, r3, #2
 800194e:	2b00      	cmp	r3, #0
 8001950:	d005      	beq.n	800195e <HAL_RCC_OscConfig+0x152>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	68db      	ldr	r3, [r3, #12]
 8001956:	2b01      	cmp	r3, #1
 8001958:	d001      	beq.n	800195e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800195a:	2301      	movs	r3, #1
 800195c:	e1c7      	b.n	8001cee <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800195e:	4b3b      	ldr	r3, [pc, #236]	; (8001a4c <HAL_RCC_OscConfig+0x240>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	691b      	ldr	r3, [r3, #16]
 800196a:	00db      	lsls	r3, r3, #3
 800196c:	4937      	ldr	r1, [pc, #220]	; (8001a4c <HAL_RCC_OscConfig+0x240>)
 800196e:	4313      	orrs	r3, r2
 8001970:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001972:	e03a      	b.n	80019ea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	68db      	ldr	r3, [r3, #12]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d020      	beq.n	80019be <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800197c:	4b34      	ldr	r3, [pc, #208]	; (8001a50 <HAL_RCC_OscConfig+0x244>)
 800197e:	2201      	movs	r2, #1
 8001980:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001982:	f7ff f8eb 	bl	8000b5c <HAL_GetTick>
 8001986:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001988:	e008      	b.n	800199c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800198a:	f7ff f8e7 	bl	8000b5c <HAL_GetTick>
 800198e:	4602      	mov	r2, r0
 8001990:	693b      	ldr	r3, [r7, #16]
 8001992:	1ad3      	subs	r3, r2, r3
 8001994:	2b02      	cmp	r3, #2
 8001996:	d901      	bls.n	800199c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001998:	2303      	movs	r3, #3
 800199a:	e1a8      	b.n	8001cee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800199c:	4b2b      	ldr	r3, [pc, #172]	; (8001a4c <HAL_RCC_OscConfig+0x240>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f003 0302 	and.w	r3, r3, #2
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d0f0      	beq.n	800198a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019a8:	4b28      	ldr	r3, [pc, #160]	; (8001a4c <HAL_RCC_OscConfig+0x240>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	691b      	ldr	r3, [r3, #16]
 80019b4:	00db      	lsls	r3, r3, #3
 80019b6:	4925      	ldr	r1, [pc, #148]	; (8001a4c <HAL_RCC_OscConfig+0x240>)
 80019b8:	4313      	orrs	r3, r2
 80019ba:	600b      	str	r3, [r1, #0]
 80019bc:	e015      	b.n	80019ea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019be:	4b24      	ldr	r3, [pc, #144]	; (8001a50 <HAL_RCC_OscConfig+0x244>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019c4:	f7ff f8ca 	bl	8000b5c <HAL_GetTick>
 80019c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019ca:	e008      	b.n	80019de <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019cc:	f7ff f8c6 	bl	8000b5c <HAL_GetTick>
 80019d0:	4602      	mov	r2, r0
 80019d2:	693b      	ldr	r3, [r7, #16]
 80019d4:	1ad3      	subs	r3, r2, r3
 80019d6:	2b02      	cmp	r3, #2
 80019d8:	d901      	bls.n	80019de <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80019da:	2303      	movs	r3, #3
 80019dc:	e187      	b.n	8001cee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019de:	4b1b      	ldr	r3, [pc, #108]	; (8001a4c <HAL_RCC_OscConfig+0x240>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f003 0302 	and.w	r3, r3, #2
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d1f0      	bne.n	80019cc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f003 0308 	and.w	r3, r3, #8
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d036      	beq.n	8001a64 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	695b      	ldr	r3, [r3, #20]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d016      	beq.n	8001a2c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019fe:	4b15      	ldr	r3, [pc, #84]	; (8001a54 <HAL_RCC_OscConfig+0x248>)
 8001a00:	2201      	movs	r2, #1
 8001a02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a04:	f7ff f8aa 	bl	8000b5c <HAL_GetTick>
 8001a08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a0a:	e008      	b.n	8001a1e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a0c:	f7ff f8a6 	bl	8000b5c <HAL_GetTick>
 8001a10:	4602      	mov	r2, r0
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	2b02      	cmp	r3, #2
 8001a18:	d901      	bls.n	8001a1e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	e167      	b.n	8001cee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a1e:	4b0b      	ldr	r3, [pc, #44]	; (8001a4c <HAL_RCC_OscConfig+0x240>)
 8001a20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a22:	f003 0302 	and.w	r3, r3, #2
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d0f0      	beq.n	8001a0c <HAL_RCC_OscConfig+0x200>
 8001a2a:	e01b      	b.n	8001a64 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a2c:	4b09      	ldr	r3, [pc, #36]	; (8001a54 <HAL_RCC_OscConfig+0x248>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a32:	f7ff f893 	bl	8000b5c <HAL_GetTick>
 8001a36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a38:	e00e      	b.n	8001a58 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a3a:	f7ff f88f 	bl	8000b5c <HAL_GetTick>
 8001a3e:	4602      	mov	r2, r0
 8001a40:	693b      	ldr	r3, [r7, #16]
 8001a42:	1ad3      	subs	r3, r2, r3
 8001a44:	2b02      	cmp	r3, #2
 8001a46:	d907      	bls.n	8001a58 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001a48:	2303      	movs	r3, #3
 8001a4a:	e150      	b.n	8001cee <HAL_RCC_OscConfig+0x4e2>
 8001a4c:	40023800 	.word	0x40023800
 8001a50:	42470000 	.word	0x42470000
 8001a54:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a58:	4b88      	ldr	r3, [pc, #544]	; (8001c7c <HAL_RCC_OscConfig+0x470>)
 8001a5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a5c:	f003 0302 	and.w	r3, r3, #2
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d1ea      	bne.n	8001a3a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f003 0304 	and.w	r3, r3, #4
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	f000 8097 	beq.w	8001ba0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a72:	2300      	movs	r3, #0
 8001a74:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a76:	4b81      	ldr	r3, [pc, #516]	; (8001c7c <HAL_RCC_OscConfig+0x470>)
 8001a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d10f      	bne.n	8001aa2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a82:	2300      	movs	r3, #0
 8001a84:	60bb      	str	r3, [r7, #8]
 8001a86:	4b7d      	ldr	r3, [pc, #500]	; (8001c7c <HAL_RCC_OscConfig+0x470>)
 8001a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a8a:	4a7c      	ldr	r2, [pc, #496]	; (8001c7c <HAL_RCC_OscConfig+0x470>)
 8001a8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a90:	6413      	str	r3, [r2, #64]	; 0x40
 8001a92:	4b7a      	ldr	r3, [pc, #488]	; (8001c7c <HAL_RCC_OscConfig+0x470>)
 8001a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a9a:	60bb      	str	r3, [r7, #8]
 8001a9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001aa2:	4b77      	ldr	r3, [pc, #476]	; (8001c80 <HAL_RCC_OscConfig+0x474>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d118      	bne.n	8001ae0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001aae:	4b74      	ldr	r3, [pc, #464]	; (8001c80 <HAL_RCC_OscConfig+0x474>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4a73      	ldr	r2, [pc, #460]	; (8001c80 <HAL_RCC_OscConfig+0x474>)
 8001ab4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ab8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001aba:	f7ff f84f 	bl	8000b5c <HAL_GetTick>
 8001abe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ac0:	e008      	b.n	8001ad4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ac2:	f7ff f84b 	bl	8000b5c <HAL_GetTick>
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	693b      	ldr	r3, [r7, #16]
 8001aca:	1ad3      	subs	r3, r2, r3
 8001acc:	2b02      	cmp	r3, #2
 8001ace:	d901      	bls.n	8001ad4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001ad0:	2303      	movs	r3, #3
 8001ad2:	e10c      	b.n	8001cee <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ad4:	4b6a      	ldr	r3, [pc, #424]	; (8001c80 <HAL_RCC_OscConfig+0x474>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d0f0      	beq.n	8001ac2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	689b      	ldr	r3, [r3, #8]
 8001ae4:	2b01      	cmp	r3, #1
 8001ae6:	d106      	bne.n	8001af6 <HAL_RCC_OscConfig+0x2ea>
 8001ae8:	4b64      	ldr	r3, [pc, #400]	; (8001c7c <HAL_RCC_OscConfig+0x470>)
 8001aea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001aec:	4a63      	ldr	r2, [pc, #396]	; (8001c7c <HAL_RCC_OscConfig+0x470>)
 8001aee:	f043 0301 	orr.w	r3, r3, #1
 8001af2:	6713      	str	r3, [r2, #112]	; 0x70
 8001af4:	e01c      	b.n	8001b30 <HAL_RCC_OscConfig+0x324>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	2b05      	cmp	r3, #5
 8001afc:	d10c      	bne.n	8001b18 <HAL_RCC_OscConfig+0x30c>
 8001afe:	4b5f      	ldr	r3, [pc, #380]	; (8001c7c <HAL_RCC_OscConfig+0x470>)
 8001b00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b02:	4a5e      	ldr	r2, [pc, #376]	; (8001c7c <HAL_RCC_OscConfig+0x470>)
 8001b04:	f043 0304 	orr.w	r3, r3, #4
 8001b08:	6713      	str	r3, [r2, #112]	; 0x70
 8001b0a:	4b5c      	ldr	r3, [pc, #368]	; (8001c7c <HAL_RCC_OscConfig+0x470>)
 8001b0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b0e:	4a5b      	ldr	r2, [pc, #364]	; (8001c7c <HAL_RCC_OscConfig+0x470>)
 8001b10:	f043 0301 	orr.w	r3, r3, #1
 8001b14:	6713      	str	r3, [r2, #112]	; 0x70
 8001b16:	e00b      	b.n	8001b30 <HAL_RCC_OscConfig+0x324>
 8001b18:	4b58      	ldr	r3, [pc, #352]	; (8001c7c <HAL_RCC_OscConfig+0x470>)
 8001b1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b1c:	4a57      	ldr	r2, [pc, #348]	; (8001c7c <HAL_RCC_OscConfig+0x470>)
 8001b1e:	f023 0301 	bic.w	r3, r3, #1
 8001b22:	6713      	str	r3, [r2, #112]	; 0x70
 8001b24:	4b55      	ldr	r3, [pc, #340]	; (8001c7c <HAL_RCC_OscConfig+0x470>)
 8001b26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b28:	4a54      	ldr	r2, [pc, #336]	; (8001c7c <HAL_RCC_OscConfig+0x470>)
 8001b2a:	f023 0304 	bic.w	r3, r3, #4
 8001b2e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d015      	beq.n	8001b64 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b38:	f7ff f810 	bl	8000b5c <HAL_GetTick>
 8001b3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b3e:	e00a      	b.n	8001b56 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b40:	f7ff f80c 	bl	8000b5c <HAL_GetTick>
 8001b44:	4602      	mov	r2, r0
 8001b46:	693b      	ldr	r3, [r7, #16]
 8001b48:	1ad3      	subs	r3, r2, r3
 8001b4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d901      	bls.n	8001b56 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001b52:	2303      	movs	r3, #3
 8001b54:	e0cb      	b.n	8001cee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b56:	4b49      	ldr	r3, [pc, #292]	; (8001c7c <HAL_RCC_OscConfig+0x470>)
 8001b58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b5a:	f003 0302 	and.w	r3, r3, #2
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d0ee      	beq.n	8001b40 <HAL_RCC_OscConfig+0x334>
 8001b62:	e014      	b.n	8001b8e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b64:	f7fe fffa 	bl	8000b5c <HAL_GetTick>
 8001b68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b6a:	e00a      	b.n	8001b82 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b6c:	f7fe fff6 	bl	8000b5c <HAL_GetTick>
 8001b70:	4602      	mov	r2, r0
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	1ad3      	subs	r3, r2, r3
 8001b76:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d901      	bls.n	8001b82 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001b7e:	2303      	movs	r3, #3
 8001b80:	e0b5      	b.n	8001cee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b82:	4b3e      	ldr	r3, [pc, #248]	; (8001c7c <HAL_RCC_OscConfig+0x470>)
 8001b84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b86:	f003 0302 	and.w	r3, r3, #2
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d1ee      	bne.n	8001b6c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001b8e:	7dfb      	ldrb	r3, [r7, #23]
 8001b90:	2b01      	cmp	r3, #1
 8001b92:	d105      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b94:	4b39      	ldr	r3, [pc, #228]	; (8001c7c <HAL_RCC_OscConfig+0x470>)
 8001b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b98:	4a38      	ldr	r2, [pc, #224]	; (8001c7c <HAL_RCC_OscConfig+0x470>)
 8001b9a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b9e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	699b      	ldr	r3, [r3, #24]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	f000 80a1 	beq.w	8001cec <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001baa:	4b34      	ldr	r3, [pc, #208]	; (8001c7c <HAL_RCC_OscConfig+0x470>)
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	f003 030c 	and.w	r3, r3, #12
 8001bb2:	2b08      	cmp	r3, #8
 8001bb4:	d05c      	beq.n	8001c70 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	699b      	ldr	r3, [r3, #24]
 8001bba:	2b02      	cmp	r3, #2
 8001bbc:	d141      	bne.n	8001c42 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bbe:	4b31      	ldr	r3, [pc, #196]	; (8001c84 <HAL_RCC_OscConfig+0x478>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bc4:	f7fe ffca 	bl	8000b5c <HAL_GetTick>
 8001bc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bca:	e008      	b.n	8001bde <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bcc:	f7fe ffc6 	bl	8000b5c <HAL_GetTick>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	1ad3      	subs	r3, r2, r3
 8001bd6:	2b02      	cmp	r3, #2
 8001bd8:	d901      	bls.n	8001bde <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001bda:	2303      	movs	r3, #3
 8001bdc:	e087      	b.n	8001cee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bde:	4b27      	ldr	r3, [pc, #156]	; (8001c7c <HAL_RCC_OscConfig+0x470>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d1f0      	bne.n	8001bcc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	69da      	ldr	r2, [r3, #28]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6a1b      	ldr	r3, [r3, #32]
 8001bf2:	431a      	orrs	r2, r3
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf8:	019b      	lsls	r3, r3, #6
 8001bfa:	431a      	orrs	r2, r3
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c00:	085b      	lsrs	r3, r3, #1
 8001c02:	3b01      	subs	r3, #1
 8001c04:	041b      	lsls	r3, r3, #16
 8001c06:	431a      	orrs	r2, r3
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c0c:	061b      	lsls	r3, r3, #24
 8001c0e:	491b      	ldr	r1, [pc, #108]	; (8001c7c <HAL_RCC_OscConfig+0x470>)
 8001c10:	4313      	orrs	r3, r2
 8001c12:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c14:	4b1b      	ldr	r3, [pc, #108]	; (8001c84 <HAL_RCC_OscConfig+0x478>)
 8001c16:	2201      	movs	r2, #1
 8001c18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c1a:	f7fe ff9f 	bl	8000b5c <HAL_GetTick>
 8001c1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c20:	e008      	b.n	8001c34 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c22:	f7fe ff9b 	bl	8000b5c <HAL_GetTick>
 8001c26:	4602      	mov	r2, r0
 8001c28:	693b      	ldr	r3, [r7, #16]
 8001c2a:	1ad3      	subs	r3, r2, r3
 8001c2c:	2b02      	cmp	r3, #2
 8001c2e:	d901      	bls.n	8001c34 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001c30:	2303      	movs	r3, #3
 8001c32:	e05c      	b.n	8001cee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c34:	4b11      	ldr	r3, [pc, #68]	; (8001c7c <HAL_RCC_OscConfig+0x470>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d0f0      	beq.n	8001c22 <HAL_RCC_OscConfig+0x416>
 8001c40:	e054      	b.n	8001cec <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c42:	4b10      	ldr	r3, [pc, #64]	; (8001c84 <HAL_RCC_OscConfig+0x478>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c48:	f7fe ff88 	bl	8000b5c <HAL_GetTick>
 8001c4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c4e:	e008      	b.n	8001c62 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c50:	f7fe ff84 	bl	8000b5c <HAL_GetTick>
 8001c54:	4602      	mov	r2, r0
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	1ad3      	subs	r3, r2, r3
 8001c5a:	2b02      	cmp	r3, #2
 8001c5c:	d901      	bls.n	8001c62 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001c5e:	2303      	movs	r3, #3
 8001c60:	e045      	b.n	8001cee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c62:	4b06      	ldr	r3, [pc, #24]	; (8001c7c <HAL_RCC_OscConfig+0x470>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d1f0      	bne.n	8001c50 <HAL_RCC_OscConfig+0x444>
 8001c6e:	e03d      	b.n	8001cec <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	699b      	ldr	r3, [r3, #24]
 8001c74:	2b01      	cmp	r3, #1
 8001c76:	d107      	bne.n	8001c88 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001c78:	2301      	movs	r3, #1
 8001c7a:	e038      	b.n	8001cee <HAL_RCC_OscConfig+0x4e2>
 8001c7c:	40023800 	.word	0x40023800
 8001c80:	40007000 	.word	0x40007000
 8001c84:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001c88:	4b1b      	ldr	r3, [pc, #108]	; (8001cf8 <HAL_RCC_OscConfig+0x4ec>)
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	699b      	ldr	r3, [r3, #24]
 8001c92:	2b01      	cmp	r3, #1
 8001c94:	d028      	beq.n	8001ce8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ca0:	429a      	cmp	r2, r3
 8001ca2:	d121      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cae:	429a      	cmp	r2, r3
 8001cb0:	d11a      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001cb2:	68fa      	ldr	r2, [r7, #12]
 8001cb4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001cb8:	4013      	ands	r3, r2
 8001cba:	687a      	ldr	r2, [r7, #4]
 8001cbc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001cbe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d111      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cce:	085b      	lsrs	r3, r3, #1
 8001cd0:	3b01      	subs	r3, #1
 8001cd2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	d107      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ce2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	d001      	beq.n	8001cec <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	e000      	b.n	8001cee <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001cec:	2300      	movs	r3, #0
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	3718      	adds	r7, #24
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	40023800 	.word	0x40023800

08001cfc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b084      	sub	sp, #16
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
 8001d04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d101      	bne.n	8001d10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	e0cc      	b.n	8001eaa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d10:	4b68      	ldr	r3, [pc, #416]	; (8001eb4 <HAL_RCC_ClockConfig+0x1b8>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f003 0307 	and.w	r3, r3, #7
 8001d18:	683a      	ldr	r2, [r7, #0]
 8001d1a:	429a      	cmp	r2, r3
 8001d1c:	d90c      	bls.n	8001d38 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d1e:	4b65      	ldr	r3, [pc, #404]	; (8001eb4 <HAL_RCC_ClockConfig+0x1b8>)
 8001d20:	683a      	ldr	r2, [r7, #0]
 8001d22:	b2d2      	uxtb	r2, r2
 8001d24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d26:	4b63      	ldr	r3, [pc, #396]	; (8001eb4 <HAL_RCC_ClockConfig+0x1b8>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f003 0307 	and.w	r3, r3, #7
 8001d2e:	683a      	ldr	r2, [r7, #0]
 8001d30:	429a      	cmp	r2, r3
 8001d32:	d001      	beq.n	8001d38 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001d34:	2301      	movs	r3, #1
 8001d36:	e0b8      	b.n	8001eaa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f003 0302 	and.w	r3, r3, #2
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d020      	beq.n	8001d86 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f003 0304 	and.w	r3, r3, #4
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d005      	beq.n	8001d5c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d50:	4b59      	ldr	r3, [pc, #356]	; (8001eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	4a58      	ldr	r2, [pc, #352]	; (8001eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d56:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001d5a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f003 0308 	and.w	r3, r3, #8
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d005      	beq.n	8001d74 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d68:	4b53      	ldr	r3, [pc, #332]	; (8001eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	4a52      	ldr	r2, [pc, #328]	; (8001eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d6e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001d72:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d74:	4b50      	ldr	r3, [pc, #320]	; (8001eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d76:	689b      	ldr	r3, [r3, #8]
 8001d78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	689b      	ldr	r3, [r3, #8]
 8001d80:	494d      	ldr	r1, [pc, #308]	; (8001eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d82:	4313      	orrs	r3, r2
 8001d84:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f003 0301 	and.w	r3, r3, #1
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d044      	beq.n	8001e1c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	2b01      	cmp	r3, #1
 8001d98:	d107      	bne.n	8001daa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d9a:	4b47      	ldr	r3, [pc, #284]	; (8001eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d119      	bne.n	8001dda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	e07f      	b.n	8001eaa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	2b02      	cmp	r3, #2
 8001db0:	d003      	beq.n	8001dba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001db6:	2b03      	cmp	r3, #3
 8001db8:	d107      	bne.n	8001dca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dba:	4b3f      	ldr	r3, [pc, #252]	; (8001eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d109      	bne.n	8001dda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e06f      	b.n	8001eaa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dca:	4b3b      	ldr	r3, [pc, #236]	; (8001eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f003 0302 	and.w	r3, r3, #2
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d101      	bne.n	8001dda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e067      	b.n	8001eaa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001dda:	4b37      	ldr	r3, [pc, #220]	; (8001eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8001ddc:	689b      	ldr	r3, [r3, #8]
 8001dde:	f023 0203 	bic.w	r2, r3, #3
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	4934      	ldr	r1, [pc, #208]	; (8001eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8001de8:	4313      	orrs	r3, r2
 8001dea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001dec:	f7fe feb6 	bl	8000b5c <HAL_GetTick>
 8001df0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001df2:	e00a      	b.n	8001e0a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001df4:	f7fe feb2 	bl	8000b5c <HAL_GetTick>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	1ad3      	subs	r3, r2, r3
 8001dfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d901      	bls.n	8001e0a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e06:	2303      	movs	r3, #3
 8001e08:	e04f      	b.n	8001eaa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e0a:	4b2b      	ldr	r3, [pc, #172]	; (8001eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8001e0c:	689b      	ldr	r3, [r3, #8]
 8001e0e:	f003 020c 	and.w	r2, r3, #12
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	009b      	lsls	r3, r3, #2
 8001e18:	429a      	cmp	r2, r3
 8001e1a:	d1eb      	bne.n	8001df4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e1c:	4b25      	ldr	r3, [pc, #148]	; (8001eb4 <HAL_RCC_ClockConfig+0x1b8>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f003 0307 	and.w	r3, r3, #7
 8001e24:	683a      	ldr	r2, [r7, #0]
 8001e26:	429a      	cmp	r2, r3
 8001e28:	d20c      	bcs.n	8001e44 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e2a:	4b22      	ldr	r3, [pc, #136]	; (8001eb4 <HAL_RCC_ClockConfig+0x1b8>)
 8001e2c:	683a      	ldr	r2, [r7, #0]
 8001e2e:	b2d2      	uxtb	r2, r2
 8001e30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e32:	4b20      	ldr	r3, [pc, #128]	; (8001eb4 <HAL_RCC_ClockConfig+0x1b8>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 0307 	and.w	r3, r3, #7
 8001e3a:	683a      	ldr	r2, [r7, #0]
 8001e3c:	429a      	cmp	r2, r3
 8001e3e:	d001      	beq.n	8001e44 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001e40:	2301      	movs	r3, #1
 8001e42:	e032      	b.n	8001eaa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f003 0304 	and.w	r3, r3, #4
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d008      	beq.n	8001e62 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e50:	4b19      	ldr	r3, [pc, #100]	; (8001eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	68db      	ldr	r3, [r3, #12]
 8001e5c:	4916      	ldr	r1, [pc, #88]	; (8001eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f003 0308 	and.w	r3, r3, #8
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d009      	beq.n	8001e82 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e6e:	4b12      	ldr	r3, [pc, #72]	; (8001eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	691b      	ldr	r3, [r3, #16]
 8001e7a:	00db      	lsls	r3, r3, #3
 8001e7c:	490e      	ldr	r1, [pc, #56]	; (8001eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001e82:	f000 f821 	bl	8001ec8 <HAL_RCC_GetSysClockFreq>
 8001e86:	4602      	mov	r2, r0
 8001e88:	4b0b      	ldr	r3, [pc, #44]	; (8001eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8001e8a:	689b      	ldr	r3, [r3, #8]
 8001e8c:	091b      	lsrs	r3, r3, #4
 8001e8e:	f003 030f 	and.w	r3, r3, #15
 8001e92:	490a      	ldr	r1, [pc, #40]	; (8001ebc <HAL_RCC_ClockConfig+0x1c0>)
 8001e94:	5ccb      	ldrb	r3, [r1, r3]
 8001e96:	fa22 f303 	lsr.w	r3, r2, r3
 8001e9a:	4a09      	ldr	r2, [pc, #36]	; (8001ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001e9e:	4b09      	ldr	r3, [pc, #36]	; (8001ec4 <HAL_RCC_ClockConfig+0x1c8>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f7fe fe16 	bl	8000ad4 <HAL_InitTick>

  return HAL_OK;
 8001ea8:	2300      	movs	r3, #0
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	3710      	adds	r7, #16
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	40023c00 	.word	0x40023c00
 8001eb8:	40023800 	.word	0x40023800
 8001ebc:	08005420 	.word	0x08005420
 8001ec0:	20000000 	.word	0x20000000
 8001ec4:	20000004 	.word	0x20000004

08001ec8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ec8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ecc:	b090      	sub	sp, #64	; 0x40
 8001ece:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	637b      	str	r3, [r7, #52]	; 0x34
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001ed8:	2300      	movs	r3, #0
 8001eda:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001edc:	2300      	movs	r3, #0
 8001ede:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ee0:	4b59      	ldr	r3, [pc, #356]	; (8002048 <HAL_RCC_GetSysClockFreq+0x180>)
 8001ee2:	689b      	ldr	r3, [r3, #8]
 8001ee4:	f003 030c 	and.w	r3, r3, #12
 8001ee8:	2b08      	cmp	r3, #8
 8001eea:	d00d      	beq.n	8001f08 <HAL_RCC_GetSysClockFreq+0x40>
 8001eec:	2b08      	cmp	r3, #8
 8001eee:	f200 80a1 	bhi.w	8002034 <HAL_RCC_GetSysClockFreq+0x16c>
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d002      	beq.n	8001efc <HAL_RCC_GetSysClockFreq+0x34>
 8001ef6:	2b04      	cmp	r3, #4
 8001ef8:	d003      	beq.n	8001f02 <HAL_RCC_GetSysClockFreq+0x3a>
 8001efa:	e09b      	b.n	8002034 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001efc:	4b53      	ldr	r3, [pc, #332]	; (800204c <HAL_RCC_GetSysClockFreq+0x184>)
 8001efe:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001f00:	e09b      	b.n	800203a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001f02:	4b53      	ldr	r3, [pc, #332]	; (8002050 <HAL_RCC_GetSysClockFreq+0x188>)
 8001f04:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001f06:	e098      	b.n	800203a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f08:	4b4f      	ldr	r3, [pc, #316]	; (8002048 <HAL_RCC_GetSysClockFreq+0x180>)
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001f10:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001f12:	4b4d      	ldr	r3, [pc, #308]	; (8002048 <HAL_RCC_GetSysClockFreq+0x180>)
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d028      	beq.n	8001f70 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f1e:	4b4a      	ldr	r3, [pc, #296]	; (8002048 <HAL_RCC_GetSysClockFreq+0x180>)
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	099b      	lsrs	r3, r3, #6
 8001f24:	2200      	movs	r2, #0
 8001f26:	623b      	str	r3, [r7, #32]
 8001f28:	627a      	str	r2, [r7, #36]	; 0x24
 8001f2a:	6a3b      	ldr	r3, [r7, #32]
 8001f2c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001f30:	2100      	movs	r1, #0
 8001f32:	4b47      	ldr	r3, [pc, #284]	; (8002050 <HAL_RCC_GetSysClockFreq+0x188>)
 8001f34:	fb03 f201 	mul.w	r2, r3, r1
 8001f38:	2300      	movs	r3, #0
 8001f3a:	fb00 f303 	mul.w	r3, r0, r3
 8001f3e:	4413      	add	r3, r2
 8001f40:	4a43      	ldr	r2, [pc, #268]	; (8002050 <HAL_RCC_GetSysClockFreq+0x188>)
 8001f42:	fba0 1202 	umull	r1, r2, r0, r2
 8001f46:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001f48:	460a      	mov	r2, r1
 8001f4a:	62ba      	str	r2, [r7, #40]	; 0x28
 8001f4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f4e:	4413      	add	r3, r2
 8001f50:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f54:	2200      	movs	r2, #0
 8001f56:	61bb      	str	r3, [r7, #24]
 8001f58:	61fa      	str	r2, [r7, #28]
 8001f5a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001f5e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001f62:	f7fe f93d 	bl	80001e0 <__aeabi_uldivmod>
 8001f66:	4602      	mov	r2, r0
 8001f68:	460b      	mov	r3, r1
 8001f6a:	4613      	mov	r3, r2
 8001f6c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f6e:	e053      	b.n	8002018 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f70:	4b35      	ldr	r3, [pc, #212]	; (8002048 <HAL_RCC_GetSysClockFreq+0x180>)
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	099b      	lsrs	r3, r3, #6
 8001f76:	2200      	movs	r2, #0
 8001f78:	613b      	str	r3, [r7, #16]
 8001f7a:	617a      	str	r2, [r7, #20]
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001f82:	f04f 0b00 	mov.w	fp, #0
 8001f86:	4652      	mov	r2, sl
 8001f88:	465b      	mov	r3, fp
 8001f8a:	f04f 0000 	mov.w	r0, #0
 8001f8e:	f04f 0100 	mov.w	r1, #0
 8001f92:	0159      	lsls	r1, r3, #5
 8001f94:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f98:	0150      	lsls	r0, r2, #5
 8001f9a:	4602      	mov	r2, r0
 8001f9c:	460b      	mov	r3, r1
 8001f9e:	ebb2 080a 	subs.w	r8, r2, sl
 8001fa2:	eb63 090b 	sbc.w	r9, r3, fp
 8001fa6:	f04f 0200 	mov.w	r2, #0
 8001faa:	f04f 0300 	mov.w	r3, #0
 8001fae:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001fb2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001fb6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001fba:	ebb2 0408 	subs.w	r4, r2, r8
 8001fbe:	eb63 0509 	sbc.w	r5, r3, r9
 8001fc2:	f04f 0200 	mov.w	r2, #0
 8001fc6:	f04f 0300 	mov.w	r3, #0
 8001fca:	00eb      	lsls	r3, r5, #3
 8001fcc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001fd0:	00e2      	lsls	r2, r4, #3
 8001fd2:	4614      	mov	r4, r2
 8001fd4:	461d      	mov	r5, r3
 8001fd6:	eb14 030a 	adds.w	r3, r4, sl
 8001fda:	603b      	str	r3, [r7, #0]
 8001fdc:	eb45 030b 	adc.w	r3, r5, fp
 8001fe0:	607b      	str	r3, [r7, #4]
 8001fe2:	f04f 0200 	mov.w	r2, #0
 8001fe6:	f04f 0300 	mov.w	r3, #0
 8001fea:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001fee:	4629      	mov	r1, r5
 8001ff0:	028b      	lsls	r3, r1, #10
 8001ff2:	4621      	mov	r1, r4
 8001ff4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001ff8:	4621      	mov	r1, r4
 8001ffa:	028a      	lsls	r2, r1, #10
 8001ffc:	4610      	mov	r0, r2
 8001ffe:	4619      	mov	r1, r3
 8002000:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002002:	2200      	movs	r2, #0
 8002004:	60bb      	str	r3, [r7, #8]
 8002006:	60fa      	str	r2, [r7, #12]
 8002008:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800200c:	f7fe f8e8 	bl	80001e0 <__aeabi_uldivmod>
 8002010:	4602      	mov	r2, r0
 8002012:	460b      	mov	r3, r1
 8002014:	4613      	mov	r3, r2
 8002016:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002018:	4b0b      	ldr	r3, [pc, #44]	; (8002048 <HAL_RCC_GetSysClockFreq+0x180>)
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	0c1b      	lsrs	r3, r3, #16
 800201e:	f003 0303 	and.w	r3, r3, #3
 8002022:	3301      	adds	r3, #1
 8002024:	005b      	lsls	r3, r3, #1
 8002026:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002028:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800202a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800202c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002030:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002032:	e002      	b.n	800203a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002034:	4b05      	ldr	r3, [pc, #20]	; (800204c <HAL_RCC_GetSysClockFreq+0x184>)
 8002036:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002038:	bf00      	nop
    }
  }
  return sysclockfreq;
 800203a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800203c:	4618      	mov	r0, r3
 800203e:	3740      	adds	r7, #64	; 0x40
 8002040:	46bd      	mov	sp, r7
 8002042:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002046:	bf00      	nop
 8002048:	40023800 	.word	0x40023800
 800204c:	00f42400 	.word	0x00f42400
 8002050:	017d7840 	.word	0x017d7840

08002054 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002054:	b480      	push	{r7}
 8002056:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002058:	4b03      	ldr	r3, [pc, #12]	; (8002068 <HAL_RCC_GetHCLKFreq+0x14>)
 800205a:	681b      	ldr	r3, [r3, #0]
}
 800205c:	4618      	mov	r0, r3
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr
 8002066:	bf00      	nop
 8002068:	20000000 	.word	0x20000000

0800206c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002070:	f7ff fff0 	bl	8002054 <HAL_RCC_GetHCLKFreq>
 8002074:	4602      	mov	r2, r0
 8002076:	4b05      	ldr	r3, [pc, #20]	; (800208c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	0a9b      	lsrs	r3, r3, #10
 800207c:	f003 0307 	and.w	r3, r3, #7
 8002080:	4903      	ldr	r1, [pc, #12]	; (8002090 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002082:	5ccb      	ldrb	r3, [r1, r3]
 8002084:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002088:	4618      	mov	r0, r3
 800208a:	bd80      	pop	{r7, pc}
 800208c:	40023800 	.word	0x40023800
 8002090:	08005430 	.word	0x08005430

08002094 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002098:	f7ff ffdc 	bl	8002054 <HAL_RCC_GetHCLKFreq>
 800209c:	4602      	mov	r2, r0
 800209e:	4b05      	ldr	r3, [pc, #20]	; (80020b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80020a0:	689b      	ldr	r3, [r3, #8]
 80020a2:	0b5b      	lsrs	r3, r3, #13
 80020a4:	f003 0307 	and.w	r3, r3, #7
 80020a8:	4903      	ldr	r1, [pc, #12]	; (80020b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80020aa:	5ccb      	ldrb	r3, [r1, r3]
 80020ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	40023800 	.word	0x40023800
 80020b8:	08005430 	.word	0x08005430

080020bc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b082      	sub	sp, #8
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d101      	bne.n	80020ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	e03f      	b.n	800214e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020d4:	b2db      	uxtb	r3, r3
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d106      	bne.n	80020e8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2200      	movs	r2, #0
 80020de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80020e2:	6878      	ldr	r0, [r7, #4]
 80020e4:	f7fe fc2c 	bl	8000940 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2224      	movs	r2, #36	; 0x24
 80020ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	68da      	ldr	r2, [r3, #12]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80020fe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002100:	6878      	ldr	r0, [r7, #4]
 8002102:	f000 f929 	bl	8002358 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	691a      	ldr	r2, [r3, #16]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002114:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	695a      	ldr	r2, [r3, #20]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002124:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	68da      	ldr	r2, [r3, #12]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002134:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2200      	movs	r2, #0
 800213a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2220      	movs	r2, #32
 8002140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2220      	movs	r2, #32
 8002148:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800214c:	2300      	movs	r3, #0
}
 800214e:	4618      	mov	r0, r3
 8002150:	3708      	adds	r7, #8
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}

08002156 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002156:	b580      	push	{r7, lr}
 8002158:	b08a      	sub	sp, #40	; 0x28
 800215a:	af02      	add	r7, sp, #8
 800215c:	60f8      	str	r0, [r7, #12]
 800215e:	60b9      	str	r1, [r7, #8]
 8002160:	603b      	str	r3, [r7, #0]
 8002162:	4613      	mov	r3, r2
 8002164:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002166:	2300      	movs	r3, #0
 8002168:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002170:	b2db      	uxtb	r3, r3
 8002172:	2b20      	cmp	r3, #32
 8002174:	d17c      	bne.n	8002270 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d002      	beq.n	8002182 <HAL_UART_Transmit+0x2c>
 800217c:	88fb      	ldrh	r3, [r7, #6]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d101      	bne.n	8002186 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002182:	2301      	movs	r3, #1
 8002184:	e075      	b.n	8002272 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800218c:	2b01      	cmp	r3, #1
 800218e:	d101      	bne.n	8002194 <HAL_UART_Transmit+0x3e>
 8002190:	2302      	movs	r3, #2
 8002192:	e06e      	b.n	8002272 <HAL_UART_Transmit+0x11c>
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	2201      	movs	r2, #1
 8002198:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	2200      	movs	r2, #0
 80021a0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	2221      	movs	r2, #33	; 0x21
 80021a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80021aa:	f7fe fcd7 	bl	8000b5c <HAL_GetTick>
 80021ae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	88fa      	ldrh	r2, [r7, #6]
 80021b4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	88fa      	ldrh	r2, [r7, #6]
 80021ba:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	689b      	ldr	r3, [r3, #8]
 80021c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021c4:	d108      	bne.n	80021d8 <HAL_UART_Transmit+0x82>
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	691b      	ldr	r3, [r3, #16]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d104      	bne.n	80021d8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80021ce:	2300      	movs	r3, #0
 80021d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	61bb      	str	r3, [r7, #24]
 80021d6:	e003      	b.n	80021e0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80021dc:	2300      	movs	r3, #0
 80021de:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	2200      	movs	r2, #0
 80021e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80021e8:	e02a      	b.n	8002240 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	9300      	str	r3, [sp, #0]
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	2200      	movs	r2, #0
 80021f2:	2180      	movs	r1, #128	; 0x80
 80021f4:	68f8      	ldr	r0, [r7, #12]
 80021f6:	f000 f840 	bl	800227a <UART_WaitOnFlagUntilTimeout>
 80021fa:	4603      	mov	r3, r0
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d001      	beq.n	8002204 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002200:	2303      	movs	r3, #3
 8002202:	e036      	b.n	8002272 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002204:	69fb      	ldr	r3, [r7, #28]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d10b      	bne.n	8002222 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800220a:	69bb      	ldr	r3, [r7, #24]
 800220c:	881b      	ldrh	r3, [r3, #0]
 800220e:	461a      	mov	r2, r3
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002218:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800221a:	69bb      	ldr	r3, [r7, #24]
 800221c:	3302      	adds	r3, #2
 800221e:	61bb      	str	r3, [r7, #24]
 8002220:	e007      	b.n	8002232 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002222:	69fb      	ldr	r3, [r7, #28]
 8002224:	781a      	ldrb	r2, [r3, #0]
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800222c:	69fb      	ldr	r3, [r7, #28]
 800222e:	3301      	adds	r3, #1
 8002230:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002236:	b29b      	uxth	r3, r3
 8002238:	3b01      	subs	r3, #1
 800223a:	b29a      	uxth	r2, r3
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002244:	b29b      	uxth	r3, r3
 8002246:	2b00      	cmp	r3, #0
 8002248:	d1cf      	bne.n	80021ea <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	9300      	str	r3, [sp, #0]
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	2200      	movs	r2, #0
 8002252:	2140      	movs	r1, #64	; 0x40
 8002254:	68f8      	ldr	r0, [r7, #12]
 8002256:	f000 f810 	bl	800227a <UART_WaitOnFlagUntilTimeout>
 800225a:	4603      	mov	r3, r0
 800225c:	2b00      	cmp	r3, #0
 800225e:	d001      	beq.n	8002264 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002260:	2303      	movs	r3, #3
 8002262:	e006      	b.n	8002272 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	2220      	movs	r2, #32
 8002268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800226c:	2300      	movs	r3, #0
 800226e:	e000      	b.n	8002272 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002270:	2302      	movs	r3, #2
  }
}
 8002272:	4618      	mov	r0, r3
 8002274:	3720      	adds	r7, #32
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}

0800227a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800227a:	b580      	push	{r7, lr}
 800227c:	b090      	sub	sp, #64	; 0x40
 800227e:	af00      	add	r7, sp, #0
 8002280:	60f8      	str	r0, [r7, #12]
 8002282:	60b9      	str	r1, [r7, #8]
 8002284:	603b      	str	r3, [r7, #0]
 8002286:	4613      	mov	r3, r2
 8002288:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800228a:	e050      	b.n	800232e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800228c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800228e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002292:	d04c      	beq.n	800232e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002294:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002296:	2b00      	cmp	r3, #0
 8002298:	d007      	beq.n	80022aa <UART_WaitOnFlagUntilTimeout+0x30>
 800229a:	f7fe fc5f 	bl	8000b5c <HAL_GetTick>
 800229e:	4602      	mov	r2, r0
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	1ad3      	subs	r3, r2, r3
 80022a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80022a6:	429a      	cmp	r2, r3
 80022a8:	d241      	bcs.n	800232e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	330c      	adds	r3, #12
 80022b0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022b4:	e853 3f00 	ldrex	r3, [r3]
 80022b8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80022ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022bc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80022c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	330c      	adds	r3, #12
 80022c8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80022ca:	637a      	str	r2, [r7, #52]	; 0x34
 80022cc:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022ce:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80022d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80022d2:	e841 2300 	strex	r3, r2, [r1]
 80022d6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80022d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d1e5      	bne.n	80022aa <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	3314      	adds	r3, #20
 80022e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	e853 3f00 	ldrex	r3, [r3]
 80022ec:	613b      	str	r3, [r7, #16]
   return(result);
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	f023 0301 	bic.w	r3, r3, #1
 80022f4:	63bb      	str	r3, [r7, #56]	; 0x38
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	3314      	adds	r3, #20
 80022fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80022fe:	623a      	str	r2, [r7, #32]
 8002300:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002302:	69f9      	ldr	r1, [r7, #28]
 8002304:	6a3a      	ldr	r2, [r7, #32]
 8002306:	e841 2300 	strex	r3, r2, [r1]
 800230a:	61bb      	str	r3, [r7, #24]
   return(result);
 800230c:	69bb      	ldr	r3, [r7, #24]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d1e5      	bne.n	80022de <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	2220      	movs	r2, #32
 8002316:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	2220      	movs	r2, #32
 800231e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	2200      	movs	r2, #0
 8002326:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800232a:	2303      	movs	r3, #3
 800232c:	e00f      	b.n	800234e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	681a      	ldr	r2, [r3, #0]
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	4013      	ands	r3, r2
 8002338:	68ba      	ldr	r2, [r7, #8]
 800233a:	429a      	cmp	r2, r3
 800233c:	bf0c      	ite	eq
 800233e:	2301      	moveq	r3, #1
 8002340:	2300      	movne	r3, #0
 8002342:	b2db      	uxtb	r3, r3
 8002344:	461a      	mov	r2, r3
 8002346:	79fb      	ldrb	r3, [r7, #7]
 8002348:	429a      	cmp	r2, r3
 800234a:	d09f      	beq.n	800228c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800234c:	2300      	movs	r3, #0
}
 800234e:	4618      	mov	r0, r3
 8002350:	3740      	adds	r7, #64	; 0x40
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}
	...

08002358 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002358:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800235c:	b0c0      	sub	sp, #256	; 0x100
 800235e:	af00      	add	r7, sp, #0
 8002360:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002364:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	691b      	ldr	r3, [r3, #16]
 800236c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002370:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002374:	68d9      	ldr	r1, [r3, #12]
 8002376:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	ea40 0301 	orr.w	r3, r0, r1
 8002380:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002382:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002386:	689a      	ldr	r2, [r3, #8]
 8002388:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800238c:	691b      	ldr	r3, [r3, #16]
 800238e:	431a      	orrs	r2, r3
 8002390:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002394:	695b      	ldr	r3, [r3, #20]
 8002396:	431a      	orrs	r2, r3
 8002398:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800239c:	69db      	ldr	r3, [r3, #28]
 800239e:	4313      	orrs	r3, r2
 80023a0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80023a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	68db      	ldr	r3, [r3, #12]
 80023ac:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80023b0:	f021 010c 	bic.w	r1, r1, #12
 80023b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023b8:	681a      	ldr	r2, [r3, #0]
 80023ba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80023be:	430b      	orrs	r3, r1
 80023c0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80023c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	695b      	ldr	r3, [r3, #20]
 80023ca:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80023ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023d2:	6999      	ldr	r1, [r3, #24]
 80023d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	ea40 0301 	orr.w	r3, r0, r1
 80023de:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80023e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023e4:	681a      	ldr	r2, [r3, #0]
 80023e6:	4b8f      	ldr	r3, [pc, #572]	; (8002624 <UART_SetConfig+0x2cc>)
 80023e8:	429a      	cmp	r2, r3
 80023ea:	d005      	beq.n	80023f8 <UART_SetConfig+0xa0>
 80023ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023f0:	681a      	ldr	r2, [r3, #0]
 80023f2:	4b8d      	ldr	r3, [pc, #564]	; (8002628 <UART_SetConfig+0x2d0>)
 80023f4:	429a      	cmp	r2, r3
 80023f6:	d104      	bne.n	8002402 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80023f8:	f7ff fe4c 	bl	8002094 <HAL_RCC_GetPCLK2Freq>
 80023fc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002400:	e003      	b.n	800240a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002402:	f7ff fe33 	bl	800206c <HAL_RCC_GetPCLK1Freq>
 8002406:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800240a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800240e:	69db      	ldr	r3, [r3, #28]
 8002410:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002414:	f040 810c 	bne.w	8002630 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002418:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800241c:	2200      	movs	r2, #0
 800241e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002422:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002426:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800242a:	4622      	mov	r2, r4
 800242c:	462b      	mov	r3, r5
 800242e:	1891      	adds	r1, r2, r2
 8002430:	65b9      	str	r1, [r7, #88]	; 0x58
 8002432:	415b      	adcs	r3, r3
 8002434:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002436:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800243a:	4621      	mov	r1, r4
 800243c:	eb12 0801 	adds.w	r8, r2, r1
 8002440:	4629      	mov	r1, r5
 8002442:	eb43 0901 	adc.w	r9, r3, r1
 8002446:	f04f 0200 	mov.w	r2, #0
 800244a:	f04f 0300 	mov.w	r3, #0
 800244e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002452:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002456:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800245a:	4690      	mov	r8, r2
 800245c:	4699      	mov	r9, r3
 800245e:	4623      	mov	r3, r4
 8002460:	eb18 0303 	adds.w	r3, r8, r3
 8002464:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002468:	462b      	mov	r3, r5
 800246a:	eb49 0303 	adc.w	r3, r9, r3
 800246e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002472:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	2200      	movs	r2, #0
 800247a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800247e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002482:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002486:	460b      	mov	r3, r1
 8002488:	18db      	adds	r3, r3, r3
 800248a:	653b      	str	r3, [r7, #80]	; 0x50
 800248c:	4613      	mov	r3, r2
 800248e:	eb42 0303 	adc.w	r3, r2, r3
 8002492:	657b      	str	r3, [r7, #84]	; 0x54
 8002494:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002498:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800249c:	f7fd fea0 	bl	80001e0 <__aeabi_uldivmod>
 80024a0:	4602      	mov	r2, r0
 80024a2:	460b      	mov	r3, r1
 80024a4:	4b61      	ldr	r3, [pc, #388]	; (800262c <UART_SetConfig+0x2d4>)
 80024a6:	fba3 2302 	umull	r2, r3, r3, r2
 80024aa:	095b      	lsrs	r3, r3, #5
 80024ac:	011c      	lsls	r4, r3, #4
 80024ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80024b2:	2200      	movs	r2, #0
 80024b4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80024b8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80024bc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80024c0:	4642      	mov	r2, r8
 80024c2:	464b      	mov	r3, r9
 80024c4:	1891      	adds	r1, r2, r2
 80024c6:	64b9      	str	r1, [r7, #72]	; 0x48
 80024c8:	415b      	adcs	r3, r3
 80024ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80024cc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80024d0:	4641      	mov	r1, r8
 80024d2:	eb12 0a01 	adds.w	sl, r2, r1
 80024d6:	4649      	mov	r1, r9
 80024d8:	eb43 0b01 	adc.w	fp, r3, r1
 80024dc:	f04f 0200 	mov.w	r2, #0
 80024e0:	f04f 0300 	mov.w	r3, #0
 80024e4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80024e8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80024ec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80024f0:	4692      	mov	sl, r2
 80024f2:	469b      	mov	fp, r3
 80024f4:	4643      	mov	r3, r8
 80024f6:	eb1a 0303 	adds.w	r3, sl, r3
 80024fa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80024fe:	464b      	mov	r3, r9
 8002500:	eb4b 0303 	adc.w	r3, fp, r3
 8002504:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002508:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	2200      	movs	r2, #0
 8002510:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002514:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002518:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800251c:	460b      	mov	r3, r1
 800251e:	18db      	adds	r3, r3, r3
 8002520:	643b      	str	r3, [r7, #64]	; 0x40
 8002522:	4613      	mov	r3, r2
 8002524:	eb42 0303 	adc.w	r3, r2, r3
 8002528:	647b      	str	r3, [r7, #68]	; 0x44
 800252a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800252e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002532:	f7fd fe55 	bl	80001e0 <__aeabi_uldivmod>
 8002536:	4602      	mov	r2, r0
 8002538:	460b      	mov	r3, r1
 800253a:	4611      	mov	r1, r2
 800253c:	4b3b      	ldr	r3, [pc, #236]	; (800262c <UART_SetConfig+0x2d4>)
 800253e:	fba3 2301 	umull	r2, r3, r3, r1
 8002542:	095b      	lsrs	r3, r3, #5
 8002544:	2264      	movs	r2, #100	; 0x64
 8002546:	fb02 f303 	mul.w	r3, r2, r3
 800254a:	1acb      	subs	r3, r1, r3
 800254c:	00db      	lsls	r3, r3, #3
 800254e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002552:	4b36      	ldr	r3, [pc, #216]	; (800262c <UART_SetConfig+0x2d4>)
 8002554:	fba3 2302 	umull	r2, r3, r3, r2
 8002558:	095b      	lsrs	r3, r3, #5
 800255a:	005b      	lsls	r3, r3, #1
 800255c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002560:	441c      	add	r4, r3
 8002562:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002566:	2200      	movs	r2, #0
 8002568:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800256c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002570:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002574:	4642      	mov	r2, r8
 8002576:	464b      	mov	r3, r9
 8002578:	1891      	adds	r1, r2, r2
 800257a:	63b9      	str	r1, [r7, #56]	; 0x38
 800257c:	415b      	adcs	r3, r3
 800257e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002580:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002584:	4641      	mov	r1, r8
 8002586:	1851      	adds	r1, r2, r1
 8002588:	6339      	str	r1, [r7, #48]	; 0x30
 800258a:	4649      	mov	r1, r9
 800258c:	414b      	adcs	r3, r1
 800258e:	637b      	str	r3, [r7, #52]	; 0x34
 8002590:	f04f 0200 	mov.w	r2, #0
 8002594:	f04f 0300 	mov.w	r3, #0
 8002598:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800259c:	4659      	mov	r1, fp
 800259e:	00cb      	lsls	r3, r1, #3
 80025a0:	4651      	mov	r1, sl
 80025a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80025a6:	4651      	mov	r1, sl
 80025a8:	00ca      	lsls	r2, r1, #3
 80025aa:	4610      	mov	r0, r2
 80025ac:	4619      	mov	r1, r3
 80025ae:	4603      	mov	r3, r0
 80025b0:	4642      	mov	r2, r8
 80025b2:	189b      	adds	r3, r3, r2
 80025b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80025b8:	464b      	mov	r3, r9
 80025ba:	460a      	mov	r2, r1
 80025bc:	eb42 0303 	adc.w	r3, r2, r3
 80025c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80025c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	2200      	movs	r2, #0
 80025cc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80025d0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80025d4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80025d8:	460b      	mov	r3, r1
 80025da:	18db      	adds	r3, r3, r3
 80025dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80025de:	4613      	mov	r3, r2
 80025e0:	eb42 0303 	adc.w	r3, r2, r3
 80025e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025e6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80025ea:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80025ee:	f7fd fdf7 	bl	80001e0 <__aeabi_uldivmod>
 80025f2:	4602      	mov	r2, r0
 80025f4:	460b      	mov	r3, r1
 80025f6:	4b0d      	ldr	r3, [pc, #52]	; (800262c <UART_SetConfig+0x2d4>)
 80025f8:	fba3 1302 	umull	r1, r3, r3, r2
 80025fc:	095b      	lsrs	r3, r3, #5
 80025fe:	2164      	movs	r1, #100	; 0x64
 8002600:	fb01 f303 	mul.w	r3, r1, r3
 8002604:	1ad3      	subs	r3, r2, r3
 8002606:	00db      	lsls	r3, r3, #3
 8002608:	3332      	adds	r3, #50	; 0x32
 800260a:	4a08      	ldr	r2, [pc, #32]	; (800262c <UART_SetConfig+0x2d4>)
 800260c:	fba2 2303 	umull	r2, r3, r2, r3
 8002610:	095b      	lsrs	r3, r3, #5
 8002612:	f003 0207 	and.w	r2, r3, #7
 8002616:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4422      	add	r2, r4
 800261e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002620:	e106      	b.n	8002830 <UART_SetConfig+0x4d8>
 8002622:	bf00      	nop
 8002624:	40011000 	.word	0x40011000
 8002628:	40011400 	.word	0x40011400
 800262c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002630:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002634:	2200      	movs	r2, #0
 8002636:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800263a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800263e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002642:	4642      	mov	r2, r8
 8002644:	464b      	mov	r3, r9
 8002646:	1891      	adds	r1, r2, r2
 8002648:	6239      	str	r1, [r7, #32]
 800264a:	415b      	adcs	r3, r3
 800264c:	627b      	str	r3, [r7, #36]	; 0x24
 800264e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002652:	4641      	mov	r1, r8
 8002654:	1854      	adds	r4, r2, r1
 8002656:	4649      	mov	r1, r9
 8002658:	eb43 0501 	adc.w	r5, r3, r1
 800265c:	f04f 0200 	mov.w	r2, #0
 8002660:	f04f 0300 	mov.w	r3, #0
 8002664:	00eb      	lsls	r3, r5, #3
 8002666:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800266a:	00e2      	lsls	r2, r4, #3
 800266c:	4614      	mov	r4, r2
 800266e:	461d      	mov	r5, r3
 8002670:	4643      	mov	r3, r8
 8002672:	18e3      	adds	r3, r4, r3
 8002674:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002678:	464b      	mov	r3, r9
 800267a:	eb45 0303 	adc.w	r3, r5, r3
 800267e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002682:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	2200      	movs	r2, #0
 800268a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800268e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002692:	f04f 0200 	mov.w	r2, #0
 8002696:	f04f 0300 	mov.w	r3, #0
 800269a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800269e:	4629      	mov	r1, r5
 80026a0:	008b      	lsls	r3, r1, #2
 80026a2:	4621      	mov	r1, r4
 80026a4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80026a8:	4621      	mov	r1, r4
 80026aa:	008a      	lsls	r2, r1, #2
 80026ac:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80026b0:	f7fd fd96 	bl	80001e0 <__aeabi_uldivmod>
 80026b4:	4602      	mov	r2, r0
 80026b6:	460b      	mov	r3, r1
 80026b8:	4b60      	ldr	r3, [pc, #384]	; (800283c <UART_SetConfig+0x4e4>)
 80026ba:	fba3 2302 	umull	r2, r3, r3, r2
 80026be:	095b      	lsrs	r3, r3, #5
 80026c0:	011c      	lsls	r4, r3, #4
 80026c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80026c6:	2200      	movs	r2, #0
 80026c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80026cc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80026d0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80026d4:	4642      	mov	r2, r8
 80026d6:	464b      	mov	r3, r9
 80026d8:	1891      	adds	r1, r2, r2
 80026da:	61b9      	str	r1, [r7, #24]
 80026dc:	415b      	adcs	r3, r3
 80026de:	61fb      	str	r3, [r7, #28]
 80026e0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80026e4:	4641      	mov	r1, r8
 80026e6:	1851      	adds	r1, r2, r1
 80026e8:	6139      	str	r1, [r7, #16]
 80026ea:	4649      	mov	r1, r9
 80026ec:	414b      	adcs	r3, r1
 80026ee:	617b      	str	r3, [r7, #20]
 80026f0:	f04f 0200 	mov.w	r2, #0
 80026f4:	f04f 0300 	mov.w	r3, #0
 80026f8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80026fc:	4659      	mov	r1, fp
 80026fe:	00cb      	lsls	r3, r1, #3
 8002700:	4651      	mov	r1, sl
 8002702:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002706:	4651      	mov	r1, sl
 8002708:	00ca      	lsls	r2, r1, #3
 800270a:	4610      	mov	r0, r2
 800270c:	4619      	mov	r1, r3
 800270e:	4603      	mov	r3, r0
 8002710:	4642      	mov	r2, r8
 8002712:	189b      	adds	r3, r3, r2
 8002714:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002718:	464b      	mov	r3, r9
 800271a:	460a      	mov	r2, r1
 800271c:	eb42 0303 	adc.w	r3, r2, r3
 8002720:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002724:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	2200      	movs	r2, #0
 800272c:	67bb      	str	r3, [r7, #120]	; 0x78
 800272e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002730:	f04f 0200 	mov.w	r2, #0
 8002734:	f04f 0300 	mov.w	r3, #0
 8002738:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800273c:	4649      	mov	r1, r9
 800273e:	008b      	lsls	r3, r1, #2
 8002740:	4641      	mov	r1, r8
 8002742:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002746:	4641      	mov	r1, r8
 8002748:	008a      	lsls	r2, r1, #2
 800274a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800274e:	f7fd fd47 	bl	80001e0 <__aeabi_uldivmod>
 8002752:	4602      	mov	r2, r0
 8002754:	460b      	mov	r3, r1
 8002756:	4611      	mov	r1, r2
 8002758:	4b38      	ldr	r3, [pc, #224]	; (800283c <UART_SetConfig+0x4e4>)
 800275a:	fba3 2301 	umull	r2, r3, r3, r1
 800275e:	095b      	lsrs	r3, r3, #5
 8002760:	2264      	movs	r2, #100	; 0x64
 8002762:	fb02 f303 	mul.w	r3, r2, r3
 8002766:	1acb      	subs	r3, r1, r3
 8002768:	011b      	lsls	r3, r3, #4
 800276a:	3332      	adds	r3, #50	; 0x32
 800276c:	4a33      	ldr	r2, [pc, #204]	; (800283c <UART_SetConfig+0x4e4>)
 800276e:	fba2 2303 	umull	r2, r3, r2, r3
 8002772:	095b      	lsrs	r3, r3, #5
 8002774:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002778:	441c      	add	r4, r3
 800277a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800277e:	2200      	movs	r2, #0
 8002780:	673b      	str	r3, [r7, #112]	; 0x70
 8002782:	677a      	str	r2, [r7, #116]	; 0x74
 8002784:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002788:	4642      	mov	r2, r8
 800278a:	464b      	mov	r3, r9
 800278c:	1891      	adds	r1, r2, r2
 800278e:	60b9      	str	r1, [r7, #8]
 8002790:	415b      	adcs	r3, r3
 8002792:	60fb      	str	r3, [r7, #12]
 8002794:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002798:	4641      	mov	r1, r8
 800279a:	1851      	adds	r1, r2, r1
 800279c:	6039      	str	r1, [r7, #0]
 800279e:	4649      	mov	r1, r9
 80027a0:	414b      	adcs	r3, r1
 80027a2:	607b      	str	r3, [r7, #4]
 80027a4:	f04f 0200 	mov.w	r2, #0
 80027a8:	f04f 0300 	mov.w	r3, #0
 80027ac:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80027b0:	4659      	mov	r1, fp
 80027b2:	00cb      	lsls	r3, r1, #3
 80027b4:	4651      	mov	r1, sl
 80027b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80027ba:	4651      	mov	r1, sl
 80027bc:	00ca      	lsls	r2, r1, #3
 80027be:	4610      	mov	r0, r2
 80027c0:	4619      	mov	r1, r3
 80027c2:	4603      	mov	r3, r0
 80027c4:	4642      	mov	r2, r8
 80027c6:	189b      	adds	r3, r3, r2
 80027c8:	66bb      	str	r3, [r7, #104]	; 0x68
 80027ca:	464b      	mov	r3, r9
 80027cc:	460a      	mov	r2, r1
 80027ce:	eb42 0303 	adc.w	r3, r2, r3
 80027d2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80027d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	2200      	movs	r2, #0
 80027dc:	663b      	str	r3, [r7, #96]	; 0x60
 80027de:	667a      	str	r2, [r7, #100]	; 0x64
 80027e0:	f04f 0200 	mov.w	r2, #0
 80027e4:	f04f 0300 	mov.w	r3, #0
 80027e8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80027ec:	4649      	mov	r1, r9
 80027ee:	008b      	lsls	r3, r1, #2
 80027f0:	4641      	mov	r1, r8
 80027f2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80027f6:	4641      	mov	r1, r8
 80027f8:	008a      	lsls	r2, r1, #2
 80027fa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80027fe:	f7fd fcef 	bl	80001e0 <__aeabi_uldivmod>
 8002802:	4602      	mov	r2, r0
 8002804:	460b      	mov	r3, r1
 8002806:	4b0d      	ldr	r3, [pc, #52]	; (800283c <UART_SetConfig+0x4e4>)
 8002808:	fba3 1302 	umull	r1, r3, r3, r2
 800280c:	095b      	lsrs	r3, r3, #5
 800280e:	2164      	movs	r1, #100	; 0x64
 8002810:	fb01 f303 	mul.w	r3, r1, r3
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	011b      	lsls	r3, r3, #4
 8002818:	3332      	adds	r3, #50	; 0x32
 800281a:	4a08      	ldr	r2, [pc, #32]	; (800283c <UART_SetConfig+0x4e4>)
 800281c:	fba2 2303 	umull	r2, r3, r2, r3
 8002820:	095b      	lsrs	r3, r3, #5
 8002822:	f003 020f 	and.w	r2, r3, #15
 8002826:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4422      	add	r2, r4
 800282e:	609a      	str	r2, [r3, #8]
}
 8002830:	bf00      	nop
 8002832:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002836:	46bd      	mov	sp, r7
 8002838:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800283c:	51eb851f 	.word	0x51eb851f

08002840 <__NVIC_SetPriority>:
{
 8002840:	b480      	push	{r7}
 8002842:	b083      	sub	sp, #12
 8002844:	af00      	add	r7, sp, #0
 8002846:	4603      	mov	r3, r0
 8002848:	6039      	str	r1, [r7, #0]
 800284a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800284c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002850:	2b00      	cmp	r3, #0
 8002852:	db0a      	blt.n	800286a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	b2da      	uxtb	r2, r3
 8002858:	490c      	ldr	r1, [pc, #48]	; (800288c <__NVIC_SetPriority+0x4c>)
 800285a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800285e:	0112      	lsls	r2, r2, #4
 8002860:	b2d2      	uxtb	r2, r2
 8002862:	440b      	add	r3, r1
 8002864:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002868:	e00a      	b.n	8002880 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	b2da      	uxtb	r2, r3
 800286e:	4908      	ldr	r1, [pc, #32]	; (8002890 <__NVIC_SetPriority+0x50>)
 8002870:	79fb      	ldrb	r3, [r7, #7]
 8002872:	f003 030f 	and.w	r3, r3, #15
 8002876:	3b04      	subs	r3, #4
 8002878:	0112      	lsls	r2, r2, #4
 800287a:	b2d2      	uxtb	r2, r2
 800287c:	440b      	add	r3, r1
 800287e:	761a      	strb	r2, [r3, #24]
}
 8002880:	bf00      	nop
 8002882:	370c      	adds	r7, #12
 8002884:	46bd      	mov	sp, r7
 8002886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288a:	4770      	bx	lr
 800288c:	e000e100 	.word	0xe000e100
 8002890:	e000ed00 	.word	0xe000ed00

08002894 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8002894:	b580      	push	{r7, lr}
 8002896:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8002898:	2100      	movs	r1, #0
 800289a:	f06f 0004 	mvn.w	r0, #4
 800289e:	f7ff ffcf 	bl	8002840 <__NVIC_SetPriority>
#endif
}
 80028a2:	bf00      	nop
 80028a4:	bd80      	pop	{r7, pc}
	...

080028a8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80028a8:	b480      	push	{r7}
 80028aa:	b083      	sub	sp, #12
 80028ac:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80028ae:	f3ef 8305 	mrs	r3, IPSR
 80028b2:	603b      	str	r3, [r7, #0]
  return(result);
 80028b4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d003      	beq.n	80028c2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80028ba:	f06f 0305 	mvn.w	r3, #5
 80028be:	607b      	str	r3, [r7, #4]
 80028c0:	e00c      	b.n	80028dc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80028c2:	4b0a      	ldr	r3, [pc, #40]	; (80028ec <osKernelInitialize+0x44>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d105      	bne.n	80028d6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80028ca:	4b08      	ldr	r3, [pc, #32]	; (80028ec <osKernelInitialize+0x44>)
 80028cc:	2201      	movs	r2, #1
 80028ce:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80028d0:	2300      	movs	r3, #0
 80028d2:	607b      	str	r3, [r7, #4]
 80028d4:	e002      	b.n	80028dc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80028d6:	f04f 33ff 	mov.w	r3, #4294967295
 80028da:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80028dc:	687b      	ldr	r3, [r7, #4]
}
 80028de:	4618      	mov	r0, r3
 80028e0:	370c      	adds	r7, #12
 80028e2:	46bd      	mov	sp, r7
 80028e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e8:	4770      	bx	lr
 80028ea:	bf00      	nop
 80028ec:	200000c8 	.word	0x200000c8

080028f0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b082      	sub	sp, #8
 80028f4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80028f6:	f3ef 8305 	mrs	r3, IPSR
 80028fa:	603b      	str	r3, [r7, #0]
  return(result);
 80028fc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d003      	beq.n	800290a <osKernelStart+0x1a>
    stat = osErrorISR;
 8002902:	f06f 0305 	mvn.w	r3, #5
 8002906:	607b      	str	r3, [r7, #4]
 8002908:	e010      	b.n	800292c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800290a:	4b0b      	ldr	r3, [pc, #44]	; (8002938 <osKernelStart+0x48>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	2b01      	cmp	r3, #1
 8002910:	d109      	bne.n	8002926 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8002912:	f7ff ffbf 	bl	8002894 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8002916:	4b08      	ldr	r3, [pc, #32]	; (8002938 <osKernelStart+0x48>)
 8002918:	2202      	movs	r2, #2
 800291a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800291c:	f001 f866 	bl	80039ec <vTaskStartScheduler>
      stat = osOK;
 8002920:	2300      	movs	r3, #0
 8002922:	607b      	str	r3, [r7, #4]
 8002924:	e002      	b.n	800292c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8002926:	f04f 33ff 	mov.w	r3, #4294967295
 800292a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800292c:	687b      	ldr	r3, [r7, #4]
}
 800292e:	4618      	mov	r0, r3
 8002930:	3708      	adds	r7, #8
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}
 8002936:	bf00      	nop
 8002938:	200000c8 	.word	0x200000c8

0800293c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800293c:	b580      	push	{r7, lr}
 800293e:	b08e      	sub	sp, #56	; 0x38
 8002940:	af04      	add	r7, sp, #16
 8002942:	60f8      	str	r0, [r7, #12]
 8002944:	60b9      	str	r1, [r7, #8]
 8002946:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002948:	2300      	movs	r3, #0
 800294a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800294c:	f3ef 8305 	mrs	r3, IPSR
 8002950:	617b      	str	r3, [r7, #20]
  return(result);
 8002952:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8002954:	2b00      	cmp	r3, #0
 8002956:	d17e      	bne.n	8002a56 <osThreadNew+0x11a>
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d07b      	beq.n	8002a56 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800295e:	2380      	movs	r3, #128	; 0x80
 8002960:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8002962:	2318      	movs	r3, #24
 8002964:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8002966:	2300      	movs	r3, #0
 8002968:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800296a:	f04f 33ff 	mov.w	r3, #4294967295
 800296e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d045      	beq.n	8002a02 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d002      	beq.n	8002984 <osThreadNew+0x48>
        name = attr->name;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	699b      	ldr	r3, [r3, #24]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d002      	beq.n	8002992 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	699b      	ldr	r3, [r3, #24]
 8002990:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002992:	69fb      	ldr	r3, [r7, #28]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d008      	beq.n	80029aa <osThreadNew+0x6e>
 8002998:	69fb      	ldr	r3, [r7, #28]
 800299a:	2b38      	cmp	r3, #56	; 0x38
 800299c:	d805      	bhi.n	80029aa <osThreadNew+0x6e>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	f003 0301 	and.w	r3, r3, #1
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d001      	beq.n	80029ae <osThreadNew+0x72>
        return (NULL);
 80029aa:	2300      	movs	r3, #0
 80029ac:	e054      	b.n	8002a58 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	695b      	ldr	r3, [r3, #20]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d003      	beq.n	80029be <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	695b      	ldr	r3, [r3, #20]
 80029ba:	089b      	lsrs	r3, r3, #2
 80029bc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	689b      	ldr	r3, [r3, #8]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d00e      	beq.n	80029e4 <osThreadNew+0xa8>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	68db      	ldr	r3, [r3, #12]
 80029ca:	2b5b      	cmp	r3, #91	; 0x5b
 80029cc:	d90a      	bls.n	80029e4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d006      	beq.n	80029e4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	695b      	ldr	r3, [r3, #20]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d002      	beq.n	80029e4 <osThreadNew+0xa8>
        mem = 1;
 80029de:	2301      	movs	r3, #1
 80029e0:	61bb      	str	r3, [r7, #24]
 80029e2:	e010      	b.n	8002a06 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d10c      	bne.n	8002a06 <osThreadNew+0xca>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	68db      	ldr	r3, [r3, #12]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d108      	bne.n	8002a06 <osThreadNew+0xca>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	691b      	ldr	r3, [r3, #16]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d104      	bne.n	8002a06 <osThreadNew+0xca>
          mem = 0;
 80029fc:	2300      	movs	r3, #0
 80029fe:	61bb      	str	r3, [r7, #24]
 8002a00:	e001      	b.n	8002a06 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8002a02:	2300      	movs	r3, #0
 8002a04:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8002a06:	69bb      	ldr	r3, [r7, #24]
 8002a08:	2b01      	cmp	r3, #1
 8002a0a:	d110      	bne.n	8002a2e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8002a10:	687a      	ldr	r2, [r7, #4]
 8002a12:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002a14:	9202      	str	r2, [sp, #8]
 8002a16:	9301      	str	r3, [sp, #4]
 8002a18:	69fb      	ldr	r3, [r7, #28]
 8002a1a:	9300      	str	r3, [sp, #0]
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	6a3a      	ldr	r2, [r7, #32]
 8002a20:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a22:	68f8      	ldr	r0, [r7, #12]
 8002a24:	f000 fe0c 	bl	8003640 <xTaskCreateStatic>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	613b      	str	r3, [r7, #16]
 8002a2c:	e013      	b.n	8002a56 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8002a2e:	69bb      	ldr	r3, [r7, #24]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d110      	bne.n	8002a56 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002a34:	6a3b      	ldr	r3, [r7, #32]
 8002a36:	b29a      	uxth	r2, r3
 8002a38:	f107 0310 	add.w	r3, r7, #16
 8002a3c:	9301      	str	r3, [sp, #4]
 8002a3e:	69fb      	ldr	r3, [r7, #28]
 8002a40:	9300      	str	r3, [sp, #0]
 8002a42:	68bb      	ldr	r3, [r7, #8]
 8002a44:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a46:	68f8      	ldr	r0, [r7, #12]
 8002a48:	f000 fe57 	bl	80036fa <xTaskCreate>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	2b01      	cmp	r3, #1
 8002a50:	d001      	beq.n	8002a56 <osThreadNew+0x11a>
            hTask = NULL;
 8002a52:	2300      	movs	r3, #0
 8002a54:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002a56:	693b      	ldr	r3, [r7, #16]
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	3728      	adds	r7, #40	; 0x28
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}

08002a60 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b084      	sub	sp, #16
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002a68:	f3ef 8305 	mrs	r3, IPSR
 8002a6c:	60bb      	str	r3, [r7, #8]
  return(result);
 8002a6e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d003      	beq.n	8002a7c <osDelay+0x1c>
    stat = osErrorISR;
 8002a74:	f06f 0305 	mvn.w	r3, #5
 8002a78:	60fb      	str	r3, [r7, #12]
 8002a7a:	e007      	b.n	8002a8c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d002      	beq.n	8002a8c <osDelay+0x2c>
      vTaskDelay(ticks);
 8002a86:	6878      	ldr	r0, [r7, #4]
 8002a88:	f000 ff7c 	bl	8003984 <vTaskDelay>
    }
  }

  return (stat);
 8002a8c:	68fb      	ldr	r3, [r7, #12]
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	3710      	adds	r7, #16
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}
	...

08002a98 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002a98:	b480      	push	{r7}
 8002a9a:	b085      	sub	sp, #20
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	60f8      	str	r0, [r7, #12]
 8002aa0:	60b9      	str	r1, [r7, #8]
 8002aa2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	4a07      	ldr	r2, [pc, #28]	; (8002ac4 <vApplicationGetIdleTaskMemory+0x2c>)
 8002aa8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	4a06      	ldr	r2, [pc, #24]	; (8002ac8 <vApplicationGetIdleTaskMemory+0x30>)
 8002aae:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2280      	movs	r2, #128	; 0x80
 8002ab4:	601a      	str	r2, [r3, #0]
}
 8002ab6:	bf00      	nop
 8002ab8:	3714      	adds	r7, #20
 8002aba:	46bd      	mov	sp, r7
 8002abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac0:	4770      	bx	lr
 8002ac2:	bf00      	nop
 8002ac4:	200000cc 	.word	0x200000cc
 8002ac8:	20000128 	.word	0x20000128

08002acc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002acc:	b480      	push	{r7}
 8002ace:	b085      	sub	sp, #20
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	60f8      	str	r0, [r7, #12]
 8002ad4:	60b9      	str	r1, [r7, #8]
 8002ad6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	4a07      	ldr	r2, [pc, #28]	; (8002af8 <vApplicationGetTimerTaskMemory+0x2c>)
 8002adc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	4a06      	ldr	r2, [pc, #24]	; (8002afc <vApplicationGetTimerTaskMemory+0x30>)
 8002ae2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002aea:	601a      	str	r2, [r3, #0]
}
 8002aec:	bf00      	nop
 8002aee:	3714      	adds	r7, #20
 8002af0:	46bd      	mov	sp, r7
 8002af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af6:	4770      	bx	lr
 8002af8:	20000328 	.word	0x20000328
 8002afc:	20000384 	.word	0x20000384

08002b00 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002b00:	b480      	push	{r7}
 8002b02:	b083      	sub	sp, #12
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	f103 0208 	add.w	r2, r3, #8
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	f04f 32ff 	mov.w	r2, #4294967295
 8002b18:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	f103 0208 	add.w	r2, r3, #8
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	f103 0208 	add.w	r2, r3, #8
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2200      	movs	r2, #0
 8002b32:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002b34:	bf00      	nop
 8002b36:	370c      	adds	r7, #12
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3e:	4770      	bx	lr

08002b40 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002b40:	b480      	push	{r7}
 8002b42:	b083      	sub	sp, #12
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002b4e:	bf00      	nop
 8002b50:	370c      	adds	r7, #12
 8002b52:	46bd      	mov	sp, r7
 8002b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b58:	4770      	bx	lr

08002b5a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002b5a:	b480      	push	{r7}
 8002b5c:	b085      	sub	sp, #20
 8002b5e:	af00      	add	r7, sp, #0
 8002b60:	6078      	str	r0, [r7, #4]
 8002b62:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	68fa      	ldr	r2, [r7, #12]
 8002b6e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	689a      	ldr	r2, [r3, #8]
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	689b      	ldr	r3, [r3, #8]
 8002b7c:	683a      	ldr	r2, [r7, #0]
 8002b7e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	683a      	ldr	r2, [r7, #0]
 8002b84:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	687a      	ldr	r2, [r7, #4]
 8002b8a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	1c5a      	adds	r2, r3, #1
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	601a      	str	r2, [r3, #0]
}
 8002b96:	bf00      	nop
 8002b98:	3714      	adds	r7, #20
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba0:	4770      	bx	lr

08002ba2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002ba2:	b480      	push	{r7}
 8002ba4:	b085      	sub	sp, #20
 8002ba6:	af00      	add	r7, sp, #0
 8002ba8:	6078      	str	r0, [r7, #4]
 8002baa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bb8:	d103      	bne.n	8002bc2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	691b      	ldr	r3, [r3, #16]
 8002bbe:	60fb      	str	r3, [r7, #12]
 8002bc0:	e00c      	b.n	8002bdc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	3308      	adds	r3, #8
 8002bc6:	60fb      	str	r3, [r7, #12]
 8002bc8:	e002      	b.n	8002bd0 <vListInsert+0x2e>
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	60fb      	str	r3, [r7, #12]
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	68ba      	ldr	r2, [r7, #8]
 8002bd8:	429a      	cmp	r2, r3
 8002bda:	d2f6      	bcs.n	8002bca <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	685a      	ldr	r2, [r3, #4]
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	683a      	ldr	r2, [r7, #0]
 8002bea:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	68fa      	ldr	r2, [r7, #12]
 8002bf0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	683a      	ldr	r2, [r7, #0]
 8002bf6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	687a      	ldr	r2, [r7, #4]
 8002bfc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	1c5a      	adds	r2, r3, #1
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	601a      	str	r2, [r3, #0]
}
 8002c08:	bf00      	nop
 8002c0a:	3714      	adds	r7, #20
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c12:	4770      	bx	lr

08002c14 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002c14:	b480      	push	{r7}
 8002c16:	b085      	sub	sp, #20
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	691b      	ldr	r3, [r3, #16]
 8002c20:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	687a      	ldr	r2, [r7, #4]
 8002c28:	6892      	ldr	r2, [r2, #8]
 8002c2a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	689b      	ldr	r3, [r3, #8]
 8002c30:	687a      	ldr	r2, [r7, #4]
 8002c32:	6852      	ldr	r2, [r2, #4]
 8002c34:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	687a      	ldr	r2, [r7, #4]
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	d103      	bne.n	8002c48 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	689a      	ldr	r2, [r3, #8]
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	1e5a      	subs	r2, r3, #1
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	3714      	adds	r7, #20
 8002c60:	46bd      	mov	sp, r7
 8002c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c66:	4770      	bx	lr

08002c68 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b084      	sub	sp, #16
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
 8002c70:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d10a      	bne.n	8002c92 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002c7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c80:	f383 8811 	msr	BASEPRI, r3
 8002c84:	f3bf 8f6f 	isb	sy
 8002c88:	f3bf 8f4f 	dsb	sy
 8002c8c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002c8e:	bf00      	nop
 8002c90:	e7fe      	b.n	8002c90 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002c92:	f002 f84f 	bl	8004d34 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681a      	ldr	r2, [r3, #0]
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c9e:	68f9      	ldr	r1, [r7, #12]
 8002ca0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002ca2:	fb01 f303 	mul.w	r3, r1, r3
 8002ca6:	441a      	add	r2, r3
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681a      	ldr	r2, [r3, #0]
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681a      	ldr	r2, [r3, #0]
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cc2:	3b01      	subs	r3, #1
 8002cc4:	68f9      	ldr	r1, [r7, #12]
 8002cc6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002cc8:	fb01 f303 	mul.w	r3, r1, r3
 8002ccc:	441a      	add	r2, r3
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	22ff      	movs	r2, #255	; 0xff
 8002cd6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	22ff      	movs	r2, #255	; 0xff
 8002cde:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d114      	bne.n	8002d12 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	691b      	ldr	r3, [r3, #16]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d01a      	beq.n	8002d26 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	3310      	adds	r3, #16
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f001 f903 	bl	8003f00 <xTaskRemoveFromEventList>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d012      	beq.n	8002d26 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002d00:	4b0c      	ldr	r3, [pc, #48]	; (8002d34 <xQueueGenericReset+0xcc>)
 8002d02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d06:	601a      	str	r2, [r3, #0]
 8002d08:	f3bf 8f4f 	dsb	sy
 8002d0c:	f3bf 8f6f 	isb	sy
 8002d10:	e009      	b.n	8002d26 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	3310      	adds	r3, #16
 8002d16:	4618      	mov	r0, r3
 8002d18:	f7ff fef2 	bl	8002b00 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	3324      	adds	r3, #36	; 0x24
 8002d20:	4618      	mov	r0, r3
 8002d22:	f7ff feed 	bl	8002b00 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002d26:	f002 f835 	bl	8004d94 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002d2a:	2301      	movs	r3, #1
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	3710      	adds	r7, #16
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}
 8002d34:	e000ed04 	.word	0xe000ed04

08002d38 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b08e      	sub	sp, #56	; 0x38
 8002d3c:	af02      	add	r7, sp, #8
 8002d3e:	60f8      	str	r0, [r7, #12]
 8002d40:	60b9      	str	r1, [r7, #8]
 8002d42:	607a      	str	r2, [r7, #4]
 8002d44:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d10a      	bne.n	8002d62 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002d4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d50:	f383 8811 	msr	BASEPRI, r3
 8002d54:	f3bf 8f6f 	isb	sy
 8002d58:	f3bf 8f4f 	dsb	sy
 8002d5c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002d5e:	bf00      	nop
 8002d60:	e7fe      	b.n	8002d60 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d10a      	bne.n	8002d7e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002d68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d6c:	f383 8811 	msr	BASEPRI, r3
 8002d70:	f3bf 8f6f 	isb	sy
 8002d74:	f3bf 8f4f 	dsb	sy
 8002d78:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002d7a:	bf00      	nop
 8002d7c:	e7fe      	b.n	8002d7c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d002      	beq.n	8002d8a <xQueueGenericCreateStatic+0x52>
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d001      	beq.n	8002d8e <xQueueGenericCreateStatic+0x56>
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e000      	b.n	8002d90 <xQueueGenericCreateStatic+0x58>
 8002d8e:	2300      	movs	r3, #0
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d10a      	bne.n	8002daa <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002d94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d98:	f383 8811 	msr	BASEPRI, r3
 8002d9c:	f3bf 8f6f 	isb	sy
 8002da0:	f3bf 8f4f 	dsb	sy
 8002da4:	623b      	str	r3, [r7, #32]
}
 8002da6:	bf00      	nop
 8002da8:	e7fe      	b.n	8002da8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d102      	bne.n	8002db6 <xQueueGenericCreateStatic+0x7e>
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d101      	bne.n	8002dba <xQueueGenericCreateStatic+0x82>
 8002db6:	2301      	movs	r3, #1
 8002db8:	e000      	b.n	8002dbc <xQueueGenericCreateStatic+0x84>
 8002dba:	2300      	movs	r3, #0
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d10a      	bne.n	8002dd6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dc4:	f383 8811 	msr	BASEPRI, r3
 8002dc8:	f3bf 8f6f 	isb	sy
 8002dcc:	f3bf 8f4f 	dsb	sy
 8002dd0:	61fb      	str	r3, [r7, #28]
}
 8002dd2:	bf00      	nop
 8002dd4:	e7fe      	b.n	8002dd4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002dd6:	2350      	movs	r3, #80	; 0x50
 8002dd8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	2b50      	cmp	r3, #80	; 0x50
 8002dde:	d00a      	beq.n	8002df6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002de4:	f383 8811 	msr	BASEPRI, r3
 8002de8:	f3bf 8f6f 	isb	sy
 8002dec:	f3bf 8f4f 	dsb	sy
 8002df0:	61bb      	str	r3, [r7, #24]
}
 8002df2:	bf00      	nop
 8002df4:	e7fe      	b.n	8002df4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002df6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002dfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d00d      	beq.n	8002e1e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002e02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e04:	2201      	movs	r2, #1
 8002e06:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002e0a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002e0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e10:	9300      	str	r3, [sp, #0]
 8002e12:	4613      	mov	r3, r2
 8002e14:	687a      	ldr	r2, [r7, #4]
 8002e16:	68b9      	ldr	r1, [r7, #8]
 8002e18:	68f8      	ldr	r0, [r7, #12]
 8002e1a:	f000 f805 	bl	8002e28 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002e1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002e20:	4618      	mov	r0, r3
 8002e22:	3730      	adds	r7, #48	; 0x30
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}

08002e28 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b084      	sub	sp, #16
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	60f8      	str	r0, [r7, #12]
 8002e30:	60b9      	str	r1, [r7, #8]
 8002e32:	607a      	str	r2, [r7, #4]
 8002e34:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d103      	bne.n	8002e44 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002e3c:	69bb      	ldr	r3, [r7, #24]
 8002e3e:	69ba      	ldr	r2, [r7, #24]
 8002e40:	601a      	str	r2, [r3, #0]
 8002e42:	e002      	b.n	8002e4a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002e44:	69bb      	ldr	r3, [r7, #24]
 8002e46:	687a      	ldr	r2, [r7, #4]
 8002e48:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002e4a:	69bb      	ldr	r3, [r7, #24]
 8002e4c:	68fa      	ldr	r2, [r7, #12]
 8002e4e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002e50:	69bb      	ldr	r3, [r7, #24]
 8002e52:	68ba      	ldr	r2, [r7, #8]
 8002e54:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002e56:	2101      	movs	r1, #1
 8002e58:	69b8      	ldr	r0, [r7, #24]
 8002e5a:	f7ff ff05 	bl	8002c68 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002e5e:	69bb      	ldr	r3, [r7, #24]
 8002e60:	78fa      	ldrb	r2, [r7, #3]
 8002e62:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002e66:	bf00      	nop
 8002e68:	3710      	adds	r7, #16
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}
	...

08002e70 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b08e      	sub	sp, #56	; 0x38
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	60f8      	str	r0, [r7, #12]
 8002e78:	60b9      	str	r1, [r7, #8]
 8002e7a:	607a      	str	r2, [r7, #4]
 8002e7c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002e86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d10a      	bne.n	8002ea2 <xQueueGenericSend+0x32>
	__asm volatile
 8002e8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e90:	f383 8811 	msr	BASEPRI, r3
 8002e94:	f3bf 8f6f 	isb	sy
 8002e98:	f3bf 8f4f 	dsb	sy
 8002e9c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002e9e:	bf00      	nop
 8002ea0:	e7fe      	b.n	8002ea0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d103      	bne.n	8002eb0 <xQueueGenericSend+0x40>
 8002ea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d101      	bne.n	8002eb4 <xQueueGenericSend+0x44>
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	e000      	b.n	8002eb6 <xQueueGenericSend+0x46>
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d10a      	bne.n	8002ed0 <xQueueGenericSend+0x60>
	__asm volatile
 8002eba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ebe:	f383 8811 	msr	BASEPRI, r3
 8002ec2:	f3bf 8f6f 	isb	sy
 8002ec6:	f3bf 8f4f 	dsb	sy
 8002eca:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002ecc:	bf00      	nop
 8002ece:	e7fe      	b.n	8002ece <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	2b02      	cmp	r3, #2
 8002ed4:	d103      	bne.n	8002ede <xQueueGenericSend+0x6e>
 8002ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ed8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eda:	2b01      	cmp	r3, #1
 8002edc:	d101      	bne.n	8002ee2 <xQueueGenericSend+0x72>
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e000      	b.n	8002ee4 <xQueueGenericSend+0x74>
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d10a      	bne.n	8002efe <xQueueGenericSend+0x8e>
	__asm volatile
 8002ee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eec:	f383 8811 	msr	BASEPRI, r3
 8002ef0:	f3bf 8f6f 	isb	sy
 8002ef4:	f3bf 8f4f 	dsb	sy
 8002ef8:	623b      	str	r3, [r7, #32]
}
 8002efa:	bf00      	nop
 8002efc:	e7fe      	b.n	8002efc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002efe:	f001 f9bd 	bl	800427c <xTaskGetSchedulerState>
 8002f02:	4603      	mov	r3, r0
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d102      	bne.n	8002f0e <xQueueGenericSend+0x9e>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d101      	bne.n	8002f12 <xQueueGenericSend+0xa2>
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e000      	b.n	8002f14 <xQueueGenericSend+0xa4>
 8002f12:	2300      	movs	r3, #0
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d10a      	bne.n	8002f2e <xQueueGenericSend+0xbe>
	__asm volatile
 8002f18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f1c:	f383 8811 	msr	BASEPRI, r3
 8002f20:	f3bf 8f6f 	isb	sy
 8002f24:	f3bf 8f4f 	dsb	sy
 8002f28:	61fb      	str	r3, [r7, #28]
}
 8002f2a:	bf00      	nop
 8002f2c:	e7fe      	b.n	8002f2c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002f2e:	f001 ff01 	bl	8004d34 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f3a:	429a      	cmp	r2, r3
 8002f3c:	d302      	bcc.n	8002f44 <xQueueGenericSend+0xd4>
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	2b02      	cmp	r3, #2
 8002f42:	d129      	bne.n	8002f98 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002f44:	683a      	ldr	r2, [r7, #0]
 8002f46:	68b9      	ldr	r1, [r7, #8]
 8002f48:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002f4a:	f000 fa0b 	bl	8003364 <prvCopyDataToQueue>
 8002f4e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d010      	beq.n	8002f7a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f5a:	3324      	adds	r3, #36	; 0x24
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f000 ffcf 	bl	8003f00 <xTaskRemoveFromEventList>
 8002f62:	4603      	mov	r3, r0
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d013      	beq.n	8002f90 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002f68:	4b3f      	ldr	r3, [pc, #252]	; (8003068 <xQueueGenericSend+0x1f8>)
 8002f6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f6e:	601a      	str	r2, [r3, #0]
 8002f70:	f3bf 8f4f 	dsb	sy
 8002f74:	f3bf 8f6f 	isb	sy
 8002f78:	e00a      	b.n	8002f90 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002f7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d007      	beq.n	8002f90 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002f80:	4b39      	ldr	r3, [pc, #228]	; (8003068 <xQueueGenericSend+0x1f8>)
 8002f82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f86:	601a      	str	r2, [r3, #0]
 8002f88:	f3bf 8f4f 	dsb	sy
 8002f8c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002f90:	f001 ff00 	bl	8004d94 <vPortExitCritical>
				return pdPASS;
 8002f94:	2301      	movs	r3, #1
 8002f96:	e063      	b.n	8003060 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d103      	bne.n	8002fa6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002f9e:	f001 fef9 	bl	8004d94 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	e05c      	b.n	8003060 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002fa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d106      	bne.n	8002fba <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002fac:	f107 0314 	add.w	r3, r7, #20
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	f001 f809 	bl	8003fc8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002fba:	f001 feeb 	bl	8004d94 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002fbe:	f000 fd7b 	bl	8003ab8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002fc2:	f001 feb7 	bl	8004d34 <vPortEnterCritical>
 8002fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fc8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002fcc:	b25b      	sxtb	r3, r3
 8002fce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fd2:	d103      	bne.n	8002fdc <xQueueGenericSend+0x16c>
 8002fd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fde:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002fe2:	b25b      	sxtb	r3, r3
 8002fe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fe8:	d103      	bne.n	8002ff2 <xQueueGenericSend+0x182>
 8002fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fec:	2200      	movs	r2, #0
 8002fee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002ff2:	f001 fecf 	bl	8004d94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002ff6:	1d3a      	adds	r2, r7, #4
 8002ff8:	f107 0314 	add.w	r3, r7, #20
 8002ffc:	4611      	mov	r1, r2
 8002ffe:	4618      	mov	r0, r3
 8003000:	f000 fff8 	bl	8003ff4 <xTaskCheckForTimeOut>
 8003004:	4603      	mov	r3, r0
 8003006:	2b00      	cmp	r3, #0
 8003008:	d124      	bne.n	8003054 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800300a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800300c:	f000 faa2 	bl	8003554 <prvIsQueueFull>
 8003010:	4603      	mov	r3, r0
 8003012:	2b00      	cmp	r3, #0
 8003014:	d018      	beq.n	8003048 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003018:	3310      	adds	r3, #16
 800301a:	687a      	ldr	r2, [r7, #4]
 800301c:	4611      	mov	r1, r2
 800301e:	4618      	mov	r0, r3
 8003020:	f000 ff1e 	bl	8003e60 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003024:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003026:	f000 fa2d 	bl	8003484 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800302a:	f000 fd53 	bl	8003ad4 <xTaskResumeAll>
 800302e:	4603      	mov	r3, r0
 8003030:	2b00      	cmp	r3, #0
 8003032:	f47f af7c 	bne.w	8002f2e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003036:	4b0c      	ldr	r3, [pc, #48]	; (8003068 <xQueueGenericSend+0x1f8>)
 8003038:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800303c:	601a      	str	r2, [r3, #0]
 800303e:	f3bf 8f4f 	dsb	sy
 8003042:	f3bf 8f6f 	isb	sy
 8003046:	e772      	b.n	8002f2e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003048:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800304a:	f000 fa1b 	bl	8003484 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800304e:	f000 fd41 	bl	8003ad4 <xTaskResumeAll>
 8003052:	e76c      	b.n	8002f2e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003054:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003056:	f000 fa15 	bl	8003484 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800305a:	f000 fd3b 	bl	8003ad4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800305e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003060:	4618      	mov	r0, r3
 8003062:	3738      	adds	r7, #56	; 0x38
 8003064:	46bd      	mov	sp, r7
 8003066:	bd80      	pop	{r7, pc}
 8003068:	e000ed04 	.word	0xe000ed04

0800306c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b090      	sub	sp, #64	; 0x40
 8003070:	af00      	add	r7, sp, #0
 8003072:	60f8      	str	r0, [r7, #12]
 8003074:	60b9      	str	r1, [r7, #8]
 8003076:	607a      	str	r2, [r7, #4]
 8003078:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800307e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003080:	2b00      	cmp	r3, #0
 8003082:	d10a      	bne.n	800309a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003084:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003088:	f383 8811 	msr	BASEPRI, r3
 800308c:	f3bf 8f6f 	isb	sy
 8003090:	f3bf 8f4f 	dsb	sy
 8003094:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003096:	bf00      	nop
 8003098:	e7fe      	b.n	8003098 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800309a:	68bb      	ldr	r3, [r7, #8]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d103      	bne.n	80030a8 <xQueueGenericSendFromISR+0x3c>
 80030a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d101      	bne.n	80030ac <xQueueGenericSendFromISR+0x40>
 80030a8:	2301      	movs	r3, #1
 80030aa:	e000      	b.n	80030ae <xQueueGenericSendFromISR+0x42>
 80030ac:	2300      	movs	r3, #0
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d10a      	bne.n	80030c8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80030b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030b6:	f383 8811 	msr	BASEPRI, r3
 80030ba:	f3bf 8f6f 	isb	sy
 80030be:	f3bf 8f4f 	dsb	sy
 80030c2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80030c4:	bf00      	nop
 80030c6:	e7fe      	b.n	80030c6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	2b02      	cmp	r3, #2
 80030cc:	d103      	bne.n	80030d6 <xQueueGenericSendFromISR+0x6a>
 80030ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030d2:	2b01      	cmp	r3, #1
 80030d4:	d101      	bne.n	80030da <xQueueGenericSendFromISR+0x6e>
 80030d6:	2301      	movs	r3, #1
 80030d8:	e000      	b.n	80030dc <xQueueGenericSendFromISR+0x70>
 80030da:	2300      	movs	r3, #0
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d10a      	bne.n	80030f6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80030e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030e4:	f383 8811 	msr	BASEPRI, r3
 80030e8:	f3bf 8f6f 	isb	sy
 80030ec:	f3bf 8f4f 	dsb	sy
 80030f0:	623b      	str	r3, [r7, #32]
}
 80030f2:	bf00      	nop
 80030f4:	e7fe      	b.n	80030f4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80030f6:	f001 feff 	bl	8004ef8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80030fa:	f3ef 8211 	mrs	r2, BASEPRI
 80030fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003102:	f383 8811 	msr	BASEPRI, r3
 8003106:	f3bf 8f6f 	isb	sy
 800310a:	f3bf 8f4f 	dsb	sy
 800310e:	61fa      	str	r2, [r7, #28]
 8003110:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003112:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003114:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003116:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003118:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800311a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800311c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800311e:	429a      	cmp	r2, r3
 8003120:	d302      	bcc.n	8003128 <xQueueGenericSendFromISR+0xbc>
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	2b02      	cmp	r3, #2
 8003126:	d12f      	bne.n	8003188 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003128:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800312a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800312e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003132:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003134:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003136:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003138:	683a      	ldr	r2, [r7, #0]
 800313a:	68b9      	ldr	r1, [r7, #8]
 800313c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800313e:	f000 f911 	bl	8003364 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003142:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003146:	f1b3 3fff 	cmp.w	r3, #4294967295
 800314a:	d112      	bne.n	8003172 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800314c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800314e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003150:	2b00      	cmp	r3, #0
 8003152:	d016      	beq.n	8003182 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003154:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003156:	3324      	adds	r3, #36	; 0x24
 8003158:	4618      	mov	r0, r3
 800315a:	f000 fed1 	bl	8003f00 <xTaskRemoveFromEventList>
 800315e:	4603      	mov	r3, r0
 8003160:	2b00      	cmp	r3, #0
 8003162:	d00e      	beq.n	8003182 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d00b      	beq.n	8003182 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2201      	movs	r2, #1
 800316e:	601a      	str	r2, [r3, #0]
 8003170:	e007      	b.n	8003182 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003172:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003176:	3301      	adds	r3, #1
 8003178:	b2db      	uxtb	r3, r3
 800317a:	b25a      	sxtb	r2, r3
 800317c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800317e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003182:	2301      	movs	r3, #1
 8003184:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8003186:	e001      	b.n	800318c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003188:	2300      	movs	r3, #0
 800318a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800318c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800318e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003190:	697b      	ldr	r3, [r7, #20]
 8003192:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003196:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003198:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800319a:	4618      	mov	r0, r3
 800319c:	3740      	adds	r7, #64	; 0x40
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}
	...

080031a4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b08c      	sub	sp, #48	; 0x30
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	60f8      	str	r0, [r7, #12]
 80031ac:	60b9      	str	r1, [r7, #8]
 80031ae:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80031b0:	2300      	movs	r3, #0
 80031b2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80031b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d10a      	bne.n	80031d4 <xQueueReceive+0x30>
	__asm volatile
 80031be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031c2:	f383 8811 	msr	BASEPRI, r3
 80031c6:	f3bf 8f6f 	isb	sy
 80031ca:	f3bf 8f4f 	dsb	sy
 80031ce:	623b      	str	r3, [r7, #32]
}
 80031d0:	bf00      	nop
 80031d2:	e7fe      	b.n	80031d2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d103      	bne.n	80031e2 <xQueueReceive+0x3e>
 80031da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d101      	bne.n	80031e6 <xQueueReceive+0x42>
 80031e2:	2301      	movs	r3, #1
 80031e4:	e000      	b.n	80031e8 <xQueueReceive+0x44>
 80031e6:	2300      	movs	r3, #0
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d10a      	bne.n	8003202 <xQueueReceive+0x5e>
	__asm volatile
 80031ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031f0:	f383 8811 	msr	BASEPRI, r3
 80031f4:	f3bf 8f6f 	isb	sy
 80031f8:	f3bf 8f4f 	dsb	sy
 80031fc:	61fb      	str	r3, [r7, #28]
}
 80031fe:	bf00      	nop
 8003200:	e7fe      	b.n	8003200 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003202:	f001 f83b 	bl	800427c <xTaskGetSchedulerState>
 8003206:	4603      	mov	r3, r0
 8003208:	2b00      	cmp	r3, #0
 800320a:	d102      	bne.n	8003212 <xQueueReceive+0x6e>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d101      	bne.n	8003216 <xQueueReceive+0x72>
 8003212:	2301      	movs	r3, #1
 8003214:	e000      	b.n	8003218 <xQueueReceive+0x74>
 8003216:	2300      	movs	r3, #0
 8003218:	2b00      	cmp	r3, #0
 800321a:	d10a      	bne.n	8003232 <xQueueReceive+0x8e>
	__asm volatile
 800321c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003220:	f383 8811 	msr	BASEPRI, r3
 8003224:	f3bf 8f6f 	isb	sy
 8003228:	f3bf 8f4f 	dsb	sy
 800322c:	61bb      	str	r3, [r7, #24]
}
 800322e:	bf00      	nop
 8003230:	e7fe      	b.n	8003230 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003232:	f001 fd7f 	bl	8004d34 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003238:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800323a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800323c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800323e:	2b00      	cmp	r3, #0
 8003240:	d01f      	beq.n	8003282 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003242:	68b9      	ldr	r1, [r7, #8]
 8003244:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003246:	f000 f8f7 	bl	8003438 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800324a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800324c:	1e5a      	subs	r2, r3, #1
 800324e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003250:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003254:	691b      	ldr	r3, [r3, #16]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d00f      	beq.n	800327a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800325a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800325c:	3310      	adds	r3, #16
 800325e:	4618      	mov	r0, r3
 8003260:	f000 fe4e 	bl	8003f00 <xTaskRemoveFromEventList>
 8003264:	4603      	mov	r3, r0
 8003266:	2b00      	cmp	r3, #0
 8003268:	d007      	beq.n	800327a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800326a:	4b3d      	ldr	r3, [pc, #244]	; (8003360 <xQueueReceive+0x1bc>)
 800326c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003270:	601a      	str	r2, [r3, #0]
 8003272:	f3bf 8f4f 	dsb	sy
 8003276:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800327a:	f001 fd8b 	bl	8004d94 <vPortExitCritical>
				return pdPASS;
 800327e:	2301      	movs	r3, #1
 8003280:	e069      	b.n	8003356 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d103      	bne.n	8003290 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003288:	f001 fd84 	bl	8004d94 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800328c:	2300      	movs	r3, #0
 800328e:	e062      	b.n	8003356 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003292:	2b00      	cmp	r3, #0
 8003294:	d106      	bne.n	80032a4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003296:	f107 0310 	add.w	r3, r7, #16
 800329a:	4618      	mov	r0, r3
 800329c:	f000 fe94 	bl	8003fc8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80032a0:	2301      	movs	r3, #1
 80032a2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80032a4:	f001 fd76 	bl	8004d94 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80032a8:	f000 fc06 	bl	8003ab8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80032ac:	f001 fd42 	bl	8004d34 <vPortEnterCritical>
 80032b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032b2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80032b6:	b25b      	sxtb	r3, r3
 80032b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032bc:	d103      	bne.n	80032c6 <xQueueReceive+0x122>
 80032be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032c0:	2200      	movs	r2, #0
 80032c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80032c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80032cc:	b25b      	sxtb	r3, r3
 80032ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032d2:	d103      	bne.n	80032dc <xQueueReceive+0x138>
 80032d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032d6:	2200      	movs	r2, #0
 80032d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80032dc:	f001 fd5a 	bl	8004d94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80032e0:	1d3a      	adds	r2, r7, #4
 80032e2:	f107 0310 	add.w	r3, r7, #16
 80032e6:	4611      	mov	r1, r2
 80032e8:	4618      	mov	r0, r3
 80032ea:	f000 fe83 	bl	8003ff4 <xTaskCheckForTimeOut>
 80032ee:	4603      	mov	r3, r0
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d123      	bne.n	800333c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80032f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80032f6:	f000 f917 	bl	8003528 <prvIsQueueEmpty>
 80032fa:	4603      	mov	r3, r0
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d017      	beq.n	8003330 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003302:	3324      	adds	r3, #36	; 0x24
 8003304:	687a      	ldr	r2, [r7, #4]
 8003306:	4611      	mov	r1, r2
 8003308:	4618      	mov	r0, r3
 800330a:	f000 fda9 	bl	8003e60 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800330e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003310:	f000 f8b8 	bl	8003484 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003314:	f000 fbde 	bl	8003ad4 <xTaskResumeAll>
 8003318:	4603      	mov	r3, r0
 800331a:	2b00      	cmp	r3, #0
 800331c:	d189      	bne.n	8003232 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800331e:	4b10      	ldr	r3, [pc, #64]	; (8003360 <xQueueReceive+0x1bc>)
 8003320:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003324:	601a      	str	r2, [r3, #0]
 8003326:	f3bf 8f4f 	dsb	sy
 800332a:	f3bf 8f6f 	isb	sy
 800332e:	e780      	b.n	8003232 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003330:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003332:	f000 f8a7 	bl	8003484 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003336:	f000 fbcd 	bl	8003ad4 <xTaskResumeAll>
 800333a:	e77a      	b.n	8003232 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800333c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800333e:	f000 f8a1 	bl	8003484 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003342:	f000 fbc7 	bl	8003ad4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003346:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003348:	f000 f8ee 	bl	8003528 <prvIsQueueEmpty>
 800334c:	4603      	mov	r3, r0
 800334e:	2b00      	cmp	r3, #0
 8003350:	f43f af6f 	beq.w	8003232 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003354:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003356:	4618      	mov	r0, r3
 8003358:	3730      	adds	r7, #48	; 0x30
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}
 800335e:	bf00      	nop
 8003360:	e000ed04 	.word	0xe000ed04

08003364 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b086      	sub	sp, #24
 8003368:	af00      	add	r7, sp, #0
 800336a:	60f8      	str	r0, [r7, #12]
 800336c:	60b9      	str	r1, [r7, #8]
 800336e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003370:	2300      	movs	r3, #0
 8003372:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003378:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800337e:	2b00      	cmp	r3, #0
 8003380:	d10d      	bne.n	800339e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d14d      	bne.n	8003426 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	689b      	ldr	r3, [r3, #8]
 800338e:	4618      	mov	r0, r3
 8003390:	f000 ff92 	bl	80042b8 <xTaskPriorityDisinherit>
 8003394:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	2200      	movs	r2, #0
 800339a:	609a      	str	r2, [r3, #8]
 800339c:	e043      	b.n	8003426 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d119      	bne.n	80033d8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	6858      	ldr	r0, [r3, #4]
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ac:	461a      	mov	r2, r3
 80033ae:	68b9      	ldr	r1, [r7, #8]
 80033b0:	f001 fff8 	bl	80053a4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	685a      	ldr	r2, [r3, #4]
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033bc:	441a      	add	r2, r3
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	685a      	ldr	r2, [r3, #4]
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	429a      	cmp	r2, r3
 80033cc:	d32b      	bcc.n	8003426 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681a      	ldr	r2, [r3, #0]
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	605a      	str	r2, [r3, #4]
 80033d6:	e026      	b.n	8003426 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	68d8      	ldr	r0, [r3, #12]
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e0:	461a      	mov	r2, r3
 80033e2:	68b9      	ldr	r1, [r7, #8]
 80033e4:	f001 ffde 	bl	80053a4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	68da      	ldr	r2, [r3, #12]
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f0:	425b      	negs	r3, r3
 80033f2:	441a      	add	r2, r3
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	68da      	ldr	r2, [r3, #12]
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	429a      	cmp	r2, r3
 8003402:	d207      	bcs.n	8003414 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	689a      	ldr	r2, [r3, #8]
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800340c:	425b      	negs	r3, r3
 800340e:	441a      	add	r2, r3
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2b02      	cmp	r3, #2
 8003418:	d105      	bne.n	8003426 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d002      	beq.n	8003426 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	3b01      	subs	r3, #1
 8003424:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	1c5a      	adds	r2, r3, #1
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800342e:	697b      	ldr	r3, [r7, #20]
}
 8003430:	4618      	mov	r0, r3
 8003432:	3718      	adds	r7, #24
 8003434:	46bd      	mov	sp, r7
 8003436:	bd80      	pop	{r7, pc}

08003438 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b082      	sub	sp, #8
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
 8003440:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003446:	2b00      	cmp	r3, #0
 8003448:	d018      	beq.n	800347c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	68da      	ldr	r2, [r3, #12]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003452:	441a      	add	r2, r3
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	68da      	ldr	r2, [r3, #12]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	429a      	cmp	r2, r3
 8003462:	d303      	bcc.n	800346c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681a      	ldr	r2, [r3, #0]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	68d9      	ldr	r1, [r3, #12]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003474:	461a      	mov	r2, r3
 8003476:	6838      	ldr	r0, [r7, #0]
 8003478:	f001 ff94 	bl	80053a4 <memcpy>
	}
}
 800347c:	bf00      	nop
 800347e:	3708      	adds	r7, #8
 8003480:	46bd      	mov	sp, r7
 8003482:	bd80      	pop	{r7, pc}

08003484 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b084      	sub	sp, #16
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800348c:	f001 fc52 	bl	8004d34 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003496:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003498:	e011      	b.n	80034be <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d012      	beq.n	80034c8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	3324      	adds	r3, #36	; 0x24
 80034a6:	4618      	mov	r0, r3
 80034a8:	f000 fd2a 	bl	8003f00 <xTaskRemoveFromEventList>
 80034ac:	4603      	mov	r3, r0
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d001      	beq.n	80034b6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80034b2:	f000 fe01 	bl	80040b8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80034b6:	7bfb      	ldrb	r3, [r7, #15]
 80034b8:	3b01      	subs	r3, #1
 80034ba:	b2db      	uxtb	r3, r3
 80034bc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80034be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	dce9      	bgt.n	800349a <prvUnlockQueue+0x16>
 80034c6:	e000      	b.n	80034ca <prvUnlockQueue+0x46>
					break;
 80034c8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	22ff      	movs	r2, #255	; 0xff
 80034ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80034d2:	f001 fc5f 	bl	8004d94 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80034d6:	f001 fc2d 	bl	8004d34 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80034e0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80034e2:	e011      	b.n	8003508 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	691b      	ldr	r3, [r3, #16]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d012      	beq.n	8003512 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	3310      	adds	r3, #16
 80034f0:	4618      	mov	r0, r3
 80034f2:	f000 fd05 	bl	8003f00 <xTaskRemoveFromEventList>
 80034f6:	4603      	mov	r3, r0
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d001      	beq.n	8003500 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80034fc:	f000 fddc 	bl	80040b8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003500:	7bbb      	ldrb	r3, [r7, #14]
 8003502:	3b01      	subs	r3, #1
 8003504:	b2db      	uxtb	r3, r3
 8003506:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003508:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800350c:	2b00      	cmp	r3, #0
 800350e:	dce9      	bgt.n	80034e4 <prvUnlockQueue+0x60>
 8003510:	e000      	b.n	8003514 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003512:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	22ff      	movs	r2, #255	; 0xff
 8003518:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800351c:	f001 fc3a 	bl	8004d94 <vPortExitCritical>
}
 8003520:	bf00      	nop
 8003522:	3710      	adds	r7, #16
 8003524:	46bd      	mov	sp, r7
 8003526:	bd80      	pop	{r7, pc}

08003528 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b084      	sub	sp, #16
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003530:	f001 fc00 	bl	8004d34 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003538:	2b00      	cmp	r3, #0
 800353a:	d102      	bne.n	8003542 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800353c:	2301      	movs	r3, #1
 800353e:	60fb      	str	r3, [r7, #12]
 8003540:	e001      	b.n	8003546 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003542:	2300      	movs	r3, #0
 8003544:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003546:	f001 fc25 	bl	8004d94 <vPortExitCritical>

	return xReturn;
 800354a:	68fb      	ldr	r3, [r7, #12]
}
 800354c:	4618      	mov	r0, r3
 800354e:	3710      	adds	r7, #16
 8003550:	46bd      	mov	sp, r7
 8003552:	bd80      	pop	{r7, pc}

08003554 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b084      	sub	sp, #16
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800355c:	f001 fbea 	bl	8004d34 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003568:	429a      	cmp	r2, r3
 800356a:	d102      	bne.n	8003572 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800356c:	2301      	movs	r3, #1
 800356e:	60fb      	str	r3, [r7, #12]
 8003570:	e001      	b.n	8003576 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003572:	2300      	movs	r3, #0
 8003574:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003576:	f001 fc0d 	bl	8004d94 <vPortExitCritical>

	return xReturn;
 800357a:	68fb      	ldr	r3, [r7, #12]
}
 800357c:	4618      	mov	r0, r3
 800357e:	3710      	adds	r7, #16
 8003580:	46bd      	mov	sp, r7
 8003582:	bd80      	pop	{r7, pc}

08003584 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003584:	b480      	push	{r7}
 8003586:	b085      	sub	sp, #20
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
 800358c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800358e:	2300      	movs	r3, #0
 8003590:	60fb      	str	r3, [r7, #12]
 8003592:	e014      	b.n	80035be <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003594:	4a0f      	ldr	r2, [pc, #60]	; (80035d4 <vQueueAddToRegistry+0x50>)
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d10b      	bne.n	80035b8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80035a0:	490c      	ldr	r1, [pc, #48]	; (80035d4 <vQueueAddToRegistry+0x50>)
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	683a      	ldr	r2, [r7, #0]
 80035a6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80035aa:	4a0a      	ldr	r2, [pc, #40]	; (80035d4 <vQueueAddToRegistry+0x50>)
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	00db      	lsls	r3, r3, #3
 80035b0:	4413      	add	r3, r2
 80035b2:	687a      	ldr	r2, [r7, #4]
 80035b4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80035b6:	e006      	b.n	80035c6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	3301      	adds	r3, #1
 80035bc:	60fb      	str	r3, [r7, #12]
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	2b07      	cmp	r3, #7
 80035c2:	d9e7      	bls.n	8003594 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80035c4:	bf00      	nop
 80035c6:	bf00      	nop
 80035c8:	3714      	adds	r7, #20
 80035ca:	46bd      	mov	sp, r7
 80035cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d0:	4770      	bx	lr
 80035d2:	bf00      	nop
 80035d4:	20000784 	.word	0x20000784

080035d8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b086      	sub	sp, #24
 80035dc:	af00      	add	r7, sp, #0
 80035de:	60f8      	str	r0, [r7, #12]
 80035e0:	60b9      	str	r1, [r7, #8]
 80035e2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80035e8:	f001 fba4 	bl	8004d34 <vPortEnterCritical>
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80035f2:	b25b      	sxtb	r3, r3
 80035f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035f8:	d103      	bne.n	8003602 <vQueueWaitForMessageRestricted+0x2a>
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	2200      	movs	r2, #0
 80035fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003608:	b25b      	sxtb	r3, r3
 800360a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800360e:	d103      	bne.n	8003618 <vQueueWaitForMessageRestricted+0x40>
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	2200      	movs	r2, #0
 8003614:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003618:	f001 fbbc 	bl	8004d94 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003620:	2b00      	cmp	r3, #0
 8003622:	d106      	bne.n	8003632 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	3324      	adds	r3, #36	; 0x24
 8003628:	687a      	ldr	r2, [r7, #4]
 800362a:	68b9      	ldr	r1, [r7, #8]
 800362c:	4618      	mov	r0, r3
 800362e:	f000 fc3b 	bl	8003ea8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003632:	6978      	ldr	r0, [r7, #20]
 8003634:	f7ff ff26 	bl	8003484 <prvUnlockQueue>
	}
 8003638:	bf00      	nop
 800363a:	3718      	adds	r7, #24
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}

08003640 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003640:	b580      	push	{r7, lr}
 8003642:	b08e      	sub	sp, #56	; 0x38
 8003644:	af04      	add	r7, sp, #16
 8003646:	60f8      	str	r0, [r7, #12]
 8003648:	60b9      	str	r1, [r7, #8]
 800364a:	607a      	str	r2, [r7, #4]
 800364c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800364e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003650:	2b00      	cmp	r3, #0
 8003652:	d10a      	bne.n	800366a <xTaskCreateStatic+0x2a>
	__asm volatile
 8003654:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003658:	f383 8811 	msr	BASEPRI, r3
 800365c:	f3bf 8f6f 	isb	sy
 8003660:	f3bf 8f4f 	dsb	sy
 8003664:	623b      	str	r3, [r7, #32]
}
 8003666:	bf00      	nop
 8003668:	e7fe      	b.n	8003668 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800366a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800366c:	2b00      	cmp	r3, #0
 800366e:	d10a      	bne.n	8003686 <xTaskCreateStatic+0x46>
	__asm volatile
 8003670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003674:	f383 8811 	msr	BASEPRI, r3
 8003678:	f3bf 8f6f 	isb	sy
 800367c:	f3bf 8f4f 	dsb	sy
 8003680:	61fb      	str	r3, [r7, #28]
}
 8003682:	bf00      	nop
 8003684:	e7fe      	b.n	8003684 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003686:	235c      	movs	r3, #92	; 0x5c
 8003688:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	2b5c      	cmp	r3, #92	; 0x5c
 800368e:	d00a      	beq.n	80036a6 <xTaskCreateStatic+0x66>
	__asm volatile
 8003690:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003694:	f383 8811 	msr	BASEPRI, r3
 8003698:	f3bf 8f6f 	isb	sy
 800369c:	f3bf 8f4f 	dsb	sy
 80036a0:	61bb      	str	r3, [r7, #24]
}
 80036a2:	bf00      	nop
 80036a4:	e7fe      	b.n	80036a4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80036a6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80036a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d01e      	beq.n	80036ec <xTaskCreateStatic+0xac>
 80036ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d01b      	beq.n	80036ec <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80036b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036b6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80036b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80036bc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80036be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c0:	2202      	movs	r2, #2
 80036c2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80036c6:	2300      	movs	r3, #0
 80036c8:	9303      	str	r3, [sp, #12]
 80036ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036cc:	9302      	str	r3, [sp, #8]
 80036ce:	f107 0314 	add.w	r3, r7, #20
 80036d2:	9301      	str	r3, [sp, #4]
 80036d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036d6:	9300      	str	r3, [sp, #0]
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	687a      	ldr	r2, [r7, #4]
 80036dc:	68b9      	ldr	r1, [r7, #8]
 80036de:	68f8      	ldr	r0, [r7, #12]
 80036e0:	f000 f850 	bl	8003784 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80036e4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80036e6:	f000 f8dd 	bl	80038a4 <prvAddNewTaskToReadyList>
 80036ea:	e001      	b.n	80036f0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80036ec:	2300      	movs	r3, #0
 80036ee:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80036f0:	697b      	ldr	r3, [r7, #20]
	}
 80036f2:	4618      	mov	r0, r3
 80036f4:	3728      	adds	r7, #40	; 0x28
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}

080036fa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80036fa:	b580      	push	{r7, lr}
 80036fc:	b08c      	sub	sp, #48	; 0x30
 80036fe:	af04      	add	r7, sp, #16
 8003700:	60f8      	str	r0, [r7, #12]
 8003702:	60b9      	str	r1, [r7, #8]
 8003704:	603b      	str	r3, [r7, #0]
 8003706:	4613      	mov	r3, r2
 8003708:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800370a:	88fb      	ldrh	r3, [r7, #6]
 800370c:	009b      	lsls	r3, r3, #2
 800370e:	4618      	mov	r0, r3
 8003710:	f001 fc32 	bl	8004f78 <pvPortMalloc>
 8003714:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d00e      	beq.n	800373a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800371c:	205c      	movs	r0, #92	; 0x5c
 800371e:	f001 fc2b 	bl	8004f78 <pvPortMalloc>
 8003722:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003724:	69fb      	ldr	r3, [r7, #28]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d003      	beq.n	8003732 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800372a:	69fb      	ldr	r3, [r7, #28]
 800372c:	697a      	ldr	r2, [r7, #20]
 800372e:	631a      	str	r2, [r3, #48]	; 0x30
 8003730:	e005      	b.n	800373e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003732:	6978      	ldr	r0, [r7, #20]
 8003734:	f001 fcec 	bl	8005110 <vPortFree>
 8003738:	e001      	b.n	800373e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800373a:	2300      	movs	r3, #0
 800373c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800373e:	69fb      	ldr	r3, [r7, #28]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d017      	beq.n	8003774 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003744:	69fb      	ldr	r3, [r7, #28]
 8003746:	2200      	movs	r2, #0
 8003748:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800374c:	88fa      	ldrh	r2, [r7, #6]
 800374e:	2300      	movs	r3, #0
 8003750:	9303      	str	r3, [sp, #12]
 8003752:	69fb      	ldr	r3, [r7, #28]
 8003754:	9302      	str	r3, [sp, #8]
 8003756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003758:	9301      	str	r3, [sp, #4]
 800375a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800375c:	9300      	str	r3, [sp, #0]
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	68b9      	ldr	r1, [r7, #8]
 8003762:	68f8      	ldr	r0, [r7, #12]
 8003764:	f000 f80e 	bl	8003784 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003768:	69f8      	ldr	r0, [r7, #28]
 800376a:	f000 f89b 	bl	80038a4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800376e:	2301      	movs	r3, #1
 8003770:	61bb      	str	r3, [r7, #24]
 8003772:	e002      	b.n	800377a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003774:	f04f 33ff 	mov.w	r3, #4294967295
 8003778:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800377a:	69bb      	ldr	r3, [r7, #24]
	}
 800377c:	4618      	mov	r0, r3
 800377e:	3720      	adds	r7, #32
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}

08003784 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b088      	sub	sp, #32
 8003788:	af00      	add	r7, sp, #0
 800378a:	60f8      	str	r0, [r7, #12]
 800378c:	60b9      	str	r1, [r7, #8]
 800378e:	607a      	str	r2, [r7, #4]
 8003790:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003794:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	009b      	lsls	r3, r3, #2
 800379a:	461a      	mov	r2, r3
 800379c:	21a5      	movs	r1, #165	; 0xa5
 800379e:	f001 fdd5 	bl	800534c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80037a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80037ac:	3b01      	subs	r3, #1
 80037ae:	009b      	lsls	r3, r3, #2
 80037b0:	4413      	add	r3, r2
 80037b2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80037b4:	69bb      	ldr	r3, [r7, #24]
 80037b6:	f023 0307 	bic.w	r3, r3, #7
 80037ba:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80037bc:	69bb      	ldr	r3, [r7, #24]
 80037be:	f003 0307 	and.w	r3, r3, #7
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d00a      	beq.n	80037dc <prvInitialiseNewTask+0x58>
	__asm volatile
 80037c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037ca:	f383 8811 	msr	BASEPRI, r3
 80037ce:	f3bf 8f6f 	isb	sy
 80037d2:	f3bf 8f4f 	dsb	sy
 80037d6:	617b      	str	r3, [r7, #20]
}
 80037d8:	bf00      	nop
 80037da:	e7fe      	b.n	80037da <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d01f      	beq.n	8003822 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80037e2:	2300      	movs	r3, #0
 80037e4:	61fb      	str	r3, [r7, #28]
 80037e6:	e012      	b.n	800380e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80037e8:	68ba      	ldr	r2, [r7, #8]
 80037ea:	69fb      	ldr	r3, [r7, #28]
 80037ec:	4413      	add	r3, r2
 80037ee:	7819      	ldrb	r1, [r3, #0]
 80037f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037f2:	69fb      	ldr	r3, [r7, #28]
 80037f4:	4413      	add	r3, r2
 80037f6:	3334      	adds	r3, #52	; 0x34
 80037f8:	460a      	mov	r2, r1
 80037fa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80037fc:	68ba      	ldr	r2, [r7, #8]
 80037fe:	69fb      	ldr	r3, [r7, #28]
 8003800:	4413      	add	r3, r2
 8003802:	781b      	ldrb	r3, [r3, #0]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d006      	beq.n	8003816 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003808:	69fb      	ldr	r3, [r7, #28]
 800380a:	3301      	adds	r3, #1
 800380c:	61fb      	str	r3, [r7, #28]
 800380e:	69fb      	ldr	r3, [r7, #28]
 8003810:	2b0f      	cmp	r3, #15
 8003812:	d9e9      	bls.n	80037e8 <prvInitialiseNewTask+0x64>
 8003814:	e000      	b.n	8003818 <prvInitialiseNewTask+0x94>
			{
				break;
 8003816:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800381a:	2200      	movs	r2, #0
 800381c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003820:	e003      	b.n	800382a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003824:	2200      	movs	r2, #0
 8003826:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800382a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800382c:	2b37      	cmp	r3, #55	; 0x37
 800382e:	d901      	bls.n	8003834 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003830:	2337      	movs	r3, #55	; 0x37
 8003832:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003836:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003838:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800383a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800383c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800383e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003842:	2200      	movs	r2, #0
 8003844:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003848:	3304      	adds	r3, #4
 800384a:	4618      	mov	r0, r3
 800384c:	f7ff f978 	bl	8002b40 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003852:	3318      	adds	r3, #24
 8003854:	4618      	mov	r0, r3
 8003856:	f7ff f973 	bl	8002b40 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800385a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800385c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800385e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003862:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003868:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800386a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800386c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800386e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003872:	2200      	movs	r2, #0
 8003874:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003878:	2200      	movs	r2, #0
 800387a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800387e:	683a      	ldr	r2, [r7, #0]
 8003880:	68f9      	ldr	r1, [r7, #12]
 8003882:	69b8      	ldr	r0, [r7, #24]
 8003884:	f001 f928 	bl	8004ad8 <pxPortInitialiseStack>
 8003888:	4602      	mov	r2, r0
 800388a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800388c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800388e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003890:	2b00      	cmp	r3, #0
 8003892:	d002      	beq.n	800389a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003896:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003898:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800389a:	bf00      	nop
 800389c:	3720      	adds	r7, #32
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}
	...

080038a4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b082      	sub	sp, #8
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80038ac:	f001 fa42 	bl	8004d34 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80038b0:	4b2d      	ldr	r3, [pc, #180]	; (8003968 <prvAddNewTaskToReadyList+0xc4>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	3301      	adds	r3, #1
 80038b6:	4a2c      	ldr	r2, [pc, #176]	; (8003968 <prvAddNewTaskToReadyList+0xc4>)
 80038b8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80038ba:	4b2c      	ldr	r3, [pc, #176]	; (800396c <prvAddNewTaskToReadyList+0xc8>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d109      	bne.n	80038d6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80038c2:	4a2a      	ldr	r2, [pc, #168]	; (800396c <prvAddNewTaskToReadyList+0xc8>)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80038c8:	4b27      	ldr	r3, [pc, #156]	; (8003968 <prvAddNewTaskToReadyList+0xc4>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	2b01      	cmp	r3, #1
 80038ce:	d110      	bne.n	80038f2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80038d0:	f000 fc16 	bl	8004100 <prvInitialiseTaskLists>
 80038d4:	e00d      	b.n	80038f2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80038d6:	4b26      	ldr	r3, [pc, #152]	; (8003970 <prvAddNewTaskToReadyList+0xcc>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d109      	bne.n	80038f2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80038de:	4b23      	ldr	r3, [pc, #140]	; (800396c <prvAddNewTaskToReadyList+0xc8>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038e8:	429a      	cmp	r2, r3
 80038ea:	d802      	bhi.n	80038f2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80038ec:	4a1f      	ldr	r2, [pc, #124]	; (800396c <prvAddNewTaskToReadyList+0xc8>)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80038f2:	4b20      	ldr	r3, [pc, #128]	; (8003974 <prvAddNewTaskToReadyList+0xd0>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	3301      	adds	r3, #1
 80038f8:	4a1e      	ldr	r2, [pc, #120]	; (8003974 <prvAddNewTaskToReadyList+0xd0>)
 80038fa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80038fc:	4b1d      	ldr	r3, [pc, #116]	; (8003974 <prvAddNewTaskToReadyList+0xd0>)
 80038fe:	681a      	ldr	r2, [r3, #0]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003908:	4b1b      	ldr	r3, [pc, #108]	; (8003978 <prvAddNewTaskToReadyList+0xd4>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	429a      	cmp	r2, r3
 800390e:	d903      	bls.n	8003918 <prvAddNewTaskToReadyList+0x74>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003914:	4a18      	ldr	r2, [pc, #96]	; (8003978 <prvAddNewTaskToReadyList+0xd4>)
 8003916:	6013      	str	r3, [r2, #0]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800391c:	4613      	mov	r3, r2
 800391e:	009b      	lsls	r3, r3, #2
 8003920:	4413      	add	r3, r2
 8003922:	009b      	lsls	r3, r3, #2
 8003924:	4a15      	ldr	r2, [pc, #84]	; (800397c <prvAddNewTaskToReadyList+0xd8>)
 8003926:	441a      	add	r2, r3
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	3304      	adds	r3, #4
 800392c:	4619      	mov	r1, r3
 800392e:	4610      	mov	r0, r2
 8003930:	f7ff f913 	bl	8002b5a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003934:	f001 fa2e 	bl	8004d94 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003938:	4b0d      	ldr	r3, [pc, #52]	; (8003970 <prvAddNewTaskToReadyList+0xcc>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d00e      	beq.n	800395e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003940:	4b0a      	ldr	r3, [pc, #40]	; (800396c <prvAddNewTaskToReadyList+0xc8>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800394a:	429a      	cmp	r2, r3
 800394c:	d207      	bcs.n	800395e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800394e:	4b0c      	ldr	r3, [pc, #48]	; (8003980 <prvAddNewTaskToReadyList+0xdc>)
 8003950:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003954:	601a      	str	r2, [r3, #0]
 8003956:	f3bf 8f4f 	dsb	sy
 800395a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800395e:	bf00      	nop
 8003960:	3708      	adds	r7, #8
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}
 8003966:	bf00      	nop
 8003968:	20000c98 	.word	0x20000c98
 800396c:	200007c4 	.word	0x200007c4
 8003970:	20000ca4 	.word	0x20000ca4
 8003974:	20000cb4 	.word	0x20000cb4
 8003978:	20000ca0 	.word	0x20000ca0
 800397c:	200007c8 	.word	0x200007c8
 8003980:	e000ed04 	.word	0xe000ed04

08003984 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003984:	b580      	push	{r7, lr}
 8003986:	b084      	sub	sp, #16
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800398c:	2300      	movs	r3, #0
 800398e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d017      	beq.n	80039c6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003996:	4b13      	ldr	r3, [pc, #76]	; (80039e4 <vTaskDelay+0x60>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d00a      	beq.n	80039b4 <vTaskDelay+0x30>
	__asm volatile
 800399e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039a2:	f383 8811 	msr	BASEPRI, r3
 80039a6:	f3bf 8f6f 	isb	sy
 80039aa:	f3bf 8f4f 	dsb	sy
 80039ae:	60bb      	str	r3, [r7, #8]
}
 80039b0:	bf00      	nop
 80039b2:	e7fe      	b.n	80039b2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80039b4:	f000 f880 	bl	8003ab8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80039b8:	2100      	movs	r1, #0
 80039ba:	6878      	ldr	r0, [r7, #4]
 80039bc:	f000 fcea 	bl	8004394 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80039c0:	f000 f888 	bl	8003ad4 <xTaskResumeAll>
 80039c4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d107      	bne.n	80039dc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80039cc:	4b06      	ldr	r3, [pc, #24]	; (80039e8 <vTaskDelay+0x64>)
 80039ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039d2:	601a      	str	r2, [r3, #0]
 80039d4:	f3bf 8f4f 	dsb	sy
 80039d8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80039dc:	bf00      	nop
 80039de:	3710      	adds	r7, #16
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bd80      	pop	{r7, pc}
 80039e4:	20000cc0 	.word	0x20000cc0
 80039e8:	e000ed04 	.word	0xe000ed04

080039ec <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b08a      	sub	sp, #40	; 0x28
 80039f0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80039f2:	2300      	movs	r3, #0
 80039f4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80039f6:	2300      	movs	r3, #0
 80039f8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80039fa:	463a      	mov	r2, r7
 80039fc:	1d39      	adds	r1, r7, #4
 80039fe:	f107 0308 	add.w	r3, r7, #8
 8003a02:	4618      	mov	r0, r3
 8003a04:	f7ff f848 	bl	8002a98 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003a08:	6839      	ldr	r1, [r7, #0]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	68ba      	ldr	r2, [r7, #8]
 8003a0e:	9202      	str	r2, [sp, #8]
 8003a10:	9301      	str	r3, [sp, #4]
 8003a12:	2300      	movs	r3, #0
 8003a14:	9300      	str	r3, [sp, #0]
 8003a16:	2300      	movs	r3, #0
 8003a18:	460a      	mov	r2, r1
 8003a1a:	4921      	ldr	r1, [pc, #132]	; (8003aa0 <vTaskStartScheduler+0xb4>)
 8003a1c:	4821      	ldr	r0, [pc, #132]	; (8003aa4 <vTaskStartScheduler+0xb8>)
 8003a1e:	f7ff fe0f 	bl	8003640 <xTaskCreateStatic>
 8003a22:	4603      	mov	r3, r0
 8003a24:	4a20      	ldr	r2, [pc, #128]	; (8003aa8 <vTaskStartScheduler+0xbc>)
 8003a26:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003a28:	4b1f      	ldr	r3, [pc, #124]	; (8003aa8 <vTaskStartScheduler+0xbc>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d002      	beq.n	8003a36 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003a30:	2301      	movs	r3, #1
 8003a32:	617b      	str	r3, [r7, #20]
 8003a34:	e001      	b.n	8003a3a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003a36:	2300      	movs	r3, #0
 8003a38:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	2b01      	cmp	r3, #1
 8003a3e:	d102      	bne.n	8003a46 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003a40:	f000 fcfc 	bl	800443c <xTimerCreateTimerTask>
 8003a44:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	2b01      	cmp	r3, #1
 8003a4a:	d116      	bne.n	8003a7a <vTaskStartScheduler+0x8e>
	__asm volatile
 8003a4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a50:	f383 8811 	msr	BASEPRI, r3
 8003a54:	f3bf 8f6f 	isb	sy
 8003a58:	f3bf 8f4f 	dsb	sy
 8003a5c:	613b      	str	r3, [r7, #16]
}
 8003a5e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003a60:	4b12      	ldr	r3, [pc, #72]	; (8003aac <vTaskStartScheduler+0xc0>)
 8003a62:	f04f 32ff 	mov.w	r2, #4294967295
 8003a66:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003a68:	4b11      	ldr	r3, [pc, #68]	; (8003ab0 <vTaskStartScheduler+0xc4>)
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003a6e:	4b11      	ldr	r3, [pc, #68]	; (8003ab4 <vTaskStartScheduler+0xc8>)
 8003a70:	2200      	movs	r2, #0
 8003a72:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003a74:	f001 f8bc 	bl	8004bf0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003a78:	e00e      	b.n	8003a98 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003a7a:	697b      	ldr	r3, [r7, #20]
 8003a7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a80:	d10a      	bne.n	8003a98 <vTaskStartScheduler+0xac>
	__asm volatile
 8003a82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a86:	f383 8811 	msr	BASEPRI, r3
 8003a8a:	f3bf 8f6f 	isb	sy
 8003a8e:	f3bf 8f4f 	dsb	sy
 8003a92:	60fb      	str	r3, [r7, #12]
}
 8003a94:	bf00      	nop
 8003a96:	e7fe      	b.n	8003a96 <vTaskStartScheduler+0xaa>
}
 8003a98:	bf00      	nop
 8003a9a:	3718      	adds	r7, #24
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bd80      	pop	{r7, pc}
 8003aa0:	080053e4 	.word	0x080053e4
 8003aa4:	080040d1 	.word	0x080040d1
 8003aa8:	20000cbc 	.word	0x20000cbc
 8003aac:	20000cb8 	.word	0x20000cb8
 8003ab0:	20000ca4 	.word	0x20000ca4
 8003ab4:	20000c9c 	.word	0x20000c9c

08003ab8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003ab8:	b480      	push	{r7}
 8003aba:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003abc:	4b04      	ldr	r3, [pc, #16]	; (8003ad0 <vTaskSuspendAll+0x18>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	3301      	adds	r3, #1
 8003ac2:	4a03      	ldr	r2, [pc, #12]	; (8003ad0 <vTaskSuspendAll+0x18>)
 8003ac4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003ac6:	bf00      	nop
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ace:	4770      	bx	lr
 8003ad0:	20000cc0 	.word	0x20000cc0

08003ad4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b084      	sub	sp, #16
 8003ad8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003ada:	2300      	movs	r3, #0
 8003adc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003ae2:	4b42      	ldr	r3, [pc, #264]	; (8003bec <xTaskResumeAll+0x118>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d10a      	bne.n	8003b00 <xTaskResumeAll+0x2c>
	__asm volatile
 8003aea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aee:	f383 8811 	msr	BASEPRI, r3
 8003af2:	f3bf 8f6f 	isb	sy
 8003af6:	f3bf 8f4f 	dsb	sy
 8003afa:	603b      	str	r3, [r7, #0]
}
 8003afc:	bf00      	nop
 8003afe:	e7fe      	b.n	8003afe <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003b00:	f001 f918 	bl	8004d34 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003b04:	4b39      	ldr	r3, [pc, #228]	; (8003bec <xTaskResumeAll+0x118>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	3b01      	subs	r3, #1
 8003b0a:	4a38      	ldr	r2, [pc, #224]	; (8003bec <xTaskResumeAll+0x118>)
 8003b0c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003b0e:	4b37      	ldr	r3, [pc, #220]	; (8003bec <xTaskResumeAll+0x118>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d162      	bne.n	8003bdc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003b16:	4b36      	ldr	r3, [pc, #216]	; (8003bf0 <xTaskResumeAll+0x11c>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d05e      	beq.n	8003bdc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003b1e:	e02f      	b.n	8003b80 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b20:	4b34      	ldr	r3, [pc, #208]	; (8003bf4 <xTaskResumeAll+0x120>)
 8003b22:	68db      	ldr	r3, [r3, #12]
 8003b24:	68db      	ldr	r3, [r3, #12]
 8003b26:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	3318      	adds	r3, #24
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	f7ff f871 	bl	8002c14 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	3304      	adds	r3, #4
 8003b36:	4618      	mov	r0, r3
 8003b38:	f7ff f86c 	bl	8002c14 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b40:	4b2d      	ldr	r3, [pc, #180]	; (8003bf8 <xTaskResumeAll+0x124>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	429a      	cmp	r2, r3
 8003b46:	d903      	bls.n	8003b50 <xTaskResumeAll+0x7c>
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b4c:	4a2a      	ldr	r2, [pc, #168]	; (8003bf8 <xTaskResumeAll+0x124>)
 8003b4e:	6013      	str	r3, [r2, #0]
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b54:	4613      	mov	r3, r2
 8003b56:	009b      	lsls	r3, r3, #2
 8003b58:	4413      	add	r3, r2
 8003b5a:	009b      	lsls	r3, r3, #2
 8003b5c:	4a27      	ldr	r2, [pc, #156]	; (8003bfc <xTaskResumeAll+0x128>)
 8003b5e:	441a      	add	r2, r3
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	3304      	adds	r3, #4
 8003b64:	4619      	mov	r1, r3
 8003b66:	4610      	mov	r0, r2
 8003b68:	f7fe fff7 	bl	8002b5a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b70:	4b23      	ldr	r3, [pc, #140]	; (8003c00 <xTaskResumeAll+0x12c>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b76:	429a      	cmp	r2, r3
 8003b78:	d302      	bcc.n	8003b80 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003b7a:	4b22      	ldr	r3, [pc, #136]	; (8003c04 <xTaskResumeAll+0x130>)
 8003b7c:	2201      	movs	r2, #1
 8003b7e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003b80:	4b1c      	ldr	r3, [pc, #112]	; (8003bf4 <xTaskResumeAll+0x120>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d1cb      	bne.n	8003b20 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d001      	beq.n	8003b92 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003b8e:	f000 fb55 	bl	800423c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003b92:	4b1d      	ldr	r3, [pc, #116]	; (8003c08 <xTaskResumeAll+0x134>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d010      	beq.n	8003bc0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003b9e:	f000 f847 	bl	8003c30 <xTaskIncrementTick>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d002      	beq.n	8003bae <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003ba8:	4b16      	ldr	r3, [pc, #88]	; (8003c04 <xTaskResumeAll+0x130>)
 8003baa:	2201      	movs	r2, #1
 8003bac:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	3b01      	subs	r3, #1
 8003bb2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d1f1      	bne.n	8003b9e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8003bba:	4b13      	ldr	r3, [pc, #76]	; (8003c08 <xTaskResumeAll+0x134>)
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003bc0:	4b10      	ldr	r3, [pc, #64]	; (8003c04 <xTaskResumeAll+0x130>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d009      	beq.n	8003bdc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003bcc:	4b0f      	ldr	r3, [pc, #60]	; (8003c0c <xTaskResumeAll+0x138>)
 8003bce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003bd2:	601a      	str	r2, [r3, #0]
 8003bd4:	f3bf 8f4f 	dsb	sy
 8003bd8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003bdc:	f001 f8da 	bl	8004d94 <vPortExitCritical>

	return xAlreadyYielded;
 8003be0:	68bb      	ldr	r3, [r7, #8]
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	3710      	adds	r7, #16
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}
 8003bea:	bf00      	nop
 8003bec:	20000cc0 	.word	0x20000cc0
 8003bf0:	20000c98 	.word	0x20000c98
 8003bf4:	20000c58 	.word	0x20000c58
 8003bf8:	20000ca0 	.word	0x20000ca0
 8003bfc:	200007c8 	.word	0x200007c8
 8003c00:	200007c4 	.word	0x200007c4
 8003c04:	20000cac 	.word	0x20000cac
 8003c08:	20000ca8 	.word	0x20000ca8
 8003c0c:	e000ed04 	.word	0xe000ed04

08003c10 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003c10:	b480      	push	{r7}
 8003c12:	b083      	sub	sp, #12
 8003c14:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003c16:	4b05      	ldr	r3, [pc, #20]	; (8003c2c <xTaskGetTickCount+0x1c>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003c1c:	687b      	ldr	r3, [r7, #4]
}
 8003c1e:	4618      	mov	r0, r3
 8003c20:	370c      	adds	r7, #12
 8003c22:	46bd      	mov	sp, r7
 8003c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c28:	4770      	bx	lr
 8003c2a:	bf00      	nop
 8003c2c:	20000c9c 	.word	0x20000c9c

08003c30 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b086      	sub	sp, #24
 8003c34:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003c36:	2300      	movs	r3, #0
 8003c38:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c3a:	4b4f      	ldr	r3, [pc, #316]	; (8003d78 <xTaskIncrementTick+0x148>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	f040 808f 	bne.w	8003d62 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003c44:	4b4d      	ldr	r3, [pc, #308]	; (8003d7c <xTaskIncrementTick+0x14c>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	3301      	adds	r3, #1
 8003c4a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003c4c:	4a4b      	ldr	r2, [pc, #300]	; (8003d7c <xTaskIncrementTick+0x14c>)
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d120      	bne.n	8003c9a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003c58:	4b49      	ldr	r3, [pc, #292]	; (8003d80 <xTaskIncrementTick+0x150>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d00a      	beq.n	8003c78 <xTaskIncrementTick+0x48>
	__asm volatile
 8003c62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c66:	f383 8811 	msr	BASEPRI, r3
 8003c6a:	f3bf 8f6f 	isb	sy
 8003c6e:	f3bf 8f4f 	dsb	sy
 8003c72:	603b      	str	r3, [r7, #0]
}
 8003c74:	bf00      	nop
 8003c76:	e7fe      	b.n	8003c76 <xTaskIncrementTick+0x46>
 8003c78:	4b41      	ldr	r3, [pc, #260]	; (8003d80 <xTaskIncrementTick+0x150>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	60fb      	str	r3, [r7, #12]
 8003c7e:	4b41      	ldr	r3, [pc, #260]	; (8003d84 <xTaskIncrementTick+0x154>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a3f      	ldr	r2, [pc, #252]	; (8003d80 <xTaskIncrementTick+0x150>)
 8003c84:	6013      	str	r3, [r2, #0]
 8003c86:	4a3f      	ldr	r2, [pc, #252]	; (8003d84 <xTaskIncrementTick+0x154>)
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	6013      	str	r3, [r2, #0]
 8003c8c:	4b3e      	ldr	r3, [pc, #248]	; (8003d88 <xTaskIncrementTick+0x158>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	3301      	adds	r3, #1
 8003c92:	4a3d      	ldr	r2, [pc, #244]	; (8003d88 <xTaskIncrementTick+0x158>)
 8003c94:	6013      	str	r3, [r2, #0]
 8003c96:	f000 fad1 	bl	800423c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003c9a:	4b3c      	ldr	r3, [pc, #240]	; (8003d8c <xTaskIncrementTick+0x15c>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	693a      	ldr	r2, [r7, #16]
 8003ca0:	429a      	cmp	r2, r3
 8003ca2:	d349      	bcc.n	8003d38 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003ca4:	4b36      	ldr	r3, [pc, #216]	; (8003d80 <xTaskIncrementTick+0x150>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d104      	bne.n	8003cb8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003cae:	4b37      	ldr	r3, [pc, #220]	; (8003d8c <xTaskIncrementTick+0x15c>)
 8003cb0:	f04f 32ff 	mov.w	r2, #4294967295
 8003cb4:	601a      	str	r2, [r3, #0]
					break;
 8003cb6:	e03f      	b.n	8003d38 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003cb8:	4b31      	ldr	r3, [pc, #196]	; (8003d80 <xTaskIncrementTick+0x150>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	68db      	ldr	r3, [r3, #12]
 8003cbe:	68db      	ldr	r3, [r3, #12]
 8003cc0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003cc8:	693a      	ldr	r2, [r7, #16]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	429a      	cmp	r2, r3
 8003cce:	d203      	bcs.n	8003cd8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003cd0:	4a2e      	ldr	r2, [pc, #184]	; (8003d8c <xTaskIncrementTick+0x15c>)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003cd6:	e02f      	b.n	8003d38 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	3304      	adds	r3, #4
 8003cdc:	4618      	mov	r0, r3
 8003cde:	f7fe ff99 	bl	8002c14 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d004      	beq.n	8003cf4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	3318      	adds	r3, #24
 8003cee:	4618      	mov	r0, r3
 8003cf0:	f7fe ff90 	bl	8002c14 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cf8:	4b25      	ldr	r3, [pc, #148]	; (8003d90 <xTaskIncrementTick+0x160>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	429a      	cmp	r2, r3
 8003cfe:	d903      	bls.n	8003d08 <xTaskIncrementTick+0xd8>
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d04:	4a22      	ldr	r2, [pc, #136]	; (8003d90 <xTaskIncrementTick+0x160>)
 8003d06:	6013      	str	r3, [r2, #0]
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d0c:	4613      	mov	r3, r2
 8003d0e:	009b      	lsls	r3, r3, #2
 8003d10:	4413      	add	r3, r2
 8003d12:	009b      	lsls	r3, r3, #2
 8003d14:	4a1f      	ldr	r2, [pc, #124]	; (8003d94 <xTaskIncrementTick+0x164>)
 8003d16:	441a      	add	r2, r3
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	3304      	adds	r3, #4
 8003d1c:	4619      	mov	r1, r3
 8003d1e:	4610      	mov	r0, r2
 8003d20:	f7fe ff1b 	bl	8002b5a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d28:	4b1b      	ldr	r3, [pc, #108]	; (8003d98 <xTaskIncrementTick+0x168>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d2e:	429a      	cmp	r2, r3
 8003d30:	d3b8      	bcc.n	8003ca4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003d32:	2301      	movs	r3, #1
 8003d34:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003d36:	e7b5      	b.n	8003ca4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003d38:	4b17      	ldr	r3, [pc, #92]	; (8003d98 <xTaskIncrementTick+0x168>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d3e:	4915      	ldr	r1, [pc, #84]	; (8003d94 <xTaskIncrementTick+0x164>)
 8003d40:	4613      	mov	r3, r2
 8003d42:	009b      	lsls	r3, r3, #2
 8003d44:	4413      	add	r3, r2
 8003d46:	009b      	lsls	r3, r3, #2
 8003d48:	440b      	add	r3, r1
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	2b01      	cmp	r3, #1
 8003d4e:	d901      	bls.n	8003d54 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8003d50:	2301      	movs	r3, #1
 8003d52:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003d54:	4b11      	ldr	r3, [pc, #68]	; (8003d9c <xTaskIncrementTick+0x16c>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d007      	beq.n	8003d6c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	617b      	str	r3, [r7, #20]
 8003d60:	e004      	b.n	8003d6c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003d62:	4b0f      	ldr	r3, [pc, #60]	; (8003da0 <xTaskIncrementTick+0x170>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	3301      	adds	r3, #1
 8003d68:	4a0d      	ldr	r2, [pc, #52]	; (8003da0 <xTaskIncrementTick+0x170>)
 8003d6a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003d6c:	697b      	ldr	r3, [r7, #20]
}
 8003d6e:	4618      	mov	r0, r3
 8003d70:	3718      	adds	r7, #24
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}
 8003d76:	bf00      	nop
 8003d78:	20000cc0 	.word	0x20000cc0
 8003d7c:	20000c9c 	.word	0x20000c9c
 8003d80:	20000c50 	.word	0x20000c50
 8003d84:	20000c54 	.word	0x20000c54
 8003d88:	20000cb0 	.word	0x20000cb0
 8003d8c:	20000cb8 	.word	0x20000cb8
 8003d90:	20000ca0 	.word	0x20000ca0
 8003d94:	200007c8 	.word	0x200007c8
 8003d98:	200007c4 	.word	0x200007c4
 8003d9c:	20000cac 	.word	0x20000cac
 8003da0:	20000ca8 	.word	0x20000ca8

08003da4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003da4:	b480      	push	{r7}
 8003da6:	b085      	sub	sp, #20
 8003da8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003daa:	4b28      	ldr	r3, [pc, #160]	; (8003e4c <vTaskSwitchContext+0xa8>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d003      	beq.n	8003dba <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003db2:	4b27      	ldr	r3, [pc, #156]	; (8003e50 <vTaskSwitchContext+0xac>)
 8003db4:	2201      	movs	r2, #1
 8003db6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003db8:	e041      	b.n	8003e3e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8003dba:	4b25      	ldr	r3, [pc, #148]	; (8003e50 <vTaskSwitchContext+0xac>)
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003dc0:	4b24      	ldr	r3, [pc, #144]	; (8003e54 <vTaskSwitchContext+0xb0>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	60fb      	str	r3, [r7, #12]
 8003dc6:	e010      	b.n	8003dea <vTaskSwitchContext+0x46>
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d10a      	bne.n	8003de4 <vTaskSwitchContext+0x40>
	__asm volatile
 8003dce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dd2:	f383 8811 	msr	BASEPRI, r3
 8003dd6:	f3bf 8f6f 	isb	sy
 8003dda:	f3bf 8f4f 	dsb	sy
 8003dde:	607b      	str	r3, [r7, #4]
}
 8003de0:	bf00      	nop
 8003de2:	e7fe      	b.n	8003de2 <vTaskSwitchContext+0x3e>
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	3b01      	subs	r3, #1
 8003de8:	60fb      	str	r3, [r7, #12]
 8003dea:	491b      	ldr	r1, [pc, #108]	; (8003e58 <vTaskSwitchContext+0xb4>)
 8003dec:	68fa      	ldr	r2, [r7, #12]
 8003dee:	4613      	mov	r3, r2
 8003df0:	009b      	lsls	r3, r3, #2
 8003df2:	4413      	add	r3, r2
 8003df4:	009b      	lsls	r3, r3, #2
 8003df6:	440b      	add	r3, r1
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d0e4      	beq.n	8003dc8 <vTaskSwitchContext+0x24>
 8003dfe:	68fa      	ldr	r2, [r7, #12]
 8003e00:	4613      	mov	r3, r2
 8003e02:	009b      	lsls	r3, r3, #2
 8003e04:	4413      	add	r3, r2
 8003e06:	009b      	lsls	r3, r3, #2
 8003e08:	4a13      	ldr	r2, [pc, #76]	; (8003e58 <vTaskSwitchContext+0xb4>)
 8003e0a:	4413      	add	r3, r2
 8003e0c:	60bb      	str	r3, [r7, #8]
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	685a      	ldr	r2, [r3, #4]
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	605a      	str	r2, [r3, #4]
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	685a      	ldr	r2, [r3, #4]
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	3308      	adds	r3, #8
 8003e20:	429a      	cmp	r2, r3
 8003e22:	d104      	bne.n	8003e2e <vTaskSwitchContext+0x8a>
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	685a      	ldr	r2, [r3, #4]
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	605a      	str	r2, [r3, #4]
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	68db      	ldr	r3, [r3, #12]
 8003e34:	4a09      	ldr	r2, [pc, #36]	; (8003e5c <vTaskSwitchContext+0xb8>)
 8003e36:	6013      	str	r3, [r2, #0]
 8003e38:	4a06      	ldr	r2, [pc, #24]	; (8003e54 <vTaskSwitchContext+0xb0>)
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	6013      	str	r3, [r2, #0]
}
 8003e3e:	bf00      	nop
 8003e40:	3714      	adds	r7, #20
 8003e42:	46bd      	mov	sp, r7
 8003e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e48:	4770      	bx	lr
 8003e4a:	bf00      	nop
 8003e4c:	20000cc0 	.word	0x20000cc0
 8003e50:	20000cac 	.word	0x20000cac
 8003e54:	20000ca0 	.word	0x20000ca0
 8003e58:	200007c8 	.word	0x200007c8
 8003e5c:	200007c4 	.word	0x200007c4

08003e60 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b084      	sub	sp, #16
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
 8003e68:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d10a      	bne.n	8003e86 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003e70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e74:	f383 8811 	msr	BASEPRI, r3
 8003e78:	f3bf 8f6f 	isb	sy
 8003e7c:	f3bf 8f4f 	dsb	sy
 8003e80:	60fb      	str	r3, [r7, #12]
}
 8003e82:	bf00      	nop
 8003e84:	e7fe      	b.n	8003e84 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003e86:	4b07      	ldr	r3, [pc, #28]	; (8003ea4 <vTaskPlaceOnEventList+0x44>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	3318      	adds	r3, #24
 8003e8c:	4619      	mov	r1, r3
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	f7fe fe87 	bl	8002ba2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003e94:	2101      	movs	r1, #1
 8003e96:	6838      	ldr	r0, [r7, #0]
 8003e98:	f000 fa7c 	bl	8004394 <prvAddCurrentTaskToDelayedList>
}
 8003e9c:	bf00      	nop
 8003e9e:	3710      	adds	r7, #16
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bd80      	pop	{r7, pc}
 8003ea4:	200007c4 	.word	0x200007c4

08003ea8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b086      	sub	sp, #24
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	60f8      	str	r0, [r7, #12]
 8003eb0:	60b9      	str	r1, [r7, #8]
 8003eb2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d10a      	bne.n	8003ed0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8003eba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ebe:	f383 8811 	msr	BASEPRI, r3
 8003ec2:	f3bf 8f6f 	isb	sy
 8003ec6:	f3bf 8f4f 	dsb	sy
 8003eca:	617b      	str	r3, [r7, #20]
}
 8003ecc:	bf00      	nop
 8003ece:	e7fe      	b.n	8003ece <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003ed0:	4b0a      	ldr	r3, [pc, #40]	; (8003efc <vTaskPlaceOnEventListRestricted+0x54>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	3318      	adds	r3, #24
 8003ed6:	4619      	mov	r1, r3
 8003ed8:	68f8      	ldr	r0, [r7, #12]
 8003eda:	f7fe fe3e 	bl	8002b5a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d002      	beq.n	8003eea <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003ee4:	f04f 33ff 	mov.w	r3, #4294967295
 8003ee8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003eea:	6879      	ldr	r1, [r7, #4]
 8003eec:	68b8      	ldr	r0, [r7, #8]
 8003eee:	f000 fa51 	bl	8004394 <prvAddCurrentTaskToDelayedList>
	}
 8003ef2:	bf00      	nop
 8003ef4:	3718      	adds	r7, #24
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd80      	pop	{r7, pc}
 8003efa:	bf00      	nop
 8003efc:	200007c4 	.word	0x200007c4

08003f00 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b086      	sub	sp, #24
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	68db      	ldr	r3, [r3, #12]
 8003f0c:	68db      	ldr	r3, [r3, #12]
 8003f0e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003f10:	693b      	ldr	r3, [r7, #16]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d10a      	bne.n	8003f2c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003f16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f1a:	f383 8811 	msr	BASEPRI, r3
 8003f1e:	f3bf 8f6f 	isb	sy
 8003f22:	f3bf 8f4f 	dsb	sy
 8003f26:	60fb      	str	r3, [r7, #12]
}
 8003f28:	bf00      	nop
 8003f2a:	e7fe      	b.n	8003f2a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003f2c:	693b      	ldr	r3, [r7, #16]
 8003f2e:	3318      	adds	r3, #24
 8003f30:	4618      	mov	r0, r3
 8003f32:	f7fe fe6f 	bl	8002c14 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003f36:	4b1e      	ldr	r3, [pc, #120]	; (8003fb0 <xTaskRemoveFromEventList+0xb0>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d11d      	bne.n	8003f7a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	3304      	adds	r3, #4
 8003f42:	4618      	mov	r0, r3
 8003f44:	f7fe fe66 	bl	8002c14 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003f48:	693b      	ldr	r3, [r7, #16]
 8003f4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f4c:	4b19      	ldr	r3, [pc, #100]	; (8003fb4 <xTaskRemoveFromEventList+0xb4>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	429a      	cmp	r2, r3
 8003f52:	d903      	bls.n	8003f5c <xTaskRemoveFromEventList+0x5c>
 8003f54:	693b      	ldr	r3, [r7, #16]
 8003f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f58:	4a16      	ldr	r2, [pc, #88]	; (8003fb4 <xTaskRemoveFromEventList+0xb4>)
 8003f5a:	6013      	str	r3, [r2, #0]
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f60:	4613      	mov	r3, r2
 8003f62:	009b      	lsls	r3, r3, #2
 8003f64:	4413      	add	r3, r2
 8003f66:	009b      	lsls	r3, r3, #2
 8003f68:	4a13      	ldr	r2, [pc, #76]	; (8003fb8 <xTaskRemoveFromEventList+0xb8>)
 8003f6a:	441a      	add	r2, r3
 8003f6c:	693b      	ldr	r3, [r7, #16]
 8003f6e:	3304      	adds	r3, #4
 8003f70:	4619      	mov	r1, r3
 8003f72:	4610      	mov	r0, r2
 8003f74:	f7fe fdf1 	bl	8002b5a <vListInsertEnd>
 8003f78:	e005      	b.n	8003f86 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003f7a:	693b      	ldr	r3, [r7, #16]
 8003f7c:	3318      	adds	r3, #24
 8003f7e:	4619      	mov	r1, r3
 8003f80:	480e      	ldr	r0, [pc, #56]	; (8003fbc <xTaskRemoveFromEventList+0xbc>)
 8003f82:	f7fe fdea 	bl	8002b5a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003f86:	693b      	ldr	r3, [r7, #16]
 8003f88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f8a:	4b0d      	ldr	r3, [pc, #52]	; (8003fc0 <xTaskRemoveFromEventList+0xc0>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f90:	429a      	cmp	r2, r3
 8003f92:	d905      	bls.n	8003fa0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003f94:	2301      	movs	r3, #1
 8003f96:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003f98:	4b0a      	ldr	r3, [pc, #40]	; (8003fc4 <xTaskRemoveFromEventList+0xc4>)
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	601a      	str	r2, [r3, #0]
 8003f9e:	e001      	b.n	8003fa4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003fa4:	697b      	ldr	r3, [r7, #20]
}
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	3718      	adds	r7, #24
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd80      	pop	{r7, pc}
 8003fae:	bf00      	nop
 8003fb0:	20000cc0 	.word	0x20000cc0
 8003fb4:	20000ca0 	.word	0x20000ca0
 8003fb8:	200007c8 	.word	0x200007c8
 8003fbc:	20000c58 	.word	0x20000c58
 8003fc0:	200007c4 	.word	0x200007c4
 8003fc4:	20000cac 	.word	0x20000cac

08003fc8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b083      	sub	sp, #12
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003fd0:	4b06      	ldr	r3, [pc, #24]	; (8003fec <vTaskInternalSetTimeOutState+0x24>)
 8003fd2:	681a      	ldr	r2, [r3, #0]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003fd8:	4b05      	ldr	r3, [pc, #20]	; (8003ff0 <vTaskInternalSetTimeOutState+0x28>)
 8003fda:	681a      	ldr	r2, [r3, #0]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	605a      	str	r2, [r3, #4]
}
 8003fe0:	bf00      	nop
 8003fe2:	370c      	adds	r7, #12
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fea:	4770      	bx	lr
 8003fec:	20000cb0 	.word	0x20000cb0
 8003ff0:	20000c9c 	.word	0x20000c9c

08003ff4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b088      	sub	sp, #32
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
 8003ffc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d10a      	bne.n	800401a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004004:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004008:	f383 8811 	msr	BASEPRI, r3
 800400c:	f3bf 8f6f 	isb	sy
 8004010:	f3bf 8f4f 	dsb	sy
 8004014:	613b      	str	r3, [r7, #16]
}
 8004016:	bf00      	nop
 8004018:	e7fe      	b.n	8004018 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d10a      	bne.n	8004036 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004020:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004024:	f383 8811 	msr	BASEPRI, r3
 8004028:	f3bf 8f6f 	isb	sy
 800402c:	f3bf 8f4f 	dsb	sy
 8004030:	60fb      	str	r3, [r7, #12]
}
 8004032:	bf00      	nop
 8004034:	e7fe      	b.n	8004034 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004036:	f000 fe7d 	bl	8004d34 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800403a:	4b1d      	ldr	r3, [pc, #116]	; (80040b0 <xTaskCheckForTimeOut+0xbc>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	69ba      	ldr	r2, [r7, #24]
 8004046:	1ad3      	subs	r3, r2, r3
 8004048:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004052:	d102      	bne.n	800405a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004054:	2300      	movs	r3, #0
 8004056:	61fb      	str	r3, [r7, #28]
 8004058:	e023      	b.n	80040a2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681a      	ldr	r2, [r3, #0]
 800405e:	4b15      	ldr	r3, [pc, #84]	; (80040b4 <xTaskCheckForTimeOut+0xc0>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	429a      	cmp	r2, r3
 8004064:	d007      	beq.n	8004076 <xTaskCheckForTimeOut+0x82>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	69ba      	ldr	r2, [r7, #24]
 800406c:	429a      	cmp	r2, r3
 800406e:	d302      	bcc.n	8004076 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004070:	2301      	movs	r3, #1
 8004072:	61fb      	str	r3, [r7, #28]
 8004074:	e015      	b.n	80040a2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	697a      	ldr	r2, [r7, #20]
 800407c:	429a      	cmp	r2, r3
 800407e:	d20b      	bcs.n	8004098 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	681a      	ldr	r2, [r3, #0]
 8004084:	697b      	ldr	r3, [r7, #20]
 8004086:	1ad2      	subs	r2, r2, r3
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800408c:	6878      	ldr	r0, [r7, #4]
 800408e:	f7ff ff9b 	bl	8003fc8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004092:	2300      	movs	r3, #0
 8004094:	61fb      	str	r3, [r7, #28]
 8004096:	e004      	b.n	80040a2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	2200      	movs	r2, #0
 800409c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800409e:	2301      	movs	r3, #1
 80040a0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80040a2:	f000 fe77 	bl	8004d94 <vPortExitCritical>

	return xReturn;
 80040a6:	69fb      	ldr	r3, [r7, #28]
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	3720      	adds	r7, #32
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bd80      	pop	{r7, pc}
 80040b0:	20000c9c 	.word	0x20000c9c
 80040b4:	20000cb0 	.word	0x20000cb0

080040b8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80040b8:	b480      	push	{r7}
 80040ba:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80040bc:	4b03      	ldr	r3, [pc, #12]	; (80040cc <vTaskMissedYield+0x14>)
 80040be:	2201      	movs	r2, #1
 80040c0:	601a      	str	r2, [r3, #0]
}
 80040c2:	bf00      	nop
 80040c4:	46bd      	mov	sp, r7
 80040c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ca:	4770      	bx	lr
 80040cc:	20000cac 	.word	0x20000cac

080040d0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b082      	sub	sp, #8
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80040d8:	f000 f852 	bl	8004180 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80040dc:	4b06      	ldr	r3, [pc, #24]	; (80040f8 <prvIdleTask+0x28>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	2b01      	cmp	r3, #1
 80040e2:	d9f9      	bls.n	80040d8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80040e4:	4b05      	ldr	r3, [pc, #20]	; (80040fc <prvIdleTask+0x2c>)
 80040e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040ea:	601a      	str	r2, [r3, #0]
 80040ec:	f3bf 8f4f 	dsb	sy
 80040f0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80040f4:	e7f0      	b.n	80040d8 <prvIdleTask+0x8>
 80040f6:	bf00      	nop
 80040f8:	200007c8 	.word	0x200007c8
 80040fc:	e000ed04 	.word	0xe000ed04

08004100 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b082      	sub	sp, #8
 8004104:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004106:	2300      	movs	r3, #0
 8004108:	607b      	str	r3, [r7, #4]
 800410a:	e00c      	b.n	8004126 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800410c:	687a      	ldr	r2, [r7, #4]
 800410e:	4613      	mov	r3, r2
 8004110:	009b      	lsls	r3, r3, #2
 8004112:	4413      	add	r3, r2
 8004114:	009b      	lsls	r3, r3, #2
 8004116:	4a12      	ldr	r2, [pc, #72]	; (8004160 <prvInitialiseTaskLists+0x60>)
 8004118:	4413      	add	r3, r2
 800411a:	4618      	mov	r0, r3
 800411c:	f7fe fcf0 	bl	8002b00 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	3301      	adds	r3, #1
 8004124:	607b      	str	r3, [r7, #4]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2b37      	cmp	r3, #55	; 0x37
 800412a:	d9ef      	bls.n	800410c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800412c:	480d      	ldr	r0, [pc, #52]	; (8004164 <prvInitialiseTaskLists+0x64>)
 800412e:	f7fe fce7 	bl	8002b00 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004132:	480d      	ldr	r0, [pc, #52]	; (8004168 <prvInitialiseTaskLists+0x68>)
 8004134:	f7fe fce4 	bl	8002b00 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004138:	480c      	ldr	r0, [pc, #48]	; (800416c <prvInitialiseTaskLists+0x6c>)
 800413a:	f7fe fce1 	bl	8002b00 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800413e:	480c      	ldr	r0, [pc, #48]	; (8004170 <prvInitialiseTaskLists+0x70>)
 8004140:	f7fe fcde 	bl	8002b00 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004144:	480b      	ldr	r0, [pc, #44]	; (8004174 <prvInitialiseTaskLists+0x74>)
 8004146:	f7fe fcdb 	bl	8002b00 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800414a:	4b0b      	ldr	r3, [pc, #44]	; (8004178 <prvInitialiseTaskLists+0x78>)
 800414c:	4a05      	ldr	r2, [pc, #20]	; (8004164 <prvInitialiseTaskLists+0x64>)
 800414e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004150:	4b0a      	ldr	r3, [pc, #40]	; (800417c <prvInitialiseTaskLists+0x7c>)
 8004152:	4a05      	ldr	r2, [pc, #20]	; (8004168 <prvInitialiseTaskLists+0x68>)
 8004154:	601a      	str	r2, [r3, #0]
}
 8004156:	bf00      	nop
 8004158:	3708      	adds	r7, #8
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}
 800415e:	bf00      	nop
 8004160:	200007c8 	.word	0x200007c8
 8004164:	20000c28 	.word	0x20000c28
 8004168:	20000c3c 	.word	0x20000c3c
 800416c:	20000c58 	.word	0x20000c58
 8004170:	20000c6c 	.word	0x20000c6c
 8004174:	20000c84 	.word	0x20000c84
 8004178:	20000c50 	.word	0x20000c50
 800417c:	20000c54 	.word	0x20000c54

08004180 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b082      	sub	sp, #8
 8004184:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004186:	e019      	b.n	80041bc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004188:	f000 fdd4 	bl	8004d34 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800418c:	4b10      	ldr	r3, [pc, #64]	; (80041d0 <prvCheckTasksWaitingTermination+0x50>)
 800418e:	68db      	ldr	r3, [r3, #12]
 8004190:	68db      	ldr	r3, [r3, #12]
 8004192:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	3304      	adds	r3, #4
 8004198:	4618      	mov	r0, r3
 800419a:	f7fe fd3b 	bl	8002c14 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800419e:	4b0d      	ldr	r3, [pc, #52]	; (80041d4 <prvCheckTasksWaitingTermination+0x54>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	3b01      	subs	r3, #1
 80041a4:	4a0b      	ldr	r2, [pc, #44]	; (80041d4 <prvCheckTasksWaitingTermination+0x54>)
 80041a6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80041a8:	4b0b      	ldr	r3, [pc, #44]	; (80041d8 <prvCheckTasksWaitingTermination+0x58>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	3b01      	subs	r3, #1
 80041ae:	4a0a      	ldr	r2, [pc, #40]	; (80041d8 <prvCheckTasksWaitingTermination+0x58>)
 80041b0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80041b2:	f000 fdef 	bl	8004d94 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80041b6:	6878      	ldr	r0, [r7, #4]
 80041b8:	f000 f810 	bl	80041dc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80041bc:	4b06      	ldr	r3, [pc, #24]	; (80041d8 <prvCheckTasksWaitingTermination+0x58>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d1e1      	bne.n	8004188 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80041c4:	bf00      	nop
 80041c6:	bf00      	nop
 80041c8:	3708      	adds	r7, #8
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bd80      	pop	{r7, pc}
 80041ce:	bf00      	nop
 80041d0:	20000c6c 	.word	0x20000c6c
 80041d4:	20000c98 	.word	0x20000c98
 80041d8:	20000c80 	.word	0x20000c80

080041dc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b084      	sub	sp, #16
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d108      	bne.n	8004200 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041f2:	4618      	mov	r0, r3
 80041f4:	f000 ff8c 	bl	8005110 <vPortFree>
				vPortFree( pxTCB );
 80041f8:	6878      	ldr	r0, [r7, #4]
 80041fa:	f000 ff89 	bl	8005110 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80041fe:	e018      	b.n	8004232 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004206:	2b01      	cmp	r3, #1
 8004208:	d103      	bne.n	8004212 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800420a:	6878      	ldr	r0, [r7, #4]
 800420c:	f000 ff80 	bl	8005110 <vPortFree>
	}
 8004210:	e00f      	b.n	8004232 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004218:	2b02      	cmp	r3, #2
 800421a:	d00a      	beq.n	8004232 <prvDeleteTCB+0x56>
	__asm volatile
 800421c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004220:	f383 8811 	msr	BASEPRI, r3
 8004224:	f3bf 8f6f 	isb	sy
 8004228:	f3bf 8f4f 	dsb	sy
 800422c:	60fb      	str	r3, [r7, #12]
}
 800422e:	bf00      	nop
 8004230:	e7fe      	b.n	8004230 <prvDeleteTCB+0x54>
	}
 8004232:	bf00      	nop
 8004234:	3710      	adds	r7, #16
 8004236:	46bd      	mov	sp, r7
 8004238:	bd80      	pop	{r7, pc}
	...

0800423c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800423c:	b480      	push	{r7}
 800423e:	b083      	sub	sp, #12
 8004240:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004242:	4b0c      	ldr	r3, [pc, #48]	; (8004274 <prvResetNextTaskUnblockTime+0x38>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d104      	bne.n	8004256 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800424c:	4b0a      	ldr	r3, [pc, #40]	; (8004278 <prvResetNextTaskUnblockTime+0x3c>)
 800424e:	f04f 32ff 	mov.w	r2, #4294967295
 8004252:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004254:	e008      	b.n	8004268 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004256:	4b07      	ldr	r3, [pc, #28]	; (8004274 <prvResetNextTaskUnblockTime+0x38>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	68db      	ldr	r3, [r3, #12]
 800425c:	68db      	ldr	r3, [r3, #12]
 800425e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	4a04      	ldr	r2, [pc, #16]	; (8004278 <prvResetNextTaskUnblockTime+0x3c>)
 8004266:	6013      	str	r3, [r2, #0]
}
 8004268:	bf00      	nop
 800426a:	370c      	adds	r7, #12
 800426c:	46bd      	mov	sp, r7
 800426e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004272:	4770      	bx	lr
 8004274:	20000c50 	.word	0x20000c50
 8004278:	20000cb8 	.word	0x20000cb8

0800427c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800427c:	b480      	push	{r7}
 800427e:	b083      	sub	sp, #12
 8004280:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004282:	4b0b      	ldr	r3, [pc, #44]	; (80042b0 <xTaskGetSchedulerState+0x34>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d102      	bne.n	8004290 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800428a:	2301      	movs	r3, #1
 800428c:	607b      	str	r3, [r7, #4]
 800428e:	e008      	b.n	80042a2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004290:	4b08      	ldr	r3, [pc, #32]	; (80042b4 <xTaskGetSchedulerState+0x38>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d102      	bne.n	800429e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004298:	2302      	movs	r3, #2
 800429a:	607b      	str	r3, [r7, #4]
 800429c:	e001      	b.n	80042a2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800429e:	2300      	movs	r3, #0
 80042a0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80042a2:	687b      	ldr	r3, [r7, #4]
	}
 80042a4:	4618      	mov	r0, r3
 80042a6:	370c      	adds	r7, #12
 80042a8:	46bd      	mov	sp, r7
 80042aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ae:	4770      	bx	lr
 80042b0:	20000ca4 	.word	0x20000ca4
 80042b4:	20000cc0 	.word	0x20000cc0

080042b8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b086      	sub	sp, #24
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80042c4:	2300      	movs	r3, #0
 80042c6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d056      	beq.n	800437c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80042ce:	4b2e      	ldr	r3, [pc, #184]	; (8004388 <xTaskPriorityDisinherit+0xd0>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	693a      	ldr	r2, [r7, #16]
 80042d4:	429a      	cmp	r2, r3
 80042d6:	d00a      	beq.n	80042ee <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80042d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042dc:	f383 8811 	msr	BASEPRI, r3
 80042e0:	f3bf 8f6f 	isb	sy
 80042e4:	f3bf 8f4f 	dsb	sy
 80042e8:	60fb      	str	r3, [r7, #12]
}
 80042ea:	bf00      	nop
 80042ec:	e7fe      	b.n	80042ec <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80042ee:	693b      	ldr	r3, [r7, #16]
 80042f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d10a      	bne.n	800430c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80042f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042fa:	f383 8811 	msr	BASEPRI, r3
 80042fe:	f3bf 8f6f 	isb	sy
 8004302:	f3bf 8f4f 	dsb	sy
 8004306:	60bb      	str	r3, [r7, #8]
}
 8004308:	bf00      	nop
 800430a:	e7fe      	b.n	800430a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800430c:	693b      	ldr	r3, [r7, #16]
 800430e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004310:	1e5a      	subs	r2, r3, #1
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004316:	693b      	ldr	r3, [r7, #16]
 8004318:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800431e:	429a      	cmp	r2, r3
 8004320:	d02c      	beq.n	800437c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004322:	693b      	ldr	r3, [r7, #16]
 8004324:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004326:	2b00      	cmp	r3, #0
 8004328:	d128      	bne.n	800437c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800432a:	693b      	ldr	r3, [r7, #16]
 800432c:	3304      	adds	r3, #4
 800432e:	4618      	mov	r0, r3
 8004330:	f7fe fc70 	bl	8002c14 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004334:	693b      	ldr	r3, [r7, #16]
 8004336:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004338:	693b      	ldr	r3, [r7, #16]
 800433a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004340:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004344:	693b      	ldr	r3, [r7, #16]
 8004346:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004348:	693b      	ldr	r3, [r7, #16]
 800434a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800434c:	4b0f      	ldr	r3, [pc, #60]	; (800438c <xTaskPriorityDisinherit+0xd4>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	429a      	cmp	r2, r3
 8004352:	d903      	bls.n	800435c <xTaskPriorityDisinherit+0xa4>
 8004354:	693b      	ldr	r3, [r7, #16]
 8004356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004358:	4a0c      	ldr	r2, [pc, #48]	; (800438c <xTaskPriorityDisinherit+0xd4>)
 800435a:	6013      	str	r3, [r2, #0]
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004360:	4613      	mov	r3, r2
 8004362:	009b      	lsls	r3, r3, #2
 8004364:	4413      	add	r3, r2
 8004366:	009b      	lsls	r3, r3, #2
 8004368:	4a09      	ldr	r2, [pc, #36]	; (8004390 <xTaskPriorityDisinherit+0xd8>)
 800436a:	441a      	add	r2, r3
 800436c:	693b      	ldr	r3, [r7, #16]
 800436e:	3304      	adds	r3, #4
 8004370:	4619      	mov	r1, r3
 8004372:	4610      	mov	r0, r2
 8004374:	f7fe fbf1 	bl	8002b5a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004378:	2301      	movs	r3, #1
 800437a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800437c:	697b      	ldr	r3, [r7, #20]
	}
 800437e:	4618      	mov	r0, r3
 8004380:	3718      	adds	r7, #24
 8004382:	46bd      	mov	sp, r7
 8004384:	bd80      	pop	{r7, pc}
 8004386:	bf00      	nop
 8004388:	200007c4 	.word	0x200007c4
 800438c:	20000ca0 	.word	0x20000ca0
 8004390:	200007c8 	.word	0x200007c8

08004394 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b084      	sub	sp, #16
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
 800439c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800439e:	4b21      	ldr	r3, [pc, #132]	; (8004424 <prvAddCurrentTaskToDelayedList+0x90>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80043a4:	4b20      	ldr	r3, [pc, #128]	; (8004428 <prvAddCurrentTaskToDelayedList+0x94>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	3304      	adds	r3, #4
 80043aa:	4618      	mov	r0, r3
 80043ac:	f7fe fc32 	bl	8002c14 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043b6:	d10a      	bne.n	80043ce <prvAddCurrentTaskToDelayedList+0x3a>
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d007      	beq.n	80043ce <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80043be:	4b1a      	ldr	r3, [pc, #104]	; (8004428 <prvAddCurrentTaskToDelayedList+0x94>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	3304      	adds	r3, #4
 80043c4:	4619      	mov	r1, r3
 80043c6:	4819      	ldr	r0, [pc, #100]	; (800442c <prvAddCurrentTaskToDelayedList+0x98>)
 80043c8:	f7fe fbc7 	bl	8002b5a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80043cc:	e026      	b.n	800441c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80043ce:	68fa      	ldr	r2, [r7, #12]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	4413      	add	r3, r2
 80043d4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80043d6:	4b14      	ldr	r3, [pc, #80]	; (8004428 <prvAddCurrentTaskToDelayedList+0x94>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	68ba      	ldr	r2, [r7, #8]
 80043dc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80043de:	68ba      	ldr	r2, [r7, #8]
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	429a      	cmp	r2, r3
 80043e4:	d209      	bcs.n	80043fa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80043e6:	4b12      	ldr	r3, [pc, #72]	; (8004430 <prvAddCurrentTaskToDelayedList+0x9c>)
 80043e8:	681a      	ldr	r2, [r3, #0]
 80043ea:	4b0f      	ldr	r3, [pc, #60]	; (8004428 <prvAddCurrentTaskToDelayedList+0x94>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	3304      	adds	r3, #4
 80043f0:	4619      	mov	r1, r3
 80043f2:	4610      	mov	r0, r2
 80043f4:	f7fe fbd5 	bl	8002ba2 <vListInsert>
}
 80043f8:	e010      	b.n	800441c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80043fa:	4b0e      	ldr	r3, [pc, #56]	; (8004434 <prvAddCurrentTaskToDelayedList+0xa0>)
 80043fc:	681a      	ldr	r2, [r3, #0]
 80043fe:	4b0a      	ldr	r3, [pc, #40]	; (8004428 <prvAddCurrentTaskToDelayedList+0x94>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	3304      	adds	r3, #4
 8004404:	4619      	mov	r1, r3
 8004406:	4610      	mov	r0, r2
 8004408:	f7fe fbcb 	bl	8002ba2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800440c:	4b0a      	ldr	r3, [pc, #40]	; (8004438 <prvAddCurrentTaskToDelayedList+0xa4>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	68ba      	ldr	r2, [r7, #8]
 8004412:	429a      	cmp	r2, r3
 8004414:	d202      	bcs.n	800441c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004416:	4a08      	ldr	r2, [pc, #32]	; (8004438 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	6013      	str	r3, [r2, #0]
}
 800441c:	bf00      	nop
 800441e:	3710      	adds	r7, #16
 8004420:	46bd      	mov	sp, r7
 8004422:	bd80      	pop	{r7, pc}
 8004424:	20000c9c 	.word	0x20000c9c
 8004428:	200007c4 	.word	0x200007c4
 800442c:	20000c84 	.word	0x20000c84
 8004430:	20000c54 	.word	0x20000c54
 8004434:	20000c50 	.word	0x20000c50
 8004438:	20000cb8 	.word	0x20000cb8

0800443c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b08a      	sub	sp, #40	; 0x28
 8004440:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004442:	2300      	movs	r3, #0
 8004444:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004446:	f000 fb07 	bl	8004a58 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800444a:	4b1c      	ldr	r3, [pc, #112]	; (80044bc <xTimerCreateTimerTask+0x80>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d021      	beq.n	8004496 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004452:	2300      	movs	r3, #0
 8004454:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004456:	2300      	movs	r3, #0
 8004458:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800445a:	1d3a      	adds	r2, r7, #4
 800445c:	f107 0108 	add.w	r1, r7, #8
 8004460:	f107 030c 	add.w	r3, r7, #12
 8004464:	4618      	mov	r0, r3
 8004466:	f7fe fb31 	bl	8002acc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800446a:	6879      	ldr	r1, [r7, #4]
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	68fa      	ldr	r2, [r7, #12]
 8004470:	9202      	str	r2, [sp, #8]
 8004472:	9301      	str	r3, [sp, #4]
 8004474:	2302      	movs	r3, #2
 8004476:	9300      	str	r3, [sp, #0]
 8004478:	2300      	movs	r3, #0
 800447a:	460a      	mov	r2, r1
 800447c:	4910      	ldr	r1, [pc, #64]	; (80044c0 <xTimerCreateTimerTask+0x84>)
 800447e:	4811      	ldr	r0, [pc, #68]	; (80044c4 <xTimerCreateTimerTask+0x88>)
 8004480:	f7ff f8de 	bl	8003640 <xTaskCreateStatic>
 8004484:	4603      	mov	r3, r0
 8004486:	4a10      	ldr	r2, [pc, #64]	; (80044c8 <xTimerCreateTimerTask+0x8c>)
 8004488:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800448a:	4b0f      	ldr	r3, [pc, #60]	; (80044c8 <xTimerCreateTimerTask+0x8c>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d001      	beq.n	8004496 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004492:	2301      	movs	r3, #1
 8004494:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d10a      	bne.n	80044b2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800449c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044a0:	f383 8811 	msr	BASEPRI, r3
 80044a4:	f3bf 8f6f 	isb	sy
 80044a8:	f3bf 8f4f 	dsb	sy
 80044ac:	613b      	str	r3, [r7, #16]
}
 80044ae:	bf00      	nop
 80044b0:	e7fe      	b.n	80044b0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80044b2:	697b      	ldr	r3, [r7, #20]
}
 80044b4:	4618      	mov	r0, r3
 80044b6:	3718      	adds	r7, #24
 80044b8:	46bd      	mov	sp, r7
 80044ba:	bd80      	pop	{r7, pc}
 80044bc:	20000cf4 	.word	0x20000cf4
 80044c0:	080053ec 	.word	0x080053ec
 80044c4:	08004601 	.word	0x08004601
 80044c8:	20000cf8 	.word	0x20000cf8

080044cc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b08a      	sub	sp, #40	; 0x28
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	60f8      	str	r0, [r7, #12]
 80044d4:	60b9      	str	r1, [r7, #8]
 80044d6:	607a      	str	r2, [r7, #4]
 80044d8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80044da:	2300      	movs	r3, #0
 80044dc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d10a      	bne.n	80044fa <xTimerGenericCommand+0x2e>
	__asm volatile
 80044e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044e8:	f383 8811 	msr	BASEPRI, r3
 80044ec:	f3bf 8f6f 	isb	sy
 80044f0:	f3bf 8f4f 	dsb	sy
 80044f4:	623b      	str	r3, [r7, #32]
}
 80044f6:	bf00      	nop
 80044f8:	e7fe      	b.n	80044f8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80044fa:	4b1a      	ldr	r3, [pc, #104]	; (8004564 <xTimerGenericCommand+0x98>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d02a      	beq.n	8004558 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004502:	68bb      	ldr	r3, [r7, #8]
 8004504:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	2b05      	cmp	r3, #5
 8004512:	dc18      	bgt.n	8004546 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004514:	f7ff feb2 	bl	800427c <xTaskGetSchedulerState>
 8004518:	4603      	mov	r3, r0
 800451a:	2b02      	cmp	r3, #2
 800451c:	d109      	bne.n	8004532 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800451e:	4b11      	ldr	r3, [pc, #68]	; (8004564 <xTimerGenericCommand+0x98>)
 8004520:	6818      	ldr	r0, [r3, #0]
 8004522:	f107 0110 	add.w	r1, r7, #16
 8004526:	2300      	movs	r3, #0
 8004528:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800452a:	f7fe fca1 	bl	8002e70 <xQueueGenericSend>
 800452e:	6278      	str	r0, [r7, #36]	; 0x24
 8004530:	e012      	b.n	8004558 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004532:	4b0c      	ldr	r3, [pc, #48]	; (8004564 <xTimerGenericCommand+0x98>)
 8004534:	6818      	ldr	r0, [r3, #0]
 8004536:	f107 0110 	add.w	r1, r7, #16
 800453a:	2300      	movs	r3, #0
 800453c:	2200      	movs	r2, #0
 800453e:	f7fe fc97 	bl	8002e70 <xQueueGenericSend>
 8004542:	6278      	str	r0, [r7, #36]	; 0x24
 8004544:	e008      	b.n	8004558 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004546:	4b07      	ldr	r3, [pc, #28]	; (8004564 <xTimerGenericCommand+0x98>)
 8004548:	6818      	ldr	r0, [r3, #0]
 800454a:	f107 0110 	add.w	r1, r7, #16
 800454e:	2300      	movs	r3, #0
 8004550:	683a      	ldr	r2, [r7, #0]
 8004552:	f7fe fd8b 	bl	800306c <xQueueGenericSendFromISR>
 8004556:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800455a:	4618      	mov	r0, r3
 800455c:	3728      	adds	r7, #40	; 0x28
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}
 8004562:	bf00      	nop
 8004564:	20000cf4 	.word	0x20000cf4

08004568 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b088      	sub	sp, #32
 800456c:	af02      	add	r7, sp, #8
 800456e:	6078      	str	r0, [r7, #4]
 8004570:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004572:	4b22      	ldr	r3, [pc, #136]	; (80045fc <prvProcessExpiredTimer+0x94>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	68db      	ldr	r3, [r3, #12]
 8004578:	68db      	ldr	r3, [r3, #12]
 800457a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800457c:	697b      	ldr	r3, [r7, #20]
 800457e:	3304      	adds	r3, #4
 8004580:	4618      	mov	r0, r3
 8004582:	f7fe fb47 	bl	8002c14 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800458c:	f003 0304 	and.w	r3, r3, #4
 8004590:	2b00      	cmp	r3, #0
 8004592:	d022      	beq.n	80045da <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004594:	697b      	ldr	r3, [r7, #20]
 8004596:	699a      	ldr	r2, [r3, #24]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	18d1      	adds	r1, r2, r3
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	683a      	ldr	r2, [r7, #0]
 80045a0:	6978      	ldr	r0, [r7, #20]
 80045a2:	f000 f8d1 	bl	8004748 <prvInsertTimerInActiveList>
 80045a6:	4603      	mov	r3, r0
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d01f      	beq.n	80045ec <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80045ac:	2300      	movs	r3, #0
 80045ae:	9300      	str	r3, [sp, #0]
 80045b0:	2300      	movs	r3, #0
 80045b2:	687a      	ldr	r2, [r7, #4]
 80045b4:	2100      	movs	r1, #0
 80045b6:	6978      	ldr	r0, [r7, #20]
 80045b8:	f7ff ff88 	bl	80044cc <xTimerGenericCommand>
 80045bc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d113      	bne.n	80045ec <prvProcessExpiredTimer+0x84>
	__asm volatile
 80045c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045c8:	f383 8811 	msr	BASEPRI, r3
 80045cc:	f3bf 8f6f 	isb	sy
 80045d0:	f3bf 8f4f 	dsb	sy
 80045d4:	60fb      	str	r3, [r7, #12]
}
 80045d6:	bf00      	nop
 80045d8:	e7fe      	b.n	80045d8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80045da:	697b      	ldr	r3, [r7, #20]
 80045dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80045e0:	f023 0301 	bic.w	r3, r3, #1
 80045e4:	b2da      	uxtb	r2, r3
 80045e6:	697b      	ldr	r3, [r7, #20]
 80045e8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	6a1b      	ldr	r3, [r3, #32]
 80045f0:	6978      	ldr	r0, [r7, #20]
 80045f2:	4798      	blx	r3
}
 80045f4:	bf00      	nop
 80045f6:	3718      	adds	r7, #24
 80045f8:	46bd      	mov	sp, r7
 80045fa:	bd80      	pop	{r7, pc}
 80045fc:	20000cec 	.word	0x20000cec

08004600 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b084      	sub	sp, #16
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004608:	f107 0308 	add.w	r3, r7, #8
 800460c:	4618      	mov	r0, r3
 800460e:	f000 f857 	bl	80046c0 <prvGetNextExpireTime>
 8004612:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	4619      	mov	r1, r3
 8004618:	68f8      	ldr	r0, [r7, #12]
 800461a:	f000 f803 	bl	8004624 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800461e:	f000 f8d5 	bl	80047cc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004622:	e7f1      	b.n	8004608 <prvTimerTask+0x8>

08004624 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b084      	sub	sp, #16
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
 800462c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800462e:	f7ff fa43 	bl	8003ab8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004632:	f107 0308 	add.w	r3, r7, #8
 8004636:	4618      	mov	r0, r3
 8004638:	f000 f866 	bl	8004708 <prvSampleTimeNow>
 800463c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d130      	bne.n	80046a6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d10a      	bne.n	8004660 <prvProcessTimerOrBlockTask+0x3c>
 800464a:	687a      	ldr	r2, [r7, #4]
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	429a      	cmp	r2, r3
 8004650:	d806      	bhi.n	8004660 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004652:	f7ff fa3f 	bl	8003ad4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004656:	68f9      	ldr	r1, [r7, #12]
 8004658:	6878      	ldr	r0, [r7, #4]
 800465a:	f7ff ff85 	bl	8004568 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800465e:	e024      	b.n	80046aa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d008      	beq.n	8004678 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004666:	4b13      	ldr	r3, [pc, #76]	; (80046b4 <prvProcessTimerOrBlockTask+0x90>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d101      	bne.n	8004674 <prvProcessTimerOrBlockTask+0x50>
 8004670:	2301      	movs	r3, #1
 8004672:	e000      	b.n	8004676 <prvProcessTimerOrBlockTask+0x52>
 8004674:	2300      	movs	r3, #0
 8004676:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004678:	4b0f      	ldr	r3, [pc, #60]	; (80046b8 <prvProcessTimerOrBlockTask+0x94>)
 800467a:	6818      	ldr	r0, [r3, #0]
 800467c:	687a      	ldr	r2, [r7, #4]
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	1ad3      	subs	r3, r2, r3
 8004682:	683a      	ldr	r2, [r7, #0]
 8004684:	4619      	mov	r1, r3
 8004686:	f7fe ffa7 	bl	80035d8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800468a:	f7ff fa23 	bl	8003ad4 <xTaskResumeAll>
 800468e:	4603      	mov	r3, r0
 8004690:	2b00      	cmp	r3, #0
 8004692:	d10a      	bne.n	80046aa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004694:	4b09      	ldr	r3, [pc, #36]	; (80046bc <prvProcessTimerOrBlockTask+0x98>)
 8004696:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800469a:	601a      	str	r2, [r3, #0]
 800469c:	f3bf 8f4f 	dsb	sy
 80046a0:	f3bf 8f6f 	isb	sy
}
 80046a4:	e001      	b.n	80046aa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80046a6:	f7ff fa15 	bl	8003ad4 <xTaskResumeAll>
}
 80046aa:	bf00      	nop
 80046ac:	3710      	adds	r7, #16
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bd80      	pop	{r7, pc}
 80046b2:	bf00      	nop
 80046b4:	20000cf0 	.word	0x20000cf0
 80046b8:	20000cf4 	.word	0x20000cf4
 80046bc:	e000ed04 	.word	0xe000ed04

080046c0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80046c0:	b480      	push	{r7}
 80046c2:	b085      	sub	sp, #20
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80046c8:	4b0e      	ldr	r3, [pc, #56]	; (8004704 <prvGetNextExpireTime+0x44>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d101      	bne.n	80046d6 <prvGetNextExpireTime+0x16>
 80046d2:	2201      	movs	r2, #1
 80046d4:	e000      	b.n	80046d8 <prvGetNextExpireTime+0x18>
 80046d6:	2200      	movs	r2, #0
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d105      	bne.n	80046f0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80046e4:	4b07      	ldr	r3, [pc, #28]	; (8004704 <prvGetNextExpireTime+0x44>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	68db      	ldr	r3, [r3, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	60fb      	str	r3, [r7, #12]
 80046ee:	e001      	b.n	80046f4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80046f0:	2300      	movs	r3, #0
 80046f2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80046f4:	68fb      	ldr	r3, [r7, #12]
}
 80046f6:	4618      	mov	r0, r3
 80046f8:	3714      	adds	r7, #20
 80046fa:	46bd      	mov	sp, r7
 80046fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004700:	4770      	bx	lr
 8004702:	bf00      	nop
 8004704:	20000cec 	.word	0x20000cec

08004708 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b084      	sub	sp, #16
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004710:	f7ff fa7e 	bl	8003c10 <xTaskGetTickCount>
 8004714:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004716:	4b0b      	ldr	r3, [pc, #44]	; (8004744 <prvSampleTimeNow+0x3c>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	68fa      	ldr	r2, [r7, #12]
 800471c:	429a      	cmp	r2, r3
 800471e:	d205      	bcs.n	800472c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004720:	f000 f936 	bl	8004990 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2201      	movs	r2, #1
 8004728:	601a      	str	r2, [r3, #0]
 800472a:	e002      	b.n	8004732 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2200      	movs	r2, #0
 8004730:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004732:	4a04      	ldr	r2, [pc, #16]	; (8004744 <prvSampleTimeNow+0x3c>)
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004738:	68fb      	ldr	r3, [r7, #12]
}
 800473a:	4618      	mov	r0, r3
 800473c:	3710      	adds	r7, #16
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}
 8004742:	bf00      	nop
 8004744:	20000cfc 	.word	0x20000cfc

08004748 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b086      	sub	sp, #24
 800474c:	af00      	add	r7, sp, #0
 800474e:	60f8      	str	r0, [r7, #12]
 8004750:	60b9      	str	r1, [r7, #8]
 8004752:	607a      	str	r2, [r7, #4]
 8004754:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004756:	2300      	movs	r3, #0
 8004758:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	68ba      	ldr	r2, [r7, #8]
 800475e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	68fa      	ldr	r2, [r7, #12]
 8004764:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004766:	68ba      	ldr	r2, [r7, #8]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	429a      	cmp	r2, r3
 800476c:	d812      	bhi.n	8004794 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800476e:	687a      	ldr	r2, [r7, #4]
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	1ad2      	subs	r2, r2, r3
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	699b      	ldr	r3, [r3, #24]
 8004778:	429a      	cmp	r2, r3
 800477a:	d302      	bcc.n	8004782 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800477c:	2301      	movs	r3, #1
 800477e:	617b      	str	r3, [r7, #20]
 8004780:	e01b      	b.n	80047ba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004782:	4b10      	ldr	r3, [pc, #64]	; (80047c4 <prvInsertTimerInActiveList+0x7c>)
 8004784:	681a      	ldr	r2, [r3, #0]
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	3304      	adds	r3, #4
 800478a:	4619      	mov	r1, r3
 800478c:	4610      	mov	r0, r2
 800478e:	f7fe fa08 	bl	8002ba2 <vListInsert>
 8004792:	e012      	b.n	80047ba <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004794:	687a      	ldr	r2, [r7, #4]
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	429a      	cmp	r2, r3
 800479a:	d206      	bcs.n	80047aa <prvInsertTimerInActiveList+0x62>
 800479c:	68ba      	ldr	r2, [r7, #8]
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	429a      	cmp	r2, r3
 80047a2:	d302      	bcc.n	80047aa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80047a4:	2301      	movs	r3, #1
 80047a6:	617b      	str	r3, [r7, #20]
 80047a8:	e007      	b.n	80047ba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80047aa:	4b07      	ldr	r3, [pc, #28]	; (80047c8 <prvInsertTimerInActiveList+0x80>)
 80047ac:	681a      	ldr	r2, [r3, #0]
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	3304      	adds	r3, #4
 80047b2:	4619      	mov	r1, r3
 80047b4:	4610      	mov	r0, r2
 80047b6:	f7fe f9f4 	bl	8002ba2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80047ba:	697b      	ldr	r3, [r7, #20]
}
 80047bc:	4618      	mov	r0, r3
 80047be:	3718      	adds	r7, #24
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bd80      	pop	{r7, pc}
 80047c4:	20000cf0 	.word	0x20000cf0
 80047c8:	20000cec 	.word	0x20000cec

080047cc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b08e      	sub	sp, #56	; 0x38
 80047d0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80047d2:	e0ca      	b.n	800496a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	da18      	bge.n	800480c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80047da:	1d3b      	adds	r3, r7, #4
 80047dc:	3304      	adds	r3, #4
 80047de:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80047e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d10a      	bne.n	80047fc <prvProcessReceivedCommands+0x30>
	__asm volatile
 80047e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047ea:	f383 8811 	msr	BASEPRI, r3
 80047ee:	f3bf 8f6f 	isb	sy
 80047f2:	f3bf 8f4f 	dsb	sy
 80047f6:	61fb      	str	r3, [r7, #28]
}
 80047f8:	bf00      	nop
 80047fa:	e7fe      	b.n	80047fa <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80047fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004802:	6850      	ldr	r0, [r2, #4]
 8004804:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004806:	6892      	ldr	r2, [r2, #8]
 8004808:	4611      	mov	r1, r2
 800480a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2b00      	cmp	r3, #0
 8004810:	f2c0 80ab 	blt.w	800496a <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800481a:	695b      	ldr	r3, [r3, #20]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d004      	beq.n	800482a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004822:	3304      	adds	r3, #4
 8004824:	4618      	mov	r0, r3
 8004826:	f7fe f9f5 	bl	8002c14 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800482a:	463b      	mov	r3, r7
 800482c:	4618      	mov	r0, r3
 800482e:	f7ff ff6b 	bl	8004708 <prvSampleTimeNow>
 8004832:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2b09      	cmp	r3, #9
 8004838:	f200 8096 	bhi.w	8004968 <prvProcessReceivedCommands+0x19c>
 800483c:	a201      	add	r2, pc, #4	; (adr r2, 8004844 <prvProcessReceivedCommands+0x78>)
 800483e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004842:	bf00      	nop
 8004844:	0800486d 	.word	0x0800486d
 8004848:	0800486d 	.word	0x0800486d
 800484c:	0800486d 	.word	0x0800486d
 8004850:	080048e1 	.word	0x080048e1
 8004854:	080048f5 	.word	0x080048f5
 8004858:	0800493f 	.word	0x0800493f
 800485c:	0800486d 	.word	0x0800486d
 8004860:	0800486d 	.word	0x0800486d
 8004864:	080048e1 	.word	0x080048e1
 8004868:	080048f5 	.word	0x080048f5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800486c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800486e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004872:	f043 0301 	orr.w	r3, r3, #1
 8004876:	b2da      	uxtb	r2, r3
 8004878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800487a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800487e:	68ba      	ldr	r2, [r7, #8]
 8004880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004882:	699b      	ldr	r3, [r3, #24]
 8004884:	18d1      	adds	r1, r2, r3
 8004886:	68bb      	ldr	r3, [r7, #8]
 8004888:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800488a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800488c:	f7ff ff5c 	bl	8004748 <prvInsertTimerInActiveList>
 8004890:	4603      	mov	r3, r0
 8004892:	2b00      	cmp	r3, #0
 8004894:	d069      	beq.n	800496a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004898:	6a1b      	ldr	r3, [r3, #32]
 800489a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800489c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800489e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80048a4:	f003 0304 	and.w	r3, r3, #4
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d05e      	beq.n	800496a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80048ac:	68ba      	ldr	r2, [r7, #8]
 80048ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048b0:	699b      	ldr	r3, [r3, #24]
 80048b2:	441a      	add	r2, r3
 80048b4:	2300      	movs	r3, #0
 80048b6:	9300      	str	r3, [sp, #0]
 80048b8:	2300      	movs	r3, #0
 80048ba:	2100      	movs	r1, #0
 80048bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80048be:	f7ff fe05 	bl	80044cc <xTimerGenericCommand>
 80048c2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80048c4:	6a3b      	ldr	r3, [r7, #32]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d14f      	bne.n	800496a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80048ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048ce:	f383 8811 	msr	BASEPRI, r3
 80048d2:	f3bf 8f6f 	isb	sy
 80048d6:	f3bf 8f4f 	dsb	sy
 80048da:	61bb      	str	r3, [r7, #24]
}
 80048dc:	bf00      	nop
 80048de:	e7fe      	b.n	80048de <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80048e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048e2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80048e6:	f023 0301 	bic.w	r3, r3, #1
 80048ea:	b2da      	uxtb	r2, r3
 80048ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048ee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80048f2:	e03a      	b.n	800496a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80048f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048f6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80048fa:	f043 0301 	orr.w	r3, r3, #1
 80048fe:	b2da      	uxtb	r2, r3
 8004900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004902:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004906:	68ba      	ldr	r2, [r7, #8]
 8004908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800490a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800490c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800490e:	699b      	ldr	r3, [r3, #24]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d10a      	bne.n	800492a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8004914:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004918:	f383 8811 	msr	BASEPRI, r3
 800491c:	f3bf 8f6f 	isb	sy
 8004920:	f3bf 8f4f 	dsb	sy
 8004924:	617b      	str	r3, [r7, #20]
}
 8004926:	bf00      	nop
 8004928:	e7fe      	b.n	8004928 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800492a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800492c:	699a      	ldr	r2, [r3, #24]
 800492e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004930:	18d1      	adds	r1, r2, r3
 8004932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004934:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004936:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004938:	f7ff ff06 	bl	8004748 <prvInsertTimerInActiveList>
					break;
 800493c:	e015      	b.n	800496a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800493e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004940:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004944:	f003 0302 	and.w	r3, r3, #2
 8004948:	2b00      	cmp	r3, #0
 800494a:	d103      	bne.n	8004954 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800494c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800494e:	f000 fbdf 	bl	8005110 <vPortFree>
 8004952:	e00a      	b.n	800496a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004956:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800495a:	f023 0301 	bic.w	r3, r3, #1
 800495e:	b2da      	uxtb	r2, r3
 8004960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004962:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004966:	e000      	b.n	800496a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8004968:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800496a:	4b08      	ldr	r3, [pc, #32]	; (800498c <prvProcessReceivedCommands+0x1c0>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	1d39      	adds	r1, r7, #4
 8004970:	2200      	movs	r2, #0
 8004972:	4618      	mov	r0, r3
 8004974:	f7fe fc16 	bl	80031a4 <xQueueReceive>
 8004978:	4603      	mov	r3, r0
 800497a:	2b00      	cmp	r3, #0
 800497c:	f47f af2a 	bne.w	80047d4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8004980:	bf00      	nop
 8004982:	bf00      	nop
 8004984:	3730      	adds	r7, #48	; 0x30
 8004986:	46bd      	mov	sp, r7
 8004988:	bd80      	pop	{r7, pc}
 800498a:	bf00      	nop
 800498c:	20000cf4 	.word	0x20000cf4

08004990 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b088      	sub	sp, #32
 8004994:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004996:	e048      	b.n	8004a2a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004998:	4b2d      	ldr	r3, [pc, #180]	; (8004a50 <prvSwitchTimerLists+0xc0>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	68db      	ldr	r3, [r3, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80049a2:	4b2b      	ldr	r3, [pc, #172]	; (8004a50 <prvSwitchTimerLists+0xc0>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	68db      	ldr	r3, [r3, #12]
 80049a8:	68db      	ldr	r3, [r3, #12]
 80049aa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	3304      	adds	r3, #4
 80049b0:	4618      	mov	r0, r3
 80049b2:	f7fe f92f 	bl	8002c14 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	6a1b      	ldr	r3, [r3, #32]
 80049ba:	68f8      	ldr	r0, [r7, #12]
 80049bc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80049c4:	f003 0304 	and.w	r3, r3, #4
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d02e      	beq.n	8004a2a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	699b      	ldr	r3, [r3, #24]
 80049d0:	693a      	ldr	r2, [r7, #16]
 80049d2:	4413      	add	r3, r2
 80049d4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80049d6:	68ba      	ldr	r2, [r7, #8]
 80049d8:	693b      	ldr	r3, [r7, #16]
 80049da:	429a      	cmp	r2, r3
 80049dc:	d90e      	bls.n	80049fc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	68ba      	ldr	r2, [r7, #8]
 80049e2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	68fa      	ldr	r2, [r7, #12]
 80049e8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80049ea:	4b19      	ldr	r3, [pc, #100]	; (8004a50 <prvSwitchTimerLists+0xc0>)
 80049ec:	681a      	ldr	r2, [r3, #0]
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	3304      	adds	r3, #4
 80049f2:	4619      	mov	r1, r3
 80049f4:	4610      	mov	r0, r2
 80049f6:	f7fe f8d4 	bl	8002ba2 <vListInsert>
 80049fa:	e016      	b.n	8004a2a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80049fc:	2300      	movs	r3, #0
 80049fe:	9300      	str	r3, [sp, #0]
 8004a00:	2300      	movs	r3, #0
 8004a02:	693a      	ldr	r2, [r7, #16]
 8004a04:	2100      	movs	r1, #0
 8004a06:	68f8      	ldr	r0, [r7, #12]
 8004a08:	f7ff fd60 	bl	80044cc <xTimerGenericCommand>
 8004a0c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d10a      	bne.n	8004a2a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8004a14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a18:	f383 8811 	msr	BASEPRI, r3
 8004a1c:	f3bf 8f6f 	isb	sy
 8004a20:	f3bf 8f4f 	dsb	sy
 8004a24:	603b      	str	r3, [r7, #0]
}
 8004a26:	bf00      	nop
 8004a28:	e7fe      	b.n	8004a28 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004a2a:	4b09      	ldr	r3, [pc, #36]	; (8004a50 <prvSwitchTimerLists+0xc0>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d1b1      	bne.n	8004998 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004a34:	4b06      	ldr	r3, [pc, #24]	; (8004a50 <prvSwitchTimerLists+0xc0>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004a3a:	4b06      	ldr	r3, [pc, #24]	; (8004a54 <prvSwitchTimerLists+0xc4>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a04      	ldr	r2, [pc, #16]	; (8004a50 <prvSwitchTimerLists+0xc0>)
 8004a40:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004a42:	4a04      	ldr	r2, [pc, #16]	; (8004a54 <prvSwitchTimerLists+0xc4>)
 8004a44:	697b      	ldr	r3, [r7, #20]
 8004a46:	6013      	str	r3, [r2, #0]
}
 8004a48:	bf00      	nop
 8004a4a:	3718      	adds	r7, #24
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	bd80      	pop	{r7, pc}
 8004a50:	20000cec 	.word	0x20000cec
 8004a54:	20000cf0 	.word	0x20000cf0

08004a58 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b082      	sub	sp, #8
 8004a5c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004a5e:	f000 f969 	bl	8004d34 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004a62:	4b15      	ldr	r3, [pc, #84]	; (8004ab8 <prvCheckForValidListAndQueue+0x60>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d120      	bne.n	8004aac <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004a6a:	4814      	ldr	r0, [pc, #80]	; (8004abc <prvCheckForValidListAndQueue+0x64>)
 8004a6c:	f7fe f848 	bl	8002b00 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004a70:	4813      	ldr	r0, [pc, #76]	; (8004ac0 <prvCheckForValidListAndQueue+0x68>)
 8004a72:	f7fe f845 	bl	8002b00 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004a76:	4b13      	ldr	r3, [pc, #76]	; (8004ac4 <prvCheckForValidListAndQueue+0x6c>)
 8004a78:	4a10      	ldr	r2, [pc, #64]	; (8004abc <prvCheckForValidListAndQueue+0x64>)
 8004a7a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004a7c:	4b12      	ldr	r3, [pc, #72]	; (8004ac8 <prvCheckForValidListAndQueue+0x70>)
 8004a7e:	4a10      	ldr	r2, [pc, #64]	; (8004ac0 <prvCheckForValidListAndQueue+0x68>)
 8004a80:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004a82:	2300      	movs	r3, #0
 8004a84:	9300      	str	r3, [sp, #0]
 8004a86:	4b11      	ldr	r3, [pc, #68]	; (8004acc <prvCheckForValidListAndQueue+0x74>)
 8004a88:	4a11      	ldr	r2, [pc, #68]	; (8004ad0 <prvCheckForValidListAndQueue+0x78>)
 8004a8a:	2110      	movs	r1, #16
 8004a8c:	200a      	movs	r0, #10
 8004a8e:	f7fe f953 	bl	8002d38 <xQueueGenericCreateStatic>
 8004a92:	4603      	mov	r3, r0
 8004a94:	4a08      	ldr	r2, [pc, #32]	; (8004ab8 <prvCheckForValidListAndQueue+0x60>)
 8004a96:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004a98:	4b07      	ldr	r3, [pc, #28]	; (8004ab8 <prvCheckForValidListAndQueue+0x60>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d005      	beq.n	8004aac <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004aa0:	4b05      	ldr	r3, [pc, #20]	; (8004ab8 <prvCheckForValidListAndQueue+0x60>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	490b      	ldr	r1, [pc, #44]	; (8004ad4 <prvCheckForValidListAndQueue+0x7c>)
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	f7fe fd6c 	bl	8003584 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004aac:	f000 f972 	bl	8004d94 <vPortExitCritical>
}
 8004ab0:	bf00      	nop
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bd80      	pop	{r7, pc}
 8004ab6:	bf00      	nop
 8004ab8:	20000cf4 	.word	0x20000cf4
 8004abc:	20000cc4 	.word	0x20000cc4
 8004ac0:	20000cd8 	.word	0x20000cd8
 8004ac4:	20000cec 	.word	0x20000cec
 8004ac8:	20000cf0 	.word	0x20000cf0
 8004acc:	20000da0 	.word	0x20000da0
 8004ad0:	20000d00 	.word	0x20000d00
 8004ad4:	080053f4 	.word	0x080053f4

08004ad8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b085      	sub	sp, #20
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	60f8      	str	r0, [r7, #12]
 8004ae0:	60b9      	str	r1, [r7, #8]
 8004ae2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	3b04      	subs	r3, #4
 8004ae8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004af0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	3b04      	subs	r3, #4
 8004af6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	f023 0201 	bic.w	r2, r3, #1
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	3b04      	subs	r3, #4
 8004b06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004b08:	4a0c      	ldr	r2, [pc, #48]	; (8004b3c <pxPortInitialiseStack+0x64>)
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	3b14      	subs	r3, #20
 8004b12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004b14:	687a      	ldr	r2, [r7, #4]
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	3b04      	subs	r3, #4
 8004b1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	f06f 0202 	mvn.w	r2, #2
 8004b26:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	3b20      	subs	r3, #32
 8004b2c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
}
 8004b30:	4618      	mov	r0, r3
 8004b32:	3714      	adds	r7, #20
 8004b34:	46bd      	mov	sp, r7
 8004b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3a:	4770      	bx	lr
 8004b3c:	08004b41 	.word	0x08004b41

08004b40 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004b40:	b480      	push	{r7}
 8004b42:	b085      	sub	sp, #20
 8004b44:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004b46:	2300      	movs	r3, #0
 8004b48:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004b4a:	4b12      	ldr	r3, [pc, #72]	; (8004b94 <prvTaskExitError+0x54>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b52:	d00a      	beq.n	8004b6a <prvTaskExitError+0x2a>
	__asm volatile
 8004b54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b58:	f383 8811 	msr	BASEPRI, r3
 8004b5c:	f3bf 8f6f 	isb	sy
 8004b60:	f3bf 8f4f 	dsb	sy
 8004b64:	60fb      	str	r3, [r7, #12]
}
 8004b66:	bf00      	nop
 8004b68:	e7fe      	b.n	8004b68 <prvTaskExitError+0x28>
	__asm volatile
 8004b6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b6e:	f383 8811 	msr	BASEPRI, r3
 8004b72:	f3bf 8f6f 	isb	sy
 8004b76:	f3bf 8f4f 	dsb	sy
 8004b7a:	60bb      	str	r3, [r7, #8]
}
 8004b7c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004b7e:	bf00      	nop
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d0fc      	beq.n	8004b80 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004b86:	bf00      	nop
 8004b88:	bf00      	nop
 8004b8a:	3714      	adds	r7, #20
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b92:	4770      	bx	lr
 8004b94:	2000000c 	.word	0x2000000c
	...

08004ba0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004ba0:	4b07      	ldr	r3, [pc, #28]	; (8004bc0 <pxCurrentTCBConst2>)
 8004ba2:	6819      	ldr	r1, [r3, #0]
 8004ba4:	6808      	ldr	r0, [r1, #0]
 8004ba6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004baa:	f380 8809 	msr	PSP, r0
 8004bae:	f3bf 8f6f 	isb	sy
 8004bb2:	f04f 0000 	mov.w	r0, #0
 8004bb6:	f380 8811 	msr	BASEPRI, r0
 8004bba:	4770      	bx	lr
 8004bbc:	f3af 8000 	nop.w

08004bc0 <pxCurrentTCBConst2>:
 8004bc0:	200007c4 	.word	0x200007c4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004bc4:	bf00      	nop
 8004bc6:	bf00      	nop

08004bc8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004bc8:	4808      	ldr	r0, [pc, #32]	; (8004bec <prvPortStartFirstTask+0x24>)
 8004bca:	6800      	ldr	r0, [r0, #0]
 8004bcc:	6800      	ldr	r0, [r0, #0]
 8004bce:	f380 8808 	msr	MSP, r0
 8004bd2:	f04f 0000 	mov.w	r0, #0
 8004bd6:	f380 8814 	msr	CONTROL, r0
 8004bda:	b662      	cpsie	i
 8004bdc:	b661      	cpsie	f
 8004bde:	f3bf 8f4f 	dsb	sy
 8004be2:	f3bf 8f6f 	isb	sy
 8004be6:	df00      	svc	0
 8004be8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004bea:	bf00      	nop
 8004bec:	e000ed08 	.word	0xe000ed08

08004bf0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b086      	sub	sp, #24
 8004bf4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004bf6:	4b46      	ldr	r3, [pc, #280]	; (8004d10 <xPortStartScheduler+0x120>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4a46      	ldr	r2, [pc, #280]	; (8004d14 <xPortStartScheduler+0x124>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d10a      	bne.n	8004c16 <xPortStartScheduler+0x26>
	__asm volatile
 8004c00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c04:	f383 8811 	msr	BASEPRI, r3
 8004c08:	f3bf 8f6f 	isb	sy
 8004c0c:	f3bf 8f4f 	dsb	sy
 8004c10:	613b      	str	r3, [r7, #16]
}
 8004c12:	bf00      	nop
 8004c14:	e7fe      	b.n	8004c14 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004c16:	4b3e      	ldr	r3, [pc, #248]	; (8004d10 <xPortStartScheduler+0x120>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a3f      	ldr	r2, [pc, #252]	; (8004d18 <xPortStartScheduler+0x128>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d10a      	bne.n	8004c36 <xPortStartScheduler+0x46>
	__asm volatile
 8004c20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c24:	f383 8811 	msr	BASEPRI, r3
 8004c28:	f3bf 8f6f 	isb	sy
 8004c2c:	f3bf 8f4f 	dsb	sy
 8004c30:	60fb      	str	r3, [r7, #12]
}
 8004c32:	bf00      	nop
 8004c34:	e7fe      	b.n	8004c34 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004c36:	4b39      	ldr	r3, [pc, #228]	; (8004d1c <xPortStartScheduler+0x12c>)
 8004c38:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004c3a:	697b      	ldr	r3, [r7, #20]
 8004c3c:	781b      	ldrb	r3, [r3, #0]
 8004c3e:	b2db      	uxtb	r3, r3
 8004c40:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004c42:	697b      	ldr	r3, [r7, #20]
 8004c44:	22ff      	movs	r2, #255	; 0xff
 8004c46:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	781b      	ldrb	r3, [r3, #0]
 8004c4c:	b2db      	uxtb	r3, r3
 8004c4e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004c50:	78fb      	ldrb	r3, [r7, #3]
 8004c52:	b2db      	uxtb	r3, r3
 8004c54:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004c58:	b2da      	uxtb	r2, r3
 8004c5a:	4b31      	ldr	r3, [pc, #196]	; (8004d20 <xPortStartScheduler+0x130>)
 8004c5c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004c5e:	4b31      	ldr	r3, [pc, #196]	; (8004d24 <xPortStartScheduler+0x134>)
 8004c60:	2207      	movs	r2, #7
 8004c62:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004c64:	e009      	b.n	8004c7a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004c66:	4b2f      	ldr	r3, [pc, #188]	; (8004d24 <xPortStartScheduler+0x134>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	3b01      	subs	r3, #1
 8004c6c:	4a2d      	ldr	r2, [pc, #180]	; (8004d24 <xPortStartScheduler+0x134>)
 8004c6e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004c70:	78fb      	ldrb	r3, [r7, #3]
 8004c72:	b2db      	uxtb	r3, r3
 8004c74:	005b      	lsls	r3, r3, #1
 8004c76:	b2db      	uxtb	r3, r3
 8004c78:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004c7a:	78fb      	ldrb	r3, [r7, #3]
 8004c7c:	b2db      	uxtb	r3, r3
 8004c7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c82:	2b80      	cmp	r3, #128	; 0x80
 8004c84:	d0ef      	beq.n	8004c66 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004c86:	4b27      	ldr	r3, [pc, #156]	; (8004d24 <xPortStartScheduler+0x134>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f1c3 0307 	rsb	r3, r3, #7
 8004c8e:	2b04      	cmp	r3, #4
 8004c90:	d00a      	beq.n	8004ca8 <xPortStartScheduler+0xb8>
	__asm volatile
 8004c92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c96:	f383 8811 	msr	BASEPRI, r3
 8004c9a:	f3bf 8f6f 	isb	sy
 8004c9e:	f3bf 8f4f 	dsb	sy
 8004ca2:	60bb      	str	r3, [r7, #8]
}
 8004ca4:	bf00      	nop
 8004ca6:	e7fe      	b.n	8004ca6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004ca8:	4b1e      	ldr	r3, [pc, #120]	; (8004d24 <xPortStartScheduler+0x134>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	021b      	lsls	r3, r3, #8
 8004cae:	4a1d      	ldr	r2, [pc, #116]	; (8004d24 <xPortStartScheduler+0x134>)
 8004cb0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004cb2:	4b1c      	ldr	r3, [pc, #112]	; (8004d24 <xPortStartScheduler+0x134>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004cba:	4a1a      	ldr	r2, [pc, #104]	; (8004d24 <xPortStartScheduler+0x134>)
 8004cbc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	b2da      	uxtb	r2, r3
 8004cc2:	697b      	ldr	r3, [r7, #20]
 8004cc4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004cc6:	4b18      	ldr	r3, [pc, #96]	; (8004d28 <xPortStartScheduler+0x138>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a17      	ldr	r2, [pc, #92]	; (8004d28 <xPortStartScheduler+0x138>)
 8004ccc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004cd0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004cd2:	4b15      	ldr	r3, [pc, #84]	; (8004d28 <xPortStartScheduler+0x138>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4a14      	ldr	r2, [pc, #80]	; (8004d28 <xPortStartScheduler+0x138>)
 8004cd8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004cdc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004cde:	f000 f8dd 	bl	8004e9c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004ce2:	4b12      	ldr	r3, [pc, #72]	; (8004d2c <xPortStartScheduler+0x13c>)
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004ce8:	f000 f8fc 	bl	8004ee4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004cec:	4b10      	ldr	r3, [pc, #64]	; (8004d30 <xPortStartScheduler+0x140>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a0f      	ldr	r2, [pc, #60]	; (8004d30 <xPortStartScheduler+0x140>)
 8004cf2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004cf6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004cf8:	f7ff ff66 	bl	8004bc8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004cfc:	f7ff f852 	bl	8003da4 <vTaskSwitchContext>
	prvTaskExitError();
 8004d00:	f7ff ff1e 	bl	8004b40 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004d04:	2300      	movs	r3, #0
}
 8004d06:	4618      	mov	r0, r3
 8004d08:	3718      	adds	r7, #24
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bd80      	pop	{r7, pc}
 8004d0e:	bf00      	nop
 8004d10:	e000ed00 	.word	0xe000ed00
 8004d14:	410fc271 	.word	0x410fc271
 8004d18:	410fc270 	.word	0x410fc270
 8004d1c:	e000e400 	.word	0xe000e400
 8004d20:	20000df0 	.word	0x20000df0
 8004d24:	20000df4 	.word	0x20000df4
 8004d28:	e000ed20 	.word	0xe000ed20
 8004d2c:	2000000c 	.word	0x2000000c
 8004d30:	e000ef34 	.word	0xe000ef34

08004d34 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004d34:	b480      	push	{r7}
 8004d36:	b083      	sub	sp, #12
 8004d38:	af00      	add	r7, sp, #0
	__asm volatile
 8004d3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d3e:	f383 8811 	msr	BASEPRI, r3
 8004d42:	f3bf 8f6f 	isb	sy
 8004d46:	f3bf 8f4f 	dsb	sy
 8004d4a:	607b      	str	r3, [r7, #4]
}
 8004d4c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004d4e:	4b0f      	ldr	r3, [pc, #60]	; (8004d8c <vPortEnterCritical+0x58>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	3301      	adds	r3, #1
 8004d54:	4a0d      	ldr	r2, [pc, #52]	; (8004d8c <vPortEnterCritical+0x58>)
 8004d56:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004d58:	4b0c      	ldr	r3, [pc, #48]	; (8004d8c <vPortEnterCritical+0x58>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	2b01      	cmp	r3, #1
 8004d5e:	d10f      	bne.n	8004d80 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004d60:	4b0b      	ldr	r3, [pc, #44]	; (8004d90 <vPortEnterCritical+0x5c>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	b2db      	uxtb	r3, r3
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d00a      	beq.n	8004d80 <vPortEnterCritical+0x4c>
	__asm volatile
 8004d6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d6e:	f383 8811 	msr	BASEPRI, r3
 8004d72:	f3bf 8f6f 	isb	sy
 8004d76:	f3bf 8f4f 	dsb	sy
 8004d7a:	603b      	str	r3, [r7, #0]
}
 8004d7c:	bf00      	nop
 8004d7e:	e7fe      	b.n	8004d7e <vPortEnterCritical+0x4a>
	}
}
 8004d80:	bf00      	nop
 8004d82:	370c      	adds	r7, #12
 8004d84:	46bd      	mov	sp, r7
 8004d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8a:	4770      	bx	lr
 8004d8c:	2000000c 	.word	0x2000000c
 8004d90:	e000ed04 	.word	0xe000ed04

08004d94 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004d94:	b480      	push	{r7}
 8004d96:	b083      	sub	sp, #12
 8004d98:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004d9a:	4b12      	ldr	r3, [pc, #72]	; (8004de4 <vPortExitCritical+0x50>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d10a      	bne.n	8004db8 <vPortExitCritical+0x24>
	__asm volatile
 8004da2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004da6:	f383 8811 	msr	BASEPRI, r3
 8004daa:	f3bf 8f6f 	isb	sy
 8004dae:	f3bf 8f4f 	dsb	sy
 8004db2:	607b      	str	r3, [r7, #4]
}
 8004db4:	bf00      	nop
 8004db6:	e7fe      	b.n	8004db6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004db8:	4b0a      	ldr	r3, [pc, #40]	; (8004de4 <vPortExitCritical+0x50>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	3b01      	subs	r3, #1
 8004dbe:	4a09      	ldr	r2, [pc, #36]	; (8004de4 <vPortExitCritical+0x50>)
 8004dc0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004dc2:	4b08      	ldr	r3, [pc, #32]	; (8004de4 <vPortExitCritical+0x50>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d105      	bne.n	8004dd6 <vPortExitCritical+0x42>
 8004dca:	2300      	movs	r3, #0
 8004dcc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	f383 8811 	msr	BASEPRI, r3
}
 8004dd4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004dd6:	bf00      	nop
 8004dd8:	370c      	adds	r7, #12
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de0:	4770      	bx	lr
 8004de2:	bf00      	nop
 8004de4:	2000000c 	.word	0x2000000c
	...

08004df0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004df0:	f3ef 8009 	mrs	r0, PSP
 8004df4:	f3bf 8f6f 	isb	sy
 8004df8:	4b15      	ldr	r3, [pc, #84]	; (8004e50 <pxCurrentTCBConst>)
 8004dfa:	681a      	ldr	r2, [r3, #0]
 8004dfc:	f01e 0f10 	tst.w	lr, #16
 8004e00:	bf08      	it	eq
 8004e02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004e06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e0a:	6010      	str	r0, [r2, #0]
 8004e0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004e10:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004e14:	f380 8811 	msr	BASEPRI, r0
 8004e18:	f3bf 8f4f 	dsb	sy
 8004e1c:	f3bf 8f6f 	isb	sy
 8004e20:	f7fe ffc0 	bl	8003da4 <vTaskSwitchContext>
 8004e24:	f04f 0000 	mov.w	r0, #0
 8004e28:	f380 8811 	msr	BASEPRI, r0
 8004e2c:	bc09      	pop	{r0, r3}
 8004e2e:	6819      	ldr	r1, [r3, #0]
 8004e30:	6808      	ldr	r0, [r1, #0]
 8004e32:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e36:	f01e 0f10 	tst.w	lr, #16
 8004e3a:	bf08      	it	eq
 8004e3c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004e40:	f380 8809 	msr	PSP, r0
 8004e44:	f3bf 8f6f 	isb	sy
 8004e48:	4770      	bx	lr
 8004e4a:	bf00      	nop
 8004e4c:	f3af 8000 	nop.w

08004e50 <pxCurrentTCBConst>:
 8004e50:	200007c4 	.word	0x200007c4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004e54:	bf00      	nop
 8004e56:	bf00      	nop

08004e58 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b082      	sub	sp, #8
 8004e5c:	af00      	add	r7, sp, #0
	__asm volatile
 8004e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e62:	f383 8811 	msr	BASEPRI, r3
 8004e66:	f3bf 8f6f 	isb	sy
 8004e6a:	f3bf 8f4f 	dsb	sy
 8004e6e:	607b      	str	r3, [r7, #4]
}
 8004e70:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004e72:	f7fe fedd 	bl	8003c30 <xTaskIncrementTick>
 8004e76:	4603      	mov	r3, r0
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d003      	beq.n	8004e84 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004e7c:	4b06      	ldr	r3, [pc, #24]	; (8004e98 <xPortSysTickHandler+0x40>)
 8004e7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e82:	601a      	str	r2, [r3, #0]
 8004e84:	2300      	movs	r3, #0
 8004e86:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	f383 8811 	msr	BASEPRI, r3
}
 8004e8e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004e90:	bf00      	nop
 8004e92:	3708      	adds	r7, #8
 8004e94:	46bd      	mov	sp, r7
 8004e96:	bd80      	pop	{r7, pc}
 8004e98:	e000ed04 	.word	0xe000ed04

08004e9c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004ea0:	4b0b      	ldr	r3, [pc, #44]	; (8004ed0 <vPortSetupTimerInterrupt+0x34>)
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004ea6:	4b0b      	ldr	r3, [pc, #44]	; (8004ed4 <vPortSetupTimerInterrupt+0x38>)
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004eac:	4b0a      	ldr	r3, [pc, #40]	; (8004ed8 <vPortSetupTimerInterrupt+0x3c>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a0a      	ldr	r2, [pc, #40]	; (8004edc <vPortSetupTimerInterrupt+0x40>)
 8004eb2:	fba2 2303 	umull	r2, r3, r2, r3
 8004eb6:	099b      	lsrs	r3, r3, #6
 8004eb8:	4a09      	ldr	r2, [pc, #36]	; (8004ee0 <vPortSetupTimerInterrupt+0x44>)
 8004eba:	3b01      	subs	r3, #1
 8004ebc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004ebe:	4b04      	ldr	r3, [pc, #16]	; (8004ed0 <vPortSetupTimerInterrupt+0x34>)
 8004ec0:	2207      	movs	r2, #7
 8004ec2:	601a      	str	r2, [r3, #0]
}
 8004ec4:	bf00      	nop
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ecc:	4770      	bx	lr
 8004ece:	bf00      	nop
 8004ed0:	e000e010 	.word	0xe000e010
 8004ed4:	e000e018 	.word	0xe000e018
 8004ed8:	20000000 	.word	0x20000000
 8004edc:	10624dd3 	.word	0x10624dd3
 8004ee0:	e000e014 	.word	0xe000e014

08004ee4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004ee4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004ef4 <vPortEnableVFP+0x10>
 8004ee8:	6801      	ldr	r1, [r0, #0]
 8004eea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004eee:	6001      	str	r1, [r0, #0]
 8004ef0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004ef2:	bf00      	nop
 8004ef4:	e000ed88 	.word	0xe000ed88

08004ef8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004ef8:	b480      	push	{r7}
 8004efa:	b085      	sub	sp, #20
 8004efc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004efe:	f3ef 8305 	mrs	r3, IPSR
 8004f02:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	2b0f      	cmp	r3, #15
 8004f08:	d914      	bls.n	8004f34 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004f0a:	4a17      	ldr	r2, [pc, #92]	; (8004f68 <vPortValidateInterruptPriority+0x70>)
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	4413      	add	r3, r2
 8004f10:	781b      	ldrb	r3, [r3, #0]
 8004f12:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004f14:	4b15      	ldr	r3, [pc, #84]	; (8004f6c <vPortValidateInterruptPriority+0x74>)
 8004f16:	781b      	ldrb	r3, [r3, #0]
 8004f18:	7afa      	ldrb	r2, [r7, #11]
 8004f1a:	429a      	cmp	r2, r3
 8004f1c:	d20a      	bcs.n	8004f34 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8004f1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f22:	f383 8811 	msr	BASEPRI, r3
 8004f26:	f3bf 8f6f 	isb	sy
 8004f2a:	f3bf 8f4f 	dsb	sy
 8004f2e:	607b      	str	r3, [r7, #4]
}
 8004f30:	bf00      	nop
 8004f32:	e7fe      	b.n	8004f32 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004f34:	4b0e      	ldr	r3, [pc, #56]	; (8004f70 <vPortValidateInterruptPriority+0x78>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004f3c:	4b0d      	ldr	r3, [pc, #52]	; (8004f74 <vPortValidateInterruptPriority+0x7c>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	429a      	cmp	r2, r3
 8004f42:	d90a      	bls.n	8004f5a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004f44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f48:	f383 8811 	msr	BASEPRI, r3
 8004f4c:	f3bf 8f6f 	isb	sy
 8004f50:	f3bf 8f4f 	dsb	sy
 8004f54:	603b      	str	r3, [r7, #0]
}
 8004f56:	bf00      	nop
 8004f58:	e7fe      	b.n	8004f58 <vPortValidateInterruptPriority+0x60>
	}
 8004f5a:	bf00      	nop
 8004f5c:	3714      	adds	r7, #20
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f64:	4770      	bx	lr
 8004f66:	bf00      	nop
 8004f68:	e000e3f0 	.word	0xe000e3f0
 8004f6c:	20000df0 	.word	0x20000df0
 8004f70:	e000ed0c 	.word	0xe000ed0c
 8004f74:	20000df4 	.word	0x20000df4

08004f78 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b08a      	sub	sp, #40	; 0x28
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004f80:	2300      	movs	r3, #0
 8004f82:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004f84:	f7fe fd98 	bl	8003ab8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004f88:	4b5b      	ldr	r3, [pc, #364]	; (80050f8 <pvPortMalloc+0x180>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d101      	bne.n	8004f94 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004f90:	f000 f920 	bl	80051d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004f94:	4b59      	ldr	r3, [pc, #356]	; (80050fc <pvPortMalloc+0x184>)
 8004f96:	681a      	ldr	r2, [r3, #0]
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	4013      	ands	r3, r2
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	f040 8093 	bne.w	80050c8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d01d      	beq.n	8004fe4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004fa8:	2208      	movs	r2, #8
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	4413      	add	r3, r2
 8004fae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	f003 0307 	and.w	r3, r3, #7
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d014      	beq.n	8004fe4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	f023 0307 	bic.w	r3, r3, #7
 8004fc0:	3308      	adds	r3, #8
 8004fc2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	f003 0307 	and.w	r3, r3, #7
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d00a      	beq.n	8004fe4 <pvPortMalloc+0x6c>
	__asm volatile
 8004fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fd2:	f383 8811 	msr	BASEPRI, r3
 8004fd6:	f3bf 8f6f 	isb	sy
 8004fda:	f3bf 8f4f 	dsb	sy
 8004fde:	617b      	str	r3, [r7, #20]
}
 8004fe0:	bf00      	nop
 8004fe2:	e7fe      	b.n	8004fe2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d06e      	beq.n	80050c8 <pvPortMalloc+0x150>
 8004fea:	4b45      	ldr	r3, [pc, #276]	; (8005100 <pvPortMalloc+0x188>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	687a      	ldr	r2, [r7, #4]
 8004ff0:	429a      	cmp	r2, r3
 8004ff2:	d869      	bhi.n	80050c8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004ff4:	4b43      	ldr	r3, [pc, #268]	; (8005104 <pvPortMalloc+0x18c>)
 8004ff6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004ff8:	4b42      	ldr	r3, [pc, #264]	; (8005104 <pvPortMalloc+0x18c>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004ffe:	e004      	b.n	800500a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005002:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800500a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	687a      	ldr	r2, [r7, #4]
 8005010:	429a      	cmp	r2, r3
 8005012:	d903      	bls.n	800501c <pvPortMalloc+0xa4>
 8005014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d1f1      	bne.n	8005000 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800501c:	4b36      	ldr	r3, [pc, #216]	; (80050f8 <pvPortMalloc+0x180>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005022:	429a      	cmp	r2, r3
 8005024:	d050      	beq.n	80050c8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005026:	6a3b      	ldr	r3, [r7, #32]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	2208      	movs	r2, #8
 800502c:	4413      	add	r3, r2
 800502e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005032:	681a      	ldr	r2, [r3, #0]
 8005034:	6a3b      	ldr	r3, [r7, #32]
 8005036:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800503a:	685a      	ldr	r2, [r3, #4]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	1ad2      	subs	r2, r2, r3
 8005040:	2308      	movs	r3, #8
 8005042:	005b      	lsls	r3, r3, #1
 8005044:	429a      	cmp	r2, r3
 8005046:	d91f      	bls.n	8005088 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005048:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	4413      	add	r3, r2
 800504e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005050:	69bb      	ldr	r3, [r7, #24]
 8005052:	f003 0307 	and.w	r3, r3, #7
 8005056:	2b00      	cmp	r3, #0
 8005058:	d00a      	beq.n	8005070 <pvPortMalloc+0xf8>
	__asm volatile
 800505a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800505e:	f383 8811 	msr	BASEPRI, r3
 8005062:	f3bf 8f6f 	isb	sy
 8005066:	f3bf 8f4f 	dsb	sy
 800506a:	613b      	str	r3, [r7, #16]
}
 800506c:	bf00      	nop
 800506e:	e7fe      	b.n	800506e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005072:	685a      	ldr	r2, [r3, #4]
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	1ad2      	subs	r2, r2, r3
 8005078:	69bb      	ldr	r3, [r7, #24]
 800507a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800507c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800507e:	687a      	ldr	r2, [r7, #4]
 8005080:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005082:	69b8      	ldr	r0, [r7, #24]
 8005084:	f000 f908 	bl	8005298 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005088:	4b1d      	ldr	r3, [pc, #116]	; (8005100 <pvPortMalloc+0x188>)
 800508a:	681a      	ldr	r2, [r3, #0]
 800508c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	1ad3      	subs	r3, r2, r3
 8005092:	4a1b      	ldr	r2, [pc, #108]	; (8005100 <pvPortMalloc+0x188>)
 8005094:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005096:	4b1a      	ldr	r3, [pc, #104]	; (8005100 <pvPortMalloc+0x188>)
 8005098:	681a      	ldr	r2, [r3, #0]
 800509a:	4b1b      	ldr	r3, [pc, #108]	; (8005108 <pvPortMalloc+0x190>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	429a      	cmp	r2, r3
 80050a0:	d203      	bcs.n	80050aa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80050a2:	4b17      	ldr	r3, [pc, #92]	; (8005100 <pvPortMalloc+0x188>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4a18      	ldr	r2, [pc, #96]	; (8005108 <pvPortMalloc+0x190>)
 80050a8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80050aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ac:	685a      	ldr	r2, [r3, #4]
 80050ae:	4b13      	ldr	r3, [pc, #76]	; (80050fc <pvPortMalloc+0x184>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	431a      	orrs	r2, r3
 80050b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80050b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ba:	2200      	movs	r2, #0
 80050bc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80050be:	4b13      	ldr	r3, [pc, #76]	; (800510c <pvPortMalloc+0x194>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	3301      	adds	r3, #1
 80050c4:	4a11      	ldr	r2, [pc, #68]	; (800510c <pvPortMalloc+0x194>)
 80050c6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80050c8:	f7fe fd04 	bl	8003ad4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80050cc:	69fb      	ldr	r3, [r7, #28]
 80050ce:	f003 0307 	and.w	r3, r3, #7
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d00a      	beq.n	80050ec <pvPortMalloc+0x174>
	__asm volatile
 80050d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050da:	f383 8811 	msr	BASEPRI, r3
 80050de:	f3bf 8f6f 	isb	sy
 80050e2:	f3bf 8f4f 	dsb	sy
 80050e6:	60fb      	str	r3, [r7, #12]
}
 80050e8:	bf00      	nop
 80050ea:	e7fe      	b.n	80050ea <pvPortMalloc+0x172>
	return pvReturn;
 80050ec:	69fb      	ldr	r3, [r7, #28]
}
 80050ee:	4618      	mov	r0, r3
 80050f0:	3728      	adds	r7, #40	; 0x28
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bd80      	pop	{r7, pc}
 80050f6:	bf00      	nop
 80050f8:	20004a00 	.word	0x20004a00
 80050fc:	20004a14 	.word	0x20004a14
 8005100:	20004a04 	.word	0x20004a04
 8005104:	200049f8 	.word	0x200049f8
 8005108:	20004a08 	.word	0x20004a08
 800510c:	20004a0c 	.word	0x20004a0c

08005110 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b086      	sub	sp, #24
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d04d      	beq.n	80051be <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005122:	2308      	movs	r3, #8
 8005124:	425b      	negs	r3, r3
 8005126:	697a      	ldr	r2, [r7, #20]
 8005128:	4413      	add	r3, r2
 800512a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800512c:	697b      	ldr	r3, [r7, #20]
 800512e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005130:	693b      	ldr	r3, [r7, #16]
 8005132:	685a      	ldr	r2, [r3, #4]
 8005134:	4b24      	ldr	r3, [pc, #144]	; (80051c8 <vPortFree+0xb8>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4013      	ands	r3, r2
 800513a:	2b00      	cmp	r3, #0
 800513c:	d10a      	bne.n	8005154 <vPortFree+0x44>
	__asm volatile
 800513e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005142:	f383 8811 	msr	BASEPRI, r3
 8005146:	f3bf 8f6f 	isb	sy
 800514a:	f3bf 8f4f 	dsb	sy
 800514e:	60fb      	str	r3, [r7, #12]
}
 8005150:	bf00      	nop
 8005152:	e7fe      	b.n	8005152 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005154:	693b      	ldr	r3, [r7, #16]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d00a      	beq.n	8005172 <vPortFree+0x62>
	__asm volatile
 800515c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005160:	f383 8811 	msr	BASEPRI, r3
 8005164:	f3bf 8f6f 	isb	sy
 8005168:	f3bf 8f4f 	dsb	sy
 800516c:	60bb      	str	r3, [r7, #8]
}
 800516e:	bf00      	nop
 8005170:	e7fe      	b.n	8005170 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	685a      	ldr	r2, [r3, #4]
 8005176:	4b14      	ldr	r3, [pc, #80]	; (80051c8 <vPortFree+0xb8>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4013      	ands	r3, r2
 800517c:	2b00      	cmp	r3, #0
 800517e:	d01e      	beq.n	80051be <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005180:	693b      	ldr	r3, [r7, #16]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d11a      	bne.n	80051be <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005188:	693b      	ldr	r3, [r7, #16]
 800518a:	685a      	ldr	r2, [r3, #4]
 800518c:	4b0e      	ldr	r3, [pc, #56]	; (80051c8 <vPortFree+0xb8>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	43db      	mvns	r3, r3
 8005192:	401a      	ands	r2, r3
 8005194:	693b      	ldr	r3, [r7, #16]
 8005196:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005198:	f7fe fc8e 	bl	8003ab8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800519c:	693b      	ldr	r3, [r7, #16]
 800519e:	685a      	ldr	r2, [r3, #4]
 80051a0:	4b0a      	ldr	r3, [pc, #40]	; (80051cc <vPortFree+0xbc>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4413      	add	r3, r2
 80051a6:	4a09      	ldr	r2, [pc, #36]	; (80051cc <vPortFree+0xbc>)
 80051a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80051aa:	6938      	ldr	r0, [r7, #16]
 80051ac:	f000 f874 	bl	8005298 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80051b0:	4b07      	ldr	r3, [pc, #28]	; (80051d0 <vPortFree+0xc0>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	3301      	adds	r3, #1
 80051b6:	4a06      	ldr	r2, [pc, #24]	; (80051d0 <vPortFree+0xc0>)
 80051b8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80051ba:	f7fe fc8b 	bl	8003ad4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80051be:	bf00      	nop
 80051c0:	3718      	adds	r7, #24
 80051c2:	46bd      	mov	sp, r7
 80051c4:	bd80      	pop	{r7, pc}
 80051c6:	bf00      	nop
 80051c8:	20004a14 	.word	0x20004a14
 80051cc:	20004a04 	.word	0x20004a04
 80051d0:	20004a10 	.word	0x20004a10

080051d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80051d4:	b480      	push	{r7}
 80051d6:	b085      	sub	sp, #20
 80051d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80051da:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80051de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80051e0:	4b27      	ldr	r3, [pc, #156]	; (8005280 <prvHeapInit+0xac>)
 80051e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	f003 0307 	and.w	r3, r3, #7
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d00c      	beq.n	8005208 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	3307      	adds	r3, #7
 80051f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	f023 0307 	bic.w	r3, r3, #7
 80051fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80051fc:	68ba      	ldr	r2, [r7, #8]
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	1ad3      	subs	r3, r2, r3
 8005202:	4a1f      	ldr	r2, [pc, #124]	; (8005280 <prvHeapInit+0xac>)
 8005204:	4413      	add	r3, r2
 8005206:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800520c:	4a1d      	ldr	r2, [pc, #116]	; (8005284 <prvHeapInit+0xb0>)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005212:	4b1c      	ldr	r3, [pc, #112]	; (8005284 <prvHeapInit+0xb0>)
 8005214:	2200      	movs	r2, #0
 8005216:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	68ba      	ldr	r2, [r7, #8]
 800521c:	4413      	add	r3, r2
 800521e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005220:	2208      	movs	r2, #8
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	1a9b      	subs	r3, r3, r2
 8005226:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	f023 0307 	bic.w	r3, r3, #7
 800522e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	4a15      	ldr	r2, [pc, #84]	; (8005288 <prvHeapInit+0xb4>)
 8005234:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005236:	4b14      	ldr	r3, [pc, #80]	; (8005288 <prvHeapInit+0xb4>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	2200      	movs	r2, #0
 800523c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800523e:	4b12      	ldr	r3, [pc, #72]	; (8005288 <prvHeapInit+0xb4>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	2200      	movs	r2, #0
 8005244:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	68fa      	ldr	r2, [r7, #12]
 800524e:	1ad2      	subs	r2, r2, r3
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005254:	4b0c      	ldr	r3, [pc, #48]	; (8005288 <prvHeapInit+0xb4>)
 8005256:	681a      	ldr	r2, [r3, #0]
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	685b      	ldr	r3, [r3, #4]
 8005260:	4a0a      	ldr	r2, [pc, #40]	; (800528c <prvHeapInit+0xb8>)
 8005262:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	685b      	ldr	r3, [r3, #4]
 8005268:	4a09      	ldr	r2, [pc, #36]	; (8005290 <prvHeapInit+0xbc>)
 800526a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800526c:	4b09      	ldr	r3, [pc, #36]	; (8005294 <prvHeapInit+0xc0>)
 800526e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005272:	601a      	str	r2, [r3, #0]
}
 8005274:	bf00      	nop
 8005276:	3714      	adds	r7, #20
 8005278:	46bd      	mov	sp, r7
 800527a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527e:	4770      	bx	lr
 8005280:	20000df8 	.word	0x20000df8
 8005284:	200049f8 	.word	0x200049f8
 8005288:	20004a00 	.word	0x20004a00
 800528c:	20004a08 	.word	0x20004a08
 8005290:	20004a04 	.word	0x20004a04
 8005294:	20004a14 	.word	0x20004a14

08005298 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005298:	b480      	push	{r7}
 800529a:	b085      	sub	sp, #20
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80052a0:	4b28      	ldr	r3, [pc, #160]	; (8005344 <prvInsertBlockIntoFreeList+0xac>)
 80052a2:	60fb      	str	r3, [r7, #12]
 80052a4:	e002      	b.n	80052ac <prvInsertBlockIntoFreeList+0x14>
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	60fb      	str	r3, [r7, #12]
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	687a      	ldr	r2, [r7, #4]
 80052b2:	429a      	cmp	r2, r3
 80052b4:	d8f7      	bhi.n	80052a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	685b      	ldr	r3, [r3, #4]
 80052be:	68ba      	ldr	r2, [r7, #8]
 80052c0:	4413      	add	r3, r2
 80052c2:	687a      	ldr	r2, [r7, #4]
 80052c4:	429a      	cmp	r2, r3
 80052c6:	d108      	bne.n	80052da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	685a      	ldr	r2, [r3, #4]
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	685b      	ldr	r3, [r3, #4]
 80052d0:	441a      	add	r2, r3
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	685b      	ldr	r3, [r3, #4]
 80052e2:	68ba      	ldr	r2, [r7, #8]
 80052e4:	441a      	add	r2, r3
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	429a      	cmp	r2, r3
 80052ec:	d118      	bne.n	8005320 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681a      	ldr	r2, [r3, #0]
 80052f2:	4b15      	ldr	r3, [pc, #84]	; (8005348 <prvInsertBlockIntoFreeList+0xb0>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	429a      	cmp	r2, r3
 80052f8:	d00d      	beq.n	8005316 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	685a      	ldr	r2, [r3, #4]
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	441a      	add	r2, r3
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	681a      	ldr	r2, [r3, #0]
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	601a      	str	r2, [r3, #0]
 8005314:	e008      	b.n	8005328 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005316:	4b0c      	ldr	r3, [pc, #48]	; (8005348 <prvInsertBlockIntoFreeList+0xb0>)
 8005318:	681a      	ldr	r2, [r3, #0]
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	601a      	str	r2, [r3, #0]
 800531e:	e003      	b.n	8005328 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681a      	ldr	r2, [r3, #0]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005328:	68fa      	ldr	r2, [r7, #12]
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	429a      	cmp	r2, r3
 800532e:	d002      	beq.n	8005336 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	687a      	ldr	r2, [r7, #4]
 8005334:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005336:	bf00      	nop
 8005338:	3714      	adds	r7, #20
 800533a:	46bd      	mov	sp, r7
 800533c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005340:	4770      	bx	lr
 8005342:	bf00      	nop
 8005344:	200049f8 	.word	0x200049f8
 8005348:	20004a00 	.word	0x20004a00

0800534c <memset>:
 800534c:	4402      	add	r2, r0
 800534e:	4603      	mov	r3, r0
 8005350:	4293      	cmp	r3, r2
 8005352:	d100      	bne.n	8005356 <memset+0xa>
 8005354:	4770      	bx	lr
 8005356:	f803 1b01 	strb.w	r1, [r3], #1
 800535a:	e7f9      	b.n	8005350 <memset+0x4>

0800535c <__libc_init_array>:
 800535c:	b570      	push	{r4, r5, r6, lr}
 800535e:	4d0d      	ldr	r5, [pc, #52]	; (8005394 <__libc_init_array+0x38>)
 8005360:	4c0d      	ldr	r4, [pc, #52]	; (8005398 <__libc_init_array+0x3c>)
 8005362:	1b64      	subs	r4, r4, r5
 8005364:	10a4      	asrs	r4, r4, #2
 8005366:	2600      	movs	r6, #0
 8005368:	42a6      	cmp	r6, r4
 800536a:	d109      	bne.n	8005380 <__libc_init_array+0x24>
 800536c:	4d0b      	ldr	r5, [pc, #44]	; (800539c <__libc_init_array+0x40>)
 800536e:	4c0c      	ldr	r4, [pc, #48]	; (80053a0 <__libc_init_array+0x44>)
 8005370:	f000 f826 	bl	80053c0 <_init>
 8005374:	1b64      	subs	r4, r4, r5
 8005376:	10a4      	asrs	r4, r4, #2
 8005378:	2600      	movs	r6, #0
 800537a:	42a6      	cmp	r6, r4
 800537c:	d105      	bne.n	800538a <__libc_init_array+0x2e>
 800537e:	bd70      	pop	{r4, r5, r6, pc}
 8005380:	f855 3b04 	ldr.w	r3, [r5], #4
 8005384:	4798      	blx	r3
 8005386:	3601      	adds	r6, #1
 8005388:	e7ee      	b.n	8005368 <__libc_init_array+0xc>
 800538a:	f855 3b04 	ldr.w	r3, [r5], #4
 800538e:	4798      	blx	r3
 8005390:	3601      	adds	r6, #1
 8005392:	e7f2      	b.n	800537a <__libc_init_array+0x1e>
 8005394:	08005440 	.word	0x08005440
 8005398:	08005440 	.word	0x08005440
 800539c:	08005440 	.word	0x08005440
 80053a0:	08005444 	.word	0x08005444

080053a4 <memcpy>:
 80053a4:	440a      	add	r2, r1
 80053a6:	4291      	cmp	r1, r2
 80053a8:	f100 33ff 	add.w	r3, r0, #4294967295
 80053ac:	d100      	bne.n	80053b0 <memcpy+0xc>
 80053ae:	4770      	bx	lr
 80053b0:	b510      	push	{r4, lr}
 80053b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80053b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80053ba:	4291      	cmp	r1, r2
 80053bc:	d1f9      	bne.n	80053b2 <memcpy+0xe>
 80053be:	bd10      	pop	{r4, pc}

080053c0 <_init>:
 80053c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053c2:	bf00      	nop
 80053c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053c6:	bc08      	pop	{r3}
 80053c8:	469e      	mov	lr, r3
 80053ca:	4770      	bx	lr

080053cc <_fini>:
 80053cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053ce:	bf00      	nop
 80053d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053d2:	bc08      	pop	{r3}
 80053d4:	469e      	mov	lr, r3
 80053d6:	4770      	bx	lr
