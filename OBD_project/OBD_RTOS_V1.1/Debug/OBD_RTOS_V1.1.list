
OBD_RTOS_V1.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000059e8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  08005b88  08005b88  00015b88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005c80  08005c80  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08005c80  08005c80  00015c80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005c88  08005c88  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005c88  08005c88  00015c88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005c8c  08005c8c  00015c8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08005c90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004a24  20000014  08005ca4  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004a38  08005ca4  00024a38  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011fba  00000000  00000000  00020087  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002c43  00000000  00000000  00032041  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001010  00000000  00000000  00034c88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c59  00000000  00000000  00035c98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017ebb  00000000  00000000  000368f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012cc4  00000000  00000000  0004e7ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009ae23  00000000  00000000  00061470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000042ec  00000000  00000000  000fc294  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  00100580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000014 	.word	0x20000014
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005b70 	.word	0x08005b70

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000018 	.word	0x20000018
 80001dc:	08005b70 	.word	0x08005b70

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b970 	b.w	80004d8 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	460d      	mov	r5, r1
 8000218:	4604      	mov	r4, r0
 800021a:	460f      	mov	r7, r1
 800021c:	2b00      	cmp	r3, #0
 800021e:	d14a      	bne.n	80002b6 <__udivmoddi4+0xa6>
 8000220:	428a      	cmp	r2, r1
 8000222:	4694      	mov	ip, r2
 8000224:	d965      	bls.n	80002f2 <__udivmoddi4+0xe2>
 8000226:	fab2 f382 	clz	r3, r2
 800022a:	b143      	cbz	r3, 800023e <__udivmoddi4+0x2e>
 800022c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000230:	f1c3 0220 	rsb	r2, r3, #32
 8000234:	409f      	lsls	r7, r3
 8000236:	fa20 f202 	lsr.w	r2, r0, r2
 800023a:	4317      	orrs	r7, r2
 800023c:	409c      	lsls	r4, r3
 800023e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000242:	fa1f f58c 	uxth.w	r5, ip
 8000246:	fbb7 f1fe 	udiv	r1, r7, lr
 800024a:	0c22      	lsrs	r2, r4, #16
 800024c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000250:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000254:	fb01 f005 	mul.w	r0, r1, r5
 8000258:	4290      	cmp	r0, r2
 800025a:	d90a      	bls.n	8000272 <__udivmoddi4+0x62>
 800025c:	eb1c 0202 	adds.w	r2, ip, r2
 8000260:	f101 37ff 	add.w	r7, r1, #4294967295
 8000264:	f080 811c 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000268:	4290      	cmp	r0, r2
 800026a:	f240 8119 	bls.w	80004a0 <__udivmoddi4+0x290>
 800026e:	3902      	subs	r1, #2
 8000270:	4462      	add	r2, ip
 8000272:	1a12      	subs	r2, r2, r0
 8000274:	b2a4      	uxth	r4, r4
 8000276:	fbb2 f0fe 	udiv	r0, r2, lr
 800027a:	fb0e 2210 	mls	r2, lr, r0, r2
 800027e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000282:	fb00 f505 	mul.w	r5, r0, r5
 8000286:	42a5      	cmp	r5, r4
 8000288:	d90a      	bls.n	80002a0 <__udivmoddi4+0x90>
 800028a:	eb1c 0404 	adds.w	r4, ip, r4
 800028e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000292:	f080 8107 	bcs.w	80004a4 <__udivmoddi4+0x294>
 8000296:	42a5      	cmp	r5, r4
 8000298:	f240 8104 	bls.w	80004a4 <__udivmoddi4+0x294>
 800029c:	4464      	add	r4, ip
 800029e:	3802      	subs	r0, #2
 80002a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002a4:	1b64      	subs	r4, r4, r5
 80002a6:	2100      	movs	r1, #0
 80002a8:	b11e      	cbz	r6, 80002b2 <__udivmoddi4+0xa2>
 80002aa:	40dc      	lsrs	r4, r3
 80002ac:	2300      	movs	r3, #0
 80002ae:	e9c6 4300 	strd	r4, r3, [r6]
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d908      	bls.n	80002cc <__udivmoddi4+0xbc>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80ed 	beq.w	800049a <__udivmoddi4+0x28a>
 80002c0:	2100      	movs	r1, #0
 80002c2:	e9c6 0500 	strd	r0, r5, [r6]
 80002c6:	4608      	mov	r0, r1
 80002c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002cc:	fab3 f183 	clz	r1, r3
 80002d0:	2900      	cmp	r1, #0
 80002d2:	d149      	bne.n	8000368 <__udivmoddi4+0x158>
 80002d4:	42ab      	cmp	r3, r5
 80002d6:	d302      	bcc.n	80002de <__udivmoddi4+0xce>
 80002d8:	4282      	cmp	r2, r0
 80002da:	f200 80f8 	bhi.w	80004ce <__udivmoddi4+0x2be>
 80002de:	1a84      	subs	r4, r0, r2
 80002e0:	eb65 0203 	sbc.w	r2, r5, r3
 80002e4:	2001      	movs	r0, #1
 80002e6:	4617      	mov	r7, r2
 80002e8:	2e00      	cmp	r6, #0
 80002ea:	d0e2      	beq.n	80002b2 <__udivmoddi4+0xa2>
 80002ec:	e9c6 4700 	strd	r4, r7, [r6]
 80002f0:	e7df      	b.n	80002b2 <__udivmoddi4+0xa2>
 80002f2:	b902      	cbnz	r2, 80002f6 <__udivmoddi4+0xe6>
 80002f4:	deff      	udf	#255	; 0xff
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x210>
 8000300:	1a8a      	subs	r2, r1, r2
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2101      	movs	r1, #1
 800030c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000310:	fb07 2015 	mls	r0, r7, r5, r2
 8000314:	0c22      	lsrs	r2, r4, #16
 8000316:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800031a:	fb0e f005 	mul.w	r0, lr, r5
 800031e:	4290      	cmp	r0, r2
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x124>
 8000322:	eb1c 0202 	adds.w	r2, ip, r2
 8000326:	f105 38ff 	add.w	r8, r5, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4290      	cmp	r0, r2
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2b8>
 8000332:	4645      	mov	r5, r8
 8000334:	1a12      	subs	r2, r2, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb2 f0f7 	udiv	r0, r2, r7
 800033c:	fb07 2210 	mls	r2, r7, r0, r2
 8000340:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x14e>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 32ff 	add.w	r2, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x14c>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2c2>
 800035c:	4610      	mov	r0, r2
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000366:	e79f      	b.n	80002a8 <__udivmoddi4+0x98>
 8000368:	f1c1 0720 	rsb	r7, r1, #32
 800036c:	408b      	lsls	r3, r1
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa05 f401 	lsl.w	r4, r5, r1
 800037a:	fa20 f307 	lsr.w	r3, r0, r7
 800037e:	40fd      	lsrs	r5, r7
 8000380:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000384:	4323      	orrs	r3, r4
 8000386:	fbb5 f8f9 	udiv	r8, r5, r9
 800038a:	fa1f fe8c 	uxth.w	lr, ip
 800038e:	fb09 5518 	mls	r5, r9, r8, r5
 8000392:	0c1c      	lsrs	r4, r3, #16
 8000394:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000398:	fb08 f50e 	mul.w	r5, r8, lr
 800039c:	42a5      	cmp	r5, r4
 800039e:	fa02 f201 	lsl.w	r2, r2, r1
 80003a2:	fa00 f001 	lsl.w	r0, r0, r1
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2b4>
 80003b4:	42a5      	cmp	r5, r4
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2b4>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4464      	add	r4, ip
 80003c0:	1b64      	subs	r4, r4, r5
 80003c2:	b29d      	uxth	r5, r3
 80003c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c8:	fb09 4413 	mls	r4, r9, r3, r4
 80003cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f103 35ff 	add.w	r5, r3, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2ac>
 80003e2:	45a6      	cmp	lr, r4
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2ac>
 80003e6:	3b02      	subs	r3, #2
 80003e8:	4464      	add	r4, ip
 80003ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003ee:	fba3 9502 	umull	r9, r5, r3, r2
 80003f2:	eba4 040e 	sub.w	r4, r4, lr
 80003f6:	42ac      	cmp	r4, r5
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46ae      	mov	lr, r5
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x29c>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x298>
 8000400:	b156      	cbz	r6, 8000418 <__udivmoddi4+0x208>
 8000402:	ebb0 0208 	subs.w	r2, r0, r8
 8000406:	eb64 040e 	sbc.w	r4, r4, lr
 800040a:	fa04 f707 	lsl.w	r7, r4, r7
 800040e:	40ca      	lsrs	r2, r1
 8000410:	40cc      	lsrs	r4, r1
 8000412:	4317      	orrs	r7, r2
 8000414:	e9c6 7400 	strd	r7, r4, [r6]
 8000418:	4618      	mov	r0, r3
 800041a:	2100      	movs	r1, #0
 800041c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000420:	f1c3 0120 	rsb	r1, r3, #32
 8000424:	fa02 fc03 	lsl.w	ip, r2, r3
 8000428:	fa20 f201 	lsr.w	r2, r0, r1
 800042c:	fa25 f101 	lsr.w	r1, r5, r1
 8000430:	409d      	lsls	r5, r3
 8000432:	432a      	orrs	r2, r5
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000440:	fb07 1510 	mls	r5, r7, r0, r1
 8000444:	0c11      	lsrs	r1, r2, #16
 8000446:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800044a:	fb00 f50e 	mul.w	r5, r0, lr
 800044e:	428d      	cmp	r5, r1
 8000450:	fa04 f403 	lsl.w	r4, r4, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x258>
 8000456:	eb1c 0101 	adds.w	r1, ip, r1
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000460:	428d      	cmp	r5, r1
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000464:	3802      	subs	r0, #2
 8000466:	4461      	add	r1, ip
 8000468:	1b49      	subs	r1, r1, r5
 800046a:	b292      	uxth	r2, r2
 800046c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000470:	fb07 1115 	mls	r1, r7, r5, r1
 8000474:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000478:	fb05 f10e 	mul.w	r1, r5, lr
 800047c:	4291      	cmp	r1, r2
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x282>
 8000480:	eb1c 0202 	adds.w	r2, ip, r2
 8000484:	f105 38ff 	add.w	r8, r5, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2a8>
 800048a:	4291      	cmp	r1, r2
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2a8>
 800048e:	3d02      	subs	r5, #2
 8000490:	4462      	add	r2, ip
 8000492:	1a52      	subs	r2, r2, r1
 8000494:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0xfc>
 800049a:	4631      	mov	r1, r6
 800049c:	4630      	mov	r0, r6
 800049e:	e708      	b.n	80002b2 <__udivmoddi4+0xa2>
 80004a0:	4639      	mov	r1, r7
 80004a2:	e6e6      	b.n	8000272 <__udivmoddi4+0x62>
 80004a4:	4610      	mov	r0, r2
 80004a6:	e6fb      	b.n	80002a0 <__udivmoddi4+0x90>
 80004a8:	4548      	cmp	r0, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004b4:	3b01      	subs	r3, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b8:	4645      	mov	r5, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x282>
 80004bc:	462b      	mov	r3, r5
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1da>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x258>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c8:	3d02      	subs	r5, #2
 80004ca:	4462      	add	r2, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x124>
 80004ce:	4608      	mov	r0, r1
 80004d0:	e70a      	b.n	80002e8 <__udivmoddi4+0xd8>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x14e>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <bytestowrite>:
/*****************************************************************************************************************************************/
uint8_t bytes_temp[4];

// function to determine the remaining bytes
uint16_t bytestowrite (uint16_t size, uint16_t offset)
{
 80004dc:	b480      	push	{r7}
 80004de:	b083      	sub	sp, #12
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	4603      	mov	r3, r0
 80004e4:	460a      	mov	r2, r1
 80004e6:	80fb      	strh	r3, [r7, #6]
 80004e8:	4613      	mov	r3, r2
 80004ea:	80bb      	strh	r3, [r7, #4]
	if ((size+offset)<PAGE_SIZE) return size;
 80004ec:	88fa      	ldrh	r2, [r7, #6]
 80004ee:	88bb      	ldrh	r3, [r7, #4]
 80004f0:	4413      	add	r3, r2
 80004f2:	2b0f      	cmp	r3, #15
 80004f4:	dc01      	bgt.n	80004fa <bytestowrite+0x1e>
 80004f6:	88fb      	ldrh	r3, [r7, #6]
 80004f8:	e003      	b.n	8000502 <bytestowrite+0x26>
	else return PAGE_SIZE-offset;
 80004fa:	88bb      	ldrh	r3, [r7, #4]
 80004fc:	f1c3 0310 	rsb	r3, r3, #16
 8000500:	b29b      	uxth	r3, r3
}
 8000502:	4618      	mov	r0, r3
 8000504:	370c      	adds	r7, #12
 8000506:	46bd      	mov	sp, r7
 8000508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050c:	4770      	bx	lr
	...

08000510 <EEPROM_Write>:
 * @offset is the start byte offset in the page. Range from 0 to PAGE_SIZE-1
 * @data is the pointer to the data to write in bytes
 * @size is the size of the data
 */
void EEPROM_Write (uint16_t page, uint16_t offset, uint8_t *data, uint16_t size)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b08e      	sub	sp, #56	; 0x38
 8000514:	af04      	add	r7, sp, #16
 8000516:	60ba      	str	r2, [r7, #8]
 8000518:	461a      	mov	r2, r3
 800051a:	4603      	mov	r3, r0
 800051c:	81fb      	strh	r3, [r7, #14]
 800051e:	460b      	mov	r3, r1
 8000520:	81bb      	strh	r3, [r7, #12]
 8000522:	4613      	mov	r3, r2
 8000524:	80fb      	strh	r3, [r7, #6]

	// Find out the number of bit, where the page addressing starts
	int paddrposition = log(PAGE_SIZE)/log(2);
 8000526:	2304      	movs	r3, #4
 8000528:	61fb      	str	r3, [r7, #28]

	// calculate the start page and the end page
	uint16_t startPage = page;
 800052a:	89fb      	ldrh	r3, [r7, #14]
 800052c:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t endPage = page + ((size+offset)/PAGE_SIZE);
 800052e:	88fa      	ldrh	r2, [r7, #6]
 8000530:	89bb      	ldrh	r3, [r7, #12]
 8000532:	4413      	add	r3, r2
 8000534:	2b00      	cmp	r3, #0
 8000536:	da00      	bge.n	800053a <EEPROM_Write+0x2a>
 8000538:	330f      	adds	r3, #15
 800053a:	111b      	asrs	r3, r3, #4
 800053c:	b29a      	uxth	r2, r3
 800053e:	89fb      	ldrh	r3, [r7, #14]
 8000540:	4413      	add	r3, r2
 8000542:	837b      	strh	r3, [r7, #26]

	// number of pages to be written
	uint16_t numofpages = (endPage-startPage) + 1;
 8000544:	8b7a      	ldrh	r2, [r7, #26]
 8000546:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000548:	1ad3      	subs	r3, r2, r3
 800054a:	b29b      	uxth	r3, r3
 800054c:	3301      	adds	r3, #1
 800054e:	833b      	strh	r3, [r7, #24]
	uint16_t pos=0;
 8000550:	2300      	movs	r3, #0
 8000552:	84bb      	strh	r3, [r7, #36]	; 0x24

	// write the data
	for (int i=0; i<numofpages; i++)
 8000554:	2300      	movs	r3, #0
 8000556:	623b      	str	r3, [r7, #32]
 8000558:	e034      	b.n	80005c4 <EEPROM_Write+0xb4>
	{
		/* calculate the address of the memory location
		 * Here we add the page address with the byte address
		 */
		uint16_t MemAddress = startPage<<paddrposition | offset;
 800055a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800055c:	69fb      	ldr	r3, [r7, #28]
 800055e:	fa02 f303 	lsl.w	r3, r2, r3
 8000562:	b21a      	sxth	r2, r3
 8000564:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000568:	4313      	orrs	r3, r2
 800056a:	b21b      	sxth	r3, r3
 800056c:	82fb      	strh	r3, [r7, #22]
		uint16_t bytesremaining = bytestowrite(size, offset);  // calculate the remaining bytes to be written
 800056e:	89ba      	ldrh	r2, [r7, #12]
 8000570:	88fb      	ldrh	r3, [r7, #6]
 8000572:	4611      	mov	r1, r2
 8000574:	4618      	mov	r0, r3
 8000576:	f7ff ffb1 	bl	80004dc <bytestowrite>
 800057a:	4603      	mov	r3, r0
 800057c:	82bb      	strh	r3, [r7, #20]

		HAL_I2C_Mem_Write(EEPROM_I2C, EEPROM_ADDR, MemAddress, 2, &data[pos], bytesremaining, 1000);  // write the data to the EEPROM
 800057e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000580:	68ba      	ldr	r2, [r7, #8]
 8000582:	4413      	add	r3, r2
 8000584:	8af9      	ldrh	r1, [r7, #22]
 8000586:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800058a:	9202      	str	r2, [sp, #8]
 800058c:	8aba      	ldrh	r2, [r7, #20]
 800058e:	9201      	str	r2, [sp, #4]
 8000590:	9300      	str	r3, [sp, #0]
 8000592:	2302      	movs	r3, #2
 8000594:	460a      	mov	r2, r1
 8000596:	21a0      	movs	r1, #160	; 0xa0
 8000598:	480f      	ldr	r0, [pc, #60]	; (80005d8 <EEPROM_Write+0xc8>)
 800059a:	f001 fa6d 	bl	8001a78 <HAL_I2C_Mem_Write>

		startPage += 1;  // increment the page, so that a new page address can be selected for further write
 800059e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80005a0:	3301      	adds	r3, #1
 80005a2:	84fb      	strh	r3, [r7, #38]	; 0x26
		offset=0;   // since we will be writing to a new page, so offset will be 0
 80005a4:	2300      	movs	r3, #0
 80005a6:	81bb      	strh	r3, [r7, #12]
		size = size-bytesremaining;  // reduce the size of the bytes
 80005a8:	88fa      	ldrh	r2, [r7, #6]
 80005aa:	8abb      	ldrh	r3, [r7, #20]
 80005ac:	1ad3      	subs	r3, r2, r3
 80005ae:	80fb      	strh	r3, [r7, #6]
		pos += bytesremaining;  // update the position for the data buffer
 80005b0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80005b2:	8abb      	ldrh	r3, [r7, #20]
 80005b4:	4413      	add	r3, r2
 80005b6:	84bb      	strh	r3, [r7, #36]	; 0x24

		HAL_Delay (5);  // Write cycle delay (5ms)
 80005b8:	2005      	movs	r0, #5
 80005ba:	f000 fc0f 	bl	8000ddc <HAL_Delay>
	for (int i=0; i<numofpages; i++)
 80005be:	6a3b      	ldr	r3, [r7, #32]
 80005c0:	3301      	adds	r3, #1
 80005c2:	623b      	str	r3, [r7, #32]
 80005c4:	8b3b      	ldrh	r3, [r7, #24]
 80005c6:	6a3a      	ldr	r2, [r7, #32]
 80005c8:	429a      	cmp	r2, r3
 80005ca:	dbc6      	blt.n	800055a <EEPROM_Write+0x4a>
//		for(uint16_t i = 0 ; i < 5000; i++ ){
//			__asm__("nop");
//		}
	}
}
 80005cc:	bf00      	nop
 80005ce:	bf00      	nop
 80005d0:	3728      	adds	r7, #40	; 0x28
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	bf00      	nop
 80005d8:	20000078 	.word	0x20000078

080005dc <EEPROM_Read>:
 * @offset is the start byte offset in the page. Range from 0 to PAGE_SIZE-1
 * @data is the pointer to the data to write in bytes
 * @size is the size of the data
 */
void EEPROM_Read (uint16_t page, uint16_t offset, uint8_t *data, uint16_t size)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b08e      	sub	sp, #56	; 0x38
 80005e0:	af04      	add	r7, sp, #16
 80005e2:	60ba      	str	r2, [r7, #8]
 80005e4:	461a      	mov	r2, r3
 80005e6:	4603      	mov	r3, r0
 80005e8:	81fb      	strh	r3, [r7, #14]
 80005ea:	460b      	mov	r3, r1
 80005ec:	81bb      	strh	r3, [r7, #12]
 80005ee:	4613      	mov	r3, r2
 80005f0:	80fb      	strh	r3, [r7, #6]
	int paddrposition = log(PAGE_SIZE)/log(2);
 80005f2:	2304      	movs	r3, #4
 80005f4:	61fb      	str	r3, [r7, #28]

	uint16_t startPage = page;
 80005f6:	89fb      	ldrh	r3, [r7, #14]
 80005f8:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t endPage = page + ((size+offset)/PAGE_SIZE);
 80005fa:	88fa      	ldrh	r2, [r7, #6]
 80005fc:	89bb      	ldrh	r3, [r7, #12]
 80005fe:	4413      	add	r3, r2
 8000600:	2b00      	cmp	r3, #0
 8000602:	da00      	bge.n	8000606 <EEPROM_Read+0x2a>
 8000604:	330f      	adds	r3, #15
 8000606:	111b      	asrs	r3, r3, #4
 8000608:	b29a      	uxth	r2, r3
 800060a:	89fb      	ldrh	r3, [r7, #14]
 800060c:	4413      	add	r3, r2
 800060e:	837b      	strh	r3, [r7, #26]

	uint16_t numofpages = (endPage-startPage) + 1;
 8000610:	8b7a      	ldrh	r2, [r7, #26]
 8000612:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000614:	1ad3      	subs	r3, r2, r3
 8000616:	b29b      	uxth	r3, r3
 8000618:	3301      	adds	r3, #1
 800061a:	833b      	strh	r3, [r7, #24]
	uint16_t pos=0;
 800061c:	2300      	movs	r3, #0
 800061e:	84bb      	strh	r3, [r7, #36]	; 0x24

	for (int i=0; i<numofpages; i++)
 8000620:	2300      	movs	r3, #0
 8000622:	623b      	str	r3, [r7, #32]
 8000624:	e031      	b.n	800068a <EEPROM_Read+0xae>
	{
		uint16_t MemAddress = startPage<<paddrposition | offset;
 8000626:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000628:	69fb      	ldr	r3, [r7, #28]
 800062a:	fa02 f303 	lsl.w	r3, r2, r3
 800062e:	b21a      	sxth	r2, r3
 8000630:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000634:	4313      	orrs	r3, r2
 8000636:	b21b      	sxth	r3, r3
 8000638:	82fb      	strh	r3, [r7, #22]
		uint16_t bytesremaining = bytestowrite(size, offset);
 800063a:	89ba      	ldrh	r2, [r7, #12]
 800063c:	88fb      	ldrh	r3, [r7, #6]
 800063e:	4611      	mov	r1, r2
 8000640:	4618      	mov	r0, r3
 8000642:	f7ff ff4b 	bl	80004dc <bytestowrite>
 8000646:	4603      	mov	r3, r0
 8000648:	82bb      	strh	r3, [r7, #20]
		HAL_I2C_Mem_Read(EEPROM_I2C, EEPROM_ADDR, MemAddress, 2, &data[pos], bytesremaining, 1000);
 800064a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800064c:	68ba      	ldr	r2, [r7, #8]
 800064e:	4413      	add	r3, r2
 8000650:	8af9      	ldrh	r1, [r7, #22]
 8000652:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000656:	9202      	str	r2, [sp, #8]
 8000658:	8aba      	ldrh	r2, [r7, #20]
 800065a:	9201      	str	r2, [sp, #4]
 800065c:	9300      	str	r3, [sp, #0]
 800065e:	2302      	movs	r3, #2
 8000660:	460a      	mov	r2, r1
 8000662:	21a0      	movs	r1, #160	; 0xa0
 8000664:	480d      	ldr	r0, [pc, #52]	; (800069c <EEPROM_Read+0xc0>)
 8000666:	f001 fb01 	bl	8001c6c <HAL_I2C_Mem_Read>
		startPage += 1;
 800066a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800066c:	3301      	adds	r3, #1
 800066e:	84fb      	strh	r3, [r7, #38]	; 0x26
		offset=0;
 8000670:	2300      	movs	r3, #0
 8000672:	81bb      	strh	r3, [r7, #12]
		size = size-bytesremaining;
 8000674:	88fa      	ldrh	r2, [r7, #6]
 8000676:	8abb      	ldrh	r3, [r7, #20]
 8000678:	1ad3      	subs	r3, r2, r3
 800067a:	80fb      	strh	r3, [r7, #6]
		pos += bytesremaining;
 800067c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800067e:	8abb      	ldrh	r3, [r7, #20]
 8000680:	4413      	add	r3, r2
 8000682:	84bb      	strh	r3, [r7, #36]	; 0x24
	for (int i=0; i<numofpages; i++)
 8000684:	6a3b      	ldr	r3, [r7, #32]
 8000686:	3301      	adds	r3, #1
 8000688:	623b      	str	r3, [r7, #32]
 800068a:	8b3b      	ldrh	r3, [r7, #24]
 800068c:	6a3a      	ldr	r2, [r7, #32]
 800068e:	429a      	cmp	r2, r3
 8000690:	dbc9      	blt.n	8000626 <EEPROM_Read+0x4a>
	}
}
 8000692:	bf00      	nop
 8000694:	bf00      	nop
 8000696:	3728      	adds	r7, #40	; 0x28
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	20000078 	.word	0x20000078

080006a0 <EEPROM_PageErase>:
/* Erase a page in the EEPROM Memory
 * @page is the number of page to erase
 * In order to erase multiple pages, just use this function in the for loop
 */
void EEPROM_PageErase (uint16_t page)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b08c      	sub	sp, #48	; 0x30
 80006a4:	af04      	add	r7, sp, #16
 80006a6:	4603      	mov	r3, r0
 80006a8:	80fb      	strh	r3, [r7, #6]
	// calculate the memory address based on the page number
	int paddrposition = log(PAGE_SIZE)/log(2);
 80006aa:	2304      	movs	r3, #4
 80006ac:	61fb      	str	r3, [r7, #28]
	uint16_t MemAddress = page<<paddrposition;
 80006ae:	88fa      	ldrh	r2, [r7, #6]
 80006b0:	69fb      	ldr	r3, [r7, #28]
 80006b2:	fa02 f303 	lsl.w	r3, r2, r3
 80006b6:	837b      	strh	r3, [r7, #26]

	// create a buffer to store the reset values
	uint8_t data[PAGE_SIZE];
	memset(data,0xff,PAGE_SIZE);
 80006b8:	f107 0308 	add.w	r3, r7, #8
 80006bc:	2210      	movs	r2, #16
 80006be:	21ff      	movs	r1, #255	; 0xff
 80006c0:	4618      	mov	r0, r3
 80006c2:	f005 fa1b 	bl	8005afc <memset>

	// write the data to the EEPROM
	HAL_I2C_Mem_Write(EEPROM_I2C, EEPROM_ADDR, MemAddress, 2, data, PAGE_SIZE, 1000);
 80006c6:	8b7a      	ldrh	r2, [r7, #26]
 80006c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006cc:	9302      	str	r3, [sp, #8]
 80006ce:	2310      	movs	r3, #16
 80006d0:	9301      	str	r3, [sp, #4]
 80006d2:	f107 0308 	add.w	r3, r7, #8
 80006d6:	9300      	str	r3, [sp, #0]
 80006d8:	2302      	movs	r3, #2
 80006da:	21a0      	movs	r1, #160	; 0xa0
 80006dc:	4804      	ldr	r0, [pc, #16]	; (80006f0 <EEPROM_PageErase+0x50>)
 80006de:	f001 f9cb 	bl	8001a78 <HAL_I2C_Mem_Write>

	HAL_Delay (5);  // write cycle delay 
 80006e2:	2005      	movs	r0, #5
 80006e4:	f000 fb7a 	bl	8000ddc <HAL_Delay>
}
 80006e8:	bf00      	nop
 80006ea:	3720      	adds	r7, #32
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	20000078 	.word	0x20000078

080006f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006f8:	f000 fafe 	bl	8000cf8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006fc:	f000 f84a 	bl	8000794 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000700:	f000 f932 	bl	8000968 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000704:	f000 f902 	bl	800090c <MX_I2C1_Init>
  MX_ADC1_Init();
 8000708:	f000 f8ae 	bl	8000868 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
	HAL_I2C_Init(&hi2c1);
 800070c:	4814      	ldr	r0, [pc, #80]	; (8000760 <main+0x6c>)
 800070e:	f001 f86f 	bl	80017f0 <HAL_I2C_Init>
	EEPROM_voidInitTime();
 8000712:	f000 f96b 	bl	80009ec <EEPROM_voidInitTime>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000716:	f002 fca3 	bl	8003060 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Tim_Task1 */
  Tim_Task1Handle = osThreadNew(IncTimFunc, NULL, &Tim_Task1_attributes);
 800071a:	4a12      	ldr	r2, [pc, #72]	; (8000764 <main+0x70>)
 800071c:	2100      	movs	r1, #0
 800071e:	4812      	ldr	r0, [pc, #72]	; (8000768 <main+0x74>)
 8000720:	f002 fce8 	bl	80030f4 <osThreadNew>
 8000724:	4603      	mov	r3, r0
 8000726:	4a11      	ldr	r2, [pc, #68]	; (800076c <main+0x78>)
 8000728:	6013      	str	r3, [r2, #0]

  /* creation of TimTask2 */
  TimTask2Handle = osThreadNew(EEPROM_saveTimVal, NULL, &TimTask2_attributes);
 800072a:	4a11      	ldr	r2, [pc, #68]	; (8000770 <main+0x7c>)
 800072c:	2100      	movs	r1, #0
 800072e:	4811      	ldr	r0, [pc, #68]	; (8000774 <main+0x80>)
 8000730:	f002 fce0 	bl	80030f4 <osThreadNew>
 8000734:	4603      	mov	r3, r0
 8000736:	4a10      	ldr	r2, [pc, #64]	; (8000778 <main+0x84>)
 8000738:	6013      	str	r3, [r2, #0]

  /* creation of fuelLevelTask1 */
  fuelLevelTask1Handle = osThreadNew(getFuelLevelFromADC, NULL, &fuelLevelTask1_attributes);
 800073a:	4a10      	ldr	r2, [pc, #64]	; (800077c <main+0x88>)
 800073c:	2100      	movs	r1, #0
 800073e:	4810      	ldr	r0, [pc, #64]	; (8000780 <main+0x8c>)
 8000740:	f002 fcd8 	bl	80030f4 <osThreadNew>
 8000744:	4603      	mov	r3, r0
 8000746:	4a0f      	ldr	r2, [pc, #60]	; (8000784 <main+0x90>)
 8000748:	6013      	str	r3, [r2, #0]

  /* creation of fuelLevelTask2 */
  fuelLevelTask2Handle = osThreadNew(mapFuelLevelDigtalToLED, NULL, &fuelLevelTask2_attributes);
 800074a:	4a0f      	ldr	r2, [pc, #60]	; (8000788 <main+0x94>)
 800074c:	2100      	movs	r1, #0
 800074e:	480f      	ldr	r0, [pc, #60]	; (800078c <main+0x98>)
 8000750:	f002 fcd0 	bl	80030f4 <osThreadNew>
 8000754:	4603      	mov	r3, r0
 8000756:	4a0e      	ldr	r2, [pc, #56]	; (8000790 <main+0x9c>)
 8000758:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800075a:	f002 fca5 	bl	80030a8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 800075e:	e7fe      	b.n	800075e <main+0x6a>
 8000760:	20000078 	.word	0x20000078
 8000764:	08005bd8 	.word	0x08005bd8
 8000768:	08000a59 	.word	0x08000a59
 800076c:	200000cc 	.word	0x200000cc
 8000770:	08005bfc 	.word	0x08005bfc
 8000774:	08000a79 	.word	0x08000a79
 8000778:	200000d0 	.word	0x200000d0
 800077c:	08005c20 	.word	0x08005c20
 8000780:	08000a9d 	.word	0x08000a9d
 8000784:	200000d4 	.word	0x200000d4
 8000788:	08005c44 	.word	0x08005c44
 800078c:	08000aad 	.word	0x08000aad
 8000790:	200000d8 	.word	0x200000d8

08000794 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b094      	sub	sp, #80	; 0x50
 8000798:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800079a:	f107 0320 	add.w	r3, r7, #32
 800079e:	2230      	movs	r2, #48	; 0x30
 80007a0:	2100      	movs	r1, #0
 80007a2:	4618      	mov	r0, r3
 80007a4:	f005 f9aa 	bl	8005afc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007a8:	f107 030c 	add.w	r3, r7, #12
 80007ac:	2200      	movs	r2, #0
 80007ae:	601a      	str	r2, [r3, #0]
 80007b0:	605a      	str	r2, [r3, #4]
 80007b2:	609a      	str	r2, [r3, #8]
 80007b4:	60da      	str	r2, [r3, #12]
 80007b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007b8:	2300      	movs	r3, #0
 80007ba:	60bb      	str	r3, [r7, #8]
 80007bc:	4b28      	ldr	r3, [pc, #160]	; (8000860 <SystemClock_Config+0xcc>)
 80007be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007c0:	4a27      	ldr	r2, [pc, #156]	; (8000860 <SystemClock_Config+0xcc>)
 80007c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007c6:	6413      	str	r3, [r2, #64]	; 0x40
 80007c8:	4b25      	ldr	r3, [pc, #148]	; (8000860 <SystemClock_Config+0xcc>)
 80007ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007d0:	60bb      	str	r3, [r7, #8]
 80007d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80007d4:	2300      	movs	r3, #0
 80007d6:	607b      	str	r3, [r7, #4]
 80007d8:	4b22      	ldr	r3, [pc, #136]	; (8000864 <SystemClock_Config+0xd0>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80007e0:	4a20      	ldr	r2, [pc, #128]	; (8000864 <SystemClock_Config+0xd0>)
 80007e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80007e6:	6013      	str	r3, [r2, #0]
 80007e8:	4b1e      	ldr	r3, [pc, #120]	; (8000864 <SystemClock_Config+0xd0>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007f0:	607b      	str	r3, [r7, #4]
 80007f2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007f4:	2302      	movs	r3, #2
 80007f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007f8:	2301      	movs	r3, #1
 80007fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007fc:	2310      	movs	r3, #16
 80007fe:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000800:	2302      	movs	r3, #2
 8000802:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000804:	2300      	movs	r3, #0
 8000806:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000808:	2308      	movs	r3, #8
 800080a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 800080c:	2348      	movs	r3, #72	; 0x48
 800080e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000810:	2302      	movs	r3, #2
 8000812:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000814:	2304      	movs	r3, #4
 8000816:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000818:	f107 0320 	add.w	r3, r7, #32
 800081c:	4618      	mov	r0, r3
 800081e:	f001 ffa7 	bl	8002770 <HAL_RCC_OscConfig>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d001      	beq.n	800082c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000828:	f000 f948 	bl	8000abc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800082c:	230f      	movs	r3, #15
 800082e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000830:	2302      	movs	r3, #2
 8000832:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000834:	2300      	movs	r3, #0
 8000836:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000838:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800083c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800083e:	2300      	movs	r3, #0
 8000840:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000842:	f107 030c 	add.w	r3, r7, #12
 8000846:	2102      	movs	r1, #2
 8000848:	4618      	mov	r0, r3
 800084a:	f002 fa09 	bl	8002c60 <HAL_RCC_ClockConfig>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000854:	f000 f932 	bl	8000abc <Error_Handler>
  }
}
 8000858:	bf00      	nop
 800085a:	3750      	adds	r7, #80	; 0x50
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}
 8000860:	40023800 	.word	0x40023800
 8000864:	40007000 	.word	0x40007000

08000868 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b084      	sub	sp, #16
 800086c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800086e:	463b      	mov	r3, r7
 8000870:	2200      	movs	r2, #0
 8000872:	601a      	str	r2, [r3, #0]
 8000874:	605a      	str	r2, [r3, #4]
 8000876:	609a      	str	r2, [r3, #8]
 8000878:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800087a:	4b21      	ldr	r3, [pc, #132]	; (8000900 <MX_ADC1_Init+0x98>)
 800087c:	4a21      	ldr	r2, [pc, #132]	; (8000904 <MX_ADC1_Init+0x9c>)
 800087e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000880:	4b1f      	ldr	r3, [pc, #124]	; (8000900 <MX_ADC1_Init+0x98>)
 8000882:	2200      	movs	r2, #0
 8000884:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000886:	4b1e      	ldr	r3, [pc, #120]	; (8000900 <MX_ADC1_Init+0x98>)
 8000888:	2200      	movs	r2, #0
 800088a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800088c:	4b1c      	ldr	r3, [pc, #112]	; (8000900 <MX_ADC1_Init+0x98>)
 800088e:	2200      	movs	r2, #0
 8000890:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000892:	4b1b      	ldr	r3, [pc, #108]	; (8000900 <MX_ADC1_Init+0x98>)
 8000894:	2200      	movs	r2, #0
 8000896:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000898:	4b19      	ldr	r3, [pc, #100]	; (8000900 <MX_ADC1_Init+0x98>)
 800089a:	2200      	movs	r2, #0
 800089c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008a0:	4b17      	ldr	r3, [pc, #92]	; (8000900 <MX_ADC1_Init+0x98>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008a6:	4b16      	ldr	r3, [pc, #88]	; (8000900 <MX_ADC1_Init+0x98>)
 80008a8:	4a17      	ldr	r2, [pc, #92]	; (8000908 <MX_ADC1_Init+0xa0>)
 80008aa:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008ac:	4b14      	ldr	r3, [pc, #80]	; (8000900 <MX_ADC1_Init+0x98>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80008b2:	4b13      	ldr	r3, [pc, #76]	; (8000900 <MX_ADC1_Init+0x98>)
 80008b4:	2201      	movs	r2, #1
 80008b6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80008b8:	4b11      	ldr	r3, [pc, #68]	; (8000900 <MX_ADC1_Init+0x98>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008c0:	4b0f      	ldr	r3, [pc, #60]	; (8000900 <MX_ADC1_Init+0x98>)
 80008c2:	2201      	movs	r2, #1
 80008c4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008c6:	480e      	ldr	r0, [pc, #56]	; (8000900 <MX_ADC1_Init+0x98>)
 80008c8:	f000 faac 	bl	8000e24 <HAL_ADC_Init>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80008d2:	f000 f8f3 	bl	8000abc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80008d6:	2300      	movs	r3, #0
 80008d8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80008da:	2301      	movs	r3, #1
 80008dc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80008de:	2300      	movs	r3, #0
 80008e0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008e2:	463b      	mov	r3, r7
 80008e4:	4619      	mov	r1, r3
 80008e6:	4806      	ldr	r0, [pc, #24]	; (8000900 <MX_ADC1_Init+0x98>)
 80008e8:	f000 fae0 	bl	8000eac <HAL_ADC_ConfigChannel>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80008f2:	f000 f8e3 	bl	8000abc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80008f6:	bf00      	nop
 80008f8:	3710      	adds	r7, #16
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	20000030 	.word	0x20000030
 8000904:	40012000 	.word	0x40012000
 8000908:	0f000001 	.word	0x0f000001

0800090c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000910:	4b12      	ldr	r3, [pc, #72]	; (800095c <MX_I2C1_Init+0x50>)
 8000912:	4a13      	ldr	r2, [pc, #76]	; (8000960 <MX_I2C1_Init+0x54>)
 8000914:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000916:	4b11      	ldr	r3, [pc, #68]	; (800095c <MX_I2C1_Init+0x50>)
 8000918:	4a12      	ldr	r2, [pc, #72]	; (8000964 <MX_I2C1_Init+0x58>)
 800091a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800091c:	4b0f      	ldr	r3, [pc, #60]	; (800095c <MX_I2C1_Init+0x50>)
 800091e:	2200      	movs	r2, #0
 8000920:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000922:	4b0e      	ldr	r3, [pc, #56]	; (800095c <MX_I2C1_Init+0x50>)
 8000924:	2200      	movs	r2, #0
 8000926:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000928:	4b0c      	ldr	r3, [pc, #48]	; (800095c <MX_I2C1_Init+0x50>)
 800092a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800092e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000930:	4b0a      	ldr	r3, [pc, #40]	; (800095c <MX_I2C1_Init+0x50>)
 8000932:	2200      	movs	r2, #0
 8000934:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000936:	4b09      	ldr	r3, [pc, #36]	; (800095c <MX_I2C1_Init+0x50>)
 8000938:	2200      	movs	r2, #0
 800093a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800093c:	4b07      	ldr	r3, [pc, #28]	; (800095c <MX_I2C1_Init+0x50>)
 800093e:	2200      	movs	r2, #0
 8000940:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000942:	4b06      	ldr	r3, [pc, #24]	; (800095c <MX_I2C1_Init+0x50>)
 8000944:	2200      	movs	r2, #0
 8000946:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000948:	4804      	ldr	r0, [pc, #16]	; (800095c <MX_I2C1_Init+0x50>)
 800094a:	f000 ff51 	bl	80017f0 <HAL_I2C_Init>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000954:	f000 f8b2 	bl	8000abc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000958:	bf00      	nop
 800095a:	bd80      	pop	{r7, pc}
 800095c:	20000078 	.word	0x20000078
 8000960:	40005400 	.word	0x40005400
 8000964:	000186a0 	.word	0x000186a0

08000968 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b088      	sub	sp, #32
 800096c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800096e:	f107 030c 	add.w	r3, r7, #12
 8000972:	2200      	movs	r2, #0
 8000974:	601a      	str	r2, [r3, #0]
 8000976:	605a      	str	r2, [r3, #4]
 8000978:	609a      	str	r2, [r3, #8]
 800097a:	60da      	str	r2, [r3, #12]
 800097c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800097e:	2300      	movs	r3, #0
 8000980:	60bb      	str	r3, [r7, #8]
 8000982:	4b18      	ldr	r3, [pc, #96]	; (80009e4 <MX_GPIO_Init+0x7c>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000986:	4a17      	ldr	r2, [pc, #92]	; (80009e4 <MX_GPIO_Init+0x7c>)
 8000988:	f043 0301 	orr.w	r3, r3, #1
 800098c:	6313      	str	r3, [r2, #48]	; 0x30
 800098e:	4b15      	ldr	r3, [pc, #84]	; (80009e4 <MX_GPIO_Init+0x7c>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000992:	f003 0301 	and.w	r3, r3, #1
 8000996:	60bb      	str	r3, [r7, #8]
 8000998:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800099a:	2300      	movs	r3, #0
 800099c:	607b      	str	r3, [r7, #4]
 800099e:	4b11      	ldr	r3, [pc, #68]	; (80009e4 <MX_GPIO_Init+0x7c>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a2:	4a10      	ldr	r2, [pc, #64]	; (80009e4 <MX_GPIO_Init+0x7c>)
 80009a4:	f043 0302 	orr.w	r3, r3, #2
 80009a8:	6313      	str	r3, [r2, #48]	; 0x30
 80009aa:	4b0e      	ldr	r3, [pc, #56]	; (80009e4 <MX_GPIO_Init+0x7c>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ae:	f003 0302 	and.w	r3, r3, #2
 80009b2:	607b      	str	r3, [r7, #4]
 80009b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 80009b6:	2200      	movs	r2, #0
 80009b8:	211e      	movs	r1, #30
 80009ba:	480b      	ldr	r0, [pc, #44]	; (80009e8 <MX_GPIO_Init+0x80>)
 80009bc:	f000 fefe 	bl	80017bc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA1 PA2 PA3 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 80009c0:	231e      	movs	r3, #30
 80009c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009c4:	2301      	movs	r3, #1
 80009c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c8:	2300      	movs	r3, #0
 80009ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009cc:	2300      	movs	r3, #0
 80009ce:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009d0:	f107 030c 	add.w	r3, r7, #12
 80009d4:	4619      	mov	r1, r3
 80009d6:	4804      	ldr	r0, [pc, #16]	; (80009e8 <MX_GPIO_Init+0x80>)
 80009d8:	f000 fd6c 	bl	80014b4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009dc:	bf00      	nop
 80009de:	3720      	adds	r7, #32
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	40023800 	.word	0x40023800
 80009e8:	40020000 	.word	0x40020000

080009ec <EEPROM_voidInitTime>:
uint32_t GetElapsedTime(void){
	uint32_t l_ElapsTim = g_timeElapsedSec;
	return l_ElapsTim;
}
/* Read Flag value */
void EEPROM_voidInitTime(void){
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b082      	sub	sp, #8
 80009f0:	af00      	add	r7, sp, #0
	EEPROM_Read(PAGE_NUM_FLAG_LOC, OFFSET_NUM_FLAG, &g_flag, FLAG_SIZE_DATA);
 80009f2:	2301      	movs	r3, #1
 80009f4:	4a15      	ldr	r2, [pc, #84]	; (8000a4c <EEPROM_voidInitTime+0x60>)
 80009f6:	2103      	movs	r1, #3
 80009f8:	2064      	movs	r0, #100	; 0x64
 80009fa:	f7ff fdef 	bl	80005dc <EEPROM_Read>

	HAL_Delay(5);
 80009fe:	2005      	movs	r0, #5
 8000a00:	f000 f9ec 	bl	8000ddc <HAL_Delay>
	if(g_flag != FIRST_TIME){
 8000a04:	4b11      	ldr	r3, [pc, #68]	; (8000a4c <EEPROM_voidInitTime+0x60>)
 8000a06:	781b      	ldrb	r3, [r3, #0]
 8000a08:	2bff      	cmp	r3, #255	; 0xff
 8000a0a:	d006      	beq.n	8000a1a <EEPROM_voidInitTime+0x2e>

		EEPROM_Read(PAGE_NUM_TIM_LOC, OFFSET_NUM_TIM, (uint8_t *)&g_timeElapsedSec, TIM_SIZE_DATA);
 8000a0c:	2304      	movs	r3, #4
 8000a0e:	4a10      	ldr	r2, [pc, #64]	; (8000a50 <EEPROM_voidInitTime+0x64>)
 8000a10:	2101      	movs	r1, #1
 8000a12:	2001      	movs	r0, #1
 8000a14:	f7ff fde2 	bl	80005dc <EEPROM_Read>
		for(uint8_t i = 0 ; i < 7 ; i++){
			EEPROM_PageErase(i);
		}
		EEPROM_Write(PAGE_NUM_FLAG_LOC, OFFSET_NUM_FLAG,&Done, FLAG_SIZE_DATA);
	}
}
 8000a18:	e013      	b.n	8000a42 <EEPROM_voidInitTime+0x56>
		for(uint8_t i = 0 ; i < 7 ; i++){
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	71fb      	strb	r3, [r7, #7]
 8000a1e:	e007      	b.n	8000a30 <EEPROM_voidInitTime+0x44>
			EEPROM_PageErase(i);
 8000a20:	79fb      	ldrb	r3, [r7, #7]
 8000a22:	b29b      	uxth	r3, r3
 8000a24:	4618      	mov	r0, r3
 8000a26:	f7ff fe3b 	bl	80006a0 <EEPROM_PageErase>
		for(uint8_t i = 0 ; i < 7 ; i++){
 8000a2a:	79fb      	ldrb	r3, [r7, #7]
 8000a2c:	3301      	adds	r3, #1
 8000a2e:	71fb      	strb	r3, [r7, #7]
 8000a30:	79fb      	ldrb	r3, [r7, #7]
 8000a32:	2b06      	cmp	r3, #6
 8000a34:	d9f4      	bls.n	8000a20 <EEPROM_voidInitTime+0x34>
		EEPROM_Write(PAGE_NUM_FLAG_LOC, OFFSET_NUM_FLAG,&Done, FLAG_SIZE_DATA);
 8000a36:	2301      	movs	r3, #1
 8000a38:	4a06      	ldr	r2, [pc, #24]	; (8000a54 <EEPROM_voidInitTime+0x68>)
 8000a3a:	2103      	movs	r1, #3
 8000a3c:	2064      	movs	r0, #100	; 0x64
 8000a3e:	f7ff fd67 	bl	8000510 <EEPROM_Write>
}
 8000a42:	bf00      	nop
 8000a44:	3708      	adds	r7, #8
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	200000e0 	.word	0x200000e0
 8000a50:	200000dc 	.word	0x200000dc
 8000a54:	20000000 	.word	0x20000000

08000a58 <IncTimFunc>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_IncTimFunc */
void IncTimFunc(void *argument)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b082      	sub	sp, #8
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	g_timeElapsedSec += 2;
 8000a60:	4b04      	ldr	r3, [pc, #16]	; (8000a74 <IncTimFunc+0x1c>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	3302      	adds	r3, #2
 8000a66:	4a03      	ldr	r2, [pc, #12]	; (8000a74 <IncTimFunc+0x1c>)
 8000a68:	6013      	str	r3, [r2, #0]

    osDelay(2000);
 8000a6a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000a6e:	f002 fbd3 	bl	8003218 <osDelay>
	g_timeElapsedSec += 2;
 8000a72:	e7f5      	b.n	8000a60 <IncTimFunc+0x8>
 8000a74:	200000dc 	.word	0x200000dc

08000a78 <EEPROM_saveTimVal>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_EEPROM_saveTimVal */
void EEPROM_saveTimVal(void *argument)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b082      	sub	sp, #8
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN EEPROM_saveTimVal */
  /* Infinite loop */
  for(;;)
  {
	 EEPROM_Write(PAGE_NUM_TIM_LOC, OFFSET_NUM_TIM,(uint8_t *)&g_timeElapsedSec,TIM_SIZE_DATA);
 8000a80:	2304      	movs	r3, #4
 8000a82:	4a05      	ldr	r2, [pc, #20]	; (8000a98 <EEPROM_saveTimVal+0x20>)
 8000a84:	2101      	movs	r1, #1
 8000a86:	2001      	movs	r0, #1
 8000a88:	f7ff fd42 	bl	8000510 <EEPROM_Write>

    osDelay(10000);
 8000a8c:	f242 7010 	movw	r0, #10000	; 0x2710
 8000a90:	f002 fbc2 	bl	8003218 <osDelay>
	 EEPROM_Write(PAGE_NUM_TIM_LOC, OFFSET_NUM_TIM,(uint8_t *)&g_timeElapsedSec,TIM_SIZE_DATA);
 8000a94:	e7f4      	b.n	8000a80 <EEPROM_saveTimVal+0x8>
 8000a96:	bf00      	nop
 8000a98:	200000dc 	.word	0x200000dc

08000a9c <getFuelLevelFromADC>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_getFuelLevelFromADC */
void getFuelLevelFromADC(void *argument)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN getFuelLevelFromADC */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000aa4:	2001      	movs	r0, #1
 8000aa6:	f002 fbb7 	bl	8003218 <osDelay>
 8000aaa:	e7fb      	b.n	8000aa4 <getFuelLevelFromADC+0x8>

08000aac <mapFuelLevelDigtalToLED>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_mapFuelLevelDigtalToLED */
void mapFuelLevelDigtalToLED(void *argument)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN mapFuelLevelDigtalToLED */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000ab4:	2001      	movs	r0, #1
 8000ab6:	f002 fbaf 	bl	8003218 <osDelay>
 8000aba:	e7fb      	b.n	8000ab4 <mapFuelLevelDigtalToLED+0x8>

08000abc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ac0:	b672      	cpsid	i
}
 8000ac2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000ac4:	e7fe      	b.n	8000ac4 <Error_Handler+0x8>
	...

08000ac8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ace:	2300      	movs	r3, #0
 8000ad0:	607b      	str	r3, [r7, #4]
 8000ad2:	4b12      	ldr	r3, [pc, #72]	; (8000b1c <HAL_MspInit+0x54>)
 8000ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ad6:	4a11      	ldr	r2, [pc, #68]	; (8000b1c <HAL_MspInit+0x54>)
 8000ad8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000adc:	6453      	str	r3, [r2, #68]	; 0x44
 8000ade:	4b0f      	ldr	r3, [pc, #60]	; (8000b1c <HAL_MspInit+0x54>)
 8000ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ae2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ae6:	607b      	str	r3, [r7, #4]
 8000ae8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aea:	2300      	movs	r3, #0
 8000aec:	603b      	str	r3, [r7, #0]
 8000aee:	4b0b      	ldr	r3, [pc, #44]	; (8000b1c <HAL_MspInit+0x54>)
 8000af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af2:	4a0a      	ldr	r2, [pc, #40]	; (8000b1c <HAL_MspInit+0x54>)
 8000af4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000af8:	6413      	str	r3, [r2, #64]	; 0x40
 8000afa:	4b08      	ldr	r3, [pc, #32]	; (8000b1c <HAL_MspInit+0x54>)
 8000afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000afe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b02:	603b      	str	r3, [r7, #0]
 8000b04:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b06:	2200      	movs	r2, #0
 8000b08:	210f      	movs	r1, #15
 8000b0a:	f06f 0001 	mvn.w	r0, #1
 8000b0e:	f000 fca8 	bl	8001462 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b12:	bf00      	nop
 8000b14:	3708      	adds	r7, #8
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	40023800 	.word	0x40023800

08000b20 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b08a      	sub	sp, #40	; 0x28
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b28:	f107 0314 	add.w	r3, r7, #20
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	601a      	str	r2, [r3, #0]
 8000b30:	605a      	str	r2, [r3, #4]
 8000b32:	609a      	str	r2, [r3, #8]
 8000b34:	60da      	str	r2, [r3, #12]
 8000b36:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	4a17      	ldr	r2, [pc, #92]	; (8000b9c <HAL_ADC_MspInit+0x7c>)
 8000b3e:	4293      	cmp	r3, r2
 8000b40:	d127      	bne.n	8000b92 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000b42:	2300      	movs	r3, #0
 8000b44:	613b      	str	r3, [r7, #16]
 8000b46:	4b16      	ldr	r3, [pc, #88]	; (8000ba0 <HAL_ADC_MspInit+0x80>)
 8000b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b4a:	4a15      	ldr	r2, [pc, #84]	; (8000ba0 <HAL_ADC_MspInit+0x80>)
 8000b4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b50:	6453      	str	r3, [r2, #68]	; 0x44
 8000b52:	4b13      	ldr	r3, [pc, #76]	; (8000ba0 <HAL_ADC_MspInit+0x80>)
 8000b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b5a:	613b      	str	r3, [r7, #16]
 8000b5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b5e:	2300      	movs	r3, #0
 8000b60:	60fb      	str	r3, [r7, #12]
 8000b62:	4b0f      	ldr	r3, [pc, #60]	; (8000ba0 <HAL_ADC_MspInit+0x80>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b66:	4a0e      	ldr	r2, [pc, #56]	; (8000ba0 <HAL_ADC_MspInit+0x80>)
 8000b68:	f043 0301 	orr.w	r3, r3, #1
 8000b6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b6e:	4b0c      	ldr	r3, [pc, #48]	; (8000ba0 <HAL_ADC_MspInit+0x80>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b72:	f003 0301 	and.w	r3, r3, #1
 8000b76:	60fb      	str	r3, [r7, #12]
 8000b78:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b7e:	2303      	movs	r3, #3
 8000b80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b82:	2300      	movs	r3, #0
 8000b84:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b86:	f107 0314 	add.w	r3, r7, #20
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	4805      	ldr	r0, [pc, #20]	; (8000ba4 <HAL_ADC_MspInit+0x84>)
 8000b8e:	f000 fc91 	bl	80014b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000b92:	bf00      	nop
 8000b94:	3728      	adds	r7, #40	; 0x28
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	40012000 	.word	0x40012000
 8000ba0:	40023800 	.word	0x40023800
 8000ba4:	40020000 	.word	0x40020000

08000ba8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b08a      	sub	sp, #40	; 0x28
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb0:	f107 0314 	add.w	r3, r7, #20
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	601a      	str	r2, [r3, #0]
 8000bb8:	605a      	str	r2, [r3, #4]
 8000bba:	609a      	str	r2, [r3, #8]
 8000bbc:	60da      	str	r2, [r3, #12]
 8000bbe:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4a19      	ldr	r2, [pc, #100]	; (8000c2c <HAL_I2C_MspInit+0x84>)
 8000bc6:	4293      	cmp	r3, r2
 8000bc8:	d12b      	bne.n	8000c22 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bca:	2300      	movs	r3, #0
 8000bcc:	613b      	str	r3, [r7, #16]
 8000bce:	4b18      	ldr	r3, [pc, #96]	; (8000c30 <HAL_I2C_MspInit+0x88>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd2:	4a17      	ldr	r2, [pc, #92]	; (8000c30 <HAL_I2C_MspInit+0x88>)
 8000bd4:	f043 0302 	orr.w	r3, r3, #2
 8000bd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bda:	4b15      	ldr	r3, [pc, #84]	; (8000c30 <HAL_I2C_MspInit+0x88>)
 8000bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bde:	f003 0302 	and.w	r3, r3, #2
 8000be2:	613b      	str	r3, [r7, #16]
 8000be4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000be6:	23c0      	movs	r3, #192	; 0xc0
 8000be8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bea:	2312      	movs	r3, #18
 8000bec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bf2:	2303      	movs	r3, #3
 8000bf4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000bf6:	2304      	movs	r3, #4
 8000bf8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bfa:	f107 0314 	add.w	r3, r7, #20
 8000bfe:	4619      	mov	r1, r3
 8000c00:	480c      	ldr	r0, [pc, #48]	; (8000c34 <HAL_I2C_MspInit+0x8c>)
 8000c02:	f000 fc57 	bl	80014b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c06:	2300      	movs	r3, #0
 8000c08:	60fb      	str	r3, [r7, #12]
 8000c0a:	4b09      	ldr	r3, [pc, #36]	; (8000c30 <HAL_I2C_MspInit+0x88>)
 8000c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c0e:	4a08      	ldr	r2, [pc, #32]	; (8000c30 <HAL_I2C_MspInit+0x88>)
 8000c10:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c14:	6413      	str	r3, [r2, #64]	; 0x40
 8000c16:	4b06      	ldr	r3, [pc, #24]	; (8000c30 <HAL_I2C_MspInit+0x88>)
 8000c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c1a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c1e:	60fb      	str	r3, [r7, #12]
 8000c20:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000c22:	bf00      	nop
 8000c24:	3728      	adds	r7, #40	; 0x28
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	40005400 	.word	0x40005400
 8000c30:	40023800 	.word	0x40023800
 8000c34:	40020400 	.word	0x40020400

08000c38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c3c:	e7fe      	b.n	8000c3c <NMI_Handler+0x4>

08000c3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c3e:	b480      	push	{r7}
 8000c40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c42:	e7fe      	b.n	8000c42 <HardFault_Handler+0x4>

08000c44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c48:	e7fe      	b.n	8000c48 <MemManage_Handler+0x4>

08000c4a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c4a:	b480      	push	{r7}
 8000c4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c4e:	e7fe      	b.n	8000c4e <BusFault_Handler+0x4>

08000c50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c54:	e7fe      	b.n	8000c54 <UsageFault_Handler+0x4>

08000c56 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c56:	b480      	push	{r7}
 8000c58:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c5a:	bf00      	nop
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c62:	4770      	bx	lr

08000c64 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c68:	f000 f898 	bl	8000d9c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000c6c:	f003 fee2 	bl	8004a34 <xTaskGetSchedulerState>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b01      	cmp	r3, #1
 8000c74:	d001      	beq.n	8000c7a <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000c76:	f004 fcc7 	bl	8005608 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c7a:	bf00      	nop
 8000c7c:	bd80      	pop	{r7, pc}
	...

08000c80 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c84:	4b06      	ldr	r3, [pc, #24]	; (8000ca0 <SystemInit+0x20>)
 8000c86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c8a:	4a05      	ldr	r2, [pc, #20]	; (8000ca0 <SystemInit+0x20>)
 8000c8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c94:	bf00      	nop
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop
 8000ca0:	e000ed00 	.word	0xe000ed00

08000ca4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000ca4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cdc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ca8:	480d      	ldr	r0, [pc, #52]	; (8000ce0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000caa:	490e      	ldr	r1, [pc, #56]	; (8000ce4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000cac:	4a0e      	ldr	r2, [pc, #56]	; (8000ce8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000cae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cb0:	e002      	b.n	8000cb8 <LoopCopyDataInit>

08000cb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cb6:	3304      	adds	r3, #4

08000cb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cbc:	d3f9      	bcc.n	8000cb2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cbe:	4a0b      	ldr	r2, [pc, #44]	; (8000cec <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000cc0:	4c0b      	ldr	r4, [pc, #44]	; (8000cf0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000cc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cc4:	e001      	b.n	8000cca <LoopFillZerobss>

08000cc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cc8:	3204      	adds	r2, #4

08000cca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ccc:	d3fb      	bcc.n	8000cc6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000cce:	f7ff ffd7 	bl	8000c80 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cd2:	f004 ff1b 	bl	8005b0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cd6:	f7ff fd0d 	bl	80006f4 <main>
  bx  lr    
 8000cda:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000cdc:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000ce0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ce4:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000ce8:	08005c90 	.word	0x08005c90
  ldr r2, =_sbss
 8000cec:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000cf0:	20004a38 	.word	0x20004a38

08000cf4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cf4:	e7fe      	b.n	8000cf4 <ADC_IRQHandler>
	...

08000cf8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cfc:	4b0e      	ldr	r3, [pc, #56]	; (8000d38 <HAL_Init+0x40>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	4a0d      	ldr	r2, [pc, #52]	; (8000d38 <HAL_Init+0x40>)
 8000d02:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d06:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d08:	4b0b      	ldr	r3, [pc, #44]	; (8000d38 <HAL_Init+0x40>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4a0a      	ldr	r2, [pc, #40]	; (8000d38 <HAL_Init+0x40>)
 8000d0e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d12:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d14:	4b08      	ldr	r3, [pc, #32]	; (8000d38 <HAL_Init+0x40>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4a07      	ldr	r2, [pc, #28]	; (8000d38 <HAL_Init+0x40>)
 8000d1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d1e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d20:	2003      	movs	r0, #3
 8000d22:	f000 fb93 	bl	800144c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d26:	200f      	movs	r0, #15
 8000d28:	f000 f808 	bl	8000d3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d2c:	f7ff fecc 	bl	8000ac8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d30:	2300      	movs	r3, #0
}
 8000d32:	4618      	mov	r0, r3
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	40023c00 	.word	0x40023c00

08000d3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d44:	4b12      	ldr	r3, [pc, #72]	; (8000d90 <HAL_InitTick+0x54>)
 8000d46:	681a      	ldr	r2, [r3, #0]
 8000d48:	4b12      	ldr	r3, [pc, #72]	; (8000d94 <HAL_InitTick+0x58>)
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d52:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d56:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f000 fb9d 	bl	800149a <HAL_SYSTICK_Config>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d001      	beq.n	8000d6a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d66:	2301      	movs	r3, #1
 8000d68:	e00e      	b.n	8000d88 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	2b0f      	cmp	r3, #15
 8000d6e:	d80a      	bhi.n	8000d86 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d70:	2200      	movs	r2, #0
 8000d72:	6879      	ldr	r1, [r7, #4]
 8000d74:	f04f 30ff 	mov.w	r0, #4294967295
 8000d78:	f000 fb73 	bl	8001462 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d7c:	4a06      	ldr	r2, [pc, #24]	; (8000d98 <HAL_InitTick+0x5c>)
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d82:	2300      	movs	r3, #0
 8000d84:	e000      	b.n	8000d88 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d86:	2301      	movs	r3, #1
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	3708      	adds	r7, #8
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	20000004 	.word	0x20000004
 8000d94:	2000000c 	.word	0x2000000c
 8000d98:	20000008 	.word	0x20000008

08000d9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000da0:	4b06      	ldr	r3, [pc, #24]	; (8000dbc <HAL_IncTick+0x20>)
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	461a      	mov	r2, r3
 8000da6:	4b06      	ldr	r3, [pc, #24]	; (8000dc0 <HAL_IncTick+0x24>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	4413      	add	r3, r2
 8000dac:	4a04      	ldr	r2, [pc, #16]	; (8000dc0 <HAL_IncTick+0x24>)
 8000dae:	6013      	str	r3, [r2, #0]
}
 8000db0:	bf00      	nop
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop
 8000dbc:	2000000c 	.word	0x2000000c
 8000dc0:	200000e4 	.word	0x200000e4

08000dc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  return uwTick;
 8000dc8:	4b03      	ldr	r3, [pc, #12]	; (8000dd8 <HAL_GetTick+0x14>)
 8000dca:	681b      	ldr	r3, [r3, #0]
}
 8000dcc:	4618      	mov	r0, r3
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	200000e4 	.word	0x200000e4

08000ddc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b084      	sub	sp, #16
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000de4:	f7ff ffee 	bl	8000dc4 <HAL_GetTick>
 8000de8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000df4:	d005      	beq.n	8000e02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000df6:	4b0a      	ldr	r3, [pc, #40]	; (8000e20 <HAL_Delay+0x44>)
 8000df8:	781b      	ldrb	r3, [r3, #0]
 8000dfa:	461a      	mov	r2, r3
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	4413      	add	r3, r2
 8000e00:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e02:	bf00      	nop
 8000e04:	f7ff ffde 	bl	8000dc4 <HAL_GetTick>
 8000e08:	4602      	mov	r2, r0
 8000e0a:	68bb      	ldr	r3, [r7, #8]
 8000e0c:	1ad3      	subs	r3, r2, r3
 8000e0e:	68fa      	ldr	r2, [r7, #12]
 8000e10:	429a      	cmp	r2, r3
 8000e12:	d8f7      	bhi.n	8000e04 <HAL_Delay+0x28>
  {
  }
}
 8000e14:	bf00      	nop
 8000e16:	bf00      	nop
 8000e18:	3710      	adds	r7, #16
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	2000000c 	.word	0x2000000c

08000e24 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b084      	sub	sp, #16
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d101      	bne.n	8000e3a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000e36:	2301      	movs	r3, #1
 8000e38:	e033      	b.n	8000ea2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d109      	bne.n	8000e56 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000e42:	6878      	ldr	r0, [r7, #4]
 8000e44:	f7ff fe6c 	bl	8000b20 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	2200      	movs	r2, #0
 8000e52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e5a:	f003 0310 	and.w	r3, r3, #16
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d118      	bne.n	8000e94 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e66:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000e6a:	f023 0302 	bic.w	r3, r3, #2
 8000e6e:	f043 0202 	orr.w	r2, r3, #2
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000e76:	6878      	ldr	r0, [r7, #4]
 8000e78:	f000 f93a 	bl	80010f0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	2200      	movs	r2, #0
 8000e80:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e86:	f023 0303 	bic.w	r3, r3, #3
 8000e8a:	f043 0201 	orr.w	r2, r3, #1
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	641a      	str	r2, [r3, #64]	; 0x40
 8000e92:	e001      	b.n	8000e98 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000e94:	2301      	movs	r3, #1
 8000e96:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000ea0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	3710      	adds	r7, #16
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
	...

08000eac <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b085      	sub	sp, #20
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
 8000eb4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000ec0:	2b01      	cmp	r3, #1
 8000ec2:	d101      	bne.n	8000ec8 <HAL_ADC_ConfigChannel+0x1c>
 8000ec4:	2302      	movs	r3, #2
 8000ec6:	e105      	b.n	80010d4 <HAL_ADC_ConfigChannel+0x228>
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	2201      	movs	r2, #1
 8000ecc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	2b09      	cmp	r3, #9
 8000ed6:	d925      	bls.n	8000f24 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	68d9      	ldr	r1, [r3, #12]
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	b29b      	uxth	r3, r3
 8000ee4:	461a      	mov	r2, r3
 8000ee6:	4613      	mov	r3, r2
 8000ee8:	005b      	lsls	r3, r3, #1
 8000eea:	4413      	add	r3, r2
 8000eec:	3b1e      	subs	r3, #30
 8000eee:	2207      	movs	r2, #7
 8000ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef4:	43da      	mvns	r2, r3
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	400a      	ands	r2, r1
 8000efc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	68d9      	ldr	r1, [r3, #12]
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	689a      	ldr	r2, [r3, #8]
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	b29b      	uxth	r3, r3
 8000f0e:	4618      	mov	r0, r3
 8000f10:	4603      	mov	r3, r0
 8000f12:	005b      	lsls	r3, r3, #1
 8000f14:	4403      	add	r3, r0
 8000f16:	3b1e      	subs	r3, #30
 8000f18:	409a      	lsls	r2, r3
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	430a      	orrs	r2, r1
 8000f20:	60da      	str	r2, [r3, #12]
 8000f22:	e022      	b.n	8000f6a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	6919      	ldr	r1, [r3, #16]
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	b29b      	uxth	r3, r3
 8000f30:	461a      	mov	r2, r3
 8000f32:	4613      	mov	r3, r2
 8000f34:	005b      	lsls	r3, r3, #1
 8000f36:	4413      	add	r3, r2
 8000f38:	2207      	movs	r2, #7
 8000f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3e:	43da      	mvns	r2, r3
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	400a      	ands	r2, r1
 8000f46:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	6919      	ldr	r1, [r3, #16]
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	689a      	ldr	r2, [r3, #8]
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	b29b      	uxth	r3, r3
 8000f58:	4618      	mov	r0, r3
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	005b      	lsls	r3, r3, #1
 8000f5e:	4403      	add	r3, r0
 8000f60:	409a      	lsls	r2, r3
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	430a      	orrs	r2, r1
 8000f68:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	2b06      	cmp	r3, #6
 8000f70:	d824      	bhi.n	8000fbc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	685a      	ldr	r2, [r3, #4]
 8000f7c:	4613      	mov	r3, r2
 8000f7e:	009b      	lsls	r3, r3, #2
 8000f80:	4413      	add	r3, r2
 8000f82:	3b05      	subs	r3, #5
 8000f84:	221f      	movs	r2, #31
 8000f86:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8a:	43da      	mvns	r2, r3
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	400a      	ands	r2, r1
 8000f92:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	b29b      	uxth	r3, r3
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	685a      	ldr	r2, [r3, #4]
 8000fa6:	4613      	mov	r3, r2
 8000fa8:	009b      	lsls	r3, r3, #2
 8000faa:	4413      	add	r3, r2
 8000fac:	3b05      	subs	r3, #5
 8000fae:	fa00 f203 	lsl.w	r2, r0, r3
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	430a      	orrs	r2, r1
 8000fb8:	635a      	str	r2, [r3, #52]	; 0x34
 8000fba:	e04c      	b.n	8001056 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	2b0c      	cmp	r3, #12
 8000fc2:	d824      	bhi.n	800100e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	685a      	ldr	r2, [r3, #4]
 8000fce:	4613      	mov	r3, r2
 8000fd0:	009b      	lsls	r3, r3, #2
 8000fd2:	4413      	add	r3, r2
 8000fd4:	3b23      	subs	r3, #35	; 0x23
 8000fd6:	221f      	movs	r2, #31
 8000fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fdc:	43da      	mvns	r2, r3
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	400a      	ands	r2, r1
 8000fe4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	b29b      	uxth	r3, r3
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	685a      	ldr	r2, [r3, #4]
 8000ff8:	4613      	mov	r3, r2
 8000ffa:	009b      	lsls	r3, r3, #2
 8000ffc:	4413      	add	r3, r2
 8000ffe:	3b23      	subs	r3, #35	; 0x23
 8001000:	fa00 f203 	lsl.w	r2, r0, r3
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	430a      	orrs	r2, r1
 800100a:	631a      	str	r2, [r3, #48]	; 0x30
 800100c:	e023      	b.n	8001056 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	685a      	ldr	r2, [r3, #4]
 8001018:	4613      	mov	r3, r2
 800101a:	009b      	lsls	r3, r3, #2
 800101c:	4413      	add	r3, r2
 800101e:	3b41      	subs	r3, #65	; 0x41
 8001020:	221f      	movs	r2, #31
 8001022:	fa02 f303 	lsl.w	r3, r2, r3
 8001026:	43da      	mvns	r2, r3
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	400a      	ands	r2, r1
 800102e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	b29b      	uxth	r3, r3
 800103c:	4618      	mov	r0, r3
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	685a      	ldr	r2, [r3, #4]
 8001042:	4613      	mov	r3, r2
 8001044:	009b      	lsls	r3, r3, #2
 8001046:	4413      	add	r3, r2
 8001048:	3b41      	subs	r3, #65	; 0x41
 800104a:	fa00 f203 	lsl.w	r2, r0, r3
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	430a      	orrs	r2, r1
 8001054:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001056:	4b22      	ldr	r3, [pc, #136]	; (80010e0 <HAL_ADC_ConfigChannel+0x234>)
 8001058:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	4a21      	ldr	r2, [pc, #132]	; (80010e4 <HAL_ADC_ConfigChannel+0x238>)
 8001060:	4293      	cmp	r3, r2
 8001062:	d109      	bne.n	8001078 <HAL_ADC_ConfigChannel+0x1cc>
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	2b12      	cmp	r3, #18
 800106a:	d105      	bne.n	8001078 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a19      	ldr	r2, [pc, #100]	; (80010e4 <HAL_ADC_ConfigChannel+0x238>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d123      	bne.n	80010ca <HAL_ADC_ConfigChannel+0x21e>
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	2b10      	cmp	r3, #16
 8001088:	d003      	beq.n	8001092 <HAL_ADC_ConfigChannel+0x1e6>
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	2b11      	cmp	r3, #17
 8001090:	d11b      	bne.n	80010ca <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	2b10      	cmp	r3, #16
 80010a4:	d111      	bne.n	80010ca <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80010a6:	4b10      	ldr	r3, [pc, #64]	; (80010e8 <HAL_ADC_ConfigChannel+0x23c>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	4a10      	ldr	r2, [pc, #64]	; (80010ec <HAL_ADC_ConfigChannel+0x240>)
 80010ac:	fba2 2303 	umull	r2, r3, r2, r3
 80010b0:	0c9a      	lsrs	r2, r3, #18
 80010b2:	4613      	mov	r3, r2
 80010b4:	009b      	lsls	r3, r3, #2
 80010b6:	4413      	add	r3, r2
 80010b8:	005b      	lsls	r3, r3, #1
 80010ba:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80010bc:	e002      	b.n	80010c4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80010be:	68bb      	ldr	r3, [r7, #8]
 80010c0:	3b01      	subs	r3, #1
 80010c2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80010c4:	68bb      	ldr	r3, [r7, #8]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d1f9      	bne.n	80010be <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	2200      	movs	r2, #0
 80010ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80010d2:	2300      	movs	r3, #0
}
 80010d4:	4618      	mov	r0, r3
 80010d6:	3714      	adds	r7, #20
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr
 80010e0:	40012300 	.word	0x40012300
 80010e4:	40012000 	.word	0x40012000
 80010e8:	20000004 	.word	0x20000004
 80010ec:	431bde83 	.word	0x431bde83

080010f0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b085      	sub	sp, #20
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80010f8:	4b79      	ldr	r3, [pc, #484]	; (80012e0 <ADC_Init+0x1f0>)
 80010fa:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	685a      	ldr	r2, [r3, #4]
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	431a      	orrs	r2, r3
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	685a      	ldr	r2, [r3, #4]
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001124:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	6859      	ldr	r1, [r3, #4]
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	691b      	ldr	r3, [r3, #16]
 8001130:	021a      	lsls	r2, r3, #8
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	430a      	orrs	r2, r1
 8001138:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	685a      	ldr	r2, [r3, #4]
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001148:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	6859      	ldr	r1, [r3, #4]
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	689a      	ldr	r2, [r3, #8]
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	430a      	orrs	r2, r1
 800115a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	689a      	ldr	r2, [r3, #8]
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800116a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	6899      	ldr	r1, [r3, #8]
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	68da      	ldr	r2, [r3, #12]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	430a      	orrs	r2, r1
 800117c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001182:	4a58      	ldr	r2, [pc, #352]	; (80012e4 <ADC_Init+0x1f4>)
 8001184:	4293      	cmp	r3, r2
 8001186:	d022      	beq.n	80011ce <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	689a      	ldr	r2, [r3, #8]
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001196:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	6899      	ldr	r1, [r3, #8]
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	430a      	orrs	r2, r1
 80011a8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	689a      	ldr	r2, [r3, #8]
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80011b8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	6899      	ldr	r1, [r3, #8]
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	430a      	orrs	r2, r1
 80011ca:	609a      	str	r2, [r3, #8]
 80011cc:	e00f      	b.n	80011ee <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	689a      	ldr	r2, [r3, #8]
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80011dc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	689a      	ldr	r2, [r3, #8]
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80011ec:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	689a      	ldr	r2, [r3, #8]
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f022 0202 	bic.w	r2, r2, #2
 80011fc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	6899      	ldr	r1, [r3, #8]
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	7e1b      	ldrb	r3, [r3, #24]
 8001208:	005a      	lsls	r2, r3, #1
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	430a      	orrs	r2, r1
 8001210:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d01b      	beq.n	8001254 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	685a      	ldr	r2, [r3, #4]
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800122a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	685a      	ldr	r2, [r3, #4]
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800123a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	6859      	ldr	r1, [r3, #4]
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001246:	3b01      	subs	r3, #1
 8001248:	035a      	lsls	r2, r3, #13
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	430a      	orrs	r2, r1
 8001250:	605a      	str	r2, [r3, #4]
 8001252:	e007      	b.n	8001264 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	685a      	ldr	r2, [r3, #4]
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001262:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001272:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	69db      	ldr	r3, [r3, #28]
 800127e:	3b01      	subs	r3, #1
 8001280:	051a      	lsls	r2, r3, #20
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	430a      	orrs	r2, r1
 8001288:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	689a      	ldr	r2, [r3, #8]
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001298:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	6899      	ldr	r1, [r3, #8]
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80012a6:	025a      	lsls	r2, r3, #9
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	430a      	orrs	r2, r1
 80012ae:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	689a      	ldr	r2, [r3, #8]
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80012be:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	6899      	ldr	r1, [r3, #8]
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	695b      	ldr	r3, [r3, #20]
 80012ca:	029a      	lsls	r2, r3, #10
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	430a      	orrs	r2, r1
 80012d2:	609a      	str	r2, [r3, #8]
}
 80012d4:	bf00      	nop
 80012d6:	3714      	adds	r7, #20
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr
 80012e0:	40012300 	.word	0x40012300
 80012e4:	0f000001 	.word	0x0f000001

080012e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b085      	sub	sp, #20
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	f003 0307 	and.w	r3, r3, #7
 80012f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012f8:	4b0c      	ldr	r3, [pc, #48]	; (800132c <__NVIC_SetPriorityGrouping+0x44>)
 80012fa:	68db      	ldr	r3, [r3, #12]
 80012fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012fe:	68ba      	ldr	r2, [r7, #8]
 8001300:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001304:	4013      	ands	r3, r2
 8001306:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800130c:	68bb      	ldr	r3, [r7, #8]
 800130e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001310:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001314:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001318:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800131a:	4a04      	ldr	r2, [pc, #16]	; (800132c <__NVIC_SetPriorityGrouping+0x44>)
 800131c:	68bb      	ldr	r3, [r7, #8]
 800131e:	60d3      	str	r3, [r2, #12]
}
 8001320:	bf00      	nop
 8001322:	3714      	adds	r7, #20
 8001324:	46bd      	mov	sp, r7
 8001326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132a:	4770      	bx	lr
 800132c:	e000ed00 	.word	0xe000ed00

08001330 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001334:	4b04      	ldr	r3, [pc, #16]	; (8001348 <__NVIC_GetPriorityGrouping+0x18>)
 8001336:	68db      	ldr	r3, [r3, #12]
 8001338:	0a1b      	lsrs	r3, r3, #8
 800133a:	f003 0307 	and.w	r3, r3, #7
}
 800133e:	4618      	mov	r0, r3
 8001340:	46bd      	mov	sp, r7
 8001342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001346:	4770      	bx	lr
 8001348:	e000ed00 	.word	0xe000ed00

0800134c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800134c:	b480      	push	{r7}
 800134e:	b083      	sub	sp, #12
 8001350:	af00      	add	r7, sp, #0
 8001352:	4603      	mov	r3, r0
 8001354:	6039      	str	r1, [r7, #0]
 8001356:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001358:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800135c:	2b00      	cmp	r3, #0
 800135e:	db0a      	blt.n	8001376 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	b2da      	uxtb	r2, r3
 8001364:	490c      	ldr	r1, [pc, #48]	; (8001398 <__NVIC_SetPriority+0x4c>)
 8001366:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800136a:	0112      	lsls	r2, r2, #4
 800136c:	b2d2      	uxtb	r2, r2
 800136e:	440b      	add	r3, r1
 8001370:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001374:	e00a      	b.n	800138c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	b2da      	uxtb	r2, r3
 800137a:	4908      	ldr	r1, [pc, #32]	; (800139c <__NVIC_SetPriority+0x50>)
 800137c:	79fb      	ldrb	r3, [r7, #7]
 800137e:	f003 030f 	and.w	r3, r3, #15
 8001382:	3b04      	subs	r3, #4
 8001384:	0112      	lsls	r2, r2, #4
 8001386:	b2d2      	uxtb	r2, r2
 8001388:	440b      	add	r3, r1
 800138a:	761a      	strb	r2, [r3, #24]
}
 800138c:	bf00      	nop
 800138e:	370c      	adds	r7, #12
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr
 8001398:	e000e100 	.word	0xe000e100
 800139c:	e000ed00 	.word	0xe000ed00

080013a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b089      	sub	sp, #36	; 0x24
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	60f8      	str	r0, [r7, #12]
 80013a8:	60b9      	str	r1, [r7, #8]
 80013aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	f003 0307 	and.w	r3, r3, #7
 80013b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013b4:	69fb      	ldr	r3, [r7, #28]
 80013b6:	f1c3 0307 	rsb	r3, r3, #7
 80013ba:	2b04      	cmp	r3, #4
 80013bc:	bf28      	it	cs
 80013be:	2304      	movcs	r3, #4
 80013c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013c2:	69fb      	ldr	r3, [r7, #28]
 80013c4:	3304      	adds	r3, #4
 80013c6:	2b06      	cmp	r3, #6
 80013c8:	d902      	bls.n	80013d0 <NVIC_EncodePriority+0x30>
 80013ca:	69fb      	ldr	r3, [r7, #28]
 80013cc:	3b03      	subs	r3, #3
 80013ce:	e000      	b.n	80013d2 <NVIC_EncodePriority+0x32>
 80013d0:	2300      	movs	r3, #0
 80013d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013d4:	f04f 32ff 	mov.w	r2, #4294967295
 80013d8:	69bb      	ldr	r3, [r7, #24]
 80013da:	fa02 f303 	lsl.w	r3, r2, r3
 80013de:	43da      	mvns	r2, r3
 80013e0:	68bb      	ldr	r3, [r7, #8]
 80013e2:	401a      	ands	r2, r3
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013e8:	f04f 31ff 	mov.w	r1, #4294967295
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	fa01 f303 	lsl.w	r3, r1, r3
 80013f2:	43d9      	mvns	r1, r3
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013f8:	4313      	orrs	r3, r2
         );
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	3724      	adds	r7, #36	; 0x24
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr
	...

08001408 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	3b01      	subs	r3, #1
 8001414:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001418:	d301      	bcc.n	800141e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800141a:	2301      	movs	r3, #1
 800141c:	e00f      	b.n	800143e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800141e:	4a0a      	ldr	r2, [pc, #40]	; (8001448 <SysTick_Config+0x40>)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	3b01      	subs	r3, #1
 8001424:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001426:	210f      	movs	r1, #15
 8001428:	f04f 30ff 	mov.w	r0, #4294967295
 800142c:	f7ff ff8e 	bl	800134c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001430:	4b05      	ldr	r3, [pc, #20]	; (8001448 <SysTick_Config+0x40>)
 8001432:	2200      	movs	r2, #0
 8001434:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001436:	4b04      	ldr	r3, [pc, #16]	; (8001448 <SysTick_Config+0x40>)
 8001438:	2207      	movs	r2, #7
 800143a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800143c:	2300      	movs	r3, #0
}
 800143e:	4618      	mov	r0, r3
 8001440:	3708      	adds	r7, #8
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	e000e010 	.word	0xe000e010

0800144c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001454:	6878      	ldr	r0, [r7, #4]
 8001456:	f7ff ff47 	bl	80012e8 <__NVIC_SetPriorityGrouping>
}
 800145a:	bf00      	nop
 800145c:	3708      	adds	r7, #8
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}

08001462 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001462:	b580      	push	{r7, lr}
 8001464:	b086      	sub	sp, #24
 8001466:	af00      	add	r7, sp, #0
 8001468:	4603      	mov	r3, r0
 800146a:	60b9      	str	r1, [r7, #8]
 800146c:	607a      	str	r2, [r7, #4]
 800146e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001470:	2300      	movs	r3, #0
 8001472:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001474:	f7ff ff5c 	bl	8001330 <__NVIC_GetPriorityGrouping>
 8001478:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800147a:	687a      	ldr	r2, [r7, #4]
 800147c:	68b9      	ldr	r1, [r7, #8]
 800147e:	6978      	ldr	r0, [r7, #20]
 8001480:	f7ff ff8e 	bl	80013a0 <NVIC_EncodePriority>
 8001484:	4602      	mov	r2, r0
 8001486:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800148a:	4611      	mov	r1, r2
 800148c:	4618      	mov	r0, r3
 800148e:	f7ff ff5d 	bl	800134c <__NVIC_SetPriority>
}
 8001492:	bf00      	nop
 8001494:	3718      	adds	r7, #24
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}

0800149a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800149a:	b580      	push	{r7, lr}
 800149c:	b082      	sub	sp, #8
 800149e:	af00      	add	r7, sp, #0
 80014a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014a2:	6878      	ldr	r0, [r7, #4]
 80014a4:	f7ff ffb0 	bl	8001408 <SysTick_Config>
 80014a8:	4603      	mov	r3, r0
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	3708      	adds	r7, #8
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
	...

080014b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b089      	sub	sp, #36	; 0x24
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
 80014bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80014be:	2300      	movs	r3, #0
 80014c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80014c2:	2300      	movs	r3, #0
 80014c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80014c6:	2300      	movs	r3, #0
 80014c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014ca:	2300      	movs	r3, #0
 80014cc:	61fb      	str	r3, [r7, #28]
 80014ce:	e159      	b.n	8001784 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80014d0:	2201      	movs	r2, #1
 80014d2:	69fb      	ldr	r3, [r7, #28]
 80014d4:	fa02 f303 	lsl.w	r3, r2, r3
 80014d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	697a      	ldr	r2, [r7, #20]
 80014e0:	4013      	ands	r3, r2
 80014e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80014e4:	693a      	ldr	r2, [r7, #16]
 80014e6:	697b      	ldr	r3, [r7, #20]
 80014e8:	429a      	cmp	r2, r3
 80014ea:	f040 8148 	bne.w	800177e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	f003 0303 	and.w	r3, r3, #3
 80014f6:	2b01      	cmp	r3, #1
 80014f8:	d005      	beq.n	8001506 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001502:	2b02      	cmp	r3, #2
 8001504:	d130      	bne.n	8001568 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	689b      	ldr	r3, [r3, #8]
 800150a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800150c:	69fb      	ldr	r3, [r7, #28]
 800150e:	005b      	lsls	r3, r3, #1
 8001510:	2203      	movs	r2, #3
 8001512:	fa02 f303 	lsl.w	r3, r2, r3
 8001516:	43db      	mvns	r3, r3
 8001518:	69ba      	ldr	r2, [r7, #24]
 800151a:	4013      	ands	r3, r2
 800151c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	68da      	ldr	r2, [r3, #12]
 8001522:	69fb      	ldr	r3, [r7, #28]
 8001524:	005b      	lsls	r3, r3, #1
 8001526:	fa02 f303 	lsl.w	r3, r2, r3
 800152a:	69ba      	ldr	r2, [r7, #24]
 800152c:	4313      	orrs	r3, r2
 800152e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	69ba      	ldr	r2, [r7, #24]
 8001534:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800153c:	2201      	movs	r2, #1
 800153e:	69fb      	ldr	r3, [r7, #28]
 8001540:	fa02 f303 	lsl.w	r3, r2, r3
 8001544:	43db      	mvns	r3, r3
 8001546:	69ba      	ldr	r2, [r7, #24]
 8001548:	4013      	ands	r3, r2
 800154a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	091b      	lsrs	r3, r3, #4
 8001552:	f003 0201 	and.w	r2, r3, #1
 8001556:	69fb      	ldr	r3, [r7, #28]
 8001558:	fa02 f303 	lsl.w	r3, r2, r3
 800155c:	69ba      	ldr	r2, [r7, #24]
 800155e:	4313      	orrs	r3, r2
 8001560:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	69ba      	ldr	r2, [r7, #24]
 8001566:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	f003 0303 	and.w	r3, r3, #3
 8001570:	2b03      	cmp	r3, #3
 8001572:	d017      	beq.n	80015a4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	68db      	ldr	r3, [r3, #12]
 8001578:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800157a:	69fb      	ldr	r3, [r7, #28]
 800157c:	005b      	lsls	r3, r3, #1
 800157e:	2203      	movs	r2, #3
 8001580:	fa02 f303 	lsl.w	r3, r2, r3
 8001584:	43db      	mvns	r3, r3
 8001586:	69ba      	ldr	r2, [r7, #24]
 8001588:	4013      	ands	r3, r2
 800158a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	689a      	ldr	r2, [r3, #8]
 8001590:	69fb      	ldr	r3, [r7, #28]
 8001592:	005b      	lsls	r3, r3, #1
 8001594:	fa02 f303 	lsl.w	r3, r2, r3
 8001598:	69ba      	ldr	r2, [r7, #24]
 800159a:	4313      	orrs	r3, r2
 800159c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	69ba      	ldr	r2, [r7, #24]
 80015a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	f003 0303 	and.w	r3, r3, #3
 80015ac:	2b02      	cmp	r3, #2
 80015ae:	d123      	bne.n	80015f8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80015b0:	69fb      	ldr	r3, [r7, #28]
 80015b2:	08da      	lsrs	r2, r3, #3
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	3208      	adds	r2, #8
 80015b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80015be:	69fb      	ldr	r3, [r7, #28]
 80015c0:	f003 0307 	and.w	r3, r3, #7
 80015c4:	009b      	lsls	r3, r3, #2
 80015c6:	220f      	movs	r2, #15
 80015c8:	fa02 f303 	lsl.w	r3, r2, r3
 80015cc:	43db      	mvns	r3, r3
 80015ce:	69ba      	ldr	r2, [r7, #24]
 80015d0:	4013      	ands	r3, r2
 80015d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	691a      	ldr	r2, [r3, #16]
 80015d8:	69fb      	ldr	r3, [r7, #28]
 80015da:	f003 0307 	and.w	r3, r3, #7
 80015de:	009b      	lsls	r3, r3, #2
 80015e0:	fa02 f303 	lsl.w	r3, r2, r3
 80015e4:	69ba      	ldr	r2, [r7, #24]
 80015e6:	4313      	orrs	r3, r2
 80015e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80015ea:	69fb      	ldr	r3, [r7, #28]
 80015ec:	08da      	lsrs	r2, r3, #3
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	3208      	adds	r2, #8
 80015f2:	69b9      	ldr	r1, [r7, #24]
 80015f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80015fe:	69fb      	ldr	r3, [r7, #28]
 8001600:	005b      	lsls	r3, r3, #1
 8001602:	2203      	movs	r2, #3
 8001604:	fa02 f303 	lsl.w	r3, r2, r3
 8001608:	43db      	mvns	r3, r3
 800160a:	69ba      	ldr	r2, [r7, #24]
 800160c:	4013      	ands	r3, r2
 800160e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	f003 0203 	and.w	r2, r3, #3
 8001618:	69fb      	ldr	r3, [r7, #28]
 800161a:	005b      	lsls	r3, r3, #1
 800161c:	fa02 f303 	lsl.w	r3, r2, r3
 8001620:	69ba      	ldr	r2, [r7, #24]
 8001622:	4313      	orrs	r3, r2
 8001624:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	69ba      	ldr	r2, [r7, #24]
 800162a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001634:	2b00      	cmp	r3, #0
 8001636:	f000 80a2 	beq.w	800177e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800163a:	2300      	movs	r3, #0
 800163c:	60fb      	str	r3, [r7, #12]
 800163e:	4b57      	ldr	r3, [pc, #348]	; (800179c <HAL_GPIO_Init+0x2e8>)
 8001640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001642:	4a56      	ldr	r2, [pc, #344]	; (800179c <HAL_GPIO_Init+0x2e8>)
 8001644:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001648:	6453      	str	r3, [r2, #68]	; 0x44
 800164a:	4b54      	ldr	r3, [pc, #336]	; (800179c <HAL_GPIO_Init+0x2e8>)
 800164c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800164e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001652:	60fb      	str	r3, [r7, #12]
 8001654:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001656:	4a52      	ldr	r2, [pc, #328]	; (80017a0 <HAL_GPIO_Init+0x2ec>)
 8001658:	69fb      	ldr	r3, [r7, #28]
 800165a:	089b      	lsrs	r3, r3, #2
 800165c:	3302      	adds	r3, #2
 800165e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001662:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001664:	69fb      	ldr	r3, [r7, #28]
 8001666:	f003 0303 	and.w	r3, r3, #3
 800166a:	009b      	lsls	r3, r3, #2
 800166c:	220f      	movs	r2, #15
 800166e:	fa02 f303 	lsl.w	r3, r2, r3
 8001672:	43db      	mvns	r3, r3
 8001674:	69ba      	ldr	r2, [r7, #24]
 8001676:	4013      	ands	r3, r2
 8001678:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	4a49      	ldr	r2, [pc, #292]	; (80017a4 <HAL_GPIO_Init+0x2f0>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d019      	beq.n	80016b6 <HAL_GPIO_Init+0x202>
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	4a48      	ldr	r2, [pc, #288]	; (80017a8 <HAL_GPIO_Init+0x2f4>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d013      	beq.n	80016b2 <HAL_GPIO_Init+0x1fe>
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	4a47      	ldr	r2, [pc, #284]	; (80017ac <HAL_GPIO_Init+0x2f8>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d00d      	beq.n	80016ae <HAL_GPIO_Init+0x1fa>
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	4a46      	ldr	r2, [pc, #280]	; (80017b0 <HAL_GPIO_Init+0x2fc>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d007      	beq.n	80016aa <HAL_GPIO_Init+0x1f6>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	4a45      	ldr	r2, [pc, #276]	; (80017b4 <HAL_GPIO_Init+0x300>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d101      	bne.n	80016a6 <HAL_GPIO_Init+0x1f2>
 80016a2:	2304      	movs	r3, #4
 80016a4:	e008      	b.n	80016b8 <HAL_GPIO_Init+0x204>
 80016a6:	2307      	movs	r3, #7
 80016a8:	e006      	b.n	80016b8 <HAL_GPIO_Init+0x204>
 80016aa:	2303      	movs	r3, #3
 80016ac:	e004      	b.n	80016b8 <HAL_GPIO_Init+0x204>
 80016ae:	2302      	movs	r3, #2
 80016b0:	e002      	b.n	80016b8 <HAL_GPIO_Init+0x204>
 80016b2:	2301      	movs	r3, #1
 80016b4:	e000      	b.n	80016b8 <HAL_GPIO_Init+0x204>
 80016b6:	2300      	movs	r3, #0
 80016b8:	69fa      	ldr	r2, [r7, #28]
 80016ba:	f002 0203 	and.w	r2, r2, #3
 80016be:	0092      	lsls	r2, r2, #2
 80016c0:	4093      	lsls	r3, r2
 80016c2:	69ba      	ldr	r2, [r7, #24]
 80016c4:	4313      	orrs	r3, r2
 80016c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80016c8:	4935      	ldr	r1, [pc, #212]	; (80017a0 <HAL_GPIO_Init+0x2ec>)
 80016ca:	69fb      	ldr	r3, [r7, #28]
 80016cc:	089b      	lsrs	r3, r3, #2
 80016ce:	3302      	adds	r3, #2
 80016d0:	69ba      	ldr	r2, [r7, #24]
 80016d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80016d6:	4b38      	ldr	r3, [pc, #224]	; (80017b8 <HAL_GPIO_Init+0x304>)
 80016d8:	689b      	ldr	r3, [r3, #8]
 80016da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016dc:	693b      	ldr	r3, [r7, #16]
 80016de:	43db      	mvns	r3, r3
 80016e0:	69ba      	ldr	r2, [r7, #24]
 80016e2:	4013      	ands	r3, r2
 80016e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d003      	beq.n	80016fa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80016f2:	69ba      	ldr	r2, [r7, #24]
 80016f4:	693b      	ldr	r3, [r7, #16]
 80016f6:	4313      	orrs	r3, r2
 80016f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80016fa:	4a2f      	ldr	r2, [pc, #188]	; (80017b8 <HAL_GPIO_Init+0x304>)
 80016fc:	69bb      	ldr	r3, [r7, #24]
 80016fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001700:	4b2d      	ldr	r3, [pc, #180]	; (80017b8 <HAL_GPIO_Init+0x304>)
 8001702:	68db      	ldr	r3, [r3, #12]
 8001704:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001706:	693b      	ldr	r3, [r7, #16]
 8001708:	43db      	mvns	r3, r3
 800170a:	69ba      	ldr	r2, [r7, #24]
 800170c:	4013      	ands	r3, r2
 800170e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001718:	2b00      	cmp	r3, #0
 800171a:	d003      	beq.n	8001724 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800171c:	69ba      	ldr	r2, [r7, #24]
 800171e:	693b      	ldr	r3, [r7, #16]
 8001720:	4313      	orrs	r3, r2
 8001722:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001724:	4a24      	ldr	r2, [pc, #144]	; (80017b8 <HAL_GPIO_Init+0x304>)
 8001726:	69bb      	ldr	r3, [r7, #24]
 8001728:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800172a:	4b23      	ldr	r3, [pc, #140]	; (80017b8 <HAL_GPIO_Init+0x304>)
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001730:	693b      	ldr	r3, [r7, #16]
 8001732:	43db      	mvns	r3, r3
 8001734:	69ba      	ldr	r2, [r7, #24]
 8001736:	4013      	ands	r3, r2
 8001738:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001742:	2b00      	cmp	r3, #0
 8001744:	d003      	beq.n	800174e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001746:	69ba      	ldr	r2, [r7, #24]
 8001748:	693b      	ldr	r3, [r7, #16]
 800174a:	4313      	orrs	r3, r2
 800174c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800174e:	4a1a      	ldr	r2, [pc, #104]	; (80017b8 <HAL_GPIO_Init+0x304>)
 8001750:	69bb      	ldr	r3, [r7, #24]
 8001752:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001754:	4b18      	ldr	r3, [pc, #96]	; (80017b8 <HAL_GPIO_Init+0x304>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800175a:	693b      	ldr	r3, [r7, #16]
 800175c:	43db      	mvns	r3, r3
 800175e:	69ba      	ldr	r2, [r7, #24]
 8001760:	4013      	ands	r3, r2
 8001762:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800176c:	2b00      	cmp	r3, #0
 800176e:	d003      	beq.n	8001778 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001770:	69ba      	ldr	r2, [r7, #24]
 8001772:	693b      	ldr	r3, [r7, #16]
 8001774:	4313      	orrs	r3, r2
 8001776:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001778:	4a0f      	ldr	r2, [pc, #60]	; (80017b8 <HAL_GPIO_Init+0x304>)
 800177a:	69bb      	ldr	r3, [r7, #24]
 800177c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800177e:	69fb      	ldr	r3, [r7, #28]
 8001780:	3301      	adds	r3, #1
 8001782:	61fb      	str	r3, [r7, #28]
 8001784:	69fb      	ldr	r3, [r7, #28]
 8001786:	2b0f      	cmp	r3, #15
 8001788:	f67f aea2 	bls.w	80014d0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800178c:	bf00      	nop
 800178e:	bf00      	nop
 8001790:	3724      	adds	r7, #36	; 0x24
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr
 800179a:	bf00      	nop
 800179c:	40023800 	.word	0x40023800
 80017a0:	40013800 	.word	0x40013800
 80017a4:	40020000 	.word	0x40020000
 80017a8:	40020400 	.word	0x40020400
 80017ac:	40020800 	.word	0x40020800
 80017b0:	40020c00 	.word	0x40020c00
 80017b4:	40021000 	.word	0x40021000
 80017b8:	40013c00 	.word	0x40013c00

080017bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017bc:	b480      	push	{r7}
 80017be:	b083      	sub	sp, #12
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
 80017c4:	460b      	mov	r3, r1
 80017c6:	807b      	strh	r3, [r7, #2]
 80017c8:	4613      	mov	r3, r2
 80017ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80017cc:	787b      	ldrb	r3, [r7, #1]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d003      	beq.n	80017da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017d2:	887a      	ldrh	r2, [r7, #2]
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80017d8:	e003      	b.n	80017e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80017da:	887b      	ldrh	r3, [r7, #2]
 80017dc:	041a      	lsls	r2, r3, #16
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	619a      	str	r2, [r3, #24]
}
 80017e2:	bf00      	nop
 80017e4:	370c      	adds	r7, #12
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr
	...

080017f0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b084      	sub	sp, #16
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d101      	bne.n	8001802 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
 8001800:	e12b      	b.n	8001a5a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001808:	b2db      	uxtb	r3, r3
 800180a:	2b00      	cmp	r3, #0
 800180c:	d106      	bne.n	800181c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2200      	movs	r2, #0
 8001812:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001816:	6878      	ldr	r0, [r7, #4]
 8001818:	f7ff f9c6 	bl	8000ba8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2224      	movs	r2, #36	; 0x24
 8001820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	681a      	ldr	r2, [r3, #0]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f022 0201 	bic.w	r2, r2, #1
 8001832:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	681a      	ldr	r2, [r3, #0]
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001842:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	681a      	ldr	r2, [r3, #0]
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001852:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001854:	f001 fbbc 	bl	8002fd0 <HAL_RCC_GetPCLK1Freq>
 8001858:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	4a81      	ldr	r2, [pc, #516]	; (8001a64 <HAL_I2C_Init+0x274>)
 8001860:	4293      	cmp	r3, r2
 8001862:	d807      	bhi.n	8001874 <HAL_I2C_Init+0x84>
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	4a80      	ldr	r2, [pc, #512]	; (8001a68 <HAL_I2C_Init+0x278>)
 8001868:	4293      	cmp	r3, r2
 800186a:	bf94      	ite	ls
 800186c:	2301      	movls	r3, #1
 800186e:	2300      	movhi	r3, #0
 8001870:	b2db      	uxtb	r3, r3
 8001872:	e006      	b.n	8001882 <HAL_I2C_Init+0x92>
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	4a7d      	ldr	r2, [pc, #500]	; (8001a6c <HAL_I2C_Init+0x27c>)
 8001878:	4293      	cmp	r3, r2
 800187a:	bf94      	ite	ls
 800187c:	2301      	movls	r3, #1
 800187e:	2300      	movhi	r3, #0
 8001880:	b2db      	uxtb	r3, r3
 8001882:	2b00      	cmp	r3, #0
 8001884:	d001      	beq.n	800188a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001886:	2301      	movs	r3, #1
 8001888:	e0e7      	b.n	8001a5a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	4a78      	ldr	r2, [pc, #480]	; (8001a70 <HAL_I2C_Init+0x280>)
 800188e:	fba2 2303 	umull	r2, r3, r2, r3
 8001892:	0c9b      	lsrs	r3, r3, #18
 8001894:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	68ba      	ldr	r2, [r7, #8]
 80018a6:	430a      	orrs	r2, r1
 80018a8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	6a1b      	ldr	r3, [r3, #32]
 80018b0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	4a6a      	ldr	r2, [pc, #424]	; (8001a64 <HAL_I2C_Init+0x274>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d802      	bhi.n	80018c4 <HAL_I2C_Init+0xd4>
 80018be:	68bb      	ldr	r3, [r7, #8]
 80018c0:	3301      	adds	r3, #1
 80018c2:	e009      	b.n	80018d8 <HAL_I2C_Init+0xe8>
 80018c4:	68bb      	ldr	r3, [r7, #8]
 80018c6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80018ca:	fb02 f303 	mul.w	r3, r2, r3
 80018ce:	4a69      	ldr	r2, [pc, #420]	; (8001a74 <HAL_I2C_Init+0x284>)
 80018d0:	fba2 2303 	umull	r2, r3, r2, r3
 80018d4:	099b      	lsrs	r3, r3, #6
 80018d6:	3301      	adds	r3, #1
 80018d8:	687a      	ldr	r2, [r7, #4]
 80018da:	6812      	ldr	r2, [r2, #0]
 80018dc:	430b      	orrs	r3, r1
 80018de:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	69db      	ldr	r3, [r3, #28]
 80018e6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80018ea:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	495c      	ldr	r1, [pc, #368]	; (8001a64 <HAL_I2C_Init+0x274>)
 80018f4:	428b      	cmp	r3, r1
 80018f6:	d819      	bhi.n	800192c <HAL_I2C_Init+0x13c>
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	1e59      	subs	r1, r3, #1
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	005b      	lsls	r3, r3, #1
 8001902:	fbb1 f3f3 	udiv	r3, r1, r3
 8001906:	1c59      	adds	r1, r3, #1
 8001908:	f640 73fc 	movw	r3, #4092	; 0xffc
 800190c:	400b      	ands	r3, r1
 800190e:	2b00      	cmp	r3, #0
 8001910:	d00a      	beq.n	8001928 <HAL_I2C_Init+0x138>
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	1e59      	subs	r1, r3, #1
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	005b      	lsls	r3, r3, #1
 800191c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001920:	3301      	adds	r3, #1
 8001922:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001926:	e051      	b.n	80019cc <HAL_I2C_Init+0x1dc>
 8001928:	2304      	movs	r3, #4
 800192a:	e04f      	b.n	80019cc <HAL_I2C_Init+0x1dc>
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	689b      	ldr	r3, [r3, #8]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d111      	bne.n	8001958 <HAL_I2C_Init+0x168>
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	1e58      	subs	r0, r3, #1
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6859      	ldr	r1, [r3, #4]
 800193c:	460b      	mov	r3, r1
 800193e:	005b      	lsls	r3, r3, #1
 8001940:	440b      	add	r3, r1
 8001942:	fbb0 f3f3 	udiv	r3, r0, r3
 8001946:	3301      	adds	r3, #1
 8001948:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800194c:	2b00      	cmp	r3, #0
 800194e:	bf0c      	ite	eq
 8001950:	2301      	moveq	r3, #1
 8001952:	2300      	movne	r3, #0
 8001954:	b2db      	uxtb	r3, r3
 8001956:	e012      	b.n	800197e <HAL_I2C_Init+0x18e>
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	1e58      	subs	r0, r3, #1
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6859      	ldr	r1, [r3, #4]
 8001960:	460b      	mov	r3, r1
 8001962:	009b      	lsls	r3, r3, #2
 8001964:	440b      	add	r3, r1
 8001966:	0099      	lsls	r1, r3, #2
 8001968:	440b      	add	r3, r1
 800196a:	fbb0 f3f3 	udiv	r3, r0, r3
 800196e:	3301      	adds	r3, #1
 8001970:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001974:	2b00      	cmp	r3, #0
 8001976:	bf0c      	ite	eq
 8001978:	2301      	moveq	r3, #1
 800197a:	2300      	movne	r3, #0
 800197c:	b2db      	uxtb	r3, r3
 800197e:	2b00      	cmp	r3, #0
 8001980:	d001      	beq.n	8001986 <HAL_I2C_Init+0x196>
 8001982:	2301      	movs	r3, #1
 8001984:	e022      	b.n	80019cc <HAL_I2C_Init+0x1dc>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	689b      	ldr	r3, [r3, #8]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d10e      	bne.n	80019ac <HAL_I2C_Init+0x1bc>
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	1e58      	subs	r0, r3, #1
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6859      	ldr	r1, [r3, #4]
 8001996:	460b      	mov	r3, r1
 8001998:	005b      	lsls	r3, r3, #1
 800199a:	440b      	add	r3, r1
 800199c:	fbb0 f3f3 	udiv	r3, r0, r3
 80019a0:	3301      	adds	r3, #1
 80019a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80019aa:	e00f      	b.n	80019cc <HAL_I2C_Init+0x1dc>
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	1e58      	subs	r0, r3, #1
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6859      	ldr	r1, [r3, #4]
 80019b4:	460b      	mov	r3, r1
 80019b6:	009b      	lsls	r3, r3, #2
 80019b8:	440b      	add	r3, r1
 80019ba:	0099      	lsls	r1, r3, #2
 80019bc:	440b      	add	r3, r1
 80019be:	fbb0 f3f3 	udiv	r3, r0, r3
 80019c2:	3301      	adds	r3, #1
 80019c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019c8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80019cc:	6879      	ldr	r1, [r7, #4]
 80019ce:	6809      	ldr	r1, [r1, #0]
 80019d0:	4313      	orrs	r3, r2
 80019d2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	69da      	ldr	r2, [r3, #28]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6a1b      	ldr	r3, [r3, #32]
 80019e6:	431a      	orrs	r2, r3
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	430a      	orrs	r2, r1
 80019ee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	689b      	ldr	r3, [r3, #8]
 80019f6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80019fa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80019fe:	687a      	ldr	r2, [r7, #4]
 8001a00:	6911      	ldr	r1, [r2, #16]
 8001a02:	687a      	ldr	r2, [r7, #4]
 8001a04:	68d2      	ldr	r2, [r2, #12]
 8001a06:	4311      	orrs	r1, r2
 8001a08:	687a      	ldr	r2, [r7, #4]
 8001a0a:	6812      	ldr	r2, [r2, #0]
 8001a0c:	430b      	orrs	r3, r1
 8001a0e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	68db      	ldr	r3, [r3, #12]
 8001a16:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	695a      	ldr	r2, [r3, #20]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	699b      	ldr	r3, [r3, #24]
 8001a22:	431a      	orrs	r2, r3
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	430a      	orrs	r2, r1
 8001a2a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	681a      	ldr	r2, [r3, #0]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f042 0201 	orr.w	r2, r2, #1
 8001a3a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2200      	movs	r2, #0
 8001a40:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2220      	movs	r2, #32
 8001a46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2200      	movs	r2, #0
 8001a54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001a58:	2300      	movs	r3, #0
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3710      	adds	r7, #16
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	000186a0 	.word	0x000186a0
 8001a68:	001e847f 	.word	0x001e847f
 8001a6c:	003d08ff 	.word	0x003d08ff
 8001a70:	431bde83 	.word	0x431bde83
 8001a74:	10624dd3 	.word	0x10624dd3

08001a78 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b088      	sub	sp, #32
 8001a7c:	af02      	add	r7, sp, #8
 8001a7e:	60f8      	str	r0, [r7, #12]
 8001a80:	4608      	mov	r0, r1
 8001a82:	4611      	mov	r1, r2
 8001a84:	461a      	mov	r2, r3
 8001a86:	4603      	mov	r3, r0
 8001a88:	817b      	strh	r3, [r7, #10]
 8001a8a:	460b      	mov	r3, r1
 8001a8c:	813b      	strh	r3, [r7, #8]
 8001a8e:	4613      	mov	r3, r2
 8001a90:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001a92:	f7ff f997 	bl	8000dc4 <HAL_GetTick>
 8001a96:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a9e:	b2db      	uxtb	r3, r3
 8001aa0:	2b20      	cmp	r3, #32
 8001aa2:	f040 80d9 	bne.w	8001c58 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	9300      	str	r3, [sp, #0]
 8001aaa:	2319      	movs	r3, #25
 8001aac:	2201      	movs	r2, #1
 8001aae:	496d      	ldr	r1, [pc, #436]	; (8001c64 <HAL_I2C_Mem_Write+0x1ec>)
 8001ab0:	68f8      	ldr	r0, [r7, #12]
 8001ab2:	f000 fc7f 	bl	80023b4 <I2C_WaitOnFlagUntilTimeout>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d001      	beq.n	8001ac0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001abc:	2302      	movs	r3, #2
 8001abe:	e0cc      	b.n	8001c5a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ac6:	2b01      	cmp	r3, #1
 8001ac8:	d101      	bne.n	8001ace <HAL_I2C_Mem_Write+0x56>
 8001aca:	2302      	movs	r3, #2
 8001acc:	e0c5      	b.n	8001c5a <HAL_I2C_Mem_Write+0x1e2>
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	2201      	movs	r2, #1
 8001ad2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f003 0301 	and.w	r3, r3, #1
 8001ae0:	2b01      	cmp	r3, #1
 8001ae2:	d007      	beq.n	8001af4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f042 0201 	orr.w	r2, r2, #1
 8001af2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	681a      	ldr	r2, [r3, #0]
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b02:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	2221      	movs	r2, #33	; 0x21
 8001b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	2240      	movs	r2, #64	; 0x40
 8001b10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	2200      	movs	r2, #0
 8001b18:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	6a3a      	ldr	r2, [r7, #32]
 8001b1e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001b24:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b2a:	b29a      	uxth	r2, r3
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	4a4d      	ldr	r2, [pc, #308]	; (8001c68 <HAL_I2C_Mem_Write+0x1f0>)
 8001b34:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001b36:	88f8      	ldrh	r0, [r7, #6]
 8001b38:	893a      	ldrh	r2, [r7, #8]
 8001b3a:	8979      	ldrh	r1, [r7, #10]
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	9301      	str	r3, [sp, #4]
 8001b40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b42:	9300      	str	r3, [sp, #0]
 8001b44:	4603      	mov	r3, r0
 8001b46:	68f8      	ldr	r0, [r7, #12]
 8001b48:	f000 fab6 	bl	80020b8 <I2C_RequestMemoryWrite>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d052      	beq.n	8001bf8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
 8001b54:	e081      	b.n	8001c5a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b56:	697a      	ldr	r2, [r7, #20]
 8001b58:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001b5a:	68f8      	ldr	r0, [r7, #12]
 8001b5c:	f000 fd00 	bl	8002560 <I2C_WaitOnTXEFlagUntilTimeout>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d00d      	beq.n	8001b82 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b6a:	2b04      	cmp	r3, #4
 8001b6c:	d107      	bne.n	8001b7e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	681a      	ldr	r2, [r3, #0]
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b7c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e06b      	b.n	8001c5a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b86:	781a      	ldrb	r2, [r3, #0]
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b92:	1c5a      	adds	r2, r3, #1
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b9c:	3b01      	subs	r3, #1
 8001b9e:	b29a      	uxth	r2, r3
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ba8:	b29b      	uxth	r3, r3
 8001baa:	3b01      	subs	r3, #1
 8001bac:	b29a      	uxth	r2, r3
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	695b      	ldr	r3, [r3, #20]
 8001bb8:	f003 0304 	and.w	r3, r3, #4
 8001bbc:	2b04      	cmp	r3, #4
 8001bbe:	d11b      	bne.n	8001bf8 <HAL_I2C_Mem_Write+0x180>
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d017      	beq.n	8001bf8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bcc:	781a      	ldrb	r2, [r3, #0]
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd8:	1c5a      	adds	r2, r3, #1
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001be2:	3b01      	subs	r3, #1
 8001be4:	b29a      	uxth	r2, r3
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bee:	b29b      	uxth	r3, r3
 8001bf0:	3b01      	subs	r3, #1
 8001bf2:	b29a      	uxth	r2, r3
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d1aa      	bne.n	8001b56 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c00:	697a      	ldr	r2, [r7, #20]
 8001c02:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001c04:	68f8      	ldr	r0, [r7, #12]
 8001c06:	f000 fcec 	bl	80025e2 <I2C_WaitOnBTFFlagUntilTimeout>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d00d      	beq.n	8001c2c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c14:	2b04      	cmp	r3, #4
 8001c16:	d107      	bne.n	8001c28 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	681a      	ldr	r2, [r3, #0]
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c26:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	e016      	b.n	8001c5a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	681a      	ldr	r2, [r3, #0]
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c3a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	2220      	movs	r2, #32
 8001c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	2200      	movs	r2, #0
 8001c48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	2200      	movs	r2, #0
 8001c50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001c54:	2300      	movs	r3, #0
 8001c56:	e000      	b.n	8001c5a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001c58:	2302      	movs	r3, #2
  }
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	3718      	adds	r7, #24
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	00100002 	.word	0x00100002
 8001c68:	ffff0000 	.word	0xffff0000

08001c6c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b08c      	sub	sp, #48	; 0x30
 8001c70:	af02      	add	r7, sp, #8
 8001c72:	60f8      	str	r0, [r7, #12]
 8001c74:	4608      	mov	r0, r1
 8001c76:	4611      	mov	r1, r2
 8001c78:	461a      	mov	r2, r3
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	817b      	strh	r3, [r7, #10]
 8001c7e:	460b      	mov	r3, r1
 8001c80:	813b      	strh	r3, [r7, #8]
 8001c82:	4613      	mov	r3, r2
 8001c84:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001c86:	f7ff f89d 	bl	8000dc4 <HAL_GetTick>
 8001c8a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c92:	b2db      	uxtb	r3, r3
 8001c94:	2b20      	cmp	r3, #32
 8001c96:	f040 8208 	bne.w	80020aa <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c9c:	9300      	str	r3, [sp, #0]
 8001c9e:	2319      	movs	r3, #25
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	497b      	ldr	r1, [pc, #492]	; (8001e90 <HAL_I2C_Mem_Read+0x224>)
 8001ca4:	68f8      	ldr	r0, [r7, #12]
 8001ca6:	f000 fb85 	bl	80023b4 <I2C_WaitOnFlagUntilTimeout>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d001      	beq.n	8001cb4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8001cb0:	2302      	movs	r3, #2
 8001cb2:	e1fb      	b.n	80020ac <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001cba:	2b01      	cmp	r3, #1
 8001cbc:	d101      	bne.n	8001cc2 <HAL_I2C_Mem_Read+0x56>
 8001cbe:	2302      	movs	r3, #2
 8001cc0:	e1f4      	b.n	80020ac <HAL_I2C_Mem_Read+0x440>
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f003 0301 	and.w	r3, r3, #1
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	d007      	beq.n	8001ce8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	681a      	ldr	r2, [r3, #0]
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f042 0201 	orr.w	r2, r2, #1
 8001ce6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	681a      	ldr	r2, [r3, #0]
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001cf6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	2222      	movs	r2, #34	; 0x22
 8001cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	2240      	movs	r2, #64	; 0x40
 8001d04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001d12:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001d18:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d1e:	b29a      	uxth	r2, r3
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	4a5b      	ldr	r2, [pc, #364]	; (8001e94 <HAL_I2C_Mem_Read+0x228>)
 8001d28:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001d2a:	88f8      	ldrh	r0, [r7, #6]
 8001d2c:	893a      	ldrh	r2, [r7, #8]
 8001d2e:	8979      	ldrh	r1, [r7, #10]
 8001d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d32:	9301      	str	r3, [sp, #4]
 8001d34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d36:	9300      	str	r3, [sp, #0]
 8001d38:	4603      	mov	r3, r0
 8001d3a:	68f8      	ldr	r0, [r7, #12]
 8001d3c:	f000 fa52 	bl	80021e4 <I2C_RequestMemoryRead>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d001      	beq.n	8001d4a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
 8001d48:	e1b0      	b.n	80020ac <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d113      	bne.n	8001d7a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d52:	2300      	movs	r3, #0
 8001d54:	623b      	str	r3, [r7, #32]
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	695b      	ldr	r3, [r3, #20]
 8001d5c:	623b      	str	r3, [r7, #32]
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	699b      	ldr	r3, [r3, #24]
 8001d64:	623b      	str	r3, [r7, #32]
 8001d66:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d76:	601a      	str	r2, [r3, #0]
 8001d78:	e184      	b.n	8002084 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d7e:	2b01      	cmp	r3, #1
 8001d80:	d11b      	bne.n	8001dba <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	681a      	ldr	r2, [r3, #0]
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d90:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d92:	2300      	movs	r3, #0
 8001d94:	61fb      	str	r3, [r7, #28]
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	695b      	ldr	r3, [r3, #20]
 8001d9c:	61fb      	str	r3, [r7, #28]
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	699b      	ldr	r3, [r3, #24]
 8001da4:	61fb      	str	r3, [r7, #28]
 8001da6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001db6:	601a      	str	r2, [r3, #0]
 8001db8:	e164      	b.n	8002084 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dbe:	2b02      	cmp	r3, #2
 8001dc0:	d11b      	bne.n	8001dfa <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	681a      	ldr	r2, [r3, #0]
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001dd0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	681a      	ldr	r2, [r3, #0]
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001de0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001de2:	2300      	movs	r3, #0
 8001de4:	61bb      	str	r3, [r7, #24]
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	695b      	ldr	r3, [r3, #20]
 8001dec:	61bb      	str	r3, [r7, #24]
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	699b      	ldr	r3, [r3, #24]
 8001df4:	61bb      	str	r3, [r7, #24]
 8001df6:	69bb      	ldr	r3, [r7, #24]
 8001df8:	e144      	b.n	8002084 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	617b      	str	r3, [r7, #20]
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	695b      	ldr	r3, [r3, #20]
 8001e04:	617b      	str	r3, [r7, #20]
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	699b      	ldr	r3, [r3, #24]
 8001e0c:	617b      	str	r3, [r7, #20]
 8001e0e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001e10:	e138      	b.n	8002084 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e16:	2b03      	cmp	r3, #3
 8001e18:	f200 80f1 	bhi.w	8001ffe <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e20:	2b01      	cmp	r3, #1
 8001e22:	d123      	bne.n	8001e6c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e26:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001e28:	68f8      	ldr	r0, [r7, #12]
 8001e2a:	f000 fc1b 	bl	8002664 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d001      	beq.n	8001e38 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8001e34:	2301      	movs	r3, #1
 8001e36:	e139      	b.n	80020ac <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	691a      	ldr	r2, [r3, #16]
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e42:	b2d2      	uxtb	r2, r2
 8001e44:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e4a:	1c5a      	adds	r2, r3, #1
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e54:	3b01      	subs	r3, #1
 8001e56:	b29a      	uxth	r2, r3
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e60:	b29b      	uxth	r3, r3
 8001e62:	3b01      	subs	r3, #1
 8001e64:	b29a      	uxth	r2, r3
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001e6a:	e10b      	b.n	8002084 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e70:	2b02      	cmp	r3, #2
 8001e72:	d14e      	bne.n	8001f12 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e76:	9300      	str	r3, [sp, #0]
 8001e78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	4906      	ldr	r1, [pc, #24]	; (8001e98 <HAL_I2C_Mem_Read+0x22c>)
 8001e7e:	68f8      	ldr	r0, [r7, #12]
 8001e80:	f000 fa98 	bl	80023b4 <I2C_WaitOnFlagUntilTimeout>
 8001e84:	4603      	mov	r3, r0
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d008      	beq.n	8001e9c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	e10e      	b.n	80020ac <HAL_I2C_Mem_Read+0x440>
 8001e8e:	bf00      	nop
 8001e90:	00100002 	.word	0x00100002
 8001e94:	ffff0000 	.word	0xffff0000
 8001e98:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001eaa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	691a      	ldr	r2, [r3, #16]
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb6:	b2d2      	uxtb	r2, r2
 8001eb8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ebe:	1c5a      	adds	r2, r3, #1
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ec8:	3b01      	subs	r3, #1
 8001eca:	b29a      	uxth	r2, r3
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ed4:	b29b      	uxth	r3, r3
 8001ed6:	3b01      	subs	r3, #1
 8001ed8:	b29a      	uxth	r2, r3
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	691a      	ldr	r2, [r3, #16]
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee8:	b2d2      	uxtb	r2, r2
 8001eea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef0:	1c5a      	adds	r2, r3, #1
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001efa:	3b01      	subs	r3, #1
 8001efc:	b29a      	uxth	r2, r3
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f06:	b29b      	uxth	r3, r3
 8001f08:	3b01      	subs	r3, #1
 8001f0a:	b29a      	uxth	r2, r3
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001f10:	e0b8      	b.n	8002084 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f14:	9300      	str	r3, [sp, #0]
 8001f16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f18:	2200      	movs	r2, #0
 8001f1a:	4966      	ldr	r1, [pc, #408]	; (80020b4 <HAL_I2C_Mem_Read+0x448>)
 8001f1c:	68f8      	ldr	r0, [r7, #12]
 8001f1e:	f000 fa49 	bl	80023b4 <I2C_WaitOnFlagUntilTimeout>
 8001f22:	4603      	mov	r3, r0
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d001      	beq.n	8001f2c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	e0bf      	b.n	80020ac <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	681a      	ldr	r2, [r3, #0]
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f3a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	691a      	ldr	r2, [r3, #16]
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f46:	b2d2      	uxtb	r2, r2
 8001f48:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f4e:	1c5a      	adds	r2, r3, #1
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f58:	3b01      	subs	r3, #1
 8001f5a:	b29a      	uxth	r2, r3
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f64:	b29b      	uxth	r3, r3
 8001f66:	3b01      	subs	r3, #1
 8001f68:	b29a      	uxth	r2, r3
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f70:	9300      	str	r3, [sp, #0]
 8001f72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f74:	2200      	movs	r2, #0
 8001f76:	494f      	ldr	r1, [pc, #316]	; (80020b4 <HAL_I2C_Mem_Read+0x448>)
 8001f78:	68f8      	ldr	r0, [r7, #12]
 8001f7a:	f000 fa1b 	bl	80023b4 <I2C_WaitOnFlagUntilTimeout>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d001      	beq.n	8001f88 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8001f84:	2301      	movs	r3, #1
 8001f86:	e091      	b.n	80020ac <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f96:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	691a      	ldr	r2, [r3, #16]
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fa2:	b2d2      	uxtb	r2, r2
 8001fa4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001faa:	1c5a      	adds	r2, r3, #1
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fb4:	3b01      	subs	r3, #1
 8001fb6:	b29a      	uxth	r2, r3
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fc0:	b29b      	uxth	r3, r3
 8001fc2:	3b01      	subs	r3, #1
 8001fc4:	b29a      	uxth	r2, r3
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	691a      	ldr	r2, [r3, #16]
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd4:	b2d2      	uxtb	r2, r2
 8001fd6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fdc:	1c5a      	adds	r2, r3, #1
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fe6:	3b01      	subs	r3, #1
 8001fe8:	b29a      	uxth	r2, r3
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ff2:	b29b      	uxth	r3, r3
 8001ff4:	3b01      	subs	r3, #1
 8001ff6:	b29a      	uxth	r2, r3
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001ffc:	e042      	b.n	8002084 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ffe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002000:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002002:	68f8      	ldr	r0, [r7, #12]
 8002004:	f000 fb2e 	bl	8002664 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002008:	4603      	mov	r3, r0
 800200a:	2b00      	cmp	r3, #0
 800200c:	d001      	beq.n	8002012 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	e04c      	b.n	80020ac <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	691a      	ldr	r2, [r3, #16]
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800201c:	b2d2      	uxtb	r2, r2
 800201e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002024:	1c5a      	adds	r2, r3, #1
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800202e:	3b01      	subs	r3, #1
 8002030:	b29a      	uxth	r2, r3
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800203a:	b29b      	uxth	r3, r3
 800203c:	3b01      	subs	r3, #1
 800203e:	b29a      	uxth	r2, r3
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	695b      	ldr	r3, [r3, #20]
 800204a:	f003 0304 	and.w	r3, r3, #4
 800204e:	2b04      	cmp	r3, #4
 8002050:	d118      	bne.n	8002084 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	691a      	ldr	r2, [r3, #16]
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800205c:	b2d2      	uxtb	r2, r2
 800205e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002064:	1c5a      	adds	r2, r3, #1
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800206e:	3b01      	subs	r3, #1
 8002070:	b29a      	uxth	r2, r3
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800207a:	b29b      	uxth	r3, r3
 800207c:	3b01      	subs	r3, #1
 800207e:	b29a      	uxth	r2, r3
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002088:	2b00      	cmp	r3, #0
 800208a:	f47f aec2 	bne.w	8001e12 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	2220      	movs	r2, #32
 8002092:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	2200      	movs	r2, #0
 800209a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	2200      	movs	r2, #0
 80020a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80020a6:	2300      	movs	r3, #0
 80020a8:	e000      	b.n	80020ac <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80020aa:	2302      	movs	r3, #2
  }
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	3728      	adds	r7, #40	; 0x28
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	00010004 	.word	0x00010004

080020b8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b088      	sub	sp, #32
 80020bc:	af02      	add	r7, sp, #8
 80020be:	60f8      	str	r0, [r7, #12]
 80020c0:	4608      	mov	r0, r1
 80020c2:	4611      	mov	r1, r2
 80020c4:	461a      	mov	r2, r3
 80020c6:	4603      	mov	r3, r0
 80020c8:	817b      	strh	r3, [r7, #10]
 80020ca:	460b      	mov	r3, r1
 80020cc:	813b      	strh	r3, [r7, #8]
 80020ce:	4613      	mov	r3, r2
 80020d0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80020e0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80020e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e4:	9300      	str	r3, [sp, #0]
 80020e6:	6a3b      	ldr	r3, [r7, #32]
 80020e8:	2200      	movs	r2, #0
 80020ea:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80020ee:	68f8      	ldr	r0, [r7, #12]
 80020f0:	f000 f960 	bl	80023b4 <I2C_WaitOnFlagUntilTimeout>
 80020f4:	4603      	mov	r3, r0
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d00d      	beq.n	8002116 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002104:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002108:	d103      	bne.n	8002112 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002110:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002112:	2303      	movs	r3, #3
 8002114:	e05f      	b.n	80021d6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002116:	897b      	ldrh	r3, [r7, #10]
 8002118:	b2db      	uxtb	r3, r3
 800211a:	461a      	mov	r2, r3
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002124:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002128:	6a3a      	ldr	r2, [r7, #32]
 800212a:	492d      	ldr	r1, [pc, #180]	; (80021e0 <I2C_RequestMemoryWrite+0x128>)
 800212c:	68f8      	ldr	r0, [r7, #12]
 800212e:	f000 f998 	bl	8002462 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002132:	4603      	mov	r3, r0
 8002134:	2b00      	cmp	r3, #0
 8002136:	d001      	beq.n	800213c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002138:	2301      	movs	r3, #1
 800213a:	e04c      	b.n	80021d6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800213c:	2300      	movs	r3, #0
 800213e:	617b      	str	r3, [r7, #20]
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	695b      	ldr	r3, [r3, #20]
 8002146:	617b      	str	r3, [r7, #20]
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	699b      	ldr	r3, [r3, #24]
 800214e:	617b      	str	r3, [r7, #20]
 8002150:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002152:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002154:	6a39      	ldr	r1, [r7, #32]
 8002156:	68f8      	ldr	r0, [r7, #12]
 8002158:	f000 fa02 	bl	8002560 <I2C_WaitOnTXEFlagUntilTimeout>
 800215c:	4603      	mov	r3, r0
 800215e:	2b00      	cmp	r3, #0
 8002160:	d00d      	beq.n	800217e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002166:	2b04      	cmp	r3, #4
 8002168:	d107      	bne.n	800217a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	681a      	ldr	r2, [r3, #0]
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002178:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	e02b      	b.n	80021d6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800217e:	88fb      	ldrh	r3, [r7, #6]
 8002180:	2b01      	cmp	r3, #1
 8002182:	d105      	bne.n	8002190 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002184:	893b      	ldrh	r3, [r7, #8]
 8002186:	b2da      	uxtb	r2, r3
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	611a      	str	r2, [r3, #16]
 800218e:	e021      	b.n	80021d4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002190:	893b      	ldrh	r3, [r7, #8]
 8002192:	0a1b      	lsrs	r3, r3, #8
 8002194:	b29b      	uxth	r3, r3
 8002196:	b2da      	uxtb	r2, r3
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800219e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021a0:	6a39      	ldr	r1, [r7, #32]
 80021a2:	68f8      	ldr	r0, [r7, #12]
 80021a4:	f000 f9dc 	bl	8002560 <I2C_WaitOnTXEFlagUntilTimeout>
 80021a8:	4603      	mov	r3, r0
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d00d      	beq.n	80021ca <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b2:	2b04      	cmp	r3, #4
 80021b4:	d107      	bne.n	80021c6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	681a      	ldr	r2, [r3, #0]
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021c4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	e005      	b.n	80021d6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80021ca:	893b      	ldrh	r3, [r7, #8]
 80021cc:	b2da      	uxtb	r2, r3
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80021d4:	2300      	movs	r3, #0
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	3718      	adds	r7, #24
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	00010002 	.word	0x00010002

080021e4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b088      	sub	sp, #32
 80021e8:	af02      	add	r7, sp, #8
 80021ea:	60f8      	str	r0, [r7, #12]
 80021ec:	4608      	mov	r0, r1
 80021ee:	4611      	mov	r1, r2
 80021f0:	461a      	mov	r2, r3
 80021f2:	4603      	mov	r3, r0
 80021f4:	817b      	strh	r3, [r7, #10]
 80021f6:	460b      	mov	r3, r1
 80021f8:	813b      	strh	r3, [r7, #8]
 80021fa:	4613      	mov	r3, r2
 80021fc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	681a      	ldr	r2, [r3, #0]
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800220c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	681a      	ldr	r2, [r3, #0]
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800221c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800221e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002220:	9300      	str	r3, [sp, #0]
 8002222:	6a3b      	ldr	r3, [r7, #32]
 8002224:	2200      	movs	r2, #0
 8002226:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800222a:	68f8      	ldr	r0, [r7, #12]
 800222c:	f000 f8c2 	bl	80023b4 <I2C_WaitOnFlagUntilTimeout>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	d00d      	beq.n	8002252 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002240:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002244:	d103      	bne.n	800224e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	f44f 7200 	mov.w	r2, #512	; 0x200
 800224c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800224e:	2303      	movs	r3, #3
 8002250:	e0aa      	b.n	80023a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002252:	897b      	ldrh	r3, [r7, #10]
 8002254:	b2db      	uxtb	r3, r3
 8002256:	461a      	mov	r2, r3
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002260:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002264:	6a3a      	ldr	r2, [r7, #32]
 8002266:	4952      	ldr	r1, [pc, #328]	; (80023b0 <I2C_RequestMemoryRead+0x1cc>)
 8002268:	68f8      	ldr	r0, [r7, #12]
 800226a:	f000 f8fa 	bl	8002462 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800226e:	4603      	mov	r3, r0
 8002270:	2b00      	cmp	r3, #0
 8002272:	d001      	beq.n	8002278 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002274:	2301      	movs	r3, #1
 8002276:	e097      	b.n	80023a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002278:	2300      	movs	r3, #0
 800227a:	617b      	str	r3, [r7, #20]
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	695b      	ldr	r3, [r3, #20]
 8002282:	617b      	str	r3, [r7, #20]
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	699b      	ldr	r3, [r3, #24]
 800228a:	617b      	str	r3, [r7, #20]
 800228c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800228e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002290:	6a39      	ldr	r1, [r7, #32]
 8002292:	68f8      	ldr	r0, [r7, #12]
 8002294:	f000 f964 	bl	8002560 <I2C_WaitOnTXEFlagUntilTimeout>
 8002298:	4603      	mov	r3, r0
 800229a:	2b00      	cmp	r3, #0
 800229c:	d00d      	beq.n	80022ba <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a2:	2b04      	cmp	r3, #4
 80022a4:	d107      	bne.n	80022b6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	681a      	ldr	r2, [r3, #0]
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022b4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	e076      	b.n	80023a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80022ba:	88fb      	ldrh	r3, [r7, #6]
 80022bc:	2b01      	cmp	r3, #1
 80022be:	d105      	bne.n	80022cc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80022c0:	893b      	ldrh	r3, [r7, #8]
 80022c2:	b2da      	uxtb	r2, r3
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	611a      	str	r2, [r3, #16]
 80022ca:	e021      	b.n	8002310 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80022cc:	893b      	ldrh	r3, [r7, #8]
 80022ce:	0a1b      	lsrs	r3, r3, #8
 80022d0:	b29b      	uxth	r3, r3
 80022d2:	b2da      	uxtb	r2, r3
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80022da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022dc:	6a39      	ldr	r1, [r7, #32]
 80022de:	68f8      	ldr	r0, [r7, #12]
 80022e0:	f000 f93e 	bl	8002560 <I2C_WaitOnTXEFlagUntilTimeout>
 80022e4:	4603      	mov	r3, r0
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d00d      	beq.n	8002306 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ee:	2b04      	cmp	r3, #4
 80022f0:	d107      	bne.n	8002302 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	681a      	ldr	r2, [r3, #0]
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002300:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	e050      	b.n	80023a8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002306:	893b      	ldrh	r3, [r7, #8]
 8002308:	b2da      	uxtb	r2, r3
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002310:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002312:	6a39      	ldr	r1, [r7, #32]
 8002314:	68f8      	ldr	r0, [r7, #12]
 8002316:	f000 f923 	bl	8002560 <I2C_WaitOnTXEFlagUntilTimeout>
 800231a:	4603      	mov	r3, r0
 800231c:	2b00      	cmp	r3, #0
 800231e:	d00d      	beq.n	800233c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002324:	2b04      	cmp	r3, #4
 8002326:	d107      	bne.n	8002338 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	681a      	ldr	r2, [r3, #0]
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002336:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002338:	2301      	movs	r3, #1
 800233a:	e035      	b.n	80023a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	681a      	ldr	r2, [r3, #0]
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800234a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800234c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800234e:	9300      	str	r3, [sp, #0]
 8002350:	6a3b      	ldr	r3, [r7, #32]
 8002352:	2200      	movs	r2, #0
 8002354:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002358:	68f8      	ldr	r0, [r7, #12]
 800235a:	f000 f82b 	bl	80023b4 <I2C_WaitOnFlagUntilTimeout>
 800235e:	4603      	mov	r3, r0
 8002360:	2b00      	cmp	r3, #0
 8002362:	d00d      	beq.n	8002380 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800236e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002372:	d103      	bne.n	800237c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	f44f 7200 	mov.w	r2, #512	; 0x200
 800237a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800237c:	2303      	movs	r3, #3
 800237e:	e013      	b.n	80023a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002380:	897b      	ldrh	r3, [r7, #10]
 8002382:	b2db      	uxtb	r3, r3
 8002384:	f043 0301 	orr.w	r3, r3, #1
 8002388:	b2da      	uxtb	r2, r3
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002392:	6a3a      	ldr	r2, [r7, #32]
 8002394:	4906      	ldr	r1, [pc, #24]	; (80023b0 <I2C_RequestMemoryRead+0x1cc>)
 8002396:	68f8      	ldr	r0, [r7, #12]
 8002398:	f000 f863 	bl	8002462 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800239c:	4603      	mov	r3, r0
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d001      	beq.n	80023a6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e000      	b.n	80023a8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80023a6:	2300      	movs	r3, #0
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	3718      	adds	r7, #24
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}
 80023b0:	00010002 	.word	0x00010002

080023b4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b084      	sub	sp, #16
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	60f8      	str	r0, [r7, #12]
 80023bc:	60b9      	str	r1, [r7, #8]
 80023be:	603b      	str	r3, [r7, #0]
 80023c0:	4613      	mov	r3, r2
 80023c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80023c4:	e025      	b.n	8002412 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023cc:	d021      	beq.n	8002412 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023ce:	f7fe fcf9 	bl	8000dc4 <HAL_GetTick>
 80023d2:	4602      	mov	r2, r0
 80023d4:	69bb      	ldr	r3, [r7, #24]
 80023d6:	1ad3      	subs	r3, r2, r3
 80023d8:	683a      	ldr	r2, [r7, #0]
 80023da:	429a      	cmp	r2, r3
 80023dc:	d302      	bcc.n	80023e4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d116      	bne.n	8002412 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	2200      	movs	r2, #0
 80023e8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	2220      	movs	r2, #32
 80023ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	2200      	movs	r2, #0
 80023f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fe:	f043 0220 	orr.w	r2, r3, #32
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	2200      	movs	r2, #0
 800240a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	e023      	b.n	800245a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002412:	68bb      	ldr	r3, [r7, #8]
 8002414:	0c1b      	lsrs	r3, r3, #16
 8002416:	b2db      	uxtb	r3, r3
 8002418:	2b01      	cmp	r3, #1
 800241a:	d10d      	bne.n	8002438 <I2C_WaitOnFlagUntilTimeout+0x84>
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	695b      	ldr	r3, [r3, #20]
 8002422:	43da      	mvns	r2, r3
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	4013      	ands	r3, r2
 8002428:	b29b      	uxth	r3, r3
 800242a:	2b00      	cmp	r3, #0
 800242c:	bf0c      	ite	eq
 800242e:	2301      	moveq	r3, #1
 8002430:	2300      	movne	r3, #0
 8002432:	b2db      	uxtb	r3, r3
 8002434:	461a      	mov	r2, r3
 8002436:	e00c      	b.n	8002452 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	699b      	ldr	r3, [r3, #24]
 800243e:	43da      	mvns	r2, r3
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	4013      	ands	r3, r2
 8002444:	b29b      	uxth	r3, r3
 8002446:	2b00      	cmp	r3, #0
 8002448:	bf0c      	ite	eq
 800244a:	2301      	moveq	r3, #1
 800244c:	2300      	movne	r3, #0
 800244e:	b2db      	uxtb	r3, r3
 8002450:	461a      	mov	r2, r3
 8002452:	79fb      	ldrb	r3, [r7, #7]
 8002454:	429a      	cmp	r2, r3
 8002456:	d0b6      	beq.n	80023c6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002458:	2300      	movs	r3, #0
}
 800245a:	4618      	mov	r0, r3
 800245c:	3710      	adds	r7, #16
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}

08002462 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002462:	b580      	push	{r7, lr}
 8002464:	b084      	sub	sp, #16
 8002466:	af00      	add	r7, sp, #0
 8002468:	60f8      	str	r0, [r7, #12]
 800246a:	60b9      	str	r1, [r7, #8]
 800246c:	607a      	str	r2, [r7, #4]
 800246e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002470:	e051      	b.n	8002516 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	695b      	ldr	r3, [r3, #20]
 8002478:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800247c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002480:	d123      	bne.n	80024ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	681a      	ldr	r2, [r3, #0]
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002490:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800249a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	2200      	movs	r2, #0
 80024a0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	2220      	movs	r2, #32
 80024a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	2200      	movs	r2, #0
 80024ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b6:	f043 0204 	orr.w	r2, r3, #4
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	2200      	movs	r2, #0
 80024c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	e046      	b.n	8002558 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024d0:	d021      	beq.n	8002516 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024d2:	f7fe fc77 	bl	8000dc4 <HAL_GetTick>
 80024d6:	4602      	mov	r2, r0
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	1ad3      	subs	r3, r2, r3
 80024dc:	687a      	ldr	r2, [r7, #4]
 80024de:	429a      	cmp	r2, r3
 80024e0:	d302      	bcc.n	80024e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d116      	bne.n	8002516 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	2200      	movs	r2, #0
 80024ec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	2220      	movs	r2, #32
 80024f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	2200      	movs	r2, #0
 80024fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002502:	f043 0220 	orr.w	r2, r3, #32
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	2200      	movs	r2, #0
 800250e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	e020      	b.n	8002558 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	0c1b      	lsrs	r3, r3, #16
 800251a:	b2db      	uxtb	r3, r3
 800251c:	2b01      	cmp	r3, #1
 800251e:	d10c      	bne.n	800253a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	695b      	ldr	r3, [r3, #20]
 8002526:	43da      	mvns	r2, r3
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	4013      	ands	r3, r2
 800252c:	b29b      	uxth	r3, r3
 800252e:	2b00      	cmp	r3, #0
 8002530:	bf14      	ite	ne
 8002532:	2301      	movne	r3, #1
 8002534:	2300      	moveq	r3, #0
 8002536:	b2db      	uxtb	r3, r3
 8002538:	e00b      	b.n	8002552 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	699b      	ldr	r3, [r3, #24]
 8002540:	43da      	mvns	r2, r3
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	4013      	ands	r3, r2
 8002546:	b29b      	uxth	r3, r3
 8002548:	2b00      	cmp	r3, #0
 800254a:	bf14      	ite	ne
 800254c:	2301      	movne	r3, #1
 800254e:	2300      	moveq	r3, #0
 8002550:	b2db      	uxtb	r3, r3
 8002552:	2b00      	cmp	r3, #0
 8002554:	d18d      	bne.n	8002472 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002556:	2300      	movs	r3, #0
}
 8002558:	4618      	mov	r0, r3
 800255a:	3710      	adds	r7, #16
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}

08002560 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b084      	sub	sp, #16
 8002564:	af00      	add	r7, sp, #0
 8002566:	60f8      	str	r0, [r7, #12]
 8002568:	60b9      	str	r1, [r7, #8]
 800256a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800256c:	e02d      	b.n	80025ca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800256e:	68f8      	ldr	r0, [r7, #12]
 8002570:	f000 f8ce 	bl	8002710 <I2C_IsAcknowledgeFailed>
 8002574:	4603      	mov	r3, r0
 8002576:	2b00      	cmp	r3, #0
 8002578:	d001      	beq.n	800257e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	e02d      	b.n	80025da <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800257e:	68bb      	ldr	r3, [r7, #8]
 8002580:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002584:	d021      	beq.n	80025ca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002586:	f7fe fc1d 	bl	8000dc4 <HAL_GetTick>
 800258a:	4602      	mov	r2, r0
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	1ad3      	subs	r3, r2, r3
 8002590:	68ba      	ldr	r2, [r7, #8]
 8002592:	429a      	cmp	r2, r3
 8002594:	d302      	bcc.n	800259c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d116      	bne.n	80025ca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	2200      	movs	r2, #0
 80025a0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	2220      	movs	r2, #32
 80025a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	2200      	movs	r2, #0
 80025ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b6:	f043 0220 	orr.w	r2, r3, #32
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	2200      	movs	r2, #0
 80025c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	e007      	b.n	80025da <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	695b      	ldr	r3, [r3, #20]
 80025d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025d4:	2b80      	cmp	r3, #128	; 0x80
 80025d6:	d1ca      	bne.n	800256e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80025d8:	2300      	movs	r3, #0
}
 80025da:	4618      	mov	r0, r3
 80025dc:	3710      	adds	r7, #16
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}

080025e2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80025e2:	b580      	push	{r7, lr}
 80025e4:	b084      	sub	sp, #16
 80025e6:	af00      	add	r7, sp, #0
 80025e8:	60f8      	str	r0, [r7, #12]
 80025ea:	60b9      	str	r1, [r7, #8]
 80025ec:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80025ee:	e02d      	b.n	800264c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80025f0:	68f8      	ldr	r0, [r7, #12]
 80025f2:	f000 f88d 	bl	8002710 <I2C_IsAcknowledgeFailed>
 80025f6:	4603      	mov	r3, r0
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d001      	beq.n	8002600 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80025fc:	2301      	movs	r3, #1
 80025fe:	e02d      	b.n	800265c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002606:	d021      	beq.n	800264c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002608:	f7fe fbdc 	bl	8000dc4 <HAL_GetTick>
 800260c:	4602      	mov	r2, r0
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	1ad3      	subs	r3, r2, r3
 8002612:	68ba      	ldr	r2, [r7, #8]
 8002614:	429a      	cmp	r2, r3
 8002616:	d302      	bcc.n	800261e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d116      	bne.n	800264c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	2200      	movs	r2, #0
 8002622:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	2220      	movs	r2, #32
 8002628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	2200      	movs	r2, #0
 8002630:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002638:	f043 0220 	orr.w	r2, r3, #32
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	2200      	movs	r2, #0
 8002644:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002648:	2301      	movs	r3, #1
 800264a:	e007      	b.n	800265c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	695b      	ldr	r3, [r3, #20]
 8002652:	f003 0304 	and.w	r3, r3, #4
 8002656:	2b04      	cmp	r3, #4
 8002658:	d1ca      	bne.n	80025f0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800265a:	2300      	movs	r3, #0
}
 800265c:	4618      	mov	r0, r3
 800265e:	3710      	adds	r7, #16
 8002660:	46bd      	mov	sp, r7
 8002662:	bd80      	pop	{r7, pc}

08002664 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b084      	sub	sp, #16
 8002668:	af00      	add	r7, sp, #0
 800266a:	60f8      	str	r0, [r7, #12]
 800266c:	60b9      	str	r1, [r7, #8]
 800266e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002670:	e042      	b.n	80026f8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	695b      	ldr	r3, [r3, #20]
 8002678:	f003 0310 	and.w	r3, r3, #16
 800267c:	2b10      	cmp	r3, #16
 800267e:	d119      	bne.n	80026b4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f06f 0210 	mvn.w	r2, #16
 8002688:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	2200      	movs	r2, #0
 800268e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	2220      	movs	r2, #32
 8002694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	2200      	movs	r2, #0
 800269c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	2200      	movs	r2, #0
 80026ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80026b0:	2301      	movs	r3, #1
 80026b2:	e029      	b.n	8002708 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026b4:	f7fe fb86 	bl	8000dc4 <HAL_GetTick>
 80026b8:	4602      	mov	r2, r0
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	1ad3      	subs	r3, r2, r3
 80026be:	68ba      	ldr	r2, [r7, #8]
 80026c0:	429a      	cmp	r2, r3
 80026c2:	d302      	bcc.n	80026ca <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d116      	bne.n	80026f8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	2200      	movs	r2, #0
 80026ce:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	2220      	movs	r2, #32
 80026d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	2200      	movs	r2, #0
 80026dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e4:	f043 0220 	orr.w	r2, r3, #32
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	2200      	movs	r2, #0
 80026f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80026f4:	2301      	movs	r3, #1
 80026f6:	e007      	b.n	8002708 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	695b      	ldr	r3, [r3, #20]
 80026fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002702:	2b40      	cmp	r3, #64	; 0x40
 8002704:	d1b5      	bne.n	8002672 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002706:	2300      	movs	r3, #0
}
 8002708:	4618      	mov	r0, r3
 800270a:	3710      	adds	r7, #16
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}

08002710 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002710:	b480      	push	{r7}
 8002712:	b083      	sub	sp, #12
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	695b      	ldr	r3, [r3, #20]
 800271e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002722:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002726:	d11b      	bne.n	8002760 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002730:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2200      	movs	r2, #0
 8002736:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2220      	movs	r2, #32
 800273c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2200      	movs	r2, #0
 8002744:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800274c:	f043 0204 	orr.w	r2, r3, #4
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2200      	movs	r2, #0
 8002758:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800275c:	2301      	movs	r3, #1
 800275e:	e000      	b.n	8002762 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002760:	2300      	movs	r3, #0
}
 8002762:	4618      	mov	r0, r3
 8002764:	370c      	adds	r7, #12
 8002766:	46bd      	mov	sp, r7
 8002768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276c:	4770      	bx	lr
	...

08002770 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b086      	sub	sp, #24
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d101      	bne.n	8002782 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	e267      	b.n	8002c52 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f003 0301 	and.w	r3, r3, #1
 800278a:	2b00      	cmp	r3, #0
 800278c:	d075      	beq.n	800287a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800278e:	4b88      	ldr	r3, [pc, #544]	; (80029b0 <HAL_RCC_OscConfig+0x240>)
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	f003 030c 	and.w	r3, r3, #12
 8002796:	2b04      	cmp	r3, #4
 8002798:	d00c      	beq.n	80027b4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800279a:	4b85      	ldr	r3, [pc, #532]	; (80029b0 <HAL_RCC_OscConfig+0x240>)
 800279c:	689b      	ldr	r3, [r3, #8]
 800279e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80027a2:	2b08      	cmp	r3, #8
 80027a4:	d112      	bne.n	80027cc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027a6:	4b82      	ldr	r3, [pc, #520]	; (80029b0 <HAL_RCC_OscConfig+0x240>)
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80027b2:	d10b      	bne.n	80027cc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027b4:	4b7e      	ldr	r3, [pc, #504]	; (80029b0 <HAL_RCC_OscConfig+0x240>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d05b      	beq.n	8002878 <HAL_RCC_OscConfig+0x108>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d157      	bne.n	8002878 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80027c8:	2301      	movs	r3, #1
 80027ca:	e242      	b.n	8002c52 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027d4:	d106      	bne.n	80027e4 <HAL_RCC_OscConfig+0x74>
 80027d6:	4b76      	ldr	r3, [pc, #472]	; (80029b0 <HAL_RCC_OscConfig+0x240>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a75      	ldr	r2, [pc, #468]	; (80029b0 <HAL_RCC_OscConfig+0x240>)
 80027dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027e0:	6013      	str	r3, [r2, #0]
 80027e2:	e01d      	b.n	8002820 <HAL_RCC_OscConfig+0xb0>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80027ec:	d10c      	bne.n	8002808 <HAL_RCC_OscConfig+0x98>
 80027ee:	4b70      	ldr	r3, [pc, #448]	; (80029b0 <HAL_RCC_OscConfig+0x240>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a6f      	ldr	r2, [pc, #444]	; (80029b0 <HAL_RCC_OscConfig+0x240>)
 80027f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027f8:	6013      	str	r3, [r2, #0]
 80027fa:	4b6d      	ldr	r3, [pc, #436]	; (80029b0 <HAL_RCC_OscConfig+0x240>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a6c      	ldr	r2, [pc, #432]	; (80029b0 <HAL_RCC_OscConfig+0x240>)
 8002800:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002804:	6013      	str	r3, [r2, #0]
 8002806:	e00b      	b.n	8002820 <HAL_RCC_OscConfig+0xb0>
 8002808:	4b69      	ldr	r3, [pc, #420]	; (80029b0 <HAL_RCC_OscConfig+0x240>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a68      	ldr	r2, [pc, #416]	; (80029b0 <HAL_RCC_OscConfig+0x240>)
 800280e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002812:	6013      	str	r3, [r2, #0]
 8002814:	4b66      	ldr	r3, [pc, #408]	; (80029b0 <HAL_RCC_OscConfig+0x240>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a65      	ldr	r2, [pc, #404]	; (80029b0 <HAL_RCC_OscConfig+0x240>)
 800281a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800281e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d013      	beq.n	8002850 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002828:	f7fe facc 	bl	8000dc4 <HAL_GetTick>
 800282c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800282e:	e008      	b.n	8002842 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002830:	f7fe fac8 	bl	8000dc4 <HAL_GetTick>
 8002834:	4602      	mov	r2, r0
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	1ad3      	subs	r3, r2, r3
 800283a:	2b64      	cmp	r3, #100	; 0x64
 800283c:	d901      	bls.n	8002842 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800283e:	2303      	movs	r3, #3
 8002840:	e207      	b.n	8002c52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002842:	4b5b      	ldr	r3, [pc, #364]	; (80029b0 <HAL_RCC_OscConfig+0x240>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800284a:	2b00      	cmp	r3, #0
 800284c:	d0f0      	beq.n	8002830 <HAL_RCC_OscConfig+0xc0>
 800284e:	e014      	b.n	800287a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002850:	f7fe fab8 	bl	8000dc4 <HAL_GetTick>
 8002854:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002856:	e008      	b.n	800286a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002858:	f7fe fab4 	bl	8000dc4 <HAL_GetTick>
 800285c:	4602      	mov	r2, r0
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	1ad3      	subs	r3, r2, r3
 8002862:	2b64      	cmp	r3, #100	; 0x64
 8002864:	d901      	bls.n	800286a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002866:	2303      	movs	r3, #3
 8002868:	e1f3      	b.n	8002c52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800286a:	4b51      	ldr	r3, [pc, #324]	; (80029b0 <HAL_RCC_OscConfig+0x240>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002872:	2b00      	cmp	r3, #0
 8002874:	d1f0      	bne.n	8002858 <HAL_RCC_OscConfig+0xe8>
 8002876:	e000      	b.n	800287a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002878:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 0302 	and.w	r3, r3, #2
 8002882:	2b00      	cmp	r3, #0
 8002884:	d063      	beq.n	800294e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002886:	4b4a      	ldr	r3, [pc, #296]	; (80029b0 <HAL_RCC_OscConfig+0x240>)
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	f003 030c 	and.w	r3, r3, #12
 800288e:	2b00      	cmp	r3, #0
 8002890:	d00b      	beq.n	80028aa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002892:	4b47      	ldr	r3, [pc, #284]	; (80029b0 <HAL_RCC_OscConfig+0x240>)
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800289a:	2b08      	cmp	r3, #8
 800289c:	d11c      	bne.n	80028d8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800289e:	4b44      	ldr	r3, [pc, #272]	; (80029b0 <HAL_RCC_OscConfig+0x240>)
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d116      	bne.n	80028d8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028aa:	4b41      	ldr	r3, [pc, #260]	; (80029b0 <HAL_RCC_OscConfig+0x240>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 0302 	and.w	r3, r3, #2
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d005      	beq.n	80028c2 <HAL_RCC_OscConfig+0x152>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	68db      	ldr	r3, [r3, #12]
 80028ba:	2b01      	cmp	r3, #1
 80028bc:	d001      	beq.n	80028c2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	e1c7      	b.n	8002c52 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028c2:	4b3b      	ldr	r3, [pc, #236]	; (80029b0 <HAL_RCC_OscConfig+0x240>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	691b      	ldr	r3, [r3, #16]
 80028ce:	00db      	lsls	r3, r3, #3
 80028d0:	4937      	ldr	r1, [pc, #220]	; (80029b0 <HAL_RCC_OscConfig+0x240>)
 80028d2:	4313      	orrs	r3, r2
 80028d4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028d6:	e03a      	b.n	800294e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	68db      	ldr	r3, [r3, #12]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d020      	beq.n	8002922 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028e0:	4b34      	ldr	r3, [pc, #208]	; (80029b4 <HAL_RCC_OscConfig+0x244>)
 80028e2:	2201      	movs	r2, #1
 80028e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028e6:	f7fe fa6d 	bl	8000dc4 <HAL_GetTick>
 80028ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028ec:	e008      	b.n	8002900 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028ee:	f7fe fa69 	bl	8000dc4 <HAL_GetTick>
 80028f2:	4602      	mov	r2, r0
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	1ad3      	subs	r3, r2, r3
 80028f8:	2b02      	cmp	r3, #2
 80028fa:	d901      	bls.n	8002900 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80028fc:	2303      	movs	r3, #3
 80028fe:	e1a8      	b.n	8002c52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002900:	4b2b      	ldr	r3, [pc, #172]	; (80029b0 <HAL_RCC_OscConfig+0x240>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 0302 	and.w	r3, r3, #2
 8002908:	2b00      	cmp	r3, #0
 800290a:	d0f0      	beq.n	80028ee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800290c:	4b28      	ldr	r3, [pc, #160]	; (80029b0 <HAL_RCC_OscConfig+0x240>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	691b      	ldr	r3, [r3, #16]
 8002918:	00db      	lsls	r3, r3, #3
 800291a:	4925      	ldr	r1, [pc, #148]	; (80029b0 <HAL_RCC_OscConfig+0x240>)
 800291c:	4313      	orrs	r3, r2
 800291e:	600b      	str	r3, [r1, #0]
 8002920:	e015      	b.n	800294e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002922:	4b24      	ldr	r3, [pc, #144]	; (80029b4 <HAL_RCC_OscConfig+0x244>)
 8002924:	2200      	movs	r2, #0
 8002926:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002928:	f7fe fa4c 	bl	8000dc4 <HAL_GetTick>
 800292c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800292e:	e008      	b.n	8002942 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002930:	f7fe fa48 	bl	8000dc4 <HAL_GetTick>
 8002934:	4602      	mov	r2, r0
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	1ad3      	subs	r3, r2, r3
 800293a:	2b02      	cmp	r3, #2
 800293c:	d901      	bls.n	8002942 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800293e:	2303      	movs	r3, #3
 8002940:	e187      	b.n	8002c52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002942:	4b1b      	ldr	r3, [pc, #108]	; (80029b0 <HAL_RCC_OscConfig+0x240>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f003 0302 	and.w	r3, r3, #2
 800294a:	2b00      	cmp	r3, #0
 800294c:	d1f0      	bne.n	8002930 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f003 0308 	and.w	r3, r3, #8
 8002956:	2b00      	cmp	r3, #0
 8002958:	d036      	beq.n	80029c8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	695b      	ldr	r3, [r3, #20]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d016      	beq.n	8002990 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002962:	4b15      	ldr	r3, [pc, #84]	; (80029b8 <HAL_RCC_OscConfig+0x248>)
 8002964:	2201      	movs	r2, #1
 8002966:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002968:	f7fe fa2c 	bl	8000dc4 <HAL_GetTick>
 800296c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800296e:	e008      	b.n	8002982 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002970:	f7fe fa28 	bl	8000dc4 <HAL_GetTick>
 8002974:	4602      	mov	r2, r0
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	1ad3      	subs	r3, r2, r3
 800297a:	2b02      	cmp	r3, #2
 800297c:	d901      	bls.n	8002982 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800297e:	2303      	movs	r3, #3
 8002980:	e167      	b.n	8002c52 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002982:	4b0b      	ldr	r3, [pc, #44]	; (80029b0 <HAL_RCC_OscConfig+0x240>)
 8002984:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002986:	f003 0302 	and.w	r3, r3, #2
 800298a:	2b00      	cmp	r3, #0
 800298c:	d0f0      	beq.n	8002970 <HAL_RCC_OscConfig+0x200>
 800298e:	e01b      	b.n	80029c8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002990:	4b09      	ldr	r3, [pc, #36]	; (80029b8 <HAL_RCC_OscConfig+0x248>)
 8002992:	2200      	movs	r2, #0
 8002994:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002996:	f7fe fa15 	bl	8000dc4 <HAL_GetTick>
 800299a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800299c:	e00e      	b.n	80029bc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800299e:	f7fe fa11 	bl	8000dc4 <HAL_GetTick>
 80029a2:	4602      	mov	r2, r0
 80029a4:	693b      	ldr	r3, [r7, #16]
 80029a6:	1ad3      	subs	r3, r2, r3
 80029a8:	2b02      	cmp	r3, #2
 80029aa:	d907      	bls.n	80029bc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80029ac:	2303      	movs	r3, #3
 80029ae:	e150      	b.n	8002c52 <HAL_RCC_OscConfig+0x4e2>
 80029b0:	40023800 	.word	0x40023800
 80029b4:	42470000 	.word	0x42470000
 80029b8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029bc:	4b88      	ldr	r3, [pc, #544]	; (8002be0 <HAL_RCC_OscConfig+0x470>)
 80029be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029c0:	f003 0302 	and.w	r3, r3, #2
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d1ea      	bne.n	800299e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f003 0304 	and.w	r3, r3, #4
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	f000 8097 	beq.w	8002b04 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029d6:	2300      	movs	r3, #0
 80029d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029da:	4b81      	ldr	r3, [pc, #516]	; (8002be0 <HAL_RCC_OscConfig+0x470>)
 80029dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d10f      	bne.n	8002a06 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029e6:	2300      	movs	r3, #0
 80029e8:	60bb      	str	r3, [r7, #8]
 80029ea:	4b7d      	ldr	r3, [pc, #500]	; (8002be0 <HAL_RCC_OscConfig+0x470>)
 80029ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ee:	4a7c      	ldr	r2, [pc, #496]	; (8002be0 <HAL_RCC_OscConfig+0x470>)
 80029f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029f4:	6413      	str	r3, [r2, #64]	; 0x40
 80029f6:	4b7a      	ldr	r3, [pc, #488]	; (8002be0 <HAL_RCC_OscConfig+0x470>)
 80029f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029fe:	60bb      	str	r3, [r7, #8]
 8002a00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a02:	2301      	movs	r3, #1
 8002a04:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a06:	4b77      	ldr	r3, [pc, #476]	; (8002be4 <HAL_RCC_OscConfig+0x474>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d118      	bne.n	8002a44 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a12:	4b74      	ldr	r3, [pc, #464]	; (8002be4 <HAL_RCC_OscConfig+0x474>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a73      	ldr	r2, [pc, #460]	; (8002be4 <HAL_RCC_OscConfig+0x474>)
 8002a18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a1c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a1e:	f7fe f9d1 	bl	8000dc4 <HAL_GetTick>
 8002a22:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a24:	e008      	b.n	8002a38 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a26:	f7fe f9cd 	bl	8000dc4 <HAL_GetTick>
 8002a2a:	4602      	mov	r2, r0
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	1ad3      	subs	r3, r2, r3
 8002a30:	2b02      	cmp	r3, #2
 8002a32:	d901      	bls.n	8002a38 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002a34:	2303      	movs	r3, #3
 8002a36:	e10c      	b.n	8002c52 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a38:	4b6a      	ldr	r3, [pc, #424]	; (8002be4 <HAL_RCC_OscConfig+0x474>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d0f0      	beq.n	8002a26 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	2b01      	cmp	r3, #1
 8002a4a:	d106      	bne.n	8002a5a <HAL_RCC_OscConfig+0x2ea>
 8002a4c:	4b64      	ldr	r3, [pc, #400]	; (8002be0 <HAL_RCC_OscConfig+0x470>)
 8002a4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a50:	4a63      	ldr	r2, [pc, #396]	; (8002be0 <HAL_RCC_OscConfig+0x470>)
 8002a52:	f043 0301 	orr.w	r3, r3, #1
 8002a56:	6713      	str	r3, [r2, #112]	; 0x70
 8002a58:	e01c      	b.n	8002a94 <HAL_RCC_OscConfig+0x324>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	689b      	ldr	r3, [r3, #8]
 8002a5e:	2b05      	cmp	r3, #5
 8002a60:	d10c      	bne.n	8002a7c <HAL_RCC_OscConfig+0x30c>
 8002a62:	4b5f      	ldr	r3, [pc, #380]	; (8002be0 <HAL_RCC_OscConfig+0x470>)
 8002a64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a66:	4a5e      	ldr	r2, [pc, #376]	; (8002be0 <HAL_RCC_OscConfig+0x470>)
 8002a68:	f043 0304 	orr.w	r3, r3, #4
 8002a6c:	6713      	str	r3, [r2, #112]	; 0x70
 8002a6e:	4b5c      	ldr	r3, [pc, #368]	; (8002be0 <HAL_RCC_OscConfig+0x470>)
 8002a70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a72:	4a5b      	ldr	r2, [pc, #364]	; (8002be0 <HAL_RCC_OscConfig+0x470>)
 8002a74:	f043 0301 	orr.w	r3, r3, #1
 8002a78:	6713      	str	r3, [r2, #112]	; 0x70
 8002a7a:	e00b      	b.n	8002a94 <HAL_RCC_OscConfig+0x324>
 8002a7c:	4b58      	ldr	r3, [pc, #352]	; (8002be0 <HAL_RCC_OscConfig+0x470>)
 8002a7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a80:	4a57      	ldr	r2, [pc, #348]	; (8002be0 <HAL_RCC_OscConfig+0x470>)
 8002a82:	f023 0301 	bic.w	r3, r3, #1
 8002a86:	6713      	str	r3, [r2, #112]	; 0x70
 8002a88:	4b55      	ldr	r3, [pc, #340]	; (8002be0 <HAL_RCC_OscConfig+0x470>)
 8002a8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a8c:	4a54      	ldr	r2, [pc, #336]	; (8002be0 <HAL_RCC_OscConfig+0x470>)
 8002a8e:	f023 0304 	bic.w	r3, r3, #4
 8002a92:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d015      	beq.n	8002ac8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a9c:	f7fe f992 	bl	8000dc4 <HAL_GetTick>
 8002aa0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002aa2:	e00a      	b.n	8002aba <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002aa4:	f7fe f98e 	bl	8000dc4 <HAL_GetTick>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	1ad3      	subs	r3, r2, r3
 8002aae:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d901      	bls.n	8002aba <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002ab6:	2303      	movs	r3, #3
 8002ab8:	e0cb      	b.n	8002c52 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002aba:	4b49      	ldr	r3, [pc, #292]	; (8002be0 <HAL_RCC_OscConfig+0x470>)
 8002abc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002abe:	f003 0302 	and.w	r3, r3, #2
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d0ee      	beq.n	8002aa4 <HAL_RCC_OscConfig+0x334>
 8002ac6:	e014      	b.n	8002af2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ac8:	f7fe f97c 	bl	8000dc4 <HAL_GetTick>
 8002acc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ace:	e00a      	b.n	8002ae6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ad0:	f7fe f978 	bl	8000dc4 <HAL_GetTick>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	1ad3      	subs	r3, r2, r3
 8002ada:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d901      	bls.n	8002ae6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002ae2:	2303      	movs	r3, #3
 8002ae4:	e0b5      	b.n	8002c52 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ae6:	4b3e      	ldr	r3, [pc, #248]	; (8002be0 <HAL_RCC_OscConfig+0x470>)
 8002ae8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aea:	f003 0302 	and.w	r3, r3, #2
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d1ee      	bne.n	8002ad0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002af2:	7dfb      	ldrb	r3, [r7, #23]
 8002af4:	2b01      	cmp	r3, #1
 8002af6:	d105      	bne.n	8002b04 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002af8:	4b39      	ldr	r3, [pc, #228]	; (8002be0 <HAL_RCC_OscConfig+0x470>)
 8002afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002afc:	4a38      	ldr	r2, [pc, #224]	; (8002be0 <HAL_RCC_OscConfig+0x470>)
 8002afe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b02:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	699b      	ldr	r3, [r3, #24]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	f000 80a1 	beq.w	8002c50 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b0e:	4b34      	ldr	r3, [pc, #208]	; (8002be0 <HAL_RCC_OscConfig+0x470>)
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	f003 030c 	and.w	r3, r3, #12
 8002b16:	2b08      	cmp	r3, #8
 8002b18:	d05c      	beq.n	8002bd4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	699b      	ldr	r3, [r3, #24]
 8002b1e:	2b02      	cmp	r3, #2
 8002b20:	d141      	bne.n	8002ba6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b22:	4b31      	ldr	r3, [pc, #196]	; (8002be8 <HAL_RCC_OscConfig+0x478>)
 8002b24:	2200      	movs	r2, #0
 8002b26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b28:	f7fe f94c 	bl	8000dc4 <HAL_GetTick>
 8002b2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b2e:	e008      	b.n	8002b42 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b30:	f7fe f948 	bl	8000dc4 <HAL_GetTick>
 8002b34:	4602      	mov	r2, r0
 8002b36:	693b      	ldr	r3, [r7, #16]
 8002b38:	1ad3      	subs	r3, r2, r3
 8002b3a:	2b02      	cmp	r3, #2
 8002b3c:	d901      	bls.n	8002b42 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002b3e:	2303      	movs	r3, #3
 8002b40:	e087      	b.n	8002c52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b42:	4b27      	ldr	r3, [pc, #156]	; (8002be0 <HAL_RCC_OscConfig+0x470>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d1f0      	bne.n	8002b30 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	69da      	ldr	r2, [r3, #28]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6a1b      	ldr	r3, [r3, #32]
 8002b56:	431a      	orrs	r2, r3
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b5c:	019b      	lsls	r3, r3, #6
 8002b5e:	431a      	orrs	r2, r3
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b64:	085b      	lsrs	r3, r3, #1
 8002b66:	3b01      	subs	r3, #1
 8002b68:	041b      	lsls	r3, r3, #16
 8002b6a:	431a      	orrs	r2, r3
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b70:	061b      	lsls	r3, r3, #24
 8002b72:	491b      	ldr	r1, [pc, #108]	; (8002be0 <HAL_RCC_OscConfig+0x470>)
 8002b74:	4313      	orrs	r3, r2
 8002b76:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b78:	4b1b      	ldr	r3, [pc, #108]	; (8002be8 <HAL_RCC_OscConfig+0x478>)
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b7e:	f7fe f921 	bl	8000dc4 <HAL_GetTick>
 8002b82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b84:	e008      	b.n	8002b98 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b86:	f7fe f91d 	bl	8000dc4 <HAL_GetTick>
 8002b8a:	4602      	mov	r2, r0
 8002b8c:	693b      	ldr	r3, [r7, #16]
 8002b8e:	1ad3      	subs	r3, r2, r3
 8002b90:	2b02      	cmp	r3, #2
 8002b92:	d901      	bls.n	8002b98 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002b94:	2303      	movs	r3, #3
 8002b96:	e05c      	b.n	8002c52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b98:	4b11      	ldr	r3, [pc, #68]	; (8002be0 <HAL_RCC_OscConfig+0x470>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d0f0      	beq.n	8002b86 <HAL_RCC_OscConfig+0x416>
 8002ba4:	e054      	b.n	8002c50 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ba6:	4b10      	ldr	r3, [pc, #64]	; (8002be8 <HAL_RCC_OscConfig+0x478>)
 8002ba8:	2200      	movs	r2, #0
 8002baa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bac:	f7fe f90a 	bl	8000dc4 <HAL_GetTick>
 8002bb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bb2:	e008      	b.n	8002bc6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bb4:	f7fe f906 	bl	8000dc4 <HAL_GetTick>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	1ad3      	subs	r3, r2, r3
 8002bbe:	2b02      	cmp	r3, #2
 8002bc0:	d901      	bls.n	8002bc6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002bc2:	2303      	movs	r3, #3
 8002bc4:	e045      	b.n	8002c52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bc6:	4b06      	ldr	r3, [pc, #24]	; (8002be0 <HAL_RCC_OscConfig+0x470>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d1f0      	bne.n	8002bb4 <HAL_RCC_OscConfig+0x444>
 8002bd2:	e03d      	b.n	8002c50 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	699b      	ldr	r3, [r3, #24]
 8002bd8:	2b01      	cmp	r3, #1
 8002bda:	d107      	bne.n	8002bec <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	e038      	b.n	8002c52 <HAL_RCC_OscConfig+0x4e2>
 8002be0:	40023800 	.word	0x40023800
 8002be4:	40007000 	.word	0x40007000
 8002be8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002bec:	4b1b      	ldr	r3, [pc, #108]	; (8002c5c <HAL_RCC_OscConfig+0x4ec>)
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	699b      	ldr	r3, [r3, #24]
 8002bf6:	2b01      	cmp	r3, #1
 8002bf8:	d028      	beq.n	8002c4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c04:	429a      	cmp	r2, r3
 8002c06:	d121      	bne.n	8002c4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c12:	429a      	cmp	r2, r3
 8002c14:	d11a      	bne.n	8002c4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c16:	68fa      	ldr	r2, [r7, #12]
 8002c18:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002c1c:	4013      	ands	r3, r2
 8002c1e:	687a      	ldr	r2, [r7, #4]
 8002c20:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002c22:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d111      	bne.n	8002c4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c32:	085b      	lsrs	r3, r3, #1
 8002c34:	3b01      	subs	r3, #1
 8002c36:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	d107      	bne.n	8002c4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c46:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	d001      	beq.n	8002c50 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	e000      	b.n	8002c52 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002c50:	2300      	movs	r3, #0
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	3718      	adds	r7, #24
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	bf00      	nop
 8002c5c:	40023800 	.word	0x40023800

08002c60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b084      	sub	sp, #16
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
 8002c68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d101      	bne.n	8002c74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c70:	2301      	movs	r3, #1
 8002c72:	e0cc      	b.n	8002e0e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c74:	4b68      	ldr	r3, [pc, #416]	; (8002e18 <HAL_RCC_ClockConfig+0x1b8>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f003 0307 	and.w	r3, r3, #7
 8002c7c:	683a      	ldr	r2, [r7, #0]
 8002c7e:	429a      	cmp	r2, r3
 8002c80:	d90c      	bls.n	8002c9c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c82:	4b65      	ldr	r3, [pc, #404]	; (8002e18 <HAL_RCC_ClockConfig+0x1b8>)
 8002c84:	683a      	ldr	r2, [r7, #0]
 8002c86:	b2d2      	uxtb	r2, r2
 8002c88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c8a:	4b63      	ldr	r3, [pc, #396]	; (8002e18 <HAL_RCC_ClockConfig+0x1b8>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f003 0307 	and.w	r3, r3, #7
 8002c92:	683a      	ldr	r2, [r7, #0]
 8002c94:	429a      	cmp	r2, r3
 8002c96:	d001      	beq.n	8002c9c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	e0b8      	b.n	8002e0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f003 0302 	and.w	r3, r3, #2
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d020      	beq.n	8002cea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f003 0304 	and.w	r3, r3, #4
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d005      	beq.n	8002cc0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002cb4:	4b59      	ldr	r3, [pc, #356]	; (8002e1c <HAL_RCC_ClockConfig+0x1bc>)
 8002cb6:	689b      	ldr	r3, [r3, #8]
 8002cb8:	4a58      	ldr	r2, [pc, #352]	; (8002e1c <HAL_RCC_ClockConfig+0x1bc>)
 8002cba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002cbe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f003 0308 	and.w	r3, r3, #8
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d005      	beq.n	8002cd8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ccc:	4b53      	ldr	r3, [pc, #332]	; (8002e1c <HAL_RCC_ClockConfig+0x1bc>)
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	4a52      	ldr	r2, [pc, #328]	; (8002e1c <HAL_RCC_ClockConfig+0x1bc>)
 8002cd2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002cd6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cd8:	4b50      	ldr	r3, [pc, #320]	; (8002e1c <HAL_RCC_ClockConfig+0x1bc>)
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	494d      	ldr	r1, [pc, #308]	; (8002e1c <HAL_RCC_ClockConfig+0x1bc>)
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f003 0301 	and.w	r3, r3, #1
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d044      	beq.n	8002d80 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d107      	bne.n	8002d0e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cfe:	4b47      	ldr	r3, [pc, #284]	; (8002e1c <HAL_RCC_ClockConfig+0x1bc>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d119      	bne.n	8002d3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e07f      	b.n	8002e0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	2b02      	cmp	r3, #2
 8002d14:	d003      	beq.n	8002d1e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d1a:	2b03      	cmp	r3, #3
 8002d1c:	d107      	bne.n	8002d2e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d1e:	4b3f      	ldr	r3, [pc, #252]	; (8002e1c <HAL_RCC_ClockConfig+0x1bc>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d109      	bne.n	8002d3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e06f      	b.n	8002e0e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d2e:	4b3b      	ldr	r3, [pc, #236]	; (8002e1c <HAL_RCC_ClockConfig+0x1bc>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 0302 	and.w	r3, r3, #2
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d101      	bne.n	8002d3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e067      	b.n	8002e0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d3e:	4b37      	ldr	r3, [pc, #220]	; (8002e1c <HAL_RCC_ClockConfig+0x1bc>)
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	f023 0203 	bic.w	r2, r3, #3
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	4934      	ldr	r1, [pc, #208]	; (8002e1c <HAL_RCC_ClockConfig+0x1bc>)
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d50:	f7fe f838 	bl	8000dc4 <HAL_GetTick>
 8002d54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d56:	e00a      	b.n	8002d6e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d58:	f7fe f834 	bl	8000dc4 <HAL_GetTick>
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	1ad3      	subs	r3, r2, r3
 8002d62:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d901      	bls.n	8002d6e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d6a:	2303      	movs	r3, #3
 8002d6c:	e04f      	b.n	8002e0e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d6e:	4b2b      	ldr	r3, [pc, #172]	; (8002e1c <HAL_RCC_ClockConfig+0x1bc>)
 8002d70:	689b      	ldr	r3, [r3, #8]
 8002d72:	f003 020c 	and.w	r2, r3, #12
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	009b      	lsls	r3, r3, #2
 8002d7c:	429a      	cmp	r2, r3
 8002d7e:	d1eb      	bne.n	8002d58 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d80:	4b25      	ldr	r3, [pc, #148]	; (8002e18 <HAL_RCC_ClockConfig+0x1b8>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f003 0307 	and.w	r3, r3, #7
 8002d88:	683a      	ldr	r2, [r7, #0]
 8002d8a:	429a      	cmp	r2, r3
 8002d8c:	d20c      	bcs.n	8002da8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d8e:	4b22      	ldr	r3, [pc, #136]	; (8002e18 <HAL_RCC_ClockConfig+0x1b8>)
 8002d90:	683a      	ldr	r2, [r7, #0]
 8002d92:	b2d2      	uxtb	r2, r2
 8002d94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d96:	4b20      	ldr	r3, [pc, #128]	; (8002e18 <HAL_RCC_ClockConfig+0x1b8>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 0307 	and.w	r3, r3, #7
 8002d9e:	683a      	ldr	r2, [r7, #0]
 8002da0:	429a      	cmp	r2, r3
 8002da2:	d001      	beq.n	8002da8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	e032      	b.n	8002e0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f003 0304 	and.w	r3, r3, #4
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d008      	beq.n	8002dc6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002db4:	4b19      	ldr	r3, [pc, #100]	; (8002e1c <HAL_RCC_ClockConfig+0x1bc>)
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	68db      	ldr	r3, [r3, #12]
 8002dc0:	4916      	ldr	r1, [pc, #88]	; (8002e1c <HAL_RCC_ClockConfig+0x1bc>)
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 0308 	and.w	r3, r3, #8
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d009      	beq.n	8002de6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002dd2:	4b12      	ldr	r3, [pc, #72]	; (8002e1c <HAL_RCC_ClockConfig+0x1bc>)
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	691b      	ldr	r3, [r3, #16]
 8002dde:	00db      	lsls	r3, r3, #3
 8002de0:	490e      	ldr	r1, [pc, #56]	; (8002e1c <HAL_RCC_ClockConfig+0x1bc>)
 8002de2:	4313      	orrs	r3, r2
 8002de4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002de6:	f000 f821 	bl	8002e2c <HAL_RCC_GetSysClockFreq>
 8002dea:	4602      	mov	r2, r0
 8002dec:	4b0b      	ldr	r3, [pc, #44]	; (8002e1c <HAL_RCC_ClockConfig+0x1bc>)
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	091b      	lsrs	r3, r3, #4
 8002df2:	f003 030f 	and.w	r3, r3, #15
 8002df6:	490a      	ldr	r1, [pc, #40]	; (8002e20 <HAL_RCC_ClockConfig+0x1c0>)
 8002df8:	5ccb      	ldrb	r3, [r1, r3]
 8002dfa:	fa22 f303 	lsr.w	r3, r2, r3
 8002dfe:	4a09      	ldr	r2, [pc, #36]	; (8002e24 <HAL_RCC_ClockConfig+0x1c4>)
 8002e00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002e02:	4b09      	ldr	r3, [pc, #36]	; (8002e28 <HAL_RCC_ClockConfig+0x1c8>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4618      	mov	r0, r3
 8002e08:	f7fd ff98 	bl	8000d3c <HAL_InitTick>

  return HAL_OK;
 8002e0c:	2300      	movs	r3, #0
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	3710      	adds	r7, #16
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}
 8002e16:	bf00      	nop
 8002e18:	40023c00 	.word	0x40023c00
 8002e1c:	40023800 	.word	0x40023800
 8002e20:	08005c68 	.word	0x08005c68
 8002e24:	20000004 	.word	0x20000004
 8002e28:	20000008 	.word	0x20000008

08002e2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e30:	b090      	sub	sp, #64	; 0x40
 8002e32:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002e34:	2300      	movs	r3, #0
 8002e36:	637b      	str	r3, [r7, #52]	; 0x34
 8002e38:	2300      	movs	r3, #0
 8002e3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002e40:	2300      	movs	r3, #0
 8002e42:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e44:	4b59      	ldr	r3, [pc, #356]	; (8002fac <HAL_RCC_GetSysClockFreq+0x180>)
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	f003 030c 	and.w	r3, r3, #12
 8002e4c:	2b08      	cmp	r3, #8
 8002e4e:	d00d      	beq.n	8002e6c <HAL_RCC_GetSysClockFreq+0x40>
 8002e50:	2b08      	cmp	r3, #8
 8002e52:	f200 80a1 	bhi.w	8002f98 <HAL_RCC_GetSysClockFreq+0x16c>
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d002      	beq.n	8002e60 <HAL_RCC_GetSysClockFreq+0x34>
 8002e5a:	2b04      	cmp	r3, #4
 8002e5c:	d003      	beq.n	8002e66 <HAL_RCC_GetSysClockFreq+0x3a>
 8002e5e:	e09b      	b.n	8002f98 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002e60:	4b53      	ldr	r3, [pc, #332]	; (8002fb0 <HAL_RCC_GetSysClockFreq+0x184>)
 8002e62:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002e64:	e09b      	b.n	8002f9e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002e66:	4b53      	ldr	r3, [pc, #332]	; (8002fb4 <HAL_RCC_GetSysClockFreq+0x188>)
 8002e68:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002e6a:	e098      	b.n	8002f9e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e6c:	4b4f      	ldr	r3, [pc, #316]	; (8002fac <HAL_RCC_GetSysClockFreq+0x180>)
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e74:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e76:	4b4d      	ldr	r3, [pc, #308]	; (8002fac <HAL_RCC_GetSysClockFreq+0x180>)
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d028      	beq.n	8002ed4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e82:	4b4a      	ldr	r3, [pc, #296]	; (8002fac <HAL_RCC_GetSysClockFreq+0x180>)
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	099b      	lsrs	r3, r3, #6
 8002e88:	2200      	movs	r2, #0
 8002e8a:	623b      	str	r3, [r7, #32]
 8002e8c:	627a      	str	r2, [r7, #36]	; 0x24
 8002e8e:	6a3b      	ldr	r3, [r7, #32]
 8002e90:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002e94:	2100      	movs	r1, #0
 8002e96:	4b47      	ldr	r3, [pc, #284]	; (8002fb4 <HAL_RCC_GetSysClockFreq+0x188>)
 8002e98:	fb03 f201 	mul.w	r2, r3, r1
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	fb00 f303 	mul.w	r3, r0, r3
 8002ea2:	4413      	add	r3, r2
 8002ea4:	4a43      	ldr	r2, [pc, #268]	; (8002fb4 <HAL_RCC_GetSysClockFreq+0x188>)
 8002ea6:	fba0 1202 	umull	r1, r2, r0, r2
 8002eaa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002eac:	460a      	mov	r2, r1
 8002eae:	62ba      	str	r2, [r7, #40]	; 0x28
 8002eb0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002eb2:	4413      	add	r3, r2
 8002eb4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002eb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002eb8:	2200      	movs	r2, #0
 8002eba:	61bb      	str	r3, [r7, #24]
 8002ebc:	61fa      	str	r2, [r7, #28]
 8002ebe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ec2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002ec6:	f7fd f98b 	bl	80001e0 <__aeabi_uldivmod>
 8002eca:	4602      	mov	r2, r0
 8002ecc:	460b      	mov	r3, r1
 8002ece:	4613      	mov	r3, r2
 8002ed0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ed2:	e053      	b.n	8002f7c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ed4:	4b35      	ldr	r3, [pc, #212]	; (8002fac <HAL_RCC_GetSysClockFreq+0x180>)
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	099b      	lsrs	r3, r3, #6
 8002eda:	2200      	movs	r2, #0
 8002edc:	613b      	str	r3, [r7, #16]
 8002ede:	617a      	str	r2, [r7, #20]
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002ee6:	f04f 0b00 	mov.w	fp, #0
 8002eea:	4652      	mov	r2, sl
 8002eec:	465b      	mov	r3, fp
 8002eee:	f04f 0000 	mov.w	r0, #0
 8002ef2:	f04f 0100 	mov.w	r1, #0
 8002ef6:	0159      	lsls	r1, r3, #5
 8002ef8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002efc:	0150      	lsls	r0, r2, #5
 8002efe:	4602      	mov	r2, r0
 8002f00:	460b      	mov	r3, r1
 8002f02:	ebb2 080a 	subs.w	r8, r2, sl
 8002f06:	eb63 090b 	sbc.w	r9, r3, fp
 8002f0a:	f04f 0200 	mov.w	r2, #0
 8002f0e:	f04f 0300 	mov.w	r3, #0
 8002f12:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002f16:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002f1a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002f1e:	ebb2 0408 	subs.w	r4, r2, r8
 8002f22:	eb63 0509 	sbc.w	r5, r3, r9
 8002f26:	f04f 0200 	mov.w	r2, #0
 8002f2a:	f04f 0300 	mov.w	r3, #0
 8002f2e:	00eb      	lsls	r3, r5, #3
 8002f30:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002f34:	00e2      	lsls	r2, r4, #3
 8002f36:	4614      	mov	r4, r2
 8002f38:	461d      	mov	r5, r3
 8002f3a:	eb14 030a 	adds.w	r3, r4, sl
 8002f3e:	603b      	str	r3, [r7, #0]
 8002f40:	eb45 030b 	adc.w	r3, r5, fp
 8002f44:	607b      	str	r3, [r7, #4]
 8002f46:	f04f 0200 	mov.w	r2, #0
 8002f4a:	f04f 0300 	mov.w	r3, #0
 8002f4e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002f52:	4629      	mov	r1, r5
 8002f54:	028b      	lsls	r3, r1, #10
 8002f56:	4621      	mov	r1, r4
 8002f58:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002f5c:	4621      	mov	r1, r4
 8002f5e:	028a      	lsls	r2, r1, #10
 8002f60:	4610      	mov	r0, r2
 8002f62:	4619      	mov	r1, r3
 8002f64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f66:	2200      	movs	r2, #0
 8002f68:	60bb      	str	r3, [r7, #8]
 8002f6a:	60fa      	str	r2, [r7, #12]
 8002f6c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002f70:	f7fd f936 	bl	80001e0 <__aeabi_uldivmod>
 8002f74:	4602      	mov	r2, r0
 8002f76:	460b      	mov	r3, r1
 8002f78:	4613      	mov	r3, r2
 8002f7a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002f7c:	4b0b      	ldr	r3, [pc, #44]	; (8002fac <HAL_RCC_GetSysClockFreq+0x180>)
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	0c1b      	lsrs	r3, r3, #16
 8002f82:	f003 0303 	and.w	r3, r3, #3
 8002f86:	3301      	adds	r3, #1
 8002f88:	005b      	lsls	r3, r3, #1
 8002f8a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002f8c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f90:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f94:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002f96:	e002      	b.n	8002f9e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002f98:	4b05      	ldr	r3, [pc, #20]	; (8002fb0 <HAL_RCC_GetSysClockFreq+0x184>)
 8002f9a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002f9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	3740      	adds	r7, #64	; 0x40
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002faa:	bf00      	nop
 8002fac:	40023800 	.word	0x40023800
 8002fb0:	00f42400 	.word	0x00f42400
 8002fb4:	017d7840 	.word	0x017d7840

08002fb8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002fbc:	4b03      	ldr	r3, [pc, #12]	; (8002fcc <HAL_RCC_GetHCLKFreq+0x14>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc8:	4770      	bx	lr
 8002fca:	bf00      	nop
 8002fcc:	20000004 	.word	0x20000004

08002fd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002fd4:	f7ff fff0 	bl	8002fb8 <HAL_RCC_GetHCLKFreq>
 8002fd8:	4602      	mov	r2, r0
 8002fda:	4b05      	ldr	r3, [pc, #20]	; (8002ff0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	0a9b      	lsrs	r3, r3, #10
 8002fe0:	f003 0307 	and.w	r3, r3, #7
 8002fe4:	4903      	ldr	r1, [pc, #12]	; (8002ff4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002fe6:	5ccb      	ldrb	r3, [r1, r3]
 8002fe8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	bd80      	pop	{r7, pc}
 8002ff0:	40023800 	.word	0x40023800
 8002ff4:	08005c78 	.word	0x08005c78

08002ff8 <__NVIC_SetPriority>:
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b083      	sub	sp, #12
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	4603      	mov	r3, r0
 8003000:	6039      	str	r1, [r7, #0]
 8003002:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003004:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003008:	2b00      	cmp	r3, #0
 800300a:	db0a      	blt.n	8003022 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	b2da      	uxtb	r2, r3
 8003010:	490c      	ldr	r1, [pc, #48]	; (8003044 <__NVIC_SetPriority+0x4c>)
 8003012:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003016:	0112      	lsls	r2, r2, #4
 8003018:	b2d2      	uxtb	r2, r2
 800301a:	440b      	add	r3, r1
 800301c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003020:	e00a      	b.n	8003038 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	b2da      	uxtb	r2, r3
 8003026:	4908      	ldr	r1, [pc, #32]	; (8003048 <__NVIC_SetPriority+0x50>)
 8003028:	79fb      	ldrb	r3, [r7, #7]
 800302a:	f003 030f 	and.w	r3, r3, #15
 800302e:	3b04      	subs	r3, #4
 8003030:	0112      	lsls	r2, r2, #4
 8003032:	b2d2      	uxtb	r2, r2
 8003034:	440b      	add	r3, r1
 8003036:	761a      	strb	r2, [r3, #24]
}
 8003038:	bf00      	nop
 800303a:	370c      	adds	r7, #12
 800303c:	46bd      	mov	sp, r7
 800303e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003042:	4770      	bx	lr
 8003044:	e000e100 	.word	0xe000e100
 8003048:	e000ed00 	.word	0xe000ed00

0800304c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800304c:	b580      	push	{r7, lr}
 800304e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003050:	2100      	movs	r1, #0
 8003052:	f06f 0004 	mvn.w	r0, #4
 8003056:	f7ff ffcf 	bl	8002ff8 <__NVIC_SetPriority>
#endif
}
 800305a:	bf00      	nop
 800305c:	bd80      	pop	{r7, pc}
	...

08003060 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003060:	b480      	push	{r7}
 8003062:	b083      	sub	sp, #12
 8003064:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003066:	f3ef 8305 	mrs	r3, IPSR
 800306a:	603b      	str	r3, [r7, #0]
  return(result);
 800306c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800306e:	2b00      	cmp	r3, #0
 8003070:	d003      	beq.n	800307a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003072:	f06f 0305 	mvn.w	r3, #5
 8003076:	607b      	str	r3, [r7, #4]
 8003078:	e00c      	b.n	8003094 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800307a:	4b0a      	ldr	r3, [pc, #40]	; (80030a4 <osKernelInitialize+0x44>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d105      	bne.n	800308e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003082:	4b08      	ldr	r3, [pc, #32]	; (80030a4 <osKernelInitialize+0x44>)
 8003084:	2201      	movs	r2, #1
 8003086:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003088:	2300      	movs	r3, #0
 800308a:	607b      	str	r3, [r7, #4]
 800308c:	e002      	b.n	8003094 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800308e:	f04f 33ff 	mov.w	r3, #4294967295
 8003092:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003094:	687b      	ldr	r3, [r7, #4]
}
 8003096:	4618      	mov	r0, r3
 8003098:	370c      	adds	r7, #12
 800309a:	46bd      	mov	sp, r7
 800309c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a0:	4770      	bx	lr
 80030a2:	bf00      	nop
 80030a4:	200000e8 	.word	0x200000e8

080030a8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b082      	sub	sp, #8
 80030ac:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80030ae:	f3ef 8305 	mrs	r3, IPSR
 80030b2:	603b      	str	r3, [r7, #0]
  return(result);
 80030b4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d003      	beq.n	80030c2 <osKernelStart+0x1a>
    stat = osErrorISR;
 80030ba:	f06f 0305 	mvn.w	r3, #5
 80030be:	607b      	str	r3, [r7, #4]
 80030c0:	e010      	b.n	80030e4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80030c2:	4b0b      	ldr	r3, [pc, #44]	; (80030f0 <osKernelStart+0x48>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	2b01      	cmp	r3, #1
 80030c8:	d109      	bne.n	80030de <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80030ca:	f7ff ffbf 	bl	800304c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80030ce:	4b08      	ldr	r3, [pc, #32]	; (80030f0 <osKernelStart+0x48>)
 80030d0:	2202      	movs	r2, #2
 80030d2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80030d4:	f001 f866 	bl	80041a4 <vTaskStartScheduler>
      stat = osOK;
 80030d8:	2300      	movs	r3, #0
 80030da:	607b      	str	r3, [r7, #4]
 80030dc:	e002      	b.n	80030e4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80030de:	f04f 33ff 	mov.w	r3, #4294967295
 80030e2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80030e4:	687b      	ldr	r3, [r7, #4]
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	3708      	adds	r7, #8
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}
 80030ee:	bf00      	nop
 80030f0:	200000e8 	.word	0x200000e8

080030f4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b08e      	sub	sp, #56	; 0x38
 80030f8:	af04      	add	r7, sp, #16
 80030fa:	60f8      	str	r0, [r7, #12]
 80030fc:	60b9      	str	r1, [r7, #8]
 80030fe:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003100:	2300      	movs	r3, #0
 8003102:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003104:	f3ef 8305 	mrs	r3, IPSR
 8003108:	617b      	str	r3, [r7, #20]
  return(result);
 800310a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800310c:	2b00      	cmp	r3, #0
 800310e:	d17e      	bne.n	800320e <osThreadNew+0x11a>
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d07b      	beq.n	800320e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8003116:	2380      	movs	r3, #128	; 0x80
 8003118:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800311a:	2318      	movs	r3, #24
 800311c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800311e:	2300      	movs	r3, #0
 8003120:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8003122:	f04f 33ff 	mov.w	r3, #4294967295
 8003126:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d045      	beq.n	80031ba <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d002      	beq.n	800313c <osThreadNew+0x48>
        name = attr->name;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	699b      	ldr	r3, [r3, #24]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d002      	beq.n	800314a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	699b      	ldr	r3, [r3, #24]
 8003148:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800314a:	69fb      	ldr	r3, [r7, #28]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d008      	beq.n	8003162 <osThreadNew+0x6e>
 8003150:	69fb      	ldr	r3, [r7, #28]
 8003152:	2b38      	cmp	r3, #56	; 0x38
 8003154:	d805      	bhi.n	8003162 <osThreadNew+0x6e>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	f003 0301 	and.w	r3, r3, #1
 800315e:	2b00      	cmp	r3, #0
 8003160:	d001      	beq.n	8003166 <osThreadNew+0x72>
        return (NULL);
 8003162:	2300      	movs	r3, #0
 8003164:	e054      	b.n	8003210 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	695b      	ldr	r3, [r3, #20]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d003      	beq.n	8003176 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	695b      	ldr	r3, [r3, #20]
 8003172:	089b      	lsrs	r3, r3, #2
 8003174:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	689b      	ldr	r3, [r3, #8]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d00e      	beq.n	800319c <osThreadNew+0xa8>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	68db      	ldr	r3, [r3, #12]
 8003182:	2b5b      	cmp	r3, #91	; 0x5b
 8003184:	d90a      	bls.n	800319c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800318a:	2b00      	cmp	r3, #0
 800318c:	d006      	beq.n	800319c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	695b      	ldr	r3, [r3, #20]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d002      	beq.n	800319c <osThreadNew+0xa8>
        mem = 1;
 8003196:	2301      	movs	r3, #1
 8003198:	61bb      	str	r3, [r7, #24]
 800319a:	e010      	b.n	80031be <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d10c      	bne.n	80031be <osThreadNew+0xca>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	68db      	ldr	r3, [r3, #12]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d108      	bne.n	80031be <osThreadNew+0xca>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	691b      	ldr	r3, [r3, #16]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d104      	bne.n	80031be <osThreadNew+0xca>
          mem = 0;
 80031b4:	2300      	movs	r3, #0
 80031b6:	61bb      	str	r3, [r7, #24]
 80031b8:	e001      	b.n	80031be <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80031ba:	2300      	movs	r3, #0
 80031bc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80031be:	69bb      	ldr	r3, [r7, #24]
 80031c0:	2b01      	cmp	r3, #1
 80031c2:	d110      	bne.n	80031e6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80031c8:	687a      	ldr	r2, [r7, #4]
 80031ca:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80031cc:	9202      	str	r2, [sp, #8]
 80031ce:	9301      	str	r3, [sp, #4]
 80031d0:	69fb      	ldr	r3, [r7, #28]
 80031d2:	9300      	str	r3, [sp, #0]
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	6a3a      	ldr	r2, [r7, #32]
 80031d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80031da:	68f8      	ldr	r0, [r7, #12]
 80031dc:	f000 fe0c 	bl	8003df8 <xTaskCreateStatic>
 80031e0:	4603      	mov	r3, r0
 80031e2:	613b      	str	r3, [r7, #16]
 80031e4:	e013      	b.n	800320e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80031e6:	69bb      	ldr	r3, [r7, #24]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d110      	bne.n	800320e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80031ec:	6a3b      	ldr	r3, [r7, #32]
 80031ee:	b29a      	uxth	r2, r3
 80031f0:	f107 0310 	add.w	r3, r7, #16
 80031f4:	9301      	str	r3, [sp, #4]
 80031f6:	69fb      	ldr	r3, [r7, #28]
 80031f8:	9300      	str	r3, [sp, #0]
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80031fe:	68f8      	ldr	r0, [r7, #12]
 8003200:	f000 fe57 	bl	8003eb2 <xTaskCreate>
 8003204:	4603      	mov	r3, r0
 8003206:	2b01      	cmp	r3, #1
 8003208:	d001      	beq.n	800320e <osThreadNew+0x11a>
            hTask = NULL;
 800320a:	2300      	movs	r3, #0
 800320c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800320e:	693b      	ldr	r3, [r7, #16]
}
 8003210:	4618      	mov	r0, r3
 8003212:	3728      	adds	r7, #40	; 0x28
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}

08003218 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003218:	b580      	push	{r7, lr}
 800321a:	b084      	sub	sp, #16
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003220:	f3ef 8305 	mrs	r3, IPSR
 8003224:	60bb      	str	r3, [r7, #8]
  return(result);
 8003226:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003228:	2b00      	cmp	r3, #0
 800322a:	d003      	beq.n	8003234 <osDelay+0x1c>
    stat = osErrorISR;
 800322c:	f06f 0305 	mvn.w	r3, #5
 8003230:	60fb      	str	r3, [r7, #12]
 8003232:	e007      	b.n	8003244 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003234:	2300      	movs	r3, #0
 8003236:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d002      	beq.n	8003244 <osDelay+0x2c>
      vTaskDelay(ticks);
 800323e:	6878      	ldr	r0, [r7, #4]
 8003240:	f000 ff7c 	bl	800413c <vTaskDelay>
    }
  }

  return (stat);
 8003244:	68fb      	ldr	r3, [r7, #12]
}
 8003246:	4618      	mov	r0, r3
 8003248:	3710      	adds	r7, #16
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}
	...

08003250 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003250:	b480      	push	{r7}
 8003252:	b085      	sub	sp, #20
 8003254:	af00      	add	r7, sp, #0
 8003256:	60f8      	str	r0, [r7, #12]
 8003258:	60b9      	str	r1, [r7, #8]
 800325a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	4a07      	ldr	r2, [pc, #28]	; (800327c <vApplicationGetIdleTaskMemory+0x2c>)
 8003260:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	4a06      	ldr	r2, [pc, #24]	; (8003280 <vApplicationGetIdleTaskMemory+0x30>)
 8003266:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2280      	movs	r2, #128	; 0x80
 800326c:	601a      	str	r2, [r3, #0]
}
 800326e:	bf00      	nop
 8003270:	3714      	adds	r7, #20
 8003272:	46bd      	mov	sp, r7
 8003274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003278:	4770      	bx	lr
 800327a:	bf00      	nop
 800327c:	200000ec 	.word	0x200000ec
 8003280:	20000148 	.word	0x20000148

08003284 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003284:	b480      	push	{r7}
 8003286:	b085      	sub	sp, #20
 8003288:	af00      	add	r7, sp, #0
 800328a:	60f8      	str	r0, [r7, #12]
 800328c:	60b9      	str	r1, [r7, #8]
 800328e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	4a07      	ldr	r2, [pc, #28]	; (80032b0 <vApplicationGetTimerTaskMemory+0x2c>)
 8003294:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003296:	68bb      	ldr	r3, [r7, #8]
 8003298:	4a06      	ldr	r2, [pc, #24]	; (80032b4 <vApplicationGetTimerTaskMemory+0x30>)
 800329a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	f44f 7280 	mov.w	r2, #256	; 0x100
 80032a2:	601a      	str	r2, [r3, #0]
}
 80032a4:	bf00      	nop
 80032a6:	3714      	adds	r7, #20
 80032a8:	46bd      	mov	sp, r7
 80032aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ae:	4770      	bx	lr
 80032b0:	20000348 	.word	0x20000348
 80032b4:	200003a4 	.word	0x200003a4

080032b8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80032b8:	b480      	push	{r7}
 80032ba:	b083      	sub	sp, #12
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	f103 0208 	add.w	r2, r3, #8
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	f04f 32ff 	mov.w	r2, #4294967295
 80032d0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	f103 0208 	add.w	r2, r3, #8
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	f103 0208 	add.w	r2, r3, #8
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2200      	movs	r2, #0
 80032ea:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80032ec:	bf00      	nop
 80032ee:	370c      	adds	r7, #12
 80032f0:	46bd      	mov	sp, r7
 80032f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f6:	4770      	bx	lr

080032f8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80032f8:	b480      	push	{r7}
 80032fa:	b083      	sub	sp, #12
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2200      	movs	r2, #0
 8003304:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003306:	bf00      	nop
 8003308:	370c      	adds	r7, #12
 800330a:	46bd      	mov	sp, r7
 800330c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003310:	4770      	bx	lr

08003312 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003312:	b480      	push	{r7}
 8003314:	b085      	sub	sp, #20
 8003316:	af00      	add	r7, sp, #0
 8003318:	6078      	str	r0, [r7, #4]
 800331a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	68fa      	ldr	r2, [r7, #12]
 8003326:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	689a      	ldr	r2, [r3, #8]
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	683a      	ldr	r2, [r7, #0]
 8003336:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	683a      	ldr	r2, [r7, #0]
 800333c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	687a      	ldr	r2, [r7, #4]
 8003342:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	1c5a      	adds	r2, r3, #1
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	601a      	str	r2, [r3, #0]
}
 800334e:	bf00      	nop
 8003350:	3714      	adds	r7, #20
 8003352:	46bd      	mov	sp, r7
 8003354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003358:	4770      	bx	lr

0800335a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800335a:	b480      	push	{r7}
 800335c:	b085      	sub	sp, #20
 800335e:	af00      	add	r7, sp, #0
 8003360:	6078      	str	r0, [r7, #4]
 8003362:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003370:	d103      	bne.n	800337a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	691b      	ldr	r3, [r3, #16]
 8003376:	60fb      	str	r3, [r7, #12]
 8003378:	e00c      	b.n	8003394 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	3308      	adds	r3, #8
 800337e:	60fb      	str	r3, [r7, #12]
 8003380:	e002      	b.n	8003388 <vListInsert+0x2e>
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	60fb      	str	r3, [r7, #12]
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	68ba      	ldr	r2, [r7, #8]
 8003390:	429a      	cmp	r2, r3
 8003392:	d2f6      	bcs.n	8003382 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	685a      	ldr	r2, [r3, #4]
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	683a      	ldr	r2, [r7, #0]
 80033a2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	68fa      	ldr	r2, [r7, #12]
 80033a8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	683a      	ldr	r2, [r7, #0]
 80033ae:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	687a      	ldr	r2, [r7, #4]
 80033b4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	1c5a      	adds	r2, r3, #1
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	601a      	str	r2, [r3, #0]
}
 80033c0:	bf00      	nop
 80033c2:	3714      	adds	r7, #20
 80033c4:	46bd      	mov	sp, r7
 80033c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ca:	4770      	bx	lr

080033cc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80033cc:	b480      	push	{r7}
 80033ce:	b085      	sub	sp, #20
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	691b      	ldr	r3, [r3, #16]
 80033d8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	687a      	ldr	r2, [r7, #4]
 80033e0:	6892      	ldr	r2, [r2, #8]
 80033e2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	687a      	ldr	r2, [r7, #4]
 80033ea:	6852      	ldr	r2, [r2, #4]
 80033ec:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	687a      	ldr	r2, [r7, #4]
 80033f4:	429a      	cmp	r2, r3
 80033f6:	d103      	bne.n	8003400 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	689a      	ldr	r2, [r3, #8]
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2200      	movs	r2, #0
 8003404:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	1e5a      	subs	r2, r3, #1
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
}
 8003414:	4618      	mov	r0, r3
 8003416:	3714      	adds	r7, #20
 8003418:	46bd      	mov	sp, r7
 800341a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341e:	4770      	bx	lr

08003420 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b084      	sub	sp, #16
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
 8003428:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d10a      	bne.n	800344a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003434:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003438:	f383 8811 	msr	BASEPRI, r3
 800343c:	f3bf 8f6f 	isb	sy
 8003440:	f3bf 8f4f 	dsb	sy
 8003444:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003446:	bf00      	nop
 8003448:	e7fe      	b.n	8003448 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800344a:	f002 f84b 	bl	80054e4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681a      	ldr	r2, [r3, #0]
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003456:	68f9      	ldr	r1, [r7, #12]
 8003458:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800345a:	fb01 f303 	mul.w	r3, r1, r3
 800345e:	441a      	add	r2, r3
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	2200      	movs	r2, #0
 8003468:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681a      	ldr	r2, [r3, #0]
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681a      	ldr	r2, [r3, #0]
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800347a:	3b01      	subs	r3, #1
 800347c:	68f9      	ldr	r1, [r7, #12]
 800347e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003480:	fb01 f303 	mul.w	r3, r1, r3
 8003484:	441a      	add	r2, r3
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	22ff      	movs	r2, #255	; 0xff
 800348e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	22ff      	movs	r2, #255	; 0xff
 8003496:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d114      	bne.n	80034ca <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	691b      	ldr	r3, [r3, #16]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d01a      	beq.n	80034de <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	3310      	adds	r3, #16
 80034ac:	4618      	mov	r0, r3
 80034ae:	f001 f903 	bl	80046b8 <xTaskRemoveFromEventList>
 80034b2:	4603      	mov	r3, r0
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d012      	beq.n	80034de <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80034b8:	4b0c      	ldr	r3, [pc, #48]	; (80034ec <xQueueGenericReset+0xcc>)
 80034ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034be:	601a      	str	r2, [r3, #0]
 80034c0:	f3bf 8f4f 	dsb	sy
 80034c4:	f3bf 8f6f 	isb	sy
 80034c8:	e009      	b.n	80034de <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	3310      	adds	r3, #16
 80034ce:	4618      	mov	r0, r3
 80034d0:	f7ff fef2 	bl	80032b8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	3324      	adds	r3, #36	; 0x24
 80034d8:	4618      	mov	r0, r3
 80034da:	f7ff feed 	bl	80032b8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80034de:	f002 f831 	bl	8005544 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80034e2:	2301      	movs	r3, #1
}
 80034e4:	4618      	mov	r0, r3
 80034e6:	3710      	adds	r7, #16
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}
 80034ec:	e000ed04 	.word	0xe000ed04

080034f0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b08e      	sub	sp, #56	; 0x38
 80034f4:	af02      	add	r7, sp, #8
 80034f6:	60f8      	str	r0, [r7, #12]
 80034f8:	60b9      	str	r1, [r7, #8]
 80034fa:	607a      	str	r2, [r7, #4]
 80034fc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d10a      	bne.n	800351a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003504:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003508:	f383 8811 	msr	BASEPRI, r3
 800350c:	f3bf 8f6f 	isb	sy
 8003510:	f3bf 8f4f 	dsb	sy
 8003514:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003516:	bf00      	nop
 8003518:	e7fe      	b.n	8003518 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d10a      	bne.n	8003536 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003520:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003524:	f383 8811 	msr	BASEPRI, r3
 8003528:	f3bf 8f6f 	isb	sy
 800352c:	f3bf 8f4f 	dsb	sy
 8003530:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003532:	bf00      	nop
 8003534:	e7fe      	b.n	8003534 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d002      	beq.n	8003542 <xQueueGenericCreateStatic+0x52>
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d001      	beq.n	8003546 <xQueueGenericCreateStatic+0x56>
 8003542:	2301      	movs	r3, #1
 8003544:	e000      	b.n	8003548 <xQueueGenericCreateStatic+0x58>
 8003546:	2300      	movs	r3, #0
 8003548:	2b00      	cmp	r3, #0
 800354a:	d10a      	bne.n	8003562 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800354c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003550:	f383 8811 	msr	BASEPRI, r3
 8003554:	f3bf 8f6f 	isb	sy
 8003558:	f3bf 8f4f 	dsb	sy
 800355c:	623b      	str	r3, [r7, #32]
}
 800355e:	bf00      	nop
 8003560:	e7fe      	b.n	8003560 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d102      	bne.n	800356e <xQueueGenericCreateStatic+0x7e>
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d101      	bne.n	8003572 <xQueueGenericCreateStatic+0x82>
 800356e:	2301      	movs	r3, #1
 8003570:	e000      	b.n	8003574 <xQueueGenericCreateStatic+0x84>
 8003572:	2300      	movs	r3, #0
 8003574:	2b00      	cmp	r3, #0
 8003576:	d10a      	bne.n	800358e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800357c:	f383 8811 	msr	BASEPRI, r3
 8003580:	f3bf 8f6f 	isb	sy
 8003584:	f3bf 8f4f 	dsb	sy
 8003588:	61fb      	str	r3, [r7, #28]
}
 800358a:	bf00      	nop
 800358c:	e7fe      	b.n	800358c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800358e:	2350      	movs	r3, #80	; 0x50
 8003590:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	2b50      	cmp	r3, #80	; 0x50
 8003596:	d00a      	beq.n	80035ae <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003598:	f04f 0350 	mov.w	r3, #80	; 0x50
 800359c:	f383 8811 	msr	BASEPRI, r3
 80035a0:	f3bf 8f6f 	isb	sy
 80035a4:	f3bf 8f4f 	dsb	sy
 80035a8:	61bb      	str	r3, [r7, #24]
}
 80035aa:	bf00      	nop
 80035ac:	e7fe      	b.n	80035ac <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80035ae:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80035b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d00d      	beq.n	80035d6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80035ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035bc:	2201      	movs	r2, #1
 80035be:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80035c2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80035c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035c8:	9300      	str	r3, [sp, #0]
 80035ca:	4613      	mov	r3, r2
 80035cc:	687a      	ldr	r2, [r7, #4]
 80035ce:	68b9      	ldr	r1, [r7, #8]
 80035d0:	68f8      	ldr	r0, [r7, #12]
 80035d2:	f000 f805 	bl	80035e0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80035d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80035d8:	4618      	mov	r0, r3
 80035da:	3730      	adds	r7, #48	; 0x30
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd80      	pop	{r7, pc}

080035e0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b084      	sub	sp, #16
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	60f8      	str	r0, [r7, #12]
 80035e8:	60b9      	str	r1, [r7, #8]
 80035ea:	607a      	str	r2, [r7, #4]
 80035ec:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80035ee:	68bb      	ldr	r3, [r7, #8]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d103      	bne.n	80035fc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80035f4:	69bb      	ldr	r3, [r7, #24]
 80035f6:	69ba      	ldr	r2, [r7, #24]
 80035f8:	601a      	str	r2, [r3, #0]
 80035fa:	e002      	b.n	8003602 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80035fc:	69bb      	ldr	r3, [r7, #24]
 80035fe:	687a      	ldr	r2, [r7, #4]
 8003600:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003602:	69bb      	ldr	r3, [r7, #24]
 8003604:	68fa      	ldr	r2, [r7, #12]
 8003606:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003608:	69bb      	ldr	r3, [r7, #24]
 800360a:	68ba      	ldr	r2, [r7, #8]
 800360c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800360e:	2101      	movs	r1, #1
 8003610:	69b8      	ldr	r0, [r7, #24]
 8003612:	f7ff ff05 	bl	8003420 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003616:	69bb      	ldr	r3, [r7, #24]
 8003618:	78fa      	ldrb	r2, [r7, #3]
 800361a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800361e:	bf00      	nop
 8003620:	3710      	adds	r7, #16
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}
	...

08003628 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b08e      	sub	sp, #56	; 0x38
 800362c:	af00      	add	r7, sp, #0
 800362e:	60f8      	str	r0, [r7, #12]
 8003630:	60b9      	str	r1, [r7, #8]
 8003632:	607a      	str	r2, [r7, #4]
 8003634:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003636:	2300      	movs	r3, #0
 8003638:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800363e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003640:	2b00      	cmp	r3, #0
 8003642:	d10a      	bne.n	800365a <xQueueGenericSend+0x32>
	__asm volatile
 8003644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003648:	f383 8811 	msr	BASEPRI, r3
 800364c:	f3bf 8f6f 	isb	sy
 8003650:	f3bf 8f4f 	dsb	sy
 8003654:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003656:	bf00      	nop
 8003658:	e7fe      	b.n	8003658 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d103      	bne.n	8003668 <xQueueGenericSend+0x40>
 8003660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003664:	2b00      	cmp	r3, #0
 8003666:	d101      	bne.n	800366c <xQueueGenericSend+0x44>
 8003668:	2301      	movs	r3, #1
 800366a:	e000      	b.n	800366e <xQueueGenericSend+0x46>
 800366c:	2300      	movs	r3, #0
 800366e:	2b00      	cmp	r3, #0
 8003670:	d10a      	bne.n	8003688 <xQueueGenericSend+0x60>
	__asm volatile
 8003672:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003676:	f383 8811 	msr	BASEPRI, r3
 800367a:	f3bf 8f6f 	isb	sy
 800367e:	f3bf 8f4f 	dsb	sy
 8003682:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003684:	bf00      	nop
 8003686:	e7fe      	b.n	8003686 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	2b02      	cmp	r3, #2
 800368c:	d103      	bne.n	8003696 <xQueueGenericSend+0x6e>
 800368e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003690:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003692:	2b01      	cmp	r3, #1
 8003694:	d101      	bne.n	800369a <xQueueGenericSend+0x72>
 8003696:	2301      	movs	r3, #1
 8003698:	e000      	b.n	800369c <xQueueGenericSend+0x74>
 800369a:	2300      	movs	r3, #0
 800369c:	2b00      	cmp	r3, #0
 800369e:	d10a      	bne.n	80036b6 <xQueueGenericSend+0x8e>
	__asm volatile
 80036a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036a4:	f383 8811 	msr	BASEPRI, r3
 80036a8:	f3bf 8f6f 	isb	sy
 80036ac:	f3bf 8f4f 	dsb	sy
 80036b0:	623b      	str	r3, [r7, #32]
}
 80036b2:	bf00      	nop
 80036b4:	e7fe      	b.n	80036b4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80036b6:	f001 f9bd 	bl	8004a34 <xTaskGetSchedulerState>
 80036ba:	4603      	mov	r3, r0
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d102      	bne.n	80036c6 <xQueueGenericSend+0x9e>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d101      	bne.n	80036ca <xQueueGenericSend+0xa2>
 80036c6:	2301      	movs	r3, #1
 80036c8:	e000      	b.n	80036cc <xQueueGenericSend+0xa4>
 80036ca:	2300      	movs	r3, #0
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d10a      	bne.n	80036e6 <xQueueGenericSend+0xbe>
	__asm volatile
 80036d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036d4:	f383 8811 	msr	BASEPRI, r3
 80036d8:	f3bf 8f6f 	isb	sy
 80036dc:	f3bf 8f4f 	dsb	sy
 80036e0:	61fb      	str	r3, [r7, #28]
}
 80036e2:	bf00      	nop
 80036e4:	e7fe      	b.n	80036e4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80036e6:	f001 fefd 	bl	80054e4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80036ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80036ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036f2:	429a      	cmp	r2, r3
 80036f4:	d302      	bcc.n	80036fc <xQueueGenericSend+0xd4>
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	2b02      	cmp	r3, #2
 80036fa:	d129      	bne.n	8003750 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80036fc:	683a      	ldr	r2, [r7, #0]
 80036fe:	68b9      	ldr	r1, [r7, #8]
 8003700:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003702:	f000 fa0b 	bl	8003b1c <prvCopyDataToQueue>
 8003706:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800370a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800370c:	2b00      	cmp	r3, #0
 800370e:	d010      	beq.n	8003732 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003712:	3324      	adds	r3, #36	; 0x24
 8003714:	4618      	mov	r0, r3
 8003716:	f000 ffcf 	bl	80046b8 <xTaskRemoveFromEventList>
 800371a:	4603      	mov	r3, r0
 800371c:	2b00      	cmp	r3, #0
 800371e:	d013      	beq.n	8003748 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003720:	4b3f      	ldr	r3, [pc, #252]	; (8003820 <xQueueGenericSend+0x1f8>)
 8003722:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003726:	601a      	str	r2, [r3, #0]
 8003728:	f3bf 8f4f 	dsb	sy
 800372c:	f3bf 8f6f 	isb	sy
 8003730:	e00a      	b.n	8003748 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003734:	2b00      	cmp	r3, #0
 8003736:	d007      	beq.n	8003748 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003738:	4b39      	ldr	r3, [pc, #228]	; (8003820 <xQueueGenericSend+0x1f8>)
 800373a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800373e:	601a      	str	r2, [r3, #0]
 8003740:	f3bf 8f4f 	dsb	sy
 8003744:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003748:	f001 fefc 	bl	8005544 <vPortExitCritical>
				return pdPASS;
 800374c:	2301      	movs	r3, #1
 800374e:	e063      	b.n	8003818 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d103      	bne.n	800375e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003756:	f001 fef5 	bl	8005544 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800375a:	2300      	movs	r3, #0
 800375c:	e05c      	b.n	8003818 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800375e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003760:	2b00      	cmp	r3, #0
 8003762:	d106      	bne.n	8003772 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003764:	f107 0314 	add.w	r3, r7, #20
 8003768:	4618      	mov	r0, r3
 800376a:	f001 f809 	bl	8004780 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800376e:	2301      	movs	r3, #1
 8003770:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003772:	f001 fee7 	bl	8005544 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003776:	f000 fd7b 	bl	8004270 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800377a:	f001 feb3 	bl	80054e4 <vPortEnterCritical>
 800377e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003780:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003784:	b25b      	sxtb	r3, r3
 8003786:	f1b3 3fff 	cmp.w	r3, #4294967295
 800378a:	d103      	bne.n	8003794 <xQueueGenericSend+0x16c>
 800378c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800378e:	2200      	movs	r2, #0
 8003790:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003796:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800379a:	b25b      	sxtb	r3, r3
 800379c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037a0:	d103      	bne.n	80037aa <xQueueGenericSend+0x182>
 80037a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037a4:	2200      	movs	r2, #0
 80037a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80037aa:	f001 fecb 	bl	8005544 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80037ae:	1d3a      	adds	r2, r7, #4
 80037b0:	f107 0314 	add.w	r3, r7, #20
 80037b4:	4611      	mov	r1, r2
 80037b6:	4618      	mov	r0, r3
 80037b8:	f000 fff8 	bl	80047ac <xTaskCheckForTimeOut>
 80037bc:	4603      	mov	r3, r0
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d124      	bne.n	800380c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80037c2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80037c4:	f000 faa2 	bl	8003d0c <prvIsQueueFull>
 80037c8:	4603      	mov	r3, r0
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d018      	beq.n	8003800 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80037ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037d0:	3310      	adds	r3, #16
 80037d2:	687a      	ldr	r2, [r7, #4]
 80037d4:	4611      	mov	r1, r2
 80037d6:	4618      	mov	r0, r3
 80037d8:	f000 ff1e 	bl	8004618 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80037dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80037de:	f000 fa2d 	bl	8003c3c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80037e2:	f000 fd53 	bl	800428c <xTaskResumeAll>
 80037e6:	4603      	mov	r3, r0
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	f47f af7c 	bne.w	80036e6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80037ee:	4b0c      	ldr	r3, [pc, #48]	; (8003820 <xQueueGenericSend+0x1f8>)
 80037f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037f4:	601a      	str	r2, [r3, #0]
 80037f6:	f3bf 8f4f 	dsb	sy
 80037fa:	f3bf 8f6f 	isb	sy
 80037fe:	e772      	b.n	80036e6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003800:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003802:	f000 fa1b 	bl	8003c3c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003806:	f000 fd41 	bl	800428c <xTaskResumeAll>
 800380a:	e76c      	b.n	80036e6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800380c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800380e:	f000 fa15 	bl	8003c3c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003812:	f000 fd3b 	bl	800428c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003816:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003818:	4618      	mov	r0, r3
 800381a:	3738      	adds	r7, #56	; 0x38
 800381c:	46bd      	mov	sp, r7
 800381e:	bd80      	pop	{r7, pc}
 8003820:	e000ed04 	.word	0xe000ed04

08003824 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b090      	sub	sp, #64	; 0x40
 8003828:	af00      	add	r7, sp, #0
 800382a:	60f8      	str	r0, [r7, #12]
 800382c:	60b9      	str	r1, [r7, #8]
 800382e:	607a      	str	r2, [r7, #4]
 8003830:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8003836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003838:	2b00      	cmp	r3, #0
 800383a:	d10a      	bne.n	8003852 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800383c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003840:	f383 8811 	msr	BASEPRI, r3
 8003844:	f3bf 8f6f 	isb	sy
 8003848:	f3bf 8f4f 	dsb	sy
 800384c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800384e:	bf00      	nop
 8003850:	e7fe      	b.n	8003850 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d103      	bne.n	8003860 <xQueueGenericSendFromISR+0x3c>
 8003858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800385a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800385c:	2b00      	cmp	r3, #0
 800385e:	d101      	bne.n	8003864 <xQueueGenericSendFromISR+0x40>
 8003860:	2301      	movs	r3, #1
 8003862:	e000      	b.n	8003866 <xQueueGenericSendFromISR+0x42>
 8003864:	2300      	movs	r3, #0
 8003866:	2b00      	cmp	r3, #0
 8003868:	d10a      	bne.n	8003880 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800386a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800386e:	f383 8811 	msr	BASEPRI, r3
 8003872:	f3bf 8f6f 	isb	sy
 8003876:	f3bf 8f4f 	dsb	sy
 800387a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800387c:	bf00      	nop
 800387e:	e7fe      	b.n	800387e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	2b02      	cmp	r3, #2
 8003884:	d103      	bne.n	800388e <xQueueGenericSendFromISR+0x6a>
 8003886:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003888:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800388a:	2b01      	cmp	r3, #1
 800388c:	d101      	bne.n	8003892 <xQueueGenericSendFromISR+0x6e>
 800388e:	2301      	movs	r3, #1
 8003890:	e000      	b.n	8003894 <xQueueGenericSendFromISR+0x70>
 8003892:	2300      	movs	r3, #0
 8003894:	2b00      	cmp	r3, #0
 8003896:	d10a      	bne.n	80038ae <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800389c:	f383 8811 	msr	BASEPRI, r3
 80038a0:	f3bf 8f6f 	isb	sy
 80038a4:	f3bf 8f4f 	dsb	sy
 80038a8:	623b      	str	r3, [r7, #32]
}
 80038aa:	bf00      	nop
 80038ac:	e7fe      	b.n	80038ac <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80038ae:	f001 fefb 	bl	80056a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80038b2:	f3ef 8211 	mrs	r2, BASEPRI
 80038b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038ba:	f383 8811 	msr	BASEPRI, r3
 80038be:	f3bf 8f6f 	isb	sy
 80038c2:	f3bf 8f4f 	dsb	sy
 80038c6:	61fa      	str	r2, [r7, #28]
 80038c8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80038ca:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80038cc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80038ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038d6:	429a      	cmp	r2, r3
 80038d8:	d302      	bcc.n	80038e0 <xQueueGenericSendFromISR+0xbc>
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	2b02      	cmp	r3, #2
 80038de:	d12f      	bne.n	8003940 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80038e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038e2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80038e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80038ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ee:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80038f0:	683a      	ldr	r2, [r7, #0]
 80038f2:	68b9      	ldr	r1, [r7, #8]
 80038f4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80038f6:	f000 f911 	bl	8003b1c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80038fa:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80038fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003902:	d112      	bne.n	800392a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003908:	2b00      	cmp	r3, #0
 800390a:	d016      	beq.n	800393a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800390c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800390e:	3324      	adds	r3, #36	; 0x24
 8003910:	4618      	mov	r0, r3
 8003912:	f000 fed1 	bl	80046b8 <xTaskRemoveFromEventList>
 8003916:	4603      	mov	r3, r0
 8003918:	2b00      	cmp	r3, #0
 800391a:	d00e      	beq.n	800393a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d00b      	beq.n	800393a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2201      	movs	r2, #1
 8003926:	601a      	str	r2, [r3, #0]
 8003928:	e007      	b.n	800393a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800392a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800392e:	3301      	adds	r3, #1
 8003930:	b2db      	uxtb	r3, r3
 8003932:	b25a      	sxtb	r2, r3
 8003934:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003936:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800393a:	2301      	movs	r3, #1
 800393c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800393e:	e001      	b.n	8003944 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003940:	2300      	movs	r3, #0
 8003942:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003944:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003946:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800394e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003950:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003952:	4618      	mov	r0, r3
 8003954:	3740      	adds	r7, #64	; 0x40
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}
	...

0800395c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b08c      	sub	sp, #48	; 0x30
 8003960:	af00      	add	r7, sp, #0
 8003962:	60f8      	str	r0, [r7, #12]
 8003964:	60b9      	str	r1, [r7, #8]
 8003966:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003968:	2300      	movs	r3, #0
 800396a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003972:	2b00      	cmp	r3, #0
 8003974:	d10a      	bne.n	800398c <xQueueReceive+0x30>
	__asm volatile
 8003976:	f04f 0350 	mov.w	r3, #80	; 0x50
 800397a:	f383 8811 	msr	BASEPRI, r3
 800397e:	f3bf 8f6f 	isb	sy
 8003982:	f3bf 8f4f 	dsb	sy
 8003986:	623b      	str	r3, [r7, #32]
}
 8003988:	bf00      	nop
 800398a:	e7fe      	b.n	800398a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d103      	bne.n	800399a <xQueueReceive+0x3e>
 8003992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003996:	2b00      	cmp	r3, #0
 8003998:	d101      	bne.n	800399e <xQueueReceive+0x42>
 800399a:	2301      	movs	r3, #1
 800399c:	e000      	b.n	80039a0 <xQueueReceive+0x44>
 800399e:	2300      	movs	r3, #0
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d10a      	bne.n	80039ba <xQueueReceive+0x5e>
	__asm volatile
 80039a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039a8:	f383 8811 	msr	BASEPRI, r3
 80039ac:	f3bf 8f6f 	isb	sy
 80039b0:	f3bf 8f4f 	dsb	sy
 80039b4:	61fb      	str	r3, [r7, #28]
}
 80039b6:	bf00      	nop
 80039b8:	e7fe      	b.n	80039b8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80039ba:	f001 f83b 	bl	8004a34 <xTaskGetSchedulerState>
 80039be:	4603      	mov	r3, r0
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d102      	bne.n	80039ca <xQueueReceive+0x6e>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d101      	bne.n	80039ce <xQueueReceive+0x72>
 80039ca:	2301      	movs	r3, #1
 80039cc:	e000      	b.n	80039d0 <xQueueReceive+0x74>
 80039ce:	2300      	movs	r3, #0
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d10a      	bne.n	80039ea <xQueueReceive+0x8e>
	__asm volatile
 80039d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039d8:	f383 8811 	msr	BASEPRI, r3
 80039dc:	f3bf 8f6f 	isb	sy
 80039e0:	f3bf 8f4f 	dsb	sy
 80039e4:	61bb      	str	r3, [r7, #24]
}
 80039e6:	bf00      	nop
 80039e8:	e7fe      	b.n	80039e8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80039ea:	f001 fd7b 	bl	80054e4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80039ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039f2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80039f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d01f      	beq.n	8003a3a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80039fa:	68b9      	ldr	r1, [r7, #8]
 80039fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80039fe:	f000 f8f7 	bl	8003bf0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a04:	1e5a      	subs	r2, r3, #1
 8003a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a08:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a0c:	691b      	ldr	r3, [r3, #16]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d00f      	beq.n	8003a32 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a14:	3310      	adds	r3, #16
 8003a16:	4618      	mov	r0, r3
 8003a18:	f000 fe4e 	bl	80046b8 <xTaskRemoveFromEventList>
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d007      	beq.n	8003a32 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003a22:	4b3d      	ldr	r3, [pc, #244]	; (8003b18 <xQueueReceive+0x1bc>)
 8003a24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a28:	601a      	str	r2, [r3, #0]
 8003a2a:	f3bf 8f4f 	dsb	sy
 8003a2e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003a32:	f001 fd87 	bl	8005544 <vPortExitCritical>
				return pdPASS;
 8003a36:	2301      	movs	r3, #1
 8003a38:	e069      	b.n	8003b0e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d103      	bne.n	8003a48 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003a40:	f001 fd80 	bl	8005544 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003a44:	2300      	movs	r3, #0
 8003a46:	e062      	b.n	8003b0e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d106      	bne.n	8003a5c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003a4e:	f107 0310 	add.w	r3, r7, #16
 8003a52:	4618      	mov	r0, r3
 8003a54:	f000 fe94 	bl	8004780 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003a5c:	f001 fd72 	bl	8005544 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003a60:	f000 fc06 	bl	8004270 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003a64:	f001 fd3e 	bl	80054e4 <vPortEnterCritical>
 8003a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a6a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003a6e:	b25b      	sxtb	r3, r3
 8003a70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a74:	d103      	bne.n	8003a7e <xQueueReceive+0x122>
 8003a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a78:	2200      	movs	r2, #0
 8003a7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a80:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003a84:	b25b      	sxtb	r3, r3
 8003a86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a8a:	d103      	bne.n	8003a94 <xQueueReceive+0x138>
 8003a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a8e:	2200      	movs	r2, #0
 8003a90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003a94:	f001 fd56 	bl	8005544 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003a98:	1d3a      	adds	r2, r7, #4
 8003a9a:	f107 0310 	add.w	r3, r7, #16
 8003a9e:	4611      	mov	r1, r2
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	f000 fe83 	bl	80047ac <xTaskCheckForTimeOut>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d123      	bne.n	8003af4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003aac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003aae:	f000 f917 	bl	8003ce0 <prvIsQueueEmpty>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d017      	beq.n	8003ae8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aba:	3324      	adds	r3, #36	; 0x24
 8003abc:	687a      	ldr	r2, [r7, #4]
 8003abe:	4611      	mov	r1, r2
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	f000 fda9 	bl	8004618 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003ac6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003ac8:	f000 f8b8 	bl	8003c3c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003acc:	f000 fbde 	bl	800428c <xTaskResumeAll>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d189      	bne.n	80039ea <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003ad6:	4b10      	ldr	r3, [pc, #64]	; (8003b18 <xQueueReceive+0x1bc>)
 8003ad8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003adc:	601a      	str	r2, [r3, #0]
 8003ade:	f3bf 8f4f 	dsb	sy
 8003ae2:	f3bf 8f6f 	isb	sy
 8003ae6:	e780      	b.n	80039ea <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003ae8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003aea:	f000 f8a7 	bl	8003c3c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003aee:	f000 fbcd 	bl	800428c <xTaskResumeAll>
 8003af2:	e77a      	b.n	80039ea <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003af4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003af6:	f000 f8a1 	bl	8003c3c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003afa:	f000 fbc7 	bl	800428c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003afe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b00:	f000 f8ee 	bl	8003ce0 <prvIsQueueEmpty>
 8003b04:	4603      	mov	r3, r0
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	f43f af6f 	beq.w	80039ea <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003b0c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	3730      	adds	r7, #48	; 0x30
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}
 8003b16:	bf00      	nop
 8003b18:	e000ed04 	.word	0xe000ed04

08003b1c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b086      	sub	sp, #24
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	60f8      	str	r0, [r7, #12]
 8003b24:	60b9      	str	r1, [r7, #8]
 8003b26:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b30:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d10d      	bne.n	8003b56 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d14d      	bne.n	8003bde <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	4618      	mov	r0, r3
 8003b48:	f000 ff92 	bl	8004a70 <xTaskPriorityDisinherit>
 8003b4c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	2200      	movs	r2, #0
 8003b52:	609a      	str	r2, [r3, #8]
 8003b54:	e043      	b.n	8003bde <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d119      	bne.n	8003b90 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	6858      	ldr	r0, [r3, #4]
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b64:	461a      	mov	r2, r3
 8003b66:	68b9      	ldr	r1, [r7, #8]
 8003b68:	f001 fff4 	bl	8005b54 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	685a      	ldr	r2, [r3, #4]
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b74:	441a      	add	r2, r3
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	685a      	ldr	r2, [r3, #4]
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	689b      	ldr	r3, [r3, #8]
 8003b82:	429a      	cmp	r2, r3
 8003b84:	d32b      	bcc.n	8003bde <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681a      	ldr	r2, [r3, #0]
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	605a      	str	r2, [r3, #4]
 8003b8e:	e026      	b.n	8003bde <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	68d8      	ldr	r0, [r3, #12]
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b98:	461a      	mov	r2, r3
 8003b9a:	68b9      	ldr	r1, [r7, #8]
 8003b9c:	f001 ffda 	bl	8005b54 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	68da      	ldr	r2, [r3, #12]
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba8:	425b      	negs	r3, r3
 8003baa:	441a      	add	r2, r3
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	68da      	ldr	r2, [r3, #12]
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	429a      	cmp	r2, r3
 8003bba:	d207      	bcs.n	8003bcc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	689a      	ldr	r2, [r3, #8]
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc4:	425b      	negs	r3, r3
 8003bc6:	441a      	add	r2, r3
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2b02      	cmp	r3, #2
 8003bd0:	d105      	bne.n	8003bde <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d002      	beq.n	8003bde <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003bd8:	693b      	ldr	r3, [r7, #16]
 8003bda:	3b01      	subs	r3, #1
 8003bdc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	1c5a      	adds	r2, r3, #1
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003be6:	697b      	ldr	r3, [r7, #20]
}
 8003be8:	4618      	mov	r0, r3
 8003bea:	3718      	adds	r7, #24
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bd80      	pop	{r7, pc}

08003bf0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b082      	sub	sp, #8
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
 8003bf8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d018      	beq.n	8003c34 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	68da      	ldr	r2, [r3, #12]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c0a:	441a      	add	r2, r3
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	68da      	ldr	r2, [r3, #12]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	689b      	ldr	r3, [r3, #8]
 8003c18:	429a      	cmp	r2, r3
 8003c1a:	d303      	bcc.n	8003c24 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681a      	ldr	r2, [r3, #0]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	68d9      	ldr	r1, [r3, #12]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c2c:	461a      	mov	r2, r3
 8003c2e:	6838      	ldr	r0, [r7, #0]
 8003c30:	f001 ff90 	bl	8005b54 <memcpy>
	}
}
 8003c34:	bf00      	nop
 8003c36:	3708      	adds	r7, #8
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bd80      	pop	{r7, pc}

08003c3c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b084      	sub	sp, #16
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003c44:	f001 fc4e 	bl	80054e4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003c4e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003c50:	e011      	b.n	8003c76 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d012      	beq.n	8003c80 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	3324      	adds	r3, #36	; 0x24
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f000 fd2a 	bl	80046b8 <xTaskRemoveFromEventList>
 8003c64:	4603      	mov	r3, r0
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d001      	beq.n	8003c6e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003c6a:	f000 fe01 	bl	8004870 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003c6e:	7bfb      	ldrb	r3, [r7, #15]
 8003c70:	3b01      	subs	r3, #1
 8003c72:	b2db      	uxtb	r3, r3
 8003c74:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003c76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	dce9      	bgt.n	8003c52 <prvUnlockQueue+0x16>
 8003c7e:	e000      	b.n	8003c82 <prvUnlockQueue+0x46>
					break;
 8003c80:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	22ff      	movs	r2, #255	; 0xff
 8003c86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003c8a:	f001 fc5b 	bl	8005544 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003c8e:	f001 fc29 	bl	80054e4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003c98:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003c9a:	e011      	b.n	8003cc0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	691b      	ldr	r3, [r3, #16]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d012      	beq.n	8003cca <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	3310      	adds	r3, #16
 8003ca8:	4618      	mov	r0, r3
 8003caa:	f000 fd05 	bl	80046b8 <xTaskRemoveFromEventList>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d001      	beq.n	8003cb8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003cb4:	f000 fddc 	bl	8004870 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003cb8:	7bbb      	ldrb	r3, [r7, #14]
 8003cba:	3b01      	subs	r3, #1
 8003cbc:	b2db      	uxtb	r3, r3
 8003cbe:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003cc0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	dce9      	bgt.n	8003c9c <prvUnlockQueue+0x60>
 8003cc8:	e000      	b.n	8003ccc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003cca:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	22ff      	movs	r2, #255	; 0xff
 8003cd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003cd4:	f001 fc36 	bl	8005544 <vPortExitCritical>
}
 8003cd8:	bf00      	nop
 8003cda:	3710      	adds	r7, #16
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bd80      	pop	{r7, pc}

08003ce0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b084      	sub	sp, #16
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003ce8:	f001 fbfc 	bl	80054e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d102      	bne.n	8003cfa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	60fb      	str	r3, [r7, #12]
 8003cf8:	e001      	b.n	8003cfe <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003cfe:	f001 fc21 	bl	8005544 <vPortExitCritical>

	return xReturn;
 8003d02:	68fb      	ldr	r3, [r7, #12]
}
 8003d04:	4618      	mov	r0, r3
 8003d06:	3710      	adds	r7, #16
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bd80      	pop	{r7, pc}

08003d0c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b084      	sub	sp, #16
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003d14:	f001 fbe6 	bl	80054e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d20:	429a      	cmp	r2, r3
 8003d22:	d102      	bne.n	8003d2a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003d24:	2301      	movs	r3, #1
 8003d26:	60fb      	str	r3, [r7, #12]
 8003d28:	e001      	b.n	8003d2e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003d2e:	f001 fc09 	bl	8005544 <vPortExitCritical>

	return xReturn;
 8003d32:	68fb      	ldr	r3, [r7, #12]
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	3710      	adds	r7, #16
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}

08003d3c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b085      	sub	sp, #20
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
 8003d44:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003d46:	2300      	movs	r3, #0
 8003d48:	60fb      	str	r3, [r7, #12]
 8003d4a:	e014      	b.n	8003d76 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003d4c:	4a0f      	ldr	r2, [pc, #60]	; (8003d8c <vQueueAddToRegistry+0x50>)
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d10b      	bne.n	8003d70 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003d58:	490c      	ldr	r1, [pc, #48]	; (8003d8c <vQueueAddToRegistry+0x50>)
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	683a      	ldr	r2, [r7, #0]
 8003d5e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003d62:	4a0a      	ldr	r2, [pc, #40]	; (8003d8c <vQueueAddToRegistry+0x50>)
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	00db      	lsls	r3, r3, #3
 8003d68:	4413      	add	r3, r2
 8003d6a:	687a      	ldr	r2, [r7, #4]
 8003d6c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003d6e:	e006      	b.n	8003d7e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	3301      	adds	r3, #1
 8003d74:	60fb      	str	r3, [r7, #12]
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	2b07      	cmp	r3, #7
 8003d7a:	d9e7      	bls.n	8003d4c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003d7c:	bf00      	nop
 8003d7e:	bf00      	nop
 8003d80:	3714      	adds	r7, #20
 8003d82:	46bd      	mov	sp, r7
 8003d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d88:	4770      	bx	lr
 8003d8a:	bf00      	nop
 8003d8c:	200007a4 	.word	0x200007a4

08003d90 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b086      	sub	sp, #24
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	60f8      	str	r0, [r7, #12]
 8003d98:	60b9      	str	r1, [r7, #8]
 8003d9a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003da0:	f001 fba0 	bl	80054e4 <vPortEnterCritical>
 8003da4:	697b      	ldr	r3, [r7, #20]
 8003da6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003daa:	b25b      	sxtb	r3, r3
 8003dac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003db0:	d103      	bne.n	8003dba <vQueueWaitForMessageRestricted+0x2a>
 8003db2:	697b      	ldr	r3, [r7, #20]
 8003db4:	2200      	movs	r2, #0
 8003db6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003dc0:	b25b      	sxtb	r3, r3
 8003dc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dc6:	d103      	bne.n	8003dd0 <vQueueWaitForMessageRestricted+0x40>
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003dd0:	f001 fbb8 	bl	8005544 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003dd4:	697b      	ldr	r3, [r7, #20]
 8003dd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d106      	bne.n	8003dea <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	3324      	adds	r3, #36	; 0x24
 8003de0:	687a      	ldr	r2, [r7, #4]
 8003de2:	68b9      	ldr	r1, [r7, #8]
 8003de4:	4618      	mov	r0, r3
 8003de6:	f000 fc3b 	bl	8004660 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003dea:	6978      	ldr	r0, [r7, #20]
 8003dec:	f7ff ff26 	bl	8003c3c <prvUnlockQueue>
	}
 8003df0:	bf00      	nop
 8003df2:	3718      	adds	r7, #24
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bd80      	pop	{r7, pc}

08003df8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b08e      	sub	sp, #56	; 0x38
 8003dfc:	af04      	add	r7, sp, #16
 8003dfe:	60f8      	str	r0, [r7, #12]
 8003e00:	60b9      	str	r1, [r7, #8]
 8003e02:	607a      	str	r2, [r7, #4]
 8003e04:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003e06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d10a      	bne.n	8003e22 <xTaskCreateStatic+0x2a>
	__asm volatile
 8003e0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e10:	f383 8811 	msr	BASEPRI, r3
 8003e14:	f3bf 8f6f 	isb	sy
 8003e18:	f3bf 8f4f 	dsb	sy
 8003e1c:	623b      	str	r3, [r7, #32]
}
 8003e1e:	bf00      	nop
 8003e20:	e7fe      	b.n	8003e20 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003e22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d10a      	bne.n	8003e3e <xTaskCreateStatic+0x46>
	__asm volatile
 8003e28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e2c:	f383 8811 	msr	BASEPRI, r3
 8003e30:	f3bf 8f6f 	isb	sy
 8003e34:	f3bf 8f4f 	dsb	sy
 8003e38:	61fb      	str	r3, [r7, #28]
}
 8003e3a:	bf00      	nop
 8003e3c:	e7fe      	b.n	8003e3c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003e3e:	235c      	movs	r3, #92	; 0x5c
 8003e40:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	2b5c      	cmp	r3, #92	; 0x5c
 8003e46:	d00a      	beq.n	8003e5e <xTaskCreateStatic+0x66>
	__asm volatile
 8003e48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e4c:	f383 8811 	msr	BASEPRI, r3
 8003e50:	f3bf 8f6f 	isb	sy
 8003e54:	f3bf 8f4f 	dsb	sy
 8003e58:	61bb      	str	r3, [r7, #24]
}
 8003e5a:	bf00      	nop
 8003e5c:	e7fe      	b.n	8003e5c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003e5e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003e60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d01e      	beq.n	8003ea4 <xTaskCreateStatic+0xac>
 8003e66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d01b      	beq.n	8003ea4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003e6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e6e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e72:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e74:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e78:	2202      	movs	r2, #2
 8003e7a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003e7e:	2300      	movs	r3, #0
 8003e80:	9303      	str	r3, [sp, #12]
 8003e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e84:	9302      	str	r3, [sp, #8]
 8003e86:	f107 0314 	add.w	r3, r7, #20
 8003e8a:	9301      	str	r3, [sp, #4]
 8003e8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e8e:	9300      	str	r3, [sp, #0]
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	687a      	ldr	r2, [r7, #4]
 8003e94:	68b9      	ldr	r1, [r7, #8]
 8003e96:	68f8      	ldr	r0, [r7, #12]
 8003e98:	f000 f850 	bl	8003f3c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003e9c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003e9e:	f000 f8dd 	bl	800405c <prvAddNewTaskToReadyList>
 8003ea2:	e001      	b.n	8003ea8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003ea8:	697b      	ldr	r3, [r7, #20]
	}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	3728      	adds	r7, #40	; 0x28
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}

08003eb2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003eb2:	b580      	push	{r7, lr}
 8003eb4:	b08c      	sub	sp, #48	; 0x30
 8003eb6:	af04      	add	r7, sp, #16
 8003eb8:	60f8      	str	r0, [r7, #12]
 8003eba:	60b9      	str	r1, [r7, #8]
 8003ebc:	603b      	str	r3, [r7, #0]
 8003ebe:	4613      	mov	r3, r2
 8003ec0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003ec2:	88fb      	ldrh	r3, [r7, #6]
 8003ec4:	009b      	lsls	r3, r3, #2
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f001 fc2e 	bl	8005728 <pvPortMalloc>
 8003ecc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003ece:	697b      	ldr	r3, [r7, #20]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d00e      	beq.n	8003ef2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003ed4:	205c      	movs	r0, #92	; 0x5c
 8003ed6:	f001 fc27 	bl	8005728 <pvPortMalloc>
 8003eda:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003edc:	69fb      	ldr	r3, [r7, #28]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d003      	beq.n	8003eea <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003ee2:	69fb      	ldr	r3, [r7, #28]
 8003ee4:	697a      	ldr	r2, [r7, #20]
 8003ee6:	631a      	str	r2, [r3, #48]	; 0x30
 8003ee8:	e005      	b.n	8003ef6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003eea:	6978      	ldr	r0, [r7, #20]
 8003eec:	f001 fce8 	bl	80058c0 <vPortFree>
 8003ef0:	e001      	b.n	8003ef6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003ef6:	69fb      	ldr	r3, [r7, #28]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d017      	beq.n	8003f2c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003efc:	69fb      	ldr	r3, [r7, #28]
 8003efe:	2200      	movs	r2, #0
 8003f00:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003f04:	88fa      	ldrh	r2, [r7, #6]
 8003f06:	2300      	movs	r3, #0
 8003f08:	9303      	str	r3, [sp, #12]
 8003f0a:	69fb      	ldr	r3, [r7, #28]
 8003f0c:	9302      	str	r3, [sp, #8]
 8003f0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f10:	9301      	str	r3, [sp, #4]
 8003f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f14:	9300      	str	r3, [sp, #0]
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	68b9      	ldr	r1, [r7, #8]
 8003f1a:	68f8      	ldr	r0, [r7, #12]
 8003f1c:	f000 f80e 	bl	8003f3c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003f20:	69f8      	ldr	r0, [r7, #28]
 8003f22:	f000 f89b 	bl	800405c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003f26:	2301      	movs	r3, #1
 8003f28:	61bb      	str	r3, [r7, #24]
 8003f2a:	e002      	b.n	8003f32 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003f2c:	f04f 33ff 	mov.w	r3, #4294967295
 8003f30:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003f32:	69bb      	ldr	r3, [r7, #24]
	}
 8003f34:	4618      	mov	r0, r3
 8003f36:	3720      	adds	r7, #32
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bd80      	pop	{r7, pc}

08003f3c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b088      	sub	sp, #32
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	60f8      	str	r0, [r7, #12]
 8003f44:	60b9      	str	r1, [r7, #8]
 8003f46:	607a      	str	r2, [r7, #4]
 8003f48:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f4c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	009b      	lsls	r3, r3, #2
 8003f52:	461a      	mov	r2, r3
 8003f54:	21a5      	movs	r1, #165	; 0xa5
 8003f56:	f001 fdd1 	bl	8005afc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003f64:	3b01      	subs	r3, #1
 8003f66:	009b      	lsls	r3, r3, #2
 8003f68:	4413      	add	r3, r2
 8003f6a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003f6c:	69bb      	ldr	r3, [r7, #24]
 8003f6e:	f023 0307 	bic.w	r3, r3, #7
 8003f72:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003f74:	69bb      	ldr	r3, [r7, #24]
 8003f76:	f003 0307 	and.w	r3, r3, #7
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d00a      	beq.n	8003f94 <prvInitialiseNewTask+0x58>
	__asm volatile
 8003f7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f82:	f383 8811 	msr	BASEPRI, r3
 8003f86:	f3bf 8f6f 	isb	sy
 8003f8a:	f3bf 8f4f 	dsb	sy
 8003f8e:	617b      	str	r3, [r7, #20]
}
 8003f90:	bf00      	nop
 8003f92:	e7fe      	b.n	8003f92 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d01f      	beq.n	8003fda <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	61fb      	str	r3, [r7, #28]
 8003f9e:	e012      	b.n	8003fc6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003fa0:	68ba      	ldr	r2, [r7, #8]
 8003fa2:	69fb      	ldr	r3, [r7, #28]
 8003fa4:	4413      	add	r3, r2
 8003fa6:	7819      	ldrb	r1, [r3, #0]
 8003fa8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003faa:	69fb      	ldr	r3, [r7, #28]
 8003fac:	4413      	add	r3, r2
 8003fae:	3334      	adds	r3, #52	; 0x34
 8003fb0:	460a      	mov	r2, r1
 8003fb2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003fb4:	68ba      	ldr	r2, [r7, #8]
 8003fb6:	69fb      	ldr	r3, [r7, #28]
 8003fb8:	4413      	add	r3, r2
 8003fba:	781b      	ldrb	r3, [r3, #0]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d006      	beq.n	8003fce <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003fc0:	69fb      	ldr	r3, [r7, #28]
 8003fc2:	3301      	adds	r3, #1
 8003fc4:	61fb      	str	r3, [r7, #28]
 8003fc6:	69fb      	ldr	r3, [r7, #28]
 8003fc8:	2b0f      	cmp	r3, #15
 8003fca:	d9e9      	bls.n	8003fa0 <prvInitialiseNewTask+0x64>
 8003fcc:	e000      	b.n	8003fd0 <prvInitialiseNewTask+0x94>
			{
				break;
 8003fce:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003fd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003fd8:	e003      	b.n	8003fe2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fdc:	2200      	movs	r2, #0
 8003fde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003fe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fe4:	2b37      	cmp	r3, #55	; 0x37
 8003fe6:	d901      	bls.n	8003fec <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003fe8:	2337      	movs	r3, #55	; 0x37
 8003fea:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003fec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ff0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ff4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ff6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004000:	3304      	adds	r3, #4
 8004002:	4618      	mov	r0, r3
 8004004:	f7ff f978 	bl	80032f8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800400a:	3318      	adds	r3, #24
 800400c:	4618      	mov	r0, r3
 800400e:	f7ff f973 	bl	80032f8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004014:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004016:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800401a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800401e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004020:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004024:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004026:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800402a:	2200      	movs	r2, #0
 800402c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800402e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004030:	2200      	movs	r2, #0
 8004032:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004036:	683a      	ldr	r2, [r7, #0]
 8004038:	68f9      	ldr	r1, [r7, #12]
 800403a:	69b8      	ldr	r0, [r7, #24]
 800403c:	f001 f928 	bl	8005290 <pxPortInitialiseStack>
 8004040:	4602      	mov	r2, r0
 8004042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004044:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004048:	2b00      	cmp	r3, #0
 800404a:	d002      	beq.n	8004052 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800404c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800404e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004050:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004052:	bf00      	nop
 8004054:	3720      	adds	r7, #32
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}
	...

0800405c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b082      	sub	sp, #8
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004064:	f001 fa3e 	bl	80054e4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004068:	4b2d      	ldr	r3, [pc, #180]	; (8004120 <prvAddNewTaskToReadyList+0xc4>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	3301      	adds	r3, #1
 800406e:	4a2c      	ldr	r2, [pc, #176]	; (8004120 <prvAddNewTaskToReadyList+0xc4>)
 8004070:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004072:	4b2c      	ldr	r3, [pc, #176]	; (8004124 <prvAddNewTaskToReadyList+0xc8>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d109      	bne.n	800408e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800407a:	4a2a      	ldr	r2, [pc, #168]	; (8004124 <prvAddNewTaskToReadyList+0xc8>)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004080:	4b27      	ldr	r3, [pc, #156]	; (8004120 <prvAddNewTaskToReadyList+0xc4>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	2b01      	cmp	r3, #1
 8004086:	d110      	bne.n	80040aa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004088:	f000 fc16 	bl	80048b8 <prvInitialiseTaskLists>
 800408c:	e00d      	b.n	80040aa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800408e:	4b26      	ldr	r3, [pc, #152]	; (8004128 <prvAddNewTaskToReadyList+0xcc>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d109      	bne.n	80040aa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004096:	4b23      	ldr	r3, [pc, #140]	; (8004124 <prvAddNewTaskToReadyList+0xc8>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040a0:	429a      	cmp	r2, r3
 80040a2:	d802      	bhi.n	80040aa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80040a4:	4a1f      	ldr	r2, [pc, #124]	; (8004124 <prvAddNewTaskToReadyList+0xc8>)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80040aa:	4b20      	ldr	r3, [pc, #128]	; (800412c <prvAddNewTaskToReadyList+0xd0>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	3301      	adds	r3, #1
 80040b0:	4a1e      	ldr	r2, [pc, #120]	; (800412c <prvAddNewTaskToReadyList+0xd0>)
 80040b2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80040b4:	4b1d      	ldr	r3, [pc, #116]	; (800412c <prvAddNewTaskToReadyList+0xd0>)
 80040b6:	681a      	ldr	r2, [r3, #0]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040c0:	4b1b      	ldr	r3, [pc, #108]	; (8004130 <prvAddNewTaskToReadyList+0xd4>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	429a      	cmp	r2, r3
 80040c6:	d903      	bls.n	80040d0 <prvAddNewTaskToReadyList+0x74>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040cc:	4a18      	ldr	r2, [pc, #96]	; (8004130 <prvAddNewTaskToReadyList+0xd4>)
 80040ce:	6013      	str	r3, [r2, #0]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040d4:	4613      	mov	r3, r2
 80040d6:	009b      	lsls	r3, r3, #2
 80040d8:	4413      	add	r3, r2
 80040da:	009b      	lsls	r3, r3, #2
 80040dc:	4a15      	ldr	r2, [pc, #84]	; (8004134 <prvAddNewTaskToReadyList+0xd8>)
 80040de:	441a      	add	r2, r3
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	3304      	adds	r3, #4
 80040e4:	4619      	mov	r1, r3
 80040e6:	4610      	mov	r0, r2
 80040e8:	f7ff f913 	bl	8003312 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80040ec:	f001 fa2a 	bl	8005544 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80040f0:	4b0d      	ldr	r3, [pc, #52]	; (8004128 <prvAddNewTaskToReadyList+0xcc>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d00e      	beq.n	8004116 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80040f8:	4b0a      	ldr	r3, [pc, #40]	; (8004124 <prvAddNewTaskToReadyList+0xc8>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004102:	429a      	cmp	r2, r3
 8004104:	d207      	bcs.n	8004116 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004106:	4b0c      	ldr	r3, [pc, #48]	; (8004138 <prvAddNewTaskToReadyList+0xdc>)
 8004108:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800410c:	601a      	str	r2, [r3, #0]
 800410e:	f3bf 8f4f 	dsb	sy
 8004112:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004116:	bf00      	nop
 8004118:	3708      	adds	r7, #8
 800411a:	46bd      	mov	sp, r7
 800411c:	bd80      	pop	{r7, pc}
 800411e:	bf00      	nop
 8004120:	20000cb8 	.word	0x20000cb8
 8004124:	200007e4 	.word	0x200007e4
 8004128:	20000cc4 	.word	0x20000cc4
 800412c:	20000cd4 	.word	0x20000cd4
 8004130:	20000cc0 	.word	0x20000cc0
 8004134:	200007e8 	.word	0x200007e8
 8004138:	e000ed04 	.word	0xe000ed04

0800413c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800413c:	b580      	push	{r7, lr}
 800413e:	b084      	sub	sp, #16
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004144:	2300      	movs	r3, #0
 8004146:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d017      	beq.n	800417e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800414e:	4b13      	ldr	r3, [pc, #76]	; (800419c <vTaskDelay+0x60>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d00a      	beq.n	800416c <vTaskDelay+0x30>
	__asm volatile
 8004156:	f04f 0350 	mov.w	r3, #80	; 0x50
 800415a:	f383 8811 	msr	BASEPRI, r3
 800415e:	f3bf 8f6f 	isb	sy
 8004162:	f3bf 8f4f 	dsb	sy
 8004166:	60bb      	str	r3, [r7, #8]
}
 8004168:	bf00      	nop
 800416a:	e7fe      	b.n	800416a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800416c:	f000 f880 	bl	8004270 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004170:	2100      	movs	r1, #0
 8004172:	6878      	ldr	r0, [r7, #4]
 8004174:	f000 fcea 	bl	8004b4c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004178:	f000 f888 	bl	800428c <xTaskResumeAll>
 800417c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d107      	bne.n	8004194 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004184:	4b06      	ldr	r3, [pc, #24]	; (80041a0 <vTaskDelay+0x64>)
 8004186:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800418a:	601a      	str	r2, [r3, #0]
 800418c:	f3bf 8f4f 	dsb	sy
 8004190:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004194:	bf00      	nop
 8004196:	3710      	adds	r7, #16
 8004198:	46bd      	mov	sp, r7
 800419a:	bd80      	pop	{r7, pc}
 800419c:	20000ce0 	.word	0x20000ce0
 80041a0:	e000ed04 	.word	0xe000ed04

080041a4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b08a      	sub	sp, #40	; 0x28
 80041a8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80041aa:	2300      	movs	r3, #0
 80041ac:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80041ae:	2300      	movs	r3, #0
 80041b0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80041b2:	463a      	mov	r2, r7
 80041b4:	1d39      	adds	r1, r7, #4
 80041b6:	f107 0308 	add.w	r3, r7, #8
 80041ba:	4618      	mov	r0, r3
 80041bc:	f7ff f848 	bl	8003250 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80041c0:	6839      	ldr	r1, [r7, #0]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	68ba      	ldr	r2, [r7, #8]
 80041c6:	9202      	str	r2, [sp, #8]
 80041c8:	9301      	str	r3, [sp, #4]
 80041ca:	2300      	movs	r3, #0
 80041cc:	9300      	str	r3, [sp, #0]
 80041ce:	2300      	movs	r3, #0
 80041d0:	460a      	mov	r2, r1
 80041d2:	4921      	ldr	r1, [pc, #132]	; (8004258 <vTaskStartScheduler+0xb4>)
 80041d4:	4821      	ldr	r0, [pc, #132]	; (800425c <vTaskStartScheduler+0xb8>)
 80041d6:	f7ff fe0f 	bl	8003df8 <xTaskCreateStatic>
 80041da:	4603      	mov	r3, r0
 80041dc:	4a20      	ldr	r2, [pc, #128]	; (8004260 <vTaskStartScheduler+0xbc>)
 80041de:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80041e0:	4b1f      	ldr	r3, [pc, #124]	; (8004260 <vTaskStartScheduler+0xbc>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d002      	beq.n	80041ee <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80041e8:	2301      	movs	r3, #1
 80041ea:	617b      	str	r3, [r7, #20]
 80041ec:	e001      	b.n	80041f2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80041ee:	2300      	movs	r3, #0
 80041f0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80041f2:	697b      	ldr	r3, [r7, #20]
 80041f4:	2b01      	cmp	r3, #1
 80041f6:	d102      	bne.n	80041fe <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80041f8:	f000 fcfc 	bl	8004bf4 <xTimerCreateTimerTask>
 80041fc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	2b01      	cmp	r3, #1
 8004202:	d116      	bne.n	8004232 <vTaskStartScheduler+0x8e>
	__asm volatile
 8004204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004208:	f383 8811 	msr	BASEPRI, r3
 800420c:	f3bf 8f6f 	isb	sy
 8004210:	f3bf 8f4f 	dsb	sy
 8004214:	613b      	str	r3, [r7, #16]
}
 8004216:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004218:	4b12      	ldr	r3, [pc, #72]	; (8004264 <vTaskStartScheduler+0xc0>)
 800421a:	f04f 32ff 	mov.w	r2, #4294967295
 800421e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004220:	4b11      	ldr	r3, [pc, #68]	; (8004268 <vTaskStartScheduler+0xc4>)
 8004222:	2201      	movs	r2, #1
 8004224:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004226:	4b11      	ldr	r3, [pc, #68]	; (800426c <vTaskStartScheduler+0xc8>)
 8004228:	2200      	movs	r2, #0
 800422a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800422c:	f001 f8b8 	bl	80053a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004230:	e00e      	b.n	8004250 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004232:	697b      	ldr	r3, [r7, #20]
 8004234:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004238:	d10a      	bne.n	8004250 <vTaskStartScheduler+0xac>
	__asm volatile
 800423a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800423e:	f383 8811 	msr	BASEPRI, r3
 8004242:	f3bf 8f6f 	isb	sy
 8004246:	f3bf 8f4f 	dsb	sy
 800424a:	60fb      	str	r3, [r7, #12]
}
 800424c:	bf00      	nop
 800424e:	e7fe      	b.n	800424e <vTaskStartScheduler+0xaa>
}
 8004250:	bf00      	nop
 8004252:	3718      	adds	r7, #24
 8004254:	46bd      	mov	sp, r7
 8004256:	bd80      	pop	{r7, pc}
 8004258:	08005bc0 	.word	0x08005bc0
 800425c:	08004889 	.word	0x08004889
 8004260:	20000cdc 	.word	0x20000cdc
 8004264:	20000cd8 	.word	0x20000cd8
 8004268:	20000cc4 	.word	0x20000cc4
 800426c:	20000cbc 	.word	0x20000cbc

08004270 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004270:	b480      	push	{r7}
 8004272:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004274:	4b04      	ldr	r3, [pc, #16]	; (8004288 <vTaskSuspendAll+0x18>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	3301      	adds	r3, #1
 800427a:	4a03      	ldr	r2, [pc, #12]	; (8004288 <vTaskSuspendAll+0x18>)
 800427c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800427e:	bf00      	nop
 8004280:	46bd      	mov	sp, r7
 8004282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004286:	4770      	bx	lr
 8004288:	20000ce0 	.word	0x20000ce0

0800428c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b084      	sub	sp, #16
 8004290:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004292:	2300      	movs	r3, #0
 8004294:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004296:	2300      	movs	r3, #0
 8004298:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800429a:	4b42      	ldr	r3, [pc, #264]	; (80043a4 <xTaskResumeAll+0x118>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d10a      	bne.n	80042b8 <xTaskResumeAll+0x2c>
	__asm volatile
 80042a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042a6:	f383 8811 	msr	BASEPRI, r3
 80042aa:	f3bf 8f6f 	isb	sy
 80042ae:	f3bf 8f4f 	dsb	sy
 80042b2:	603b      	str	r3, [r7, #0]
}
 80042b4:	bf00      	nop
 80042b6:	e7fe      	b.n	80042b6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80042b8:	f001 f914 	bl	80054e4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80042bc:	4b39      	ldr	r3, [pc, #228]	; (80043a4 <xTaskResumeAll+0x118>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	3b01      	subs	r3, #1
 80042c2:	4a38      	ldr	r2, [pc, #224]	; (80043a4 <xTaskResumeAll+0x118>)
 80042c4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80042c6:	4b37      	ldr	r3, [pc, #220]	; (80043a4 <xTaskResumeAll+0x118>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d162      	bne.n	8004394 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80042ce:	4b36      	ldr	r3, [pc, #216]	; (80043a8 <xTaskResumeAll+0x11c>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d05e      	beq.n	8004394 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80042d6:	e02f      	b.n	8004338 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80042d8:	4b34      	ldr	r3, [pc, #208]	; (80043ac <xTaskResumeAll+0x120>)
 80042da:	68db      	ldr	r3, [r3, #12]
 80042dc:	68db      	ldr	r3, [r3, #12]
 80042de:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	3318      	adds	r3, #24
 80042e4:	4618      	mov	r0, r3
 80042e6:	f7ff f871 	bl	80033cc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	3304      	adds	r3, #4
 80042ee:	4618      	mov	r0, r3
 80042f0:	f7ff f86c 	bl	80033cc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042f8:	4b2d      	ldr	r3, [pc, #180]	; (80043b0 <xTaskResumeAll+0x124>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	429a      	cmp	r2, r3
 80042fe:	d903      	bls.n	8004308 <xTaskResumeAll+0x7c>
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004304:	4a2a      	ldr	r2, [pc, #168]	; (80043b0 <xTaskResumeAll+0x124>)
 8004306:	6013      	str	r3, [r2, #0]
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800430c:	4613      	mov	r3, r2
 800430e:	009b      	lsls	r3, r3, #2
 8004310:	4413      	add	r3, r2
 8004312:	009b      	lsls	r3, r3, #2
 8004314:	4a27      	ldr	r2, [pc, #156]	; (80043b4 <xTaskResumeAll+0x128>)
 8004316:	441a      	add	r2, r3
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	3304      	adds	r3, #4
 800431c:	4619      	mov	r1, r3
 800431e:	4610      	mov	r0, r2
 8004320:	f7fe fff7 	bl	8003312 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004328:	4b23      	ldr	r3, [pc, #140]	; (80043b8 <xTaskResumeAll+0x12c>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800432e:	429a      	cmp	r2, r3
 8004330:	d302      	bcc.n	8004338 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004332:	4b22      	ldr	r3, [pc, #136]	; (80043bc <xTaskResumeAll+0x130>)
 8004334:	2201      	movs	r2, #1
 8004336:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004338:	4b1c      	ldr	r3, [pc, #112]	; (80043ac <xTaskResumeAll+0x120>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d1cb      	bne.n	80042d8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d001      	beq.n	800434a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004346:	f000 fb55 	bl	80049f4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800434a:	4b1d      	ldr	r3, [pc, #116]	; (80043c0 <xTaskResumeAll+0x134>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d010      	beq.n	8004378 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004356:	f000 f847 	bl	80043e8 <xTaskIncrementTick>
 800435a:	4603      	mov	r3, r0
 800435c:	2b00      	cmp	r3, #0
 800435e:	d002      	beq.n	8004366 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004360:	4b16      	ldr	r3, [pc, #88]	; (80043bc <xTaskResumeAll+0x130>)
 8004362:	2201      	movs	r2, #1
 8004364:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	3b01      	subs	r3, #1
 800436a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d1f1      	bne.n	8004356 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8004372:	4b13      	ldr	r3, [pc, #76]	; (80043c0 <xTaskResumeAll+0x134>)
 8004374:	2200      	movs	r2, #0
 8004376:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004378:	4b10      	ldr	r3, [pc, #64]	; (80043bc <xTaskResumeAll+0x130>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d009      	beq.n	8004394 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004380:	2301      	movs	r3, #1
 8004382:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004384:	4b0f      	ldr	r3, [pc, #60]	; (80043c4 <xTaskResumeAll+0x138>)
 8004386:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800438a:	601a      	str	r2, [r3, #0]
 800438c:	f3bf 8f4f 	dsb	sy
 8004390:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004394:	f001 f8d6 	bl	8005544 <vPortExitCritical>

	return xAlreadyYielded;
 8004398:	68bb      	ldr	r3, [r7, #8]
}
 800439a:	4618      	mov	r0, r3
 800439c:	3710      	adds	r7, #16
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}
 80043a2:	bf00      	nop
 80043a4:	20000ce0 	.word	0x20000ce0
 80043a8:	20000cb8 	.word	0x20000cb8
 80043ac:	20000c78 	.word	0x20000c78
 80043b0:	20000cc0 	.word	0x20000cc0
 80043b4:	200007e8 	.word	0x200007e8
 80043b8:	200007e4 	.word	0x200007e4
 80043bc:	20000ccc 	.word	0x20000ccc
 80043c0:	20000cc8 	.word	0x20000cc8
 80043c4:	e000ed04 	.word	0xe000ed04

080043c8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80043c8:	b480      	push	{r7}
 80043ca:	b083      	sub	sp, #12
 80043cc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80043ce:	4b05      	ldr	r3, [pc, #20]	; (80043e4 <xTaskGetTickCount+0x1c>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80043d4:	687b      	ldr	r3, [r7, #4]
}
 80043d6:	4618      	mov	r0, r3
 80043d8:	370c      	adds	r7, #12
 80043da:	46bd      	mov	sp, r7
 80043dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e0:	4770      	bx	lr
 80043e2:	bf00      	nop
 80043e4:	20000cbc 	.word	0x20000cbc

080043e8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b086      	sub	sp, #24
 80043ec:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80043ee:	2300      	movs	r3, #0
 80043f0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80043f2:	4b4f      	ldr	r3, [pc, #316]	; (8004530 <xTaskIncrementTick+0x148>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	f040 808f 	bne.w	800451a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80043fc:	4b4d      	ldr	r3, [pc, #308]	; (8004534 <xTaskIncrementTick+0x14c>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	3301      	adds	r3, #1
 8004402:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004404:	4a4b      	ldr	r2, [pc, #300]	; (8004534 <xTaskIncrementTick+0x14c>)
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d120      	bne.n	8004452 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004410:	4b49      	ldr	r3, [pc, #292]	; (8004538 <xTaskIncrementTick+0x150>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d00a      	beq.n	8004430 <xTaskIncrementTick+0x48>
	__asm volatile
 800441a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800441e:	f383 8811 	msr	BASEPRI, r3
 8004422:	f3bf 8f6f 	isb	sy
 8004426:	f3bf 8f4f 	dsb	sy
 800442a:	603b      	str	r3, [r7, #0]
}
 800442c:	bf00      	nop
 800442e:	e7fe      	b.n	800442e <xTaskIncrementTick+0x46>
 8004430:	4b41      	ldr	r3, [pc, #260]	; (8004538 <xTaskIncrementTick+0x150>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	60fb      	str	r3, [r7, #12]
 8004436:	4b41      	ldr	r3, [pc, #260]	; (800453c <xTaskIncrementTick+0x154>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a3f      	ldr	r2, [pc, #252]	; (8004538 <xTaskIncrementTick+0x150>)
 800443c:	6013      	str	r3, [r2, #0]
 800443e:	4a3f      	ldr	r2, [pc, #252]	; (800453c <xTaskIncrementTick+0x154>)
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	6013      	str	r3, [r2, #0]
 8004444:	4b3e      	ldr	r3, [pc, #248]	; (8004540 <xTaskIncrementTick+0x158>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	3301      	adds	r3, #1
 800444a:	4a3d      	ldr	r2, [pc, #244]	; (8004540 <xTaskIncrementTick+0x158>)
 800444c:	6013      	str	r3, [r2, #0]
 800444e:	f000 fad1 	bl	80049f4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004452:	4b3c      	ldr	r3, [pc, #240]	; (8004544 <xTaskIncrementTick+0x15c>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	693a      	ldr	r2, [r7, #16]
 8004458:	429a      	cmp	r2, r3
 800445a:	d349      	bcc.n	80044f0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800445c:	4b36      	ldr	r3, [pc, #216]	; (8004538 <xTaskIncrementTick+0x150>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d104      	bne.n	8004470 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004466:	4b37      	ldr	r3, [pc, #220]	; (8004544 <xTaskIncrementTick+0x15c>)
 8004468:	f04f 32ff 	mov.w	r2, #4294967295
 800446c:	601a      	str	r2, [r3, #0]
					break;
 800446e:	e03f      	b.n	80044f0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004470:	4b31      	ldr	r3, [pc, #196]	; (8004538 <xTaskIncrementTick+0x150>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	68db      	ldr	r3, [r3, #12]
 8004476:	68db      	ldr	r3, [r3, #12]
 8004478:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004480:	693a      	ldr	r2, [r7, #16]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	429a      	cmp	r2, r3
 8004486:	d203      	bcs.n	8004490 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004488:	4a2e      	ldr	r2, [pc, #184]	; (8004544 <xTaskIncrementTick+0x15c>)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800448e:	e02f      	b.n	80044f0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	3304      	adds	r3, #4
 8004494:	4618      	mov	r0, r3
 8004496:	f7fe ff99 	bl	80033cc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d004      	beq.n	80044ac <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	3318      	adds	r3, #24
 80044a6:	4618      	mov	r0, r3
 80044a8:	f7fe ff90 	bl	80033cc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044b0:	4b25      	ldr	r3, [pc, #148]	; (8004548 <xTaskIncrementTick+0x160>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	429a      	cmp	r2, r3
 80044b6:	d903      	bls.n	80044c0 <xTaskIncrementTick+0xd8>
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044bc:	4a22      	ldr	r2, [pc, #136]	; (8004548 <xTaskIncrementTick+0x160>)
 80044be:	6013      	str	r3, [r2, #0]
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044c4:	4613      	mov	r3, r2
 80044c6:	009b      	lsls	r3, r3, #2
 80044c8:	4413      	add	r3, r2
 80044ca:	009b      	lsls	r3, r3, #2
 80044cc:	4a1f      	ldr	r2, [pc, #124]	; (800454c <xTaskIncrementTick+0x164>)
 80044ce:	441a      	add	r2, r3
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	3304      	adds	r3, #4
 80044d4:	4619      	mov	r1, r3
 80044d6:	4610      	mov	r0, r2
 80044d8:	f7fe ff1b 	bl	8003312 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044e0:	4b1b      	ldr	r3, [pc, #108]	; (8004550 <xTaskIncrementTick+0x168>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044e6:	429a      	cmp	r2, r3
 80044e8:	d3b8      	bcc.n	800445c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80044ea:	2301      	movs	r3, #1
 80044ec:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80044ee:	e7b5      	b.n	800445c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80044f0:	4b17      	ldr	r3, [pc, #92]	; (8004550 <xTaskIncrementTick+0x168>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044f6:	4915      	ldr	r1, [pc, #84]	; (800454c <xTaskIncrementTick+0x164>)
 80044f8:	4613      	mov	r3, r2
 80044fa:	009b      	lsls	r3, r3, #2
 80044fc:	4413      	add	r3, r2
 80044fe:	009b      	lsls	r3, r3, #2
 8004500:	440b      	add	r3, r1
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	2b01      	cmp	r3, #1
 8004506:	d901      	bls.n	800450c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004508:	2301      	movs	r3, #1
 800450a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800450c:	4b11      	ldr	r3, [pc, #68]	; (8004554 <xTaskIncrementTick+0x16c>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d007      	beq.n	8004524 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004514:	2301      	movs	r3, #1
 8004516:	617b      	str	r3, [r7, #20]
 8004518:	e004      	b.n	8004524 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800451a:	4b0f      	ldr	r3, [pc, #60]	; (8004558 <xTaskIncrementTick+0x170>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	3301      	adds	r3, #1
 8004520:	4a0d      	ldr	r2, [pc, #52]	; (8004558 <xTaskIncrementTick+0x170>)
 8004522:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004524:	697b      	ldr	r3, [r7, #20]
}
 8004526:	4618      	mov	r0, r3
 8004528:	3718      	adds	r7, #24
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}
 800452e:	bf00      	nop
 8004530:	20000ce0 	.word	0x20000ce0
 8004534:	20000cbc 	.word	0x20000cbc
 8004538:	20000c70 	.word	0x20000c70
 800453c:	20000c74 	.word	0x20000c74
 8004540:	20000cd0 	.word	0x20000cd0
 8004544:	20000cd8 	.word	0x20000cd8
 8004548:	20000cc0 	.word	0x20000cc0
 800454c:	200007e8 	.word	0x200007e8
 8004550:	200007e4 	.word	0x200007e4
 8004554:	20000ccc 	.word	0x20000ccc
 8004558:	20000cc8 	.word	0x20000cc8

0800455c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800455c:	b480      	push	{r7}
 800455e:	b085      	sub	sp, #20
 8004560:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004562:	4b28      	ldr	r3, [pc, #160]	; (8004604 <vTaskSwitchContext+0xa8>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d003      	beq.n	8004572 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800456a:	4b27      	ldr	r3, [pc, #156]	; (8004608 <vTaskSwitchContext+0xac>)
 800456c:	2201      	movs	r2, #1
 800456e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004570:	e041      	b.n	80045f6 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8004572:	4b25      	ldr	r3, [pc, #148]	; (8004608 <vTaskSwitchContext+0xac>)
 8004574:	2200      	movs	r2, #0
 8004576:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004578:	4b24      	ldr	r3, [pc, #144]	; (800460c <vTaskSwitchContext+0xb0>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	60fb      	str	r3, [r7, #12]
 800457e:	e010      	b.n	80045a2 <vTaskSwitchContext+0x46>
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d10a      	bne.n	800459c <vTaskSwitchContext+0x40>
	__asm volatile
 8004586:	f04f 0350 	mov.w	r3, #80	; 0x50
 800458a:	f383 8811 	msr	BASEPRI, r3
 800458e:	f3bf 8f6f 	isb	sy
 8004592:	f3bf 8f4f 	dsb	sy
 8004596:	607b      	str	r3, [r7, #4]
}
 8004598:	bf00      	nop
 800459a:	e7fe      	b.n	800459a <vTaskSwitchContext+0x3e>
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	3b01      	subs	r3, #1
 80045a0:	60fb      	str	r3, [r7, #12]
 80045a2:	491b      	ldr	r1, [pc, #108]	; (8004610 <vTaskSwitchContext+0xb4>)
 80045a4:	68fa      	ldr	r2, [r7, #12]
 80045a6:	4613      	mov	r3, r2
 80045a8:	009b      	lsls	r3, r3, #2
 80045aa:	4413      	add	r3, r2
 80045ac:	009b      	lsls	r3, r3, #2
 80045ae:	440b      	add	r3, r1
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d0e4      	beq.n	8004580 <vTaskSwitchContext+0x24>
 80045b6:	68fa      	ldr	r2, [r7, #12]
 80045b8:	4613      	mov	r3, r2
 80045ba:	009b      	lsls	r3, r3, #2
 80045bc:	4413      	add	r3, r2
 80045be:	009b      	lsls	r3, r3, #2
 80045c0:	4a13      	ldr	r2, [pc, #76]	; (8004610 <vTaskSwitchContext+0xb4>)
 80045c2:	4413      	add	r3, r2
 80045c4:	60bb      	str	r3, [r7, #8]
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	685a      	ldr	r2, [r3, #4]
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	605a      	str	r2, [r3, #4]
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	685a      	ldr	r2, [r3, #4]
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	3308      	adds	r3, #8
 80045d8:	429a      	cmp	r2, r3
 80045da:	d104      	bne.n	80045e6 <vTaskSwitchContext+0x8a>
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	685a      	ldr	r2, [r3, #4]
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	605a      	str	r2, [r3, #4]
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	68db      	ldr	r3, [r3, #12]
 80045ec:	4a09      	ldr	r2, [pc, #36]	; (8004614 <vTaskSwitchContext+0xb8>)
 80045ee:	6013      	str	r3, [r2, #0]
 80045f0:	4a06      	ldr	r2, [pc, #24]	; (800460c <vTaskSwitchContext+0xb0>)
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	6013      	str	r3, [r2, #0]
}
 80045f6:	bf00      	nop
 80045f8:	3714      	adds	r7, #20
 80045fa:	46bd      	mov	sp, r7
 80045fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004600:	4770      	bx	lr
 8004602:	bf00      	nop
 8004604:	20000ce0 	.word	0x20000ce0
 8004608:	20000ccc 	.word	0x20000ccc
 800460c:	20000cc0 	.word	0x20000cc0
 8004610:	200007e8 	.word	0x200007e8
 8004614:	200007e4 	.word	0x200007e4

08004618 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b084      	sub	sp, #16
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
 8004620:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d10a      	bne.n	800463e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004628:	f04f 0350 	mov.w	r3, #80	; 0x50
 800462c:	f383 8811 	msr	BASEPRI, r3
 8004630:	f3bf 8f6f 	isb	sy
 8004634:	f3bf 8f4f 	dsb	sy
 8004638:	60fb      	str	r3, [r7, #12]
}
 800463a:	bf00      	nop
 800463c:	e7fe      	b.n	800463c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800463e:	4b07      	ldr	r3, [pc, #28]	; (800465c <vTaskPlaceOnEventList+0x44>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	3318      	adds	r3, #24
 8004644:	4619      	mov	r1, r3
 8004646:	6878      	ldr	r0, [r7, #4]
 8004648:	f7fe fe87 	bl	800335a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800464c:	2101      	movs	r1, #1
 800464e:	6838      	ldr	r0, [r7, #0]
 8004650:	f000 fa7c 	bl	8004b4c <prvAddCurrentTaskToDelayedList>
}
 8004654:	bf00      	nop
 8004656:	3710      	adds	r7, #16
 8004658:	46bd      	mov	sp, r7
 800465a:	bd80      	pop	{r7, pc}
 800465c:	200007e4 	.word	0x200007e4

08004660 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004660:	b580      	push	{r7, lr}
 8004662:	b086      	sub	sp, #24
 8004664:	af00      	add	r7, sp, #0
 8004666:	60f8      	str	r0, [r7, #12]
 8004668:	60b9      	str	r1, [r7, #8]
 800466a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d10a      	bne.n	8004688 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8004672:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004676:	f383 8811 	msr	BASEPRI, r3
 800467a:	f3bf 8f6f 	isb	sy
 800467e:	f3bf 8f4f 	dsb	sy
 8004682:	617b      	str	r3, [r7, #20]
}
 8004684:	bf00      	nop
 8004686:	e7fe      	b.n	8004686 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004688:	4b0a      	ldr	r3, [pc, #40]	; (80046b4 <vTaskPlaceOnEventListRestricted+0x54>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	3318      	adds	r3, #24
 800468e:	4619      	mov	r1, r3
 8004690:	68f8      	ldr	r0, [r7, #12]
 8004692:	f7fe fe3e 	bl	8003312 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d002      	beq.n	80046a2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800469c:	f04f 33ff 	mov.w	r3, #4294967295
 80046a0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80046a2:	6879      	ldr	r1, [r7, #4]
 80046a4:	68b8      	ldr	r0, [r7, #8]
 80046a6:	f000 fa51 	bl	8004b4c <prvAddCurrentTaskToDelayedList>
	}
 80046aa:	bf00      	nop
 80046ac:	3718      	adds	r7, #24
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bd80      	pop	{r7, pc}
 80046b2:	bf00      	nop
 80046b4:	200007e4 	.word	0x200007e4

080046b8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b086      	sub	sp, #24
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	68db      	ldr	r3, [r3, #12]
 80046c4:	68db      	ldr	r3, [r3, #12]
 80046c6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d10a      	bne.n	80046e4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80046ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046d2:	f383 8811 	msr	BASEPRI, r3
 80046d6:	f3bf 8f6f 	isb	sy
 80046da:	f3bf 8f4f 	dsb	sy
 80046de:	60fb      	str	r3, [r7, #12]
}
 80046e0:	bf00      	nop
 80046e2:	e7fe      	b.n	80046e2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	3318      	adds	r3, #24
 80046e8:	4618      	mov	r0, r3
 80046ea:	f7fe fe6f 	bl	80033cc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80046ee:	4b1e      	ldr	r3, [pc, #120]	; (8004768 <xTaskRemoveFromEventList+0xb0>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d11d      	bne.n	8004732 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80046f6:	693b      	ldr	r3, [r7, #16]
 80046f8:	3304      	adds	r3, #4
 80046fa:	4618      	mov	r0, r3
 80046fc:	f7fe fe66 	bl	80033cc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004700:	693b      	ldr	r3, [r7, #16]
 8004702:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004704:	4b19      	ldr	r3, [pc, #100]	; (800476c <xTaskRemoveFromEventList+0xb4>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	429a      	cmp	r2, r3
 800470a:	d903      	bls.n	8004714 <xTaskRemoveFromEventList+0x5c>
 800470c:	693b      	ldr	r3, [r7, #16]
 800470e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004710:	4a16      	ldr	r2, [pc, #88]	; (800476c <xTaskRemoveFromEventList+0xb4>)
 8004712:	6013      	str	r3, [r2, #0]
 8004714:	693b      	ldr	r3, [r7, #16]
 8004716:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004718:	4613      	mov	r3, r2
 800471a:	009b      	lsls	r3, r3, #2
 800471c:	4413      	add	r3, r2
 800471e:	009b      	lsls	r3, r3, #2
 8004720:	4a13      	ldr	r2, [pc, #76]	; (8004770 <xTaskRemoveFromEventList+0xb8>)
 8004722:	441a      	add	r2, r3
 8004724:	693b      	ldr	r3, [r7, #16]
 8004726:	3304      	adds	r3, #4
 8004728:	4619      	mov	r1, r3
 800472a:	4610      	mov	r0, r2
 800472c:	f7fe fdf1 	bl	8003312 <vListInsertEnd>
 8004730:	e005      	b.n	800473e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004732:	693b      	ldr	r3, [r7, #16]
 8004734:	3318      	adds	r3, #24
 8004736:	4619      	mov	r1, r3
 8004738:	480e      	ldr	r0, [pc, #56]	; (8004774 <xTaskRemoveFromEventList+0xbc>)
 800473a:	f7fe fdea 	bl	8003312 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004742:	4b0d      	ldr	r3, [pc, #52]	; (8004778 <xTaskRemoveFromEventList+0xc0>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004748:	429a      	cmp	r2, r3
 800474a:	d905      	bls.n	8004758 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800474c:	2301      	movs	r3, #1
 800474e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004750:	4b0a      	ldr	r3, [pc, #40]	; (800477c <xTaskRemoveFromEventList+0xc4>)
 8004752:	2201      	movs	r2, #1
 8004754:	601a      	str	r2, [r3, #0]
 8004756:	e001      	b.n	800475c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004758:	2300      	movs	r3, #0
 800475a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800475c:	697b      	ldr	r3, [r7, #20]
}
 800475e:	4618      	mov	r0, r3
 8004760:	3718      	adds	r7, #24
 8004762:	46bd      	mov	sp, r7
 8004764:	bd80      	pop	{r7, pc}
 8004766:	bf00      	nop
 8004768:	20000ce0 	.word	0x20000ce0
 800476c:	20000cc0 	.word	0x20000cc0
 8004770:	200007e8 	.word	0x200007e8
 8004774:	20000c78 	.word	0x20000c78
 8004778:	200007e4 	.word	0x200007e4
 800477c:	20000ccc 	.word	0x20000ccc

08004780 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004780:	b480      	push	{r7}
 8004782:	b083      	sub	sp, #12
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004788:	4b06      	ldr	r3, [pc, #24]	; (80047a4 <vTaskInternalSetTimeOutState+0x24>)
 800478a:	681a      	ldr	r2, [r3, #0]
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004790:	4b05      	ldr	r3, [pc, #20]	; (80047a8 <vTaskInternalSetTimeOutState+0x28>)
 8004792:	681a      	ldr	r2, [r3, #0]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	605a      	str	r2, [r3, #4]
}
 8004798:	bf00      	nop
 800479a:	370c      	adds	r7, #12
 800479c:	46bd      	mov	sp, r7
 800479e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a2:	4770      	bx	lr
 80047a4:	20000cd0 	.word	0x20000cd0
 80047a8:	20000cbc 	.word	0x20000cbc

080047ac <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b088      	sub	sp, #32
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
 80047b4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d10a      	bne.n	80047d2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80047bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047c0:	f383 8811 	msr	BASEPRI, r3
 80047c4:	f3bf 8f6f 	isb	sy
 80047c8:	f3bf 8f4f 	dsb	sy
 80047cc:	613b      	str	r3, [r7, #16]
}
 80047ce:	bf00      	nop
 80047d0:	e7fe      	b.n	80047d0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d10a      	bne.n	80047ee <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80047d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047dc:	f383 8811 	msr	BASEPRI, r3
 80047e0:	f3bf 8f6f 	isb	sy
 80047e4:	f3bf 8f4f 	dsb	sy
 80047e8:	60fb      	str	r3, [r7, #12]
}
 80047ea:	bf00      	nop
 80047ec:	e7fe      	b.n	80047ec <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80047ee:	f000 fe79 	bl	80054e4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80047f2:	4b1d      	ldr	r3, [pc, #116]	; (8004868 <xTaskCheckForTimeOut+0xbc>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	69ba      	ldr	r2, [r7, #24]
 80047fe:	1ad3      	subs	r3, r2, r3
 8004800:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f1b3 3fff 	cmp.w	r3, #4294967295
 800480a:	d102      	bne.n	8004812 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800480c:	2300      	movs	r3, #0
 800480e:	61fb      	str	r3, [r7, #28]
 8004810:	e023      	b.n	800485a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681a      	ldr	r2, [r3, #0]
 8004816:	4b15      	ldr	r3, [pc, #84]	; (800486c <xTaskCheckForTimeOut+0xc0>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	429a      	cmp	r2, r3
 800481c:	d007      	beq.n	800482e <xTaskCheckForTimeOut+0x82>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	69ba      	ldr	r2, [r7, #24]
 8004824:	429a      	cmp	r2, r3
 8004826:	d302      	bcc.n	800482e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004828:	2301      	movs	r3, #1
 800482a:	61fb      	str	r3, [r7, #28]
 800482c:	e015      	b.n	800485a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	697a      	ldr	r2, [r7, #20]
 8004834:	429a      	cmp	r2, r3
 8004836:	d20b      	bcs.n	8004850 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	681a      	ldr	r2, [r3, #0]
 800483c:	697b      	ldr	r3, [r7, #20]
 800483e:	1ad2      	subs	r2, r2, r3
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004844:	6878      	ldr	r0, [r7, #4]
 8004846:	f7ff ff9b 	bl	8004780 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800484a:	2300      	movs	r3, #0
 800484c:	61fb      	str	r3, [r7, #28]
 800484e:	e004      	b.n	800485a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	2200      	movs	r2, #0
 8004854:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004856:	2301      	movs	r3, #1
 8004858:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800485a:	f000 fe73 	bl	8005544 <vPortExitCritical>

	return xReturn;
 800485e:	69fb      	ldr	r3, [r7, #28]
}
 8004860:	4618      	mov	r0, r3
 8004862:	3720      	adds	r7, #32
 8004864:	46bd      	mov	sp, r7
 8004866:	bd80      	pop	{r7, pc}
 8004868:	20000cbc 	.word	0x20000cbc
 800486c:	20000cd0 	.word	0x20000cd0

08004870 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004870:	b480      	push	{r7}
 8004872:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004874:	4b03      	ldr	r3, [pc, #12]	; (8004884 <vTaskMissedYield+0x14>)
 8004876:	2201      	movs	r2, #1
 8004878:	601a      	str	r2, [r3, #0]
}
 800487a:	bf00      	nop
 800487c:	46bd      	mov	sp, r7
 800487e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004882:	4770      	bx	lr
 8004884:	20000ccc 	.word	0x20000ccc

08004888 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b082      	sub	sp, #8
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004890:	f000 f852 	bl	8004938 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004894:	4b06      	ldr	r3, [pc, #24]	; (80048b0 <prvIdleTask+0x28>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	2b01      	cmp	r3, #1
 800489a:	d9f9      	bls.n	8004890 <prvIdleTask+0x8>
			{
				taskYIELD();
 800489c:	4b05      	ldr	r3, [pc, #20]	; (80048b4 <prvIdleTask+0x2c>)
 800489e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048a2:	601a      	str	r2, [r3, #0]
 80048a4:	f3bf 8f4f 	dsb	sy
 80048a8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80048ac:	e7f0      	b.n	8004890 <prvIdleTask+0x8>
 80048ae:	bf00      	nop
 80048b0:	200007e8 	.word	0x200007e8
 80048b4:	e000ed04 	.word	0xe000ed04

080048b8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b082      	sub	sp, #8
 80048bc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80048be:	2300      	movs	r3, #0
 80048c0:	607b      	str	r3, [r7, #4]
 80048c2:	e00c      	b.n	80048de <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80048c4:	687a      	ldr	r2, [r7, #4]
 80048c6:	4613      	mov	r3, r2
 80048c8:	009b      	lsls	r3, r3, #2
 80048ca:	4413      	add	r3, r2
 80048cc:	009b      	lsls	r3, r3, #2
 80048ce:	4a12      	ldr	r2, [pc, #72]	; (8004918 <prvInitialiseTaskLists+0x60>)
 80048d0:	4413      	add	r3, r2
 80048d2:	4618      	mov	r0, r3
 80048d4:	f7fe fcf0 	bl	80032b8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	3301      	adds	r3, #1
 80048dc:	607b      	str	r3, [r7, #4]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2b37      	cmp	r3, #55	; 0x37
 80048e2:	d9ef      	bls.n	80048c4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80048e4:	480d      	ldr	r0, [pc, #52]	; (800491c <prvInitialiseTaskLists+0x64>)
 80048e6:	f7fe fce7 	bl	80032b8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80048ea:	480d      	ldr	r0, [pc, #52]	; (8004920 <prvInitialiseTaskLists+0x68>)
 80048ec:	f7fe fce4 	bl	80032b8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80048f0:	480c      	ldr	r0, [pc, #48]	; (8004924 <prvInitialiseTaskLists+0x6c>)
 80048f2:	f7fe fce1 	bl	80032b8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80048f6:	480c      	ldr	r0, [pc, #48]	; (8004928 <prvInitialiseTaskLists+0x70>)
 80048f8:	f7fe fcde 	bl	80032b8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80048fc:	480b      	ldr	r0, [pc, #44]	; (800492c <prvInitialiseTaskLists+0x74>)
 80048fe:	f7fe fcdb 	bl	80032b8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004902:	4b0b      	ldr	r3, [pc, #44]	; (8004930 <prvInitialiseTaskLists+0x78>)
 8004904:	4a05      	ldr	r2, [pc, #20]	; (800491c <prvInitialiseTaskLists+0x64>)
 8004906:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004908:	4b0a      	ldr	r3, [pc, #40]	; (8004934 <prvInitialiseTaskLists+0x7c>)
 800490a:	4a05      	ldr	r2, [pc, #20]	; (8004920 <prvInitialiseTaskLists+0x68>)
 800490c:	601a      	str	r2, [r3, #0]
}
 800490e:	bf00      	nop
 8004910:	3708      	adds	r7, #8
 8004912:	46bd      	mov	sp, r7
 8004914:	bd80      	pop	{r7, pc}
 8004916:	bf00      	nop
 8004918:	200007e8 	.word	0x200007e8
 800491c:	20000c48 	.word	0x20000c48
 8004920:	20000c5c 	.word	0x20000c5c
 8004924:	20000c78 	.word	0x20000c78
 8004928:	20000c8c 	.word	0x20000c8c
 800492c:	20000ca4 	.word	0x20000ca4
 8004930:	20000c70 	.word	0x20000c70
 8004934:	20000c74 	.word	0x20000c74

08004938 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b082      	sub	sp, #8
 800493c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800493e:	e019      	b.n	8004974 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004940:	f000 fdd0 	bl	80054e4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004944:	4b10      	ldr	r3, [pc, #64]	; (8004988 <prvCheckTasksWaitingTermination+0x50>)
 8004946:	68db      	ldr	r3, [r3, #12]
 8004948:	68db      	ldr	r3, [r3, #12]
 800494a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	3304      	adds	r3, #4
 8004950:	4618      	mov	r0, r3
 8004952:	f7fe fd3b 	bl	80033cc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004956:	4b0d      	ldr	r3, [pc, #52]	; (800498c <prvCheckTasksWaitingTermination+0x54>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	3b01      	subs	r3, #1
 800495c:	4a0b      	ldr	r2, [pc, #44]	; (800498c <prvCheckTasksWaitingTermination+0x54>)
 800495e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004960:	4b0b      	ldr	r3, [pc, #44]	; (8004990 <prvCheckTasksWaitingTermination+0x58>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	3b01      	subs	r3, #1
 8004966:	4a0a      	ldr	r2, [pc, #40]	; (8004990 <prvCheckTasksWaitingTermination+0x58>)
 8004968:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800496a:	f000 fdeb 	bl	8005544 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800496e:	6878      	ldr	r0, [r7, #4]
 8004970:	f000 f810 	bl	8004994 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004974:	4b06      	ldr	r3, [pc, #24]	; (8004990 <prvCheckTasksWaitingTermination+0x58>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d1e1      	bne.n	8004940 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800497c:	bf00      	nop
 800497e:	bf00      	nop
 8004980:	3708      	adds	r7, #8
 8004982:	46bd      	mov	sp, r7
 8004984:	bd80      	pop	{r7, pc}
 8004986:	bf00      	nop
 8004988:	20000c8c 	.word	0x20000c8c
 800498c:	20000cb8 	.word	0x20000cb8
 8004990:	20000ca0 	.word	0x20000ca0

08004994 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004994:	b580      	push	{r7, lr}
 8004996:	b084      	sub	sp, #16
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d108      	bne.n	80049b8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049aa:	4618      	mov	r0, r3
 80049ac:	f000 ff88 	bl	80058c0 <vPortFree>
				vPortFree( pxTCB );
 80049b0:	6878      	ldr	r0, [r7, #4]
 80049b2:	f000 ff85 	bl	80058c0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80049b6:	e018      	b.n	80049ea <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80049be:	2b01      	cmp	r3, #1
 80049c0:	d103      	bne.n	80049ca <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80049c2:	6878      	ldr	r0, [r7, #4]
 80049c4:	f000 ff7c 	bl	80058c0 <vPortFree>
	}
 80049c8:	e00f      	b.n	80049ea <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80049d0:	2b02      	cmp	r3, #2
 80049d2:	d00a      	beq.n	80049ea <prvDeleteTCB+0x56>
	__asm volatile
 80049d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049d8:	f383 8811 	msr	BASEPRI, r3
 80049dc:	f3bf 8f6f 	isb	sy
 80049e0:	f3bf 8f4f 	dsb	sy
 80049e4:	60fb      	str	r3, [r7, #12]
}
 80049e6:	bf00      	nop
 80049e8:	e7fe      	b.n	80049e8 <prvDeleteTCB+0x54>
	}
 80049ea:	bf00      	nop
 80049ec:	3710      	adds	r7, #16
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bd80      	pop	{r7, pc}
	...

080049f4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80049f4:	b480      	push	{r7}
 80049f6:	b083      	sub	sp, #12
 80049f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80049fa:	4b0c      	ldr	r3, [pc, #48]	; (8004a2c <prvResetNextTaskUnblockTime+0x38>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d104      	bne.n	8004a0e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004a04:	4b0a      	ldr	r3, [pc, #40]	; (8004a30 <prvResetNextTaskUnblockTime+0x3c>)
 8004a06:	f04f 32ff 	mov.w	r2, #4294967295
 8004a0a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004a0c:	e008      	b.n	8004a20 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a0e:	4b07      	ldr	r3, [pc, #28]	; (8004a2c <prvResetNextTaskUnblockTime+0x38>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	68db      	ldr	r3, [r3, #12]
 8004a14:	68db      	ldr	r3, [r3, #12]
 8004a16:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	4a04      	ldr	r2, [pc, #16]	; (8004a30 <prvResetNextTaskUnblockTime+0x3c>)
 8004a1e:	6013      	str	r3, [r2, #0]
}
 8004a20:	bf00      	nop
 8004a22:	370c      	adds	r7, #12
 8004a24:	46bd      	mov	sp, r7
 8004a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2a:	4770      	bx	lr
 8004a2c:	20000c70 	.word	0x20000c70
 8004a30:	20000cd8 	.word	0x20000cd8

08004a34 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004a34:	b480      	push	{r7}
 8004a36:	b083      	sub	sp, #12
 8004a38:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004a3a:	4b0b      	ldr	r3, [pc, #44]	; (8004a68 <xTaskGetSchedulerState+0x34>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d102      	bne.n	8004a48 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004a42:	2301      	movs	r3, #1
 8004a44:	607b      	str	r3, [r7, #4]
 8004a46:	e008      	b.n	8004a5a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004a48:	4b08      	ldr	r3, [pc, #32]	; (8004a6c <xTaskGetSchedulerState+0x38>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d102      	bne.n	8004a56 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004a50:	2302      	movs	r3, #2
 8004a52:	607b      	str	r3, [r7, #4]
 8004a54:	e001      	b.n	8004a5a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004a56:	2300      	movs	r3, #0
 8004a58:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004a5a:	687b      	ldr	r3, [r7, #4]
	}
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	370c      	adds	r7, #12
 8004a60:	46bd      	mov	sp, r7
 8004a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a66:	4770      	bx	lr
 8004a68:	20000cc4 	.word	0x20000cc4
 8004a6c:	20000ce0 	.word	0x20000ce0

08004a70 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b086      	sub	sp, #24
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d056      	beq.n	8004b34 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004a86:	4b2e      	ldr	r3, [pc, #184]	; (8004b40 <xTaskPriorityDisinherit+0xd0>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	693a      	ldr	r2, [r7, #16]
 8004a8c:	429a      	cmp	r2, r3
 8004a8e:	d00a      	beq.n	8004aa6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a94:	f383 8811 	msr	BASEPRI, r3
 8004a98:	f3bf 8f6f 	isb	sy
 8004a9c:	f3bf 8f4f 	dsb	sy
 8004aa0:	60fb      	str	r3, [r7, #12]
}
 8004aa2:	bf00      	nop
 8004aa4:	e7fe      	b.n	8004aa4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004aa6:	693b      	ldr	r3, [r7, #16]
 8004aa8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d10a      	bne.n	8004ac4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004aae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ab2:	f383 8811 	msr	BASEPRI, r3
 8004ab6:	f3bf 8f6f 	isb	sy
 8004aba:	f3bf 8f4f 	dsb	sy
 8004abe:	60bb      	str	r3, [r7, #8]
}
 8004ac0:	bf00      	nop
 8004ac2:	e7fe      	b.n	8004ac2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004ac4:	693b      	ldr	r3, [r7, #16]
 8004ac6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ac8:	1e5a      	subs	r2, r3, #1
 8004aca:	693b      	ldr	r3, [r7, #16]
 8004acc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004ace:	693b      	ldr	r3, [r7, #16]
 8004ad0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ad2:	693b      	ldr	r3, [r7, #16]
 8004ad4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ad6:	429a      	cmp	r2, r3
 8004ad8:	d02c      	beq.n	8004b34 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004ada:	693b      	ldr	r3, [r7, #16]
 8004adc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d128      	bne.n	8004b34 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004ae2:	693b      	ldr	r3, [r7, #16]
 8004ae4:	3304      	adds	r3, #4
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	f7fe fc70 	bl	80033cc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004aec:	693b      	ldr	r3, [r7, #16]
 8004aee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004af0:	693b      	ldr	r3, [r7, #16]
 8004af2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004af4:	693b      	ldr	r3, [r7, #16]
 8004af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004af8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004afc:	693b      	ldr	r3, [r7, #16]
 8004afe:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004b00:	693b      	ldr	r3, [r7, #16]
 8004b02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b04:	4b0f      	ldr	r3, [pc, #60]	; (8004b44 <xTaskPriorityDisinherit+0xd4>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	429a      	cmp	r2, r3
 8004b0a:	d903      	bls.n	8004b14 <xTaskPriorityDisinherit+0xa4>
 8004b0c:	693b      	ldr	r3, [r7, #16]
 8004b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b10:	4a0c      	ldr	r2, [pc, #48]	; (8004b44 <xTaskPriorityDisinherit+0xd4>)
 8004b12:	6013      	str	r3, [r2, #0]
 8004b14:	693b      	ldr	r3, [r7, #16]
 8004b16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b18:	4613      	mov	r3, r2
 8004b1a:	009b      	lsls	r3, r3, #2
 8004b1c:	4413      	add	r3, r2
 8004b1e:	009b      	lsls	r3, r3, #2
 8004b20:	4a09      	ldr	r2, [pc, #36]	; (8004b48 <xTaskPriorityDisinherit+0xd8>)
 8004b22:	441a      	add	r2, r3
 8004b24:	693b      	ldr	r3, [r7, #16]
 8004b26:	3304      	adds	r3, #4
 8004b28:	4619      	mov	r1, r3
 8004b2a:	4610      	mov	r0, r2
 8004b2c:	f7fe fbf1 	bl	8003312 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004b30:	2301      	movs	r3, #1
 8004b32:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004b34:	697b      	ldr	r3, [r7, #20]
	}
 8004b36:	4618      	mov	r0, r3
 8004b38:	3718      	adds	r7, #24
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bd80      	pop	{r7, pc}
 8004b3e:	bf00      	nop
 8004b40:	200007e4 	.word	0x200007e4
 8004b44:	20000cc0 	.word	0x20000cc0
 8004b48:	200007e8 	.word	0x200007e8

08004b4c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b084      	sub	sp, #16
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
 8004b54:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004b56:	4b21      	ldr	r3, [pc, #132]	; (8004bdc <prvAddCurrentTaskToDelayedList+0x90>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004b5c:	4b20      	ldr	r3, [pc, #128]	; (8004be0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	3304      	adds	r3, #4
 8004b62:	4618      	mov	r0, r3
 8004b64:	f7fe fc32 	bl	80033cc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b6e:	d10a      	bne.n	8004b86 <prvAddCurrentTaskToDelayedList+0x3a>
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d007      	beq.n	8004b86 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004b76:	4b1a      	ldr	r3, [pc, #104]	; (8004be0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	3304      	adds	r3, #4
 8004b7c:	4619      	mov	r1, r3
 8004b7e:	4819      	ldr	r0, [pc, #100]	; (8004be4 <prvAddCurrentTaskToDelayedList+0x98>)
 8004b80:	f7fe fbc7 	bl	8003312 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004b84:	e026      	b.n	8004bd4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004b86:	68fa      	ldr	r2, [r7, #12]
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	4413      	add	r3, r2
 8004b8c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004b8e:	4b14      	ldr	r3, [pc, #80]	; (8004be0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	68ba      	ldr	r2, [r7, #8]
 8004b94:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004b96:	68ba      	ldr	r2, [r7, #8]
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	429a      	cmp	r2, r3
 8004b9c:	d209      	bcs.n	8004bb2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004b9e:	4b12      	ldr	r3, [pc, #72]	; (8004be8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004ba0:	681a      	ldr	r2, [r3, #0]
 8004ba2:	4b0f      	ldr	r3, [pc, #60]	; (8004be0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	3304      	adds	r3, #4
 8004ba8:	4619      	mov	r1, r3
 8004baa:	4610      	mov	r0, r2
 8004bac:	f7fe fbd5 	bl	800335a <vListInsert>
}
 8004bb0:	e010      	b.n	8004bd4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004bb2:	4b0e      	ldr	r3, [pc, #56]	; (8004bec <prvAddCurrentTaskToDelayedList+0xa0>)
 8004bb4:	681a      	ldr	r2, [r3, #0]
 8004bb6:	4b0a      	ldr	r3, [pc, #40]	; (8004be0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	3304      	adds	r3, #4
 8004bbc:	4619      	mov	r1, r3
 8004bbe:	4610      	mov	r0, r2
 8004bc0:	f7fe fbcb 	bl	800335a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004bc4:	4b0a      	ldr	r3, [pc, #40]	; (8004bf0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	68ba      	ldr	r2, [r7, #8]
 8004bca:	429a      	cmp	r2, r3
 8004bcc:	d202      	bcs.n	8004bd4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004bce:	4a08      	ldr	r2, [pc, #32]	; (8004bf0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	6013      	str	r3, [r2, #0]
}
 8004bd4:	bf00      	nop
 8004bd6:	3710      	adds	r7, #16
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	bd80      	pop	{r7, pc}
 8004bdc:	20000cbc 	.word	0x20000cbc
 8004be0:	200007e4 	.word	0x200007e4
 8004be4:	20000ca4 	.word	0x20000ca4
 8004be8:	20000c74 	.word	0x20000c74
 8004bec:	20000c70 	.word	0x20000c70
 8004bf0:	20000cd8 	.word	0x20000cd8

08004bf4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b08a      	sub	sp, #40	; 0x28
 8004bf8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004bfe:	f000 fb07 	bl	8005210 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004c02:	4b1c      	ldr	r3, [pc, #112]	; (8004c74 <xTimerCreateTimerTask+0x80>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d021      	beq.n	8004c4e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004c0e:	2300      	movs	r3, #0
 8004c10:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004c12:	1d3a      	adds	r2, r7, #4
 8004c14:	f107 0108 	add.w	r1, r7, #8
 8004c18:	f107 030c 	add.w	r3, r7, #12
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	f7fe fb31 	bl	8003284 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004c22:	6879      	ldr	r1, [r7, #4]
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	68fa      	ldr	r2, [r7, #12]
 8004c28:	9202      	str	r2, [sp, #8]
 8004c2a:	9301      	str	r3, [sp, #4]
 8004c2c:	2302      	movs	r3, #2
 8004c2e:	9300      	str	r3, [sp, #0]
 8004c30:	2300      	movs	r3, #0
 8004c32:	460a      	mov	r2, r1
 8004c34:	4910      	ldr	r1, [pc, #64]	; (8004c78 <xTimerCreateTimerTask+0x84>)
 8004c36:	4811      	ldr	r0, [pc, #68]	; (8004c7c <xTimerCreateTimerTask+0x88>)
 8004c38:	f7ff f8de 	bl	8003df8 <xTaskCreateStatic>
 8004c3c:	4603      	mov	r3, r0
 8004c3e:	4a10      	ldr	r2, [pc, #64]	; (8004c80 <xTimerCreateTimerTask+0x8c>)
 8004c40:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004c42:	4b0f      	ldr	r3, [pc, #60]	; (8004c80 <xTimerCreateTimerTask+0x8c>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d001      	beq.n	8004c4e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d10a      	bne.n	8004c6a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8004c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c58:	f383 8811 	msr	BASEPRI, r3
 8004c5c:	f3bf 8f6f 	isb	sy
 8004c60:	f3bf 8f4f 	dsb	sy
 8004c64:	613b      	str	r3, [r7, #16]
}
 8004c66:	bf00      	nop
 8004c68:	e7fe      	b.n	8004c68 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004c6a:	697b      	ldr	r3, [r7, #20]
}
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	3718      	adds	r7, #24
 8004c70:	46bd      	mov	sp, r7
 8004c72:	bd80      	pop	{r7, pc}
 8004c74:	20000d14 	.word	0x20000d14
 8004c78:	08005bc8 	.word	0x08005bc8
 8004c7c:	08004db9 	.word	0x08004db9
 8004c80:	20000d18 	.word	0x20000d18

08004c84 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b08a      	sub	sp, #40	; 0x28
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	60f8      	str	r0, [r7, #12]
 8004c8c:	60b9      	str	r1, [r7, #8]
 8004c8e:	607a      	str	r2, [r7, #4]
 8004c90:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004c92:	2300      	movs	r3, #0
 8004c94:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d10a      	bne.n	8004cb2 <xTimerGenericCommand+0x2e>
	__asm volatile
 8004c9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ca0:	f383 8811 	msr	BASEPRI, r3
 8004ca4:	f3bf 8f6f 	isb	sy
 8004ca8:	f3bf 8f4f 	dsb	sy
 8004cac:	623b      	str	r3, [r7, #32]
}
 8004cae:	bf00      	nop
 8004cb0:	e7fe      	b.n	8004cb0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004cb2:	4b1a      	ldr	r3, [pc, #104]	; (8004d1c <xTimerGenericCommand+0x98>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d02a      	beq.n	8004d10 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004cc6:	68bb      	ldr	r3, [r7, #8]
 8004cc8:	2b05      	cmp	r3, #5
 8004cca:	dc18      	bgt.n	8004cfe <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004ccc:	f7ff feb2 	bl	8004a34 <xTaskGetSchedulerState>
 8004cd0:	4603      	mov	r3, r0
 8004cd2:	2b02      	cmp	r3, #2
 8004cd4:	d109      	bne.n	8004cea <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004cd6:	4b11      	ldr	r3, [pc, #68]	; (8004d1c <xTimerGenericCommand+0x98>)
 8004cd8:	6818      	ldr	r0, [r3, #0]
 8004cda:	f107 0110 	add.w	r1, r7, #16
 8004cde:	2300      	movs	r3, #0
 8004ce0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ce2:	f7fe fca1 	bl	8003628 <xQueueGenericSend>
 8004ce6:	6278      	str	r0, [r7, #36]	; 0x24
 8004ce8:	e012      	b.n	8004d10 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004cea:	4b0c      	ldr	r3, [pc, #48]	; (8004d1c <xTimerGenericCommand+0x98>)
 8004cec:	6818      	ldr	r0, [r3, #0]
 8004cee:	f107 0110 	add.w	r1, r7, #16
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	f7fe fc97 	bl	8003628 <xQueueGenericSend>
 8004cfa:	6278      	str	r0, [r7, #36]	; 0x24
 8004cfc:	e008      	b.n	8004d10 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004cfe:	4b07      	ldr	r3, [pc, #28]	; (8004d1c <xTimerGenericCommand+0x98>)
 8004d00:	6818      	ldr	r0, [r3, #0]
 8004d02:	f107 0110 	add.w	r1, r7, #16
 8004d06:	2300      	movs	r3, #0
 8004d08:	683a      	ldr	r2, [r7, #0]
 8004d0a:	f7fe fd8b 	bl	8003824 <xQueueGenericSendFromISR>
 8004d0e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004d12:	4618      	mov	r0, r3
 8004d14:	3728      	adds	r7, #40	; 0x28
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bd80      	pop	{r7, pc}
 8004d1a:	bf00      	nop
 8004d1c:	20000d14 	.word	0x20000d14

08004d20 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b088      	sub	sp, #32
 8004d24:	af02      	add	r7, sp, #8
 8004d26:	6078      	str	r0, [r7, #4]
 8004d28:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d2a:	4b22      	ldr	r3, [pc, #136]	; (8004db4 <prvProcessExpiredTimer+0x94>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	68db      	ldr	r3, [r3, #12]
 8004d30:	68db      	ldr	r3, [r3, #12]
 8004d32:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004d34:	697b      	ldr	r3, [r7, #20]
 8004d36:	3304      	adds	r3, #4
 8004d38:	4618      	mov	r0, r3
 8004d3a:	f7fe fb47 	bl	80033cc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004d44:	f003 0304 	and.w	r3, r3, #4
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d022      	beq.n	8004d92 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004d4c:	697b      	ldr	r3, [r7, #20]
 8004d4e:	699a      	ldr	r2, [r3, #24]
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	18d1      	adds	r1, r2, r3
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	683a      	ldr	r2, [r7, #0]
 8004d58:	6978      	ldr	r0, [r7, #20]
 8004d5a:	f000 f8d1 	bl	8004f00 <prvInsertTimerInActiveList>
 8004d5e:	4603      	mov	r3, r0
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d01f      	beq.n	8004da4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004d64:	2300      	movs	r3, #0
 8004d66:	9300      	str	r3, [sp, #0]
 8004d68:	2300      	movs	r3, #0
 8004d6a:	687a      	ldr	r2, [r7, #4]
 8004d6c:	2100      	movs	r1, #0
 8004d6e:	6978      	ldr	r0, [r7, #20]
 8004d70:	f7ff ff88 	bl	8004c84 <xTimerGenericCommand>
 8004d74:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004d76:	693b      	ldr	r3, [r7, #16]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d113      	bne.n	8004da4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8004d7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d80:	f383 8811 	msr	BASEPRI, r3
 8004d84:	f3bf 8f6f 	isb	sy
 8004d88:	f3bf 8f4f 	dsb	sy
 8004d8c:	60fb      	str	r3, [r7, #12]
}
 8004d8e:	bf00      	nop
 8004d90:	e7fe      	b.n	8004d90 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004d92:	697b      	ldr	r3, [r7, #20]
 8004d94:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004d98:	f023 0301 	bic.w	r3, r3, #1
 8004d9c:	b2da      	uxtb	r2, r3
 8004d9e:	697b      	ldr	r3, [r7, #20]
 8004da0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004da4:	697b      	ldr	r3, [r7, #20]
 8004da6:	6a1b      	ldr	r3, [r3, #32]
 8004da8:	6978      	ldr	r0, [r7, #20]
 8004daa:	4798      	blx	r3
}
 8004dac:	bf00      	nop
 8004dae:	3718      	adds	r7, #24
 8004db0:	46bd      	mov	sp, r7
 8004db2:	bd80      	pop	{r7, pc}
 8004db4:	20000d0c 	.word	0x20000d0c

08004db8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b084      	sub	sp, #16
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004dc0:	f107 0308 	add.w	r3, r7, #8
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	f000 f857 	bl	8004e78 <prvGetNextExpireTime>
 8004dca:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	4619      	mov	r1, r3
 8004dd0:	68f8      	ldr	r0, [r7, #12]
 8004dd2:	f000 f803 	bl	8004ddc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004dd6:	f000 f8d5 	bl	8004f84 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004dda:	e7f1      	b.n	8004dc0 <prvTimerTask+0x8>

08004ddc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b084      	sub	sp, #16
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
 8004de4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004de6:	f7ff fa43 	bl	8004270 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004dea:	f107 0308 	add.w	r3, r7, #8
 8004dee:	4618      	mov	r0, r3
 8004df0:	f000 f866 	bl	8004ec0 <prvSampleTimeNow>
 8004df4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d130      	bne.n	8004e5e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d10a      	bne.n	8004e18 <prvProcessTimerOrBlockTask+0x3c>
 8004e02:	687a      	ldr	r2, [r7, #4]
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	429a      	cmp	r2, r3
 8004e08:	d806      	bhi.n	8004e18 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004e0a:	f7ff fa3f 	bl	800428c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004e0e:	68f9      	ldr	r1, [r7, #12]
 8004e10:	6878      	ldr	r0, [r7, #4]
 8004e12:	f7ff ff85 	bl	8004d20 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004e16:	e024      	b.n	8004e62 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d008      	beq.n	8004e30 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004e1e:	4b13      	ldr	r3, [pc, #76]	; (8004e6c <prvProcessTimerOrBlockTask+0x90>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d101      	bne.n	8004e2c <prvProcessTimerOrBlockTask+0x50>
 8004e28:	2301      	movs	r3, #1
 8004e2a:	e000      	b.n	8004e2e <prvProcessTimerOrBlockTask+0x52>
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004e30:	4b0f      	ldr	r3, [pc, #60]	; (8004e70 <prvProcessTimerOrBlockTask+0x94>)
 8004e32:	6818      	ldr	r0, [r3, #0]
 8004e34:	687a      	ldr	r2, [r7, #4]
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	1ad3      	subs	r3, r2, r3
 8004e3a:	683a      	ldr	r2, [r7, #0]
 8004e3c:	4619      	mov	r1, r3
 8004e3e:	f7fe ffa7 	bl	8003d90 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004e42:	f7ff fa23 	bl	800428c <xTaskResumeAll>
 8004e46:	4603      	mov	r3, r0
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d10a      	bne.n	8004e62 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004e4c:	4b09      	ldr	r3, [pc, #36]	; (8004e74 <prvProcessTimerOrBlockTask+0x98>)
 8004e4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e52:	601a      	str	r2, [r3, #0]
 8004e54:	f3bf 8f4f 	dsb	sy
 8004e58:	f3bf 8f6f 	isb	sy
}
 8004e5c:	e001      	b.n	8004e62 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004e5e:	f7ff fa15 	bl	800428c <xTaskResumeAll>
}
 8004e62:	bf00      	nop
 8004e64:	3710      	adds	r7, #16
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bd80      	pop	{r7, pc}
 8004e6a:	bf00      	nop
 8004e6c:	20000d10 	.word	0x20000d10
 8004e70:	20000d14 	.word	0x20000d14
 8004e74:	e000ed04 	.word	0xe000ed04

08004e78 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004e78:	b480      	push	{r7}
 8004e7a:	b085      	sub	sp, #20
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004e80:	4b0e      	ldr	r3, [pc, #56]	; (8004ebc <prvGetNextExpireTime+0x44>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d101      	bne.n	8004e8e <prvGetNextExpireTime+0x16>
 8004e8a:	2201      	movs	r2, #1
 8004e8c:	e000      	b.n	8004e90 <prvGetNextExpireTime+0x18>
 8004e8e:	2200      	movs	r2, #0
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d105      	bne.n	8004ea8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004e9c:	4b07      	ldr	r3, [pc, #28]	; (8004ebc <prvGetNextExpireTime+0x44>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	68db      	ldr	r3, [r3, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	60fb      	str	r3, [r7, #12]
 8004ea6:	e001      	b.n	8004eac <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004eac:	68fb      	ldr	r3, [r7, #12]
}
 8004eae:	4618      	mov	r0, r3
 8004eb0:	3714      	adds	r7, #20
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb8:	4770      	bx	lr
 8004eba:	bf00      	nop
 8004ebc:	20000d0c 	.word	0x20000d0c

08004ec0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b084      	sub	sp, #16
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004ec8:	f7ff fa7e 	bl	80043c8 <xTaskGetTickCount>
 8004ecc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004ece:	4b0b      	ldr	r3, [pc, #44]	; (8004efc <prvSampleTimeNow+0x3c>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	68fa      	ldr	r2, [r7, #12]
 8004ed4:	429a      	cmp	r2, r3
 8004ed6:	d205      	bcs.n	8004ee4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004ed8:	f000 f936 	bl	8005148 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2201      	movs	r2, #1
 8004ee0:	601a      	str	r2, [r3, #0]
 8004ee2:	e002      	b.n	8004eea <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004eea:	4a04      	ldr	r2, [pc, #16]	; (8004efc <prvSampleTimeNow+0x3c>)
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
}
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	3710      	adds	r7, #16
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	bd80      	pop	{r7, pc}
 8004efa:	bf00      	nop
 8004efc:	20000d1c 	.word	0x20000d1c

08004f00 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b086      	sub	sp, #24
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	60f8      	str	r0, [r7, #12]
 8004f08:	60b9      	str	r1, [r7, #8]
 8004f0a:	607a      	str	r2, [r7, #4]
 8004f0c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004f0e:	2300      	movs	r3, #0
 8004f10:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	68ba      	ldr	r2, [r7, #8]
 8004f16:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	68fa      	ldr	r2, [r7, #12]
 8004f1c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004f1e:	68ba      	ldr	r2, [r7, #8]
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	429a      	cmp	r2, r3
 8004f24:	d812      	bhi.n	8004f4c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f26:	687a      	ldr	r2, [r7, #4]
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	1ad2      	subs	r2, r2, r3
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	699b      	ldr	r3, [r3, #24]
 8004f30:	429a      	cmp	r2, r3
 8004f32:	d302      	bcc.n	8004f3a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004f34:	2301      	movs	r3, #1
 8004f36:	617b      	str	r3, [r7, #20]
 8004f38:	e01b      	b.n	8004f72 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004f3a:	4b10      	ldr	r3, [pc, #64]	; (8004f7c <prvInsertTimerInActiveList+0x7c>)
 8004f3c:	681a      	ldr	r2, [r3, #0]
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	3304      	adds	r3, #4
 8004f42:	4619      	mov	r1, r3
 8004f44:	4610      	mov	r0, r2
 8004f46:	f7fe fa08 	bl	800335a <vListInsert>
 8004f4a:	e012      	b.n	8004f72 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004f4c:	687a      	ldr	r2, [r7, #4]
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	429a      	cmp	r2, r3
 8004f52:	d206      	bcs.n	8004f62 <prvInsertTimerInActiveList+0x62>
 8004f54:	68ba      	ldr	r2, [r7, #8]
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	429a      	cmp	r2, r3
 8004f5a:	d302      	bcc.n	8004f62 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	617b      	str	r3, [r7, #20]
 8004f60:	e007      	b.n	8004f72 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004f62:	4b07      	ldr	r3, [pc, #28]	; (8004f80 <prvInsertTimerInActiveList+0x80>)
 8004f64:	681a      	ldr	r2, [r3, #0]
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	3304      	adds	r3, #4
 8004f6a:	4619      	mov	r1, r3
 8004f6c:	4610      	mov	r0, r2
 8004f6e:	f7fe f9f4 	bl	800335a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004f72:	697b      	ldr	r3, [r7, #20]
}
 8004f74:	4618      	mov	r0, r3
 8004f76:	3718      	adds	r7, #24
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	bd80      	pop	{r7, pc}
 8004f7c:	20000d10 	.word	0x20000d10
 8004f80:	20000d0c 	.word	0x20000d0c

08004f84 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b08e      	sub	sp, #56	; 0x38
 8004f88:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004f8a:	e0ca      	b.n	8005122 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	da18      	bge.n	8004fc4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004f92:	1d3b      	adds	r3, r7, #4
 8004f94:	3304      	adds	r3, #4
 8004f96:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004f98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d10a      	bne.n	8004fb4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8004f9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fa2:	f383 8811 	msr	BASEPRI, r3
 8004fa6:	f3bf 8f6f 	isb	sy
 8004faa:	f3bf 8f4f 	dsb	sy
 8004fae:	61fb      	str	r3, [r7, #28]
}
 8004fb0:	bf00      	nop
 8004fb2:	e7fe      	b.n	8004fb2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004fb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004fba:	6850      	ldr	r0, [r2, #4]
 8004fbc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004fbe:	6892      	ldr	r2, [r2, #8]
 8004fc0:	4611      	mov	r1, r2
 8004fc2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	f2c0 80ab 	blt.w	8005122 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004fd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fd2:	695b      	ldr	r3, [r3, #20]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d004      	beq.n	8004fe2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fda:	3304      	adds	r3, #4
 8004fdc:	4618      	mov	r0, r3
 8004fde:	f7fe f9f5 	bl	80033cc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004fe2:	463b      	mov	r3, r7
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	f7ff ff6b 	bl	8004ec0 <prvSampleTimeNow>
 8004fea:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2b09      	cmp	r3, #9
 8004ff0:	f200 8096 	bhi.w	8005120 <prvProcessReceivedCommands+0x19c>
 8004ff4:	a201      	add	r2, pc, #4	; (adr r2, 8004ffc <prvProcessReceivedCommands+0x78>)
 8004ff6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ffa:	bf00      	nop
 8004ffc:	08005025 	.word	0x08005025
 8005000:	08005025 	.word	0x08005025
 8005004:	08005025 	.word	0x08005025
 8005008:	08005099 	.word	0x08005099
 800500c:	080050ad 	.word	0x080050ad
 8005010:	080050f7 	.word	0x080050f7
 8005014:	08005025 	.word	0x08005025
 8005018:	08005025 	.word	0x08005025
 800501c:	08005099 	.word	0x08005099
 8005020:	080050ad 	.word	0x080050ad
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005026:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800502a:	f043 0301 	orr.w	r3, r3, #1
 800502e:	b2da      	uxtb	r2, r3
 8005030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005032:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005036:	68ba      	ldr	r2, [r7, #8]
 8005038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800503a:	699b      	ldr	r3, [r3, #24]
 800503c:	18d1      	adds	r1, r2, r3
 800503e:	68bb      	ldr	r3, [r7, #8]
 8005040:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005042:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005044:	f7ff ff5c 	bl	8004f00 <prvInsertTimerInActiveList>
 8005048:	4603      	mov	r3, r0
 800504a:	2b00      	cmp	r3, #0
 800504c:	d069      	beq.n	8005122 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800504e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005050:	6a1b      	ldr	r3, [r3, #32]
 8005052:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005054:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005058:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800505c:	f003 0304 	and.w	r3, r3, #4
 8005060:	2b00      	cmp	r3, #0
 8005062:	d05e      	beq.n	8005122 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005064:	68ba      	ldr	r2, [r7, #8]
 8005066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005068:	699b      	ldr	r3, [r3, #24]
 800506a:	441a      	add	r2, r3
 800506c:	2300      	movs	r3, #0
 800506e:	9300      	str	r3, [sp, #0]
 8005070:	2300      	movs	r3, #0
 8005072:	2100      	movs	r1, #0
 8005074:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005076:	f7ff fe05 	bl	8004c84 <xTimerGenericCommand>
 800507a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800507c:	6a3b      	ldr	r3, [r7, #32]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d14f      	bne.n	8005122 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8005082:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005086:	f383 8811 	msr	BASEPRI, r3
 800508a:	f3bf 8f6f 	isb	sy
 800508e:	f3bf 8f4f 	dsb	sy
 8005092:	61bb      	str	r3, [r7, #24]
}
 8005094:	bf00      	nop
 8005096:	e7fe      	b.n	8005096 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800509a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800509e:	f023 0301 	bic.w	r3, r3, #1
 80050a2:	b2da      	uxtb	r2, r3
 80050a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80050aa:	e03a      	b.n	8005122 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80050ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80050b2:	f043 0301 	orr.w	r3, r3, #1
 80050b6:	b2da      	uxtb	r2, r3
 80050b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80050be:	68ba      	ldr	r2, [r7, #8]
 80050c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050c2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80050c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050c6:	699b      	ldr	r3, [r3, #24]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d10a      	bne.n	80050e2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80050cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050d0:	f383 8811 	msr	BASEPRI, r3
 80050d4:	f3bf 8f6f 	isb	sy
 80050d8:	f3bf 8f4f 	dsb	sy
 80050dc:	617b      	str	r3, [r7, #20]
}
 80050de:	bf00      	nop
 80050e0:	e7fe      	b.n	80050e0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80050e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050e4:	699a      	ldr	r2, [r3, #24]
 80050e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050e8:	18d1      	adds	r1, r2, r3
 80050ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80050f0:	f7ff ff06 	bl	8004f00 <prvInsertTimerInActiveList>
					break;
 80050f4:	e015      	b.n	8005122 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80050f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80050fc:	f003 0302 	and.w	r3, r3, #2
 8005100:	2b00      	cmp	r3, #0
 8005102:	d103      	bne.n	800510c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8005104:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005106:	f000 fbdb 	bl	80058c0 <vPortFree>
 800510a:	e00a      	b.n	8005122 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800510c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800510e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005112:	f023 0301 	bic.w	r3, r3, #1
 8005116:	b2da      	uxtb	r2, r3
 8005118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800511a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800511e:	e000      	b.n	8005122 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8005120:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005122:	4b08      	ldr	r3, [pc, #32]	; (8005144 <prvProcessReceivedCommands+0x1c0>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	1d39      	adds	r1, r7, #4
 8005128:	2200      	movs	r2, #0
 800512a:	4618      	mov	r0, r3
 800512c:	f7fe fc16 	bl	800395c <xQueueReceive>
 8005130:	4603      	mov	r3, r0
 8005132:	2b00      	cmp	r3, #0
 8005134:	f47f af2a 	bne.w	8004f8c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8005138:	bf00      	nop
 800513a:	bf00      	nop
 800513c:	3730      	adds	r7, #48	; 0x30
 800513e:	46bd      	mov	sp, r7
 8005140:	bd80      	pop	{r7, pc}
 8005142:	bf00      	nop
 8005144:	20000d14 	.word	0x20000d14

08005148 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b088      	sub	sp, #32
 800514c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800514e:	e048      	b.n	80051e2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005150:	4b2d      	ldr	r3, [pc, #180]	; (8005208 <prvSwitchTimerLists+0xc0>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	68db      	ldr	r3, [r3, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800515a:	4b2b      	ldr	r3, [pc, #172]	; (8005208 <prvSwitchTimerLists+0xc0>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	68db      	ldr	r3, [r3, #12]
 8005160:	68db      	ldr	r3, [r3, #12]
 8005162:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	3304      	adds	r3, #4
 8005168:	4618      	mov	r0, r3
 800516a:	f7fe f92f 	bl	80033cc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	6a1b      	ldr	r3, [r3, #32]
 8005172:	68f8      	ldr	r0, [r7, #12]
 8005174:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800517c:	f003 0304 	and.w	r3, r3, #4
 8005180:	2b00      	cmp	r3, #0
 8005182:	d02e      	beq.n	80051e2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	699b      	ldr	r3, [r3, #24]
 8005188:	693a      	ldr	r2, [r7, #16]
 800518a:	4413      	add	r3, r2
 800518c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800518e:	68ba      	ldr	r2, [r7, #8]
 8005190:	693b      	ldr	r3, [r7, #16]
 8005192:	429a      	cmp	r2, r3
 8005194:	d90e      	bls.n	80051b4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	68ba      	ldr	r2, [r7, #8]
 800519a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	68fa      	ldr	r2, [r7, #12]
 80051a0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80051a2:	4b19      	ldr	r3, [pc, #100]	; (8005208 <prvSwitchTimerLists+0xc0>)
 80051a4:	681a      	ldr	r2, [r3, #0]
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	3304      	adds	r3, #4
 80051aa:	4619      	mov	r1, r3
 80051ac:	4610      	mov	r0, r2
 80051ae:	f7fe f8d4 	bl	800335a <vListInsert>
 80051b2:	e016      	b.n	80051e2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80051b4:	2300      	movs	r3, #0
 80051b6:	9300      	str	r3, [sp, #0]
 80051b8:	2300      	movs	r3, #0
 80051ba:	693a      	ldr	r2, [r7, #16]
 80051bc:	2100      	movs	r1, #0
 80051be:	68f8      	ldr	r0, [r7, #12]
 80051c0:	f7ff fd60 	bl	8004c84 <xTimerGenericCommand>
 80051c4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d10a      	bne.n	80051e2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80051cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051d0:	f383 8811 	msr	BASEPRI, r3
 80051d4:	f3bf 8f6f 	isb	sy
 80051d8:	f3bf 8f4f 	dsb	sy
 80051dc:	603b      	str	r3, [r7, #0]
}
 80051de:	bf00      	nop
 80051e0:	e7fe      	b.n	80051e0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80051e2:	4b09      	ldr	r3, [pc, #36]	; (8005208 <prvSwitchTimerLists+0xc0>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d1b1      	bne.n	8005150 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80051ec:	4b06      	ldr	r3, [pc, #24]	; (8005208 <prvSwitchTimerLists+0xc0>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80051f2:	4b06      	ldr	r3, [pc, #24]	; (800520c <prvSwitchTimerLists+0xc4>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4a04      	ldr	r2, [pc, #16]	; (8005208 <prvSwitchTimerLists+0xc0>)
 80051f8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80051fa:	4a04      	ldr	r2, [pc, #16]	; (800520c <prvSwitchTimerLists+0xc4>)
 80051fc:	697b      	ldr	r3, [r7, #20]
 80051fe:	6013      	str	r3, [r2, #0]
}
 8005200:	bf00      	nop
 8005202:	3718      	adds	r7, #24
 8005204:	46bd      	mov	sp, r7
 8005206:	bd80      	pop	{r7, pc}
 8005208:	20000d0c 	.word	0x20000d0c
 800520c:	20000d10 	.word	0x20000d10

08005210 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b082      	sub	sp, #8
 8005214:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005216:	f000 f965 	bl	80054e4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800521a:	4b15      	ldr	r3, [pc, #84]	; (8005270 <prvCheckForValidListAndQueue+0x60>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d120      	bne.n	8005264 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005222:	4814      	ldr	r0, [pc, #80]	; (8005274 <prvCheckForValidListAndQueue+0x64>)
 8005224:	f7fe f848 	bl	80032b8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005228:	4813      	ldr	r0, [pc, #76]	; (8005278 <prvCheckForValidListAndQueue+0x68>)
 800522a:	f7fe f845 	bl	80032b8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800522e:	4b13      	ldr	r3, [pc, #76]	; (800527c <prvCheckForValidListAndQueue+0x6c>)
 8005230:	4a10      	ldr	r2, [pc, #64]	; (8005274 <prvCheckForValidListAndQueue+0x64>)
 8005232:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005234:	4b12      	ldr	r3, [pc, #72]	; (8005280 <prvCheckForValidListAndQueue+0x70>)
 8005236:	4a10      	ldr	r2, [pc, #64]	; (8005278 <prvCheckForValidListAndQueue+0x68>)
 8005238:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800523a:	2300      	movs	r3, #0
 800523c:	9300      	str	r3, [sp, #0]
 800523e:	4b11      	ldr	r3, [pc, #68]	; (8005284 <prvCheckForValidListAndQueue+0x74>)
 8005240:	4a11      	ldr	r2, [pc, #68]	; (8005288 <prvCheckForValidListAndQueue+0x78>)
 8005242:	2110      	movs	r1, #16
 8005244:	200a      	movs	r0, #10
 8005246:	f7fe f953 	bl	80034f0 <xQueueGenericCreateStatic>
 800524a:	4603      	mov	r3, r0
 800524c:	4a08      	ldr	r2, [pc, #32]	; (8005270 <prvCheckForValidListAndQueue+0x60>)
 800524e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005250:	4b07      	ldr	r3, [pc, #28]	; (8005270 <prvCheckForValidListAndQueue+0x60>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d005      	beq.n	8005264 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005258:	4b05      	ldr	r3, [pc, #20]	; (8005270 <prvCheckForValidListAndQueue+0x60>)
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	490b      	ldr	r1, [pc, #44]	; (800528c <prvCheckForValidListAndQueue+0x7c>)
 800525e:	4618      	mov	r0, r3
 8005260:	f7fe fd6c 	bl	8003d3c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005264:	f000 f96e 	bl	8005544 <vPortExitCritical>
}
 8005268:	bf00      	nop
 800526a:	46bd      	mov	sp, r7
 800526c:	bd80      	pop	{r7, pc}
 800526e:	bf00      	nop
 8005270:	20000d14 	.word	0x20000d14
 8005274:	20000ce4 	.word	0x20000ce4
 8005278:	20000cf8 	.word	0x20000cf8
 800527c:	20000d0c 	.word	0x20000d0c
 8005280:	20000d10 	.word	0x20000d10
 8005284:	20000dc0 	.word	0x20000dc0
 8005288:	20000d20 	.word	0x20000d20
 800528c:	08005bd0 	.word	0x08005bd0

08005290 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005290:	b480      	push	{r7}
 8005292:	b085      	sub	sp, #20
 8005294:	af00      	add	r7, sp, #0
 8005296:	60f8      	str	r0, [r7, #12]
 8005298:	60b9      	str	r1, [r7, #8]
 800529a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	3b04      	subs	r3, #4
 80052a0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80052a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	3b04      	subs	r3, #4
 80052ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	f023 0201 	bic.w	r2, r3, #1
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	3b04      	subs	r3, #4
 80052be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80052c0:	4a0c      	ldr	r2, [pc, #48]	; (80052f4 <pxPortInitialiseStack+0x64>)
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	3b14      	subs	r3, #20
 80052ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80052cc:	687a      	ldr	r2, [r7, #4]
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	3b04      	subs	r3, #4
 80052d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	f06f 0202 	mvn.w	r2, #2
 80052de:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	3b20      	subs	r3, #32
 80052e4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80052e6:	68fb      	ldr	r3, [r7, #12]
}
 80052e8:	4618      	mov	r0, r3
 80052ea:	3714      	adds	r7, #20
 80052ec:	46bd      	mov	sp, r7
 80052ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f2:	4770      	bx	lr
 80052f4:	080052f9 	.word	0x080052f9

080052f8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80052f8:	b480      	push	{r7}
 80052fa:	b085      	sub	sp, #20
 80052fc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80052fe:	2300      	movs	r3, #0
 8005300:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005302:	4b12      	ldr	r3, [pc, #72]	; (800534c <prvTaskExitError+0x54>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f1b3 3fff 	cmp.w	r3, #4294967295
 800530a:	d00a      	beq.n	8005322 <prvTaskExitError+0x2a>
	__asm volatile
 800530c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005310:	f383 8811 	msr	BASEPRI, r3
 8005314:	f3bf 8f6f 	isb	sy
 8005318:	f3bf 8f4f 	dsb	sy
 800531c:	60fb      	str	r3, [r7, #12]
}
 800531e:	bf00      	nop
 8005320:	e7fe      	b.n	8005320 <prvTaskExitError+0x28>
	__asm volatile
 8005322:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005326:	f383 8811 	msr	BASEPRI, r3
 800532a:	f3bf 8f6f 	isb	sy
 800532e:	f3bf 8f4f 	dsb	sy
 8005332:	60bb      	str	r3, [r7, #8]
}
 8005334:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005336:	bf00      	nop
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d0fc      	beq.n	8005338 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800533e:	bf00      	nop
 8005340:	bf00      	nop
 8005342:	3714      	adds	r7, #20
 8005344:	46bd      	mov	sp, r7
 8005346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534a:	4770      	bx	lr
 800534c:	20000010 	.word	0x20000010

08005350 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005350:	4b07      	ldr	r3, [pc, #28]	; (8005370 <pxCurrentTCBConst2>)
 8005352:	6819      	ldr	r1, [r3, #0]
 8005354:	6808      	ldr	r0, [r1, #0]
 8005356:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800535a:	f380 8809 	msr	PSP, r0
 800535e:	f3bf 8f6f 	isb	sy
 8005362:	f04f 0000 	mov.w	r0, #0
 8005366:	f380 8811 	msr	BASEPRI, r0
 800536a:	4770      	bx	lr
 800536c:	f3af 8000 	nop.w

08005370 <pxCurrentTCBConst2>:
 8005370:	200007e4 	.word	0x200007e4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005374:	bf00      	nop
 8005376:	bf00      	nop

08005378 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005378:	4808      	ldr	r0, [pc, #32]	; (800539c <prvPortStartFirstTask+0x24>)
 800537a:	6800      	ldr	r0, [r0, #0]
 800537c:	6800      	ldr	r0, [r0, #0]
 800537e:	f380 8808 	msr	MSP, r0
 8005382:	f04f 0000 	mov.w	r0, #0
 8005386:	f380 8814 	msr	CONTROL, r0
 800538a:	b662      	cpsie	i
 800538c:	b661      	cpsie	f
 800538e:	f3bf 8f4f 	dsb	sy
 8005392:	f3bf 8f6f 	isb	sy
 8005396:	df00      	svc	0
 8005398:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800539a:	bf00      	nop
 800539c:	e000ed08 	.word	0xe000ed08

080053a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b086      	sub	sp, #24
 80053a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80053a6:	4b46      	ldr	r3, [pc, #280]	; (80054c0 <xPortStartScheduler+0x120>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4a46      	ldr	r2, [pc, #280]	; (80054c4 <xPortStartScheduler+0x124>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d10a      	bne.n	80053c6 <xPortStartScheduler+0x26>
	__asm volatile
 80053b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053b4:	f383 8811 	msr	BASEPRI, r3
 80053b8:	f3bf 8f6f 	isb	sy
 80053bc:	f3bf 8f4f 	dsb	sy
 80053c0:	613b      	str	r3, [r7, #16]
}
 80053c2:	bf00      	nop
 80053c4:	e7fe      	b.n	80053c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80053c6:	4b3e      	ldr	r3, [pc, #248]	; (80054c0 <xPortStartScheduler+0x120>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4a3f      	ldr	r2, [pc, #252]	; (80054c8 <xPortStartScheduler+0x128>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d10a      	bne.n	80053e6 <xPortStartScheduler+0x46>
	__asm volatile
 80053d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053d4:	f383 8811 	msr	BASEPRI, r3
 80053d8:	f3bf 8f6f 	isb	sy
 80053dc:	f3bf 8f4f 	dsb	sy
 80053e0:	60fb      	str	r3, [r7, #12]
}
 80053e2:	bf00      	nop
 80053e4:	e7fe      	b.n	80053e4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80053e6:	4b39      	ldr	r3, [pc, #228]	; (80054cc <xPortStartScheduler+0x12c>)
 80053e8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80053ea:	697b      	ldr	r3, [r7, #20]
 80053ec:	781b      	ldrb	r3, [r3, #0]
 80053ee:	b2db      	uxtb	r3, r3
 80053f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80053f2:	697b      	ldr	r3, [r7, #20]
 80053f4:	22ff      	movs	r2, #255	; 0xff
 80053f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80053f8:	697b      	ldr	r3, [r7, #20]
 80053fa:	781b      	ldrb	r3, [r3, #0]
 80053fc:	b2db      	uxtb	r3, r3
 80053fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005400:	78fb      	ldrb	r3, [r7, #3]
 8005402:	b2db      	uxtb	r3, r3
 8005404:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005408:	b2da      	uxtb	r2, r3
 800540a:	4b31      	ldr	r3, [pc, #196]	; (80054d0 <xPortStartScheduler+0x130>)
 800540c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800540e:	4b31      	ldr	r3, [pc, #196]	; (80054d4 <xPortStartScheduler+0x134>)
 8005410:	2207      	movs	r2, #7
 8005412:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005414:	e009      	b.n	800542a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005416:	4b2f      	ldr	r3, [pc, #188]	; (80054d4 <xPortStartScheduler+0x134>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	3b01      	subs	r3, #1
 800541c:	4a2d      	ldr	r2, [pc, #180]	; (80054d4 <xPortStartScheduler+0x134>)
 800541e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005420:	78fb      	ldrb	r3, [r7, #3]
 8005422:	b2db      	uxtb	r3, r3
 8005424:	005b      	lsls	r3, r3, #1
 8005426:	b2db      	uxtb	r3, r3
 8005428:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800542a:	78fb      	ldrb	r3, [r7, #3]
 800542c:	b2db      	uxtb	r3, r3
 800542e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005432:	2b80      	cmp	r3, #128	; 0x80
 8005434:	d0ef      	beq.n	8005416 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005436:	4b27      	ldr	r3, [pc, #156]	; (80054d4 <xPortStartScheduler+0x134>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f1c3 0307 	rsb	r3, r3, #7
 800543e:	2b04      	cmp	r3, #4
 8005440:	d00a      	beq.n	8005458 <xPortStartScheduler+0xb8>
	__asm volatile
 8005442:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005446:	f383 8811 	msr	BASEPRI, r3
 800544a:	f3bf 8f6f 	isb	sy
 800544e:	f3bf 8f4f 	dsb	sy
 8005452:	60bb      	str	r3, [r7, #8]
}
 8005454:	bf00      	nop
 8005456:	e7fe      	b.n	8005456 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005458:	4b1e      	ldr	r3, [pc, #120]	; (80054d4 <xPortStartScheduler+0x134>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	021b      	lsls	r3, r3, #8
 800545e:	4a1d      	ldr	r2, [pc, #116]	; (80054d4 <xPortStartScheduler+0x134>)
 8005460:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005462:	4b1c      	ldr	r3, [pc, #112]	; (80054d4 <xPortStartScheduler+0x134>)
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800546a:	4a1a      	ldr	r2, [pc, #104]	; (80054d4 <xPortStartScheduler+0x134>)
 800546c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	b2da      	uxtb	r2, r3
 8005472:	697b      	ldr	r3, [r7, #20]
 8005474:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005476:	4b18      	ldr	r3, [pc, #96]	; (80054d8 <xPortStartScheduler+0x138>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4a17      	ldr	r2, [pc, #92]	; (80054d8 <xPortStartScheduler+0x138>)
 800547c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005480:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005482:	4b15      	ldr	r3, [pc, #84]	; (80054d8 <xPortStartScheduler+0x138>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4a14      	ldr	r2, [pc, #80]	; (80054d8 <xPortStartScheduler+0x138>)
 8005488:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800548c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800548e:	f000 f8dd 	bl	800564c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005492:	4b12      	ldr	r3, [pc, #72]	; (80054dc <xPortStartScheduler+0x13c>)
 8005494:	2200      	movs	r2, #0
 8005496:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005498:	f000 f8fc 	bl	8005694 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800549c:	4b10      	ldr	r3, [pc, #64]	; (80054e0 <xPortStartScheduler+0x140>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4a0f      	ldr	r2, [pc, #60]	; (80054e0 <xPortStartScheduler+0x140>)
 80054a2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80054a6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80054a8:	f7ff ff66 	bl	8005378 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80054ac:	f7ff f856 	bl	800455c <vTaskSwitchContext>
	prvTaskExitError();
 80054b0:	f7ff ff22 	bl	80052f8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80054b4:	2300      	movs	r3, #0
}
 80054b6:	4618      	mov	r0, r3
 80054b8:	3718      	adds	r7, #24
 80054ba:	46bd      	mov	sp, r7
 80054bc:	bd80      	pop	{r7, pc}
 80054be:	bf00      	nop
 80054c0:	e000ed00 	.word	0xe000ed00
 80054c4:	410fc271 	.word	0x410fc271
 80054c8:	410fc270 	.word	0x410fc270
 80054cc:	e000e400 	.word	0xe000e400
 80054d0:	20000e10 	.word	0x20000e10
 80054d4:	20000e14 	.word	0x20000e14
 80054d8:	e000ed20 	.word	0xe000ed20
 80054dc:	20000010 	.word	0x20000010
 80054e0:	e000ef34 	.word	0xe000ef34

080054e4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80054e4:	b480      	push	{r7}
 80054e6:	b083      	sub	sp, #12
 80054e8:	af00      	add	r7, sp, #0
	__asm volatile
 80054ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054ee:	f383 8811 	msr	BASEPRI, r3
 80054f2:	f3bf 8f6f 	isb	sy
 80054f6:	f3bf 8f4f 	dsb	sy
 80054fa:	607b      	str	r3, [r7, #4]
}
 80054fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80054fe:	4b0f      	ldr	r3, [pc, #60]	; (800553c <vPortEnterCritical+0x58>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	3301      	adds	r3, #1
 8005504:	4a0d      	ldr	r2, [pc, #52]	; (800553c <vPortEnterCritical+0x58>)
 8005506:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005508:	4b0c      	ldr	r3, [pc, #48]	; (800553c <vPortEnterCritical+0x58>)
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	2b01      	cmp	r3, #1
 800550e:	d10f      	bne.n	8005530 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005510:	4b0b      	ldr	r3, [pc, #44]	; (8005540 <vPortEnterCritical+0x5c>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	b2db      	uxtb	r3, r3
 8005516:	2b00      	cmp	r3, #0
 8005518:	d00a      	beq.n	8005530 <vPortEnterCritical+0x4c>
	__asm volatile
 800551a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800551e:	f383 8811 	msr	BASEPRI, r3
 8005522:	f3bf 8f6f 	isb	sy
 8005526:	f3bf 8f4f 	dsb	sy
 800552a:	603b      	str	r3, [r7, #0]
}
 800552c:	bf00      	nop
 800552e:	e7fe      	b.n	800552e <vPortEnterCritical+0x4a>
	}
}
 8005530:	bf00      	nop
 8005532:	370c      	adds	r7, #12
 8005534:	46bd      	mov	sp, r7
 8005536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553a:	4770      	bx	lr
 800553c:	20000010 	.word	0x20000010
 8005540:	e000ed04 	.word	0xe000ed04

08005544 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005544:	b480      	push	{r7}
 8005546:	b083      	sub	sp, #12
 8005548:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800554a:	4b12      	ldr	r3, [pc, #72]	; (8005594 <vPortExitCritical+0x50>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d10a      	bne.n	8005568 <vPortExitCritical+0x24>
	__asm volatile
 8005552:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005556:	f383 8811 	msr	BASEPRI, r3
 800555a:	f3bf 8f6f 	isb	sy
 800555e:	f3bf 8f4f 	dsb	sy
 8005562:	607b      	str	r3, [r7, #4]
}
 8005564:	bf00      	nop
 8005566:	e7fe      	b.n	8005566 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005568:	4b0a      	ldr	r3, [pc, #40]	; (8005594 <vPortExitCritical+0x50>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	3b01      	subs	r3, #1
 800556e:	4a09      	ldr	r2, [pc, #36]	; (8005594 <vPortExitCritical+0x50>)
 8005570:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005572:	4b08      	ldr	r3, [pc, #32]	; (8005594 <vPortExitCritical+0x50>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d105      	bne.n	8005586 <vPortExitCritical+0x42>
 800557a:	2300      	movs	r3, #0
 800557c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	f383 8811 	msr	BASEPRI, r3
}
 8005584:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005586:	bf00      	nop
 8005588:	370c      	adds	r7, #12
 800558a:	46bd      	mov	sp, r7
 800558c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005590:	4770      	bx	lr
 8005592:	bf00      	nop
 8005594:	20000010 	.word	0x20000010
	...

080055a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80055a0:	f3ef 8009 	mrs	r0, PSP
 80055a4:	f3bf 8f6f 	isb	sy
 80055a8:	4b15      	ldr	r3, [pc, #84]	; (8005600 <pxCurrentTCBConst>)
 80055aa:	681a      	ldr	r2, [r3, #0]
 80055ac:	f01e 0f10 	tst.w	lr, #16
 80055b0:	bf08      	it	eq
 80055b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80055b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055ba:	6010      	str	r0, [r2, #0]
 80055bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80055c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80055c4:	f380 8811 	msr	BASEPRI, r0
 80055c8:	f3bf 8f4f 	dsb	sy
 80055cc:	f3bf 8f6f 	isb	sy
 80055d0:	f7fe ffc4 	bl	800455c <vTaskSwitchContext>
 80055d4:	f04f 0000 	mov.w	r0, #0
 80055d8:	f380 8811 	msr	BASEPRI, r0
 80055dc:	bc09      	pop	{r0, r3}
 80055de:	6819      	ldr	r1, [r3, #0]
 80055e0:	6808      	ldr	r0, [r1, #0]
 80055e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055e6:	f01e 0f10 	tst.w	lr, #16
 80055ea:	bf08      	it	eq
 80055ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80055f0:	f380 8809 	msr	PSP, r0
 80055f4:	f3bf 8f6f 	isb	sy
 80055f8:	4770      	bx	lr
 80055fa:	bf00      	nop
 80055fc:	f3af 8000 	nop.w

08005600 <pxCurrentTCBConst>:
 8005600:	200007e4 	.word	0x200007e4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005604:	bf00      	nop
 8005606:	bf00      	nop

08005608 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b082      	sub	sp, #8
 800560c:	af00      	add	r7, sp, #0
	__asm volatile
 800560e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005612:	f383 8811 	msr	BASEPRI, r3
 8005616:	f3bf 8f6f 	isb	sy
 800561a:	f3bf 8f4f 	dsb	sy
 800561e:	607b      	str	r3, [r7, #4]
}
 8005620:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005622:	f7fe fee1 	bl	80043e8 <xTaskIncrementTick>
 8005626:	4603      	mov	r3, r0
 8005628:	2b00      	cmp	r3, #0
 800562a:	d003      	beq.n	8005634 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800562c:	4b06      	ldr	r3, [pc, #24]	; (8005648 <xPortSysTickHandler+0x40>)
 800562e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005632:	601a      	str	r2, [r3, #0]
 8005634:	2300      	movs	r3, #0
 8005636:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	f383 8811 	msr	BASEPRI, r3
}
 800563e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005640:	bf00      	nop
 8005642:	3708      	adds	r7, #8
 8005644:	46bd      	mov	sp, r7
 8005646:	bd80      	pop	{r7, pc}
 8005648:	e000ed04 	.word	0xe000ed04

0800564c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800564c:	b480      	push	{r7}
 800564e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005650:	4b0b      	ldr	r3, [pc, #44]	; (8005680 <vPortSetupTimerInterrupt+0x34>)
 8005652:	2200      	movs	r2, #0
 8005654:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005656:	4b0b      	ldr	r3, [pc, #44]	; (8005684 <vPortSetupTimerInterrupt+0x38>)
 8005658:	2200      	movs	r2, #0
 800565a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800565c:	4b0a      	ldr	r3, [pc, #40]	; (8005688 <vPortSetupTimerInterrupt+0x3c>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	4a0a      	ldr	r2, [pc, #40]	; (800568c <vPortSetupTimerInterrupt+0x40>)
 8005662:	fba2 2303 	umull	r2, r3, r2, r3
 8005666:	099b      	lsrs	r3, r3, #6
 8005668:	4a09      	ldr	r2, [pc, #36]	; (8005690 <vPortSetupTimerInterrupt+0x44>)
 800566a:	3b01      	subs	r3, #1
 800566c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800566e:	4b04      	ldr	r3, [pc, #16]	; (8005680 <vPortSetupTimerInterrupt+0x34>)
 8005670:	2207      	movs	r2, #7
 8005672:	601a      	str	r2, [r3, #0]
}
 8005674:	bf00      	nop
 8005676:	46bd      	mov	sp, r7
 8005678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567c:	4770      	bx	lr
 800567e:	bf00      	nop
 8005680:	e000e010 	.word	0xe000e010
 8005684:	e000e018 	.word	0xe000e018
 8005688:	20000004 	.word	0x20000004
 800568c:	10624dd3 	.word	0x10624dd3
 8005690:	e000e014 	.word	0xe000e014

08005694 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005694:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80056a4 <vPortEnableVFP+0x10>
 8005698:	6801      	ldr	r1, [r0, #0]
 800569a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800569e:	6001      	str	r1, [r0, #0]
 80056a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80056a2:	bf00      	nop
 80056a4:	e000ed88 	.word	0xe000ed88

080056a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80056a8:	b480      	push	{r7}
 80056aa:	b085      	sub	sp, #20
 80056ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80056ae:	f3ef 8305 	mrs	r3, IPSR
 80056b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	2b0f      	cmp	r3, #15
 80056b8:	d914      	bls.n	80056e4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80056ba:	4a17      	ldr	r2, [pc, #92]	; (8005718 <vPortValidateInterruptPriority+0x70>)
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	4413      	add	r3, r2
 80056c0:	781b      	ldrb	r3, [r3, #0]
 80056c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80056c4:	4b15      	ldr	r3, [pc, #84]	; (800571c <vPortValidateInterruptPriority+0x74>)
 80056c6:	781b      	ldrb	r3, [r3, #0]
 80056c8:	7afa      	ldrb	r2, [r7, #11]
 80056ca:	429a      	cmp	r2, r3
 80056cc:	d20a      	bcs.n	80056e4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80056ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056d2:	f383 8811 	msr	BASEPRI, r3
 80056d6:	f3bf 8f6f 	isb	sy
 80056da:	f3bf 8f4f 	dsb	sy
 80056de:	607b      	str	r3, [r7, #4]
}
 80056e0:	bf00      	nop
 80056e2:	e7fe      	b.n	80056e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80056e4:	4b0e      	ldr	r3, [pc, #56]	; (8005720 <vPortValidateInterruptPriority+0x78>)
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80056ec:	4b0d      	ldr	r3, [pc, #52]	; (8005724 <vPortValidateInterruptPriority+0x7c>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	429a      	cmp	r2, r3
 80056f2:	d90a      	bls.n	800570a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80056f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056f8:	f383 8811 	msr	BASEPRI, r3
 80056fc:	f3bf 8f6f 	isb	sy
 8005700:	f3bf 8f4f 	dsb	sy
 8005704:	603b      	str	r3, [r7, #0]
}
 8005706:	bf00      	nop
 8005708:	e7fe      	b.n	8005708 <vPortValidateInterruptPriority+0x60>
	}
 800570a:	bf00      	nop
 800570c:	3714      	adds	r7, #20
 800570e:	46bd      	mov	sp, r7
 8005710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005714:	4770      	bx	lr
 8005716:	bf00      	nop
 8005718:	e000e3f0 	.word	0xe000e3f0
 800571c:	20000e10 	.word	0x20000e10
 8005720:	e000ed0c 	.word	0xe000ed0c
 8005724:	20000e14 	.word	0x20000e14

08005728 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b08a      	sub	sp, #40	; 0x28
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005730:	2300      	movs	r3, #0
 8005732:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005734:	f7fe fd9c 	bl	8004270 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005738:	4b5b      	ldr	r3, [pc, #364]	; (80058a8 <pvPortMalloc+0x180>)
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d101      	bne.n	8005744 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005740:	f000 f920 	bl	8005984 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005744:	4b59      	ldr	r3, [pc, #356]	; (80058ac <pvPortMalloc+0x184>)
 8005746:	681a      	ldr	r2, [r3, #0]
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	4013      	ands	r3, r2
 800574c:	2b00      	cmp	r3, #0
 800574e:	f040 8093 	bne.w	8005878 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d01d      	beq.n	8005794 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005758:	2208      	movs	r2, #8
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	4413      	add	r3, r2
 800575e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	f003 0307 	and.w	r3, r3, #7
 8005766:	2b00      	cmp	r3, #0
 8005768:	d014      	beq.n	8005794 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	f023 0307 	bic.w	r3, r3, #7
 8005770:	3308      	adds	r3, #8
 8005772:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	f003 0307 	and.w	r3, r3, #7
 800577a:	2b00      	cmp	r3, #0
 800577c:	d00a      	beq.n	8005794 <pvPortMalloc+0x6c>
	__asm volatile
 800577e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005782:	f383 8811 	msr	BASEPRI, r3
 8005786:	f3bf 8f6f 	isb	sy
 800578a:	f3bf 8f4f 	dsb	sy
 800578e:	617b      	str	r3, [r7, #20]
}
 8005790:	bf00      	nop
 8005792:	e7fe      	b.n	8005792 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d06e      	beq.n	8005878 <pvPortMalloc+0x150>
 800579a:	4b45      	ldr	r3, [pc, #276]	; (80058b0 <pvPortMalloc+0x188>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	687a      	ldr	r2, [r7, #4]
 80057a0:	429a      	cmp	r2, r3
 80057a2:	d869      	bhi.n	8005878 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80057a4:	4b43      	ldr	r3, [pc, #268]	; (80058b4 <pvPortMalloc+0x18c>)
 80057a6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80057a8:	4b42      	ldr	r3, [pc, #264]	; (80058b4 <pvPortMalloc+0x18c>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80057ae:	e004      	b.n	80057ba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80057b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057b2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80057b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80057ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057bc:	685b      	ldr	r3, [r3, #4]
 80057be:	687a      	ldr	r2, [r7, #4]
 80057c0:	429a      	cmp	r2, r3
 80057c2:	d903      	bls.n	80057cc <pvPortMalloc+0xa4>
 80057c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d1f1      	bne.n	80057b0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80057cc:	4b36      	ldr	r3, [pc, #216]	; (80058a8 <pvPortMalloc+0x180>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057d2:	429a      	cmp	r2, r3
 80057d4:	d050      	beq.n	8005878 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80057d6:	6a3b      	ldr	r3, [r7, #32]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	2208      	movs	r2, #8
 80057dc:	4413      	add	r3, r2
 80057de:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80057e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057e2:	681a      	ldr	r2, [r3, #0]
 80057e4:	6a3b      	ldr	r3, [r7, #32]
 80057e6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80057e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ea:	685a      	ldr	r2, [r3, #4]
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	1ad2      	subs	r2, r2, r3
 80057f0:	2308      	movs	r3, #8
 80057f2:	005b      	lsls	r3, r3, #1
 80057f4:	429a      	cmp	r2, r3
 80057f6:	d91f      	bls.n	8005838 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80057f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	4413      	add	r3, r2
 80057fe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005800:	69bb      	ldr	r3, [r7, #24]
 8005802:	f003 0307 	and.w	r3, r3, #7
 8005806:	2b00      	cmp	r3, #0
 8005808:	d00a      	beq.n	8005820 <pvPortMalloc+0xf8>
	__asm volatile
 800580a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800580e:	f383 8811 	msr	BASEPRI, r3
 8005812:	f3bf 8f6f 	isb	sy
 8005816:	f3bf 8f4f 	dsb	sy
 800581a:	613b      	str	r3, [r7, #16]
}
 800581c:	bf00      	nop
 800581e:	e7fe      	b.n	800581e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005822:	685a      	ldr	r2, [r3, #4]
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	1ad2      	subs	r2, r2, r3
 8005828:	69bb      	ldr	r3, [r7, #24]
 800582a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800582c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800582e:	687a      	ldr	r2, [r7, #4]
 8005830:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005832:	69b8      	ldr	r0, [r7, #24]
 8005834:	f000 f908 	bl	8005a48 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005838:	4b1d      	ldr	r3, [pc, #116]	; (80058b0 <pvPortMalloc+0x188>)
 800583a:	681a      	ldr	r2, [r3, #0]
 800583c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800583e:	685b      	ldr	r3, [r3, #4]
 8005840:	1ad3      	subs	r3, r2, r3
 8005842:	4a1b      	ldr	r2, [pc, #108]	; (80058b0 <pvPortMalloc+0x188>)
 8005844:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005846:	4b1a      	ldr	r3, [pc, #104]	; (80058b0 <pvPortMalloc+0x188>)
 8005848:	681a      	ldr	r2, [r3, #0]
 800584a:	4b1b      	ldr	r3, [pc, #108]	; (80058b8 <pvPortMalloc+0x190>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	429a      	cmp	r2, r3
 8005850:	d203      	bcs.n	800585a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005852:	4b17      	ldr	r3, [pc, #92]	; (80058b0 <pvPortMalloc+0x188>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	4a18      	ldr	r2, [pc, #96]	; (80058b8 <pvPortMalloc+0x190>)
 8005858:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800585a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800585c:	685a      	ldr	r2, [r3, #4]
 800585e:	4b13      	ldr	r3, [pc, #76]	; (80058ac <pvPortMalloc+0x184>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	431a      	orrs	r2, r3
 8005864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005866:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800586a:	2200      	movs	r2, #0
 800586c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800586e:	4b13      	ldr	r3, [pc, #76]	; (80058bc <pvPortMalloc+0x194>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	3301      	adds	r3, #1
 8005874:	4a11      	ldr	r2, [pc, #68]	; (80058bc <pvPortMalloc+0x194>)
 8005876:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005878:	f7fe fd08 	bl	800428c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800587c:	69fb      	ldr	r3, [r7, #28]
 800587e:	f003 0307 	and.w	r3, r3, #7
 8005882:	2b00      	cmp	r3, #0
 8005884:	d00a      	beq.n	800589c <pvPortMalloc+0x174>
	__asm volatile
 8005886:	f04f 0350 	mov.w	r3, #80	; 0x50
 800588a:	f383 8811 	msr	BASEPRI, r3
 800588e:	f3bf 8f6f 	isb	sy
 8005892:	f3bf 8f4f 	dsb	sy
 8005896:	60fb      	str	r3, [r7, #12]
}
 8005898:	bf00      	nop
 800589a:	e7fe      	b.n	800589a <pvPortMalloc+0x172>
	return pvReturn;
 800589c:	69fb      	ldr	r3, [r7, #28]
}
 800589e:	4618      	mov	r0, r3
 80058a0:	3728      	adds	r7, #40	; 0x28
 80058a2:	46bd      	mov	sp, r7
 80058a4:	bd80      	pop	{r7, pc}
 80058a6:	bf00      	nop
 80058a8:	20004a20 	.word	0x20004a20
 80058ac:	20004a34 	.word	0x20004a34
 80058b0:	20004a24 	.word	0x20004a24
 80058b4:	20004a18 	.word	0x20004a18
 80058b8:	20004a28 	.word	0x20004a28
 80058bc:	20004a2c 	.word	0x20004a2c

080058c0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b086      	sub	sp, #24
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d04d      	beq.n	800596e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80058d2:	2308      	movs	r3, #8
 80058d4:	425b      	negs	r3, r3
 80058d6:	697a      	ldr	r2, [r7, #20]
 80058d8:	4413      	add	r3, r2
 80058da:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80058dc:	697b      	ldr	r3, [r7, #20]
 80058de:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80058e0:	693b      	ldr	r3, [r7, #16]
 80058e2:	685a      	ldr	r2, [r3, #4]
 80058e4:	4b24      	ldr	r3, [pc, #144]	; (8005978 <vPortFree+0xb8>)
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4013      	ands	r3, r2
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d10a      	bne.n	8005904 <vPortFree+0x44>
	__asm volatile
 80058ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058f2:	f383 8811 	msr	BASEPRI, r3
 80058f6:	f3bf 8f6f 	isb	sy
 80058fa:	f3bf 8f4f 	dsb	sy
 80058fe:	60fb      	str	r3, [r7, #12]
}
 8005900:	bf00      	nop
 8005902:	e7fe      	b.n	8005902 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005904:	693b      	ldr	r3, [r7, #16]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d00a      	beq.n	8005922 <vPortFree+0x62>
	__asm volatile
 800590c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005910:	f383 8811 	msr	BASEPRI, r3
 8005914:	f3bf 8f6f 	isb	sy
 8005918:	f3bf 8f4f 	dsb	sy
 800591c:	60bb      	str	r3, [r7, #8]
}
 800591e:	bf00      	nop
 8005920:	e7fe      	b.n	8005920 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005922:	693b      	ldr	r3, [r7, #16]
 8005924:	685a      	ldr	r2, [r3, #4]
 8005926:	4b14      	ldr	r3, [pc, #80]	; (8005978 <vPortFree+0xb8>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4013      	ands	r3, r2
 800592c:	2b00      	cmp	r3, #0
 800592e:	d01e      	beq.n	800596e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005930:	693b      	ldr	r3, [r7, #16]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d11a      	bne.n	800596e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005938:	693b      	ldr	r3, [r7, #16]
 800593a:	685a      	ldr	r2, [r3, #4]
 800593c:	4b0e      	ldr	r3, [pc, #56]	; (8005978 <vPortFree+0xb8>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	43db      	mvns	r3, r3
 8005942:	401a      	ands	r2, r3
 8005944:	693b      	ldr	r3, [r7, #16]
 8005946:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005948:	f7fe fc92 	bl	8004270 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800594c:	693b      	ldr	r3, [r7, #16]
 800594e:	685a      	ldr	r2, [r3, #4]
 8005950:	4b0a      	ldr	r3, [pc, #40]	; (800597c <vPortFree+0xbc>)
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4413      	add	r3, r2
 8005956:	4a09      	ldr	r2, [pc, #36]	; (800597c <vPortFree+0xbc>)
 8005958:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800595a:	6938      	ldr	r0, [r7, #16]
 800595c:	f000 f874 	bl	8005a48 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005960:	4b07      	ldr	r3, [pc, #28]	; (8005980 <vPortFree+0xc0>)
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	3301      	adds	r3, #1
 8005966:	4a06      	ldr	r2, [pc, #24]	; (8005980 <vPortFree+0xc0>)
 8005968:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800596a:	f7fe fc8f 	bl	800428c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800596e:	bf00      	nop
 8005970:	3718      	adds	r7, #24
 8005972:	46bd      	mov	sp, r7
 8005974:	bd80      	pop	{r7, pc}
 8005976:	bf00      	nop
 8005978:	20004a34 	.word	0x20004a34
 800597c:	20004a24 	.word	0x20004a24
 8005980:	20004a30 	.word	0x20004a30

08005984 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005984:	b480      	push	{r7}
 8005986:	b085      	sub	sp, #20
 8005988:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800598a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800598e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005990:	4b27      	ldr	r3, [pc, #156]	; (8005a30 <prvHeapInit+0xac>)
 8005992:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	f003 0307 	and.w	r3, r3, #7
 800599a:	2b00      	cmp	r3, #0
 800599c:	d00c      	beq.n	80059b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	3307      	adds	r3, #7
 80059a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	f023 0307 	bic.w	r3, r3, #7
 80059aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80059ac:	68ba      	ldr	r2, [r7, #8]
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	1ad3      	subs	r3, r2, r3
 80059b2:	4a1f      	ldr	r2, [pc, #124]	; (8005a30 <prvHeapInit+0xac>)
 80059b4:	4413      	add	r3, r2
 80059b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80059bc:	4a1d      	ldr	r2, [pc, #116]	; (8005a34 <prvHeapInit+0xb0>)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80059c2:	4b1c      	ldr	r3, [pc, #112]	; (8005a34 <prvHeapInit+0xb0>)
 80059c4:	2200      	movs	r2, #0
 80059c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	68ba      	ldr	r2, [r7, #8]
 80059cc:	4413      	add	r3, r2
 80059ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80059d0:	2208      	movs	r2, #8
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	1a9b      	subs	r3, r3, r2
 80059d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	f023 0307 	bic.w	r3, r3, #7
 80059de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	4a15      	ldr	r2, [pc, #84]	; (8005a38 <prvHeapInit+0xb4>)
 80059e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80059e6:	4b14      	ldr	r3, [pc, #80]	; (8005a38 <prvHeapInit+0xb4>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	2200      	movs	r2, #0
 80059ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80059ee:	4b12      	ldr	r3, [pc, #72]	; (8005a38 <prvHeapInit+0xb4>)
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	2200      	movs	r2, #0
 80059f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	68fa      	ldr	r2, [r7, #12]
 80059fe:	1ad2      	subs	r2, r2, r3
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005a04:	4b0c      	ldr	r3, [pc, #48]	; (8005a38 <prvHeapInit+0xb4>)
 8005a06:	681a      	ldr	r2, [r3, #0]
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	685b      	ldr	r3, [r3, #4]
 8005a10:	4a0a      	ldr	r2, [pc, #40]	; (8005a3c <prvHeapInit+0xb8>)
 8005a12:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	685b      	ldr	r3, [r3, #4]
 8005a18:	4a09      	ldr	r2, [pc, #36]	; (8005a40 <prvHeapInit+0xbc>)
 8005a1a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005a1c:	4b09      	ldr	r3, [pc, #36]	; (8005a44 <prvHeapInit+0xc0>)
 8005a1e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005a22:	601a      	str	r2, [r3, #0]
}
 8005a24:	bf00      	nop
 8005a26:	3714      	adds	r7, #20
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2e:	4770      	bx	lr
 8005a30:	20000e18 	.word	0x20000e18
 8005a34:	20004a18 	.word	0x20004a18
 8005a38:	20004a20 	.word	0x20004a20
 8005a3c:	20004a28 	.word	0x20004a28
 8005a40:	20004a24 	.word	0x20004a24
 8005a44:	20004a34 	.word	0x20004a34

08005a48 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005a48:	b480      	push	{r7}
 8005a4a:	b085      	sub	sp, #20
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005a50:	4b28      	ldr	r3, [pc, #160]	; (8005af4 <prvInsertBlockIntoFreeList+0xac>)
 8005a52:	60fb      	str	r3, [r7, #12]
 8005a54:	e002      	b.n	8005a5c <prvInsertBlockIntoFreeList+0x14>
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	60fb      	str	r3, [r7, #12]
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	687a      	ldr	r2, [r7, #4]
 8005a62:	429a      	cmp	r2, r3
 8005a64:	d8f7      	bhi.n	8005a56 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	685b      	ldr	r3, [r3, #4]
 8005a6e:	68ba      	ldr	r2, [r7, #8]
 8005a70:	4413      	add	r3, r2
 8005a72:	687a      	ldr	r2, [r7, #4]
 8005a74:	429a      	cmp	r2, r3
 8005a76:	d108      	bne.n	8005a8a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	685a      	ldr	r2, [r3, #4]
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	685b      	ldr	r3, [r3, #4]
 8005a80:	441a      	add	r2, r3
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	685b      	ldr	r3, [r3, #4]
 8005a92:	68ba      	ldr	r2, [r7, #8]
 8005a94:	441a      	add	r2, r3
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	429a      	cmp	r2, r3
 8005a9c:	d118      	bne.n	8005ad0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681a      	ldr	r2, [r3, #0]
 8005aa2:	4b15      	ldr	r3, [pc, #84]	; (8005af8 <prvInsertBlockIntoFreeList+0xb0>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	429a      	cmp	r2, r3
 8005aa8:	d00d      	beq.n	8005ac6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	685a      	ldr	r2, [r3, #4]
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	685b      	ldr	r3, [r3, #4]
 8005ab4:	441a      	add	r2, r3
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	681a      	ldr	r2, [r3, #0]
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	601a      	str	r2, [r3, #0]
 8005ac4:	e008      	b.n	8005ad8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005ac6:	4b0c      	ldr	r3, [pc, #48]	; (8005af8 <prvInsertBlockIntoFreeList+0xb0>)
 8005ac8:	681a      	ldr	r2, [r3, #0]
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	601a      	str	r2, [r3, #0]
 8005ace:	e003      	b.n	8005ad8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681a      	ldr	r2, [r3, #0]
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005ad8:	68fa      	ldr	r2, [r7, #12]
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	429a      	cmp	r2, r3
 8005ade:	d002      	beq.n	8005ae6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	687a      	ldr	r2, [r7, #4]
 8005ae4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005ae6:	bf00      	nop
 8005ae8:	3714      	adds	r7, #20
 8005aea:	46bd      	mov	sp, r7
 8005aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af0:	4770      	bx	lr
 8005af2:	bf00      	nop
 8005af4:	20004a18 	.word	0x20004a18
 8005af8:	20004a20 	.word	0x20004a20

08005afc <memset>:
 8005afc:	4402      	add	r2, r0
 8005afe:	4603      	mov	r3, r0
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d100      	bne.n	8005b06 <memset+0xa>
 8005b04:	4770      	bx	lr
 8005b06:	f803 1b01 	strb.w	r1, [r3], #1
 8005b0a:	e7f9      	b.n	8005b00 <memset+0x4>

08005b0c <__libc_init_array>:
 8005b0c:	b570      	push	{r4, r5, r6, lr}
 8005b0e:	4d0d      	ldr	r5, [pc, #52]	; (8005b44 <__libc_init_array+0x38>)
 8005b10:	4c0d      	ldr	r4, [pc, #52]	; (8005b48 <__libc_init_array+0x3c>)
 8005b12:	1b64      	subs	r4, r4, r5
 8005b14:	10a4      	asrs	r4, r4, #2
 8005b16:	2600      	movs	r6, #0
 8005b18:	42a6      	cmp	r6, r4
 8005b1a:	d109      	bne.n	8005b30 <__libc_init_array+0x24>
 8005b1c:	4d0b      	ldr	r5, [pc, #44]	; (8005b4c <__libc_init_array+0x40>)
 8005b1e:	4c0c      	ldr	r4, [pc, #48]	; (8005b50 <__libc_init_array+0x44>)
 8005b20:	f000 f826 	bl	8005b70 <_init>
 8005b24:	1b64      	subs	r4, r4, r5
 8005b26:	10a4      	asrs	r4, r4, #2
 8005b28:	2600      	movs	r6, #0
 8005b2a:	42a6      	cmp	r6, r4
 8005b2c:	d105      	bne.n	8005b3a <__libc_init_array+0x2e>
 8005b2e:	bd70      	pop	{r4, r5, r6, pc}
 8005b30:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b34:	4798      	blx	r3
 8005b36:	3601      	adds	r6, #1
 8005b38:	e7ee      	b.n	8005b18 <__libc_init_array+0xc>
 8005b3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b3e:	4798      	blx	r3
 8005b40:	3601      	adds	r6, #1
 8005b42:	e7f2      	b.n	8005b2a <__libc_init_array+0x1e>
 8005b44:	08005c88 	.word	0x08005c88
 8005b48:	08005c88 	.word	0x08005c88
 8005b4c:	08005c88 	.word	0x08005c88
 8005b50:	08005c8c 	.word	0x08005c8c

08005b54 <memcpy>:
 8005b54:	440a      	add	r2, r1
 8005b56:	4291      	cmp	r1, r2
 8005b58:	f100 33ff 	add.w	r3, r0, #4294967295
 8005b5c:	d100      	bne.n	8005b60 <memcpy+0xc>
 8005b5e:	4770      	bx	lr
 8005b60:	b510      	push	{r4, lr}
 8005b62:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005b66:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005b6a:	4291      	cmp	r1, r2
 8005b6c:	d1f9      	bne.n	8005b62 <memcpy+0xe>
 8005b6e:	bd10      	pop	{r4, pc}

08005b70 <_init>:
 8005b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b72:	bf00      	nop
 8005b74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b76:	bc08      	pop	{r3}
 8005b78:	469e      	mov	lr, r3
 8005b7a:	4770      	bx	lr

08005b7c <_fini>:
 8005b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b7e:	bf00      	nop
 8005b80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b82:	bc08      	pop	{r3}
 8005b84:	469e      	mov	lr, r3
 8005b86:	4770      	bx	lr
