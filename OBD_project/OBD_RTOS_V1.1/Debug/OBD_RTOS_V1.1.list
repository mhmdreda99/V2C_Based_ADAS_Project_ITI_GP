
OBD_RTOS_V1.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f28  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  080060c8  080060c8  000160c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080061f0  080061f0  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  080061f0  080061f0  000161f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080061f8  080061f8  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080061f8  080061f8  000161f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080061fc  080061fc  000161fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08006200  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004a34  20000014  08006214  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004a48  08006214  00024a48  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012111  00000000  00000000  00020087  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002c2f  00000000  00000000  00032198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001038  00000000  00000000  00034dc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c78  00000000  00000000  00035e00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017f51  00000000  00000000  00036a78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012de8  00000000  00000000  0004e9c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009b1e0  00000000  00000000  000617b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000438c  00000000  00000000  000fc994  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  00100d20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000014 	.word	0x20000014
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080060b0 	.word	0x080060b0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000018 	.word	0x20000018
 80001dc:	080060b0 	.word	0x080060b0

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b970 	b.w	80004d8 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	460d      	mov	r5, r1
 8000218:	4604      	mov	r4, r0
 800021a:	460f      	mov	r7, r1
 800021c:	2b00      	cmp	r3, #0
 800021e:	d14a      	bne.n	80002b6 <__udivmoddi4+0xa6>
 8000220:	428a      	cmp	r2, r1
 8000222:	4694      	mov	ip, r2
 8000224:	d965      	bls.n	80002f2 <__udivmoddi4+0xe2>
 8000226:	fab2 f382 	clz	r3, r2
 800022a:	b143      	cbz	r3, 800023e <__udivmoddi4+0x2e>
 800022c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000230:	f1c3 0220 	rsb	r2, r3, #32
 8000234:	409f      	lsls	r7, r3
 8000236:	fa20 f202 	lsr.w	r2, r0, r2
 800023a:	4317      	orrs	r7, r2
 800023c:	409c      	lsls	r4, r3
 800023e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000242:	fa1f f58c 	uxth.w	r5, ip
 8000246:	fbb7 f1fe 	udiv	r1, r7, lr
 800024a:	0c22      	lsrs	r2, r4, #16
 800024c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000250:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000254:	fb01 f005 	mul.w	r0, r1, r5
 8000258:	4290      	cmp	r0, r2
 800025a:	d90a      	bls.n	8000272 <__udivmoddi4+0x62>
 800025c:	eb1c 0202 	adds.w	r2, ip, r2
 8000260:	f101 37ff 	add.w	r7, r1, #4294967295
 8000264:	f080 811c 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000268:	4290      	cmp	r0, r2
 800026a:	f240 8119 	bls.w	80004a0 <__udivmoddi4+0x290>
 800026e:	3902      	subs	r1, #2
 8000270:	4462      	add	r2, ip
 8000272:	1a12      	subs	r2, r2, r0
 8000274:	b2a4      	uxth	r4, r4
 8000276:	fbb2 f0fe 	udiv	r0, r2, lr
 800027a:	fb0e 2210 	mls	r2, lr, r0, r2
 800027e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000282:	fb00 f505 	mul.w	r5, r0, r5
 8000286:	42a5      	cmp	r5, r4
 8000288:	d90a      	bls.n	80002a0 <__udivmoddi4+0x90>
 800028a:	eb1c 0404 	adds.w	r4, ip, r4
 800028e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000292:	f080 8107 	bcs.w	80004a4 <__udivmoddi4+0x294>
 8000296:	42a5      	cmp	r5, r4
 8000298:	f240 8104 	bls.w	80004a4 <__udivmoddi4+0x294>
 800029c:	4464      	add	r4, ip
 800029e:	3802      	subs	r0, #2
 80002a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002a4:	1b64      	subs	r4, r4, r5
 80002a6:	2100      	movs	r1, #0
 80002a8:	b11e      	cbz	r6, 80002b2 <__udivmoddi4+0xa2>
 80002aa:	40dc      	lsrs	r4, r3
 80002ac:	2300      	movs	r3, #0
 80002ae:	e9c6 4300 	strd	r4, r3, [r6]
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d908      	bls.n	80002cc <__udivmoddi4+0xbc>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80ed 	beq.w	800049a <__udivmoddi4+0x28a>
 80002c0:	2100      	movs	r1, #0
 80002c2:	e9c6 0500 	strd	r0, r5, [r6]
 80002c6:	4608      	mov	r0, r1
 80002c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002cc:	fab3 f183 	clz	r1, r3
 80002d0:	2900      	cmp	r1, #0
 80002d2:	d149      	bne.n	8000368 <__udivmoddi4+0x158>
 80002d4:	42ab      	cmp	r3, r5
 80002d6:	d302      	bcc.n	80002de <__udivmoddi4+0xce>
 80002d8:	4282      	cmp	r2, r0
 80002da:	f200 80f8 	bhi.w	80004ce <__udivmoddi4+0x2be>
 80002de:	1a84      	subs	r4, r0, r2
 80002e0:	eb65 0203 	sbc.w	r2, r5, r3
 80002e4:	2001      	movs	r0, #1
 80002e6:	4617      	mov	r7, r2
 80002e8:	2e00      	cmp	r6, #0
 80002ea:	d0e2      	beq.n	80002b2 <__udivmoddi4+0xa2>
 80002ec:	e9c6 4700 	strd	r4, r7, [r6]
 80002f0:	e7df      	b.n	80002b2 <__udivmoddi4+0xa2>
 80002f2:	b902      	cbnz	r2, 80002f6 <__udivmoddi4+0xe6>
 80002f4:	deff      	udf	#255	; 0xff
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x210>
 8000300:	1a8a      	subs	r2, r1, r2
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2101      	movs	r1, #1
 800030c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000310:	fb07 2015 	mls	r0, r7, r5, r2
 8000314:	0c22      	lsrs	r2, r4, #16
 8000316:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800031a:	fb0e f005 	mul.w	r0, lr, r5
 800031e:	4290      	cmp	r0, r2
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x124>
 8000322:	eb1c 0202 	adds.w	r2, ip, r2
 8000326:	f105 38ff 	add.w	r8, r5, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4290      	cmp	r0, r2
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2b8>
 8000332:	4645      	mov	r5, r8
 8000334:	1a12      	subs	r2, r2, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb2 f0f7 	udiv	r0, r2, r7
 800033c:	fb07 2210 	mls	r2, r7, r0, r2
 8000340:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x14e>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 32ff 	add.w	r2, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x14c>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2c2>
 800035c:	4610      	mov	r0, r2
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000366:	e79f      	b.n	80002a8 <__udivmoddi4+0x98>
 8000368:	f1c1 0720 	rsb	r7, r1, #32
 800036c:	408b      	lsls	r3, r1
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa05 f401 	lsl.w	r4, r5, r1
 800037a:	fa20 f307 	lsr.w	r3, r0, r7
 800037e:	40fd      	lsrs	r5, r7
 8000380:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000384:	4323      	orrs	r3, r4
 8000386:	fbb5 f8f9 	udiv	r8, r5, r9
 800038a:	fa1f fe8c 	uxth.w	lr, ip
 800038e:	fb09 5518 	mls	r5, r9, r8, r5
 8000392:	0c1c      	lsrs	r4, r3, #16
 8000394:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000398:	fb08 f50e 	mul.w	r5, r8, lr
 800039c:	42a5      	cmp	r5, r4
 800039e:	fa02 f201 	lsl.w	r2, r2, r1
 80003a2:	fa00 f001 	lsl.w	r0, r0, r1
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2b4>
 80003b4:	42a5      	cmp	r5, r4
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2b4>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4464      	add	r4, ip
 80003c0:	1b64      	subs	r4, r4, r5
 80003c2:	b29d      	uxth	r5, r3
 80003c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c8:	fb09 4413 	mls	r4, r9, r3, r4
 80003cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f103 35ff 	add.w	r5, r3, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2ac>
 80003e2:	45a6      	cmp	lr, r4
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2ac>
 80003e6:	3b02      	subs	r3, #2
 80003e8:	4464      	add	r4, ip
 80003ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003ee:	fba3 9502 	umull	r9, r5, r3, r2
 80003f2:	eba4 040e 	sub.w	r4, r4, lr
 80003f6:	42ac      	cmp	r4, r5
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46ae      	mov	lr, r5
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x29c>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x298>
 8000400:	b156      	cbz	r6, 8000418 <__udivmoddi4+0x208>
 8000402:	ebb0 0208 	subs.w	r2, r0, r8
 8000406:	eb64 040e 	sbc.w	r4, r4, lr
 800040a:	fa04 f707 	lsl.w	r7, r4, r7
 800040e:	40ca      	lsrs	r2, r1
 8000410:	40cc      	lsrs	r4, r1
 8000412:	4317      	orrs	r7, r2
 8000414:	e9c6 7400 	strd	r7, r4, [r6]
 8000418:	4618      	mov	r0, r3
 800041a:	2100      	movs	r1, #0
 800041c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000420:	f1c3 0120 	rsb	r1, r3, #32
 8000424:	fa02 fc03 	lsl.w	ip, r2, r3
 8000428:	fa20 f201 	lsr.w	r2, r0, r1
 800042c:	fa25 f101 	lsr.w	r1, r5, r1
 8000430:	409d      	lsls	r5, r3
 8000432:	432a      	orrs	r2, r5
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000440:	fb07 1510 	mls	r5, r7, r0, r1
 8000444:	0c11      	lsrs	r1, r2, #16
 8000446:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800044a:	fb00 f50e 	mul.w	r5, r0, lr
 800044e:	428d      	cmp	r5, r1
 8000450:	fa04 f403 	lsl.w	r4, r4, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x258>
 8000456:	eb1c 0101 	adds.w	r1, ip, r1
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000460:	428d      	cmp	r5, r1
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000464:	3802      	subs	r0, #2
 8000466:	4461      	add	r1, ip
 8000468:	1b49      	subs	r1, r1, r5
 800046a:	b292      	uxth	r2, r2
 800046c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000470:	fb07 1115 	mls	r1, r7, r5, r1
 8000474:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000478:	fb05 f10e 	mul.w	r1, r5, lr
 800047c:	4291      	cmp	r1, r2
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x282>
 8000480:	eb1c 0202 	adds.w	r2, ip, r2
 8000484:	f105 38ff 	add.w	r8, r5, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2a8>
 800048a:	4291      	cmp	r1, r2
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2a8>
 800048e:	3d02      	subs	r5, #2
 8000490:	4462      	add	r2, ip
 8000492:	1a52      	subs	r2, r2, r1
 8000494:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0xfc>
 800049a:	4631      	mov	r1, r6
 800049c:	4630      	mov	r0, r6
 800049e:	e708      	b.n	80002b2 <__udivmoddi4+0xa2>
 80004a0:	4639      	mov	r1, r7
 80004a2:	e6e6      	b.n	8000272 <__udivmoddi4+0x62>
 80004a4:	4610      	mov	r0, r2
 80004a6:	e6fb      	b.n	80002a0 <__udivmoddi4+0x90>
 80004a8:	4548      	cmp	r0, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004b4:	3b01      	subs	r3, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b8:	4645      	mov	r5, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x282>
 80004bc:	462b      	mov	r3, r5
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1da>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x258>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c8:	3d02      	subs	r5, #2
 80004ca:	4462      	add	r2, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x124>
 80004ce:	4608      	mov	r0, r1
 80004d0:	e70a      	b.n	80002e8 <__udivmoddi4+0xd8>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x14e>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <bytestowrite>:
 80004dc:	b480      	push	{r7}
 80004de:	b083      	sub	sp, #12
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	4603      	mov	r3, r0
 80004e4:	460a      	mov	r2, r1
 80004e6:	80fb      	strh	r3, [r7, #6]
 80004e8:	4613      	mov	r3, r2
 80004ea:	80bb      	strh	r3, [r7, #4]
 80004ec:	88fa      	ldrh	r2, [r7, #6]
 80004ee:	88bb      	ldrh	r3, [r7, #4]
 80004f0:	4413      	add	r3, r2
 80004f2:	2b0f      	cmp	r3, #15
 80004f4:	dc01      	bgt.n	80004fa <bytestowrite+0x1e>
 80004f6:	88fb      	ldrh	r3, [r7, #6]
 80004f8:	e003      	b.n	8000502 <bytestowrite+0x26>
 80004fa:	88bb      	ldrh	r3, [r7, #4]
 80004fc:	f1c3 0310 	rsb	r3, r3, #16
 8000500:	b29b      	uxth	r3, r3
 8000502:	4618      	mov	r0, r3
 8000504:	370c      	adds	r7, #12
 8000506:	46bd      	mov	sp, r7
 8000508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050c:	4770      	bx	lr
	...

08000510 <EEPROM_Write>:
 8000510:	b580      	push	{r7, lr}
 8000512:	b08e      	sub	sp, #56	; 0x38
 8000514:	af04      	add	r7, sp, #16
 8000516:	60ba      	str	r2, [r7, #8]
 8000518:	461a      	mov	r2, r3
 800051a:	4603      	mov	r3, r0
 800051c:	81fb      	strh	r3, [r7, #14]
 800051e:	460b      	mov	r3, r1
 8000520:	81bb      	strh	r3, [r7, #12]
 8000522:	4613      	mov	r3, r2
 8000524:	80fb      	strh	r3, [r7, #6]
 8000526:	2304      	movs	r3, #4
 8000528:	61fb      	str	r3, [r7, #28]
 800052a:	89fb      	ldrh	r3, [r7, #14]
 800052c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800052e:	88fa      	ldrh	r2, [r7, #6]
 8000530:	89bb      	ldrh	r3, [r7, #12]
 8000532:	4413      	add	r3, r2
 8000534:	2b00      	cmp	r3, #0
 8000536:	da00      	bge.n	800053a <EEPROM_Write+0x2a>
 8000538:	330f      	adds	r3, #15
 800053a:	111b      	asrs	r3, r3, #4
 800053c:	b29a      	uxth	r2, r3
 800053e:	89fb      	ldrh	r3, [r7, #14]
 8000540:	4413      	add	r3, r2
 8000542:	837b      	strh	r3, [r7, #26]
 8000544:	8b7a      	ldrh	r2, [r7, #26]
 8000546:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000548:	1ad3      	subs	r3, r2, r3
 800054a:	b29b      	uxth	r3, r3
 800054c:	3301      	adds	r3, #1
 800054e:	833b      	strh	r3, [r7, #24]
 8000550:	2300      	movs	r3, #0
 8000552:	84bb      	strh	r3, [r7, #36]	; 0x24
 8000554:	2300      	movs	r3, #0
 8000556:	623b      	str	r3, [r7, #32]
 8000558:	e034      	b.n	80005c4 <EEPROM_Write+0xb4>
 800055a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800055c:	69fb      	ldr	r3, [r7, #28]
 800055e:	fa02 f303 	lsl.w	r3, r2, r3
 8000562:	b21a      	sxth	r2, r3
 8000564:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000568:	4313      	orrs	r3, r2
 800056a:	b21b      	sxth	r3, r3
 800056c:	82fb      	strh	r3, [r7, #22]
 800056e:	89ba      	ldrh	r2, [r7, #12]
 8000570:	88fb      	ldrh	r3, [r7, #6]
 8000572:	4611      	mov	r1, r2
 8000574:	4618      	mov	r0, r3
 8000576:	f7ff ffb1 	bl	80004dc <bytestowrite>
 800057a:	4603      	mov	r3, r0
 800057c:	82bb      	strh	r3, [r7, #20]
 800057e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000580:	68ba      	ldr	r2, [r7, #8]
 8000582:	4413      	add	r3, r2
 8000584:	8af9      	ldrh	r1, [r7, #22]
 8000586:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800058a:	9202      	str	r2, [sp, #8]
 800058c:	8aba      	ldrh	r2, [r7, #20]
 800058e:	9201      	str	r2, [sp, #4]
 8000590:	9300      	str	r3, [sp, #0]
 8000592:	2302      	movs	r3, #2
 8000594:	460a      	mov	r2, r1
 8000596:	21a0      	movs	r1, #160	; 0xa0
 8000598:	480f      	ldr	r0, [pc, #60]	; (80005d8 <EEPROM_Write+0xc8>)
 800059a:	f001 fd09 	bl	8001fb0 <HAL_I2C_Mem_Write>
 800059e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80005a0:	3301      	adds	r3, #1
 80005a2:	84fb      	strh	r3, [r7, #38]	; 0x26
 80005a4:	2300      	movs	r3, #0
 80005a6:	81bb      	strh	r3, [r7, #12]
 80005a8:	88fa      	ldrh	r2, [r7, #6]
 80005aa:	8abb      	ldrh	r3, [r7, #20]
 80005ac:	1ad3      	subs	r3, r2, r3
 80005ae:	80fb      	strh	r3, [r7, #6]
 80005b0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80005b2:	8abb      	ldrh	r3, [r7, #20]
 80005b4:	4413      	add	r3, r2
 80005b6:	84bb      	strh	r3, [r7, #36]	; 0x24
 80005b8:	2005      	movs	r0, #5
 80005ba:	f000 fd2b 	bl	8001014 <HAL_Delay>
 80005be:	6a3b      	ldr	r3, [r7, #32]
 80005c0:	3301      	adds	r3, #1
 80005c2:	623b      	str	r3, [r7, #32]
 80005c4:	8b3b      	ldrh	r3, [r7, #24]
 80005c6:	6a3a      	ldr	r2, [r7, #32]
 80005c8:	429a      	cmp	r2, r3
 80005ca:	dbc6      	blt.n	800055a <EEPROM_Write+0x4a>
 80005cc:	bf00      	nop
 80005ce:	bf00      	nop
 80005d0:	3728      	adds	r7, #40	; 0x28
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	bf00      	nop
 80005d8:	20000078 	.word	0x20000078

080005dc <EEPROM_Read>:
 80005dc:	b580      	push	{r7, lr}
 80005de:	b08e      	sub	sp, #56	; 0x38
 80005e0:	af04      	add	r7, sp, #16
 80005e2:	60ba      	str	r2, [r7, #8]
 80005e4:	461a      	mov	r2, r3
 80005e6:	4603      	mov	r3, r0
 80005e8:	81fb      	strh	r3, [r7, #14]
 80005ea:	460b      	mov	r3, r1
 80005ec:	81bb      	strh	r3, [r7, #12]
 80005ee:	4613      	mov	r3, r2
 80005f0:	80fb      	strh	r3, [r7, #6]
 80005f2:	2304      	movs	r3, #4
 80005f4:	61fb      	str	r3, [r7, #28]
 80005f6:	89fb      	ldrh	r3, [r7, #14]
 80005f8:	84fb      	strh	r3, [r7, #38]	; 0x26
 80005fa:	88fa      	ldrh	r2, [r7, #6]
 80005fc:	89bb      	ldrh	r3, [r7, #12]
 80005fe:	4413      	add	r3, r2
 8000600:	2b00      	cmp	r3, #0
 8000602:	da00      	bge.n	8000606 <EEPROM_Read+0x2a>
 8000604:	330f      	adds	r3, #15
 8000606:	111b      	asrs	r3, r3, #4
 8000608:	b29a      	uxth	r2, r3
 800060a:	89fb      	ldrh	r3, [r7, #14]
 800060c:	4413      	add	r3, r2
 800060e:	837b      	strh	r3, [r7, #26]
 8000610:	8b7a      	ldrh	r2, [r7, #26]
 8000612:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000614:	1ad3      	subs	r3, r2, r3
 8000616:	b29b      	uxth	r3, r3
 8000618:	3301      	adds	r3, #1
 800061a:	833b      	strh	r3, [r7, #24]
 800061c:	2300      	movs	r3, #0
 800061e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8000620:	2300      	movs	r3, #0
 8000622:	623b      	str	r3, [r7, #32]
 8000624:	e031      	b.n	800068a <EEPROM_Read+0xae>
 8000626:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000628:	69fb      	ldr	r3, [r7, #28]
 800062a:	fa02 f303 	lsl.w	r3, r2, r3
 800062e:	b21a      	sxth	r2, r3
 8000630:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000634:	4313      	orrs	r3, r2
 8000636:	b21b      	sxth	r3, r3
 8000638:	82fb      	strh	r3, [r7, #22]
 800063a:	89ba      	ldrh	r2, [r7, #12]
 800063c:	88fb      	ldrh	r3, [r7, #6]
 800063e:	4611      	mov	r1, r2
 8000640:	4618      	mov	r0, r3
 8000642:	f7ff ff4b 	bl	80004dc <bytestowrite>
 8000646:	4603      	mov	r3, r0
 8000648:	82bb      	strh	r3, [r7, #20]
 800064a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800064c:	68ba      	ldr	r2, [r7, #8]
 800064e:	4413      	add	r3, r2
 8000650:	8af9      	ldrh	r1, [r7, #22]
 8000652:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000656:	9202      	str	r2, [sp, #8]
 8000658:	8aba      	ldrh	r2, [r7, #20]
 800065a:	9201      	str	r2, [sp, #4]
 800065c:	9300      	str	r3, [sp, #0]
 800065e:	2302      	movs	r3, #2
 8000660:	460a      	mov	r2, r1
 8000662:	21a0      	movs	r1, #160	; 0xa0
 8000664:	480d      	ldr	r0, [pc, #52]	; (800069c <EEPROM_Read+0xc0>)
 8000666:	f001 fd9d 	bl	80021a4 <HAL_I2C_Mem_Read>
 800066a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800066c:	3301      	adds	r3, #1
 800066e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8000670:	2300      	movs	r3, #0
 8000672:	81bb      	strh	r3, [r7, #12]
 8000674:	88fa      	ldrh	r2, [r7, #6]
 8000676:	8abb      	ldrh	r3, [r7, #20]
 8000678:	1ad3      	subs	r3, r2, r3
 800067a:	80fb      	strh	r3, [r7, #6]
 800067c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800067e:	8abb      	ldrh	r3, [r7, #20]
 8000680:	4413      	add	r3, r2
 8000682:	84bb      	strh	r3, [r7, #36]	; 0x24
 8000684:	6a3b      	ldr	r3, [r7, #32]
 8000686:	3301      	adds	r3, #1
 8000688:	623b      	str	r3, [r7, #32]
 800068a:	8b3b      	ldrh	r3, [r7, #24]
 800068c:	6a3a      	ldr	r2, [r7, #32]
 800068e:	429a      	cmp	r2, r3
 8000690:	dbc9      	blt.n	8000626 <EEPROM_Read+0x4a>
 8000692:	bf00      	nop
 8000694:	bf00      	nop
 8000696:	3728      	adds	r7, #40	; 0x28
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	20000078 	.word	0x20000078

080006a0 <EEPROM_PageErase>:
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b08c      	sub	sp, #48	; 0x30
 80006a4:	af04      	add	r7, sp, #16
 80006a6:	4603      	mov	r3, r0
 80006a8:	80fb      	strh	r3, [r7, #6]
 80006aa:	2304      	movs	r3, #4
 80006ac:	61fb      	str	r3, [r7, #28]
 80006ae:	88fa      	ldrh	r2, [r7, #6]
 80006b0:	69fb      	ldr	r3, [r7, #28]
 80006b2:	fa02 f303 	lsl.w	r3, r2, r3
 80006b6:	837b      	strh	r3, [r7, #26]
 80006b8:	f107 0308 	add.w	r3, r7, #8
 80006bc:	2210      	movs	r2, #16
 80006be:	21ff      	movs	r1, #255	; 0xff
 80006c0:	4618      	mov	r0, r3
 80006c2:	f005 fcbb 	bl	800603c <memset>
 80006c6:	8b7a      	ldrh	r2, [r7, #26]
 80006c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006cc:	9302      	str	r3, [sp, #8]
 80006ce:	2310      	movs	r3, #16
 80006d0:	9301      	str	r3, [sp, #4]
 80006d2:	f107 0308 	add.w	r3, r7, #8
 80006d6:	9300      	str	r3, [sp, #0]
 80006d8:	2302      	movs	r3, #2
 80006da:	21a0      	movs	r1, #160	; 0xa0
 80006dc:	4804      	ldr	r0, [pc, #16]	; (80006f0 <EEPROM_PageErase+0x50>)
 80006de:	f001 fc67 	bl	8001fb0 <HAL_I2C_Mem_Write>
 80006e2:	2005      	movs	r0, #5
 80006e4:	f000 fc96 	bl	8001014 <HAL_Delay>
 80006e8:	bf00      	nop
 80006ea:	3720      	adds	r7, #32
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	20000078 	.word	0x20000078

080006f4 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80006f8:	f000 fc1a 	bl	8000f30 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80006fc:	f000 f858 	bl	80007b0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000700:	f000 f936 	bl	8000970 <MX_GPIO_Init>
	MX_I2C1_Init();
 8000704:	f000 f906 	bl	8000914 <MX_I2C1_Init>
	MX_ADC1_Init();
 8000708:	f000 f8b2 	bl	8000870 <MX_ADC1_Init>
	/* USER CODE BEGIN 2 */
	HAL_I2C_Init(&hi2c1);
 800070c:	4818      	ldr	r0, [pc, #96]	; (8000770 <main+0x7c>)
 800070e:	f001 fb0b 	bl	8001d28 <HAL_I2C_Init>
	EEPROM_voidInitTime();
 8000712:	f000 f96f 	bl	80009f4 <EEPROM_voidInitTime>

	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize();
 8000716:	f002 ff3f 	bl	8003598 <osKernelInitialize>
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of tim_Task1 */
	tim_Task1Handle = osThreadNew(IncTimFunc, NULL, &tim_Task1_attributes);
 800071a:	4a16      	ldr	r2, [pc, #88]	; (8000774 <main+0x80>)
 800071c:	2100      	movs	r1, #0
 800071e:	4816      	ldr	r0, [pc, #88]	; (8000778 <main+0x84>)
 8000720:	f002 ff84 	bl	800362c <osThreadNew>
 8000724:	4603      	mov	r3, r0
 8000726:	4a15      	ldr	r2, [pc, #84]	; (800077c <main+0x88>)
 8000728:	6013      	str	r3, [r2, #0]

	/* creation of timTask2 */
	timTask2Handle = osThreadNew(EEPROM_saveTimVal, NULL, &timTask2_attributes);
 800072a:	4a15      	ldr	r2, [pc, #84]	; (8000780 <main+0x8c>)
 800072c:	2100      	movs	r1, #0
 800072e:	4815      	ldr	r0, [pc, #84]	; (8000784 <main+0x90>)
 8000730:	f002 ff7c 	bl	800362c <osThreadNew>
 8000734:	4603      	mov	r3, r0
 8000736:	4a14      	ldr	r2, [pc, #80]	; (8000788 <main+0x94>)
 8000738:	6013      	str	r3, [r2, #0]

	/* creation of fuelLevelTask1 */
	fuelLevelTask1Handle = osThreadNew(getFuelLevelFromADC, NULL, &fuelLevelTask1_attributes);
 800073a:	4a14      	ldr	r2, [pc, #80]	; (800078c <main+0x98>)
 800073c:	2100      	movs	r1, #0
 800073e:	4814      	ldr	r0, [pc, #80]	; (8000790 <main+0x9c>)
 8000740:	f002 ff74 	bl	800362c <osThreadNew>
 8000744:	4603      	mov	r3, r0
 8000746:	4a13      	ldr	r2, [pc, #76]	; (8000794 <main+0xa0>)
 8000748:	6013      	str	r3, [r2, #0]

	/* creation of fuelLevelTask2 */
	fuelLevelTask2Handle = osThreadNew(mapFuelLevelDigtalToLED, NULL, &fuelLevelTask2_attributes);
 800074a:	4a13      	ldr	r2, [pc, #76]	; (8000798 <main+0xa4>)
 800074c:	2100      	movs	r1, #0
 800074e:	4813      	ldr	r0, [pc, #76]	; (800079c <main+0xa8>)
 8000750:	f002 ff6c 	bl	800362c <osThreadNew>
 8000754:	4603      	mov	r3, r0
 8000756:	4a12      	ldr	r2, [pc, #72]	; (80007a0 <main+0xac>)
 8000758:	6013      	str	r3, [r2, #0]

	/* creation of LM35Task0 */
	LM35Task0Handle = osThreadNew(LM35_getTemprature, NULL, &LM35Task0_attributes);
 800075a:	4a12      	ldr	r2, [pc, #72]	; (80007a4 <main+0xb0>)
 800075c:	2100      	movs	r1, #0
 800075e:	4812      	ldr	r0, [pc, #72]	; (80007a8 <main+0xb4>)
 8000760:	f002 ff64 	bl	800362c <osThreadNew>
 8000764:	4603      	mov	r3, r0
 8000766:	4a11      	ldr	r2, [pc, #68]	; (80007ac <main+0xb8>)
 8000768:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	/* USER CODE END RTOS_EVENTS */

	/* Start scheduler */
	osKernelStart();
 800076a:	f002 ff39 	bl	80035e0 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 800076e:	e7fe      	b.n	800076e <main+0x7a>
 8000770:	20000078 	.word	0x20000078
 8000774:	08006124 	.word	0x08006124
 8000778:	08000c29 	.word	0x08000c29
 800077c:	200000cc 	.word	0x200000cc
 8000780:	08006148 	.word	0x08006148
 8000784:	08000c49 	.word	0x08000c49
 8000788:	200000d0 	.word	0x200000d0
 800078c:	0800616c 	.word	0x0800616c
 8000790:	08000c6d 	.word	0x08000c6d
 8000794:	200000d4 	.word	0x200000d4
 8000798:	08006190 	.word	0x08006190
 800079c:	08000cb1 	.word	0x08000cb1
 80007a0:	200000d8 	.word	0x200000d8
 80007a4:	080061b4 	.word	0x080061b4
 80007a8:	08000cd9 	.word	0x08000cd9
 80007ac:	200000dc 	.word	0x200000dc

080007b0 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b094      	sub	sp, #80	; 0x50
 80007b4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007b6:	f107 0320 	add.w	r3, r7, #32
 80007ba:	2230      	movs	r2, #48	; 0x30
 80007bc:	2100      	movs	r1, #0
 80007be:	4618      	mov	r0, r3
 80007c0:	f005 fc3c 	bl	800603c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007c4:	f107 030c 	add.w	r3, r7, #12
 80007c8:	2200      	movs	r2, #0
 80007ca:	601a      	str	r2, [r3, #0]
 80007cc:	605a      	str	r2, [r3, #4]
 80007ce:	609a      	str	r2, [r3, #8]
 80007d0:	60da      	str	r2, [r3, #12]
 80007d2:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80007d4:	2300      	movs	r3, #0
 80007d6:	60bb      	str	r3, [r7, #8]
 80007d8:	4b23      	ldr	r3, [pc, #140]	; (8000868 <SystemClock_Config+0xb8>)
 80007da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007dc:	4a22      	ldr	r2, [pc, #136]	; (8000868 <SystemClock_Config+0xb8>)
 80007de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007e2:	6413      	str	r3, [r2, #64]	; 0x40
 80007e4:	4b20      	ldr	r3, [pc, #128]	; (8000868 <SystemClock_Config+0xb8>)
 80007e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007ec:	60bb      	str	r3, [r7, #8]
 80007ee:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80007f0:	2300      	movs	r3, #0
 80007f2:	607b      	str	r3, [r7, #4]
 80007f4:	4b1d      	ldr	r3, [pc, #116]	; (800086c <SystemClock_Config+0xbc>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80007fc:	4a1b      	ldr	r2, [pc, #108]	; (800086c <SystemClock_Config+0xbc>)
 80007fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000802:	6013      	str	r3, [r2, #0]
 8000804:	4b19      	ldr	r3, [pc, #100]	; (800086c <SystemClock_Config+0xbc>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800080c:	607b      	str	r3, [r7, #4]
 800080e:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000810:	2302      	movs	r3, #2
 8000812:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000814:	2301      	movs	r3, #1
 8000816:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000818:	2310      	movs	r3, #16
 800081a:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800081c:	2300      	movs	r3, #0
 800081e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000820:	f107 0320 	add.w	r3, r7, #32
 8000824:	4618      	mov	r0, r3
 8000826:	f002 fa3f 	bl	8002ca8 <HAL_RCC_OscConfig>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <SystemClock_Config+0x84>
	{
		Error_Handler();
 8000830:	f000 fa61 	bl	8000cf6 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000834:	230f      	movs	r3, #15
 8000836:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000838:	2300      	movs	r3, #0
 800083a:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800083c:	2300      	movs	r3, #0
 800083e:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000840:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000844:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000846:	2300      	movs	r3, #0
 8000848:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800084a:	f107 030c 	add.w	r3, r7, #12
 800084e:	2100      	movs	r1, #0
 8000850:	4618      	mov	r0, r3
 8000852:	f002 fca1 	bl	8003198 <HAL_RCC_ClockConfig>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <SystemClock_Config+0xb0>
	{
		Error_Handler();
 800085c:	f000 fa4b 	bl	8000cf6 <Error_Handler>
	}
}
 8000860:	bf00      	nop
 8000862:	3750      	adds	r7, #80	; 0x50
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}
 8000868:	40023800 	.word	0x40023800
 800086c:	40007000 	.word	0x40007000

08000870 <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b084      	sub	sp, #16
 8000874:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = {0};
 8000876:	463b      	mov	r3, r7
 8000878:	2200      	movs	r2, #0
 800087a:	601a      	str	r2, [r3, #0]
 800087c:	605a      	str	r2, [r3, #4]
 800087e:	609a      	str	r2, [r3, #8]
 8000880:	60da      	str	r2, [r3, #12]

	/* USER CODE END ADC1_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 8000882:	4b21      	ldr	r3, [pc, #132]	; (8000908 <MX_ADC1_Init+0x98>)
 8000884:	4a21      	ldr	r2, [pc, #132]	; (800090c <MX_ADC1_Init+0x9c>)
 8000886:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000888:	4b1f      	ldr	r3, [pc, #124]	; (8000908 <MX_ADC1_Init+0x98>)
 800088a:	2200      	movs	r2, #0
 800088c:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800088e:	4b1e      	ldr	r3, [pc, #120]	; (8000908 <MX_ADC1_Init+0x98>)
 8000890:	2200      	movs	r2, #0
 8000892:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = DISABLE;
 8000894:	4b1c      	ldr	r3, [pc, #112]	; (8000908 <MX_ADC1_Init+0x98>)
 8000896:	2200      	movs	r2, #0
 8000898:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = DISABLE;
 800089a:	4b1b      	ldr	r3, [pc, #108]	; (8000908 <MX_ADC1_Init+0x98>)
 800089c:	2200      	movs	r2, #0
 800089e:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 80008a0:	4b19      	ldr	r3, [pc, #100]	; (8000908 <MX_ADC1_Init+0x98>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008a8:	4b17      	ldr	r3, [pc, #92]	; (8000908 <MX_ADC1_Init+0x98>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008ae:	4b16      	ldr	r3, [pc, #88]	; (8000908 <MX_ADC1_Init+0x98>)
 80008b0:	4a17      	ldr	r2, [pc, #92]	; (8000910 <MX_ADC1_Init+0xa0>)
 80008b2:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008b4:	4b14      	ldr	r3, [pc, #80]	; (8000908 <MX_ADC1_Init+0x98>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 80008ba:	4b13      	ldr	r3, [pc, #76]	; (8000908 <MX_ADC1_Init+0x98>)
 80008bc:	2201      	movs	r2, #1
 80008be:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 80008c0:	4b11      	ldr	r3, [pc, #68]	; (8000908 <MX_ADC1_Init+0x98>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008c8:	4b0f      	ldr	r3, [pc, #60]	; (8000908 <MX_ADC1_Init+0x98>)
 80008ca:	2201      	movs	r2, #1
 80008cc:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008ce:	480e      	ldr	r0, [pc, #56]	; (8000908 <MX_ADC1_Init+0x98>)
 80008d0:	f000 fbc4 	bl	800105c <HAL_ADC_Init>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <MX_ADC1_Init+0x6e>
	{
		Error_Handler();
 80008da:	f000 fa0c 	bl	8000cf6 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 80008de:	2300      	movs	r3, #0
 80008e0:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 80008e2:	2301      	movs	r3, #1
 80008e4:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80008e6:	2300      	movs	r3, #0
 80008e8:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008ea:	463b      	mov	r3, r7
 80008ec:	4619      	mov	r1, r3
 80008ee:	4806      	ldr	r0, [pc, #24]	; (8000908 <MX_ADC1_Init+0x98>)
 80008f0:	f000 fd78 	bl	80013e4 <HAL_ADC_ConfigChannel>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <MX_ADC1_Init+0x8e>
	{
		Error_Handler();
 80008fa:	f000 f9fc 	bl	8000cf6 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 80008fe:	bf00      	nop
 8000900:	3710      	adds	r7, #16
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	20000030 	.word	0x20000030
 800090c:	40012000 	.word	0x40012000
 8000910:	0f000001 	.word	0x0f000001

08000914 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8000918:	4b12      	ldr	r3, [pc, #72]	; (8000964 <MX_I2C1_Init+0x50>)
 800091a:	4a13      	ldr	r2, [pc, #76]	; (8000968 <MX_I2C1_Init+0x54>)
 800091c:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 800091e:	4b11      	ldr	r3, [pc, #68]	; (8000964 <MX_I2C1_Init+0x50>)
 8000920:	4a12      	ldr	r2, [pc, #72]	; (800096c <MX_I2C1_Init+0x58>)
 8000922:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000924:	4b0f      	ldr	r3, [pc, #60]	; (8000964 <MX_I2C1_Init+0x50>)
 8000926:	2200      	movs	r2, #0
 8000928:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 800092a:	4b0e      	ldr	r3, [pc, #56]	; (8000964 <MX_I2C1_Init+0x50>)
 800092c:	2200      	movs	r2, #0
 800092e:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000930:	4b0c      	ldr	r3, [pc, #48]	; (8000964 <MX_I2C1_Init+0x50>)
 8000932:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000936:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000938:	4b0a      	ldr	r3, [pc, #40]	; (8000964 <MX_I2C1_Init+0x50>)
 800093a:	2200      	movs	r2, #0
 800093c:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 800093e:	4b09      	ldr	r3, [pc, #36]	; (8000964 <MX_I2C1_Init+0x50>)
 8000940:	2200      	movs	r2, #0
 8000942:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000944:	4b07      	ldr	r3, [pc, #28]	; (8000964 <MX_I2C1_Init+0x50>)
 8000946:	2200      	movs	r2, #0
 8000948:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800094a:	4b06      	ldr	r3, [pc, #24]	; (8000964 <MX_I2C1_Init+0x50>)
 800094c:	2200      	movs	r2, #0
 800094e:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000950:	4804      	ldr	r0, [pc, #16]	; (8000964 <MX_I2C1_Init+0x50>)
 8000952:	f001 f9e9 	bl	8001d28 <HAL_I2C_Init>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <MX_I2C1_Init+0x4c>
	{
		Error_Handler();
 800095c:	f000 f9cb 	bl	8000cf6 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8000960:	bf00      	nop
 8000962:	bd80      	pop	{r7, pc}
 8000964:	20000078 	.word	0x20000078
 8000968:	40005400 	.word	0x40005400
 800096c:	000186a0 	.word	0x000186a0

08000970 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b088      	sub	sp, #32
 8000974:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000976:	f107 030c 	add.w	r3, r7, #12
 800097a:	2200      	movs	r2, #0
 800097c:	601a      	str	r2, [r3, #0]
 800097e:	605a      	str	r2, [r3, #4]
 8000980:	609a      	str	r2, [r3, #8]
 8000982:	60da      	str	r2, [r3, #12]
 8000984:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000986:	2300      	movs	r3, #0
 8000988:	60bb      	str	r3, [r7, #8]
 800098a:	4b18      	ldr	r3, [pc, #96]	; (80009ec <MX_GPIO_Init+0x7c>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098e:	4a17      	ldr	r2, [pc, #92]	; (80009ec <MX_GPIO_Init+0x7c>)
 8000990:	f043 0301 	orr.w	r3, r3, #1
 8000994:	6313      	str	r3, [r2, #48]	; 0x30
 8000996:	4b15      	ldr	r3, [pc, #84]	; (80009ec <MX_GPIO_Init+0x7c>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099a:	f003 0301 	and.w	r3, r3, #1
 800099e:	60bb      	str	r3, [r7, #8]
 80009a0:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80009a2:	2300      	movs	r3, #0
 80009a4:	607b      	str	r3, [r7, #4]
 80009a6:	4b11      	ldr	r3, [pc, #68]	; (80009ec <MX_GPIO_Init+0x7c>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009aa:	4a10      	ldr	r2, [pc, #64]	; (80009ec <MX_GPIO_Init+0x7c>)
 80009ac:	f043 0302 	orr.w	r3, r3, #2
 80009b0:	6313      	str	r3, [r2, #48]	; 0x30
 80009b2:	4b0e      	ldr	r3, [pc, #56]	; (80009ec <MX_GPIO_Init+0x7c>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b6:	f003 0302 	and.w	r3, r3, #2
 80009ba:	607b      	str	r3, [r7, #4]
 80009bc:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 80009be:	2200      	movs	r2, #0
 80009c0:	211e      	movs	r1, #30
 80009c2:	480b      	ldr	r0, [pc, #44]	; (80009f0 <MX_GPIO_Init+0x80>)
 80009c4:	f001 f996 	bl	8001cf4 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : PA1 PA2 PA3 PA4 */
	GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 80009c8:	231e      	movs	r3, #30
 80009ca:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009cc:	2301      	movs	r3, #1
 80009ce:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d0:	2300      	movs	r3, #0
 80009d2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d4:	2300      	movs	r3, #0
 80009d6:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009d8:	f107 030c 	add.w	r3, r7, #12
 80009dc:	4619      	mov	r1, r3
 80009de:	4804      	ldr	r0, [pc, #16]	; (80009f0 <MX_GPIO_Init+0x80>)
 80009e0:	f001 f804 	bl	80019ec <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80009e4:	bf00      	nop
 80009e6:	3720      	adds	r7, #32
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	40023800 	.word	0x40023800
 80009f0:	40020000 	.word	0x40020000

080009f4 <EEPROM_voidInitTime>:
uint32_t GetElapsedTime(void){
	uint32_t l_ElapsTim = g_timeElapsedSec;
	return l_ElapsTim;
}
/* Read Flag value */
void EEPROM_voidInitTime(void){
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af00      	add	r7, sp, #0
	EEPROM_Read(PAGE_NUM_FLAG_LOC, OFFSET_NUM_FLAG, &g_flag, FLAG_SIZE_DATA);
 80009fa:	2301      	movs	r3, #1
 80009fc:	4a15      	ldr	r2, [pc, #84]	; (8000a54 <EEPROM_voidInitTime+0x60>)
 80009fe:	2103      	movs	r1, #3
 8000a00:	2064      	movs	r0, #100	; 0x64
 8000a02:	f7ff fdeb 	bl	80005dc <EEPROM_Read>

	HAL_Delay(5);
 8000a06:	2005      	movs	r0, #5
 8000a08:	f000 fb04 	bl	8001014 <HAL_Delay>
	if(g_flag != FIRST_TIME){
 8000a0c:	4b11      	ldr	r3, [pc, #68]	; (8000a54 <EEPROM_voidInitTime+0x60>)
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	2bff      	cmp	r3, #255	; 0xff
 8000a12:	d006      	beq.n	8000a22 <EEPROM_voidInitTime+0x2e>

		EEPROM_Read(PAGE_NUM_TIM_LOC, OFFSET_NUM_TIM, (uint8_t *)&g_timeElapsedSec, TIM_SIZE_DATA);
 8000a14:	2304      	movs	r3, #4
 8000a16:	4a10      	ldr	r2, [pc, #64]	; (8000a58 <EEPROM_voidInitTime+0x64>)
 8000a18:	2101      	movs	r1, #1
 8000a1a:	2001      	movs	r0, #1
 8000a1c:	f7ff fdde 	bl	80005dc <EEPROM_Read>
		for(uint8_t i = 0 ; i < 7 ; i++){
			EEPROM_PageErase(i);
		}
		EEPROM_Write(PAGE_NUM_FLAG_LOC, OFFSET_NUM_FLAG,&Done, FLAG_SIZE_DATA);
	}
}
 8000a20:	e013      	b.n	8000a4a <EEPROM_voidInitTime+0x56>
		for(uint8_t i = 0 ; i < 7 ; i++){
 8000a22:	2300      	movs	r3, #0
 8000a24:	71fb      	strb	r3, [r7, #7]
 8000a26:	e007      	b.n	8000a38 <EEPROM_voidInitTime+0x44>
			EEPROM_PageErase(i);
 8000a28:	79fb      	ldrb	r3, [r7, #7]
 8000a2a:	b29b      	uxth	r3, r3
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f7ff fe37 	bl	80006a0 <EEPROM_PageErase>
		for(uint8_t i = 0 ; i < 7 ; i++){
 8000a32:	79fb      	ldrb	r3, [r7, #7]
 8000a34:	3301      	adds	r3, #1
 8000a36:	71fb      	strb	r3, [r7, #7]
 8000a38:	79fb      	ldrb	r3, [r7, #7]
 8000a3a:	2b06      	cmp	r3, #6
 8000a3c:	d9f4      	bls.n	8000a28 <EEPROM_voidInitTime+0x34>
		EEPROM_Write(PAGE_NUM_FLAG_LOC, OFFSET_NUM_FLAG,&Done, FLAG_SIZE_DATA);
 8000a3e:	2301      	movs	r3, #1
 8000a40:	4a06      	ldr	r2, [pc, #24]	; (8000a5c <EEPROM_voidInitTime+0x68>)
 8000a42:	2103      	movs	r1, #3
 8000a44:	2064      	movs	r0, #100	; 0x64
 8000a46:	f7ff fd63 	bl	8000510 <EEPROM_Write>
}
 8000a4a:	bf00      	nop
 8000a4c:	3708      	adds	r7, #8
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	200000e4 	.word	0x200000e4
 8000a58:	200000e0 	.word	0x200000e0
 8000a5c:	20000000 	.word	0x20000000

08000a60 <mapDigitalvalueToLeds>:


//fuel part no RTOS
void mapDigitalvalueToLeds(uint32_t digitalValue){
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b082      	sub	sp, #8
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
	//empty tank
	if (digitalValue <= FUEL_MINIMUM_DIGITA_VALUE){
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d117      	bne.n	8000a9e <mapDigitalvalueToLeds+0x3e>

		HAL_GPIO_WritePin(FUEL_LED0_PORT, FUEL_LED0_PIN,GPIO_PIN_SET);
 8000a6e:	2201      	movs	r2, #1
 8000a70:	2102      	movs	r1, #2
 8000a72:	4844      	ldr	r0, [pc, #272]	; (8000b84 <mapDigitalvalueToLeds+0x124>)
 8000a74:	f001 f93e 	bl	8001cf4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(FUEL_LED1_PORT, FUEL_LED1_PIN,GPIO_PIN_SET);
 8000a78:	2201      	movs	r2, #1
 8000a7a:	2104      	movs	r1, #4
 8000a7c:	4841      	ldr	r0, [pc, #260]	; (8000b84 <mapDigitalvalueToLeds+0x124>)
 8000a7e:	f001 f939 	bl	8001cf4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(FUEL_LED2_PORT, FUEL_LED2_PIN,GPIO_PIN_SET);
 8000a82:	2201      	movs	r2, #1
 8000a84:	2108      	movs	r1, #8
 8000a86:	483f      	ldr	r0, [pc, #252]	; (8000b84 <mapDigitalvalueToLeds+0x124>)
 8000a88:	f001 f934 	bl	8001cf4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(FUEL_LED3_PORT, FUEL_LED3_PIN,GPIO_PIN_SET);
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	2110      	movs	r1, #16
 8000a90:	483c      	ldr	r0, [pc, #240]	; (8000b84 <mapDigitalvalueToLeds+0x124>)
 8000a92:	f001 f92f 	bl	8001cf4 <HAL_GPIO_WritePin>

		curretFuelValue = FUEL_LEVEL_EMPTY_TANK;
 8000a96:	4b3c      	ldr	r3, [pc, #240]	; (8000b88 <mapDigitalvalueToLeds+0x128>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(FUEL_LED2_PORT, FUEL_LED2_PIN,GPIO_PIN_RESET);
		HAL_GPIO_WritePin(FUEL_LED3_PORT, FUEL_LED3_PIN,GPIO_PIN_RESET);

		curretFuelValue = FUEL_LEVEL_FULL_TANK;
	}
}
 8000a9c:	e06e      	b.n	8000b7c <mapDigitalvalueToLeds+0x11c>
	else if (digitalValue <= (FUEL_MAX_DIGITA_VALUE - FUEL_MINIMUM_DIGITA_VALUE)/4){
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000aa4:	d817      	bhi.n	8000ad6 <mapDigitalvalueToLeds+0x76>
		HAL_GPIO_WritePin(FUEL_LED0_PORT, FUEL_LED0_PIN,GPIO_PIN_SET);
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	2102      	movs	r1, #2
 8000aaa:	4836      	ldr	r0, [pc, #216]	; (8000b84 <mapDigitalvalueToLeds+0x124>)
 8000aac:	f001 f922 	bl	8001cf4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(FUEL_LED1_PORT, FUEL_LED1_PIN,GPIO_PIN_SET);
 8000ab0:	2201      	movs	r2, #1
 8000ab2:	2104      	movs	r1, #4
 8000ab4:	4833      	ldr	r0, [pc, #204]	; (8000b84 <mapDigitalvalueToLeds+0x124>)
 8000ab6:	f001 f91d 	bl	8001cf4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(FUEL_LED2_PORT, FUEL_LED2_PIN,GPIO_PIN_SET);
 8000aba:	2201      	movs	r2, #1
 8000abc:	2108      	movs	r1, #8
 8000abe:	4831      	ldr	r0, [pc, #196]	; (8000b84 <mapDigitalvalueToLeds+0x124>)
 8000ac0:	f001 f918 	bl	8001cf4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(FUEL_LED3_PORT, FUEL_LED3_PIN,GPIO_PIN_RESET);
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	2110      	movs	r1, #16
 8000ac8:	482e      	ldr	r0, [pc, #184]	; (8000b84 <mapDigitalvalueToLeds+0x124>)
 8000aca:	f001 f913 	bl	8001cf4 <HAL_GPIO_WritePin>
		curretFuelValue = FUEL_LEVEL_QUARTER_TANK;
 8000ace:	4b2e      	ldr	r3, [pc, #184]	; (8000b88 <mapDigitalvalueToLeds+0x128>)
 8000ad0:	2201      	movs	r2, #1
 8000ad2:	701a      	strb	r2, [r3, #0]
}
 8000ad4:	e052      	b.n	8000b7c <mapDigitalvalueToLeds+0x11c>
	else if (digitalValue <= (FUEL_MAX_DIGITA_VALUE - FUEL_MINIMUM_DIGITA_VALUE)/2){
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000adc:	d817      	bhi.n	8000b0e <mapDigitalvalueToLeds+0xae>
		HAL_GPIO_WritePin(FUEL_LED0_PORT, FUEL_LED0_PIN,GPIO_PIN_SET);
 8000ade:	2201      	movs	r2, #1
 8000ae0:	2102      	movs	r1, #2
 8000ae2:	4828      	ldr	r0, [pc, #160]	; (8000b84 <mapDigitalvalueToLeds+0x124>)
 8000ae4:	f001 f906 	bl	8001cf4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(FUEL_LED1_PORT, FUEL_LED1_PIN,GPIO_PIN_SET);
 8000ae8:	2201      	movs	r2, #1
 8000aea:	2104      	movs	r1, #4
 8000aec:	4825      	ldr	r0, [pc, #148]	; (8000b84 <mapDigitalvalueToLeds+0x124>)
 8000aee:	f001 f901 	bl	8001cf4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(FUEL_LED2_PORT, FUEL_LED2_PIN,GPIO_PIN_RESET);
 8000af2:	2200      	movs	r2, #0
 8000af4:	2108      	movs	r1, #8
 8000af6:	4823      	ldr	r0, [pc, #140]	; (8000b84 <mapDigitalvalueToLeds+0x124>)
 8000af8:	f001 f8fc 	bl	8001cf4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(FUEL_LED3_PORT, FUEL_LED3_PIN,GPIO_PIN_RESET);
 8000afc:	2200      	movs	r2, #0
 8000afe:	2110      	movs	r1, #16
 8000b00:	4820      	ldr	r0, [pc, #128]	; (8000b84 <mapDigitalvalueToLeds+0x124>)
 8000b02:	f001 f8f7 	bl	8001cf4 <HAL_GPIO_WritePin>
		curretFuelValue = FUEL_LEVEL_HALF_TANK;
 8000b06:	4b20      	ldr	r3, [pc, #128]	; (8000b88 <mapDigitalvalueToLeds+0x128>)
 8000b08:	2202      	movs	r2, #2
 8000b0a:	701a      	strb	r2, [r3, #0]
}
 8000b0c:	e036      	b.n	8000b7c <mapDigitalvalueToLeds+0x11c>
	else if (digitalValue <= (FUEL_MAX_DIGITA_VALUE - FUEL_MINIMUM_DIGITA_VALUE)/4*3){
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8000b14:	d817      	bhi.n	8000b46 <mapDigitalvalueToLeds+0xe6>
		HAL_GPIO_WritePin(FUEL_LED0_PORT, FUEL_LED0_PIN,GPIO_PIN_SET);
 8000b16:	2201      	movs	r2, #1
 8000b18:	2102      	movs	r1, #2
 8000b1a:	481a      	ldr	r0, [pc, #104]	; (8000b84 <mapDigitalvalueToLeds+0x124>)
 8000b1c:	f001 f8ea 	bl	8001cf4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(FUEL_LED1_PORT, FUEL_LED1_PIN,GPIO_PIN_RESET);
 8000b20:	2200      	movs	r2, #0
 8000b22:	2104      	movs	r1, #4
 8000b24:	4817      	ldr	r0, [pc, #92]	; (8000b84 <mapDigitalvalueToLeds+0x124>)
 8000b26:	f001 f8e5 	bl	8001cf4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(FUEL_LED2_PORT, FUEL_LED2_PIN,GPIO_PIN_RESET);
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	2108      	movs	r1, #8
 8000b2e:	4815      	ldr	r0, [pc, #84]	; (8000b84 <mapDigitalvalueToLeds+0x124>)
 8000b30:	f001 f8e0 	bl	8001cf4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(FUEL_LED3_PORT, FUEL_LED3_PIN,GPIO_PIN_RESET);
 8000b34:	2200      	movs	r2, #0
 8000b36:	2110      	movs	r1, #16
 8000b38:	4812      	ldr	r0, [pc, #72]	; (8000b84 <mapDigitalvalueToLeds+0x124>)
 8000b3a:	f001 f8db 	bl	8001cf4 <HAL_GPIO_WritePin>
		curretFuelValue = FUEL_LEVEL_THREE_Q_TANK;
 8000b3e:	4b12      	ldr	r3, [pc, #72]	; (8000b88 <mapDigitalvalueToLeds+0x128>)
 8000b40:	2203      	movs	r2, #3
 8000b42:	701a      	strb	r2, [r3, #0]
}
 8000b44:	e01a      	b.n	8000b7c <mapDigitalvalueToLeds+0x11c>
	else if (digitalValue <= (FUEL_MAX_DIGITA_VALUE - FUEL_MINIMUM_DIGITA_VALUE)){
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000b4c:	d816      	bhi.n	8000b7c <mapDigitalvalueToLeds+0x11c>
		HAL_GPIO_WritePin(FUEL_LED0_PORT, FUEL_LED0_PIN,GPIO_PIN_RESET);
 8000b4e:	2200      	movs	r2, #0
 8000b50:	2102      	movs	r1, #2
 8000b52:	480c      	ldr	r0, [pc, #48]	; (8000b84 <mapDigitalvalueToLeds+0x124>)
 8000b54:	f001 f8ce 	bl	8001cf4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(FUEL_LED1_PORT, FUEL_LED1_PIN,GPIO_PIN_RESET);
 8000b58:	2200      	movs	r2, #0
 8000b5a:	2104      	movs	r1, #4
 8000b5c:	4809      	ldr	r0, [pc, #36]	; (8000b84 <mapDigitalvalueToLeds+0x124>)
 8000b5e:	f001 f8c9 	bl	8001cf4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(FUEL_LED2_PORT, FUEL_LED2_PIN,GPIO_PIN_RESET);
 8000b62:	2200      	movs	r2, #0
 8000b64:	2108      	movs	r1, #8
 8000b66:	4807      	ldr	r0, [pc, #28]	; (8000b84 <mapDigitalvalueToLeds+0x124>)
 8000b68:	f001 f8c4 	bl	8001cf4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(FUEL_LED3_PORT, FUEL_LED3_PIN,GPIO_PIN_RESET);
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	2110      	movs	r1, #16
 8000b70:	4804      	ldr	r0, [pc, #16]	; (8000b84 <mapDigitalvalueToLeds+0x124>)
 8000b72:	f001 f8bf 	bl	8001cf4 <HAL_GPIO_WritePin>
		curretFuelValue = FUEL_LEVEL_FULL_TANK;
 8000b76:	4b04      	ldr	r3, [pc, #16]	; (8000b88 <mapDigitalvalueToLeds+0x128>)
 8000b78:	2204      	movs	r2, #4
 8000b7a:	701a      	strb	r2, [r3, #0]
}
 8000b7c:	bf00      	nop
 8000b7e:	3708      	adds	r7, #8
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	40020000 	.word	0x40020000
 8000b88:	200000ec 	.word	0x200000ec

08000b8c <getDigitalTemperatureFromADC>:

//lm 35 temprater no RTOS
void getDigitalTemperatureFromADC (){
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc1);
 8000b90:	4809      	ldr	r0, [pc, #36]	; (8000bb8 <getDigitalTemperatureFromADC+0x2c>)
 8000b92:	f000 faa7 	bl	80010e4 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 100);
 8000b96:	2164      	movs	r1, #100	; 0x64
 8000b98:	4807      	ldr	r0, [pc, #28]	; (8000bb8 <getDigitalTemperatureFromADC+0x2c>)
 8000b9a:	f000 fb8a 	bl	80012b2 <HAL_ADC_PollForConversion>
	ADC_TempratureDigitalRead = HAL_ADC_GetValue(&hadc1);
 8000b9e:	4806      	ldr	r0, [pc, #24]	; (8000bb8 <getDigitalTemperatureFromADC+0x2c>)
 8000ba0:	f000 fc12 	bl	80013c8 <HAL_ADC_GetValue>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	b29a      	uxth	r2, r3
 8000ba8:	4b04      	ldr	r3, [pc, #16]	; (8000bbc <getDigitalTemperatureFromADC+0x30>)
 8000baa:	801a      	strh	r2, [r3, #0]
	HAL_ADC_Stop(&hadc1);
 8000bac:	4802      	ldr	r0, [pc, #8]	; (8000bb8 <getDigitalTemperatureFromADC+0x2c>)
 8000bae:	f000 fb4d 	bl	800124c <HAL_ADC_Stop>
}
 8000bb2:	bf00      	nop
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	20000030 	.word	0x20000030
 8000bbc:	200000ee 	.word	0x200000ee

08000bc0 <mapDigitalTemperatureToVolt>:
void mapDigitalTemperatureToVolt() {
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
	temperatureInMVolt = (ADC_TempratureDigitalRead*(LM35_MAX_OUT_VOLt-LM35_MINIMUM_OUT_VOLT))/(LM35_MAX_DIGITA_VALUE)+LM35_MINIMUM_OUT_VOLT;
 8000bc4:	4b09      	ldr	r3, [pc, #36]	; (8000bec <mapDigitalTemperatureToVolt+0x2c>)
 8000bc6:	881b      	ldrh	r3, [r3, #0]
 8000bc8:	461a      	mov	r2, r3
 8000bca:	f44f 63b9 	mov.w	r3, #1480	; 0x5c8
 8000bce:	fb02 f303 	mul.w	r3, r2, r3
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	da01      	bge.n	8000bda <mapDigitalTemperatureToVolt+0x1a>
 8000bd6:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8000bda:	131b      	asrs	r3, r3, #12
 8000bdc:	b29a      	uxth	r2, r3
 8000bde:	4b04      	ldr	r3, [pc, #16]	; (8000bf0 <mapDigitalTemperatureToVolt+0x30>)
 8000be0:	801a      	strh	r2, [r3, #0]
}
 8000be2:	bf00      	nop
 8000be4:	46bd      	mov	sp, r7
 8000be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bea:	4770      	bx	lr
 8000bec:	200000ee 	.word	0x200000ee
 8000bf0:	200000f2 	.word	0x200000f2

08000bf4 <mapMVoltToCelsius>:

void mapMVoltToCelsius() {
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
	temperatureInCelsius = (temperatureInMVolt*(LM35_MAX_TEMPRATURE-LM35_MINIMUM_TEMPRATURE))/(LM35_MAX_OUT_VOLt-LM35_MINIMUM_OUT_VOLT) + LM35_MINIMUM_TEMPRATURE ;
 8000bf8:	4b08      	ldr	r3, [pc, #32]	; (8000c1c <mapMVoltToCelsius+0x28>)
 8000bfa:	881b      	ldrh	r3, [r3, #0]
 8000bfc:	4a08      	ldr	r2, [pc, #32]	; (8000c20 <mapMVoltToCelsius+0x2c>)
 8000bfe:	fb82 1203 	smull	r1, r2, r2, r3
 8000c02:	1092      	asrs	r2, r2, #2
 8000c04:	17db      	asrs	r3, r3, #31
 8000c06:	1ad3      	subs	r3, r2, r3
 8000c08:	b2db      	uxtb	r3, r3
 8000c0a:	3302      	adds	r3, #2
 8000c0c:	b2da      	uxtb	r2, r3
 8000c0e:	4b05      	ldr	r3, [pc, #20]	; (8000c24 <mapMVoltToCelsius+0x30>)
 8000c10:	701a      	strb	r2, [r3, #0]
}
 8000c12:	bf00      	nop
 8000c14:	46bd      	mov	sp, r7
 8000c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1a:	4770      	bx	lr
 8000c1c:	200000f2 	.word	0x200000f2
 8000c20:	66666667 	.word	0x66666667
 8000c24:	200000f0 	.word	0x200000f0

08000c28 <IncTimFunc>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_IncTimFunc */
void IncTimFunc(void *argument)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for(;;)
	{
		g_timeElapsedSec += 2;
 8000c30:	4b04      	ldr	r3, [pc, #16]	; (8000c44 <IncTimFunc+0x1c>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	3302      	adds	r3, #2
 8000c36:	4a03      	ldr	r2, [pc, #12]	; (8000c44 <IncTimFunc+0x1c>)
 8000c38:	6013      	str	r3, [r2, #0]

		osDelay(2000);
 8000c3a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000c3e:	f002 fd87 	bl	8003750 <osDelay>
		g_timeElapsedSec += 2;
 8000c42:	e7f5      	b.n	8000c30 <IncTimFunc+0x8>
 8000c44:	200000e0 	.word	0x200000e0

08000c48 <EEPROM_saveTimVal>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_EEPROM_saveTimVal */
void EEPROM_saveTimVal(void *argument)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN EEPROM_saveTimVal */
	/* Infinite loop */
	for(;;)
	{
		EEPROM_Write(PAGE_NUM_TIM_LOC, OFFSET_NUM_TIM,(uint8_t *)&g_timeElapsedSec,TIM_SIZE_DATA);
 8000c50:	2304      	movs	r3, #4
 8000c52:	4a05      	ldr	r2, [pc, #20]	; (8000c68 <EEPROM_saveTimVal+0x20>)
 8000c54:	2101      	movs	r1, #1
 8000c56:	2001      	movs	r0, #1
 8000c58:	f7ff fc5a 	bl	8000510 <EEPROM_Write>

		osDelay(10000);
 8000c5c:	f242 7010 	movw	r0, #10000	; 0x2710
 8000c60:	f002 fd76 	bl	8003750 <osDelay>
		EEPROM_Write(PAGE_NUM_TIM_LOC, OFFSET_NUM_TIM,(uint8_t *)&g_timeElapsedSec,TIM_SIZE_DATA);
 8000c64:	e7f4      	b.n	8000c50 <EEPROM_saveTimVal+0x8>
 8000c66:	bf00      	nop
 8000c68:	200000e0 	.word	0x200000e0

08000c6c <getFuelLevelFromADC>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_getFuelLevelFromADC */
void getFuelLevelFromADC(void *argument)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN getFuelLevelFromADC */
	osDelay(500);
 8000c74:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c78:	f002 fd6a 	bl	8003750 <osDelay>
	/* Infinite loop */
	for(;;)
	{
		HAL_ADC_Start(&hadc1);
 8000c7c:	480a      	ldr	r0, [pc, #40]	; (8000ca8 <getFuelLevelFromADC+0x3c>)
 8000c7e:	f000 fa31 	bl	80010e4 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, 100);
 8000c82:	2164      	movs	r1, #100	; 0x64
 8000c84:	4808      	ldr	r0, [pc, #32]	; (8000ca8 <getFuelLevelFromADC+0x3c>)
 8000c86:	f000 fb14 	bl	80012b2 <HAL_ADC_PollForConversion>
		adcFuelValue = HAL_ADC_GetValue(&hadc1);
 8000c8a:	4807      	ldr	r0, [pc, #28]	; (8000ca8 <getFuelLevelFromADC+0x3c>)
 8000c8c:	f000 fb9c 	bl	80013c8 <HAL_ADC_GetValue>
 8000c90:	4603      	mov	r3, r0
 8000c92:	4a06      	ldr	r2, [pc, #24]	; (8000cac <getFuelLevelFromADC+0x40>)
 8000c94:	6013      	str	r3, [r2, #0]
		HAL_ADC_Stop(&hadc1);
 8000c96:	4804      	ldr	r0, [pc, #16]	; (8000ca8 <getFuelLevelFromADC+0x3c>)
 8000c98:	f000 fad8 	bl	800124c <HAL_ADC_Stop>
		osDelay(2000);
 8000c9c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000ca0:	f002 fd56 	bl	8003750 <osDelay>
		HAL_ADC_Start(&hadc1);
 8000ca4:	e7ea      	b.n	8000c7c <getFuelLevelFromADC+0x10>
 8000ca6:	bf00      	nop
 8000ca8:	20000030 	.word	0x20000030
 8000cac:	200000e8 	.word	0x200000e8

08000cb0 <mapFuelLevelDigtalToLED>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_mapFuelLevelDigtalToLED */
void mapFuelLevelDigtalToLED(void *argument)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b082      	sub	sp, #8
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN mapFuelLevelDigtalToLED */
	osDelay(550);
 8000cb8:	f240 2026 	movw	r0, #550	; 0x226
 8000cbc:	f002 fd48 	bl	8003750 <osDelay>

	/* Infinite loop */

	for(;;)
	{
		mapDigitalvalueToLeds(adcFuelValue);
 8000cc0:	4b04      	ldr	r3, [pc, #16]	; (8000cd4 <mapFuelLevelDigtalToLED+0x24>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f7ff fecb 	bl	8000a60 <mapDigitalvalueToLeds>
		osDelay(2000);
 8000cca:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000cce:	f002 fd3f 	bl	8003750 <osDelay>
		mapDigitalvalueToLeds(adcFuelValue);
 8000cd2:	e7f5      	b.n	8000cc0 <mapFuelLevelDigtalToLED+0x10>
 8000cd4:	200000e8 	.word	0x200000e8

08000cd8 <LM35_getTemprature>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_LM35_getTemprature */
void LM35_getTemprature(void *argument)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN LM35_getTemprature */
	/* Infinite loop */
	for(;;)
	{
		//getting temperature digital value from adc
		getDigitalTemperatureFromADC();
 8000ce0:	f7ff ff54 	bl	8000b8c <getDigitalTemperatureFromADC>
		//mapping Digital temperature to volt
		mapDigitalTemperatureToVolt();
 8000ce4:	f7ff ff6c 	bl	8000bc0 <mapDigitalTemperatureToVolt>
		//mapping volt to celsius
		mapMVoltToCelsius();
 8000ce8:	f7ff ff84 	bl	8000bf4 <mapMVoltToCelsius>
		// maping temp to 3 digits
		//uint8_t temp0 = (temperatureInCelsius%10 ) 		+ 48;
		//uint8_t temp1 = (temperatureInCelsius%100) /10 	+ 48;
		//uint8_t temp2 = (temperatureInCelsius/100) 		+ 48;

		osDelay(1000);
 8000cec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000cf0:	f002 fd2e 	bl	8003750 <osDelay>
		getDigitalTemperatureFromADC();
 8000cf4:	e7f4      	b.n	8000ce0 <LM35_getTemprature+0x8>

08000cf6 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000cf6:	b480      	push	{r7}
 8000cf8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cfa:	b672      	cpsid	i
}
 8000cfc:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000cfe:	e7fe      	b.n	8000cfe <Error_Handler+0x8>

08000d00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d06:	2300      	movs	r3, #0
 8000d08:	607b      	str	r3, [r7, #4]
 8000d0a:	4b12      	ldr	r3, [pc, #72]	; (8000d54 <HAL_MspInit+0x54>)
 8000d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d0e:	4a11      	ldr	r2, [pc, #68]	; (8000d54 <HAL_MspInit+0x54>)
 8000d10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d14:	6453      	str	r3, [r2, #68]	; 0x44
 8000d16:	4b0f      	ldr	r3, [pc, #60]	; (8000d54 <HAL_MspInit+0x54>)
 8000d18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d1e:	607b      	str	r3, [r7, #4]
 8000d20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d22:	2300      	movs	r3, #0
 8000d24:	603b      	str	r3, [r7, #0]
 8000d26:	4b0b      	ldr	r3, [pc, #44]	; (8000d54 <HAL_MspInit+0x54>)
 8000d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d2a:	4a0a      	ldr	r2, [pc, #40]	; (8000d54 <HAL_MspInit+0x54>)
 8000d2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d30:	6413      	str	r3, [r2, #64]	; 0x40
 8000d32:	4b08      	ldr	r3, [pc, #32]	; (8000d54 <HAL_MspInit+0x54>)
 8000d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d3a:	603b      	str	r3, [r7, #0]
 8000d3c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d3e:	2200      	movs	r2, #0
 8000d40:	210f      	movs	r1, #15
 8000d42:	f06f 0001 	mvn.w	r0, #1
 8000d46:	f000 fe28 	bl	800199a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d4a:	bf00      	nop
 8000d4c:	3708      	adds	r7, #8
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	40023800 	.word	0x40023800

08000d58 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b08a      	sub	sp, #40	; 0x28
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d60:	f107 0314 	add.w	r3, r7, #20
 8000d64:	2200      	movs	r2, #0
 8000d66:	601a      	str	r2, [r3, #0]
 8000d68:	605a      	str	r2, [r3, #4]
 8000d6a:	609a      	str	r2, [r3, #8]
 8000d6c:	60da      	str	r2, [r3, #12]
 8000d6e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4a17      	ldr	r2, [pc, #92]	; (8000dd4 <HAL_ADC_MspInit+0x7c>)
 8000d76:	4293      	cmp	r3, r2
 8000d78:	d127      	bne.n	8000dca <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	613b      	str	r3, [r7, #16]
 8000d7e:	4b16      	ldr	r3, [pc, #88]	; (8000dd8 <HAL_ADC_MspInit+0x80>)
 8000d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d82:	4a15      	ldr	r2, [pc, #84]	; (8000dd8 <HAL_ADC_MspInit+0x80>)
 8000d84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d88:	6453      	str	r3, [r2, #68]	; 0x44
 8000d8a:	4b13      	ldr	r3, [pc, #76]	; (8000dd8 <HAL_ADC_MspInit+0x80>)
 8000d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d92:	613b      	str	r3, [r7, #16]
 8000d94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d96:	2300      	movs	r3, #0
 8000d98:	60fb      	str	r3, [r7, #12]
 8000d9a:	4b0f      	ldr	r3, [pc, #60]	; (8000dd8 <HAL_ADC_MspInit+0x80>)
 8000d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9e:	4a0e      	ldr	r2, [pc, #56]	; (8000dd8 <HAL_ADC_MspInit+0x80>)
 8000da0:	f043 0301 	orr.w	r3, r3, #1
 8000da4:	6313      	str	r3, [r2, #48]	; 0x30
 8000da6:	4b0c      	ldr	r3, [pc, #48]	; (8000dd8 <HAL_ADC_MspInit+0x80>)
 8000da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000daa:	f003 0301 	and.w	r3, r3, #1
 8000dae:	60fb      	str	r3, [r7, #12]
 8000db0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_5;
 8000db2:	2321      	movs	r3, #33	; 0x21
 8000db4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000db6:	2303      	movs	r3, #3
 8000db8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dbe:	f107 0314 	add.w	r3, r7, #20
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	4805      	ldr	r0, [pc, #20]	; (8000ddc <HAL_ADC_MspInit+0x84>)
 8000dc6:	f000 fe11 	bl	80019ec <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000dca:	bf00      	nop
 8000dcc:	3728      	adds	r7, #40	; 0x28
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	40012000 	.word	0x40012000
 8000dd8:	40023800 	.word	0x40023800
 8000ddc:	40020000 	.word	0x40020000

08000de0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b08a      	sub	sp, #40	; 0x28
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de8:	f107 0314 	add.w	r3, r7, #20
 8000dec:	2200      	movs	r2, #0
 8000dee:	601a      	str	r2, [r3, #0]
 8000df0:	605a      	str	r2, [r3, #4]
 8000df2:	609a      	str	r2, [r3, #8]
 8000df4:	60da      	str	r2, [r3, #12]
 8000df6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a19      	ldr	r2, [pc, #100]	; (8000e64 <HAL_I2C_MspInit+0x84>)
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d12b      	bne.n	8000e5a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e02:	2300      	movs	r3, #0
 8000e04:	613b      	str	r3, [r7, #16]
 8000e06:	4b18      	ldr	r3, [pc, #96]	; (8000e68 <HAL_I2C_MspInit+0x88>)
 8000e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0a:	4a17      	ldr	r2, [pc, #92]	; (8000e68 <HAL_I2C_MspInit+0x88>)
 8000e0c:	f043 0302 	orr.w	r3, r3, #2
 8000e10:	6313      	str	r3, [r2, #48]	; 0x30
 8000e12:	4b15      	ldr	r3, [pc, #84]	; (8000e68 <HAL_I2C_MspInit+0x88>)
 8000e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e16:	f003 0302 	and.w	r3, r3, #2
 8000e1a:	613b      	str	r3, [r7, #16]
 8000e1c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e1e:	23c0      	movs	r3, #192	; 0xc0
 8000e20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e22:	2312      	movs	r3, #18
 8000e24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e26:	2300      	movs	r3, #0
 8000e28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e2a:	2303      	movs	r3, #3
 8000e2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e2e:	2304      	movs	r3, #4
 8000e30:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e32:	f107 0314 	add.w	r3, r7, #20
 8000e36:	4619      	mov	r1, r3
 8000e38:	480c      	ldr	r0, [pc, #48]	; (8000e6c <HAL_I2C_MspInit+0x8c>)
 8000e3a:	f000 fdd7 	bl	80019ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e3e:	2300      	movs	r3, #0
 8000e40:	60fb      	str	r3, [r7, #12]
 8000e42:	4b09      	ldr	r3, [pc, #36]	; (8000e68 <HAL_I2C_MspInit+0x88>)
 8000e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e46:	4a08      	ldr	r2, [pc, #32]	; (8000e68 <HAL_I2C_MspInit+0x88>)
 8000e48:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e4c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e4e:	4b06      	ldr	r3, [pc, #24]	; (8000e68 <HAL_I2C_MspInit+0x88>)
 8000e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e52:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e56:	60fb      	str	r3, [r7, #12]
 8000e58:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000e5a:	bf00      	nop
 8000e5c:	3728      	adds	r7, #40	; 0x28
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	40005400 	.word	0x40005400
 8000e68:	40023800 	.word	0x40023800
 8000e6c:	40020400 	.word	0x40020400

08000e70 <NMI_Handler>:
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
 8000e74:	e7fe      	b.n	8000e74 <NMI_Handler+0x4>

08000e76 <HardFault_Handler>:
 8000e76:	b480      	push	{r7}
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	e7fe      	b.n	8000e7a <HardFault_Handler+0x4>

08000e7c <MemManage_Handler>:
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
 8000e80:	e7fe      	b.n	8000e80 <MemManage_Handler+0x4>

08000e82 <BusFault_Handler>:
 8000e82:	b480      	push	{r7}
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	e7fe      	b.n	8000e86 <BusFault_Handler+0x4>

08000e88 <UsageFault_Handler>:
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
 8000e8c:	e7fe      	b.n	8000e8c <UsageFault_Handler+0x4>

08000e8e <DebugMon_Handler>:
 8000e8e:	b480      	push	{r7}
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	bf00      	nop
 8000e94:	46bd      	mov	sp, r7
 8000e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9a:	4770      	bx	lr

08000e9c <SysTick_Handler>:
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0
 8000ea0:	f000 f898 	bl	8000fd4 <HAL_IncTick>
 8000ea4:	f004 f862 	bl	8004f6c <xTaskGetSchedulerState>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b01      	cmp	r3, #1
 8000eac:	d001      	beq.n	8000eb2 <SysTick_Handler+0x16>
 8000eae:	f004 fe4b 	bl	8005b48 <xPortSysTickHandler>
 8000eb2:	bf00      	nop
 8000eb4:	bd80      	pop	{r7, pc}
	...

08000eb8 <SystemInit>:
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
 8000ebc:	4b06      	ldr	r3, [pc, #24]	; (8000ed8 <SystemInit+0x20>)
 8000ebe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ec2:	4a05      	ldr	r2, [pc, #20]	; (8000ed8 <SystemInit+0x20>)
 8000ec4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ec8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8000ecc:	bf00      	nop
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop
 8000ed8:	e000ed00 	.word	0xe000ed00

08000edc <Reset_Handler>:
 8000edc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f14 <LoopFillZerobss+0x12>
 8000ee0:	480d      	ldr	r0, [pc, #52]	; (8000f18 <LoopFillZerobss+0x16>)
 8000ee2:	490e      	ldr	r1, [pc, #56]	; (8000f1c <LoopFillZerobss+0x1a>)
 8000ee4:	4a0e      	ldr	r2, [pc, #56]	; (8000f20 <LoopFillZerobss+0x1e>)
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	e002      	b.n	8000ef0 <LoopCopyDataInit>

08000eea <CopyDataInit>:
 8000eea:	58d4      	ldr	r4, [r2, r3]
 8000eec:	50c4      	str	r4, [r0, r3]
 8000eee:	3304      	adds	r3, #4

08000ef0 <LoopCopyDataInit>:
 8000ef0:	18c4      	adds	r4, r0, r3
 8000ef2:	428c      	cmp	r4, r1
 8000ef4:	d3f9      	bcc.n	8000eea <CopyDataInit>
 8000ef6:	4a0b      	ldr	r2, [pc, #44]	; (8000f24 <LoopFillZerobss+0x22>)
 8000ef8:	4c0b      	ldr	r4, [pc, #44]	; (8000f28 <LoopFillZerobss+0x26>)
 8000efa:	2300      	movs	r3, #0
 8000efc:	e001      	b.n	8000f02 <LoopFillZerobss>

08000efe <FillZerobss>:
 8000efe:	6013      	str	r3, [r2, #0]
 8000f00:	3204      	adds	r2, #4

08000f02 <LoopFillZerobss>:
 8000f02:	42a2      	cmp	r2, r4
 8000f04:	d3fb      	bcc.n	8000efe <FillZerobss>
 8000f06:	f7ff ffd7 	bl	8000eb8 <SystemInit>
 8000f0a:	f005 f89f 	bl	800604c <__libc_init_array>
 8000f0e:	f7ff fbf1 	bl	80006f4 <main>
 8000f12:	4770      	bx	lr
 8000f14:	20010000 	.word	0x20010000
 8000f18:	20000000 	.word	0x20000000
 8000f1c:	20000014 	.word	0x20000014
 8000f20:	08006200 	.word	0x08006200
 8000f24:	20000014 	.word	0x20000014
 8000f28:	20004a48 	.word	0x20004a48

08000f2c <ADC_IRQHandler>:
 8000f2c:	e7fe      	b.n	8000f2c <ADC_IRQHandler>
	...

08000f30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f34:	4b0e      	ldr	r3, [pc, #56]	; (8000f70 <HAL_Init+0x40>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4a0d      	ldr	r2, [pc, #52]	; (8000f70 <HAL_Init+0x40>)
 8000f3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f3e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f40:	4b0b      	ldr	r3, [pc, #44]	; (8000f70 <HAL_Init+0x40>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4a0a      	ldr	r2, [pc, #40]	; (8000f70 <HAL_Init+0x40>)
 8000f46:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f4a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f4c:	4b08      	ldr	r3, [pc, #32]	; (8000f70 <HAL_Init+0x40>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4a07      	ldr	r2, [pc, #28]	; (8000f70 <HAL_Init+0x40>)
 8000f52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f56:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f58:	2003      	movs	r0, #3
 8000f5a:	f000 fd13 	bl	8001984 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f5e:	200f      	movs	r0, #15
 8000f60:	f000 f808 	bl	8000f74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f64:	f7ff fecc 	bl	8000d00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f68:	2300      	movs	r3, #0
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	40023c00 	.word	0x40023c00

08000f74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f7c:	4b12      	ldr	r3, [pc, #72]	; (8000fc8 <HAL_InitTick+0x54>)
 8000f7e:	681a      	ldr	r2, [r3, #0]
 8000f80:	4b12      	ldr	r3, [pc, #72]	; (8000fcc <HAL_InitTick+0x58>)
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	4619      	mov	r1, r3
 8000f86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f92:	4618      	mov	r0, r3
 8000f94:	f000 fd1d 	bl	80019d2 <HAL_SYSTICK_Config>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d001      	beq.n	8000fa2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	e00e      	b.n	8000fc0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	2b0f      	cmp	r3, #15
 8000fa6:	d80a      	bhi.n	8000fbe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fa8:	2200      	movs	r2, #0
 8000faa:	6879      	ldr	r1, [r7, #4]
 8000fac:	f04f 30ff 	mov.w	r0, #4294967295
 8000fb0:	f000 fcf3 	bl	800199a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fb4:	4a06      	ldr	r2, [pc, #24]	; (8000fd0 <HAL_InitTick+0x5c>)
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	e000      	b.n	8000fc0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fbe:	2301      	movs	r3, #1
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	3708      	adds	r7, #8
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	20000004 	.word	0x20000004
 8000fcc:	2000000c 	.word	0x2000000c
 8000fd0:	20000008 	.word	0x20000008

08000fd4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fd8:	4b06      	ldr	r3, [pc, #24]	; (8000ff4 <HAL_IncTick+0x20>)
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	461a      	mov	r2, r3
 8000fde:	4b06      	ldr	r3, [pc, #24]	; (8000ff8 <HAL_IncTick+0x24>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	4413      	add	r3, r2
 8000fe4:	4a04      	ldr	r2, [pc, #16]	; (8000ff8 <HAL_IncTick+0x24>)
 8000fe6:	6013      	str	r3, [r2, #0]
}
 8000fe8:	bf00      	nop
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop
 8000ff4:	2000000c 	.word	0x2000000c
 8000ff8:	200000f4 	.word	0x200000f4

08000ffc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  return uwTick;
 8001000:	4b03      	ldr	r3, [pc, #12]	; (8001010 <HAL_GetTick+0x14>)
 8001002:	681b      	ldr	r3, [r3, #0]
}
 8001004:	4618      	mov	r0, r3
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	200000f4 	.word	0x200000f4

08001014 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b084      	sub	sp, #16
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800101c:	f7ff ffee 	bl	8000ffc <HAL_GetTick>
 8001020:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	f1b3 3fff 	cmp.w	r3, #4294967295
 800102c:	d005      	beq.n	800103a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800102e:	4b0a      	ldr	r3, [pc, #40]	; (8001058 <HAL_Delay+0x44>)
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	461a      	mov	r2, r3
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	4413      	add	r3, r2
 8001038:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800103a:	bf00      	nop
 800103c:	f7ff ffde 	bl	8000ffc <HAL_GetTick>
 8001040:	4602      	mov	r2, r0
 8001042:	68bb      	ldr	r3, [r7, #8]
 8001044:	1ad3      	subs	r3, r2, r3
 8001046:	68fa      	ldr	r2, [r7, #12]
 8001048:	429a      	cmp	r2, r3
 800104a:	d8f7      	bhi.n	800103c <HAL_Delay+0x28>
  {
  }
}
 800104c:	bf00      	nop
 800104e:	bf00      	nop
 8001050:	3710      	adds	r7, #16
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	2000000c 	.word	0x2000000c

0800105c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b084      	sub	sp, #16
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001064:	2300      	movs	r3, #0
 8001066:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d101      	bne.n	8001072 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800106e:	2301      	movs	r3, #1
 8001070:	e033      	b.n	80010da <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001076:	2b00      	cmp	r3, #0
 8001078:	d109      	bne.n	800108e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800107a:	6878      	ldr	r0, [r7, #4]
 800107c:	f7ff fe6c 	bl	8000d58 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	2200      	movs	r2, #0
 8001084:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2200      	movs	r2, #0
 800108a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001092:	f003 0310 	and.w	r3, r3, #16
 8001096:	2b00      	cmp	r3, #0
 8001098:	d118      	bne.n	80010cc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800109e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80010a2:	f023 0302 	bic.w	r3, r3, #2
 80010a6:	f043 0202 	orr.w	r2, r3, #2
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80010ae:	6878      	ldr	r0, [r7, #4]
 80010b0:	f000 faba 	bl	8001628 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	2200      	movs	r2, #0
 80010b8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010be:	f023 0303 	bic.w	r3, r3, #3
 80010c2:	f043 0201 	orr.w	r2, r3, #1
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	641a      	str	r2, [r3, #64]	; 0x40
 80010ca:	e001      	b.n	80010d0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80010cc:	2301      	movs	r3, #1
 80010ce:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	2200      	movs	r2, #0
 80010d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80010d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80010da:	4618      	mov	r0, r3
 80010dc:	3710      	adds	r7, #16
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
	...

080010e4 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b085      	sub	sp, #20
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80010ec:	2300      	movs	r3, #0
 80010ee:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80010f6:	2b01      	cmp	r3, #1
 80010f8:	d101      	bne.n	80010fe <HAL_ADC_Start+0x1a>
 80010fa:	2302      	movs	r3, #2
 80010fc:	e097      	b.n	800122e <HAL_ADC_Start+0x14a>
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	2201      	movs	r2, #1
 8001102:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	689b      	ldr	r3, [r3, #8]
 800110c:	f003 0301 	and.w	r3, r3, #1
 8001110:	2b01      	cmp	r3, #1
 8001112:	d018      	beq.n	8001146 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	689a      	ldr	r2, [r3, #8]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f042 0201 	orr.w	r2, r2, #1
 8001122:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001124:	4b45      	ldr	r3, [pc, #276]	; (800123c <HAL_ADC_Start+0x158>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4a45      	ldr	r2, [pc, #276]	; (8001240 <HAL_ADC_Start+0x15c>)
 800112a:	fba2 2303 	umull	r2, r3, r2, r3
 800112e:	0c9a      	lsrs	r2, r3, #18
 8001130:	4613      	mov	r3, r2
 8001132:	005b      	lsls	r3, r3, #1
 8001134:	4413      	add	r3, r2
 8001136:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001138:	e002      	b.n	8001140 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800113a:	68bb      	ldr	r3, [r7, #8]
 800113c:	3b01      	subs	r3, #1
 800113e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001140:	68bb      	ldr	r3, [r7, #8]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d1f9      	bne.n	800113a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	689b      	ldr	r3, [r3, #8]
 800114c:	f003 0301 	and.w	r3, r3, #1
 8001150:	2b01      	cmp	r3, #1
 8001152:	d15f      	bne.n	8001214 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001158:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800115c:	f023 0301 	bic.w	r3, r3, #1
 8001160:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001172:	2b00      	cmp	r3, #0
 8001174:	d007      	beq.n	8001186 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800117a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800117e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800118a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800118e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001192:	d106      	bne.n	80011a2 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001198:	f023 0206 	bic.w	r2, r3, #6
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	645a      	str	r2, [r3, #68]	; 0x44
 80011a0:	e002      	b.n	80011a8 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	2200      	movs	r2, #0
 80011a6:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	2200      	movs	r2, #0
 80011ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80011b0:	4b24      	ldr	r3, [pc, #144]	; (8001244 <HAL_ADC_Start+0x160>)
 80011b2:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80011bc:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	f003 031f 	and.w	r3, r3, #31
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d10f      	bne.n	80011ea <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	689b      	ldr	r3, [r3, #8]
 80011d0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d129      	bne.n	800122c <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	689a      	ldr	r2, [r3, #8]
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80011e6:	609a      	str	r2, [r3, #8]
 80011e8:	e020      	b.n	800122c <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4a16      	ldr	r2, [pc, #88]	; (8001248 <HAL_ADC_Start+0x164>)
 80011f0:	4293      	cmp	r3, r2
 80011f2:	d11b      	bne.n	800122c <HAL_ADC_Start+0x148>
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	689b      	ldr	r3, [r3, #8]
 80011fa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d114      	bne.n	800122c <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	689a      	ldr	r2, [r3, #8]
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001210:	609a      	str	r2, [r3, #8]
 8001212:	e00b      	b.n	800122c <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001218:	f043 0210 	orr.w	r2, r3, #16
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001224:	f043 0201 	orr.w	r2, r3, #1
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800122c:	2300      	movs	r3, #0
}
 800122e:	4618      	mov	r0, r3
 8001230:	3714      	adds	r7, #20
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop
 800123c:	20000004 	.word	0x20000004
 8001240:	431bde83 	.word	0x431bde83
 8001244:	40012300 	.word	0x40012300
 8001248:	40012000 	.word	0x40012000

0800124c <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 800124c:	b480      	push	{r7}
 800124e:	b083      	sub	sp, #12
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800125a:	2b01      	cmp	r3, #1
 800125c:	d101      	bne.n	8001262 <HAL_ADC_Stop+0x16>
 800125e:	2302      	movs	r3, #2
 8001260:	e021      	b.n	80012a6 <HAL_ADC_Stop+0x5a>
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	2201      	movs	r2, #1
 8001266:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	689a      	ldr	r2, [r3, #8]
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f022 0201 	bic.w	r2, r2, #1
 8001278:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	689b      	ldr	r3, [r3, #8]
 8001280:	f003 0301 	and.w	r3, r3, #1
 8001284:	2b00      	cmp	r3, #0
 8001286:	d109      	bne.n	800129c <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800128c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001290:	f023 0301 	bic.w	r3, r3, #1
 8001294:	f043 0201 	orr.w	r2, r3, #1
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2200      	movs	r2, #0
 80012a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80012a4:	2300      	movs	r3, #0
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	370c      	adds	r7, #12
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr

080012b2 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80012b2:	b580      	push	{r7, lr}
 80012b4:	b084      	sub	sp, #16
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	6078      	str	r0, [r7, #4]
 80012ba:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80012bc:	2300      	movs	r3, #0
 80012be:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	689b      	ldr	r3, [r3, #8]
 80012c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012ce:	d113      	bne.n	80012f8 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	689b      	ldr	r3, [r3, #8]
 80012d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80012da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80012de:	d10b      	bne.n	80012f8 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e4:	f043 0220 	orr.w	r2, r3, #32
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2200      	movs	r2, #0
 80012f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80012f4:	2301      	movs	r3, #1
 80012f6:	e063      	b.n	80013c0 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80012f8:	f7ff fe80 	bl	8000ffc <HAL_GetTick>
 80012fc:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80012fe:	e021      	b.n	8001344 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001306:	d01d      	beq.n	8001344 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d007      	beq.n	800131e <HAL_ADC_PollForConversion+0x6c>
 800130e:	f7ff fe75 	bl	8000ffc <HAL_GetTick>
 8001312:	4602      	mov	r2, r0
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	1ad3      	subs	r3, r2, r3
 8001318:	683a      	ldr	r2, [r7, #0]
 800131a:	429a      	cmp	r2, r3
 800131c:	d212      	bcs.n	8001344 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f003 0302 	and.w	r3, r3, #2
 8001328:	2b02      	cmp	r3, #2
 800132a:	d00b      	beq.n	8001344 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001330:	f043 0204 	orr.w	r2, r3, #4
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	2200      	movs	r2, #0
 800133c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001340:	2303      	movs	r3, #3
 8001342:	e03d      	b.n	80013c0 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f003 0302 	and.w	r3, r3, #2
 800134e:	2b02      	cmp	r3, #2
 8001350:	d1d6      	bne.n	8001300 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f06f 0212 	mvn.w	r2, #18
 800135a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001360:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	689b      	ldr	r3, [r3, #8]
 800136e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001372:	2b00      	cmp	r3, #0
 8001374:	d123      	bne.n	80013be <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800137a:	2b00      	cmp	r3, #0
 800137c:	d11f      	bne.n	80013be <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001384:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001388:	2b00      	cmp	r3, #0
 800138a:	d006      	beq.n	800139a <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	689b      	ldr	r3, [r3, #8]
 8001392:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001396:	2b00      	cmp	r3, #0
 8001398:	d111      	bne.n	80013be <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800139e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d105      	bne.n	80013be <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b6:	f043 0201 	orr.w	r2, r3, #1
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80013be:	2300      	movs	r3, #0
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	3710      	adds	r7, #16
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}

080013c8 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80013c8:	b480      	push	{r7}
 80013ca:	b083      	sub	sp, #12
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	370c      	adds	r7, #12
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr
	...

080013e4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b085      	sub	sp, #20
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
 80013ec:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80013ee:	2300      	movs	r3, #0
 80013f0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80013f8:	2b01      	cmp	r3, #1
 80013fa:	d101      	bne.n	8001400 <HAL_ADC_ConfigChannel+0x1c>
 80013fc:	2302      	movs	r3, #2
 80013fe:	e105      	b.n	800160c <HAL_ADC_ConfigChannel+0x228>
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2201      	movs	r2, #1
 8001404:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	2b09      	cmp	r3, #9
 800140e:	d925      	bls.n	800145c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	68d9      	ldr	r1, [r3, #12]
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	b29b      	uxth	r3, r3
 800141c:	461a      	mov	r2, r3
 800141e:	4613      	mov	r3, r2
 8001420:	005b      	lsls	r3, r3, #1
 8001422:	4413      	add	r3, r2
 8001424:	3b1e      	subs	r3, #30
 8001426:	2207      	movs	r2, #7
 8001428:	fa02 f303 	lsl.w	r3, r2, r3
 800142c:	43da      	mvns	r2, r3
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	400a      	ands	r2, r1
 8001434:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	68d9      	ldr	r1, [r3, #12]
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	689a      	ldr	r2, [r3, #8]
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	b29b      	uxth	r3, r3
 8001446:	4618      	mov	r0, r3
 8001448:	4603      	mov	r3, r0
 800144a:	005b      	lsls	r3, r3, #1
 800144c:	4403      	add	r3, r0
 800144e:	3b1e      	subs	r3, #30
 8001450:	409a      	lsls	r2, r3
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	430a      	orrs	r2, r1
 8001458:	60da      	str	r2, [r3, #12]
 800145a:	e022      	b.n	80014a2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	6919      	ldr	r1, [r3, #16]
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	b29b      	uxth	r3, r3
 8001468:	461a      	mov	r2, r3
 800146a:	4613      	mov	r3, r2
 800146c:	005b      	lsls	r3, r3, #1
 800146e:	4413      	add	r3, r2
 8001470:	2207      	movs	r2, #7
 8001472:	fa02 f303 	lsl.w	r3, r2, r3
 8001476:	43da      	mvns	r2, r3
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	400a      	ands	r2, r1
 800147e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	6919      	ldr	r1, [r3, #16]
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	689a      	ldr	r2, [r3, #8]
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	b29b      	uxth	r3, r3
 8001490:	4618      	mov	r0, r3
 8001492:	4603      	mov	r3, r0
 8001494:	005b      	lsls	r3, r3, #1
 8001496:	4403      	add	r3, r0
 8001498:	409a      	lsls	r2, r3
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	430a      	orrs	r2, r1
 80014a0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	2b06      	cmp	r3, #6
 80014a8:	d824      	bhi.n	80014f4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	685a      	ldr	r2, [r3, #4]
 80014b4:	4613      	mov	r3, r2
 80014b6:	009b      	lsls	r3, r3, #2
 80014b8:	4413      	add	r3, r2
 80014ba:	3b05      	subs	r3, #5
 80014bc:	221f      	movs	r2, #31
 80014be:	fa02 f303 	lsl.w	r3, r2, r3
 80014c2:	43da      	mvns	r2, r3
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	400a      	ands	r2, r1
 80014ca:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	b29b      	uxth	r3, r3
 80014d8:	4618      	mov	r0, r3
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	685a      	ldr	r2, [r3, #4]
 80014de:	4613      	mov	r3, r2
 80014e0:	009b      	lsls	r3, r3, #2
 80014e2:	4413      	add	r3, r2
 80014e4:	3b05      	subs	r3, #5
 80014e6:	fa00 f203 	lsl.w	r2, r0, r3
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	430a      	orrs	r2, r1
 80014f0:	635a      	str	r2, [r3, #52]	; 0x34
 80014f2:	e04c      	b.n	800158e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	2b0c      	cmp	r3, #12
 80014fa:	d824      	bhi.n	8001546 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	685a      	ldr	r2, [r3, #4]
 8001506:	4613      	mov	r3, r2
 8001508:	009b      	lsls	r3, r3, #2
 800150a:	4413      	add	r3, r2
 800150c:	3b23      	subs	r3, #35	; 0x23
 800150e:	221f      	movs	r2, #31
 8001510:	fa02 f303 	lsl.w	r3, r2, r3
 8001514:	43da      	mvns	r2, r3
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	400a      	ands	r2, r1
 800151c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	b29b      	uxth	r3, r3
 800152a:	4618      	mov	r0, r3
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	685a      	ldr	r2, [r3, #4]
 8001530:	4613      	mov	r3, r2
 8001532:	009b      	lsls	r3, r3, #2
 8001534:	4413      	add	r3, r2
 8001536:	3b23      	subs	r3, #35	; 0x23
 8001538:	fa00 f203 	lsl.w	r2, r0, r3
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	430a      	orrs	r2, r1
 8001542:	631a      	str	r2, [r3, #48]	; 0x30
 8001544:	e023      	b.n	800158e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	685a      	ldr	r2, [r3, #4]
 8001550:	4613      	mov	r3, r2
 8001552:	009b      	lsls	r3, r3, #2
 8001554:	4413      	add	r3, r2
 8001556:	3b41      	subs	r3, #65	; 0x41
 8001558:	221f      	movs	r2, #31
 800155a:	fa02 f303 	lsl.w	r3, r2, r3
 800155e:	43da      	mvns	r2, r3
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	400a      	ands	r2, r1
 8001566:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	b29b      	uxth	r3, r3
 8001574:	4618      	mov	r0, r3
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	685a      	ldr	r2, [r3, #4]
 800157a:	4613      	mov	r3, r2
 800157c:	009b      	lsls	r3, r3, #2
 800157e:	4413      	add	r3, r2
 8001580:	3b41      	subs	r3, #65	; 0x41
 8001582:	fa00 f203 	lsl.w	r2, r0, r3
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	430a      	orrs	r2, r1
 800158c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800158e:	4b22      	ldr	r3, [pc, #136]	; (8001618 <HAL_ADC_ConfigChannel+0x234>)
 8001590:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4a21      	ldr	r2, [pc, #132]	; (800161c <HAL_ADC_ConfigChannel+0x238>)
 8001598:	4293      	cmp	r3, r2
 800159a:	d109      	bne.n	80015b0 <HAL_ADC_ConfigChannel+0x1cc>
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	2b12      	cmp	r3, #18
 80015a2:	d105      	bne.n	80015b0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a19      	ldr	r2, [pc, #100]	; (800161c <HAL_ADC_ConfigChannel+0x238>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d123      	bne.n	8001602 <HAL_ADC_ConfigChannel+0x21e>
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	2b10      	cmp	r3, #16
 80015c0:	d003      	beq.n	80015ca <HAL_ADC_ConfigChannel+0x1e6>
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	2b11      	cmp	r3, #17
 80015c8:	d11b      	bne.n	8001602 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	2b10      	cmp	r3, #16
 80015dc:	d111      	bne.n	8001602 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80015de:	4b10      	ldr	r3, [pc, #64]	; (8001620 <HAL_ADC_ConfigChannel+0x23c>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4a10      	ldr	r2, [pc, #64]	; (8001624 <HAL_ADC_ConfigChannel+0x240>)
 80015e4:	fba2 2303 	umull	r2, r3, r2, r3
 80015e8:	0c9a      	lsrs	r2, r3, #18
 80015ea:	4613      	mov	r3, r2
 80015ec:	009b      	lsls	r3, r3, #2
 80015ee:	4413      	add	r3, r2
 80015f0:	005b      	lsls	r3, r3, #1
 80015f2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80015f4:	e002      	b.n	80015fc <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80015f6:	68bb      	ldr	r3, [r7, #8]
 80015f8:	3b01      	subs	r3, #1
 80015fa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80015fc:	68bb      	ldr	r3, [r7, #8]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d1f9      	bne.n	80015f6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2200      	movs	r2, #0
 8001606:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800160a:	2300      	movs	r3, #0
}
 800160c:	4618      	mov	r0, r3
 800160e:	3714      	adds	r7, #20
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr
 8001618:	40012300 	.word	0x40012300
 800161c:	40012000 	.word	0x40012000
 8001620:	20000004 	.word	0x20000004
 8001624:	431bde83 	.word	0x431bde83

08001628 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001628:	b480      	push	{r7}
 800162a:	b085      	sub	sp, #20
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001630:	4b79      	ldr	r3, [pc, #484]	; (8001818 <ADC_Init+0x1f0>)
 8001632:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	685a      	ldr	r2, [r3, #4]
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	431a      	orrs	r2, r3
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	685a      	ldr	r2, [r3, #4]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800165c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	6859      	ldr	r1, [r3, #4]
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	691b      	ldr	r3, [r3, #16]
 8001668:	021a      	lsls	r2, r3, #8
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	430a      	orrs	r2, r1
 8001670:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	685a      	ldr	r2, [r3, #4]
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001680:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	6859      	ldr	r1, [r3, #4]
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	689a      	ldr	r2, [r3, #8]
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	430a      	orrs	r2, r1
 8001692:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	689a      	ldr	r2, [r3, #8]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80016a2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	6899      	ldr	r1, [r3, #8]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	68da      	ldr	r2, [r3, #12]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	430a      	orrs	r2, r1
 80016b4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016ba:	4a58      	ldr	r2, [pc, #352]	; (800181c <ADC_Init+0x1f4>)
 80016bc:	4293      	cmp	r3, r2
 80016be:	d022      	beq.n	8001706 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	689a      	ldr	r2, [r3, #8]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80016ce:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	6899      	ldr	r1, [r3, #8]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	430a      	orrs	r2, r1
 80016e0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	689a      	ldr	r2, [r3, #8]
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80016f0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	6899      	ldr	r1, [r3, #8]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	430a      	orrs	r2, r1
 8001702:	609a      	str	r2, [r3, #8]
 8001704:	e00f      	b.n	8001726 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	689a      	ldr	r2, [r3, #8]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001714:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	689a      	ldr	r2, [r3, #8]
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001724:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	689a      	ldr	r2, [r3, #8]
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f022 0202 	bic.w	r2, r2, #2
 8001734:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	6899      	ldr	r1, [r3, #8]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	7e1b      	ldrb	r3, [r3, #24]
 8001740:	005a      	lsls	r2, r3, #1
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	430a      	orrs	r2, r1
 8001748:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d01b      	beq.n	800178c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	685a      	ldr	r2, [r3, #4]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001762:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	685a      	ldr	r2, [r3, #4]
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001772:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	6859      	ldr	r1, [r3, #4]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800177e:	3b01      	subs	r3, #1
 8001780:	035a      	lsls	r2, r3, #13
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	430a      	orrs	r2, r1
 8001788:	605a      	str	r2, [r3, #4]
 800178a:	e007      	b.n	800179c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	685a      	ldr	r2, [r3, #4]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800179a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80017aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	69db      	ldr	r3, [r3, #28]
 80017b6:	3b01      	subs	r3, #1
 80017b8:	051a      	lsls	r2, r3, #20
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	430a      	orrs	r2, r1
 80017c0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	689a      	ldr	r2, [r3, #8]
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80017d0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	6899      	ldr	r1, [r3, #8]
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80017de:	025a      	lsls	r2, r3, #9
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	430a      	orrs	r2, r1
 80017e6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	689a      	ldr	r2, [r3, #8]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80017f6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	6899      	ldr	r1, [r3, #8]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	695b      	ldr	r3, [r3, #20]
 8001802:	029a      	lsls	r2, r3, #10
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	430a      	orrs	r2, r1
 800180a:	609a      	str	r2, [r3, #8]
}
 800180c:	bf00      	nop
 800180e:	3714      	adds	r7, #20
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr
 8001818:	40012300 	.word	0x40012300
 800181c:	0f000001 	.word	0x0f000001

08001820 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001820:	b480      	push	{r7}
 8001822:	b085      	sub	sp, #20
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	f003 0307 	and.w	r3, r3, #7
 800182e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001830:	4b0c      	ldr	r3, [pc, #48]	; (8001864 <__NVIC_SetPriorityGrouping+0x44>)
 8001832:	68db      	ldr	r3, [r3, #12]
 8001834:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001836:	68ba      	ldr	r2, [r7, #8]
 8001838:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800183c:	4013      	ands	r3, r2
 800183e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001844:	68bb      	ldr	r3, [r7, #8]
 8001846:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001848:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800184c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001850:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001852:	4a04      	ldr	r2, [pc, #16]	; (8001864 <__NVIC_SetPriorityGrouping+0x44>)
 8001854:	68bb      	ldr	r3, [r7, #8]
 8001856:	60d3      	str	r3, [r2, #12]
}
 8001858:	bf00      	nop
 800185a:	3714      	adds	r7, #20
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr
 8001864:	e000ed00 	.word	0xe000ed00

08001868 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800186c:	4b04      	ldr	r3, [pc, #16]	; (8001880 <__NVIC_GetPriorityGrouping+0x18>)
 800186e:	68db      	ldr	r3, [r3, #12]
 8001870:	0a1b      	lsrs	r3, r3, #8
 8001872:	f003 0307 	and.w	r3, r3, #7
}
 8001876:	4618      	mov	r0, r3
 8001878:	46bd      	mov	sp, r7
 800187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187e:	4770      	bx	lr
 8001880:	e000ed00 	.word	0xe000ed00

08001884 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001884:	b480      	push	{r7}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0
 800188a:	4603      	mov	r3, r0
 800188c:	6039      	str	r1, [r7, #0]
 800188e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001890:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001894:	2b00      	cmp	r3, #0
 8001896:	db0a      	blt.n	80018ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	b2da      	uxtb	r2, r3
 800189c:	490c      	ldr	r1, [pc, #48]	; (80018d0 <__NVIC_SetPriority+0x4c>)
 800189e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018a2:	0112      	lsls	r2, r2, #4
 80018a4:	b2d2      	uxtb	r2, r2
 80018a6:	440b      	add	r3, r1
 80018a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018ac:	e00a      	b.n	80018c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	b2da      	uxtb	r2, r3
 80018b2:	4908      	ldr	r1, [pc, #32]	; (80018d4 <__NVIC_SetPriority+0x50>)
 80018b4:	79fb      	ldrb	r3, [r7, #7]
 80018b6:	f003 030f 	and.w	r3, r3, #15
 80018ba:	3b04      	subs	r3, #4
 80018bc:	0112      	lsls	r2, r2, #4
 80018be:	b2d2      	uxtb	r2, r2
 80018c0:	440b      	add	r3, r1
 80018c2:	761a      	strb	r2, [r3, #24]
}
 80018c4:	bf00      	nop
 80018c6:	370c      	adds	r7, #12
 80018c8:	46bd      	mov	sp, r7
 80018ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ce:	4770      	bx	lr
 80018d0:	e000e100 	.word	0xe000e100
 80018d4:	e000ed00 	.word	0xe000ed00

080018d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018d8:	b480      	push	{r7}
 80018da:	b089      	sub	sp, #36	; 0x24
 80018dc:	af00      	add	r7, sp, #0
 80018de:	60f8      	str	r0, [r7, #12]
 80018e0:	60b9      	str	r1, [r7, #8]
 80018e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	f003 0307 	and.w	r3, r3, #7
 80018ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018ec:	69fb      	ldr	r3, [r7, #28]
 80018ee:	f1c3 0307 	rsb	r3, r3, #7
 80018f2:	2b04      	cmp	r3, #4
 80018f4:	bf28      	it	cs
 80018f6:	2304      	movcs	r3, #4
 80018f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018fa:	69fb      	ldr	r3, [r7, #28]
 80018fc:	3304      	adds	r3, #4
 80018fe:	2b06      	cmp	r3, #6
 8001900:	d902      	bls.n	8001908 <NVIC_EncodePriority+0x30>
 8001902:	69fb      	ldr	r3, [r7, #28]
 8001904:	3b03      	subs	r3, #3
 8001906:	e000      	b.n	800190a <NVIC_EncodePriority+0x32>
 8001908:	2300      	movs	r3, #0
 800190a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800190c:	f04f 32ff 	mov.w	r2, #4294967295
 8001910:	69bb      	ldr	r3, [r7, #24]
 8001912:	fa02 f303 	lsl.w	r3, r2, r3
 8001916:	43da      	mvns	r2, r3
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	401a      	ands	r2, r3
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001920:	f04f 31ff 	mov.w	r1, #4294967295
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	fa01 f303 	lsl.w	r3, r1, r3
 800192a:	43d9      	mvns	r1, r3
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001930:	4313      	orrs	r3, r2
         );
}
 8001932:	4618      	mov	r0, r3
 8001934:	3724      	adds	r7, #36	; 0x24
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr
	...

08001940 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b082      	sub	sp, #8
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	3b01      	subs	r3, #1
 800194c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001950:	d301      	bcc.n	8001956 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001952:	2301      	movs	r3, #1
 8001954:	e00f      	b.n	8001976 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001956:	4a0a      	ldr	r2, [pc, #40]	; (8001980 <SysTick_Config+0x40>)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	3b01      	subs	r3, #1
 800195c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800195e:	210f      	movs	r1, #15
 8001960:	f04f 30ff 	mov.w	r0, #4294967295
 8001964:	f7ff ff8e 	bl	8001884 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001968:	4b05      	ldr	r3, [pc, #20]	; (8001980 <SysTick_Config+0x40>)
 800196a:	2200      	movs	r2, #0
 800196c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800196e:	4b04      	ldr	r3, [pc, #16]	; (8001980 <SysTick_Config+0x40>)
 8001970:	2207      	movs	r2, #7
 8001972:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001974:	2300      	movs	r3, #0
}
 8001976:	4618      	mov	r0, r3
 8001978:	3708      	adds	r7, #8
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	e000e010 	.word	0xe000e010

08001984 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b082      	sub	sp, #8
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800198c:	6878      	ldr	r0, [r7, #4]
 800198e:	f7ff ff47 	bl	8001820 <__NVIC_SetPriorityGrouping>
}
 8001992:	bf00      	nop
 8001994:	3708      	adds	r7, #8
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}

0800199a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800199a:	b580      	push	{r7, lr}
 800199c:	b086      	sub	sp, #24
 800199e:	af00      	add	r7, sp, #0
 80019a0:	4603      	mov	r3, r0
 80019a2:	60b9      	str	r1, [r7, #8]
 80019a4:	607a      	str	r2, [r7, #4]
 80019a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019a8:	2300      	movs	r3, #0
 80019aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019ac:	f7ff ff5c 	bl	8001868 <__NVIC_GetPriorityGrouping>
 80019b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019b2:	687a      	ldr	r2, [r7, #4]
 80019b4:	68b9      	ldr	r1, [r7, #8]
 80019b6:	6978      	ldr	r0, [r7, #20]
 80019b8:	f7ff ff8e 	bl	80018d8 <NVIC_EncodePriority>
 80019bc:	4602      	mov	r2, r0
 80019be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019c2:	4611      	mov	r1, r2
 80019c4:	4618      	mov	r0, r3
 80019c6:	f7ff ff5d 	bl	8001884 <__NVIC_SetPriority>
}
 80019ca:	bf00      	nop
 80019cc:	3718      	adds	r7, #24
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}

080019d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019d2:	b580      	push	{r7, lr}
 80019d4:	b082      	sub	sp, #8
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019da:	6878      	ldr	r0, [r7, #4]
 80019dc:	f7ff ffb0 	bl	8001940 <SysTick_Config>
 80019e0:	4603      	mov	r3, r0
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	3708      	adds	r7, #8
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
	...

080019ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b089      	sub	sp, #36	; 0x24
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
 80019f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80019f6:	2300      	movs	r3, #0
 80019f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80019fa:	2300      	movs	r3, #0
 80019fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80019fe:	2300      	movs	r3, #0
 8001a00:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a02:	2300      	movs	r3, #0
 8001a04:	61fb      	str	r3, [r7, #28]
 8001a06:	e159      	b.n	8001cbc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a08:	2201      	movs	r2, #1
 8001a0a:	69fb      	ldr	r3, [r7, #28]
 8001a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a10:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	697a      	ldr	r2, [r7, #20]
 8001a18:	4013      	ands	r3, r2
 8001a1a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a1c:	693a      	ldr	r2, [r7, #16]
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	429a      	cmp	r2, r3
 8001a22:	f040 8148 	bne.w	8001cb6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	f003 0303 	and.w	r3, r3, #3
 8001a2e:	2b01      	cmp	r3, #1
 8001a30:	d005      	beq.n	8001a3e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a3a:	2b02      	cmp	r3, #2
 8001a3c:	d130      	bne.n	8001aa0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	689b      	ldr	r3, [r3, #8]
 8001a42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a44:	69fb      	ldr	r3, [r7, #28]
 8001a46:	005b      	lsls	r3, r3, #1
 8001a48:	2203      	movs	r2, #3
 8001a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4e:	43db      	mvns	r3, r3
 8001a50:	69ba      	ldr	r2, [r7, #24]
 8001a52:	4013      	ands	r3, r2
 8001a54:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	68da      	ldr	r2, [r3, #12]
 8001a5a:	69fb      	ldr	r3, [r7, #28]
 8001a5c:	005b      	lsls	r3, r3, #1
 8001a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a62:	69ba      	ldr	r2, [r7, #24]
 8001a64:	4313      	orrs	r3, r2
 8001a66:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	69ba      	ldr	r2, [r7, #24]
 8001a6c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a74:	2201      	movs	r2, #1
 8001a76:	69fb      	ldr	r3, [r7, #28]
 8001a78:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7c:	43db      	mvns	r3, r3
 8001a7e:	69ba      	ldr	r2, [r7, #24]
 8001a80:	4013      	ands	r3, r2
 8001a82:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	091b      	lsrs	r3, r3, #4
 8001a8a:	f003 0201 	and.w	r2, r3, #1
 8001a8e:	69fb      	ldr	r3, [r7, #28]
 8001a90:	fa02 f303 	lsl.w	r3, r2, r3
 8001a94:	69ba      	ldr	r2, [r7, #24]
 8001a96:	4313      	orrs	r3, r2
 8001a98:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	69ba      	ldr	r2, [r7, #24]
 8001a9e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	f003 0303 	and.w	r3, r3, #3
 8001aa8:	2b03      	cmp	r3, #3
 8001aaa:	d017      	beq.n	8001adc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	68db      	ldr	r3, [r3, #12]
 8001ab0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ab2:	69fb      	ldr	r3, [r7, #28]
 8001ab4:	005b      	lsls	r3, r3, #1
 8001ab6:	2203      	movs	r2, #3
 8001ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8001abc:	43db      	mvns	r3, r3
 8001abe:	69ba      	ldr	r2, [r7, #24]
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	689a      	ldr	r2, [r3, #8]
 8001ac8:	69fb      	ldr	r3, [r7, #28]
 8001aca:	005b      	lsls	r3, r3, #1
 8001acc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad0:	69ba      	ldr	r2, [r7, #24]
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	69ba      	ldr	r2, [r7, #24]
 8001ada:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	f003 0303 	and.w	r3, r3, #3
 8001ae4:	2b02      	cmp	r3, #2
 8001ae6:	d123      	bne.n	8001b30 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ae8:	69fb      	ldr	r3, [r7, #28]
 8001aea:	08da      	lsrs	r2, r3, #3
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	3208      	adds	r2, #8
 8001af0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001af4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001af6:	69fb      	ldr	r3, [r7, #28]
 8001af8:	f003 0307 	and.w	r3, r3, #7
 8001afc:	009b      	lsls	r3, r3, #2
 8001afe:	220f      	movs	r2, #15
 8001b00:	fa02 f303 	lsl.w	r3, r2, r3
 8001b04:	43db      	mvns	r3, r3
 8001b06:	69ba      	ldr	r2, [r7, #24]
 8001b08:	4013      	ands	r3, r2
 8001b0a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	691a      	ldr	r2, [r3, #16]
 8001b10:	69fb      	ldr	r3, [r7, #28]
 8001b12:	f003 0307 	and.w	r3, r3, #7
 8001b16:	009b      	lsls	r3, r3, #2
 8001b18:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1c:	69ba      	ldr	r2, [r7, #24]
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b22:	69fb      	ldr	r3, [r7, #28]
 8001b24:	08da      	lsrs	r2, r3, #3
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	3208      	adds	r2, #8
 8001b2a:	69b9      	ldr	r1, [r7, #24]
 8001b2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b36:	69fb      	ldr	r3, [r7, #28]
 8001b38:	005b      	lsls	r3, r3, #1
 8001b3a:	2203      	movs	r2, #3
 8001b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b40:	43db      	mvns	r3, r3
 8001b42:	69ba      	ldr	r2, [r7, #24]
 8001b44:	4013      	ands	r3, r2
 8001b46:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	f003 0203 	and.w	r2, r3, #3
 8001b50:	69fb      	ldr	r3, [r7, #28]
 8001b52:	005b      	lsls	r3, r3, #1
 8001b54:	fa02 f303 	lsl.w	r3, r2, r3
 8001b58:	69ba      	ldr	r2, [r7, #24]
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	69ba      	ldr	r2, [r7, #24]
 8001b62:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	f000 80a2 	beq.w	8001cb6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b72:	2300      	movs	r3, #0
 8001b74:	60fb      	str	r3, [r7, #12]
 8001b76:	4b57      	ldr	r3, [pc, #348]	; (8001cd4 <HAL_GPIO_Init+0x2e8>)
 8001b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b7a:	4a56      	ldr	r2, [pc, #344]	; (8001cd4 <HAL_GPIO_Init+0x2e8>)
 8001b7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b80:	6453      	str	r3, [r2, #68]	; 0x44
 8001b82:	4b54      	ldr	r3, [pc, #336]	; (8001cd4 <HAL_GPIO_Init+0x2e8>)
 8001b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b8a:	60fb      	str	r3, [r7, #12]
 8001b8c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b8e:	4a52      	ldr	r2, [pc, #328]	; (8001cd8 <HAL_GPIO_Init+0x2ec>)
 8001b90:	69fb      	ldr	r3, [r7, #28]
 8001b92:	089b      	lsrs	r3, r3, #2
 8001b94:	3302      	adds	r3, #2
 8001b96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b9c:	69fb      	ldr	r3, [r7, #28]
 8001b9e:	f003 0303 	and.w	r3, r3, #3
 8001ba2:	009b      	lsls	r3, r3, #2
 8001ba4:	220f      	movs	r2, #15
 8001ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8001baa:	43db      	mvns	r3, r3
 8001bac:	69ba      	ldr	r2, [r7, #24]
 8001bae:	4013      	ands	r3, r2
 8001bb0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	4a49      	ldr	r2, [pc, #292]	; (8001cdc <HAL_GPIO_Init+0x2f0>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d019      	beq.n	8001bee <HAL_GPIO_Init+0x202>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	4a48      	ldr	r2, [pc, #288]	; (8001ce0 <HAL_GPIO_Init+0x2f4>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d013      	beq.n	8001bea <HAL_GPIO_Init+0x1fe>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	4a47      	ldr	r2, [pc, #284]	; (8001ce4 <HAL_GPIO_Init+0x2f8>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d00d      	beq.n	8001be6 <HAL_GPIO_Init+0x1fa>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	4a46      	ldr	r2, [pc, #280]	; (8001ce8 <HAL_GPIO_Init+0x2fc>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d007      	beq.n	8001be2 <HAL_GPIO_Init+0x1f6>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	4a45      	ldr	r2, [pc, #276]	; (8001cec <HAL_GPIO_Init+0x300>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d101      	bne.n	8001bde <HAL_GPIO_Init+0x1f2>
 8001bda:	2304      	movs	r3, #4
 8001bdc:	e008      	b.n	8001bf0 <HAL_GPIO_Init+0x204>
 8001bde:	2307      	movs	r3, #7
 8001be0:	e006      	b.n	8001bf0 <HAL_GPIO_Init+0x204>
 8001be2:	2303      	movs	r3, #3
 8001be4:	e004      	b.n	8001bf0 <HAL_GPIO_Init+0x204>
 8001be6:	2302      	movs	r3, #2
 8001be8:	e002      	b.n	8001bf0 <HAL_GPIO_Init+0x204>
 8001bea:	2301      	movs	r3, #1
 8001bec:	e000      	b.n	8001bf0 <HAL_GPIO_Init+0x204>
 8001bee:	2300      	movs	r3, #0
 8001bf0:	69fa      	ldr	r2, [r7, #28]
 8001bf2:	f002 0203 	and.w	r2, r2, #3
 8001bf6:	0092      	lsls	r2, r2, #2
 8001bf8:	4093      	lsls	r3, r2
 8001bfa:	69ba      	ldr	r2, [r7, #24]
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c00:	4935      	ldr	r1, [pc, #212]	; (8001cd8 <HAL_GPIO_Init+0x2ec>)
 8001c02:	69fb      	ldr	r3, [r7, #28]
 8001c04:	089b      	lsrs	r3, r3, #2
 8001c06:	3302      	adds	r3, #2
 8001c08:	69ba      	ldr	r2, [r7, #24]
 8001c0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c0e:	4b38      	ldr	r3, [pc, #224]	; (8001cf0 <HAL_GPIO_Init+0x304>)
 8001c10:	689b      	ldr	r3, [r3, #8]
 8001c12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c14:	693b      	ldr	r3, [r7, #16]
 8001c16:	43db      	mvns	r3, r3
 8001c18:	69ba      	ldr	r2, [r7, #24]
 8001c1a:	4013      	ands	r3, r2
 8001c1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d003      	beq.n	8001c32 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001c2a:	69ba      	ldr	r2, [r7, #24]
 8001c2c:	693b      	ldr	r3, [r7, #16]
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c32:	4a2f      	ldr	r2, [pc, #188]	; (8001cf0 <HAL_GPIO_Init+0x304>)
 8001c34:	69bb      	ldr	r3, [r7, #24]
 8001c36:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c38:	4b2d      	ldr	r3, [pc, #180]	; (8001cf0 <HAL_GPIO_Init+0x304>)
 8001c3a:	68db      	ldr	r3, [r3, #12]
 8001c3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	43db      	mvns	r3, r3
 8001c42:	69ba      	ldr	r2, [r7, #24]
 8001c44:	4013      	ands	r3, r2
 8001c46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d003      	beq.n	8001c5c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001c54:	69ba      	ldr	r2, [r7, #24]
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c5c:	4a24      	ldr	r2, [pc, #144]	; (8001cf0 <HAL_GPIO_Init+0x304>)
 8001c5e:	69bb      	ldr	r3, [r7, #24]
 8001c60:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c62:	4b23      	ldr	r3, [pc, #140]	; (8001cf0 <HAL_GPIO_Init+0x304>)
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c68:	693b      	ldr	r3, [r7, #16]
 8001c6a:	43db      	mvns	r3, r3
 8001c6c:	69ba      	ldr	r2, [r7, #24]
 8001c6e:	4013      	ands	r3, r2
 8001c70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d003      	beq.n	8001c86 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001c7e:	69ba      	ldr	r2, [r7, #24]
 8001c80:	693b      	ldr	r3, [r7, #16]
 8001c82:	4313      	orrs	r3, r2
 8001c84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c86:	4a1a      	ldr	r2, [pc, #104]	; (8001cf0 <HAL_GPIO_Init+0x304>)
 8001c88:	69bb      	ldr	r3, [r7, #24]
 8001c8a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c8c:	4b18      	ldr	r3, [pc, #96]	; (8001cf0 <HAL_GPIO_Init+0x304>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	43db      	mvns	r3, r3
 8001c96:	69ba      	ldr	r2, [r7, #24]
 8001c98:	4013      	ands	r3, r2
 8001c9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d003      	beq.n	8001cb0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001ca8:	69ba      	ldr	r2, [r7, #24]
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	4313      	orrs	r3, r2
 8001cae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001cb0:	4a0f      	ldr	r2, [pc, #60]	; (8001cf0 <HAL_GPIO_Init+0x304>)
 8001cb2:	69bb      	ldr	r3, [r7, #24]
 8001cb4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cb6:	69fb      	ldr	r3, [r7, #28]
 8001cb8:	3301      	adds	r3, #1
 8001cba:	61fb      	str	r3, [r7, #28]
 8001cbc:	69fb      	ldr	r3, [r7, #28]
 8001cbe:	2b0f      	cmp	r3, #15
 8001cc0:	f67f aea2 	bls.w	8001a08 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001cc4:	bf00      	nop
 8001cc6:	bf00      	nop
 8001cc8:	3724      	adds	r7, #36	; 0x24
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr
 8001cd2:	bf00      	nop
 8001cd4:	40023800 	.word	0x40023800
 8001cd8:	40013800 	.word	0x40013800
 8001cdc:	40020000 	.word	0x40020000
 8001ce0:	40020400 	.word	0x40020400
 8001ce4:	40020800 	.word	0x40020800
 8001ce8:	40020c00 	.word	0x40020c00
 8001cec:	40021000 	.word	0x40021000
 8001cf0:	40013c00 	.word	0x40013c00

08001cf4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b083      	sub	sp, #12
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
 8001cfc:	460b      	mov	r3, r1
 8001cfe:	807b      	strh	r3, [r7, #2]
 8001d00:	4613      	mov	r3, r2
 8001d02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d04:	787b      	ldrb	r3, [r7, #1]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d003      	beq.n	8001d12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d0a:	887a      	ldrh	r2, [r7, #2]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d10:	e003      	b.n	8001d1a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d12:	887b      	ldrh	r3, [r7, #2]
 8001d14:	041a      	lsls	r2, r3, #16
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	619a      	str	r2, [r3, #24]
}
 8001d1a:	bf00      	nop
 8001d1c:	370c      	adds	r7, #12
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr
	...

08001d28 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b084      	sub	sp, #16
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d101      	bne.n	8001d3a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001d36:	2301      	movs	r3, #1
 8001d38:	e12b      	b.n	8001f92 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d40:	b2db      	uxtb	r3, r3
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d106      	bne.n	8001d54 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2200      	movs	r2, #0
 8001d4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001d4e:	6878      	ldr	r0, [r7, #4]
 8001d50:	f7ff f846 	bl	8000de0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2224      	movs	r2, #36	; 0x24
 8001d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	681a      	ldr	r2, [r3, #0]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f022 0201 	bic.w	r2, r2, #1
 8001d6a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001d7a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	681a      	ldr	r2, [r3, #0]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001d8a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001d8c:	f001 fbbc 	bl	8003508 <HAL_RCC_GetPCLK1Freq>
 8001d90:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	4a81      	ldr	r2, [pc, #516]	; (8001f9c <HAL_I2C_Init+0x274>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d807      	bhi.n	8001dac <HAL_I2C_Init+0x84>
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	4a80      	ldr	r2, [pc, #512]	; (8001fa0 <HAL_I2C_Init+0x278>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	bf94      	ite	ls
 8001da4:	2301      	movls	r3, #1
 8001da6:	2300      	movhi	r3, #0
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	e006      	b.n	8001dba <HAL_I2C_Init+0x92>
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	4a7d      	ldr	r2, [pc, #500]	; (8001fa4 <HAL_I2C_Init+0x27c>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	bf94      	ite	ls
 8001db4:	2301      	movls	r3, #1
 8001db6:	2300      	movhi	r3, #0
 8001db8:	b2db      	uxtb	r3, r3
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d001      	beq.n	8001dc2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e0e7      	b.n	8001f92 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	4a78      	ldr	r2, [pc, #480]	; (8001fa8 <HAL_I2C_Init+0x280>)
 8001dc6:	fba2 2303 	umull	r2, r3, r2, r3
 8001dca:	0c9b      	lsrs	r3, r3, #18
 8001dcc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	68ba      	ldr	r2, [r7, #8]
 8001dde:	430a      	orrs	r2, r1
 8001de0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	6a1b      	ldr	r3, [r3, #32]
 8001de8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	4a6a      	ldr	r2, [pc, #424]	; (8001f9c <HAL_I2C_Init+0x274>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d802      	bhi.n	8001dfc <HAL_I2C_Init+0xd4>
 8001df6:	68bb      	ldr	r3, [r7, #8]
 8001df8:	3301      	adds	r3, #1
 8001dfa:	e009      	b.n	8001e10 <HAL_I2C_Init+0xe8>
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001e02:	fb02 f303 	mul.w	r3, r2, r3
 8001e06:	4a69      	ldr	r2, [pc, #420]	; (8001fac <HAL_I2C_Init+0x284>)
 8001e08:	fba2 2303 	umull	r2, r3, r2, r3
 8001e0c:	099b      	lsrs	r3, r3, #6
 8001e0e:	3301      	adds	r3, #1
 8001e10:	687a      	ldr	r2, [r7, #4]
 8001e12:	6812      	ldr	r2, [r2, #0]
 8001e14:	430b      	orrs	r3, r1
 8001e16:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	69db      	ldr	r3, [r3, #28]
 8001e1e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001e22:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	495c      	ldr	r1, [pc, #368]	; (8001f9c <HAL_I2C_Init+0x274>)
 8001e2c:	428b      	cmp	r3, r1
 8001e2e:	d819      	bhi.n	8001e64 <HAL_I2C_Init+0x13c>
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	1e59      	subs	r1, r3, #1
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	005b      	lsls	r3, r3, #1
 8001e3a:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e3e:	1c59      	adds	r1, r3, #1
 8001e40:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001e44:	400b      	ands	r3, r1
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d00a      	beq.n	8001e60 <HAL_I2C_Init+0x138>
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	1e59      	subs	r1, r3, #1
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	005b      	lsls	r3, r3, #1
 8001e54:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e58:	3301      	adds	r3, #1
 8001e5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e5e:	e051      	b.n	8001f04 <HAL_I2C_Init+0x1dc>
 8001e60:	2304      	movs	r3, #4
 8001e62:	e04f      	b.n	8001f04 <HAL_I2C_Init+0x1dc>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d111      	bne.n	8001e90 <HAL_I2C_Init+0x168>
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	1e58      	subs	r0, r3, #1
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6859      	ldr	r1, [r3, #4]
 8001e74:	460b      	mov	r3, r1
 8001e76:	005b      	lsls	r3, r3, #1
 8001e78:	440b      	add	r3, r1
 8001e7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e7e:	3301      	adds	r3, #1
 8001e80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	bf0c      	ite	eq
 8001e88:	2301      	moveq	r3, #1
 8001e8a:	2300      	movne	r3, #0
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	e012      	b.n	8001eb6 <HAL_I2C_Init+0x18e>
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	1e58      	subs	r0, r3, #1
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6859      	ldr	r1, [r3, #4]
 8001e98:	460b      	mov	r3, r1
 8001e9a:	009b      	lsls	r3, r3, #2
 8001e9c:	440b      	add	r3, r1
 8001e9e:	0099      	lsls	r1, r3, #2
 8001ea0:	440b      	add	r3, r1
 8001ea2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ea6:	3301      	adds	r3, #1
 8001ea8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	bf0c      	ite	eq
 8001eb0:	2301      	moveq	r3, #1
 8001eb2:	2300      	movne	r3, #0
 8001eb4:	b2db      	uxtb	r3, r3
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d001      	beq.n	8001ebe <HAL_I2C_Init+0x196>
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e022      	b.n	8001f04 <HAL_I2C_Init+0x1dc>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d10e      	bne.n	8001ee4 <HAL_I2C_Init+0x1bc>
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	1e58      	subs	r0, r3, #1
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6859      	ldr	r1, [r3, #4]
 8001ece:	460b      	mov	r3, r1
 8001ed0:	005b      	lsls	r3, r3, #1
 8001ed2:	440b      	add	r3, r1
 8001ed4:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ed8:	3301      	adds	r3, #1
 8001eda:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ede:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ee2:	e00f      	b.n	8001f04 <HAL_I2C_Init+0x1dc>
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	1e58      	subs	r0, r3, #1
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6859      	ldr	r1, [r3, #4]
 8001eec:	460b      	mov	r3, r1
 8001eee:	009b      	lsls	r3, r3, #2
 8001ef0:	440b      	add	r3, r1
 8001ef2:	0099      	lsls	r1, r3, #2
 8001ef4:	440b      	add	r3, r1
 8001ef6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001efa:	3301      	adds	r3, #1
 8001efc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f00:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001f04:	6879      	ldr	r1, [r7, #4]
 8001f06:	6809      	ldr	r1, [r1, #0]
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	69da      	ldr	r2, [r3, #28]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6a1b      	ldr	r3, [r3, #32]
 8001f1e:	431a      	orrs	r2, r3
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	430a      	orrs	r2, r1
 8001f26:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001f32:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001f36:	687a      	ldr	r2, [r7, #4]
 8001f38:	6911      	ldr	r1, [r2, #16]
 8001f3a:	687a      	ldr	r2, [r7, #4]
 8001f3c:	68d2      	ldr	r2, [r2, #12]
 8001f3e:	4311      	orrs	r1, r2
 8001f40:	687a      	ldr	r2, [r7, #4]
 8001f42:	6812      	ldr	r2, [r2, #0]
 8001f44:	430b      	orrs	r3, r1
 8001f46:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	68db      	ldr	r3, [r3, #12]
 8001f4e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	695a      	ldr	r2, [r3, #20]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	699b      	ldr	r3, [r3, #24]
 8001f5a:	431a      	orrs	r2, r3
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	430a      	orrs	r2, r1
 8001f62:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f042 0201 	orr.w	r2, r2, #1
 8001f72:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2200      	movs	r2, #0
 8001f78:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2220      	movs	r2, #32
 8001f7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2200      	movs	r2, #0
 8001f86:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001f90:	2300      	movs	r3, #0
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	3710      	adds	r7, #16
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	000186a0 	.word	0x000186a0
 8001fa0:	001e847f 	.word	0x001e847f
 8001fa4:	003d08ff 	.word	0x003d08ff
 8001fa8:	431bde83 	.word	0x431bde83
 8001fac:	10624dd3 	.word	0x10624dd3

08001fb0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b088      	sub	sp, #32
 8001fb4:	af02      	add	r7, sp, #8
 8001fb6:	60f8      	str	r0, [r7, #12]
 8001fb8:	4608      	mov	r0, r1
 8001fba:	4611      	mov	r1, r2
 8001fbc:	461a      	mov	r2, r3
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	817b      	strh	r3, [r7, #10]
 8001fc2:	460b      	mov	r3, r1
 8001fc4:	813b      	strh	r3, [r7, #8]
 8001fc6:	4613      	mov	r3, r2
 8001fc8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001fca:	f7ff f817 	bl	8000ffc <HAL_GetTick>
 8001fce:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fd6:	b2db      	uxtb	r3, r3
 8001fd8:	2b20      	cmp	r3, #32
 8001fda:	f040 80d9 	bne.w	8002190 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	9300      	str	r3, [sp, #0]
 8001fe2:	2319      	movs	r3, #25
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	496d      	ldr	r1, [pc, #436]	; (800219c <HAL_I2C_Mem_Write+0x1ec>)
 8001fe8:	68f8      	ldr	r0, [r7, #12]
 8001fea:	f000 fc7f 	bl	80028ec <I2C_WaitOnFlagUntilTimeout>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d001      	beq.n	8001ff8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001ff4:	2302      	movs	r3, #2
 8001ff6:	e0cc      	b.n	8002192 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ffe:	2b01      	cmp	r3, #1
 8002000:	d101      	bne.n	8002006 <HAL_I2C_Mem_Write+0x56>
 8002002:	2302      	movs	r3, #2
 8002004:	e0c5      	b.n	8002192 <HAL_I2C_Mem_Write+0x1e2>
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	2201      	movs	r2, #1
 800200a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f003 0301 	and.w	r3, r3, #1
 8002018:	2b01      	cmp	r3, #1
 800201a:	d007      	beq.n	800202c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	681a      	ldr	r2, [r3, #0]
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f042 0201 	orr.w	r2, r2, #1
 800202a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	681a      	ldr	r2, [r3, #0]
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800203a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	2221      	movs	r2, #33	; 0x21
 8002040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	2240      	movs	r2, #64	; 0x40
 8002048:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	2200      	movs	r2, #0
 8002050:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	6a3a      	ldr	r2, [r7, #32]
 8002056:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800205c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002062:	b29a      	uxth	r2, r3
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	4a4d      	ldr	r2, [pc, #308]	; (80021a0 <HAL_I2C_Mem_Write+0x1f0>)
 800206c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800206e:	88f8      	ldrh	r0, [r7, #6]
 8002070:	893a      	ldrh	r2, [r7, #8]
 8002072:	8979      	ldrh	r1, [r7, #10]
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	9301      	str	r3, [sp, #4]
 8002078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800207a:	9300      	str	r3, [sp, #0]
 800207c:	4603      	mov	r3, r0
 800207e:	68f8      	ldr	r0, [r7, #12]
 8002080:	f000 fab6 	bl	80025f0 <I2C_RequestMemoryWrite>
 8002084:	4603      	mov	r3, r0
 8002086:	2b00      	cmp	r3, #0
 8002088:	d052      	beq.n	8002130 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e081      	b.n	8002192 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800208e:	697a      	ldr	r2, [r7, #20]
 8002090:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002092:	68f8      	ldr	r0, [r7, #12]
 8002094:	f000 fd00 	bl	8002a98 <I2C_WaitOnTXEFlagUntilTimeout>
 8002098:	4603      	mov	r3, r0
 800209a:	2b00      	cmp	r3, #0
 800209c:	d00d      	beq.n	80020ba <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a2:	2b04      	cmp	r3, #4
 80020a4:	d107      	bne.n	80020b6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020b4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	e06b      	b.n	8002192 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020be:	781a      	ldrb	r2, [r3, #0]
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ca:	1c5a      	adds	r2, r3, #1
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020d4:	3b01      	subs	r3, #1
 80020d6:	b29a      	uxth	r2, r3
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020e0:	b29b      	uxth	r3, r3
 80020e2:	3b01      	subs	r3, #1
 80020e4:	b29a      	uxth	r2, r3
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	695b      	ldr	r3, [r3, #20]
 80020f0:	f003 0304 	and.w	r3, r3, #4
 80020f4:	2b04      	cmp	r3, #4
 80020f6:	d11b      	bne.n	8002130 <HAL_I2C_Mem_Write+0x180>
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d017      	beq.n	8002130 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002104:	781a      	ldrb	r2, [r3, #0]
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002110:	1c5a      	adds	r2, r3, #1
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800211a:	3b01      	subs	r3, #1
 800211c:	b29a      	uxth	r2, r3
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002126:	b29b      	uxth	r3, r3
 8002128:	3b01      	subs	r3, #1
 800212a:	b29a      	uxth	r2, r3
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002134:	2b00      	cmp	r3, #0
 8002136:	d1aa      	bne.n	800208e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002138:	697a      	ldr	r2, [r7, #20]
 800213a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800213c:	68f8      	ldr	r0, [r7, #12]
 800213e:	f000 fcec 	bl	8002b1a <I2C_WaitOnBTFFlagUntilTimeout>
 8002142:	4603      	mov	r3, r0
 8002144:	2b00      	cmp	r3, #0
 8002146:	d00d      	beq.n	8002164 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800214c:	2b04      	cmp	r3, #4
 800214e:	d107      	bne.n	8002160 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	681a      	ldr	r2, [r3, #0]
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800215e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002160:	2301      	movs	r3, #1
 8002162:	e016      	b.n	8002192 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002172:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	2220      	movs	r2, #32
 8002178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	2200      	movs	r2, #0
 8002180:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	2200      	movs	r2, #0
 8002188:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800218c:	2300      	movs	r3, #0
 800218e:	e000      	b.n	8002192 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002190:	2302      	movs	r3, #2
  }
}
 8002192:	4618      	mov	r0, r3
 8002194:	3718      	adds	r7, #24
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	00100002 	.word	0x00100002
 80021a0:	ffff0000 	.word	0xffff0000

080021a4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b08c      	sub	sp, #48	; 0x30
 80021a8:	af02      	add	r7, sp, #8
 80021aa:	60f8      	str	r0, [r7, #12]
 80021ac:	4608      	mov	r0, r1
 80021ae:	4611      	mov	r1, r2
 80021b0:	461a      	mov	r2, r3
 80021b2:	4603      	mov	r3, r0
 80021b4:	817b      	strh	r3, [r7, #10]
 80021b6:	460b      	mov	r3, r1
 80021b8:	813b      	strh	r3, [r7, #8]
 80021ba:	4613      	mov	r3, r2
 80021bc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80021be:	f7fe ff1d 	bl	8000ffc <HAL_GetTick>
 80021c2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021ca:	b2db      	uxtb	r3, r3
 80021cc:	2b20      	cmp	r3, #32
 80021ce:	f040 8208 	bne.w	80025e2 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80021d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d4:	9300      	str	r3, [sp, #0]
 80021d6:	2319      	movs	r3, #25
 80021d8:	2201      	movs	r2, #1
 80021da:	497b      	ldr	r1, [pc, #492]	; (80023c8 <HAL_I2C_Mem_Read+0x224>)
 80021dc:	68f8      	ldr	r0, [r7, #12]
 80021de:	f000 fb85 	bl	80028ec <I2C_WaitOnFlagUntilTimeout>
 80021e2:	4603      	mov	r3, r0
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d001      	beq.n	80021ec <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80021e8:	2302      	movs	r3, #2
 80021ea:	e1fb      	b.n	80025e4 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021f2:	2b01      	cmp	r3, #1
 80021f4:	d101      	bne.n	80021fa <HAL_I2C_Mem_Read+0x56>
 80021f6:	2302      	movs	r3, #2
 80021f8:	e1f4      	b.n	80025e4 <HAL_I2C_Mem_Read+0x440>
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	2201      	movs	r2, #1
 80021fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f003 0301 	and.w	r3, r3, #1
 800220c:	2b01      	cmp	r3, #1
 800220e:	d007      	beq.n	8002220 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	681a      	ldr	r2, [r3, #0]
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f042 0201 	orr.w	r2, r2, #1
 800221e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800222e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	2222      	movs	r2, #34	; 0x22
 8002234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	2240      	movs	r2, #64	; 0x40
 800223c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	2200      	movs	r2, #0
 8002244:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800224a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002250:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002256:	b29a      	uxth	r2, r3
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	4a5b      	ldr	r2, [pc, #364]	; (80023cc <HAL_I2C_Mem_Read+0x228>)
 8002260:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002262:	88f8      	ldrh	r0, [r7, #6]
 8002264:	893a      	ldrh	r2, [r7, #8]
 8002266:	8979      	ldrh	r1, [r7, #10]
 8002268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800226a:	9301      	str	r3, [sp, #4]
 800226c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800226e:	9300      	str	r3, [sp, #0]
 8002270:	4603      	mov	r3, r0
 8002272:	68f8      	ldr	r0, [r7, #12]
 8002274:	f000 fa52 	bl	800271c <I2C_RequestMemoryRead>
 8002278:	4603      	mov	r3, r0
 800227a:	2b00      	cmp	r3, #0
 800227c:	d001      	beq.n	8002282 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	e1b0      	b.n	80025e4 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002286:	2b00      	cmp	r3, #0
 8002288:	d113      	bne.n	80022b2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800228a:	2300      	movs	r3, #0
 800228c:	623b      	str	r3, [r7, #32]
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	695b      	ldr	r3, [r3, #20]
 8002294:	623b      	str	r3, [r7, #32]
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	699b      	ldr	r3, [r3, #24]
 800229c:	623b      	str	r3, [r7, #32]
 800229e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022ae:	601a      	str	r2, [r3, #0]
 80022b0:	e184      	b.n	80025bc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022b6:	2b01      	cmp	r3, #1
 80022b8:	d11b      	bne.n	80022f2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022c8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022ca:	2300      	movs	r3, #0
 80022cc:	61fb      	str	r3, [r7, #28]
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	695b      	ldr	r3, [r3, #20]
 80022d4:	61fb      	str	r3, [r7, #28]
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	699b      	ldr	r3, [r3, #24]
 80022dc:	61fb      	str	r3, [r7, #28]
 80022de:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022ee:	601a      	str	r2, [r3, #0]
 80022f0:	e164      	b.n	80025bc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022f6:	2b02      	cmp	r3, #2
 80022f8:	d11b      	bne.n	8002332 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002308:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	681a      	ldr	r2, [r3, #0]
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002318:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800231a:	2300      	movs	r3, #0
 800231c:	61bb      	str	r3, [r7, #24]
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	695b      	ldr	r3, [r3, #20]
 8002324:	61bb      	str	r3, [r7, #24]
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	699b      	ldr	r3, [r3, #24]
 800232c:	61bb      	str	r3, [r7, #24]
 800232e:	69bb      	ldr	r3, [r7, #24]
 8002330:	e144      	b.n	80025bc <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002332:	2300      	movs	r3, #0
 8002334:	617b      	str	r3, [r7, #20]
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	695b      	ldr	r3, [r3, #20]
 800233c:	617b      	str	r3, [r7, #20]
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	699b      	ldr	r3, [r3, #24]
 8002344:	617b      	str	r3, [r7, #20]
 8002346:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002348:	e138      	b.n	80025bc <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800234e:	2b03      	cmp	r3, #3
 8002350:	f200 80f1 	bhi.w	8002536 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002358:	2b01      	cmp	r3, #1
 800235a:	d123      	bne.n	80023a4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800235c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800235e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002360:	68f8      	ldr	r0, [r7, #12]
 8002362:	f000 fc1b 	bl	8002b9c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002366:	4603      	mov	r3, r0
 8002368:	2b00      	cmp	r3, #0
 800236a:	d001      	beq.n	8002370 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800236c:	2301      	movs	r3, #1
 800236e:	e139      	b.n	80025e4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	691a      	ldr	r2, [r3, #16]
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800237a:	b2d2      	uxtb	r2, r2
 800237c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002382:	1c5a      	adds	r2, r3, #1
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800238c:	3b01      	subs	r3, #1
 800238e:	b29a      	uxth	r2, r3
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002398:	b29b      	uxth	r3, r3
 800239a:	3b01      	subs	r3, #1
 800239c:	b29a      	uxth	r2, r3
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80023a2:	e10b      	b.n	80025bc <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023a8:	2b02      	cmp	r3, #2
 80023aa:	d14e      	bne.n	800244a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80023ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ae:	9300      	str	r3, [sp, #0]
 80023b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023b2:	2200      	movs	r2, #0
 80023b4:	4906      	ldr	r1, [pc, #24]	; (80023d0 <HAL_I2C_Mem_Read+0x22c>)
 80023b6:	68f8      	ldr	r0, [r7, #12]
 80023b8:	f000 fa98 	bl	80028ec <I2C_WaitOnFlagUntilTimeout>
 80023bc:	4603      	mov	r3, r0
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d008      	beq.n	80023d4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
 80023c4:	e10e      	b.n	80025e4 <HAL_I2C_Mem_Read+0x440>
 80023c6:	bf00      	nop
 80023c8:	00100002 	.word	0x00100002
 80023cc:	ffff0000 	.word	0xffff0000
 80023d0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023e2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	691a      	ldr	r2, [r3, #16]
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ee:	b2d2      	uxtb	r2, r2
 80023f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f6:	1c5a      	adds	r2, r3, #1
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002400:	3b01      	subs	r3, #1
 8002402:	b29a      	uxth	r2, r3
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800240c:	b29b      	uxth	r3, r3
 800240e:	3b01      	subs	r3, #1
 8002410:	b29a      	uxth	r2, r3
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	691a      	ldr	r2, [r3, #16]
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002420:	b2d2      	uxtb	r2, r2
 8002422:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002428:	1c5a      	adds	r2, r3, #1
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002432:	3b01      	subs	r3, #1
 8002434:	b29a      	uxth	r2, r3
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800243e:	b29b      	uxth	r3, r3
 8002440:	3b01      	subs	r3, #1
 8002442:	b29a      	uxth	r2, r3
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002448:	e0b8      	b.n	80025bc <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800244a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800244c:	9300      	str	r3, [sp, #0]
 800244e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002450:	2200      	movs	r2, #0
 8002452:	4966      	ldr	r1, [pc, #408]	; (80025ec <HAL_I2C_Mem_Read+0x448>)
 8002454:	68f8      	ldr	r0, [r7, #12]
 8002456:	f000 fa49 	bl	80028ec <I2C_WaitOnFlagUntilTimeout>
 800245a:	4603      	mov	r3, r0
 800245c:	2b00      	cmp	r3, #0
 800245e:	d001      	beq.n	8002464 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002460:	2301      	movs	r3, #1
 8002462:	e0bf      	b.n	80025e4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	681a      	ldr	r2, [r3, #0]
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002472:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	691a      	ldr	r2, [r3, #16]
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800247e:	b2d2      	uxtb	r2, r2
 8002480:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002486:	1c5a      	adds	r2, r3, #1
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002490:	3b01      	subs	r3, #1
 8002492:	b29a      	uxth	r2, r3
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800249c:	b29b      	uxth	r3, r3
 800249e:	3b01      	subs	r3, #1
 80024a0:	b29a      	uxth	r2, r3
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80024a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a8:	9300      	str	r3, [sp, #0]
 80024aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024ac:	2200      	movs	r2, #0
 80024ae:	494f      	ldr	r1, [pc, #316]	; (80025ec <HAL_I2C_Mem_Read+0x448>)
 80024b0:	68f8      	ldr	r0, [r7, #12]
 80024b2:	f000 fa1b 	bl	80028ec <I2C_WaitOnFlagUntilTimeout>
 80024b6:	4603      	mov	r3, r0
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d001      	beq.n	80024c0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80024bc:	2301      	movs	r3, #1
 80024be:	e091      	b.n	80025e4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	681a      	ldr	r2, [r3, #0]
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024ce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	691a      	ldr	r2, [r3, #16]
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024da:	b2d2      	uxtb	r2, r2
 80024dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e2:	1c5a      	adds	r2, r3, #1
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024ec:	3b01      	subs	r3, #1
 80024ee:	b29a      	uxth	r2, r3
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024f8:	b29b      	uxth	r3, r3
 80024fa:	3b01      	subs	r3, #1
 80024fc:	b29a      	uxth	r2, r3
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	691a      	ldr	r2, [r3, #16]
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800250c:	b2d2      	uxtb	r2, r2
 800250e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002514:	1c5a      	adds	r2, r3, #1
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800251e:	3b01      	subs	r3, #1
 8002520:	b29a      	uxth	r2, r3
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800252a:	b29b      	uxth	r3, r3
 800252c:	3b01      	subs	r3, #1
 800252e:	b29a      	uxth	r2, r3
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002534:	e042      	b.n	80025bc <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002536:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002538:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800253a:	68f8      	ldr	r0, [r7, #12]
 800253c:	f000 fb2e 	bl	8002b9c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002540:	4603      	mov	r3, r0
 8002542:	2b00      	cmp	r3, #0
 8002544:	d001      	beq.n	800254a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e04c      	b.n	80025e4 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	691a      	ldr	r2, [r3, #16]
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002554:	b2d2      	uxtb	r2, r2
 8002556:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800255c:	1c5a      	adds	r2, r3, #1
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002566:	3b01      	subs	r3, #1
 8002568:	b29a      	uxth	r2, r3
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002572:	b29b      	uxth	r3, r3
 8002574:	3b01      	subs	r3, #1
 8002576:	b29a      	uxth	r2, r3
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	695b      	ldr	r3, [r3, #20]
 8002582:	f003 0304 	and.w	r3, r3, #4
 8002586:	2b04      	cmp	r3, #4
 8002588:	d118      	bne.n	80025bc <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	691a      	ldr	r2, [r3, #16]
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002594:	b2d2      	uxtb	r2, r2
 8002596:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800259c:	1c5a      	adds	r2, r3, #1
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025a6:	3b01      	subs	r3, #1
 80025a8:	b29a      	uxth	r2, r3
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025b2:	b29b      	uxth	r3, r3
 80025b4:	3b01      	subs	r3, #1
 80025b6:	b29a      	uxth	r2, r3
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	f47f aec2 	bne.w	800234a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	2220      	movs	r2, #32
 80025ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	2200      	movs	r2, #0
 80025d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	2200      	movs	r2, #0
 80025da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80025de:	2300      	movs	r3, #0
 80025e0:	e000      	b.n	80025e4 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80025e2:	2302      	movs	r3, #2
  }
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	3728      	adds	r7, #40	; 0x28
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}
 80025ec:	00010004 	.word	0x00010004

080025f0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b088      	sub	sp, #32
 80025f4:	af02      	add	r7, sp, #8
 80025f6:	60f8      	str	r0, [r7, #12]
 80025f8:	4608      	mov	r0, r1
 80025fa:	4611      	mov	r1, r2
 80025fc:	461a      	mov	r2, r3
 80025fe:	4603      	mov	r3, r0
 8002600:	817b      	strh	r3, [r7, #10]
 8002602:	460b      	mov	r3, r1
 8002604:	813b      	strh	r3, [r7, #8]
 8002606:	4613      	mov	r3, r2
 8002608:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002618:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800261a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800261c:	9300      	str	r3, [sp, #0]
 800261e:	6a3b      	ldr	r3, [r7, #32]
 8002620:	2200      	movs	r2, #0
 8002622:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002626:	68f8      	ldr	r0, [r7, #12]
 8002628:	f000 f960 	bl	80028ec <I2C_WaitOnFlagUntilTimeout>
 800262c:	4603      	mov	r3, r0
 800262e:	2b00      	cmp	r3, #0
 8002630:	d00d      	beq.n	800264e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800263c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002640:	d103      	bne.n	800264a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002648:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800264a:	2303      	movs	r3, #3
 800264c:	e05f      	b.n	800270e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800264e:	897b      	ldrh	r3, [r7, #10]
 8002650:	b2db      	uxtb	r3, r3
 8002652:	461a      	mov	r2, r3
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800265c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800265e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002660:	6a3a      	ldr	r2, [r7, #32]
 8002662:	492d      	ldr	r1, [pc, #180]	; (8002718 <I2C_RequestMemoryWrite+0x128>)
 8002664:	68f8      	ldr	r0, [r7, #12]
 8002666:	f000 f998 	bl	800299a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800266a:	4603      	mov	r3, r0
 800266c:	2b00      	cmp	r3, #0
 800266e:	d001      	beq.n	8002674 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002670:	2301      	movs	r3, #1
 8002672:	e04c      	b.n	800270e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002674:	2300      	movs	r3, #0
 8002676:	617b      	str	r3, [r7, #20]
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	695b      	ldr	r3, [r3, #20]
 800267e:	617b      	str	r3, [r7, #20]
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	699b      	ldr	r3, [r3, #24]
 8002686:	617b      	str	r3, [r7, #20]
 8002688:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800268a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800268c:	6a39      	ldr	r1, [r7, #32]
 800268e:	68f8      	ldr	r0, [r7, #12]
 8002690:	f000 fa02 	bl	8002a98 <I2C_WaitOnTXEFlagUntilTimeout>
 8002694:	4603      	mov	r3, r0
 8002696:	2b00      	cmp	r3, #0
 8002698:	d00d      	beq.n	80026b6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800269e:	2b04      	cmp	r3, #4
 80026a0:	d107      	bne.n	80026b2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	681a      	ldr	r2, [r3, #0]
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026b0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	e02b      	b.n	800270e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80026b6:	88fb      	ldrh	r3, [r7, #6]
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	d105      	bne.n	80026c8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80026bc:	893b      	ldrh	r3, [r7, #8]
 80026be:	b2da      	uxtb	r2, r3
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	611a      	str	r2, [r3, #16]
 80026c6:	e021      	b.n	800270c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80026c8:	893b      	ldrh	r3, [r7, #8]
 80026ca:	0a1b      	lsrs	r3, r3, #8
 80026cc:	b29b      	uxth	r3, r3
 80026ce:	b2da      	uxtb	r2, r3
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80026d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026d8:	6a39      	ldr	r1, [r7, #32]
 80026da:	68f8      	ldr	r0, [r7, #12]
 80026dc:	f000 f9dc 	bl	8002a98 <I2C_WaitOnTXEFlagUntilTimeout>
 80026e0:	4603      	mov	r3, r0
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d00d      	beq.n	8002702 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ea:	2b04      	cmp	r3, #4
 80026ec:	d107      	bne.n	80026fe <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	681a      	ldr	r2, [r3, #0]
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026fc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	e005      	b.n	800270e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002702:	893b      	ldrh	r3, [r7, #8]
 8002704:	b2da      	uxtb	r2, r3
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800270c:	2300      	movs	r3, #0
}
 800270e:	4618      	mov	r0, r3
 8002710:	3718      	adds	r7, #24
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}
 8002716:	bf00      	nop
 8002718:	00010002 	.word	0x00010002

0800271c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b088      	sub	sp, #32
 8002720:	af02      	add	r7, sp, #8
 8002722:	60f8      	str	r0, [r7, #12]
 8002724:	4608      	mov	r0, r1
 8002726:	4611      	mov	r1, r2
 8002728:	461a      	mov	r2, r3
 800272a:	4603      	mov	r3, r0
 800272c:	817b      	strh	r3, [r7, #10]
 800272e:	460b      	mov	r3, r1
 8002730:	813b      	strh	r3, [r7, #8]
 8002732:	4613      	mov	r3, r2
 8002734:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	681a      	ldr	r2, [r3, #0]
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002744:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	681a      	ldr	r2, [r3, #0]
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002754:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002758:	9300      	str	r3, [sp, #0]
 800275a:	6a3b      	ldr	r3, [r7, #32]
 800275c:	2200      	movs	r2, #0
 800275e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002762:	68f8      	ldr	r0, [r7, #12]
 8002764:	f000 f8c2 	bl	80028ec <I2C_WaitOnFlagUntilTimeout>
 8002768:	4603      	mov	r3, r0
 800276a:	2b00      	cmp	r3, #0
 800276c:	d00d      	beq.n	800278a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002778:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800277c:	d103      	bne.n	8002786 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002784:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002786:	2303      	movs	r3, #3
 8002788:	e0aa      	b.n	80028e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800278a:	897b      	ldrh	r3, [r7, #10]
 800278c:	b2db      	uxtb	r3, r3
 800278e:	461a      	mov	r2, r3
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002798:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800279a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800279c:	6a3a      	ldr	r2, [r7, #32]
 800279e:	4952      	ldr	r1, [pc, #328]	; (80028e8 <I2C_RequestMemoryRead+0x1cc>)
 80027a0:	68f8      	ldr	r0, [r7, #12]
 80027a2:	f000 f8fa 	bl	800299a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80027a6:	4603      	mov	r3, r0
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d001      	beq.n	80027b0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80027ac:	2301      	movs	r3, #1
 80027ae:	e097      	b.n	80028e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027b0:	2300      	movs	r3, #0
 80027b2:	617b      	str	r3, [r7, #20]
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	695b      	ldr	r3, [r3, #20]
 80027ba:	617b      	str	r3, [r7, #20]
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	699b      	ldr	r3, [r3, #24]
 80027c2:	617b      	str	r3, [r7, #20]
 80027c4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80027c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027c8:	6a39      	ldr	r1, [r7, #32]
 80027ca:	68f8      	ldr	r0, [r7, #12]
 80027cc:	f000 f964 	bl	8002a98 <I2C_WaitOnTXEFlagUntilTimeout>
 80027d0:	4603      	mov	r3, r0
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d00d      	beq.n	80027f2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027da:	2b04      	cmp	r3, #4
 80027dc:	d107      	bne.n	80027ee <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027ec:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e076      	b.n	80028e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80027f2:	88fb      	ldrh	r3, [r7, #6]
 80027f4:	2b01      	cmp	r3, #1
 80027f6:	d105      	bne.n	8002804 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80027f8:	893b      	ldrh	r3, [r7, #8]
 80027fa:	b2da      	uxtb	r2, r3
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	611a      	str	r2, [r3, #16]
 8002802:	e021      	b.n	8002848 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002804:	893b      	ldrh	r3, [r7, #8]
 8002806:	0a1b      	lsrs	r3, r3, #8
 8002808:	b29b      	uxth	r3, r3
 800280a:	b2da      	uxtb	r2, r3
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002812:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002814:	6a39      	ldr	r1, [r7, #32]
 8002816:	68f8      	ldr	r0, [r7, #12]
 8002818:	f000 f93e 	bl	8002a98 <I2C_WaitOnTXEFlagUntilTimeout>
 800281c:	4603      	mov	r3, r0
 800281e:	2b00      	cmp	r3, #0
 8002820:	d00d      	beq.n	800283e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002826:	2b04      	cmp	r3, #4
 8002828:	d107      	bne.n	800283a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	681a      	ldr	r2, [r3, #0]
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002838:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	e050      	b.n	80028e0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800283e:	893b      	ldrh	r3, [r7, #8]
 8002840:	b2da      	uxtb	r2, r3
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002848:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800284a:	6a39      	ldr	r1, [r7, #32]
 800284c:	68f8      	ldr	r0, [r7, #12]
 800284e:	f000 f923 	bl	8002a98 <I2C_WaitOnTXEFlagUntilTimeout>
 8002852:	4603      	mov	r3, r0
 8002854:	2b00      	cmp	r3, #0
 8002856:	d00d      	beq.n	8002874 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285c:	2b04      	cmp	r3, #4
 800285e:	d107      	bne.n	8002870 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	681a      	ldr	r2, [r3, #0]
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800286e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002870:	2301      	movs	r3, #1
 8002872:	e035      	b.n	80028e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002882:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002886:	9300      	str	r3, [sp, #0]
 8002888:	6a3b      	ldr	r3, [r7, #32]
 800288a:	2200      	movs	r2, #0
 800288c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002890:	68f8      	ldr	r0, [r7, #12]
 8002892:	f000 f82b 	bl	80028ec <I2C_WaitOnFlagUntilTimeout>
 8002896:	4603      	mov	r3, r0
 8002898:	2b00      	cmp	r3, #0
 800289a:	d00d      	beq.n	80028b8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028aa:	d103      	bne.n	80028b4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028b2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80028b4:	2303      	movs	r3, #3
 80028b6:	e013      	b.n	80028e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80028b8:	897b      	ldrh	r3, [r7, #10]
 80028ba:	b2db      	uxtb	r3, r3
 80028bc:	f043 0301 	orr.w	r3, r3, #1
 80028c0:	b2da      	uxtb	r2, r3
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80028c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ca:	6a3a      	ldr	r2, [r7, #32]
 80028cc:	4906      	ldr	r1, [pc, #24]	; (80028e8 <I2C_RequestMemoryRead+0x1cc>)
 80028ce:	68f8      	ldr	r0, [r7, #12]
 80028d0:	f000 f863 	bl	800299a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80028d4:	4603      	mov	r3, r0
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d001      	beq.n	80028de <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80028da:	2301      	movs	r3, #1
 80028dc:	e000      	b.n	80028e0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80028de:	2300      	movs	r3, #0
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	3718      	adds	r7, #24
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}
 80028e8:	00010002 	.word	0x00010002

080028ec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b084      	sub	sp, #16
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	60f8      	str	r0, [r7, #12]
 80028f4:	60b9      	str	r1, [r7, #8]
 80028f6:	603b      	str	r3, [r7, #0]
 80028f8:	4613      	mov	r3, r2
 80028fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80028fc:	e025      	b.n	800294a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002904:	d021      	beq.n	800294a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002906:	f7fe fb79 	bl	8000ffc <HAL_GetTick>
 800290a:	4602      	mov	r2, r0
 800290c:	69bb      	ldr	r3, [r7, #24]
 800290e:	1ad3      	subs	r3, r2, r3
 8002910:	683a      	ldr	r2, [r7, #0]
 8002912:	429a      	cmp	r2, r3
 8002914:	d302      	bcc.n	800291c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d116      	bne.n	800294a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	2200      	movs	r2, #0
 8002920:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	2220      	movs	r2, #32
 8002926:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	2200      	movs	r2, #0
 800292e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002936:	f043 0220 	orr.w	r2, r3, #32
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	2200      	movs	r2, #0
 8002942:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	e023      	b.n	8002992 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	0c1b      	lsrs	r3, r3, #16
 800294e:	b2db      	uxtb	r3, r3
 8002950:	2b01      	cmp	r3, #1
 8002952:	d10d      	bne.n	8002970 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	695b      	ldr	r3, [r3, #20]
 800295a:	43da      	mvns	r2, r3
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	4013      	ands	r3, r2
 8002960:	b29b      	uxth	r3, r3
 8002962:	2b00      	cmp	r3, #0
 8002964:	bf0c      	ite	eq
 8002966:	2301      	moveq	r3, #1
 8002968:	2300      	movne	r3, #0
 800296a:	b2db      	uxtb	r3, r3
 800296c:	461a      	mov	r2, r3
 800296e:	e00c      	b.n	800298a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	699b      	ldr	r3, [r3, #24]
 8002976:	43da      	mvns	r2, r3
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	4013      	ands	r3, r2
 800297c:	b29b      	uxth	r3, r3
 800297e:	2b00      	cmp	r3, #0
 8002980:	bf0c      	ite	eq
 8002982:	2301      	moveq	r3, #1
 8002984:	2300      	movne	r3, #0
 8002986:	b2db      	uxtb	r3, r3
 8002988:	461a      	mov	r2, r3
 800298a:	79fb      	ldrb	r3, [r7, #7]
 800298c:	429a      	cmp	r2, r3
 800298e:	d0b6      	beq.n	80028fe <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002990:	2300      	movs	r3, #0
}
 8002992:	4618      	mov	r0, r3
 8002994:	3710      	adds	r7, #16
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}

0800299a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800299a:	b580      	push	{r7, lr}
 800299c:	b084      	sub	sp, #16
 800299e:	af00      	add	r7, sp, #0
 80029a0:	60f8      	str	r0, [r7, #12]
 80029a2:	60b9      	str	r1, [r7, #8]
 80029a4:	607a      	str	r2, [r7, #4]
 80029a6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80029a8:	e051      	b.n	8002a4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	695b      	ldr	r3, [r3, #20]
 80029b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029b8:	d123      	bne.n	8002a02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	681a      	ldr	r2, [r3, #0]
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029c8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80029d2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	2200      	movs	r2, #0
 80029d8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	2220      	movs	r2, #32
 80029de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	2200      	movs	r2, #0
 80029e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ee:	f043 0204 	orr.w	r2, r3, #4
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	2200      	movs	r2, #0
 80029fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	e046      	b.n	8002a90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a08:	d021      	beq.n	8002a4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a0a:	f7fe faf7 	bl	8000ffc <HAL_GetTick>
 8002a0e:	4602      	mov	r2, r0
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	1ad3      	subs	r3, r2, r3
 8002a14:	687a      	ldr	r2, [r7, #4]
 8002a16:	429a      	cmp	r2, r3
 8002a18:	d302      	bcc.n	8002a20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d116      	bne.n	8002a4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	2200      	movs	r2, #0
 8002a24:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	2220      	movs	r2, #32
 8002a2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	2200      	movs	r2, #0
 8002a32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a3a:	f043 0220 	orr.w	r2, r3, #32
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	2200      	movs	r2, #0
 8002a46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e020      	b.n	8002a90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002a4e:	68bb      	ldr	r3, [r7, #8]
 8002a50:	0c1b      	lsrs	r3, r3, #16
 8002a52:	b2db      	uxtb	r3, r3
 8002a54:	2b01      	cmp	r3, #1
 8002a56:	d10c      	bne.n	8002a72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	695b      	ldr	r3, [r3, #20]
 8002a5e:	43da      	mvns	r2, r3
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	4013      	ands	r3, r2
 8002a64:	b29b      	uxth	r3, r3
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	bf14      	ite	ne
 8002a6a:	2301      	movne	r3, #1
 8002a6c:	2300      	moveq	r3, #0
 8002a6e:	b2db      	uxtb	r3, r3
 8002a70:	e00b      	b.n	8002a8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	699b      	ldr	r3, [r3, #24]
 8002a78:	43da      	mvns	r2, r3
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	b29b      	uxth	r3, r3
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	bf14      	ite	ne
 8002a84:	2301      	movne	r3, #1
 8002a86:	2300      	moveq	r3, #0
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d18d      	bne.n	80029aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002a8e:	2300      	movs	r3, #0
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	3710      	adds	r7, #16
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}

08002a98 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b084      	sub	sp, #16
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	60f8      	str	r0, [r7, #12]
 8002aa0:	60b9      	str	r1, [r7, #8]
 8002aa2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002aa4:	e02d      	b.n	8002b02 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002aa6:	68f8      	ldr	r0, [r7, #12]
 8002aa8:	f000 f8ce 	bl	8002c48 <I2C_IsAcknowledgeFailed>
 8002aac:	4603      	mov	r3, r0
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d001      	beq.n	8002ab6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e02d      	b.n	8002b12 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002abc:	d021      	beq.n	8002b02 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002abe:	f7fe fa9d 	bl	8000ffc <HAL_GetTick>
 8002ac2:	4602      	mov	r2, r0
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	1ad3      	subs	r3, r2, r3
 8002ac8:	68ba      	ldr	r2, [r7, #8]
 8002aca:	429a      	cmp	r2, r3
 8002acc:	d302      	bcc.n	8002ad4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002ace:	68bb      	ldr	r3, [r7, #8]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d116      	bne.n	8002b02 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	2220      	movs	r2, #32
 8002ade:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aee:	f043 0220 	orr.w	r2, r3, #32
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	2200      	movs	r2, #0
 8002afa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	e007      	b.n	8002b12 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	695b      	ldr	r3, [r3, #20]
 8002b08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b0c:	2b80      	cmp	r3, #128	; 0x80
 8002b0e:	d1ca      	bne.n	8002aa6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002b10:	2300      	movs	r3, #0
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	3710      	adds	r7, #16
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}

08002b1a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b1a:	b580      	push	{r7, lr}
 8002b1c:	b084      	sub	sp, #16
 8002b1e:	af00      	add	r7, sp, #0
 8002b20:	60f8      	str	r0, [r7, #12]
 8002b22:	60b9      	str	r1, [r7, #8]
 8002b24:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002b26:	e02d      	b.n	8002b84 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002b28:	68f8      	ldr	r0, [r7, #12]
 8002b2a:	f000 f88d 	bl	8002c48 <I2C_IsAcknowledgeFailed>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d001      	beq.n	8002b38 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	e02d      	b.n	8002b94 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b3e:	d021      	beq.n	8002b84 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b40:	f7fe fa5c 	bl	8000ffc <HAL_GetTick>
 8002b44:	4602      	mov	r2, r0
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	1ad3      	subs	r3, r2, r3
 8002b4a:	68ba      	ldr	r2, [r7, #8]
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	d302      	bcc.n	8002b56 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d116      	bne.n	8002b84 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	2220      	movs	r2, #32
 8002b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	2200      	movs	r2, #0
 8002b68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b70:	f043 0220 	orr.w	r2, r3, #32
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002b80:	2301      	movs	r3, #1
 8002b82:	e007      	b.n	8002b94 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	695b      	ldr	r3, [r3, #20]
 8002b8a:	f003 0304 	and.w	r3, r3, #4
 8002b8e:	2b04      	cmp	r3, #4
 8002b90:	d1ca      	bne.n	8002b28 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002b92:	2300      	movs	r3, #0
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	3710      	adds	r7, #16
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}

08002b9c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b084      	sub	sp, #16
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	60f8      	str	r0, [r7, #12]
 8002ba4:	60b9      	str	r1, [r7, #8]
 8002ba6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002ba8:	e042      	b.n	8002c30 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	695b      	ldr	r3, [r3, #20]
 8002bb0:	f003 0310 	and.w	r3, r3, #16
 8002bb4:	2b10      	cmp	r3, #16
 8002bb6:	d119      	bne.n	8002bec <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f06f 0210 	mvn.w	r2, #16
 8002bc0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2220      	movs	r2, #32
 8002bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	2200      	movs	r2, #0
 8002be4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002be8:	2301      	movs	r3, #1
 8002bea:	e029      	b.n	8002c40 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bec:	f7fe fa06 	bl	8000ffc <HAL_GetTick>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	1ad3      	subs	r3, r2, r3
 8002bf6:	68ba      	ldr	r2, [r7, #8]
 8002bf8:	429a      	cmp	r2, r3
 8002bfa:	d302      	bcc.n	8002c02 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d116      	bne.n	8002c30 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	2200      	movs	r2, #0
 8002c06:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	2220      	movs	r2, #32
 8002c0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	2200      	movs	r2, #0
 8002c14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c1c:	f043 0220 	orr.w	r2, r3, #32
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	2200      	movs	r2, #0
 8002c28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	e007      	b.n	8002c40 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	695b      	ldr	r3, [r3, #20]
 8002c36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c3a:	2b40      	cmp	r3, #64	; 0x40
 8002c3c:	d1b5      	bne.n	8002baa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002c3e:	2300      	movs	r3, #0
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	3710      	adds	r7, #16
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}

08002c48 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b083      	sub	sp, #12
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	695b      	ldr	r3, [r3, #20]
 8002c56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c5e:	d11b      	bne.n	8002c98 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002c68:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2220      	movs	r2, #32
 8002c74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c84:	f043 0204 	orr.w	r2, r3, #4
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002c94:	2301      	movs	r3, #1
 8002c96:	e000      	b.n	8002c9a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002c98:	2300      	movs	r3, #0
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	370c      	adds	r7, #12
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca4:	4770      	bx	lr
	...

08002ca8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b086      	sub	sp, #24
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d101      	bne.n	8002cba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e267      	b.n	800318a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f003 0301 	and.w	r3, r3, #1
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d075      	beq.n	8002db2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002cc6:	4b88      	ldr	r3, [pc, #544]	; (8002ee8 <HAL_RCC_OscConfig+0x240>)
 8002cc8:	689b      	ldr	r3, [r3, #8]
 8002cca:	f003 030c 	and.w	r3, r3, #12
 8002cce:	2b04      	cmp	r3, #4
 8002cd0:	d00c      	beq.n	8002cec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cd2:	4b85      	ldr	r3, [pc, #532]	; (8002ee8 <HAL_RCC_OscConfig+0x240>)
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002cda:	2b08      	cmp	r3, #8
 8002cdc:	d112      	bne.n	8002d04 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cde:	4b82      	ldr	r3, [pc, #520]	; (8002ee8 <HAL_RCC_OscConfig+0x240>)
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ce6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002cea:	d10b      	bne.n	8002d04 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cec:	4b7e      	ldr	r3, [pc, #504]	; (8002ee8 <HAL_RCC_OscConfig+0x240>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d05b      	beq.n	8002db0 <HAL_RCC_OscConfig+0x108>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d157      	bne.n	8002db0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002d00:	2301      	movs	r3, #1
 8002d02:	e242      	b.n	800318a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d0c:	d106      	bne.n	8002d1c <HAL_RCC_OscConfig+0x74>
 8002d0e:	4b76      	ldr	r3, [pc, #472]	; (8002ee8 <HAL_RCC_OscConfig+0x240>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a75      	ldr	r2, [pc, #468]	; (8002ee8 <HAL_RCC_OscConfig+0x240>)
 8002d14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d18:	6013      	str	r3, [r2, #0]
 8002d1a:	e01d      	b.n	8002d58 <HAL_RCC_OscConfig+0xb0>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d24:	d10c      	bne.n	8002d40 <HAL_RCC_OscConfig+0x98>
 8002d26:	4b70      	ldr	r3, [pc, #448]	; (8002ee8 <HAL_RCC_OscConfig+0x240>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a6f      	ldr	r2, [pc, #444]	; (8002ee8 <HAL_RCC_OscConfig+0x240>)
 8002d2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d30:	6013      	str	r3, [r2, #0]
 8002d32:	4b6d      	ldr	r3, [pc, #436]	; (8002ee8 <HAL_RCC_OscConfig+0x240>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a6c      	ldr	r2, [pc, #432]	; (8002ee8 <HAL_RCC_OscConfig+0x240>)
 8002d38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d3c:	6013      	str	r3, [r2, #0]
 8002d3e:	e00b      	b.n	8002d58 <HAL_RCC_OscConfig+0xb0>
 8002d40:	4b69      	ldr	r3, [pc, #420]	; (8002ee8 <HAL_RCC_OscConfig+0x240>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a68      	ldr	r2, [pc, #416]	; (8002ee8 <HAL_RCC_OscConfig+0x240>)
 8002d46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d4a:	6013      	str	r3, [r2, #0]
 8002d4c:	4b66      	ldr	r3, [pc, #408]	; (8002ee8 <HAL_RCC_OscConfig+0x240>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a65      	ldr	r2, [pc, #404]	; (8002ee8 <HAL_RCC_OscConfig+0x240>)
 8002d52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d56:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d013      	beq.n	8002d88 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d60:	f7fe f94c 	bl	8000ffc <HAL_GetTick>
 8002d64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d66:	e008      	b.n	8002d7a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d68:	f7fe f948 	bl	8000ffc <HAL_GetTick>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	1ad3      	subs	r3, r2, r3
 8002d72:	2b64      	cmp	r3, #100	; 0x64
 8002d74:	d901      	bls.n	8002d7a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002d76:	2303      	movs	r3, #3
 8002d78:	e207      	b.n	800318a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d7a:	4b5b      	ldr	r3, [pc, #364]	; (8002ee8 <HAL_RCC_OscConfig+0x240>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d0f0      	beq.n	8002d68 <HAL_RCC_OscConfig+0xc0>
 8002d86:	e014      	b.n	8002db2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d88:	f7fe f938 	bl	8000ffc <HAL_GetTick>
 8002d8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d8e:	e008      	b.n	8002da2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d90:	f7fe f934 	bl	8000ffc <HAL_GetTick>
 8002d94:	4602      	mov	r2, r0
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	1ad3      	subs	r3, r2, r3
 8002d9a:	2b64      	cmp	r3, #100	; 0x64
 8002d9c:	d901      	bls.n	8002da2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002d9e:	2303      	movs	r3, #3
 8002da0:	e1f3      	b.n	800318a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002da2:	4b51      	ldr	r3, [pc, #324]	; (8002ee8 <HAL_RCC_OscConfig+0x240>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d1f0      	bne.n	8002d90 <HAL_RCC_OscConfig+0xe8>
 8002dae:	e000      	b.n	8002db2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002db0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 0302 	and.w	r3, r3, #2
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d063      	beq.n	8002e86 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002dbe:	4b4a      	ldr	r3, [pc, #296]	; (8002ee8 <HAL_RCC_OscConfig+0x240>)
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	f003 030c 	and.w	r3, r3, #12
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d00b      	beq.n	8002de2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002dca:	4b47      	ldr	r3, [pc, #284]	; (8002ee8 <HAL_RCC_OscConfig+0x240>)
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002dd2:	2b08      	cmp	r3, #8
 8002dd4:	d11c      	bne.n	8002e10 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002dd6:	4b44      	ldr	r3, [pc, #272]	; (8002ee8 <HAL_RCC_OscConfig+0x240>)
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d116      	bne.n	8002e10 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002de2:	4b41      	ldr	r3, [pc, #260]	; (8002ee8 <HAL_RCC_OscConfig+0x240>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 0302 	and.w	r3, r3, #2
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d005      	beq.n	8002dfa <HAL_RCC_OscConfig+0x152>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	68db      	ldr	r3, [r3, #12]
 8002df2:	2b01      	cmp	r3, #1
 8002df4:	d001      	beq.n	8002dfa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	e1c7      	b.n	800318a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dfa:	4b3b      	ldr	r3, [pc, #236]	; (8002ee8 <HAL_RCC_OscConfig+0x240>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	691b      	ldr	r3, [r3, #16]
 8002e06:	00db      	lsls	r3, r3, #3
 8002e08:	4937      	ldr	r1, [pc, #220]	; (8002ee8 <HAL_RCC_OscConfig+0x240>)
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e0e:	e03a      	b.n	8002e86 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	68db      	ldr	r3, [r3, #12]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d020      	beq.n	8002e5a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e18:	4b34      	ldr	r3, [pc, #208]	; (8002eec <HAL_RCC_OscConfig+0x244>)
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e1e:	f7fe f8ed 	bl	8000ffc <HAL_GetTick>
 8002e22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e24:	e008      	b.n	8002e38 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e26:	f7fe f8e9 	bl	8000ffc <HAL_GetTick>
 8002e2a:	4602      	mov	r2, r0
 8002e2c:	693b      	ldr	r3, [r7, #16]
 8002e2e:	1ad3      	subs	r3, r2, r3
 8002e30:	2b02      	cmp	r3, #2
 8002e32:	d901      	bls.n	8002e38 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002e34:	2303      	movs	r3, #3
 8002e36:	e1a8      	b.n	800318a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e38:	4b2b      	ldr	r3, [pc, #172]	; (8002ee8 <HAL_RCC_OscConfig+0x240>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f003 0302 	and.w	r3, r3, #2
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d0f0      	beq.n	8002e26 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e44:	4b28      	ldr	r3, [pc, #160]	; (8002ee8 <HAL_RCC_OscConfig+0x240>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	691b      	ldr	r3, [r3, #16]
 8002e50:	00db      	lsls	r3, r3, #3
 8002e52:	4925      	ldr	r1, [pc, #148]	; (8002ee8 <HAL_RCC_OscConfig+0x240>)
 8002e54:	4313      	orrs	r3, r2
 8002e56:	600b      	str	r3, [r1, #0]
 8002e58:	e015      	b.n	8002e86 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e5a:	4b24      	ldr	r3, [pc, #144]	; (8002eec <HAL_RCC_OscConfig+0x244>)
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e60:	f7fe f8cc 	bl	8000ffc <HAL_GetTick>
 8002e64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e66:	e008      	b.n	8002e7a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e68:	f7fe f8c8 	bl	8000ffc <HAL_GetTick>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	1ad3      	subs	r3, r2, r3
 8002e72:	2b02      	cmp	r3, #2
 8002e74:	d901      	bls.n	8002e7a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002e76:	2303      	movs	r3, #3
 8002e78:	e187      	b.n	800318a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e7a:	4b1b      	ldr	r3, [pc, #108]	; (8002ee8 <HAL_RCC_OscConfig+0x240>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 0302 	and.w	r3, r3, #2
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d1f0      	bne.n	8002e68 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f003 0308 	and.w	r3, r3, #8
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d036      	beq.n	8002f00 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	695b      	ldr	r3, [r3, #20]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d016      	beq.n	8002ec8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e9a:	4b15      	ldr	r3, [pc, #84]	; (8002ef0 <HAL_RCC_OscConfig+0x248>)
 8002e9c:	2201      	movs	r2, #1
 8002e9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ea0:	f7fe f8ac 	bl	8000ffc <HAL_GetTick>
 8002ea4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ea6:	e008      	b.n	8002eba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ea8:	f7fe f8a8 	bl	8000ffc <HAL_GetTick>
 8002eac:	4602      	mov	r2, r0
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	1ad3      	subs	r3, r2, r3
 8002eb2:	2b02      	cmp	r3, #2
 8002eb4:	d901      	bls.n	8002eba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002eb6:	2303      	movs	r3, #3
 8002eb8:	e167      	b.n	800318a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002eba:	4b0b      	ldr	r3, [pc, #44]	; (8002ee8 <HAL_RCC_OscConfig+0x240>)
 8002ebc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ebe:	f003 0302 	and.w	r3, r3, #2
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d0f0      	beq.n	8002ea8 <HAL_RCC_OscConfig+0x200>
 8002ec6:	e01b      	b.n	8002f00 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ec8:	4b09      	ldr	r3, [pc, #36]	; (8002ef0 <HAL_RCC_OscConfig+0x248>)
 8002eca:	2200      	movs	r2, #0
 8002ecc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ece:	f7fe f895 	bl	8000ffc <HAL_GetTick>
 8002ed2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ed4:	e00e      	b.n	8002ef4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ed6:	f7fe f891 	bl	8000ffc <HAL_GetTick>
 8002eda:	4602      	mov	r2, r0
 8002edc:	693b      	ldr	r3, [r7, #16]
 8002ede:	1ad3      	subs	r3, r2, r3
 8002ee0:	2b02      	cmp	r3, #2
 8002ee2:	d907      	bls.n	8002ef4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002ee4:	2303      	movs	r3, #3
 8002ee6:	e150      	b.n	800318a <HAL_RCC_OscConfig+0x4e2>
 8002ee8:	40023800 	.word	0x40023800
 8002eec:	42470000 	.word	0x42470000
 8002ef0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ef4:	4b88      	ldr	r3, [pc, #544]	; (8003118 <HAL_RCC_OscConfig+0x470>)
 8002ef6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ef8:	f003 0302 	and.w	r3, r3, #2
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d1ea      	bne.n	8002ed6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f003 0304 	and.w	r3, r3, #4
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	f000 8097 	beq.w	800303c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f12:	4b81      	ldr	r3, [pc, #516]	; (8003118 <HAL_RCC_OscConfig+0x470>)
 8002f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d10f      	bne.n	8002f3e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f1e:	2300      	movs	r3, #0
 8002f20:	60bb      	str	r3, [r7, #8]
 8002f22:	4b7d      	ldr	r3, [pc, #500]	; (8003118 <HAL_RCC_OscConfig+0x470>)
 8002f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f26:	4a7c      	ldr	r2, [pc, #496]	; (8003118 <HAL_RCC_OscConfig+0x470>)
 8002f28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f2c:	6413      	str	r3, [r2, #64]	; 0x40
 8002f2e:	4b7a      	ldr	r3, [pc, #488]	; (8003118 <HAL_RCC_OscConfig+0x470>)
 8002f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f36:	60bb      	str	r3, [r7, #8]
 8002f38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f3e:	4b77      	ldr	r3, [pc, #476]	; (800311c <HAL_RCC_OscConfig+0x474>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d118      	bne.n	8002f7c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f4a:	4b74      	ldr	r3, [pc, #464]	; (800311c <HAL_RCC_OscConfig+0x474>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a73      	ldr	r2, [pc, #460]	; (800311c <HAL_RCC_OscConfig+0x474>)
 8002f50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f56:	f7fe f851 	bl	8000ffc <HAL_GetTick>
 8002f5a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f5c:	e008      	b.n	8002f70 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f5e:	f7fe f84d 	bl	8000ffc <HAL_GetTick>
 8002f62:	4602      	mov	r2, r0
 8002f64:	693b      	ldr	r3, [r7, #16]
 8002f66:	1ad3      	subs	r3, r2, r3
 8002f68:	2b02      	cmp	r3, #2
 8002f6a:	d901      	bls.n	8002f70 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002f6c:	2303      	movs	r3, #3
 8002f6e:	e10c      	b.n	800318a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f70:	4b6a      	ldr	r3, [pc, #424]	; (800311c <HAL_RCC_OscConfig+0x474>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d0f0      	beq.n	8002f5e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	689b      	ldr	r3, [r3, #8]
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	d106      	bne.n	8002f92 <HAL_RCC_OscConfig+0x2ea>
 8002f84:	4b64      	ldr	r3, [pc, #400]	; (8003118 <HAL_RCC_OscConfig+0x470>)
 8002f86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f88:	4a63      	ldr	r2, [pc, #396]	; (8003118 <HAL_RCC_OscConfig+0x470>)
 8002f8a:	f043 0301 	orr.w	r3, r3, #1
 8002f8e:	6713      	str	r3, [r2, #112]	; 0x70
 8002f90:	e01c      	b.n	8002fcc <HAL_RCC_OscConfig+0x324>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	2b05      	cmp	r3, #5
 8002f98:	d10c      	bne.n	8002fb4 <HAL_RCC_OscConfig+0x30c>
 8002f9a:	4b5f      	ldr	r3, [pc, #380]	; (8003118 <HAL_RCC_OscConfig+0x470>)
 8002f9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f9e:	4a5e      	ldr	r2, [pc, #376]	; (8003118 <HAL_RCC_OscConfig+0x470>)
 8002fa0:	f043 0304 	orr.w	r3, r3, #4
 8002fa4:	6713      	str	r3, [r2, #112]	; 0x70
 8002fa6:	4b5c      	ldr	r3, [pc, #368]	; (8003118 <HAL_RCC_OscConfig+0x470>)
 8002fa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002faa:	4a5b      	ldr	r2, [pc, #364]	; (8003118 <HAL_RCC_OscConfig+0x470>)
 8002fac:	f043 0301 	orr.w	r3, r3, #1
 8002fb0:	6713      	str	r3, [r2, #112]	; 0x70
 8002fb2:	e00b      	b.n	8002fcc <HAL_RCC_OscConfig+0x324>
 8002fb4:	4b58      	ldr	r3, [pc, #352]	; (8003118 <HAL_RCC_OscConfig+0x470>)
 8002fb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fb8:	4a57      	ldr	r2, [pc, #348]	; (8003118 <HAL_RCC_OscConfig+0x470>)
 8002fba:	f023 0301 	bic.w	r3, r3, #1
 8002fbe:	6713      	str	r3, [r2, #112]	; 0x70
 8002fc0:	4b55      	ldr	r3, [pc, #340]	; (8003118 <HAL_RCC_OscConfig+0x470>)
 8002fc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fc4:	4a54      	ldr	r2, [pc, #336]	; (8003118 <HAL_RCC_OscConfig+0x470>)
 8002fc6:	f023 0304 	bic.w	r3, r3, #4
 8002fca:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d015      	beq.n	8003000 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fd4:	f7fe f812 	bl	8000ffc <HAL_GetTick>
 8002fd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fda:	e00a      	b.n	8002ff2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fdc:	f7fe f80e 	bl	8000ffc <HAL_GetTick>
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	1ad3      	subs	r3, r2, r3
 8002fe6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d901      	bls.n	8002ff2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002fee:	2303      	movs	r3, #3
 8002ff0:	e0cb      	b.n	800318a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ff2:	4b49      	ldr	r3, [pc, #292]	; (8003118 <HAL_RCC_OscConfig+0x470>)
 8002ff4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ff6:	f003 0302 	and.w	r3, r3, #2
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d0ee      	beq.n	8002fdc <HAL_RCC_OscConfig+0x334>
 8002ffe:	e014      	b.n	800302a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003000:	f7fd fffc 	bl	8000ffc <HAL_GetTick>
 8003004:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003006:	e00a      	b.n	800301e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003008:	f7fd fff8 	bl	8000ffc <HAL_GetTick>
 800300c:	4602      	mov	r2, r0
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	1ad3      	subs	r3, r2, r3
 8003012:	f241 3288 	movw	r2, #5000	; 0x1388
 8003016:	4293      	cmp	r3, r2
 8003018:	d901      	bls.n	800301e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800301a:	2303      	movs	r3, #3
 800301c:	e0b5      	b.n	800318a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800301e:	4b3e      	ldr	r3, [pc, #248]	; (8003118 <HAL_RCC_OscConfig+0x470>)
 8003020:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003022:	f003 0302 	and.w	r3, r3, #2
 8003026:	2b00      	cmp	r3, #0
 8003028:	d1ee      	bne.n	8003008 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800302a:	7dfb      	ldrb	r3, [r7, #23]
 800302c:	2b01      	cmp	r3, #1
 800302e:	d105      	bne.n	800303c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003030:	4b39      	ldr	r3, [pc, #228]	; (8003118 <HAL_RCC_OscConfig+0x470>)
 8003032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003034:	4a38      	ldr	r2, [pc, #224]	; (8003118 <HAL_RCC_OscConfig+0x470>)
 8003036:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800303a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	699b      	ldr	r3, [r3, #24]
 8003040:	2b00      	cmp	r3, #0
 8003042:	f000 80a1 	beq.w	8003188 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003046:	4b34      	ldr	r3, [pc, #208]	; (8003118 <HAL_RCC_OscConfig+0x470>)
 8003048:	689b      	ldr	r3, [r3, #8]
 800304a:	f003 030c 	and.w	r3, r3, #12
 800304e:	2b08      	cmp	r3, #8
 8003050:	d05c      	beq.n	800310c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	699b      	ldr	r3, [r3, #24]
 8003056:	2b02      	cmp	r3, #2
 8003058:	d141      	bne.n	80030de <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800305a:	4b31      	ldr	r3, [pc, #196]	; (8003120 <HAL_RCC_OscConfig+0x478>)
 800305c:	2200      	movs	r2, #0
 800305e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003060:	f7fd ffcc 	bl	8000ffc <HAL_GetTick>
 8003064:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003066:	e008      	b.n	800307a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003068:	f7fd ffc8 	bl	8000ffc <HAL_GetTick>
 800306c:	4602      	mov	r2, r0
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	1ad3      	subs	r3, r2, r3
 8003072:	2b02      	cmp	r3, #2
 8003074:	d901      	bls.n	800307a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003076:	2303      	movs	r3, #3
 8003078:	e087      	b.n	800318a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800307a:	4b27      	ldr	r3, [pc, #156]	; (8003118 <HAL_RCC_OscConfig+0x470>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003082:	2b00      	cmp	r3, #0
 8003084:	d1f0      	bne.n	8003068 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	69da      	ldr	r2, [r3, #28]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6a1b      	ldr	r3, [r3, #32]
 800308e:	431a      	orrs	r2, r3
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003094:	019b      	lsls	r3, r3, #6
 8003096:	431a      	orrs	r2, r3
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800309c:	085b      	lsrs	r3, r3, #1
 800309e:	3b01      	subs	r3, #1
 80030a0:	041b      	lsls	r3, r3, #16
 80030a2:	431a      	orrs	r2, r3
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030a8:	061b      	lsls	r3, r3, #24
 80030aa:	491b      	ldr	r1, [pc, #108]	; (8003118 <HAL_RCC_OscConfig+0x470>)
 80030ac:	4313      	orrs	r3, r2
 80030ae:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030b0:	4b1b      	ldr	r3, [pc, #108]	; (8003120 <HAL_RCC_OscConfig+0x478>)
 80030b2:	2201      	movs	r2, #1
 80030b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030b6:	f7fd ffa1 	bl	8000ffc <HAL_GetTick>
 80030ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030bc:	e008      	b.n	80030d0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030be:	f7fd ff9d 	bl	8000ffc <HAL_GetTick>
 80030c2:	4602      	mov	r2, r0
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	1ad3      	subs	r3, r2, r3
 80030c8:	2b02      	cmp	r3, #2
 80030ca:	d901      	bls.n	80030d0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80030cc:	2303      	movs	r3, #3
 80030ce:	e05c      	b.n	800318a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030d0:	4b11      	ldr	r3, [pc, #68]	; (8003118 <HAL_RCC_OscConfig+0x470>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d0f0      	beq.n	80030be <HAL_RCC_OscConfig+0x416>
 80030dc:	e054      	b.n	8003188 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030de:	4b10      	ldr	r3, [pc, #64]	; (8003120 <HAL_RCC_OscConfig+0x478>)
 80030e0:	2200      	movs	r2, #0
 80030e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030e4:	f7fd ff8a 	bl	8000ffc <HAL_GetTick>
 80030e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030ea:	e008      	b.n	80030fe <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030ec:	f7fd ff86 	bl	8000ffc <HAL_GetTick>
 80030f0:	4602      	mov	r2, r0
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	1ad3      	subs	r3, r2, r3
 80030f6:	2b02      	cmp	r3, #2
 80030f8:	d901      	bls.n	80030fe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80030fa:	2303      	movs	r3, #3
 80030fc:	e045      	b.n	800318a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030fe:	4b06      	ldr	r3, [pc, #24]	; (8003118 <HAL_RCC_OscConfig+0x470>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003106:	2b00      	cmp	r3, #0
 8003108:	d1f0      	bne.n	80030ec <HAL_RCC_OscConfig+0x444>
 800310a:	e03d      	b.n	8003188 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	699b      	ldr	r3, [r3, #24]
 8003110:	2b01      	cmp	r3, #1
 8003112:	d107      	bne.n	8003124 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	e038      	b.n	800318a <HAL_RCC_OscConfig+0x4e2>
 8003118:	40023800 	.word	0x40023800
 800311c:	40007000 	.word	0x40007000
 8003120:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003124:	4b1b      	ldr	r3, [pc, #108]	; (8003194 <HAL_RCC_OscConfig+0x4ec>)
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	699b      	ldr	r3, [r3, #24]
 800312e:	2b01      	cmp	r3, #1
 8003130:	d028      	beq.n	8003184 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800313c:	429a      	cmp	r2, r3
 800313e:	d121      	bne.n	8003184 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800314a:	429a      	cmp	r2, r3
 800314c:	d11a      	bne.n	8003184 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800314e:	68fa      	ldr	r2, [r7, #12]
 8003150:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003154:	4013      	ands	r3, r2
 8003156:	687a      	ldr	r2, [r7, #4]
 8003158:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800315a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800315c:	4293      	cmp	r3, r2
 800315e:	d111      	bne.n	8003184 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800316a:	085b      	lsrs	r3, r3, #1
 800316c:	3b01      	subs	r3, #1
 800316e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003170:	429a      	cmp	r2, r3
 8003172:	d107      	bne.n	8003184 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800317e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003180:	429a      	cmp	r2, r3
 8003182:	d001      	beq.n	8003188 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003184:	2301      	movs	r3, #1
 8003186:	e000      	b.n	800318a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003188:	2300      	movs	r3, #0
}
 800318a:	4618      	mov	r0, r3
 800318c:	3718      	adds	r7, #24
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}
 8003192:	bf00      	nop
 8003194:	40023800 	.word	0x40023800

08003198 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b084      	sub	sp, #16
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
 80031a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d101      	bne.n	80031ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031a8:	2301      	movs	r3, #1
 80031aa:	e0cc      	b.n	8003346 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80031ac:	4b68      	ldr	r3, [pc, #416]	; (8003350 <HAL_RCC_ClockConfig+0x1b8>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f003 0307 	and.w	r3, r3, #7
 80031b4:	683a      	ldr	r2, [r7, #0]
 80031b6:	429a      	cmp	r2, r3
 80031b8:	d90c      	bls.n	80031d4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031ba:	4b65      	ldr	r3, [pc, #404]	; (8003350 <HAL_RCC_ClockConfig+0x1b8>)
 80031bc:	683a      	ldr	r2, [r7, #0]
 80031be:	b2d2      	uxtb	r2, r2
 80031c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031c2:	4b63      	ldr	r3, [pc, #396]	; (8003350 <HAL_RCC_ClockConfig+0x1b8>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 0307 	and.w	r3, r3, #7
 80031ca:	683a      	ldr	r2, [r7, #0]
 80031cc:	429a      	cmp	r2, r3
 80031ce:	d001      	beq.n	80031d4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80031d0:	2301      	movs	r3, #1
 80031d2:	e0b8      	b.n	8003346 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f003 0302 	and.w	r3, r3, #2
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d020      	beq.n	8003222 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f003 0304 	and.w	r3, r3, #4
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d005      	beq.n	80031f8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80031ec:	4b59      	ldr	r3, [pc, #356]	; (8003354 <HAL_RCC_ClockConfig+0x1bc>)
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	4a58      	ldr	r2, [pc, #352]	; (8003354 <HAL_RCC_ClockConfig+0x1bc>)
 80031f2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80031f6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f003 0308 	and.w	r3, r3, #8
 8003200:	2b00      	cmp	r3, #0
 8003202:	d005      	beq.n	8003210 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003204:	4b53      	ldr	r3, [pc, #332]	; (8003354 <HAL_RCC_ClockConfig+0x1bc>)
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	4a52      	ldr	r2, [pc, #328]	; (8003354 <HAL_RCC_ClockConfig+0x1bc>)
 800320a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800320e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003210:	4b50      	ldr	r3, [pc, #320]	; (8003354 <HAL_RCC_ClockConfig+0x1bc>)
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	494d      	ldr	r1, [pc, #308]	; (8003354 <HAL_RCC_ClockConfig+0x1bc>)
 800321e:	4313      	orrs	r3, r2
 8003220:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f003 0301 	and.w	r3, r3, #1
 800322a:	2b00      	cmp	r3, #0
 800322c:	d044      	beq.n	80032b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	2b01      	cmp	r3, #1
 8003234:	d107      	bne.n	8003246 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003236:	4b47      	ldr	r3, [pc, #284]	; (8003354 <HAL_RCC_ClockConfig+0x1bc>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800323e:	2b00      	cmp	r3, #0
 8003240:	d119      	bne.n	8003276 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	e07f      	b.n	8003346 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	2b02      	cmp	r3, #2
 800324c:	d003      	beq.n	8003256 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003252:	2b03      	cmp	r3, #3
 8003254:	d107      	bne.n	8003266 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003256:	4b3f      	ldr	r3, [pc, #252]	; (8003354 <HAL_RCC_ClockConfig+0x1bc>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800325e:	2b00      	cmp	r3, #0
 8003260:	d109      	bne.n	8003276 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	e06f      	b.n	8003346 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003266:	4b3b      	ldr	r3, [pc, #236]	; (8003354 <HAL_RCC_ClockConfig+0x1bc>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f003 0302 	and.w	r3, r3, #2
 800326e:	2b00      	cmp	r3, #0
 8003270:	d101      	bne.n	8003276 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	e067      	b.n	8003346 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003276:	4b37      	ldr	r3, [pc, #220]	; (8003354 <HAL_RCC_ClockConfig+0x1bc>)
 8003278:	689b      	ldr	r3, [r3, #8]
 800327a:	f023 0203 	bic.w	r2, r3, #3
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	4934      	ldr	r1, [pc, #208]	; (8003354 <HAL_RCC_ClockConfig+0x1bc>)
 8003284:	4313      	orrs	r3, r2
 8003286:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003288:	f7fd feb8 	bl	8000ffc <HAL_GetTick>
 800328c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800328e:	e00a      	b.n	80032a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003290:	f7fd feb4 	bl	8000ffc <HAL_GetTick>
 8003294:	4602      	mov	r2, r0
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	1ad3      	subs	r3, r2, r3
 800329a:	f241 3288 	movw	r2, #5000	; 0x1388
 800329e:	4293      	cmp	r3, r2
 80032a0:	d901      	bls.n	80032a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80032a2:	2303      	movs	r3, #3
 80032a4:	e04f      	b.n	8003346 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032a6:	4b2b      	ldr	r3, [pc, #172]	; (8003354 <HAL_RCC_ClockConfig+0x1bc>)
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	f003 020c 	and.w	r2, r3, #12
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	009b      	lsls	r3, r3, #2
 80032b4:	429a      	cmp	r2, r3
 80032b6:	d1eb      	bne.n	8003290 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80032b8:	4b25      	ldr	r3, [pc, #148]	; (8003350 <HAL_RCC_ClockConfig+0x1b8>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f003 0307 	and.w	r3, r3, #7
 80032c0:	683a      	ldr	r2, [r7, #0]
 80032c2:	429a      	cmp	r2, r3
 80032c4:	d20c      	bcs.n	80032e0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032c6:	4b22      	ldr	r3, [pc, #136]	; (8003350 <HAL_RCC_ClockConfig+0x1b8>)
 80032c8:	683a      	ldr	r2, [r7, #0]
 80032ca:	b2d2      	uxtb	r2, r2
 80032cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032ce:	4b20      	ldr	r3, [pc, #128]	; (8003350 <HAL_RCC_ClockConfig+0x1b8>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f003 0307 	and.w	r3, r3, #7
 80032d6:	683a      	ldr	r2, [r7, #0]
 80032d8:	429a      	cmp	r2, r3
 80032da:	d001      	beq.n	80032e0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80032dc:	2301      	movs	r3, #1
 80032de:	e032      	b.n	8003346 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f003 0304 	and.w	r3, r3, #4
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d008      	beq.n	80032fe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032ec:	4b19      	ldr	r3, [pc, #100]	; (8003354 <HAL_RCC_ClockConfig+0x1bc>)
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	68db      	ldr	r3, [r3, #12]
 80032f8:	4916      	ldr	r1, [pc, #88]	; (8003354 <HAL_RCC_ClockConfig+0x1bc>)
 80032fa:	4313      	orrs	r3, r2
 80032fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f003 0308 	and.w	r3, r3, #8
 8003306:	2b00      	cmp	r3, #0
 8003308:	d009      	beq.n	800331e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800330a:	4b12      	ldr	r3, [pc, #72]	; (8003354 <HAL_RCC_ClockConfig+0x1bc>)
 800330c:	689b      	ldr	r3, [r3, #8]
 800330e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	691b      	ldr	r3, [r3, #16]
 8003316:	00db      	lsls	r3, r3, #3
 8003318:	490e      	ldr	r1, [pc, #56]	; (8003354 <HAL_RCC_ClockConfig+0x1bc>)
 800331a:	4313      	orrs	r3, r2
 800331c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800331e:	f000 f821 	bl	8003364 <HAL_RCC_GetSysClockFreq>
 8003322:	4602      	mov	r2, r0
 8003324:	4b0b      	ldr	r3, [pc, #44]	; (8003354 <HAL_RCC_ClockConfig+0x1bc>)
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	091b      	lsrs	r3, r3, #4
 800332a:	f003 030f 	and.w	r3, r3, #15
 800332e:	490a      	ldr	r1, [pc, #40]	; (8003358 <HAL_RCC_ClockConfig+0x1c0>)
 8003330:	5ccb      	ldrb	r3, [r1, r3]
 8003332:	fa22 f303 	lsr.w	r3, r2, r3
 8003336:	4a09      	ldr	r2, [pc, #36]	; (800335c <HAL_RCC_ClockConfig+0x1c4>)
 8003338:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800333a:	4b09      	ldr	r3, [pc, #36]	; (8003360 <HAL_RCC_ClockConfig+0x1c8>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4618      	mov	r0, r3
 8003340:	f7fd fe18 	bl	8000f74 <HAL_InitTick>

  return HAL_OK;
 8003344:	2300      	movs	r3, #0
}
 8003346:	4618      	mov	r0, r3
 8003348:	3710      	adds	r7, #16
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}
 800334e:	bf00      	nop
 8003350:	40023c00 	.word	0x40023c00
 8003354:	40023800 	.word	0x40023800
 8003358:	080061d8 	.word	0x080061d8
 800335c:	20000004 	.word	0x20000004
 8003360:	20000008 	.word	0x20000008

08003364 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003364:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003368:	b090      	sub	sp, #64	; 0x40
 800336a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800336c:	2300      	movs	r3, #0
 800336e:	637b      	str	r3, [r7, #52]	; 0x34
 8003370:	2300      	movs	r3, #0
 8003372:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003374:	2300      	movs	r3, #0
 8003376:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003378:	2300      	movs	r3, #0
 800337a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800337c:	4b59      	ldr	r3, [pc, #356]	; (80034e4 <HAL_RCC_GetSysClockFreq+0x180>)
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	f003 030c 	and.w	r3, r3, #12
 8003384:	2b08      	cmp	r3, #8
 8003386:	d00d      	beq.n	80033a4 <HAL_RCC_GetSysClockFreq+0x40>
 8003388:	2b08      	cmp	r3, #8
 800338a:	f200 80a1 	bhi.w	80034d0 <HAL_RCC_GetSysClockFreq+0x16c>
 800338e:	2b00      	cmp	r3, #0
 8003390:	d002      	beq.n	8003398 <HAL_RCC_GetSysClockFreq+0x34>
 8003392:	2b04      	cmp	r3, #4
 8003394:	d003      	beq.n	800339e <HAL_RCC_GetSysClockFreq+0x3a>
 8003396:	e09b      	b.n	80034d0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003398:	4b53      	ldr	r3, [pc, #332]	; (80034e8 <HAL_RCC_GetSysClockFreq+0x184>)
 800339a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800339c:	e09b      	b.n	80034d6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800339e:	4b53      	ldr	r3, [pc, #332]	; (80034ec <HAL_RCC_GetSysClockFreq+0x188>)
 80033a0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80033a2:	e098      	b.n	80034d6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80033a4:	4b4f      	ldr	r3, [pc, #316]	; (80034e4 <HAL_RCC_GetSysClockFreq+0x180>)
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80033ac:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80033ae:	4b4d      	ldr	r3, [pc, #308]	; (80034e4 <HAL_RCC_GetSysClockFreq+0x180>)
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d028      	beq.n	800340c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033ba:	4b4a      	ldr	r3, [pc, #296]	; (80034e4 <HAL_RCC_GetSysClockFreq+0x180>)
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	099b      	lsrs	r3, r3, #6
 80033c0:	2200      	movs	r2, #0
 80033c2:	623b      	str	r3, [r7, #32]
 80033c4:	627a      	str	r2, [r7, #36]	; 0x24
 80033c6:	6a3b      	ldr	r3, [r7, #32]
 80033c8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80033cc:	2100      	movs	r1, #0
 80033ce:	4b47      	ldr	r3, [pc, #284]	; (80034ec <HAL_RCC_GetSysClockFreq+0x188>)
 80033d0:	fb03 f201 	mul.w	r2, r3, r1
 80033d4:	2300      	movs	r3, #0
 80033d6:	fb00 f303 	mul.w	r3, r0, r3
 80033da:	4413      	add	r3, r2
 80033dc:	4a43      	ldr	r2, [pc, #268]	; (80034ec <HAL_RCC_GetSysClockFreq+0x188>)
 80033de:	fba0 1202 	umull	r1, r2, r0, r2
 80033e2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80033e4:	460a      	mov	r2, r1
 80033e6:	62ba      	str	r2, [r7, #40]	; 0x28
 80033e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80033ea:	4413      	add	r3, r2
 80033ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80033ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033f0:	2200      	movs	r2, #0
 80033f2:	61bb      	str	r3, [r7, #24]
 80033f4:	61fa      	str	r2, [r7, #28]
 80033f6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80033fa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80033fe:	f7fc feef 	bl	80001e0 <__aeabi_uldivmod>
 8003402:	4602      	mov	r2, r0
 8003404:	460b      	mov	r3, r1
 8003406:	4613      	mov	r3, r2
 8003408:	63fb      	str	r3, [r7, #60]	; 0x3c
 800340a:	e053      	b.n	80034b4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800340c:	4b35      	ldr	r3, [pc, #212]	; (80034e4 <HAL_RCC_GetSysClockFreq+0x180>)
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	099b      	lsrs	r3, r3, #6
 8003412:	2200      	movs	r2, #0
 8003414:	613b      	str	r3, [r7, #16]
 8003416:	617a      	str	r2, [r7, #20]
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800341e:	f04f 0b00 	mov.w	fp, #0
 8003422:	4652      	mov	r2, sl
 8003424:	465b      	mov	r3, fp
 8003426:	f04f 0000 	mov.w	r0, #0
 800342a:	f04f 0100 	mov.w	r1, #0
 800342e:	0159      	lsls	r1, r3, #5
 8003430:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003434:	0150      	lsls	r0, r2, #5
 8003436:	4602      	mov	r2, r0
 8003438:	460b      	mov	r3, r1
 800343a:	ebb2 080a 	subs.w	r8, r2, sl
 800343e:	eb63 090b 	sbc.w	r9, r3, fp
 8003442:	f04f 0200 	mov.w	r2, #0
 8003446:	f04f 0300 	mov.w	r3, #0
 800344a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800344e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003452:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003456:	ebb2 0408 	subs.w	r4, r2, r8
 800345a:	eb63 0509 	sbc.w	r5, r3, r9
 800345e:	f04f 0200 	mov.w	r2, #0
 8003462:	f04f 0300 	mov.w	r3, #0
 8003466:	00eb      	lsls	r3, r5, #3
 8003468:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800346c:	00e2      	lsls	r2, r4, #3
 800346e:	4614      	mov	r4, r2
 8003470:	461d      	mov	r5, r3
 8003472:	eb14 030a 	adds.w	r3, r4, sl
 8003476:	603b      	str	r3, [r7, #0]
 8003478:	eb45 030b 	adc.w	r3, r5, fp
 800347c:	607b      	str	r3, [r7, #4]
 800347e:	f04f 0200 	mov.w	r2, #0
 8003482:	f04f 0300 	mov.w	r3, #0
 8003486:	e9d7 4500 	ldrd	r4, r5, [r7]
 800348a:	4629      	mov	r1, r5
 800348c:	028b      	lsls	r3, r1, #10
 800348e:	4621      	mov	r1, r4
 8003490:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003494:	4621      	mov	r1, r4
 8003496:	028a      	lsls	r2, r1, #10
 8003498:	4610      	mov	r0, r2
 800349a:	4619      	mov	r1, r3
 800349c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800349e:	2200      	movs	r2, #0
 80034a0:	60bb      	str	r3, [r7, #8]
 80034a2:	60fa      	str	r2, [r7, #12]
 80034a4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80034a8:	f7fc fe9a 	bl	80001e0 <__aeabi_uldivmod>
 80034ac:	4602      	mov	r2, r0
 80034ae:	460b      	mov	r3, r1
 80034b0:	4613      	mov	r3, r2
 80034b2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80034b4:	4b0b      	ldr	r3, [pc, #44]	; (80034e4 <HAL_RCC_GetSysClockFreq+0x180>)
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	0c1b      	lsrs	r3, r3, #16
 80034ba:	f003 0303 	and.w	r3, r3, #3
 80034be:	3301      	adds	r3, #1
 80034c0:	005b      	lsls	r3, r3, #1
 80034c2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80034c4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80034c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80034cc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80034ce:	e002      	b.n	80034d6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80034d0:	4b05      	ldr	r3, [pc, #20]	; (80034e8 <HAL_RCC_GetSysClockFreq+0x184>)
 80034d2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80034d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80034d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80034d8:	4618      	mov	r0, r3
 80034da:	3740      	adds	r7, #64	; 0x40
 80034dc:	46bd      	mov	sp, r7
 80034de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80034e2:	bf00      	nop
 80034e4:	40023800 	.word	0x40023800
 80034e8:	00f42400 	.word	0x00f42400
 80034ec:	017d7840 	.word	0x017d7840

080034f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034f0:	b480      	push	{r7}
 80034f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034f4:	4b03      	ldr	r3, [pc, #12]	; (8003504 <HAL_RCC_GetHCLKFreq+0x14>)
 80034f6:	681b      	ldr	r3, [r3, #0]
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	46bd      	mov	sp, r7
 80034fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003500:	4770      	bx	lr
 8003502:	bf00      	nop
 8003504:	20000004 	.word	0x20000004

08003508 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800350c:	f7ff fff0 	bl	80034f0 <HAL_RCC_GetHCLKFreq>
 8003510:	4602      	mov	r2, r0
 8003512:	4b05      	ldr	r3, [pc, #20]	; (8003528 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	0a9b      	lsrs	r3, r3, #10
 8003518:	f003 0307 	and.w	r3, r3, #7
 800351c:	4903      	ldr	r1, [pc, #12]	; (800352c <HAL_RCC_GetPCLK1Freq+0x24>)
 800351e:	5ccb      	ldrb	r3, [r1, r3]
 8003520:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003524:	4618      	mov	r0, r3
 8003526:	bd80      	pop	{r7, pc}
 8003528:	40023800 	.word	0x40023800
 800352c:	080061e8 	.word	0x080061e8

08003530 <__NVIC_SetPriority>:
 8003530:	b480      	push	{r7}
 8003532:	b083      	sub	sp, #12
 8003534:	af00      	add	r7, sp, #0
 8003536:	4603      	mov	r3, r0
 8003538:	6039      	str	r1, [r7, #0]
 800353a:	71fb      	strb	r3, [r7, #7]
 800353c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003540:	2b00      	cmp	r3, #0
 8003542:	db0a      	blt.n	800355a <__NVIC_SetPriority+0x2a>
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	b2da      	uxtb	r2, r3
 8003548:	490c      	ldr	r1, [pc, #48]	; (800357c <__NVIC_SetPriority+0x4c>)
 800354a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800354e:	0112      	lsls	r2, r2, #4
 8003550:	b2d2      	uxtb	r2, r2
 8003552:	440b      	add	r3, r1
 8003554:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8003558:	e00a      	b.n	8003570 <__NVIC_SetPriority+0x40>
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	b2da      	uxtb	r2, r3
 800355e:	4908      	ldr	r1, [pc, #32]	; (8003580 <__NVIC_SetPriority+0x50>)
 8003560:	79fb      	ldrb	r3, [r7, #7]
 8003562:	f003 030f 	and.w	r3, r3, #15
 8003566:	3b04      	subs	r3, #4
 8003568:	0112      	lsls	r2, r2, #4
 800356a:	b2d2      	uxtb	r2, r2
 800356c:	440b      	add	r3, r1
 800356e:	761a      	strb	r2, [r3, #24]
 8003570:	bf00      	nop
 8003572:	370c      	adds	r7, #12
 8003574:	46bd      	mov	sp, r7
 8003576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357a:	4770      	bx	lr
 800357c:	e000e100 	.word	0xe000e100
 8003580:	e000ed00 	.word	0xe000ed00

08003584 <SVC_Setup>:
 8003584:	b580      	push	{r7, lr}
 8003586:	af00      	add	r7, sp, #0
 8003588:	2100      	movs	r1, #0
 800358a:	f06f 0004 	mvn.w	r0, #4
 800358e:	f7ff ffcf 	bl	8003530 <__NVIC_SetPriority>
 8003592:	bf00      	nop
 8003594:	bd80      	pop	{r7, pc}
	...

08003598 <osKernelInitialize>:
 8003598:	b480      	push	{r7}
 800359a:	b083      	sub	sp, #12
 800359c:	af00      	add	r7, sp, #0
 800359e:	f3ef 8305 	mrs	r3, IPSR
 80035a2:	603b      	str	r3, [r7, #0]
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d003      	beq.n	80035b2 <osKernelInitialize+0x1a>
 80035aa:	f06f 0305 	mvn.w	r3, #5
 80035ae:	607b      	str	r3, [r7, #4]
 80035b0:	e00c      	b.n	80035cc <osKernelInitialize+0x34>
 80035b2:	4b0a      	ldr	r3, [pc, #40]	; (80035dc <osKernelInitialize+0x44>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d105      	bne.n	80035c6 <osKernelInitialize+0x2e>
 80035ba:	4b08      	ldr	r3, [pc, #32]	; (80035dc <osKernelInitialize+0x44>)
 80035bc:	2201      	movs	r2, #1
 80035be:	601a      	str	r2, [r3, #0]
 80035c0:	2300      	movs	r3, #0
 80035c2:	607b      	str	r3, [r7, #4]
 80035c4:	e002      	b.n	80035cc <osKernelInitialize+0x34>
 80035c6:	f04f 33ff 	mov.w	r3, #4294967295
 80035ca:	607b      	str	r3, [r7, #4]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	4618      	mov	r0, r3
 80035d0:	370c      	adds	r7, #12
 80035d2:	46bd      	mov	sp, r7
 80035d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d8:	4770      	bx	lr
 80035da:	bf00      	nop
 80035dc:	200000f8 	.word	0x200000f8

080035e0 <osKernelStart>:
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b082      	sub	sp, #8
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	f3ef 8305 	mrs	r3, IPSR
 80035ea:	603b      	str	r3, [r7, #0]
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d003      	beq.n	80035fa <osKernelStart+0x1a>
 80035f2:	f06f 0305 	mvn.w	r3, #5
 80035f6:	607b      	str	r3, [r7, #4]
 80035f8:	e010      	b.n	800361c <osKernelStart+0x3c>
 80035fa:	4b0b      	ldr	r3, [pc, #44]	; (8003628 <osKernelStart+0x48>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	2b01      	cmp	r3, #1
 8003600:	d109      	bne.n	8003616 <osKernelStart+0x36>
 8003602:	f7ff ffbf 	bl	8003584 <SVC_Setup>
 8003606:	4b08      	ldr	r3, [pc, #32]	; (8003628 <osKernelStart+0x48>)
 8003608:	2202      	movs	r2, #2
 800360a:	601a      	str	r2, [r3, #0]
 800360c:	f001 f866 	bl	80046dc <vTaskStartScheduler>
 8003610:	2300      	movs	r3, #0
 8003612:	607b      	str	r3, [r7, #4]
 8003614:	e002      	b.n	800361c <osKernelStart+0x3c>
 8003616:	f04f 33ff 	mov.w	r3, #4294967295
 800361a:	607b      	str	r3, [r7, #4]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	4618      	mov	r0, r3
 8003620:	3708      	adds	r7, #8
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}
 8003626:	bf00      	nop
 8003628:	200000f8 	.word	0x200000f8

0800362c <osThreadNew>:
 800362c:	b580      	push	{r7, lr}
 800362e:	b08e      	sub	sp, #56	; 0x38
 8003630:	af04      	add	r7, sp, #16
 8003632:	60f8      	str	r0, [r7, #12]
 8003634:	60b9      	str	r1, [r7, #8]
 8003636:	607a      	str	r2, [r7, #4]
 8003638:	2300      	movs	r3, #0
 800363a:	613b      	str	r3, [r7, #16]
 800363c:	f3ef 8305 	mrs	r3, IPSR
 8003640:	617b      	str	r3, [r7, #20]
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d17e      	bne.n	8003746 <osThreadNew+0x11a>
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d07b      	beq.n	8003746 <osThreadNew+0x11a>
 800364e:	2380      	movs	r3, #128	; 0x80
 8003650:	623b      	str	r3, [r7, #32]
 8003652:	2318      	movs	r3, #24
 8003654:	61fb      	str	r3, [r7, #28]
 8003656:	2300      	movs	r3, #0
 8003658:	627b      	str	r3, [r7, #36]	; 0x24
 800365a:	f04f 33ff 	mov.w	r3, #4294967295
 800365e:	61bb      	str	r3, [r7, #24]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d045      	beq.n	80036f2 <osThreadNew+0xc6>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d002      	beq.n	8003674 <osThreadNew+0x48>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	627b      	str	r3, [r7, #36]	; 0x24
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	699b      	ldr	r3, [r3, #24]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d002      	beq.n	8003682 <osThreadNew+0x56>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	699b      	ldr	r3, [r3, #24]
 8003680:	61fb      	str	r3, [r7, #28]
 8003682:	69fb      	ldr	r3, [r7, #28]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d008      	beq.n	800369a <osThreadNew+0x6e>
 8003688:	69fb      	ldr	r3, [r7, #28]
 800368a:	2b38      	cmp	r3, #56	; 0x38
 800368c:	d805      	bhi.n	800369a <osThreadNew+0x6e>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	f003 0301 	and.w	r3, r3, #1
 8003696:	2b00      	cmp	r3, #0
 8003698:	d001      	beq.n	800369e <osThreadNew+0x72>
 800369a:	2300      	movs	r3, #0
 800369c:	e054      	b.n	8003748 <osThreadNew+0x11c>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	695b      	ldr	r3, [r3, #20]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d003      	beq.n	80036ae <osThreadNew+0x82>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	695b      	ldr	r3, [r3, #20]
 80036aa:	089b      	lsrs	r3, r3, #2
 80036ac:	623b      	str	r3, [r7, #32]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d00e      	beq.n	80036d4 <osThreadNew+0xa8>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	68db      	ldr	r3, [r3, #12]
 80036ba:	2b5b      	cmp	r3, #91	; 0x5b
 80036bc:	d90a      	bls.n	80036d4 <osThreadNew+0xa8>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	691b      	ldr	r3, [r3, #16]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d006      	beq.n	80036d4 <osThreadNew+0xa8>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	695b      	ldr	r3, [r3, #20]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d002      	beq.n	80036d4 <osThreadNew+0xa8>
 80036ce:	2301      	movs	r3, #1
 80036d0:	61bb      	str	r3, [r7, #24]
 80036d2:	e010      	b.n	80036f6 <osThreadNew+0xca>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d10c      	bne.n	80036f6 <osThreadNew+0xca>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	68db      	ldr	r3, [r3, #12]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d108      	bne.n	80036f6 <osThreadNew+0xca>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	691b      	ldr	r3, [r3, #16]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d104      	bne.n	80036f6 <osThreadNew+0xca>
 80036ec:	2300      	movs	r3, #0
 80036ee:	61bb      	str	r3, [r7, #24]
 80036f0:	e001      	b.n	80036f6 <osThreadNew+0xca>
 80036f2:	2300      	movs	r3, #0
 80036f4:	61bb      	str	r3, [r7, #24]
 80036f6:	69bb      	ldr	r3, [r7, #24]
 80036f8:	2b01      	cmp	r3, #1
 80036fa:	d110      	bne.n	800371e <osThreadNew+0xf2>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	691b      	ldr	r3, [r3, #16]
 8003700:	687a      	ldr	r2, [r7, #4]
 8003702:	6892      	ldr	r2, [r2, #8]
 8003704:	9202      	str	r2, [sp, #8]
 8003706:	9301      	str	r3, [sp, #4]
 8003708:	69fb      	ldr	r3, [r7, #28]
 800370a:	9300      	str	r3, [sp, #0]
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	6a3a      	ldr	r2, [r7, #32]
 8003710:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003712:	68f8      	ldr	r0, [r7, #12]
 8003714:	f000 fe0c 	bl	8004330 <xTaskCreateStatic>
 8003718:	4603      	mov	r3, r0
 800371a:	613b      	str	r3, [r7, #16]
 800371c:	e013      	b.n	8003746 <osThreadNew+0x11a>
 800371e:	69bb      	ldr	r3, [r7, #24]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d110      	bne.n	8003746 <osThreadNew+0x11a>
 8003724:	6a3b      	ldr	r3, [r7, #32]
 8003726:	b29a      	uxth	r2, r3
 8003728:	f107 0310 	add.w	r3, r7, #16
 800372c:	9301      	str	r3, [sp, #4]
 800372e:	69fb      	ldr	r3, [r7, #28]
 8003730:	9300      	str	r3, [sp, #0]
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003736:	68f8      	ldr	r0, [r7, #12]
 8003738:	f000 fe57 	bl	80043ea <xTaskCreate>
 800373c:	4603      	mov	r3, r0
 800373e:	2b01      	cmp	r3, #1
 8003740:	d001      	beq.n	8003746 <osThreadNew+0x11a>
 8003742:	2300      	movs	r3, #0
 8003744:	613b      	str	r3, [r7, #16]
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	4618      	mov	r0, r3
 800374a:	3728      	adds	r7, #40	; 0x28
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}

08003750 <osDelay>:
 8003750:	b580      	push	{r7, lr}
 8003752:	b084      	sub	sp, #16
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
 8003758:	f3ef 8305 	mrs	r3, IPSR
 800375c:	60bb      	str	r3, [r7, #8]
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d003      	beq.n	800376c <osDelay+0x1c>
 8003764:	f06f 0305 	mvn.w	r3, #5
 8003768:	60fb      	str	r3, [r7, #12]
 800376a:	e007      	b.n	800377c <osDelay+0x2c>
 800376c:	2300      	movs	r3, #0
 800376e:	60fb      	str	r3, [r7, #12]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d002      	beq.n	800377c <osDelay+0x2c>
 8003776:	6878      	ldr	r0, [r7, #4]
 8003778:	f000 ff7c 	bl	8004674 <vTaskDelay>
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	4618      	mov	r0, r3
 8003780:	3710      	adds	r7, #16
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}
	...

08003788 <vApplicationGetIdleTaskMemory>:
 8003788:	b480      	push	{r7}
 800378a:	b085      	sub	sp, #20
 800378c:	af00      	add	r7, sp, #0
 800378e:	60f8      	str	r0, [r7, #12]
 8003790:	60b9      	str	r1, [r7, #8]
 8003792:	607a      	str	r2, [r7, #4]
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	4a07      	ldr	r2, [pc, #28]	; (80037b4 <vApplicationGetIdleTaskMemory+0x2c>)
 8003798:	601a      	str	r2, [r3, #0]
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	4a06      	ldr	r2, [pc, #24]	; (80037b8 <vApplicationGetIdleTaskMemory+0x30>)
 800379e:	601a      	str	r2, [r3, #0]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2280      	movs	r2, #128	; 0x80
 80037a4:	601a      	str	r2, [r3, #0]
 80037a6:	bf00      	nop
 80037a8:	3714      	adds	r7, #20
 80037aa:	46bd      	mov	sp, r7
 80037ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b0:	4770      	bx	lr
 80037b2:	bf00      	nop
 80037b4:	200000fc 	.word	0x200000fc
 80037b8:	20000158 	.word	0x20000158

080037bc <vApplicationGetTimerTaskMemory>:
 80037bc:	b480      	push	{r7}
 80037be:	b085      	sub	sp, #20
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	60f8      	str	r0, [r7, #12]
 80037c4:	60b9      	str	r1, [r7, #8]
 80037c6:	607a      	str	r2, [r7, #4]
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	4a07      	ldr	r2, [pc, #28]	; (80037e8 <vApplicationGetTimerTaskMemory+0x2c>)
 80037cc:	601a      	str	r2, [r3, #0]
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	4a06      	ldr	r2, [pc, #24]	; (80037ec <vApplicationGetTimerTaskMemory+0x30>)
 80037d2:	601a      	str	r2, [r3, #0]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80037da:	601a      	str	r2, [r3, #0]
 80037dc:	bf00      	nop
 80037de:	3714      	adds	r7, #20
 80037e0:	46bd      	mov	sp, r7
 80037e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e6:	4770      	bx	lr
 80037e8:	20000358 	.word	0x20000358
 80037ec:	200003b4 	.word	0x200003b4

080037f0 <vListInitialise>:
 80037f0:	b480      	push	{r7}
 80037f2:	b083      	sub	sp, #12
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	f103 0208 	add.w	r2, r3, #8
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	605a      	str	r2, [r3, #4]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	f04f 32ff 	mov.w	r2, #4294967295
 8003808:	609a      	str	r2, [r3, #8]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	f103 0208 	add.w	r2, r3, #8
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	60da      	str	r2, [r3, #12]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	f103 0208 	add.w	r2, r3, #8
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	611a      	str	r2, [r3, #16]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2200      	movs	r2, #0
 8003822:	601a      	str	r2, [r3, #0]
 8003824:	bf00      	nop
 8003826:	370c      	adds	r7, #12
 8003828:	46bd      	mov	sp, r7
 800382a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382e:	4770      	bx	lr

08003830 <vListInitialiseItem>:
 8003830:	b480      	push	{r7}
 8003832:	b083      	sub	sp, #12
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2200      	movs	r2, #0
 800383c:	611a      	str	r2, [r3, #16]
 800383e:	bf00      	nop
 8003840:	370c      	adds	r7, #12
 8003842:	46bd      	mov	sp, r7
 8003844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003848:	4770      	bx	lr

0800384a <vListInsertEnd>:
 800384a:	b480      	push	{r7}
 800384c:	b085      	sub	sp, #20
 800384e:	af00      	add	r7, sp, #0
 8003850:	6078      	str	r0, [r7, #4]
 8003852:	6039      	str	r1, [r7, #0]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	60fb      	str	r3, [r7, #12]
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	68fa      	ldr	r2, [r7, #12]
 800385e:	605a      	str	r2, [r3, #4]
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	689a      	ldr	r2, [r3, #8]
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	609a      	str	r2, [r3, #8]
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	683a      	ldr	r2, [r7, #0]
 800386e:	605a      	str	r2, [r3, #4]
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	683a      	ldr	r2, [r7, #0]
 8003874:	609a      	str	r2, [r3, #8]
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	687a      	ldr	r2, [r7, #4]
 800387a:	611a      	str	r2, [r3, #16]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	1c5a      	adds	r2, r3, #1
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	601a      	str	r2, [r3, #0]
 8003886:	bf00      	nop
 8003888:	3714      	adds	r7, #20
 800388a:	46bd      	mov	sp, r7
 800388c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003890:	4770      	bx	lr

08003892 <vListInsert>:
 8003892:	b480      	push	{r7}
 8003894:	b085      	sub	sp, #20
 8003896:	af00      	add	r7, sp, #0
 8003898:	6078      	str	r0, [r7, #4]
 800389a:	6039      	str	r1, [r7, #0]
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	60bb      	str	r3, [r7, #8]
 80038a2:	68bb      	ldr	r3, [r7, #8]
 80038a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038a8:	d103      	bne.n	80038b2 <vListInsert+0x20>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	691b      	ldr	r3, [r3, #16]
 80038ae:	60fb      	str	r3, [r7, #12]
 80038b0:	e00c      	b.n	80038cc <vListInsert+0x3a>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	3308      	adds	r3, #8
 80038b6:	60fb      	str	r3, [r7, #12]
 80038b8:	e002      	b.n	80038c0 <vListInsert+0x2e>
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	60fb      	str	r3, [r7, #12]
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	68ba      	ldr	r2, [r7, #8]
 80038c8:	429a      	cmp	r2, r3
 80038ca:	d2f6      	bcs.n	80038ba <vListInsert+0x28>
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	685a      	ldr	r2, [r3, #4]
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	605a      	str	r2, [r3, #4]
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	683a      	ldr	r2, [r7, #0]
 80038da:	609a      	str	r2, [r3, #8]
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	68fa      	ldr	r2, [r7, #12]
 80038e0:	609a      	str	r2, [r3, #8]
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	683a      	ldr	r2, [r7, #0]
 80038e6:	605a      	str	r2, [r3, #4]
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	687a      	ldr	r2, [r7, #4]
 80038ec:	611a      	str	r2, [r3, #16]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	1c5a      	adds	r2, r3, #1
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	601a      	str	r2, [r3, #0]
 80038f8:	bf00      	nop
 80038fa:	3714      	adds	r7, #20
 80038fc:	46bd      	mov	sp, r7
 80038fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003902:	4770      	bx	lr

08003904 <uxListRemove>:
 8003904:	b480      	push	{r7}
 8003906:	b085      	sub	sp, #20
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	691b      	ldr	r3, [r3, #16]
 8003910:	60fb      	str	r3, [r7, #12]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	687a      	ldr	r2, [r7, #4]
 8003918:	6892      	ldr	r2, [r2, #8]
 800391a:	609a      	str	r2, [r3, #8]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	687a      	ldr	r2, [r7, #4]
 8003922:	6852      	ldr	r2, [r2, #4]
 8003924:	605a      	str	r2, [r3, #4]
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	687a      	ldr	r2, [r7, #4]
 800392c:	429a      	cmp	r2, r3
 800392e:	d103      	bne.n	8003938 <uxListRemove+0x34>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	689a      	ldr	r2, [r3, #8]
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	605a      	str	r2, [r3, #4]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2200      	movs	r2, #0
 800393c:	611a      	str	r2, [r3, #16]
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	1e5a      	subs	r2, r3, #1
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	601a      	str	r2, [r3, #0]
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4618      	mov	r0, r3
 800394e:	3714      	adds	r7, #20
 8003950:	46bd      	mov	sp, r7
 8003952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003956:	4770      	bx	lr

08003958 <xQueueGenericReset>:
 8003958:	b580      	push	{r7, lr}
 800395a:	b084      	sub	sp, #16
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
 8003960:	6039      	str	r1, [r7, #0]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	60fb      	str	r3, [r7, #12]
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d10a      	bne.n	8003982 <xQueueGenericReset+0x2a>
 800396c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003970:	f383 8811 	msr	BASEPRI, r3
 8003974:	f3bf 8f6f 	isb	sy
 8003978:	f3bf 8f4f 	dsb	sy
 800397c:	60bb      	str	r3, [r7, #8]
 800397e:	bf00      	nop
 8003980:	e7fe      	b.n	8003980 <xQueueGenericReset+0x28>
 8003982:	f002 f84f 	bl	8005a24 <vPortEnterCritical>
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681a      	ldr	r2, [r3, #0]
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800398e:	68f9      	ldr	r1, [r7, #12]
 8003990:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003992:	fb01 f303 	mul.w	r3, r1, r3
 8003996:	441a      	add	r2, r3
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	609a      	str	r2, [r3, #8]
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	2200      	movs	r2, #0
 80039a0:	639a      	str	r2, [r3, #56]	; 0x38
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681a      	ldr	r2, [r3, #0]
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	605a      	str	r2, [r3, #4]
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681a      	ldr	r2, [r3, #0]
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039b2:	3b01      	subs	r3, #1
 80039b4:	68f9      	ldr	r1, [r7, #12]
 80039b6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80039b8:	fb01 f303 	mul.w	r3, r1, r3
 80039bc:	441a      	add	r2, r3
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	60da      	str	r2, [r3, #12]
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	22ff      	movs	r2, #255	; 0xff
 80039c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	22ff      	movs	r2, #255	; 0xff
 80039ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d114      	bne.n	8003a02 <xQueueGenericReset+0xaa>
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	691b      	ldr	r3, [r3, #16]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d01a      	beq.n	8003a16 <xQueueGenericReset+0xbe>
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	3310      	adds	r3, #16
 80039e4:	4618      	mov	r0, r3
 80039e6:	f001 f903 	bl	8004bf0 <xTaskRemoveFromEventList>
 80039ea:	4603      	mov	r3, r0
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d012      	beq.n	8003a16 <xQueueGenericReset+0xbe>
 80039f0:	4b0c      	ldr	r3, [pc, #48]	; (8003a24 <xQueueGenericReset+0xcc>)
 80039f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039f6:	601a      	str	r2, [r3, #0]
 80039f8:	f3bf 8f4f 	dsb	sy
 80039fc:	f3bf 8f6f 	isb	sy
 8003a00:	e009      	b.n	8003a16 <xQueueGenericReset+0xbe>
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	3310      	adds	r3, #16
 8003a06:	4618      	mov	r0, r3
 8003a08:	f7ff fef2 	bl	80037f0 <vListInitialise>
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	3324      	adds	r3, #36	; 0x24
 8003a10:	4618      	mov	r0, r3
 8003a12:	f7ff feed 	bl	80037f0 <vListInitialise>
 8003a16:	f002 f835 	bl	8005a84 <vPortExitCritical>
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	3710      	adds	r7, #16
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bd80      	pop	{r7, pc}
 8003a24:	e000ed04 	.word	0xe000ed04

08003a28 <xQueueGenericCreateStatic>:
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b08e      	sub	sp, #56	; 0x38
 8003a2c:	af02      	add	r7, sp, #8
 8003a2e:	60f8      	str	r0, [r7, #12]
 8003a30:	60b9      	str	r1, [r7, #8]
 8003a32:	607a      	str	r2, [r7, #4]
 8003a34:	603b      	str	r3, [r7, #0]
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d10a      	bne.n	8003a52 <xQueueGenericCreateStatic+0x2a>
 8003a3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a40:	f383 8811 	msr	BASEPRI, r3
 8003a44:	f3bf 8f6f 	isb	sy
 8003a48:	f3bf 8f4f 	dsb	sy
 8003a4c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a4e:	bf00      	nop
 8003a50:	e7fe      	b.n	8003a50 <xQueueGenericCreateStatic+0x28>
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d10a      	bne.n	8003a6e <xQueueGenericCreateStatic+0x46>
 8003a58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a5c:	f383 8811 	msr	BASEPRI, r3
 8003a60:	f3bf 8f6f 	isb	sy
 8003a64:	f3bf 8f4f 	dsb	sy
 8003a68:	627b      	str	r3, [r7, #36]	; 0x24
 8003a6a:	bf00      	nop
 8003a6c:	e7fe      	b.n	8003a6c <xQueueGenericCreateStatic+0x44>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d002      	beq.n	8003a7a <xQueueGenericCreateStatic+0x52>
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d001      	beq.n	8003a7e <xQueueGenericCreateStatic+0x56>
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e000      	b.n	8003a80 <xQueueGenericCreateStatic+0x58>
 8003a7e:	2300      	movs	r3, #0
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d10a      	bne.n	8003a9a <xQueueGenericCreateStatic+0x72>
 8003a84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a88:	f383 8811 	msr	BASEPRI, r3
 8003a8c:	f3bf 8f6f 	isb	sy
 8003a90:	f3bf 8f4f 	dsb	sy
 8003a94:	623b      	str	r3, [r7, #32]
 8003a96:	bf00      	nop
 8003a98:	e7fe      	b.n	8003a98 <xQueueGenericCreateStatic+0x70>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d102      	bne.n	8003aa6 <xQueueGenericCreateStatic+0x7e>
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d101      	bne.n	8003aaa <xQueueGenericCreateStatic+0x82>
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e000      	b.n	8003aac <xQueueGenericCreateStatic+0x84>
 8003aaa:	2300      	movs	r3, #0
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d10a      	bne.n	8003ac6 <xQueueGenericCreateStatic+0x9e>
 8003ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ab4:	f383 8811 	msr	BASEPRI, r3
 8003ab8:	f3bf 8f6f 	isb	sy
 8003abc:	f3bf 8f4f 	dsb	sy
 8003ac0:	61fb      	str	r3, [r7, #28]
 8003ac2:	bf00      	nop
 8003ac4:	e7fe      	b.n	8003ac4 <xQueueGenericCreateStatic+0x9c>
 8003ac6:	2350      	movs	r3, #80	; 0x50
 8003ac8:	617b      	str	r3, [r7, #20]
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	2b50      	cmp	r3, #80	; 0x50
 8003ace:	d00a      	beq.n	8003ae6 <xQueueGenericCreateStatic+0xbe>
 8003ad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ad4:	f383 8811 	msr	BASEPRI, r3
 8003ad8:	f3bf 8f6f 	isb	sy
 8003adc:	f3bf 8f4f 	dsb	sy
 8003ae0:	61bb      	str	r3, [r7, #24]
 8003ae2:	bf00      	nop
 8003ae4:	e7fe      	b.n	8003ae4 <xQueueGenericCreateStatic+0xbc>
 8003ae6:	697b      	ldr	r3, [r7, #20]
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003aec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d00d      	beq.n	8003b0e <xQueueGenericCreateStatic+0xe6>
 8003af2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003af4:	2201      	movs	r2, #1
 8003af6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003afa:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003afe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b00:	9300      	str	r3, [sp, #0]
 8003b02:	4613      	mov	r3, r2
 8003b04:	687a      	ldr	r2, [r7, #4]
 8003b06:	68b9      	ldr	r1, [r7, #8]
 8003b08:	68f8      	ldr	r0, [r7, #12]
 8003b0a:	f000 f805 	bl	8003b18 <prvInitialiseNewQueue>
 8003b0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b10:	4618      	mov	r0, r3
 8003b12:	3730      	adds	r7, #48	; 0x30
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bd80      	pop	{r7, pc}

08003b18 <prvInitialiseNewQueue>:
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b084      	sub	sp, #16
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	60f8      	str	r0, [r7, #12]
 8003b20:	60b9      	str	r1, [r7, #8]
 8003b22:	607a      	str	r2, [r7, #4]
 8003b24:	70fb      	strb	r3, [r7, #3]
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d103      	bne.n	8003b34 <prvInitialiseNewQueue+0x1c>
 8003b2c:	69bb      	ldr	r3, [r7, #24]
 8003b2e:	69ba      	ldr	r2, [r7, #24]
 8003b30:	601a      	str	r2, [r3, #0]
 8003b32:	e002      	b.n	8003b3a <prvInitialiseNewQueue+0x22>
 8003b34:	69bb      	ldr	r3, [r7, #24]
 8003b36:	687a      	ldr	r2, [r7, #4]
 8003b38:	601a      	str	r2, [r3, #0]
 8003b3a:	69bb      	ldr	r3, [r7, #24]
 8003b3c:	68fa      	ldr	r2, [r7, #12]
 8003b3e:	63da      	str	r2, [r3, #60]	; 0x3c
 8003b40:	69bb      	ldr	r3, [r7, #24]
 8003b42:	68ba      	ldr	r2, [r7, #8]
 8003b44:	641a      	str	r2, [r3, #64]	; 0x40
 8003b46:	2101      	movs	r1, #1
 8003b48:	69b8      	ldr	r0, [r7, #24]
 8003b4a:	f7ff ff05 	bl	8003958 <xQueueGenericReset>
 8003b4e:	69bb      	ldr	r3, [r7, #24]
 8003b50:	78fa      	ldrb	r2, [r7, #3]
 8003b52:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 8003b56:	bf00      	nop
 8003b58:	3710      	adds	r7, #16
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}
	...

08003b60 <xQueueGenericSend>:
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b08e      	sub	sp, #56	; 0x38
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	60f8      	str	r0, [r7, #12]
 8003b68:	60b9      	str	r1, [r7, #8]
 8003b6a:	607a      	str	r2, [r7, #4]
 8003b6c:	603b      	str	r3, [r7, #0]
 8003b6e:	2300      	movs	r3, #0
 8003b70:	637b      	str	r3, [r7, #52]	; 0x34
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	633b      	str	r3, [r7, #48]	; 0x30
 8003b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d10a      	bne.n	8003b92 <xQueueGenericSend+0x32>
 8003b7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b80:	f383 8811 	msr	BASEPRI, r3
 8003b84:	f3bf 8f6f 	isb	sy
 8003b88:	f3bf 8f4f 	dsb	sy
 8003b8c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b8e:	bf00      	nop
 8003b90:	e7fe      	b.n	8003b90 <xQueueGenericSend+0x30>
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d103      	bne.n	8003ba0 <xQueueGenericSend+0x40>
 8003b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d101      	bne.n	8003ba4 <xQueueGenericSend+0x44>
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	e000      	b.n	8003ba6 <xQueueGenericSend+0x46>
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d10a      	bne.n	8003bc0 <xQueueGenericSend+0x60>
 8003baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bae:	f383 8811 	msr	BASEPRI, r3
 8003bb2:	f3bf 8f6f 	isb	sy
 8003bb6:	f3bf 8f4f 	dsb	sy
 8003bba:	627b      	str	r3, [r7, #36]	; 0x24
 8003bbc:	bf00      	nop
 8003bbe:	e7fe      	b.n	8003bbe <xQueueGenericSend+0x5e>
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	2b02      	cmp	r3, #2
 8003bc4:	d103      	bne.n	8003bce <xQueueGenericSend+0x6e>
 8003bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bca:	2b01      	cmp	r3, #1
 8003bcc:	d101      	bne.n	8003bd2 <xQueueGenericSend+0x72>
 8003bce:	2301      	movs	r3, #1
 8003bd0:	e000      	b.n	8003bd4 <xQueueGenericSend+0x74>
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d10a      	bne.n	8003bee <xQueueGenericSend+0x8e>
 8003bd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bdc:	f383 8811 	msr	BASEPRI, r3
 8003be0:	f3bf 8f6f 	isb	sy
 8003be4:	f3bf 8f4f 	dsb	sy
 8003be8:	623b      	str	r3, [r7, #32]
 8003bea:	bf00      	nop
 8003bec:	e7fe      	b.n	8003bec <xQueueGenericSend+0x8c>
 8003bee:	f001 f9bd 	bl	8004f6c <xTaskGetSchedulerState>
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d102      	bne.n	8003bfe <xQueueGenericSend+0x9e>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d101      	bne.n	8003c02 <xQueueGenericSend+0xa2>
 8003bfe:	2301      	movs	r3, #1
 8003c00:	e000      	b.n	8003c04 <xQueueGenericSend+0xa4>
 8003c02:	2300      	movs	r3, #0
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d10a      	bne.n	8003c1e <xQueueGenericSend+0xbe>
 8003c08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c0c:	f383 8811 	msr	BASEPRI, r3
 8003c10:	f3bf 8f6f 	isb	sy
 8003c14:	f3bf 8f4f 	dsb	sy
 8003c18:	61fb      	str	r3, [r7, #28]
 8003c1a:	bf00      	nop
 8003c1c:	e7fe      	b.n	8003c1c <xQueueGenericSend+0xbc>
 8003c1e:	f001 ff01 	bl	8005a24 <vPortEnterCritical>
 8003c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c2a:	429a      	cmp	r2, r3
 8003c2c:	d302      	bcc.n	8003c34 <xQueueGenericSend+0xd4>
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	2b02      	cmp	r3, #2
 8003c32:	d129      	bne.n	8003c88 <xQueueGenericSend+0x128>
 8003c34:	683a      	ldr	r2, [r7, #0]
 8003c36:	68b9      	ldr	r1, [r7, #8]
 8003c38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003c3a:	f000 fa0b 	bl	8004054 <prvCopyDataToQueue>
 8003c3e:	62f8      	str	r0, [r7, #44]	; 0x2c
 8003c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d010      	beq.n	8003c6a <xQueueGenericSend+0x10a>
 8003c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c4a:	3324      	adds	r3, #36	; 0x24
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	f000 ffcf 	bl	8004bf0 <xTaskRemoveFromEventList>
 8003c52:	4603      	mov	r3, r0
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d013      	beq.n	8003c80 <xQueueGenericSend+0x120>
 8003c58:	4b3f      	ldr	r3, [pc, #252]	; (8003d58 <xQueueGenericSend+0x1f8>)
 8003c5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c5e:	601a      	str	r2, [r3, #0]
 8003c60:	f3bf 8f4f 	dsb	sy
 8003c64:	f3bf 8f6f 	isb	sy
 8003c68:	e00a      	b.n	8003c80 <xQueueGenericSend+0x120>
 8003c6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d007      	beq.n	8003c80 <xQueueGenericSend+0x120>
 8003c70:	4b39      	ldr	r3, [pc, #228]	; (8003d58 <xQueueGenericSend+0x1f8>)
 8003c72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c76:	601a      	str	r2, [r3, #0]
 8003c78:	f3bf 8f4f 	dsb	sy
 8003c7c:	f3bf 8f6f 	isb	sy
 8003c80:	f001 ff00 	bl	8005a84 <vPortExitCritical>
 8003c84:	2301      	movs	r3, #1
 8003c86:	e063      	b.n	8003d50 <xQueueGenericSend+0x1f0>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d103      	bne.n	8003c96 <xQueueGenericSend+0x136>
 8003c8e:	f001 fef9 	bl	8005a84 <vPortExitCritical>
 8003c92:	2300      	movs	r3, #0
 8003c94:	e05c      	b.n	8003d50 <xQueueGenericSend+0x1f0>
 8003c96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d106      	bne.n	8003caa <xQueueGenericSend+0x14a>
 8003c9c:	f107 0314 	add.w	r3, r7, #20
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	f001 f809 	bl	8004cb8 <vTaskInternalSetTimeOutState>
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	637b      	str	r3, [r7, #52]	; 0x34
 8003caa:	f001 feeb 	bl	8005a84 <vPortExitCritical>
 8003cae:	f000 fd7b 	bl	80047a8 <vTaskSuspendAll>
 8003cb2:	f001 feb7 	bl	8005a24 <vPortEnterCritical>
 8003cb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cb8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003cbc:	b25b      	sxtb	r3, r3
 8003cbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cc2:	d103      	bne.n	8003ccc <xQueueGenericSend+0x16c>
 8003cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003cd2:	b25b      	sxtb	r3, r3
 8003cd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cd8:	d103      	bne.n	8003ce2 <xQueueGenericSend+0x182>
 8003cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cdc:	2200      	movs	r2, #0
 8003cde:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003ce2:	f001 fecf 	bl	8005a84 <vPortExitCritical>
 8003ce6:	1d3a      	adds	r2, r7, #4
 8003ce8:	f107 0314 	add.w	r3, r7, #20
 8003cec:	4611      	mov	r1, r2
 8003cee:	4618      	mov	r0, r3
 8003cf0:	f000 fff8 	bl	8004ce4 <xTaskCheckForTimeOut>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d124      	bne.n	8003d44 <xQueueGenericSend+0x1e4>
 8003cfa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003cfc:	f000 faa2 	bl	8004244 <prvIsQueueFull>
 8003d00:	4603      	mov	r3, r0
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d018      	beq.n	8003d38 <xQueueGenericSend+0x1d8>
 8003d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d08:	3310      	adds	r3, #16
 8003d0a:	687a      	ldr	r2, [r7, #4]
 8003d0c:	4611      	mov	r1, r2
 8003d0e:	4618      	mov	r0, r3
 8003d10:	f000 ff1e 	bl	8004b50 <vTaskPlaceOnEventList>
 8003d14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003d16:	f000 fa2d 	bl	8004174 <prvUnlockQueue>
 8003d1a:	f000 fd53 	bl	80047c4 <xTaskResumeAll>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	f47f af7c 	bne.w	8003c1e <xQueueGenericSend+0xbe>
 8003d26:	4b0c      	ldr	r3, [pc, #48]	; (8003d58 <xQueueGenericSend+0x1f8>)
 8003d28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d2c:	601a      	str	r2, [r3, #0]
 8003d2e:	f3bf 8f4f 	dsb	sy
 8003d32:	f3bf 8f6f 	isb	sy
 8003d36:	e772      	b.n	8003c1e <xQueueGenericSend+0xbe>
 8003d38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003d3a:	f000 fa1b 	bl	8004174 <prvUnlockQueue>
 8003d3e:	f000 fd41 	bl	80047c4 <xTaskResumeAll>
 8003d42:	e76c      	b.n	8003c1e <xQueueGenericSend+0xbe>
 8003d44:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003d46:	f000 fa15 	bl	8004174 <prvUnlockQueue>
 8003d4a:	f000 fd3b 	bl	80047c4 <xTaskResumeAll>
 8003d4e:	2300      	movs	r3, #0
 8003d50:	4618      	mov	r0, r3
 8003d52:	3738      	adds	r7, #56	; 0x38
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bd80      	pop	{r7, pc}
 8003d58:	e000ed04 	.word	0xe000ed04

08003d5c <xQueueGenericSendFromISR>:
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b090      	sub	sp, #64	; 0x40
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	60f8      	str	r0, [r7, #12]
 8003d64:	60b9      	str	r1, [r7, #8]
 8003d66:	607a      	str	r2, [r7, #4]
 8003d68:	603b      	str	r3, [r7, #0]
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	63bb      	str	r3, [r7, #56]	; 0x38
 8003d6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d10a      	bne.n	8003d8a <xQueueGenericSendFromISR+0x2e>
 8003d74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d78:	f383 8811 	msr	BASEPRI, r3
 8003d7c:	f3bf 8f6f 	isb	sy
 8003d80:	f3bf 8f4f 	dsb	sy
 8003d84:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d86:	bf00      	nop
 8003d88:	e7fe      	b.n	8003d88 <xQueueGenericSendFromISR+0x2c>
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d103      	bne.n	8003d98 <xQueueGenericSendFromISR+0x3c>
 8003d90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d101      	bne.n	8003d9c <xQueueGenericSendFromISR+0x40>
 8003d98:	2301      	movs	r3, #1
 8003d9a:	e000      	b.n	8003d9e <xQueueGenericSendFromISR+0x42>
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d10a      	bne.n	8003db8 <xQueueGenericSendFromISR+0x5c>
 8003da2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003da6:	f383 8811 	msr	BASEPRI, r3
 8003daa:	f3bf 8f6f 	isb	sy
 8003dae:	f3bf 8f4f 	dsb	sy
 8003db2:	627b      	str	r3, [r7, #36]	; 0x24
 8003db4:	bf00      	nop
 8003db6:	e7fe      	b.n	8003db6 <xQueueGenericSendFromISR+0x5a>
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	2b02      	cmp	r3, #2
 8003dbc:	d103      	bne.n	8003dc6 <xQueueGenericSendFromISR+0x6a>
 8003dbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dc2:	2b01      	cmp	r3, #1
 8003dc4:	d101      	bne.n	8003dca <xQueueGenericSendFromISR+0x6e>
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	e000      	b.n	8003dcc <xQueueGenericSendFromISR+0x70>
 8003dca:	2300      	movs	r3, #0
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d10a      	bne.n	8003de6 <xQueueGenericSendFromISR+0x8a>
 8003dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dd4:	f383 8811 	msr	BASEPRI, r3
 8003dd8:	f3bf 8f6f 	isb	sy
 8003ddc:	f3bf 8f4f 	dsb	sy
 8003de0:	623b      	str	r3, [r7, #32]
 8003de2:	bf00      	nop
 8003de4:	e7fe      	b.n	8003de4 <xQueueGenericSendFromISR+0x88>
 8003de6:	f001 feff 	bl	8005be8 <vPortValidateInterruptPriority>
 8003dea:	f3ef 8211 	mrs	r2, BASEPRI
 8003dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003df2:	f383 8811 	msr	BASEPRI, r3
 8003df6:	f3bf 8f6f 	isb	sy
 8003dfa:	f3bf 8f4f 	dsb	sy
 8003dfe:	61fa      	str	r2, [r7, #28]
 8003e00:	61bb      	str	r3, [r7, #24]
 8003e02:	69fb      	ldr	r3, [r7, #28]
 8003e04:	637b      	str	r3, [r7, #52]	; 0x34
 8003e06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e0e:	429a      	cmp	r2, r3
 8003e10:	d302      	bcc.n	8003e18 <xQueueGenericSendFromISR+0xbc>
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	2b02      	cmp	r3, #2
 8003e16:	d12f      	bne.n	8003e78 <xQueueGenericSendFromISR+0x11c>
 8003e18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e1a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003e1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003e22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e26:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e28:	683a      	ldr	r2, [r7, #0]
 8003e2a:	68b9      	ldr	r1, [r7, #8]
 8003e2c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003e2e:	f000 f911 	bl	8004054 <prvCopyDataToQueue>
 8003e32:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003e36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e3a:	d112      	bne.n	8003e62 <xQueueGenericSendFromISR+0x106>
 8003e3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d016      	beq.n	8003e72 <xQueueGenericSendFromISR+0x116>
 8003e44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e46:	3324      	adds	r3, #36	; 0x24
 8003e48:	4618      	mov	r0, r3
 8003e4a:	f000 fed1 	bl	8004bf0 <xTaskRemoveFromEventList>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d00e      	beq.n	8003e72 <xQueueGenericSendFromISR+0x116>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d00b      	beq.n	8003e72 <xQueueGenericSendFromISR+0x116>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2201      	movs	r2, #1
 8003e5e:	601a      	str	r2, [r3, #0]
 8003e60:	e007      	b.n	8003e72 <xQueueGenericSendFromISR+0x116>
 8003e62:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003e66:	3301      	adds	r3, #1
 8003e68:	b2db      	uxtb	r3, r3
 8003e6a:	b25a      	sxtb	r2, r3
 8003e6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003e72:	2301      	movs	r3, #1
 8003e74:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e76:	e001      	b.n	8003e7c <xQueueGenericSendFromISR+0x120>
 8003e78:	2300      	movs	r3, #0
 8003e7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e7e:	617b      	str	r3, [r7, #20]
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	f383 8811 	msr	BASEPRI, r3
 8003e86:	bf00      	nop
 8003e88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	3740      	adds	r7, #64	; 0x40
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd80      	pop	{r7, pc}
	...

08003e94 <xQueueReceive>:
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b08c      	sub	sp, #48	; 0x30
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	60f8      	str	r0, [r7, #12]
 8003e9c:	60b9      	str	r1, [r7, #8]
 8003e9e:	607a      	str	r2, [r7, #4]
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d10a      	bne.n	8003ec4 <xQueueReceive+0x30>
 8003eae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eb2:	f383 8811 	msr	BASEPRI, r3
 8003eb6:	f3bf 8f6f 	isb	sy
 8003eba:	f3bf 8f4f 	dsb	sy
 8003ebe:	623b      	str	r3, [r7, #32]
 8003ec0:	bf00      	nop
 8003ec2:	e7fe      	b.n	8003ec2 <xQueueReceive+0x2e>
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d103      	bne.n	8003ed2 <xQueueReceive+0x3e>
 8003eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d101      	bne.n	8003ed6 <xQueueReceive+0x42>
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	e000      	b.n	8003ed8 <xQueueReceive+0x44>
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d10a      	bne.n	8003ef2 <xQueueReceive+0x5e>
 8003edc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ee0:	f383 8811 	msr	BASEPRI, r3
 8003ee4:	f3bf 8f6f 	isb	sy
 8003ee8:	f3bf 8f4f 	dsb	sy
 8003eec:	61fb      	str	r3, [r7, #28]
 8003eee:	bf00      	nop
 8003ef0:	e7fe      	b.n	8003ef0 <xQueueReceive+0x5c>
 8003ef2:	f001 f83b 	bl	8004f6c <xTaskGetSchedulerState>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d102      	bne.n	8003f02 <xQueueReceive+0x6e>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d101      	bne.n	8003f06 <xQueueReceive+0x72>
 8003f02:	2301      	movs	r3, #1
 8003f04:	e000      	b.n	8003f08 <xQueueReceive+0x74>
 8003f06:	2300      	movs	r3, #0
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d10a      	bne.n	8003f22 <xQueueReceive+0x8e>
 8003f0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f10:	f383 8811 	msr	BASEPRI, r3
 8003f14:	f3bf 8f6f 	isb	sy
 8003f18:	f3bf 8f4f 	dsb	sy
 8003f1c:	61bb      	str	r3, [r7, #24]
 8003f1e:	bf00      	nop
 8003f20:	e7fe      	b.n	8003f20 <xQueueReceive+0x8c>
 8003f22:	f001 fd7f 	bl	8005a24 <vPortEnterCritical>
 8003f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f2a:	627b      	str	r3, [r7, #36]	; 0x24
 8003f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d01f      	beq.n	8003f72 <xQueueReceive+0xde>
 8003f32:	68b9      	ldr	r1, [r7, #8]
 8003f34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f36:	f000 f8f7 	bl	8004128 <prvCopyDataFromQueue>
 8003f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f3c:	1e5a      	subs	r2, r3, #1
 8003f3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f40:	639a      	str	r2, [r3, #56]	; 0x38
 8003f42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f44:	691b      	ldr	r3, [r3, #16]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d00f      	beq.n	8003f6a <xQueueReceive+0xd6>
 8003f4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f4c:	3310      	adds	r3, #16
 8003f4e:	4618      	mov	r0, r3
 8003f50:	f000 fe4e 	bl	8004bf0 <xTaskRemoveFromEventList>
 8003f54:	4603      	mov	r3, r0
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d007      	beq.n	8003f6a <xQueueReceive+0xd6>
 8003f5a:	4b3d      	ldr	r3, [pc, #244]	; (8004050 <xQueueReceive+0x1bc>)
 8003f5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f60:	601a      	str	r2, [r3, #0]
 8003f62:	f3bf 8f4f 	dsb	sy
 8003f66:	f3bf 8f6f 	isb	sy
 8003f6a:	f001 fd8b 	bl	8005a84 <vPortExitCritical>
 8003f6e:	2301      	movs	r3, #1
 8003f70:	e069      	b.n	8004046 <xQueueReceive+0x1b2>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d103      	bne.n	8003f80 <xQueueReceive+0xec>
 8003f78:	f001 fd84 	bl	8005a84 <vPortExitCritical>
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	e062      	b.n	8004046 <xQueueReceive+0x1b2>
 8003f80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d106      	bne.n	8003f94 <xQueueReceive+0x100>
 8003f86:	f107 0310 	add.w	r3, r7, #16
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	f000 fe94 	bl	8004cb8 <vTaskInternalSetTimeOutState>
 8003f90:	2301      	movs	r3, #1
 8003f92:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f94:	f001 fd76 	bl	8005a84 <vPortExitCritical>
 8003f98:	f000 fc06 	bl	80047a8 <vTaskSuspendAll>
 8003f9c:	f001 fd42 	bl	8005a24 <vPortEnterCritical>
 8003fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fa2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003fa6:	b25b      	sxtb	r3, r3
 8003fa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fac:	d103      	bne.n	8003fb6 <xQueueReceive+0x122>
 8003fae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fb8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003fbc:	b25b      	sxtb	r3, r3
 8003fbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fc2:	d103      	bne.n	8003fcc <xQueueReceive+0x138>
 8003fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003fcc:	f001 fd5a 	bl	8005a84 <vPortExitCritical>
 8003fd0:	1d3a      	adds	r2, r7, #4
 8003fd2:	f107 0310 	add.w	r3, r7, #16
 8003fd6:	4611      	mov	r1, r2
 8003fd8:	4618      	mov	r0, r3
 8003fda:	f000 fe83 	bl	8004ce4 <xTaskCheckForTimeOut>
 8003fde:	4603      	mov	r3, r0
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d123      	bne.n	800402c <xQueueReceive+0x198>
 8003fe4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003fe6:	f000 f917 	bl	8004218 <prvIsQueueEmpty>
 8003fea:	4603      	mov	r3, r0
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d017      	beq.n	8004020 <xQueueReceive+0x18c>
 8003ff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ff2:	3324      	adds	r3, #36	; 0x24
 8003ff4:	687a      	ldr	r2, [r7, #4]
 8003ff6:	4611      	mov	r1, r2
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	f000 fda9 	bl	8004b50 <vTaskPlaceOnEventList>
 8003ffe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004000:	f000 f8b8 	bl	8004174 <prvUnlockQueue>
 8004004:	f000 fbde 	bl	80047c4 <xTaskResumeAll>
 8004008:	4603      	mov	r3, r0
 800400a:	2b00      	cmp	r3, #0
 800400c:	d189      	bne.n	8003f22 <xQueueReceive+0x8e>
 800400e:	4b10      	ldr	r3, [pc, #64]	; (8004050 <xQueueReceive+0x1bc>)
 8004010:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004014:	601a      	str	r2, [r3, #0]
 8004016:	f3bf 8f4f 	dsb	sy
 800401a:	f3bf 8f6f 	isb	sy
 800401e:	e780      	b.n	8003f22 <xQueueReceive+0x8e>
 8004020:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004022:	f000 f8a7 	bl	8004174 <prvUnlockQueue>
 8004026:	f000 fbcd 	bl	80047c4 <xTaskResumeAll>
 800402a:	e77a      	b.n	8003f22 <xQueueReceive+0x8e>
 800402c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800402e:	f000 f8a1 	bl	8004174 <prvUnlockQueue>
 8004032:	f000 fbc7 	bl	80047c4 <xTaskResumeAll>
 8004036:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004038:	f000 f8ee 	bl	8004218 <prvIsQueueEmpty>
 800403c:	4603      	mov	r3, r0
 800403e:	2b00      	cmp	r3, #0
 8004040:	f43f af6f 	beq.w	8003f22 <xQueueReceive+0x8e>
 8004044:	2300      	movs	r3, #0
 8004046:	4618      	mov	r0, r3
 8004048:	3730      	adds	r7, #48	; 0x30
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}
 800404e:	bf00      	nop
 8004050:	e000ed04 	.word	0xe000ed04

08004054 <prvCopyDataToQueue>:
 8004054:	b580      	push	{r7, lr}
 8004056:	b086      	sub	sp, #24
 8004058:	af00      	add	r7, sp, #0
 800405a:	60f8      	str	r0, [r7, #12]
 800405c:	60b9      	str	r1, [r7, #8]
 800405e:	607a      	str	r2, [r7, #4]
 8004060:	2300      	movs	r3, #0
 8004062:	617b      	str	r3, [r7, #20]
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004068:	613b      	str	r3, [r7, #16]
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800406e:	2b00      	cmp	r3, #0
 8004070:	d10d      	bne.n	800408e <prvCopyDataToQueue+0x3a>
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d14d      	bne.n	8004116 <prvCopyDataToQueue+0xc2>
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	4618      	mov	r0, r3
 8004080:	f000 ff92 	bl	8004fa8 <xTaskPriorityDisinherit>
 8004084:	6178      	str	r0, [r7, #20]
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	2200      	movs	r2, #0
 800408a:	609a      	str	r2, [r3, #8]
 800408c:	e043      	b.n	8004116 <prvCopyDataToQueue+0xc2>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d119      	bne.n	80040c8 <prvCopyDataToQueue+0x74>
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	6858      	ldr	r0, [r3, #4]
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800409c:	461a      	mov	r2, r3
 800409e:	68b9      	ldr	r1, [r7, #8]
 80040a0:	f001 fff8 	bl	8006094 <memcpy>
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	685a      	ldr	r2, [r3, #4]
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ac:	441a      	add	r2, r3
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	605a      	str	r2, [r3, #4]
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	685a      	ldr	r2, [r3, #4]
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	689b      	ldr	r3, [r3, #8]
 80040ba:	429a      	cmp	r2, r3
 80040bc:	d32b      	bcc.n	8004116 <prvCopyDataToQueue+0xc2>
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681a      	ldr	r2, [r3, #0]
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	605a      	str	r2, [r3, #4]
 80040c6:	e026      	b.n	8004116 <prvCopyDataToQueue+0xc2>
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	68d8      	ldr	r0, [r3, #12]
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040d0:	461a      	mov	r2, r3
 80040d2:	68b9      	ldr	r1, [r7, #8]
 80040d4:	f001 ffde 	bl	8006094 <memcpy>
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	68da      	ldr	r2, [r3, #12]
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e0:	425b      	negs	r3, r3
 80040e2:	441a      	add	r2, r3
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	60da      	str	r2, [r3, #12]
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	68da      	ldr	r2, [r3, #12]
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	429a      	cmp	r2, r3
 80040f2:	d207      	bcs.n	8004104 <prvCopyDataToQueue+0xb0>
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	689a      	ldr	r2, [r3, #8]
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040fc:	425b      	negs	r3, r3
 80040fe:	441a      	add	r2, r3
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	60da      	str	r2, [r3, #12]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2b02      	cmp	r3, #2
 8004108:	d105      	bne.n	8004116 <prvCopyDataToQueue+0xc2>
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d002      	beq.n	8004116 <prvCopyDataToQueue+0xc2>
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	3b01      	subs	r3, #1
 8004114:	613b      	str	r3, [r7, #16]
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	1c5a      	adds	r2, r3, #1
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	639a      	str	r2, [r3, #56]	; 0x38
 800411e:	697b      	ldr	r3, [r7, #20]
 8004120:	4618      	mov	r0, r3
 8004122:	3718      	adds	r7, #24
 8004124:	46bd      	mov	sp, r7
 8004126:	bd80      	pop	{r7, pc}

08004128 <prvCopyDataFromQueue>:
 8004128:	b580      	push	{r7, lr}
 800412a:	b082      	sub	sp, #8
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
 8004130:	6039      	str	r1, [r7, #0]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004136:	2b00      	cmp	r3, #0
 8004138:	d018      	beq.n	800416c <prvCopyDataFromQueue+0x44>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	68da      	ldr	r2, [r3, #12]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004142:	441a      	add	r2, r3
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	60da      	str	r2, [r3, #12]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	68da      	ldr	r2, [r3, #12]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	689b      	ldr	r3, [r3, #8]
 8004150:	429a      	cmp	r2, r3
 8004152:	d303      	bcc.n	800415c <prvCopyDataFromQueue+0x34>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681a      	ldr	r2, [r3, #0]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	60da      	str	r2, [r3, #12]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	68d9      	ldr	r1, [r3, #12]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004164:	461a      	mov	r2, r3
 8004166:	6838      	ldr	r0, [r7, #0]
 8004168:	f001 ff94 	bl	8006094 <memcpy>
 800416c:	bf00      	nop
 800416e:	3708      	adds	r7, #8
 8004170:	46bd      	mov	sp, r7
 8004172:	bd80      	pop	{r7, pc}

08004174 <prvUnlockQueue>:
 8004174:	b580      	push	{r7, lr}
 8004176:	b084      	sub	sp, #16
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
 800417c:	f001 fc52 	bl	8005a24 <vPortEnterCritical>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004186:	73fb      	strb	r3, [r7, #15]
 8004188:	e011      	b.n	80041ae <prvUnlockQueue+0x3a>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800418e:	2b00      	cmp	r3, #0
 8004190:	d012      	beq.n	80041b8 <prvUnlockQueue+0x44>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	3324      	adds	r3, #36	; 0x24
 8004196:	4618      	mov	r0, r3
 8004198:	f000 fd2a 	bl	8004bf0 <xTaskRemoveFromEventList>
 800419c:	4603      	mov	r3, r0
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d001      	beq.n	80041a6 <prvUnlockQueue+0x32>
 80041a2:	f000 fe01 	bl	8004da8 <vTaskMissedYield>
 80041a6:	7bfb      	ldrb	r3, [r7, #15]
 80041a8:	3b01      	subs	r3, #1
 80041aa:	b2db      	uxtb	r3, r3
 80041ac:	73fb      	strb	r3, [r7, #15]
 80041ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	dce9      	bgt.n	800418a <prvUnlockQueue+0x16>
 80041b6:	e000      	b.n	80041ba <prvUnlockQueue+0x46>
 80041b8:	bf00      	nop
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	22ff      	movs	r2, #255	; 0xff
 80041be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80041c2:	f001 fc5f 	bl	8005a84 <vPortExitCritical>
 80041c6:	f001 fc2d 	bl	8005a24 <vPortEnterCritical>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80041d0:	73bb      	strb	r3, [r7, #14]
 80041d2:	e011      	b.n	80041f8 <prvUnlockQueue+0x84>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	691b      	ldr	r3, [r3, #16]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d012      	beq.n	8004202 <prvUnlockQueue+0x8e>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	3310      	adds	r3, #16
 80041e0:	4618      	mov	r0, r3
 80041e2:	f000 fd05 	bl	8004bf0 <xTaskRemoveFromEventList>
 80041e6:	4603      	mov	r3, r0
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d001      	beq.n	80041f0 <prvUnlockQueue+0x7c>
 80041ec:	f000 fddc 	bl	8004da8 <vTaskMissedYield>
 80041f0:	7bbb      	ldrb	r3, [r7, #14]
 80041f2:	3b01      	subs	r3, #1
 80041f4:	b2db      	uxtb	r3, r3
 80041f6:	73bb      	strb	r3, [r7, #14]
 80041f8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	dce9      	bgt.n	80041d4 <prvUnlockQueue+0x60>
 8004200:	e000      	b.n	8004204 <prvUnlockQueue+0x90>
 8004202:	bf00      	nop
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	22ff      	movs	r2, #255	; 0xff
 8004208:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800420c:	f001 fc3a 	bl	8005a84 <vPortExitCritical>
 8004210:	bf00      	nop
 8004212:	3710      	adds	r7, #16
 8004214:	46bd      	mov	sp, r7
 8004216:	bd80      	pop	{r7, pc}

08004218 <prvIsQueueEmpty>:
 8004218:	b580      	push	{r7, lr}
 800421a:	b084      	sub	sp, #16
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
 8004220:	f001 fc00 	bl	8005a24 <vPortEnterCritical>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004228:	2b00      	cmp	r3, #0
 800422a:	d102      	bne.n	8004232 <prvIsQueueEmpty+0x1a>
 800422c:	2301      	movs	r3, #1
 800422e:	60fb      	str	r3, [r7, #12]
 8004230:	e001      	b.n	8004236 <prvIsQueueEmpty+0x1e>
 8004232:	2300      	movs	r3, #0
 8004234:	60fb      	str	r3, [r7, #12]
 8004236:	f001 fc25 	bl	8005a84 <vPortExitCritical>
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	4618      	mov	r0, r3
 800423e:	3710      	adds	r7, #16
 8004240:	46bd      	mov	sp, r7
 8004242:	bd80      	pop	{r7, pc}

08004244 <prvIsQueueFull>:
 8004244:	b580      	push	{r7, lr}
 8004246:	b084      	sub	sp, #16
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
 800424c:	f001 fbea 	bl	8005a24 <vPortEnterCritical>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004258:	429a      	cmp	r2, r3
 800425a:	d102      	bne.n	8004262 <prvIsQueueFull+0x1e>
 800425c:	2301      	movs	r3, #1
 800425e:	60fb      	str	r3, [r7, #12]
 8004260:	e001      	b.n	8004266 <prvIsQueueFull+0x22>
 8004262:	2300      	movs	r3, #0
 8004264:	60fb      	str	r3, [r7, #12]
 8004266:	f001 fc0d 	bl	8005a84 <vPortExitCritical>
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	4618      	mov	r0, r3
 800426e:	3710      	adds	r7, #16
 8004270:	46bd      	mov	sp, r7
 8004272:	bd80      	pop	{r7, pc}

08004274 <vQueueAddToRegistry>:
 8004274:	b480      	push	{r7}
 8004276:	b085      	sub	sp, #20
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
 800427c:	6039      	str	r1, [r7, #0]
 800427e:	2300      	movs	r3, #0
 8004280:	60fb      	str	r3, [r7, #12]
 8004282:	e014      	b.n	80042ae <vQueueAddToRegistry+0x3a>
 8004284:	4a0f      	ldr	r2, [pc, #60]	; (80042c4 <vQueueAddToRegistry+0x50>)
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d10b      	bne.n	80042a8 <vQueueAddToRegistry+0x34>
 8004290:	490c      	ldr	r1, [pc, #48]	; (80042c4 <vQueueAddToRegistry+0x50>)
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	683a      	ldr	r2, [r7, #0]
 8004296:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800429a:	4a0a      	ldr	r2, [pc, #40]	; (80042c4 <vQueueAddToRegistry+0x50>)
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	00db      	lsls	r3, r3, #3
 80042a0:	4413      	add	r3, r2
 80042a2:	687a      	ldr	r2, [r7, #4]
 80042a4:	605a      	str	r2, [r3, #4]
 80042a6:	e006      	b.n	80042b6 <vQueueAddToRegistry+0x42>
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	3301      	adds	r3, #1
 80042ac:	60fb      	str	r3, [r7, #12]
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	2b07      	cmp	r3, #7
 80042b2:	d9e7      	bls.n	8004284 <vQueueAddToRegistry+0x10>
 80042b4:	bf00      	nop
 80042b6:	bf00      	nop
 80042b8:	3714      	adds	r7, #20
 80042ba:	46bd      	mov	sp, r7
 80042bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c0:	4770      	bx	lr
 80042c2:	bf00      	nop
 80042c4:	200007b4 	.word	0x200007b4

080042c8 <vQueueWaitForMessageRestricted>:
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b086      	sub	sp, #24
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	60f8      	str	r0, [r7, #12]
 80042d0:	60b9      	str	r1, [r7, #8]
 80042d2:	607a      	str	r2, [r7, #4]
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	617b      	str	r3, [r7, #20]
 80042d8:	f001 fba4 	bl	8005a24 <vPortEnterCritical>
 80042dc:	697b      	ldr	r3, [r7, #20]
 80042de:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80042e2:	b25b      	sxtb	r3, r3
 80042e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042e8:	d103      	bne.n	80042f2 <vQueueWaitForMessageRestricted+0x2a>
 80042ea:	697b      	ldr	r3, [r7, #20]
 80042ec:	2200      	movs	r2, #0
 80042ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80042f8:	b25b      	sxtb	r3, r3
 80042fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042fe:	d103      	bne.n	8004308 <vQueueWaitForMessageRestricted+0x40>
 8004300:	697b      	ldr	r3, [r7, #20]
 8004302:	2200      	movs	r2, #0
 8004304:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004308:	f001 fbbc 	bl	8005a84 <vPortExitCritical>
 800430c:	697b      	ldr	r3, [r7, #20]
 800430e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004310:	2b00      	cmp	r3, #0
 8004312:	d106      	bne.n	8004322 <vQueueWaitForMessageRestricted+0x5a>
 8004314:	697b      	ldr	r3, [r7, #20]
 8004316:	3324      	adds	r3, #36	; 0x24
 8004318:	687a      	ldr	r2, [r7, #4]
 800431a:	68b9      	ldr	r1, [r7, #8]
 800431c:	4618      	mov	r0, r3
 800431e:	f000 fc3b 	bl	8004b98 <vTaskPlaceOnEventListRestricted>
 8004322:	6978      	ldr	r0, [r7, #20]
 8004324:	f7ff ff26 	bl	8004174 <prvUnlockQueue>
 8004328:	bf00      	nop
 800432a:	3718      	adds	r7, #24
 800432c:	46bd      	mov	sp, r7
 800432e:	bd80      	pop	{r7, pc}

08004330 <xTaskCreateStatic>:
 8004330:	b580      	push	{r7, lr}
 8004332:	b08e      	sub	sp, #56	; 0x38
 8004334:	af04      	add	r7, sp, #16
 8004336:	60f8      	str	r0, [r7, #12]
 8004338:	60b9      	str	r1, [r7, #8]
 800433a:	607a      	str	r2, [r7, #4]
 800433c:	603b      	str	r3, [r7, #0]
 800433e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004340:	2b00      	cmp	r3, #0
 8004342:	d10a      	bne.n	800435a <xTaskCreateStatic+0x2a>
 8004344:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004348:	f383 8811 	msr	BASEPRI, r3
 800434c:	f3bf 8f6f 	isb	sy
 8004350:	f3bf 8f4f 	dsb	sy
 8004354:	623b      	str	r3, [r7, #32]
 8004356:	bf00      	nop
 8004358:	e7fe      	b.n	8004358 <xTaskCreateStatic+0x28>
 800435a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800435c:	2b00      	cmp	r3, #0
 800435e:	d10a      	bne.n	8004376 <xTaskCreateStatic+0x46>
 8004360:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004364:	f383 8811 	msr	BASEPRI, r3
 8004368:	f3bf 8f6f 	isb	sy
 800436c:	f3bf 8f4f 	dsb	sy
 8004370:	61fb      	str	r3, [r7, #28]
 8004372:	bf00      	nop
 8004374:	e7fe      	b.n	8004374 <xTaskCreateStatic+0x44>
 8004376:	235c      	movs	r3, #92	; 0x5c
 8004378:	613b      	str	r3, [r7, #16]
 800437a:	693b      	ldr	r3, [r7, #16]
 800437c:	2b5c      	cmp	r3, #92	; 0x5c
 800437e:	d00a      	beq.n	8004396 <xTaskCreateStatic+0x66>
 8004380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004384:	f383 8811 	msr	BASEPRI, r3
 8004388:	f3bf 8f6f 	isb	sy
 800438c:	f3bf 8f4f 	dsb	sy
 8004390:	61bb      	str	r3, [r7, #24]
 8004392:	bf00      	nop
 8004394:	e7fe      	b.n	8004394 <xTaskCreateStatic+0x64>
 8004396:	693b      	ldr	r3, [r7, #16]
 8004398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800439a:	2b00      	cmp	r3, #0
 800439c:	d01e      	beq.n	80043dc <xTaskCreateStatic+0xac>
 800439e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d01b      	beq.n	80043dc <xTaskCreateStatic+0xac>
 80043a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043a6:	627b      	str	r3, [r7, #36]	; 0x24
 80043a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80043ac:	631a      	str	r2, [r3, #48]	; 0x30
 80043ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b0:	2202      	movs	r2, #2
 80043b2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
 80043b6:	2300      	movs	r3, #0
 80043b8:	9303      	str	r3, [sp, #12]
 80043ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043bc:	9302      	str	r3, [sp, #8]
 80043be:	f107 0314 	add.w	r3, r7, #20
 80043c2:	9301      	str	r3, [sp, #4]
 80043c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043c6:	9300      	str	r3, [sp, #0]
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	687a      	ldr	r2, [r7, #4]
 80043cc:	68b9      	ldr	r1, [r7, #8]
 80043ce:	68f8      	ldr	r0, [r7, #12]
 80043d0:	f000 f850 	bl	8004474 <prvInitialiseNewTask>
 80043d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80043d6:	f000 f8dd 	bl	8004594 <prvAddNewTaskToReadyList>
 80043da:	e001      	b.n	80043e0 <xTaskCreateStatic+0xb0>
 80043dc:	2300      	movs	r3, #0
 80043de:	617b      	str	r3, [r7, #20]
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	4618      	mov	r0, r3
 80043e4:	3728      	adds	r7, #40	; 0x28
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bd80      	pop	{r7, pc}

080043ea <xTaskCreate>:
 80043ea:	b580      	push	{r7, lr}
 80043ec:	b08c      	sub	sp, #48	; 0x30
 80043ee:	af04      	add	r7, sp, #16
 80043f0:	60f8      	str	r0, [r7, #12]
 80043f2:	60b9      	str	r1, [r7, #8]
 80043f4:	603b      	str	r3, [r7, #0]
 80043f6:	4613      	mov	r3, r2
 80043f8:	80fb      	strh	r3, [r7, #6]
 80043fa:	88fb      	ldrh	r3, [r7, #6]
 80043fc:	009b      	lsls	r3, r3, #2
 80043fe:	4618      	mov	r0, r3
 8004400:	f001 fc32 	bl	8005c68 <pvPortMalloc>
 8004404:	6178      	str	r0, [r7, #20]
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d00e      	beq.n	800442a <xTaskCreate+0x40>
 800440c:	205c      	movs	r0, #92	; 0x5c
 800440e:	f001 fc2b 	bl	8005c68 <pvPortMalloc>
 8004412:	61f8      	str	r0, [r7, #28]
 8004414:	69fb      	ldr	r3, [r7, #28]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d003      	beq.n	8004422 <xTaskCreate+0x38>
 800441a:	69fb      	ldr	r3, [r7, #28]
 800441c:	697a      	ldr	r2, [r7, #20]
 800441e:	631a      	str	r2, [r3, #48]	; 0x30
 8004420:	e005      	b.n	800442e <xTaskCreate+0x44>
 8004422:	6978      	ldr	r0, [r7, #20]
 8004424:	f001 fcec 	bl	8005e00 <vPortFree>
 8004428:	e001      	b.n	800442e <xTaskCreate+0x44>
 800442a:	2300      	movs	r3, #0
 800442c:	61fb      	str	r3, [r7, #28]
 800442e:	69fb      	ldr	r3, [r7, #28]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d017      	beq.n	8004464 <xTaskCreate+0x7a>
 8004434:	69fb      	ldr	r3, [r7, #28]
 8004436:	2200      	movs	r2, #0
 8004438:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
 800443c:	88fa      	ldrh	r2, [r7, #6]
 800443e:	2300      	movs	r3, #0
 8004440:	9303      	str	r3, [sp, #12]
 8004442:	69fb      	ldr	r3, [r7, #28]
 8004444:	9302      	str	r3, [sp, #8]
 8004446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004448:	9301      	str	r3, [sp, #4]
 800444a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800444c:	9300      	str	r3, [sp, #0]
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	68b9      	ldr	r1, [r7, #8]
 8004452:	68f8      	ldr	r0, [r7, #12]
 8004454:	f000 f80e 	bl	8004474 <prvInitialiseNewTask>
 8004458:	69f8      	ldr	r0, [r7, #28]
 800445a:	f000 f89b 	bl	8004594 <prvAddNewTaskToReadyList>
 800445e:	2301      	movs	r3, #1
 8004460:	61bb      	str	r3, [r7, #24]
 8004462:	e002      	b.n	800446a <xTaskCreate+0x80>
 8004464:	f04f 33ff 	mov.w	r3, #4294967295
 8004468:	61bb      	str	r3, [r7, #24]
 800446a:	69bb      	ldr	r3, [r7, #24]
 800446c:	4618      	mov	r0, r3
 800446e:	3720      	adds	r7, #32
 8004470:	46bd      	mov	sp, r7
 8004472:	bd80      	pop	{r7, pc}

08004474 <prvInitialiseNewTask>:
 8004474:	b580      	push	{r7, lr}
 8004476:	b088      	sub	sp, #32
 8004478:	af00      	add	r7, sp, #0
 800447a:	60f8      	str	r0, [r7, #12]
 800447c:	60b9      	str	r1, [r7, #8]
 800447e:	607a      	str	r2, [r7, #4]
 8004480:	603b      	str	r3, [r7, #0]
 8004482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004484:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	009b      	lsls	r3, r3, #2
 800448a:	461a      	mov	r2, r3
 800448c:	21a5      	movs	r1, #165	; 0xa5
 800448e:	f001 fdd5 	bl	800603c <memset>
 8004492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004494:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800449c:	3b01      	subs	r3, #1
 800449e:	009b      	lsls	r3, r3, #2
 80044a0:	4413      	add	r3, r2
 80044a2:	61bb      	str	r3, [r7, #24]
 80044a4:	69bb      	ldr	r3, [r7, #24]
 80044a6:	f023 0307 	bic.w	r3, r3, #7
 80044aa:	61bb      	str	r3, [r7, #24]
 80044ac:	69bb      	ldr	r3, [r7, #24]
 80044ae:	f003 0307 	and.w	r3, r3, #7
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d00a      	beq.n	80044cc <prvInitialiseNewTask+0x58>
 80044b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044ba:	f383 8811 	msr	BASEPRI, r3
 80044be:	f3bf 8f6f 	isb	sy
 80044c2:	f3bf 8f4f 	dsb	sy
 80044c6:	617b      	str	r3, [r7, #20]
 80044c8:	bf00      	nop
 80044ca:	e7fe      	b.n	80044ca <prvInitialiseNewTask+0x56>
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d01f      	beq.n	8004512 <prvInitialiseNewTask+0x9e>
 80044d2:	2300      	movs	r3, #0
 80044d4:	61fb      	str	r3, [r7, #28]
 80044d6:	e012      	b.n	80044fe <prvInitialiseNewTask+0x8a>
 80044d8:	68ba      	ldr	r2, [r7, #8]
 80044da:	69fb      	ldr	r3, [r7, #28]
 80044dc:	4413      	add	r3, r2
 80044de:	7819      	ldrb	r1, [r3, #0]
 80044e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044e2:	69fb      	ldr	r3, [r7, #28]
 80044e4:	4413      	add	r3, r2
 80044e6:	3334      	adds	r3, #52	; 0x34
 80044e8:	460a      	mov	r2, r1
 80044ea:	701a      	strb	r2, [r3, #0]
 80044ec:	68ba      	ldr	r2, [r7, #8]
 80044ee:	69fb      	ldr	r3, [r7, #28]
 80044f0:	4413      	add	r3, r2
 80044f2:	781b      	ldrb	r3, [r3, #0]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d006      	beq.n	8004506 <prvInitialiseNewTask+0x92>
 80044f8:	69fb      	ldr	r3, [r7, #28]
 80044fa:	3301      	adds	r3, #1
 80044fc:	61fb      	str	r3, [r7, #28]
 80044fe:	69fb      	ldr	r3, [r7, #28]
 8004500:	2b0f      	cmp	r3, #15
 8004502:	d9e9      	bls.n	80044d8 <prvInitialiseNewTask+0x64>
 8004504:	e000      	b.n	8004508 <prvInitialiseNewTask+0x94>
 8004506:	bf00      	nop
 8004508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800450a:	2200      	movs	r2, #0
 800450c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004510:	e003      	b.n	800451a <prvInitialiseNewTask+0xa6>
 8004512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004514:	2200      	movs	r2, #0
 8004516:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 800451a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800451c:	2b37      	cmp	r3, #55	; 0x37
 800451e:	d901      	bls.n	8004524 <prvInitialiseNewTask+0xb0>
 8004520:	2337      	movs	r3, #55	; 0x37
 8004522:	62bb      	str	r3, [r7, #40]	; 0x28
 8004524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004526:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004528:	62da      	str	r2, [r3, #44]	; 0x2c
 800452a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800452c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800452e:	64da      	str	r2, [r3, #76]	; 0x4c
 8004530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004532:	2200      	movs	r2, #0
 8004534:	651a      	str	r2, [r3, #80]	; 0x50
 8004536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004538:	3304      	adds	r3, #4
 800453a:	4618      	mov	r0, r3
 800453c:	f7ff f978 	bl	8003830 <vListInitialiseItem>
 8004540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004542:	3318      	adds	r3, #24
 8004544:	4618      	mov	r0, r3
 8004546:	f7ff f973 	bl	8003830 <vListInitialiseItem>
 800454a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800454c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800454e:	611a      	str	r2, [r3, #16]
 8004550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004552:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004558:	619a      	str	r2, [r3, #24]
 800455a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800455c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800455e:	625a      	str	r2, [r3, #36]	; 0x24
 8004560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004562:	2200      	movs	r2, #0
 8004564:	655a      	str	r2, [r3, #84]	; 0x54
 8004566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004568:	2200      	movs	r2, #0
 800456a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 800456e:	683a      	ldr	r2, [r7, #0]
 8004570:	68f9      	ldr	r1, [r7, #12]
 8004572:	69b8      	ldr	r0, [r7, #24]
 8004574:	f001 f928 	bl	80057c8 <pxPortInitialiseStack>
 8004578:	4602      	mov	r2, r0
 800457a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800457c:	601a      	str	r2, [r3, #0]
 800457e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004580:	2b00      	cmp	r3, #0
 8004582:	d002      	beq.n	800458a <prvInitialiseNewTask+0x116>
 8004584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004586:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004588:	601a      	str	r2, [r3, #0]
 800458a:	bf00      	nop
 800458c:	3720      	adds	r7, #32
 800458e:	46bd      	mov	sp, r7
 8004590:	bd80      	pop	{r7, pc}
	...

08004594 <prvAddNewTaskToReadyList>:
 8004594:	b580      	push	{r7, lr}
 8004596:	b082      	sub	sp, #8
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
 800459c:	f001 fa42 	bl	8005a24 <vPortEnterCritical>
 80045a0:	4b2d      	ldr	r3, [pc, #180]	; (8004658 <prvAddNewTaskToReadyList+0xc4>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	3301      	adds	r3, #1
 80045a6:	4a2c      	ldr	r2, [pc, #176]	; (8004658 <prvAddNewTaskToReadyList+0xc4>)
 80045a8:	6013      	str	r3, [r2, #0]
 80045aa:	4b2c      	ldr	r3, [pc, #176]	; (800465c <prvAddNewTaskToReadyList+0xc8>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d109      	bne.n	80045c6 <prvAddNewTaskToReadyList+0x32>
 80045b2:	4a2a      	ldr	r2, [pc, #168]	; (800465c <prvAddNewTaskToReadyList+0xc8>)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6013      	str	r3, [r2, #0]
 80045b8:	4b27      	ldr	r3, [pc, #156]	; (8004658 <prvAddNewTaskToReadyList+0xc4>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	2b01      	cmp	r3, #1
 80045be:	d110      	bne.n	80045e2 <prvAddNewTaskToReadyList+0x4e>
 80045c0:	f000 fc16 	bl	8004df0 <prvInitialiseTaskLists>
 80045c4:	e00d      	b.n	80045e2 <prvAddNewTaskToReadyList+0x4e>
 80045c6:	4b26      	ldr	r3, [pc, #152]	; (8004660 <prvAddNewTaskToReadyList+0xcc>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d109      	bne.n	80045e2 <prvAddNewTaskToReadyList+0x4e>
 80045ce:	4b23      	ldr	r3, [pc, #140]	; (800465c <prvAddNewTaskToReadyList+0xc8>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045d8:	429a      	cmp	r2, r3
 80045da:	d802      	bhi.n	80045e2 <prvAddNewTaskToReadyList+0x4e>
 80045dc:	4a1f      	ldr	r2, [pc, #124]	; (800465c <prvAddNewTaskToReadyList+0xc8>)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6013      	str	r3, [r2, #0]
 80045e2:	4b20      	ldr	r3, [pc, #128]	; (8004664 <prvAddNewTaskToReadyList+0xd0>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	3301      	adds	r3, #1
 80045e8:	4a1e      	ldr	r2, [pc, #120]	; (8004664 <prvAddNewTaskToReadyList+0xd0>)
 80045ea:	6013      	str	r3, [r2, #0]
 80045ec:	4b1d      	ldr	r3, [pc, #116]	; (8004664 <prvAddNewTaskToReadyList+0xd0>)
 80045ee:	681a      	ldr	r2, [r3, #0]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	645a      	str	r2, [r3, #68]	; 0x44
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045f8:	4b1b      	ldr	r3, [pc, #108]	; (8004668 <prvAddNewTaskToReadyList+0xd4>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	429a      	cmp	r2, r3
 80045fe:	d903      	bls.n	8004608 <prvAddNewTaskToReadyList+0x74>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004604:	4a18      	ldr	r2, [pc, #96]	; (8004668 <prvAddNewTaskToReadyList+0xd4>)
 8004606:	6013      	str	r3, [r2, #0]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800460c:	4613      	mov	r3, r2
 800460e:	009b      	lsls	r3, r3, #2
 8004610:	4413      	add	r3, r2
 8004612:	009b      	lsls	r3, r3, #2
 8004614:	4a15      	ldr	r2, [pc, #84]	; (800466c <prvAddNewTaskToReadyList+0xd8>)
 8004616:	441a      	add	r2, r3
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	3304      	adds	r3, #4
 800461c:	4619      	mov	r1, r3
 800461e:	4610      	mov	r0, r2
 8004620:	f7ff f913 	bl	800384a <vListInsertEnd>
 8004624:	f001 fa2e 	bl	8005a84 <vPortExitCritical>
 8004628:	4b0d      	ldr	r3, [pc, #52]	; (8004660 <prvAddNewTaskToReadyList+0xcc>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d00e      	beq.n	800464e <prvAddNewTaskToReadyList+0xba>
 8004630:	4b0a      	ldr	r3, [pc, #40]	; (800465c <prvAddNewTaskToReadyList+0xc8>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800463a:	429a      	cmp	r2, r3
 800463c:	d207      	bcs.n	800464e <prvAddNewTaskToReadyList+0xba>
 800463e:	4b0c      	ldr	r3, [pc, #48]	; (8004670 <prvAddNewTaskToReadyList+0xdc>)
 8004640:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004644:	601a      	str	r2, [r3, #0]
 8004646:	f3bf 8f4f 	dsb	sy
 800464a:	f3bf 8f6f 	isb	sy
 800464e:	bf00      	nop
 8004650:	3708      	adds	r7, #8
 8004652:	46bd      	mov	sp, r7
 8004654:	bd80      	pop	{r7, pc}
 8004656:	bf00      	nop
 8004658:	20000cc8 	.word	0x20000cc8
 800465c:	200007f4 	.word	0x200007f4
 8004660:	20000cd4 	.word	0x20000cd4
 8004664:	20000ce4 	.word	0x20000ce4
 8004668:	20000cd0 	.word	0x20000cd0
 800466c:	200007f8 	.word	0x200007f8
 8004670:	e000ed04 	.word	0xe000ed04

08004674 <vTaskDelay>:
 8004674:	b580      	push	{r7, lr}
 8004676:	b084      	sub	sp, #16
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
 800467c:	2300      	movs	r3, #0
 800467e:	60fb      	str	r3, [r7, #12]
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d017      	beq.n	80046b6 <vTaskDelay+0x42>
 8004686:	4b13      	ldr	r3, [pc, #76]	; (80046d4 <vTaskDelay+0x60>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d00a      	beq.n	80046a4 <vTaskDelay+0x30>
 800468e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004692:	f383 8811 	msr	BASEPRI, r3
 8004696:	f3bf 8f6f 	isb	sy
 800469a:	f3bf 8f4f 	dsb	sy
 800469e:	60bb      	str	r3, [r7, #8]
 80046a0:	bf00      	nop
 80046a2:	e7fe      	b.n	80046a2 <vTaskDelay+0x2e>
 80046a4:	f000 f880 	bl	80047a8 <vTaskSuspendAll>
 80046a8:	2100      	movs	r1, #0
 80046aa:	6878      	ldr	r0, [r7, #4]
 80046ac:	f000 fcea 	bl	8005084 <prvAddCurrentTaskToDelayedList>
 80046b0:	f000 f888 	bl	80047c4 <xTaskResumeAll>
 80046b4:	60f8      	str	r0, [r7, #12]
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d107      	bne.n	80046cc <vTaskDelay+0x58>
 80046bc:	4b06      	ldr	r3, [pc, #24]	; (80046d8 <vTaskDelay+0x64>)
 80046be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046c2:	601a      	str	r2, [r3, #0]
 80046c4:	f3bf 8f4f 	dsb	sy
 80046c8:	f3bf 8f6f 	isb	sy
 80046cc:	bf00      	nop
 80046ce:	3710      	adds	r7, #16
 80046d0:	46bd      	mov	sp, r7
 80046d2:	bd80      	pop	{r7, pc}
 80046d4:	20000cf0 	.word	0x20000cf0
 80046d8:	e000ed04 	.word	0xe000ed04

080046dc <vTaskStartScheduler>:
 80046dc:	b580      	push	{r7, lr}
 80046de:	b08a      	sub	sp, #40	; 0x28
 80046e0:	af04      	add	r7, sp, #16
 80046e2:	2300      	movs	r3, #0
 80046e4:	60bb      	str	r3, [r7, #8]
 80046e6:	2300      	movs	r3, #0
 80046e8:	607b      	str	r3, [r7, #4]
 80046ea:	463a      	mov	r2, r7
 80046ec:	1d39      	adds	r1, r7, #4
 80046ee:	f107 0308 	add.w	r3, r7, #8
 80046f2:	4618      	mov	r0, r3
 80046f4:	f7ff f848 	bl	8003788 <vApplicationGetIdleTaskMemory>
 80046f8:	6839      	ldr	r1, [r7, #0]
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	68ba      	ldr	r2, [r7, #8]
 80046fe:	9202      	str	r2, [sp, #8]
 8004700:	9301      	str	r3, [sp, #4]
 8004702:	2300      	movs	r3, #0
 8004704:	9300      	str	r3, [sp, #0]
 8004706:	2300      	movs	r3, #0
 8004708:	460a      	mov	r2, r1
 800470a:	4921      	ldr	r1, [pc, #132]	; (8004790 <vTaskStartScheduler+0xb4>)
 800470c:	4821      	ldr	r0, [pc, #132]	; (8004794 <vTaskStartScheduler+0xb8>)
 800470e:	f7ff fe0f 	bl	8004330 <xTaskCreateStatic>
 8004712:	4603      	mov	r3, r0
 8004714:	4a20      	ldr	r2, [pc, #128]	; (8004798 <vTaskStartScheduler+0xbc>)
 8004716:	6013      	str	r3, [r2, #0]
 8004718:	4b1f      	ldr	r3, [pc, #124]	; (8004798 <vTaskStartScheduler+0xbc>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d002      	beq.n	8004726 <vTaskStartScheduler+0x4a>
 8004720:	2301      	movs	r3, #1
 8004722:	617b      	str	r3, [r7, #20]
 8004724:	e001      	b.n	800472a <vTaskStartScheduler+0x4e>
 8004726:	2300      	movs	r3, #0
 8004728:	617b      	str	r3, [r7, #20]
 800472a:	697b      	ldr	r3, [r7, #20]
 800472c:	2b01      	cmp	r3, #1
 800472e:	d102      	bne.n	8004736 <vTaskStartScheduler+0x5a>
 8004730:	f000 fcfc 	bl	800512c <xTimerCreateTimerTask>
 8004734:	6178      	str	r0, [r7, #20]
 8004736:	697b      	ldr	r3, [r7, #20]
 8004738:	2b01      	cmp	r3, #1
 800473a:	d116      	bne.n	800476a <vTaskStartScheduler+0x8e>
 800473c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004740:	f383 8811 	msr	BASEPRI, r3
 8004744:	f3bf 8f6f 	isb	sy
 8004748:	f3bf 8f4f 	dsb	sy
 800474c:	613b      	str	r3, [r7, #16]
 800474e:	bf00      	nop
 8004750:	4b12      	ldr	r3, [pc, #72]	; (800479c <vTaskStartScheduler+0xc0>)
 8004752:	f04f 32ff 	mov.w	r2, #4294967295
 8004756:	601a      	str	r2, [r3, #0]
 8004758:	4b11      	ldr	r3, [pc, #68]	; (80047a0 <vTaskStartScheduler+0xc4>)
 800475a:	2201      	movs	r2, #1
 800475c:	601a      	str	r2, [r3, #0]
 800475e:	4b11      	ldr	r3, [pc, #68]	; (80047a4 <vTaskStartScheduler+0xc8>)
 8004760:	2200      	movs	r2, #0
 8004762:	601a      	str	r2, [r3, #0]
 8004764:	f001 f8bc 	bl	80058e0 <xPortStartScheduler>
 8004768:	e00e      	b.n	8004788 <vTaskStartScheduler+0xac>
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004770:	d10a      	bne.n	8004788 <vTaskStartScheduler+0xac>
 8004772:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004776:	f383 8811 	msr	BASEPRI, r3
 800477a:	f3bf 8f6f 	isb	sy
 800477e:	f3bf 8f4f 	dsb	sy
 8004782:	60fb      	str	r3, [r7, #12]
 8004784:	bf00      	nop
 8004786:	e7fe      	b.n	8004786 <vTaskStartScheduler+0xaa>
 8004788:	bf00      	nop
 800478a:	3718      	adds	r7, #24
 800478c:	46bd      	mov	sp, r7
 800478e:	bd80      	pop	{r7, pc}
 8004790:	0800610c 	.word	0x0800610c
 8004794:	08004dc1 	.word	0x08004dc1
 8004798:	20000cec 	.word	0x20000cec
 800479c:	20000ce8 	.word	0x20000ce8
 80047a0:	20000cd4 	.word	0x20000cd4
 80047a4:	20000ccc 	.word	0x20000ccc

080047a8 <vTaskSuspendAll>:
 80047a8:	b480      	push	{r7}
 80047aa:	af00      	add	r7, sp, #0
 80047ac:	4b04      	ldr	r3, [pc, #16]	; (80047c0 <vTaskSuspendAll+0x18>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	3301      	adds	r3, #1
 80047b2:	4a03      	ldr	r2, [pc, #12]	; (80047c0 <vTaskSuspendAll+0x18>)
 80047b4:	6013      	str	r3, [r2, #0]
 80047b6:	bf00      	nop
 80047b8:	46bd      	mov	sp, r7
 80047ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047be:	4770      	bx	lr
 80047c0:	20000cf0 	.word	0x20000cf0

080047c4 <xTaskResumeAll>:
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b084      	sub	sp, #16
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	2300      	movs	r3, #0
 80047cc:	60fb      	str	r3, [r7, #12]
 80047ce:	2300      	movs	r3, #0
 80047d0:	60bb      	str	r3, [r7, #8]
 80047d2:	4b42      	ldr	r3, [pc, #264]	; (80048dc <xTaskResumeAll+0x118>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d10a      	bne.n	80047f0 <xTaskResumeAll+0x2c>
 80047da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047de:	f383 8811 	msr	BASEPRI, r3
 80047e2:	f3bf 8f6f 	isb	sy
 80047e6:	f3bf 8f4f 	dsb	sy
 80047ea:	603b      	str	r3, [r7, #0]
 80047ec:	bf00      	nop
 80047ee:	e7fe      	b.n	80047ee <xTaskResumeAll+0x2a>
 80047f0:	f001 f918 	bl	8005a24 <vPortEnterCritical>
 80047f4:	4b39      	ldr	r3, [pc, #228]	; (80048dc <xTaskResumeAll+0x118>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	3b01      	subs	r3, #1
 80047fa:	4a38      	ldr	r2, [pc, #224]	; (80048dc <xTaskResumeAll+0x118>)
 80047fc:	6013      	str	r3, [r2, #0]
 80047fe:	4b37      	ldr	r3, [pc, #220]	; (80048dc <xTaskResumeAll+0x118>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d162      	bne.n	80048cc <xTaskResumeAll+0x108>
 8004806:	4b36      	ldr	r3, [pc, #216]	; (80048e0 <xTaskResumeAll+0x11c>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d05e      	beq.n	80048cc <xTaskResumeAll+0x108>
 800480e:	e02f      	b.n	8004870 <xTaskResumeAll+0xac>
 8004810:	4b34      	ldr	r3, [pc, #208]	; (80048e4 <xTaskResumeAll+0x120>)
 8004812:	68db      	ldr	r3, [r3, #12]
 8004814:	68db      	ldr	r3, [r3, #12]
 8004816:	60fb      	str	r3, [r7, #12]
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	3318      	adds	r3, #24
 800481c:	4618      	mov	r0, r3
 800481e:	f7ff f871 	bl	8003904 <uxListRemove>
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	3304      	adds	r3, #4
 8004826:	4618      	mov	r0, r3
 8004828:	f7ff f86c 	bl	8003904 <uxListRemove>
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004830:	4b2d      	ldr	r3, [pc, #180]	; (80048e8 <xTaskResumeAll+0x124>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	429a      	cmp	r2, r3
 8004836:	d903      	bls.n	8004840 <xTaskResumeAll+0x7c>
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800483c:	4a2a      	ldr	r2, [pc, #168]	; (80048e8 <xTaskResumeAll+0x124>)
 800483e:	6013      	str	r3, [r2, #0]
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004844:	4613      	mov	r3, r2
 8004846:	009b      	lsls	r3, r3, #2
 8004848:	4413      	add	r3, r2
 800484a:	009b      	lsls	r3, r3, #2
 800484c:	4a27      	ldr	r2, [pc, #156]	; (80048ec <xTaskResumeAll+0x128>)
 800484e:	441a      	add	r2, r3
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	3304      	adds	r3, #4
 8004854:	4619      	mov	r1, r3
 8004856:	4610      	mov	r0, r2
 8004858:	f7fe fff7 	bl	800384a <vListInsertEnd>
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004860:	4b23      	ldr	r3, [pc, #140]	; (80048f0 <xTaskResumeAll+0x12c>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004866:	429a      	cmp	r2, r3
 8004868:	d302      	bcc.n	8004870 <xTaskResumeAll+0xac>
 800486a:	4b22      	ldr	r3, [pc, #136]	; (80048f4 <xTaskResumeAll+0x130>)
 800486c:	2201      	movs	r2, #1
 800486e:	601a      	str	r2, [r3, #0]
 8004870:	4b1c      	ldr	r3, [pc, #112]	; (80048e4 <xTaskResumeAll+0x120>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d1cb      	bne.n	8004810 <xTaskResumeAll+0x4c>
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d001      	beq.n	8004882 <xTaskResumeAll+0xbe>
 800487e:	f000 fb55 	bl	8004f2c <prvResetNextTaskUnblockTime>
 8004882:	4b1d      	ldr	r3, [pc, #116]	; (80048f8 <xTaskResumeAll+0x134>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	607b      	str	r3, [r7, #4]
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d010      	beq.n	80048b0 <xTaskResumeAll+0xec>
 800488e:	f000 f847 	bl	8004920 <xTaskIncrementTick>
 8004892:	4603      	mov	r3, r0
 8004894:	2b00      	cmp	r3, #0
 8004896:	d002      	beq.n	800489e <xTaskResumeAll+0xda>
 8004898:	4b16      	ldr	r3, [pc, #88]	; (80048f4 <xTaskResumeAll+0x130>)
 800489a:	2201      	movs	r2, #1
 800489c:	601a      	str	r2, [r3, #0]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	3b01      	subs	r3, #1
 80048a2:	607b      	str	r3, [r7, #4]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d1f1      	bne.n	800488e <xTaskResumeAll+0xca>
 80048aa:	4b13      	ldr	r3, [pc, #76]	; (80048f8 <xTaskResumeAll+0x134>)
 80048ac:	2200      	movs	r2, #0
 80048ae:	601a      	str	r2, [r3, #0]
 80048b0:	4b10      	ldr	r3, [pc, #64]	; (80048f4 <xTaskResumeAll+0x130>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d009      	beq.n	80048cc <xTaskResumeAll+0x108>
 80048b8:	2301      	movs	r3, #1
 80048ba:	60bb      	str	r3, [r7, #8]
 80048bc:	4b0f      	ldr	r3, [pc, #60]	; (80048fc <xTaskResumeAll+0x138>)
 80048be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048c2:	601a      	str	r2, [r3, #0]
 80048c4:	f3bf 8f4f 	dsb	sy
 80048c8:	f3bf 8f6f 	isb	sy
 80048cc:	f001 f8da 	bl	8005a84 <vPortExitCritical>
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	4618      	mov	r0, r3
 80048d4:	3710      	adds	r7, #16
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bd80      	pop	{r7, pc}
 80048da:	bf00      	nop
 80048dc:	20000cf0 	.word	0x20000cf0
 80048e0:	20000cc8 	.word	0x20000cc8
 80048e4:	20000c88 	.word	0x20000c88
 80048e8:	20000cd0 	.word	0x20000cd0
 80048ec:	200007f8 	.word	0x200007f8
 80048f0:	200007f4 	.word	0x200007f4
 80048f4:	20000cdc 	.word	0x20000cdc
 80048f8:	20000cd8 	.word	0x20000cd8
 80048fc:	e000ed04 	.word	0xe000ed04

08004900 <xTaskGetTickCount>:
 8004900:	b480      	push	{r7}
 8004902:	b083      	sub	sp, #12
 8004904:	af00      	add	r7, sp, #0
 8004906:	4b05      	ldr	r3, [pc, #20]	; (800491c <xTaskGetTickCount+0x1c>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	607b      	str	r3, [r7, #4]
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	4618      	mov	r0, r3
 8004910:	370c      	adds	r7, #12
 8004912:	46bd      	mov	sp, r7
 8004914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004918:	4770      	bx	lr
 800491a:	bf00      	nop
 800491c:	20000ccc 	.word	0x20000ccc

08004920 <xTaskIncrementTick>:
 8004920:	b580      	push	{r7, lr}
 8004922:	b086      	sub	sp, #24
 8004924:	af00      	add	r7, sp, #0
 8004926:	2300      	movs	r3, #0
 8004928:	617b      	str	r3, [r7, #20]
 800492a:	4b4f      	ldr	r3, [pc, #316]	; (8004a68 <xTaskIncrementTick+0x148>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	2b00      	cmp	r3, #0
 8004930:	f040 808f 	bne.w	8004a52 <xTaskIncrementTick+0x132>
 8004934:	4b4d      	ldr	r3, [pc, #308]	; (8004a6c <xTaskIncrementTick+0x14c>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	3301      	adds	r3, #1
 800493a:	613b      	str	r3, [r7, #16]
 800493c:	4a4b      	ldr	r2, [pc, #300]	; (8004a6c <xTaskIncrementTick+0x14c>)
 800493e:	693b      	ldr	r3, [r7, #16]
 8004940:	6013      	str	r3, [r2, #0]
 8004942:	693b      	ldr	r3, [r7, #16]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d120      	bne.n	800498a <xTaskIncrementTick+0x6a>
 8004948:	4b49      	ldr	r3, [pc, #292]	; (8004a70 <xTaskIncrementTick+0x150>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d00a      	beq.n	8004968 <xTaskIncrementTick+0x48>
 8004952:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004956:	f383 8811 	msr	BASEPRI, r3
 800495a:	f3bf 8f6f 	isb	sy
 800495e:	f3bf 8f4f 	dsb	sy
 8004962:	603b      	str	r3, [r7, #0]
 8004964:	bf00      	nop
 8004966:	e7fe      	b.n	8004966 <xTaskIncrementTick+0x46>
 8004968:	4b41      	ldr	r3, [pc, #260]	; (8004a70 <xTaskIncrementTick+0x150>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	60fb      	str	r3, [r7, #12]
 800496e:	4b41      	ldr	r3, [pc, #260]	; (8004a74 <xTaskIncrementTick+0x154>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4a3f      	ldr	r2, [pc, #252]	; (8004a70 <xTaskIncrementTick+0x150>)
 8004974:	6013      	str	r3, [r2, #0]
 8004976:	4a3f      	ldr	r2, [pc, #252]	; (8004a74 <xTaskIncrementTick+0x154>)
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	6013      	str	r3, [r2, #0]
 800497c:	4b3e      	ldr	r3, [pc, #248]	; (8004a78 <xTaskIncrementTick+0x158>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	3301      	adds	r3, #1
 8004982:	4a3d      	ldr	r2, [pc, #244]	; (8004a78 <xTaskIncrementTick+0x158>)
 8004984:	6013      	str	r3, [r2, #0]
 8004986:	f000 fad1 	bl	8004f2c <prvResetNextTaskUnblockTime>
 800498a:	4b3c      	ldr	r3, [pc, #240]	; (8004a7c <xTaskIncrementTick+0x15c>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	693a      	ldr	r2, [r7, #16]
 8004990:	429a      	cmp	r2, r3
 8004992:	d349      	bcc.n	8004a28 <xTaskIncrementTick+0x108>
 8004994:	4b36      	ldr	r3, [pc, #216]	; (8004a70 <xTaskIncrementTick+0x150>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d104      	bne.n	80049a8 <xTaskIncrementTick+0x88>
 800499e:	4b37      	ldr	r3, [pc, #220]	; (8004a7c <xTaskIncrementTick+0x15c>)
 80049a0:	f04f 32ff 	mov.w	r2, #4294967295
 80049a4:	601a      	str	r2, [r3, #0]
 80049a6:	e03f      	b.n	8004a28 <xTaskIncrementTick+0x108>
 80049a8:	4b31      	ldr	r3, [pc, #196]	; (8004a70 <xTaskIncrementTick+0x150>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	68db      	ldr	r3, [r3, #12]
 80049ae:	68db      	ldr	r3, [r3, #12]
 80049b0:	60bb      	str	r3, [r7, #8]
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	607b      	str	r3, [r7, #4]
 80049b8:	693a      	ldr	r2, [r7, #16]
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	429a      	cmp	r2, r3
 80049be:	d203      	bcs.n	80049c8 <xTaskIncrementTick+0xa8>
 80049c0:	4a2e      	ldr	r2, [pc, #184]	; (8004a7c <xTaskIncrementTick+0x15c>)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6013      	str	r3, [r2, #0]
 80049c6:	e02f      	b.n	8004a28 <xTaskIncrementTick+0x108>
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	3304      	adds	r3, #4
 80049cc:	4618      	mov	r0, r3
 80049ce:	f7fe ff99 	bl	8003904 <uxListRemove>
 80049d2:	68bb      	ldr	r3, [r7, #8]
 80049d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d004      	beq.n	80049e4 <xTaskIncrementTick+0xc4>
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	3318      	adds	r3, #24
 80049de:	4618      	mov	r0, r3
 80049e0:	f7fe ff90 	bl	8003904 <uxListRemove>
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049e8:	4b25      	ldr	r3, [pc, #148]	; (8004a80 <xTaskIncrementTick+0x160>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	429a      	cmp	r2, r3
 80049ee:	d903      	bls.n	80049f8 <xTaskIncrementTick+0xd8>
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049f4:	4a22      	ldr	r2, [pc, #136]	; (8004a80 <xTaskIncrementTick+0x160>)
 80049f6:	6013      	str	r3, [r2, #0]
 80049f8:	68bb      	ldr	r3, [r7, #8]
 80049fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049fc:	4613      	mov	r3, r2
 80049fe:	009b      	lsls	r3, r3, #2
 8004a00:	4413      	add	r3, r2
 8004a02:	009b      	lsls	r3, r3, #2
 8004a04:	4a1f      	ldr	r2, [pc, #124]	; (8004a84 <xTaskIncrementTick+0x164>)
 8004a06:	441a      	add	r2, r3
 8004a08:	68bb      	ldr	r3, [r7, #8]
 8004a0a:	3304      	adds	r3, #4
 8004a0c:	4619      	mov	r1, r3
 8004a0e:	4610      	mov	r0, r2
 8004a10:	f7fe ff1b 	bl	800384a <vListInsertEnd>
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a18:	4b1b      	ldr	r3, [pc, #108]	; (8004a88 <xTaskIncrementTick+0x168>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a1e:	429a      	cmp	r2, r3
 8004a20:	d3b8      	bcc.n	8004994 <xTaskIncrementTick+0x74>
 8004a22:	2301      	movs	r3, #1
 8004a24:	617b      	str	r3, [r7, #20]
 8004a26:	e7b5      	b.n	8004994 <xTaskIncrementTick+0x74>
 8004a28:	4b17      	ldr	r3, [pc, #92]	; (8004a88 <xTaskIncrementTick+0x168>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a2e:	4915      	ldr	r1, [pc, #84]	; (8004a84 <xTaskIncrementTick+0x164>)
 8004a30:	4613      	mov	r3, r2
 8004a32:	009b      	lsls	r3, r3, #2
 8004a34:	4413      	add	r3, r2
 8004a36:	009b      	lsls	r3, r3, #2
 8004a38:	440b      	add	r3, r1
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	2b01      	cmp	r3, #1
 8004a3e:	d901      	bls.n	8004a44 <xTaskIncrementTick+0x124>
 8004a40:	2301      	movs	r3, #1
 8004a42:	617b      	str	r3, [r7, #20]
 8004a44:	4b11      	ldr	r3, [pc, #68]	; (8004a8c <xTaskIncrementTick+0x16c>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d007      	beq.n	8004a5c <xTaskIncrementTick+0x13c>
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	617b      	str	r3, [r7, #20]
 8004a50:	e004      	b.n	8004a5c <xTaskIncrementTick+0x13c>
 8004a52:	4b0f      	ldr	r3, [pc, #60]	; (8004a90 <xTaskIncrementTick+0x170>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	3301      	adds	r3, #1
 8004a58:	4a0d      	ldr	r2, [pc, #52]	; (8004a90 <xTaskIncrementTick+0x170>)
 8004a5a:	6013      	str	r3, [r2, #0]
 8004a5c:	697b      	ldr	r3, [r7, #20]
 8004a5e:	4618      	mov	r0, r3
 8004a60:	3718      	adds	r7, #24
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bd80      	pop	{r7, pc}
 8004a66:	bf00      	nop
 8004a68:	20000cf0 	.word	0x20000cf0
 8004a6c:	20000ccc 	.word	0x20000ccc
 8004a70:	20000c80 	.word	0x20000c80
 8004a74:	20000c84 	.word	0x20000c84
 8004a78:	20000ce0 	.word	0x20000ce0
 8004a7c:	20000ce8 	.word	0x20000ce8
 8004a80:	20000cd0 	.word	0x20000cd0
 8004a84:	200007f8 	.word	0x200007f8
 8004a88:	200007f4 	.word	0x200007f4
 8004a8c:	20000cdc 	.word	0x20000cdc
 8004a90:	20000cd8 	.word	0x20000cd8

08004a94 <vTaskSwitchContext>:
 8004a94:	b480      	push	{r7}
 8004a96:	b085      	sub	sp, #20
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	4b28      	ldr	r3, [pc, #160]	; (8004b3c <vTaskSwitchContext+0xa8>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d003      	beq.n	8004aaa <vTaskSwitchContext+0x16>
 8004aa2:	4b27      	ldr	r3, [pc, #156]	; (8004b40 <vTaskSwitchContext+0xac>)
 8004aa4:	2201      	movs	r2, #1
 8004aa6:	601a      	str	r2, [r3, #0]
 8004aa8:	e041      	b.n	8004b2e <vTaskSwitchContext+0x9a>
 8004aaa:	4b25      	ldr	r3, [pc, #148]	; (8004b40 <vTaskSwitchContext+0xac>)
 8004aac:	2200      	movs	r2, #0
 8004aae:	601a      	str	r2, [r3, #0]
 8004ab0:	4b24      	ldr	r3, [pc, #144]	; (8004b44 <vTaskSwitchContext+0xb0>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	60fb      	str	r3, [r7, #12]
 8004ab6:	e010      	b.n	8004ada <vTaskSwitchContext+0x46>
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d10a      	bne.n	8004ad4 <vTaskSwitchContext+0x40>
 8004abe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ac2:	f383 8811 	msr	BASEPRI, r3
 8004ac6:	f3bf 8f6f 	isb	sy
 8004aca:	f3bf 8f4f 	dsb	sy
 8004ace:	607b      	str	r3, [r7, #4]
 8004ad0:	bf00      	nop
 8004ad2:	e7fe      	b.n	8004ad2 <vTaskSwitchContext+0x3e>
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	3b01      	subs	r3, #1
 8004ad8:	60fb      	str	r3, [r7, #12]
 8004ada:	491b      	ldr	r1, [pc, #108]	; (8004b48 <vTaskSwitchContext+0xb4>)
 8004adc:	68fa      	ldr	r2, [r7, #12]
 8004ade:	4613      	mov	r3, r2
 8004ae0:	009b      	lsls	r3, r3, #2
 8004ae2:	4413      	add	r3, r2
 8004ae4:	009b      	lsls	r3, r3, #2
 8004ae6:	440b      	add	r3, r1
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d0e4      	beq.n	8004ab8 <vTaskSwitchContext+0x24>
 8004aee:	68fa      	ldr	r2, [r7, #12]
 8004af0:	4613      	mov	r3, r2
 8004af2:	009b      	lsls	r3, r3, #2
 8004af4:	4413      	add	r3, r2
 8004af6:	009b      	lsls	r3, r3, #2
 8004af8:	4a13      	ldr	r2, [pc, #76]	; (8004b48 <vTaskSwitchContext+0xb4>)
 8004afa:	4413      	add	r3, r2
 8004afc:	60bb      	str	r3, [r7, #8]
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	685a      	ldr	r2, [r3, #4]
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	605a      	str	r2, [r3, #4]
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	685a      	ldr	r2, [r3, #4]
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	3308      	adds	r3, #8
 8004b10:	429a      	cmp	r2, r3
 8004b12:	d104      	bne.n	8004b1e <vTaskSwitchContext+0x8a>
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	685b      	ldr	r3, [r3, #4]
 8004b18:	685a      	ldr	r2, [r3, #4]
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	605a      	str	r2, [r3, #4]
 8004b1e:	68bb      	ldr	r3, [r7, #8]
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	68db      	ldr	r3, [r3, #12]
 8004b24:	4a09      	ldr	r2, [pc, #36]	; (8004b4c <vTaskSwitchContext+0xb8>)
 8004b26:	6013      	str	r3, [r2, #0]
 8004b28:	4a06      	ldr	r2, [pc, #24]	; (8004b44 <vTaskSwitchContext+0xb0>)
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	6013      	str	r3, [r2, #0]
 8004b2e:	bf00      	nop
 8004b30:	3714      	adds	r7, #20
 8004b32:	46bd      	mov	sp, r7
 8004b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b38:	4770      	bx	lr
 8004b3a:	bf00      	nop
 8004b3c:	20000cf0 	.word	0x20000cf0
 8004b40:	20000cdc 	.word	0x20000cdc
 8004b44:	20000cd0 	.word	0x20000cd0
 8004b48:	200007f8 	.word	0x200007f8
 8004b4c:	200007f4 	.word	0x200007f4

08004b50 <vTaskPlaceOnEventList>:
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b084      	sub	sp, #16
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
 8004b58:	6039      	str	r1, [r7, #0]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d10a      	bne.n	8004b76 <vTaskPlaceOnEventList+0x26>
 8004b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b64:	f383 8811 	msr	BASEPRI, r3
 8004b68:	f3bf 8f6f 	isb	sy
 8004b6c:	f3bf 8f4f 	dsb	sy
 8004b70:	60fb      	str	r3, [r7, #12]
 8004b72:	bf00      	nop
 8004b74:	e7fe      	b.n	8004b74 <vTaskPlaceOnEventList+0x24>
 8004b76:	4b07      	ldr	r3, [pc, #28]	; (8004b94 <vTaskPlaceOnEventList+0x44>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	3318      	adds	r3, #24
 8004b7c:	4619      	mov	r1, r3
 8004b7e:	6878      	ldr	r0, [r7, #4]
 8004b80:	f7fe fe87 	bl	8003892 <vListInsert>
 8004b84:	2101      	movs	r1, #1
 8004b86:	6838      	ldr	r0, [r7, #0]
 8004b88:	f000 fa7c 	bl	8005084 <prvAddCurrentTaskToDelayedList>
 8004b8c:	bf00      	nop
 8004b8e:	3710      	adds	r7, #16
 8004b90:	46bd      	mov	sp, r7
 8004b92:	bd80      	pop	{r7, pc}
 8004b94:	200007f4 	.word	0x200007f4

08004b98 <vTaskPlaceOnEventListRestricted>:
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b086      	sub	sp, #24
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	60f8      	str	r0, [r7, #12]
 8004ba0:	60b9      	str	r1, [r7, #8]
 8004ba2:	607a      	str	r2, [r7, #4]
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d10a      	bne.n	8004bc0 <vTaskPlaceOnEventListRestricted+0x28>
 8004baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bae:	f383 8811 	msr	BASEPRI, r3
 8004bb2:	f3bf 8f6f 	isb	sy
 8004bb6:	f3bf 8f4f 	dsb	sy
 8004bba:	617b      	str	r3, [r7, #20]
 8004bbc:	bf00      	nop
 8004bbe:	e7fe      	b.n	8004bbe <vTaskPlaceOnEventListRestricted+0x26>
 8004bc0:	4b0a      	ldr	r3, [pc, #40]	; (8004bec <vTaskPlaceOnEventListRestricted+0x54>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	3318      	adds	r3, #24
 8004bc6:	4619      	mov	r1, r3
 8004bc8:	68f8      	ldr	r0, [r7, #12]
 8004bca:	f7fe fe3e 	bl	800384a <vListInsertEnd>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d002      	beq.n	8004bda <vTaskPlaceOnEventListRestricted+0x42>
 8004bd4:	f04f 33ff 	mov.w	r3, #4294967295
 8004bd8:	60bb      	str	r3, [r7, #8]
 8004bda:	6879      	ldr	r1, [r7, #4]
 8004bdc:	68b8      	ldr	r0, [r7, #8]
 8004bde:	f000 fa51 	bl	8005084 <prvAddCurrentTaskToDelayedList>
 8004be2:	bf00      	nop
 8004be4:	3718      	adds	r7, #24
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bd80      	pop	{r7, pc}
 8004bea:	bf00      	nop
 8004bec:	200007f4 	.word	0x200007f4

08004bf0 <xTaskRemoveFromEventList>:
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b086      	sub	sp, #24
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	68db      	ldr	r3, [r3, #12]
 8004bfc:	68db      	ldr	r3, [r3, #12]
 8004bfe:	613b      	str	r3, [r7, #16]
 8004c00:	693b      	ldr	r3, [r7, #16]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d10a      	bne.n	8004c1c <xTaskRemoveFromEventList+0x2c>
 8004c06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c0a:	f383 8811 	msr	BASEPRI, r3
 8004c0e:	f3bf 8f6f 	isb	sy
 8004c12:	f3bf 8f4f 	dsb	sy
 8004c16:	60fb      	str	r3, [r7, #12]
 8004c18:	bf00      	nop
 8004c1a:	e7fe      	b.n	8004c1a <xTaskRemoveFromEventList+0x2a>
 8004c1c:	693b      	ldr	r3, [r7, #16]
 8004c1e:	3318      	adds	r3, #24
 8004c20:	4618      	mov	r0, r3
 8004c22:	f7fe fe6f 	bl	8003904 <uxListRemove>
 8004c26:	4b1e      	ldr	r3, [pc, #120]	; (8004ca0 <xTaskRemoveFromEventList+0xb0>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d11d      	bne.n	8004c6a <xTaskRemoveFromEventList+0x7a>
 8004c2e:	693b      	ldr	r3, [r7, #16]
 8004c30:	3304      	adds	r3, #4
 8004c32:	4618      	mov	r0, r3
 8004c34:	f7fe fe66 	bl	8003904 <uxListRemove>
 8004c38:	693b      	ldr	r3, [r7, #16]
 8004c3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c3c:	4b19      	ldr	r3, [pc, #100]	; (8004ca4 <xTaskRemoveFromEventList+0xb4>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	429a      	cmp	r2, r3
 8004c42:	d903      	bls.n	8004c4c <xTaskRemoveFromEventList+0x5c>
 8004c44:	693b      	ldr	r3, [r7, #16]
 8004c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c48:	4a16      	ldr	r2, [pc, #88]	; (8004ca4 <xTaskRemoveFromEventList+0xb4>)
 8004c4a:	6013      	str	r3, [r2, #0]
 8004c4c:	693b      	ldr	r3, [r7, #16]
 8004c4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c50:	4613      	mov	r3, r2
 8004c52:	009b      	lsls	r3, r3, #2
 8004c54:	4413      	add	r3, r2
 8004c56:	009b      	lsls	r3, r3, #2
 8004c58:	4a13      	ldr	r2, [pc, #76]	; (8004ca8 <xTaskRemoveFromEventList+0xb8>)
 8004c5a:	441a      	add	r2, r3
 8004c5c:	693b      	ldr	r3, [r7, #16]
 8004c5e:	3304      	adds	r3, #4
 8004c60:	4619      	mov	r1, r3
 8004c62:	4610      	mov	r0, r2
 8004c64:	f7fe fdf1 	bl	800384a <vListInsertEnd>
 8004c68:	e005      	b.n	8004c76 <xTaskRemoveFromEventList+0x86>
 8004c6a:	693b      	ldr	r3, [r7, #16]
 8004c6c:	3318      	adds	r3, #24
 8004c6e:	4619      	mov	r1, r3
 8004c70:	480e      	ldr	r0, [pc, #56]	; (8004cac <xTaskRemoveFromEventList+0xbc>)
 8004c72:	f7fe fdea 	bl	800384a <vListInsertEnd>
 8004c76:	693b      	ldr	r3, [r7, #16]
 8004c78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c7a:	4b0d      	ldr	r3, [pc, #52]	; (8004cb0 <xTaskRemoveFromEventList+0xc0>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c80:	429a      	cmp	r2, r3
 8004c82:	d905      	bls.n	8004c90 <xTaskRemoveFromEventList+0xa0>
 8004c84:	2301      	movs	r3, #1
 8004c86:	617b      	str	r3, [r7, #20]
 8004c88:	4b0a      	ldr	r3, [pc, #40]	; (8004cb4 <xTaskRemoveFromEventList+0xc4>)
 8004c8a:	2201      	movs	r2, #1
 8004c8c:	601a      	str	r2, [r3, #0]
 8004c8e:	e001      	b.n	8004c94 <xTaskRemoveFromEventList+0xa4>
 8004c90:	2300      	movs	r3, #0
 8004c92:	617b      	str	r3, [r7, #20]
 8004c94:	697b      	ldr	r3, [r7, #20]
 8004c96:	4618      	mov	r0, r3
 8004c98:	3718      	adds	r7, #24
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd80      	pop	{r7, pc}
 8004c9e:	bf00      	nop
 8004ca0:	20000cf0 	.word	0x20000cf0
 8004ca4:	20000cd0 	.word	0x20000cd0
 8004ca8:	200007f8 	.word	0x200007f8
 8004cac:	20000c88 	.word	0x20000c88
 8004cb0:	200007f4 	.word	0x200007f4
 8004cb4:	20000cdc 	.word	0x20000cdc

08004cb8 <vTaskInternalSetTimeOutState>:
 8004cb8:	b480      	push	{r7}
 8004cba:	b083      	sub	sp, #12
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
 8004cc0:	4b06      	ldr	r3, [pc, #24]	; (8004cdc <vTaskInternalSetTimeOutState+0x24>)
 8004cc2:	681a      	ldr	r2, [r3, #0]
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	601a      	str	r2, [r3, #0]
 8004cc8:	4b05      	ldr	r3, [pc, #20]	; (8004ce0 <vTaskInternalSetTimeOutState+0x28>)
 8004cca:	681a      	ldr	r2, [r3, #0]
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	605a      	str	r2, [r3, #4]
 8004cd0:	bf00      	nop
 8004cd2:	370c      	adds	r7, #12
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cda:	4770      	bx	lr
 8004cdc:	20000ce0 	.word	0x20000ce0
 8004ce0:	20000ccc 	.word	0x20000ccc

08004ce4 <xTaskCheckForTimeOut>:
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b088      	sub	sp, #32
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
 8004cec:	6039      	str	r1, [r7, #0]
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d10a      	bne.n	8004d0a <xTaskCheckForTimeOut+0x26>
 8004cf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cf8:	f383 8811 	msr	BASEPRI, r3
 8004cfc:	f3bf 8f6f 	isb	sy
 8004d00:	f3bf 8f4f 	dsb	sy
 8004d04:	613b      	str	r3, [r7, #16]
 8004d06:	bf00      	nop
 8004d08:	e7fe      	b.n	8004d08 <xTaskCheckForTimeOut+0x24>
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d10a      	bne.n	8004d26 <xTaskCheckForTimeOut+0x42>
 8004d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d14:	f383 8811 	msr	BASEPRI, r3
 8004d18:	f3bf 8f6f 	isb	sy
 8004d1c:	f3bf 8f4f 	dsb	sy
 8004d20:	60fb      	str	r3, [r7, #12]
 8004d22:	bf00      	nop
 8004d24:	e7fe      	b.n	8004d24 <xTaskCheckForTimeOut+0x40>
 8004d26:	f000 fe7d 	bl	8005a24 <vPortEnterCritical>
 8004d2a:	4b1d      	ldr	r3, [pc, #116]	; (8004da0 <xTaskCheckForTimeOut+0xbc>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	61bb      	str	r3, [r7, #24]
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	69ba      	ldr	r2, [r7, #24]
 8004d36:	1ad3      	subs	r3, r2, r3
 8004d38:	617b      	str	r3, [r7, #20]
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d42:	d102      	bne.n	8004d4a <xTaskCheckForTimeOut+0x66>
 8004d44:	2300      	movs	r3, #0
 8004d46:	61fb      	str	r3, [r7, #28]
 8004d48:	e023      	b.n	8004d92 <xTaskCheckForTimeOut+0xae>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681a      	ldr	r2, [r3, #0]
 8004d4e:	4b15      	ldr	r3, [pc, #84]	; (8004da4 <xTaskCheckForTimeOut+0xc0>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	429a      	cmp	r2, r3
 8004d54:	d007      	beq.n	8004d66 <xTaskCheckForTimeOut+0x82>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	69ba      	ldr	r2, [r7, #24]
 8004d5c:	429a      	cmp	r2, r3
 8004d5e:	d302      	bcc.n	8004d66 <xTaskCheckForTimeOut+0x82>
 8004d60:	2301      	movs	r3, #1
 8004d62:	61fb      	str	r3, [r7, #28]
 8004d64:	e015      	b.n	8004d92 <xTaskCheckForTimeOut+0xae>
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	697a      	ldr	r2, [r7, #20]
 8004d6c:	429a      	cmp	r2, r3
 8004d6e:	d20b      	bcs.n	8004d88 <xTaskCheckForTimeOut+0xa4>
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	681a      	ldr	r2, [r3, #0]
 8004d74:	697b      	ldr	r3, [r7, #20]
 8004d76:	1ad2      	subs	r2, r2, r3
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	601a      	str	r2, [r3, #0]
 8004d7c:	6878      	ldr	r0, [r7, #4]
 8004d7e:	f7ff ff9b 	bl	8004cb8 <vTaskInternalSetTimeOutState>
 8004d82:	2300      	movs	r3, #0
 8004d84:	61fb      	str	r3, [r7, #28]
 8004d86:	e004      	b.n	8004d92 <xTaskCheckForTimeOut+0xae>
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	601a      	str	r2, [r3, #0]
 8004d8e:	2301      	movs	r3, #1
 8004d90:	61fb      	str	r3, [r7, #28]
 8004d92:	f000 fe77 	bl	8005a84 <vPortExitCritical>
 8004d96:	69fb      	ldr	r3, [r7, #28]
 8004d98:	4618      	mov	r0, r3
 8004d9a:	3720      	adds	r7, #32
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	bd80      	pop	{r7, pc}
 8004da0:	20000ccc 	.word	0x20000ccc
 8004da4:	20000ce0 	.word	0x20000ce0

08004da8 <vTaskMissedYield>:
 8004da8:	b480      	push	{r7}
 8004daa:	af00      	add	r7, sp, #0
 8004dac:	4b03      	ldr	r3, [pc, #12]	; (8004dbc <vTaskMissedYield+0x14>)
 8004dae:	2201      	movs	r2, #1
 8004db0:	601a      	str	r2, [r3, #0]
 8004db2:	bf00      	nop
 8004db4:	46bd      	mov	sp, r7
 8004db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dba:	4770      	bx	lr
 8004dbc:	20000cdc 	.word	0x20000cdc

08004dc0 <prvIdleTask>:
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b082      	sub	sp, #8
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
 8004dc8:	f000 f852 	bl	8004e70 <prvCheckTasksWaitingTermination>
 8004dcc:	4b06      	ldr	r3, [pc, #24]	; (8004de8 <prvIdleTask+0x28>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	2b01      	cmp	r3, #1
 8004dd2:	d9f9      	bls.n	8004dc8 <prvIdleTask+0x8>
 8004dd4:	4b05      	ldr	r3, [pc, #20]	; (8004dec <prvIdleTask+0x2c>)
 8004dd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004dda:	601a      	str	r2, [r3, #0]
 8004ddc:	f3bf 8f4f 	dsb	sy
 8004de0:	f3bf 8f6f 	isb	sy
 8004de4:	e7f0      	b.n	8004dc8 <prvIdleTask+0x8>
 8004de6:	bf00      	nop
 8004de8:	200007f8 	.word	0x200007f8
 8004dec:	e000ed04 	.word	0xe000ed04

08004df0 <prvInitialiseTaskLists>:
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b082      	sub	sp, #8
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	2300      	movs	r3, #0
 8004df8:	607b      	str	r3, [r7, #4]
 8004dfa:	e00c      	b.n	8004e16 <prvInitialiseTaskLists+0x26>
 8004dfc:	687a      	ldr	r2, [r7, #4]
 8004dfe:	4613      	mov	r3, r2
 8004e00:	009b      	lsls	r3, r3, #2
 8004e02:	4413      	add	r3, r2
 8004e04:	009b      	lsls	r3, r3, #2
 8004e06:	4a12      	ldr	r2, [pc, #72]	; (8004e50 <prvInitialiseTaskLists+0x60>)
 8004e08:	4413      	add	r3, r2
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	f7fe fcf0 	bl	80037f0 <vListInitialise>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	3301      	adds	r3, #1
 8004e14:	607b      	str	r3, [r7, #4]
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2b37      	cmp	r3, #55	; 0x37
 8004e1a:	d9ef      	bls.n	8004dfc <prvInitialiseTaskLists+0xc>
 8004e1c:	480d      	ldr	r0, [pc, #52]	; (8004e54 <prvInitialiseTaskLists+0x64>)
 8004e1e:	f7fe fce7 	bl	80037f0 <vListInitialise>
 8004e22:	480d      	ldr	r0, [pc, #52]	; (8004e58 <prvInitialiseTaskLists+0x68>)
 8004e24:	f7fe fce4 	bl	80037f0 <vListInitialise>
 8004e28:	480c      	ldr	r0, [pc, #48]	; (8004e5c <prvInitialiseTaskLists+0x6c>)
 8004e2a:	f7fe fce1 	bl	80037f0 <vListInitialise>
 8004e2e:	480c      	ldr	r0, [pc, #48]	; (8004e60 <prvInitialiseTaskLists+0x70>)
 8004e30:	f7fe fcde 	bl	80037f0 <vListInitialise>
 8004e34:	480b      	ldr	r0, [pc, #44]	; (8004e64 <prvInitialiseTaskLists+0x74>)
 8004e36:	f7fe fcdb 	bl	80037f0 <vListInitialise>
 8004e3a:	4b0b      	ldr	r3, [pc, #44]	; (8004e68 <prvInitialiseTaskLists+0x78>)
 8004e3c:	4a05      	ldr	r2, [pc, #20]	; (8004e54 <prvInitialiseTaskLists+0x64>)
 8004e3e:	601a      	str	r2, [r3, #0]
 8004e40:	4b0a      	ldr	r3, [pc, #40]	; (8004e6c <prvInitialiseTaskLists+0x7c>)
 8004e42:	4a05      	ldr	r2, [pc, #20]	; (8004e58 <prvInitialiseTaskLists+0x68>)
 8004e44:	601a      	str	r2, [r3, #0]
 8004e46:	bf00      	nop
 8004e48:	3708      	adds	r7, #8
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	bd80      	pop	{r7, pc}
 8004e4e:	bf00      	nop
 8004e50:	200007f8 	.word	0x200007f8
 8004e54:	20000c58 	.word	0x20000c58
 8004e58:	20000c6c 	.word	0x20000c6c
 8004e5c:	20000c88 	.word	0x20000c88
 8004e60:	20000c9c 	.word	0x20000c9c
 8004e64:	20000cb4 	.word	0x20000cb4
 8004e68:	20000c80 	.word	0x20000c80
 8004e6c:	20000c84 	.word	0x20000c84

08004e70 <prvCheckTasksWaitingTermination>:
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b082      	sub	sp, #8
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	e019      	b.n	8004eac <prvCheckTasksWaitingTermination+0x3c>
 8004e78:	f000 fdd4 	bl	8005a24 <vPortEnterCritical>
 8004e7c:	4b10      	ldr	r3, [pc, #64]	; (8004ec0 <prvCheckTasksWaitingTermination+0x50>)
 8004e7e:	68db      	ldr	r3, [r3, #12]
 8004e80:	68db      	ldr	r3, [r3, #12]
 8004e82:	607b      	str	r3, [r7, #4]
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	3304      	adds	r3, #4
 8004e88:	4618      	mov	r0, r3
 8004e8a:	f7fe fd3b 	bl	8003904 <uxListRemove>
 8004e8e:	4b0d      	ldr	r3, [pc, #52]	; (8004ec4 <prvCheckTasksWaitingTermination+0x54>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	3b01      	subs	r3, #1
 8004e94:	4a0b      	ldr	r2, [pc, #44]	; (8004ec4 <prvCheckTasksWaitingTermination+0x54>)
 8004e96:	6013      	str	r3, [r2, #0]
 8004e98:	4b0b      	ldr	r3, [pc, #44]	; (8004ec8 <prvCheckTasksWaitingTermination+0x58>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	3b01      	subs	r3, #1
 8004e9e:	4a0a      	ldr	r2, [pc, #40]	; (8004ec8 <prvCheckTasksWaitingTermination+0x58>)
 8004ea0:	6013      	str	r3, [r2, #0]
 8004ea2:	f000 fdef 	bl	8005a84 <vPortExitCritical>
 8004ea6:	6878      	ldr	r0, [r7, #4]
 8004ea8:	f000 f810 	bl	8004ecc <prvDeleteTCB>
 8004eac:	4b06      	ldr	r3, [pc, #24]	; (8004ec8 <prvCheckTasksWaitingTermination+0x58>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d1e1      	bne.n	8004e78 <prvCheckTasksWaitingTermination+0x8>
 8004eb4:	bf00      	nop
 8004eb6:	bf00      	nop
 8004eb8:	3708      	adds	r7, #8
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bd80      	pop	{r7, pc}
 8004ebe:	bf00      	nop
 8004ec0:	20000c9c 	.word	0x20000c9c
 8004ec4:	20000cc8 	.word	0x20000cc8
 8004ec8:	20000cb0 	.word	0x20000cb0

08004ecc <prvDeleteTCB>:
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b084      	sub	sp, #16
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d108      	bne.n	8004ef0 <prvDeleteTCB+0x24>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	f000 ff8c 	bl	8005e00 <vPortFree>
 8004ee8:	6878      	ldr	r0, [r7, #4]
 8004eea:	f000 ff89 	bl	8005e00 <vPortFree>
 8004eee:	e018      	b.n	8004f22 <prvDeleteTCB+0x56>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004ef6:	2b01      	cmp	r3, #1
 8004ef8:	d103      	bne.n	8004f02 <prvDeleteTCB+0x36>
 8004efa:	6878      	ldr	r0, [r7, #4]
 8004efc:	f000 ff80 	bl	8005e00 <vPortFree>
 8004f00:	e00f      	b.n	8004f22 <prvDeleteTCB+0x56>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004f08:	2b02      	cmp	r3, #2
 8004f0a:	d00a      	beq.n	8004f22 <prvDeleteTCB+0x56>
 8004f0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f10:	f383 8811 	msr	BASEPRI, r3
 8004f14:	f3bf 8f6f 	isb	sy
 8004f18:	f3bf 8f4f 	dsb	sy
 8004f1c:	60fb      	str	r3, [r7, #12]
 8004f1e:	bf00      	nop
 8004f20:	e7fe      	b.n	8004f20 <prvDeleteTCB+0x54>
 8004f22:	bf00      	nop
 8004f24:	3710      	adds	r7, #16
 8004f26:	46bd      	mov	sp, r7
 8004f28:	bd80      	pop	{r7, pc}
	...

08004f2c <prvResetNextTaskUnblockTime>:
 8004f2c:	b480      	push	{r7}
 8004f2e:	b083      	sub	sp, #12
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	4b0c      	ldr	r3, [pc, #48]	; (8004f64 <prvResetNextTaskUnblockTime+0x38>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d104      	bne.n	8004f46 <prvResetNextTaskUnblockTime+0x1a>
 8004f3c:	4b0a      	ldr	r3, [pc, #40]	; (8004f68 <prvResetNextTaskUnblockTime+0x3c>)
 8004f3e:	f04f 32ff 	mov.w	r2, #4294967295
 8004f42:	601a      	str	r2, [r3, #0]
 8004f44:	e008      	b.n	8004f58 <prvResetNextTaskUnblockTime+0x2c>
 8004f46:	4b07      	ldr	r3, [pc, #28]	; (8004f64 <prvResetNextTaskUnblockTime+0x38>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	68db      	ldr	r3, [r3, #12]
 8004f4c:	68db      	ldr	r3, [r3, #12]
 8004f4e:	607b      	str	r3, [r7, #4]
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	4a04      	ldr	r2, [pc, #16]	; (8004f68 <prvResetNextTaskUnblockTime+0x3c>)
 8004f56:	6013      	str	r3, [r2, #0]
 8004f58:	bf00      	nop
 8004f5a:	370c      	adds	r7, #12
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f62:	4770      	bx	lr
 8004f64:	20000c80 	.word	0x20000c80
 8004f68:	20000ce8 	.word	0x20000ce8

08004f6c <xTaskGetSchedulerState>:
 8004f6c:	b480      	push	{r7}
 8004f6e:	b083      	sub	sp, #12
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	4b0b      	ldr	r3, [pc, #44]	; (8004fa0 <xTaskGetSchedulerState+0x34>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d102      	bne.n	8004f80 <xTaskGetSchedulerState+0x14>
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	607b      	str	r3, [r7, #4]
 8004f7e:	e008      	b.n	8004f92 <xTaskGetSchedulerState+0x26>
 8004f80:	4b08      	ldr	r3, [pc, #32]	; (8004fa4 <xTaskGetSchedulerState+0x38>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d102      	bne.n	8004f8e <xTaskGetSchedulerState+0x22>
 8004f88:	2302      	movs	r3, #2
 8004f8a:	607b      	str	r3, [r7, #4]
 8004f8c:	e001      	b.n	8004f92 <xTaskGetSchedulerState+0x26>
 8004f8e:	2300      	movs	r3, #0
 8004f90:	607b      	str	r3, [r7, #4]
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	4618      	mov	r0, r3
 8004f96:	370c      	adds	r7, #12
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9e:	4770      	bx	lr
 8004fa0:	20000cd4 	.word	0x20000cd4
 8004fa4:	20000cf0 	.word	0x20000cf0

08004fa8 <xTaskPriorityDisinherit>:
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b086      	sub	sp, #24
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	613b      	str	r3, [r7, #16]
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	617b      	str	r3, [r7, #20]
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d056      	beq.n	800506c <xTaskPriorityDisinherit+0xc4>
 8004fbe:	4b2e      	ldr	r3, [pc, #184]	; (8005078 <xTaskPriorityDisinherit+0xd0>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	693a      	ldr	r2, [r7, #16]
 8004fc4:	429a      	cmp	r2, r3
 8004fc6:	d00a      	beq.n	8004fde <xTaskPriorityDisinherit+0x36>
 8004fc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fcc:	f383 8811 	msr	BASEPRI, r3
 8004fd0:	f3bf 8f6f 	isb	sy
 8004fd4:	f3bf 8f4f 	dsb	sy
 8004fd8:	60fb      	str	r3, [r7, #12]
 8004fda:	bf00      	nop
 8004fdc:	e7fe      	b.n	8004fdc <xTaskPriorityDisinherit+0x34>
 8004fde:	693b      	ldr	r3, [r7, #16]
 8004fe0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d10a      	bne.n	8004ffc <xTaskPriorityDisinherit+0x54>
 8004fe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fea:	f383 8811 	msr	BASEPRI, r3
 8004fee:	f3bf 8f6f 	isb	sy
 8004ff2:	f3bf 8f4f 	dsb	sy
 8004ff6:	60bb      	str	r3, [r7, #8]
 8004ff8:	bf00      	nop
 8004ffa:	e7fe      	b.n	8004ffa <xTaskPriorityDisinherit+0x52>
 8004ffc:	693b      	ldr	r3, [r7, #16]
 8004ffe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005000:	1e5a      	subs	r2, r3, #1
 8005002:	693b      	ldr	r3, [r7, #16]
 8005004:	651a      	str	r2, [r3, #80]	; 0x50
 8005006:	693b      	ldr	r3, [r7, #16]
 8005008:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800500a:	693b      	ldr	r3, [r7, #16]
 800500c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800500e:	429a      	cmp	r2, r3
 8005010:	d02c      	beq.n	800506c <xTaskPriorityDisinherit+0xc4>
 8005012:	693b      	ldr	r3, [r7, #16]
 8005014:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005016:	2b00      	cmp	r3, #0
 8005018:	d128      	bne.n	800506c <xTaskPriorityDisinherit+0xc4>
 800501a:	693b      	ldr	r3, [r7, #16]
 800501c:	3304      	adds	r3, #4
 800501e:	4618      	mov	r0, r3
 8005020:	f7fe fc70 	bl	8003904 <uxListRemove>
 8005024:	693b      	ldr	r3, [r7, #16]
 8005026:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005028:	693b      	ldr	r3, [r7, #16]
 800502a:	62da      	str	r2, [r3, #44]	; 0x2c
 800502c:	693b      	ldr	r3, [r7, #16]
 800502e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005030:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005034:	693b      	ldr	r3, [r7, #16]
 8005036:	619a      	str	r2, [r3, #24]
 8005038:	693b      	ldr	r3, [r7, #16]
 800503a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800503c:	4b0f      	ldr	r3, [pc, #60]	; (800507c <xTaskPriorityDisinherit+0xd4>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	429a      	cmp	r2, r3
 8005042:	d903      	bls.n	800504c <xTaskPriorityDisinherit+0xa4>
 8005044:	693b      	ldr	r3, [r7, #16]
 8005046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005048:	4a0c      	ldr	r2, [pc, #48]	; (800507c <xTaskPriorityDisinherit+0xd4>)
 800504a:	6013      	str	r3, [r2, #0]
 800504c:	693b      	ldr	r3, [r7, #16]
 800504e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005050:	4613      	mov	r3, r2
 8005052:	009b      	lsls	r3, r3, #2
 8005054:	4413      	add	r3, r2
 8005056:	009b      	lsls	r3, r3, #2
 8005058:	4a09      	ldr	r2, [pc, #36]	; (8005080 <xTaskPriorityDisinherit+0xd8>)
 800505a:	441a      	add	r2, r3
 800505c:	693b      	ldr	r3, [r7, #16]
 800505e:	3304      	adds	r3, #4
 8005060:	4619      	mov	r1, r3
 8005062:	4610      	mov	r0, r2
 8005064:	f7fe fbf1 	bl	800384a <vListInsertEnd>
 8005068:	2301      	movs	r3, #1
 800506a:	617b      	str	r3, [r7, #20]
 800506c:	697b      	ldr	r3, [r7, #20]
 800506e:	4618      	mov	r0, r3
 8005070:	3718      	adds	r7, #24
 8005072:	46bd      	mov	sp, r7
 8005074:	bd80      	pop	{r7, pc}
 8005076:	bf00      	nop
 8005078:	200007f4 	.word	0x200007f4
 800507c:	20000cd0 	.word	0x20000cd0
 8005080:	200007f8 	.word	0x200007f8

08005084 <prvAddCurrentTaskToDelayedList>:
 8005084:	b580      	push	{r7, lr}
 8005086:	b084      	sub	sp, #16
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
 800508c:	6039      	str	r1, [r7, #0]
 800508e:	4b21      	ldr	r3, [pc, #132]	; (8005114 <prvAddCurrentTaskToDelayedList+0x90>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	60fb      	str	r3, [r7, #12]
 8005094:	4b20      	ldr	r3, [pc, #128]	; (8005118 <prvAddCurrentTaskToDelayedList+0x94>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	3304      	adds	r3, #4
 800509a:	4618      	mov	r0, r3
 800509c:	f7fe fc32 	bl	8003904 <uxListRemove>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050a6:	d10a      	bne.n	80050be <prvAddCurrentTaskToDelayedList+0x3a>
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d007      	beq.n	80050be <prvAddCurrentTaskToDelayedList+0x3a>
 80050ae:	4b1a      	ldr	r3, [pc, #104]	; (8005118 <prvAddCurrentTaskToDelayedList+0x94>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	3304      	adds	r3, #4
 80050b4:	4619      	mov	r1, r3
 80050b6:	4819      	ldr	r0, [pc, #100]	; (800511c <prvAddCurrentTaskToDelayedList+0x98>)
 80050b8:	f7fe fbc7 	bl	800384a <vListInsertEnd>
 80050bc:	e026      	b.n	800510c <prvAddCurrentTaskToDelayedList+0x88>
 80050be:	68fa      	ldr	r2, [r7, #12]
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	4413      	add	r3, r2
 80050c4:	60bb      	str	r3, [r7, #8]
 80050c6:	4b14      	ldr	r3, [pc, #80]	; (8005118 <prvAddCurrentTaskToDelayedList+0x94>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	68ba      	ldr	r2, [r7, #8]
 80050cc:	605a      	str	r2, [r3, #4]
 80050ce:	68ba      	ldr	r2, [r7, #8]
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	429a      	cmp	r2, r3
 80050d4:	d209      	bcs.n	80050ea <prvAddCurrentTaskToDelayedList+0x66>
 80050d6:	4b12      	ldr	r3, [pc, #72]	; (8005120 <prvAddCurrentTaskToDelayedList+0x9c>)
 80050d8:	681a      	ldr	r2, [r3, #0]
 80050da:	4b0f      	ldr	r3, [pc, #60]	; (8005118 <prvAddCurrentTaskToDelayedList+0x94>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	3304      	adds	r3, #4
 80050e0:	4619      	mov	r1, r3
 80050e2:	4610      	mov	r0, r2
 80050e4:	f7fe fbd5 	bl	8003892 <vListInsert>
 80050e8:	e010      	b.n	800510c <prvAddCurrentTaskToDelayedList+0x88>
 80050ea:	4b0e      	ldr	r3, [pc, #56]	; (8005124 <prvAddCurrentTaskToDelayedList+0xa0>)
 80050ec:	681a      	ldr	r2, [r3, #0]
 80050ee:	4b0a      	ldr	r3, [pc, #40]	; (8005118 <prvAddCurrentTaskToDelayedList+0x94>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	3304      	adds	r3, #4
 80050f4:	4619      	mov	r1, r3
 80050f6:	4610      	mov	r0, r2
 80050f8:	f7fe fbcb 	bl	8003892 <vListInsert>
 80050fc:	4b0a      	ldr	r3, [pc, #40]	; (8005128 <prvAddCurrentTaskToDelayedList+0xa4>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	68ba      	ldr	r2, [r7, #8]
 8005102:	429a      	cmp	r2, r3
 8005104:	d202      	bcs.n	800510c <prvAddCurrentTaskToDelayedList+0x88>
 8005106:	4a08      	ldr	r2, [pc, #32]	; (8005128 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	6013      	str	r3, [r2, #0]
 800510c:	bf00      	nop
 800510e:	3710      	adds	r7, #16
 8005110:	46bd      	mov	sp, r7
 8005112:	bd80      	pop	{r7, pc}
 8005114:	20000ccc 	.word	0x20000ccc
 8005118:	200007f4 	.word	0x200007f4
 800511c:	20000cb4 	.word	0x20000cb4
 8005120:	20000c84 	.word	0x20000c84
 8005124:	20000c80 	.word	0x20000c80
 8005128:	20000ce8 	.word	0x20000ce8

0800512c <xTimerCreateTimerTask>:
 800512c:	b580      	push	{r7, lr}
 800512e:	b08a      	sub	sp, #40	; 0x28
 8005130:	af04      	add	r7, sp, #16
 8005132:	2300      	movs	r3, #0
 8005134:	617b      	str	r3, [r7, #20]
 8005136:	f000 fb07 	bl	8005748 <prvCheckForValidListAndQueue>
 800513a:	4b1c      	ldr	r3, [pc, #112]	; (80051ac <xTimerCreateTimerTask+0x80>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d021      	beq.n	8005186 <xTimerCreateTimerTask+0x5a>
 8005142:	2300      	movs	r3, #0
 8005144:	60fb      	str	r3, [r7, #12]
 8005146:	2300      	movs	r3, #0
 8005148:	60bb      	str	r3, [r7, #8]
 800514a:	1d3a      	adds	r2, r7, #4
 800514c:	f107 0108 	add.w	r1, r7, #8
 8005150:	f107 030c 	add.w	r3, r7, #12
 8005154:	4618      	mov	r0, r3
 8005156:	f7fe fb31 	bl	80037bc <vApplicationGetTimerTaskMemory>
 800515a:	6879      	ldr	r1, [r7, #4]
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	68fa      	ldr	r2, [r7, #12]
 8005160:	9202      	str	r2, [sp, #8]
 8005162:	9301      	str	r3, [sp, #4]
 8005164:	2302      	movs	r3, #2
 8005166:	9300      	str	r3, [sp, #0]
 8005168:	2300      	movs	r3, #0
 800516a:	460a      	mov	r2, r1
 800516c:	4910      	ldr	r1, [pc, #64]	; (80051b0 <xTimerCreateTimerTask+0x84>)
 800516e:	4811      	ldr	r0, [pc, #68]	; (80051b4 <xTimerCreateTimerTask+0x88>)
 8005170:	f7ff f8de 	bl	8004330 <xTaskCreateStatic>
 8005174:	4603      	mov	r3, r0
 8005176:	4a10      	ldr	r2, [pc, #64]	; (80051b8 <xTimerCreateTimerTask+0x8c>)
 8005178:	6013      	str	r3, [r2, #0]
 800517a:	4b0f      	ldr	r3, [pc, #60]	; (80051b8 <xTimerCreateTimerTask+0x8c>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d001      	beq.n	8005186 <xTimerCreateTimerTask+0x5a>
 8005182:	2301      	movs	r3, #1
 8005184:	617b      	str	r3, [r7, #20]
 8005186:	697b      	ldr	r3, [r7, #20]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d10a      	bne.n	80051a2 <xTimerCreateTimerTask+0x76>
 800518c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005190:	f383 8811 	msr	BASEPRI, r3
 8005194:	f3bf 8f6f 	isb	sy
 8005198:	f3bf 8f4f 	dsb	sy
 800519c:	613b      	str	r3, [r7, #16]
 800519e:	bf00      	nop
 80051a0:	e7fe      	b.n	80051a0 <xTimerCreateTimerTask+0x74>
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	4618      	mov	r0, r3
 80051a6:	3718      	adds	r7, #24
 80051a8:	46bd      	mov	sp, r7
 80051aa:	bd80      	pop	{r7, pc}
 80051ac:	20000d24 	.word	0x20000d24
 80051b0:	08006114 	.word	0x08006114
 80051b4:	080052f1 	.word	0x080052f1
 80051b8:	20000d28 	.word	0x20000d28

080051bc <xTimerGenericCommand>:
 80051bc:	b580      	push	{r7, lr}
 80051be:	b08a      	sub	sp, #40	; 0x28
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	60f8      	str	r0, [r7, #12]
 80051c4:	60b9      	str	r1, [r7, #8]
 80051c6:	607a      	str	r2, [r7, #4]
 80051c8:	603b      	str	r3, [r7, #0]
 80051ca:	2300      	movs	r3, #0
 80051cc:	627b      	str	r3, [r7, #36]	; 0x24
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d10a      	bne.n	80051ea <xTimerGenericCommand+0x2e>
 80051d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051d8:	f383 8811 	msr	BASEPRI, r3
 80051dc:	f3bf 8f6f 	isb	sy
 80051e0:	f3bf 8f4f 	dsb	sy
 80051e4:	623b      	str	r3, [r7, #32]
 80051e6:	bf00      	nop
 80051e8:	e7fe      	b.n	80051e8 <xTimerGenericCommand+0x2c>
 80051ea:	4b1a      	ldr	r3, [pc, #104]	; (8005254 <xTimerGenericCommand+0x98>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d02a      	beq.n	8005248 <xTimerGenericCommand+0x8c>
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	613b      	str	r3, [r7, #16]
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	617b      	str	r3, [r7, #20]
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	61bb      	str	r3, [r7, #24]
 80051fe:	68bb      	ldr	r3, [r7, #8]
 8005200:	2b05      	cmp	r3, #5
 8005202:	dc18      	bgt.n	8005236 <xTimerGenericCommand+0x7a>
 8005204:	f7ff feb2 	bl	8004f6c <xTaskGetSchedulerState>
 8005208:	4603      	mov	r3, r0
 800520a:	2b02      	cmp	r3, #2
 800520c:	d109      	bne.n	8005222 <xTimerGenericCommand+0x66>
 800520e:	4b11      	ldr	r3, [pc, #68]	; (8005254 <xTimerGenericCommand+0x98>)
 8005210:	6818      	ldr	r0, [r3, #0]
 8005212:	f107 0110 	add.w	r1, r7, #16
 8005216:	2300      	movs	r3, #0
 8005218:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800521a:	f7fe fca1 	bl	8003b60 <xQueueGenericSend>
 800521e:	6278      	str	r0, [r7, #36]	; 0x24
 8005220:	e012      	b.n	8005248 <xTimerGenericCommand+0x8c>
 8005222:	4b0c      	ldr	r3, [pc, #48]	; (8005254 <xTimerGenericCommand+0x98>)
 8005224:	6818      	ldr	r0, [r3, #0]
 8005226:	f107 0110 	add.w	r1, r7, #16
 800522a:	2300      	movs	r3, #0
 800522c:	2200      	movs	r2, #0
 800522e:	f7fe fc97 	bl	8003b60 <xQueueGenericSend>
 8005232:	6278      	str	r0, [r7, #36]	; 0x24
 8005234:	e008      	b.n	8005248 <xTimerGenericCommand+0x8c>
 8005236:	4b07      	ldr	r3, [pc, #28]	; (8005254 <xTimerGenericCommand+0x98>)
 8005238:	6818      	ldr	r0, [r3, #0]
 800523a:	f107 0110 	add.w	r1, r7, #16
 800523e:	2300      	movs	r3, #0
 8005240:	683a      	ldr	r2, [r7, #0]
 8005242:	f7fe fd8b 	bl	8003d5c <xQueueGenericSendFromISR>
 8005246:	6278      	str	r0, [r7, #36]	; 0x24
 8005248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800524a:	4618      	mov	r0, r3
 800524c:	3728      	adds	r7, #40	; 0x28
 800524e:	46bd      	mov	sp, r7
 8005250:	bd80      	pop	{r7, pc}
 8005252:	bf00      	nop
 8005254:	20000d24 	.word	0x20000d24

08005258 <prvProcessExpiredTimer>:
 8005258:	b580      	push	{r7, lr}
 800525a:	b088      	sub	sp, #32
 800525c:	af02      	add	r7, sp, #8
 800525e:	6078      	str	r0, [r7, #4]
 8005260:	6039      	str	r1, [r7, #0]
 8005262:	4b22      	ldr	r3, [pc, #136]	; (80052ec <prvProcessExpiredTimer+0x94>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	68db      	ldr	r3, [r3, #12]
 8005268:	68db      	ldr	r3, [r3, #12]
 800526a:	617b      	str	r3, [r7, #20]
 800526c:	697b      	ldr	r3, [r7, #20]
 800526e:	3304      	adds	r3, #4
 8005270:	4618      	mov	r0, r3
 8005272:	f7fe fb47 	bl	8003904 <uxListRemove>
 8005276:	697b      	ldr	r3, [r7, #20]
 8005278:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800527c:	f003 0304 	and.w	r3, r3, #4
 8005280:	2b00      	cmp	r3, #0
 8005282:	d022      	beq.n	80052ca <prvProcessExpiredTimer+0x72>
 8005284:	697b      	ldr	r3, [r7, #20]
 8005286:	699a      	ldr	r2, [r3, #24]
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	18d1      	adds	r1, r2, r3
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	683a      	ldr	r2, [r7, #0]
 8005290:	6978      	ldr	r0, [r7, #20]
 8005292:	f000 f8d1 	bl	8005438 <prvInsertTimerInActiveList>
 8005296:	4603      	mov	r3, r0
 8005298:	2b00      	cmp	r3, #0
 800529a:	d01f      	beq.n	80052dc <prvProcessExpiredTimer+0x84>
 800529c:	2300      	movs	r3, #0
 800529e:	9300      	str	r3, [sp, #0]
 80052a0:	2300      	movs	r3, #0
 80052a2:	687a      	ldr	r2, [r7, #4]
 80052a4:	2100      	movs	r1, #0
 80052a6:	6978      	ldr	r0, [r7, #20]
 80052a8:	f7ff ff88 	bl	80051bc <xTimerGenericCommand>
 80052ac:	6138      	str	r0, [r7, #16]
 80052ae:	693b      	ldr	r3, [r7, #16]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d113      	bne.n	80052dc <prvProcessExpiredTimer+0x84>
 80052b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052b8:	f383 8811 	msr	BASEPRI, r3
 80052bc:	f3bf 8f6f 	isb	sy
 80052c0:	f3bf 8f4f 	dsb	sy
 80052c4:	60fb      	str	r3, [r7, #12]
 80052c6:	bf00      	nop
 80052c8:	e7fe      	b.n	80052c8 <prvProcessExpiredTimer+0x70>
 80052ca:	697b      	ldr	r3, [r7, #20]
 80052cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80052d0:	f023 0301 	bic.w	r3, r3, #1
 80052d4:	b2da      	uxtb	r2, r3
 80052d6:	697b      	ldr	r3, [r7, #20]
 80052d8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 80052dc:	697b      	ldr	r3, [r7, #20]
 80052de:	6a1b      	ldr	r3, [r3, #32]
 80052e0:	6978      	ldr	r0, [r7, #20]
 80052e2:	4798      	blx	r3
 80052e4:	bf00      	nop
 80052e6:	3718      	adds	r7, #24
 80052e8:	46bd      	mov	sp, r7
 80052ea:	bd80      	pop	{r7, pc}
 80052ec:	20000d1c 	.word	0x20000d1c

080052f0 <prvTimerTask>:
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b084      	sub	sp, #16
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
 80052f8:	f107 0308 	add.w	r3, r7, #8
 80052fc:	4618      	mov	r0, r3
 80052fe:	f000 f857 	bl	80053b0 <prvGetNextExpireTime>
 8005302:	60f8      	str	r0, [r7, #12]
 8005304:	68bb      	ldr	r3, [r7, #8]
 8005306:	4619      	mov	r1, r3
 8005308:	68f8      	ldr	r0, [r7, #12]
 800530a:	f000 f803 	bl	8005314 <prvProcessTimerOrBlockTask>
 800530e:	f000 f8d5 	bl	80054bc <prvProcessReceivedCommands>
 8005312:	e7f1      	b.n	80052f8 <prvTimerTask+0x8>

08005314 <prvProcessTimerOrBlockTask>:
 8005314:	b580      	push	{r7, lr}
 8005316:	b084      	sub	sp, #16
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
 800531c:	6039      	str	r1, [r7, #0]
 800531e:	f7ff fa43 	bl	80047a8 <vTaskSuspendAll>
 8005322:	f107 0308 	add.w	r3, r7, #8
 8005326:	4618      	mov	r0, r3
 8005328:	f000 f866 	bl	80053f8 <prvSampleTimeNow>
 800532c:	60f8      	str	r0, [r7, #12]
 800532e:	68bb      	ldr	r3, [r7, #8]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d130      	bne.n	8005396 <prvProcessTimerOrBlockTask+0x82>
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d10a      	bne.n	8005350 <prvProcessTimerOrBlockTask+0x3c>
 800533a:	687a      	ldr	r2, [r7, #4]
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	429a      	cmp	r2, r3
 8005340:	d806      	bhi.n	8005350 <prvProcessTimerOrBlockTask+0x3c>
 8005342:	f7ff fa3f 	bl	80047c4 <xTaskResumeAll>
 8005346:	68f9      	ldr	r1, [r7, #12]
 8005348:	6878      	ldr	r0, [r7, #4]
 800534a:	f7ff ff85 	bl	8005258 <prvProcessExpiredTimer>
 800534e:	e024      	b.n	800539a <prvProcessTimerOrBlockTask+0x86>
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d008      	beq.n	8005368 <prvProcessTimerOrBlockTask+0x54>
 8005356:	4b13      	ldr	r3, [pc, #76]	; (80053a4 <prvProcessTimerOrBlockTask+0x90>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d101      	bne.n	8005364 <prvProcessTimerOrBlockTask+0x50>
 8005360:	2301      	movs	r3, #1
 8005362:	e000      	b.n	8005366 <prvProcessTimerOrBlockTask+0x52>
 8005364:	2300      	movs	r3, #0
 8005366:	603b      	str	r3, [r7, #0]
 8005368:	4b0f      	ldr	r3, [pc, #60]	; (80053a8 <prvProcessTimerOrBlockTask+0x94>)
 800536a:	6818      	ldr	r0, [r3, #0]
 800536c:	687a      	ldr	r2, [r7, #4]
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	1ad3      	subs	r3, r2, r3
 8005372:	683a      	ldr	r2, [r7, #0]
 8005374:	4619      	mov	r1, r3
 8005376:	f7fe ffa7 	bl	80042c8 <vQueueWaitForMessageRestricted>
 800537a:	f7ff fa23 	bl	80047c4 <xTaskResumeAll>
 800537e:	4603      	mov	r3, r0
 8005380:	2b00      	cmp	r3, #0
 8005382:	d10a      	bne.n	800539a <prvProcessTimerOrBlockTask+0x86>
 8005384:	4b09      	ldr	r3, [pc, #36]	; (80053ac <prvProcessTimerOrBlockTask+0x98>)
 8005386:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800538a:	601a      	str	r2, [r3, #0]
 800538c:	f3bf 8f4f 	dsb	sy
 8005390:	f3bf 8f6f 	isb	sy
 8005394:	e001      	b.n	800539a <prvProcessTimerOrBlockTask+0x86>
 8005396:	f7ff fa15 	bl	80047c4 <xTaskResumeAll>
 800539a:	bf00      	nop
 800539c:	3710      	adds	r7, #16
 800539e:	46bd      	mov	sp, r7
 80053a0:	bd80      	pop	{r7, pc}
 80053a2:	bf00      	nop
 80053a4:	20000d20 	.word	0x20000d20
 80053a8:	20000d24 	.word	0x20000d24
 80053ac:	e000ed04 	.word	0xe000ed04

080053b0 <prvGetNextExpireTime>:
 80053b0:	b480      	push	{r7}
 80053b2:	b085      	sub	sp, #20
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
 80053b8:	4b0e      	ldr	r3, [pc, #56]	; (80053f4 <prvGetNextExpireTime+0x44>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d101      	bne.n	80053c6 <prvGetNextExpireTime+0x16>
 80053c2:	2201      	movs	r2, #1
 80053c4:	e000      	b.n	80053c8 <prvGetNextExpireTime+0x18>
 80053c6:	2200      	movs	r2, #0
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	601a      	str	r2, [r3, #0]
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d105      	bne.n	80053e0 <prvGetNextExpireTime+0x30>
 80053d4:	4b07      	ldr	r3, [pc, #28]	; (80053f4 <prvGetNextExpireTime+0x44>)
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	68db      	ldr	r3, [r3, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	60fb      	str	r3, [r7, #12]
 80053de:	e001      	b.n	80053e4 <prvGetNextExpireTime+0x34>
 80053e0:	2300      	movs	r3, #0
 80053e2:	60fb      	str	r3, [r7, #12]
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	4618      	mov	r0, r3
 80053e8:	3714      	adds	r7, #20
 80053ea:	46bd      	mov	sp, r7
 80053ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f0:	4770      	bx	lr
 80053f2:	bf00      	nop
 80053f4:	20000d1c 	.word	0x20000d1c

080053f8 <prvSampleTimeNow>:
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b084      	sub	sp, #16
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
 8005400:	f7ff fa7e 	bl	8004900 <xTaskGetTickCount>
 8005404:	60f8      	str	r0, [r7, #12]
 8005406:	4b0b      	ldr	r3, [pc, #44]	; (8005434 <prvSampleTimeNow+0x3c>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	68fa      	ldr	r2, [r7, #12]
 800540c:	429a      	cmp	r2, r3
 800540e:	d205      	bcs.n	800541c <prvSampleTimeNow+0x24>
 8005410:	f000 f936 	bl	8005680 <prvSwitchTimerLists>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2201      	movs	r2, #1
 8005418:	601a      	str	r2, [r3, #0]
 800541a:	e002      	b.n	8005422 <prvSampleTimeNow+0x2a>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2200      	movs	r2, #0
 8005420:	601a      	str	r2, [r3, #0]
 8005422:	4a04      	ldr	r2, [pc, #16]	; (8005434 <prvSampleTimeNow+0x3c>)
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	6013      	str	r3, [r2, #0]
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	4618      	mov	r0, r3
 800542c:	3710      	adds	r7, #16
 800542e:	46bd      	mov	sp, r7
 8005430:	bd80      	pop	{r7, pc}
 8005432:	bf00      	nop
 8005434:	20000d2c 	.word	0x20000d2c

08005438 <prvInsertTimerInActiveList>:
 8005438:	b580      	push	{r7, lr}
 800543a:	b086      	sub	sp, #24
 800543c:	af00      	add	r7, sp, #0
 800543e:	60f8      	str	r0, [r7, #12]
 8005440:	60b9      	str	r1, [r7, #8]
 8005442:	607a      	str	r2, [r7, #4]
 8005444:	603b      	str	r3, [r7, #0]
 8005446:	2300      	movs	r3, #0
 8005448:	617b      	str	r3, [r7, #20]
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	68ba      	ldr	r2, [r7, #8]
 800544e:	605a      	str	r2, [r3, #4]
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	68fa      	ldr	r2, [r7, #12]
 8005454:	611a      	str	r2, [r3, #16]
 8005456:	68ba      	ldr	r2, [r7, #8]
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	429a      	cmp	r2, r3
 800545c:	d812      	bhi.n	8005484 <prvInsertTimerInActiveList+0x4c>
 800545e:	687a      	ldr	r2, [r7, #4]
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	1ad2      	subs	r2, r2, r3
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	699b      	ldr	r3, [r3, #24]
 8005468:	429a      	cmp	r2, r3
 800546a:	d302      	bcc.n	8005472 <prvInsertTimerInActiveList+0x3a>
 800546c:	2301      	movs	r3, #1
 800546e:	617b      	str	r3, [r7, #20]
 8005470:	e01b      	b.n	80054aa <prvInsertTimerInActiveList+0x72>
 8005472:	4b10      	ldr	r3, [pc, #64]	; (80054b4 <prvInsertTimerInActiveList+0x7c>)
 8005474:	681a      	ldr	r2, [r3, #0]
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	3304      	adds	r3, #4
 800547a:	4619      	mov	r1, r3
 800547c:	4610      	mov	r0, r2
 800547e:	f7fe fa08 	bl	8003892 <vListInsert>
 8005482:	e012      	b.n	80054aa <prvInsertTimerInActiveList+0x72>
 8005484:	687a      	ldr	r2, [r7, #4]
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	429a      	cmp	r2, r3
 800548a:	d206      	bcs.n	800549a <prvInsertTimerInActiveList+0x62>
 800548c:	68ba      	ldr	r2, [r7, #8]
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	429a      	cmp	r2, r3
 8005492:	d302      	bcc.n	800549a <prvInsertTimerInActiveList+0x62>
 8005494:	2301      	movs	r3, #1
 8005496:	617b      	str	r3, [r7, #20]
 8005498:	e007      	b.n	80054aa <prvInsertTimerInActiveList+0x72>
 800549a:	4b07      	ldr	r3, [pc, #28]	; (80054b8 <prvInsertTimerInActiveList+0x80>)
 800549c:	681a      	ldr	r2, [r3, #0]
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	3304      	adds	r3, #4
 80054a2:	4619      	mov	r1, r3
 80054a4:	4610      	mov	r0, r2
 80054a6:	f7fe f9f4 	bl	8003892 <vListInsert>
 80054aa:	697b      	ldr	r3, [r7, #20]
 80054ac:	4618      	mov	r0, r3
 80054ae:	3718      	adds	r7, #24
 80054b0:	46bd      	mov	sp, r7
 80054b2:	bd80      	pop	{r7, pc}
 80054b4:	20000d20 	.word	0x20000d20
 80054b8:	20000d1c 	.word	0x20000d1c

080054bc <prvProcessReceivedCommands>:
 80054bc:	b580      	push	{r7, lr}
 80054be:	b08e      	sub	sp, #56	; 0x38
 80054c0:	af02      	add	r7, sp, #8
 80054c2:	e0ca      	b.n	800565a <prvProcessReceivedCommands+0x19e>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	da18      	bge.n	80054fc <prvProcessReceivedCommands+0x40>
 80054ca:	1d3b      	adds	r3, r7, #4
 80054cc:	3304      	adds	r3, #4
 80054ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80054d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d10a      	bne.n	80054ec <prvProcessReceivedCommands+0x30>
 80054d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054da:	f383 8811 	msr	BASEPRI, r3
 80054de:	f3bf 8f6f 	isb	sy
 80054e2:	f3bf 8f4f 	dsb	sy
 80054e6:	61fb      	str	r3, [r7, #28]
 80054e8:	bf00      	nop
 80054ea:	e7fe      	b.n	80054ea <prvProcessReceivedCommands+0x2e>
 80054ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80054f2:	6850      	ldr	r0, [r2, #4]
 80054f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80054f6:	6892      	ldr	r2, [r2, #8]
 80054f8:	4611      	mov	r1, r2
 80054fa:	4798      	blx	r3
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	f2c0 80ab 	blt.w	800565a <prvProcessReceivedCommands+0x19e>
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	62bb      	str	r3, [r7, #40]	; 0x28
 8005508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800550a:	695b      	ldr	r3, [r3, #20]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d004      	beq.n	800551a <prvProcessReceivedCommands+0x5e>
 8005510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005512:	3304      	adds	r3, #4
 8005514:	4618      	mov	r0, r3
 8005516:	f7fe f9f5 	bl	8003904 <uxListRemove>
 800551a:	463b      	mov	r3, r7
 800551c:	4618      	mov	r0, r3
 800551e:	f7ff ff6b 	bl	80053f8 <prvSampleTimeNow>
 8005522:	6278      	str	r0, [r7, #36]	; 0x24
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2b09      	cmp	r3, #9
 8005528:	f200 8096 	bhi.w	8005658 <prvProcessReceivedCommands+0x19c>
 800552c:	a201      	add	r2, pc, #4	; (adr r2, 8005534 <prvProcessReceivedCommands+0x78>)
 800552e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005532:	bf00      	nop
 8005534:	0800555d 	.word	0x0800555d
 8005538:	0800555d 	.word	0x0800555d
 800553c:	0800555d 	.word	0x0800555d
 8005540:	080055d1 	.word	0x080055d1
 8005544:	080055e5 	.word	0x080055e5
 8005548:	0800562f 	.word	0x0800562f
 800554c:	0800555d 	.word	0x0800555d
 8005550:	0800555d 	.word	0x0800555d
 8005554:	080055d1 	.word	0x080055d1
 8005558:	080055e5 	.word	0x080055e5
 800555c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800555e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005562:	f043 0301 	orr.w	r3, r3, #1
 8005566:	b2da      	uxtb	r2, r3
 8005568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800556a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800556e:	68ba      	ldr	r2, [r7, #8]
 8005570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005572:	699b      	ldr	r3, [r3, #24]
 8005574:	18d1      	adds	r1, r2, r3
 8005576:	68bb      	ldr	r3, [r7, #8]
 8005578:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800557a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800557c:	f7ff ff5c 	bl	8005438 <prvInsertTimerInActiveList>
 8005580:	4603      	mov	r3, r0
 8005582:	2b00      	cmp	r3, #0
 8005584:	d069      	beq.n	800565a <prvProcessReceivedCommands+0x19e>
 8005586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005588:	6a1b      	ldr	r3, [r3, #32]
 800558a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800558c:	4798      	blx	r3
 800558e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005590:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005594:	f003 0304 	and.w	r3, r3, #4
 8005598:	2b00      	cmp	r3, #0
 800559a:	d05e      	beq.n	800565a <prvProcessReceivedCommands+0x19e>
 800559c:	68ba      	ldr	r2, [r7, #8]
 800559e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055a0:	699b      	ldr	r3, [r3, #24]
 80055a2:	441a      	add	r2, r3
 80055a4:	2300      	movs	r3, #0
 80055a6:	9300      	str	r3, [sp, #0]
 80055a8:	2300      	movs	r3, #0
 80055aa:	2100      	movs	r1, #0
 80055ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80055ae:	f7ff fe05 	bl	80051bc <xTimerGenericCommand>
 80055b2:	6238      	str	r0, [r7, #32]
 80055b4:	6a3b      	ldr	r3, [r7, #32]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d14f      	bne.n	800565a <prvProcessReceivedCommands+0x19e>
 80055ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055be:	f383 8811 	msr	BASEPRI, r3
 80055c2:	f3bf 8f6f 	isb	sy
 80055c6:	f3bf 8f4f 	dsb	sy
 80055ca:	61bb      	str	r3, [r7, #24]
 80055cc:	bf00      	nop
 80055ce:	e7fe      	b.n	80055ce <prvProcessReceivedCommands+0x112>
 80055d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055d2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80055d6:	f023 0301 	bic.w	r3, r3, #1
 80055da:	b2da      	uxtb	r2, r3
 80055dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 80055e2:	e03a      	b.n	800565a <prvProcessReceivedCommands+0x19e>
 80055e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055e6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80055ea:	f043 0301 	orr.w	r3, r3, #1
 80055ee:	b2da      	uxtb	r2, r3
 80055f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055f2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 80055f6:	68ba      	ldr	r2, [r7, #8]
 80055f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055fa:	619a      	str	r2, [r3, #24]
 80055fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055fe:	699b      	ldr	r3, [r3, #24]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d10a      	bne.n	800561a <prvProcessReceivedCommands+0x15e>
 8005604:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005608:	f383 8811 	msr	BASEPRI, r3
 800560c:	f3bf 8f6f 	isb	sy
 8005610:	f3bf 8f4f 	dsb	sy
 8005614:	617b      	str	r3, [r7, #20]
 8005616:	bf00      	nop
 8005618:	e7fe      	b.n	8005618 <prvProcessReceivedCommands+0x15c>
 800561a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800561c:	699a      	ldr	r2, [r3, #24]
 800561e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005620:	18d1      	adds	r1, r2, r3
 8005622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005624:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005626:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005628:	f7ff ff06 	bl	8005438 <prvInsertTimerInActiveList>
 800562c:	e015      	b.n	800565a <prvProcessReceivedCommands+0x19e>
 800562e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005630:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005634:	f003 0302 	and.w	r3, r3, #2
 8005638:	2b00      	cmp	r3, #0
 800563a:	d103      	bne.n	8005644 <prvProcessReceivedCommands+0x188>
 800563c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800563e:	f000 fbdf 	bl	8005e00 <vPortFree>
 8005642:	e00a      	b.n	800565a <prvProcessReceivedCommands+0x19e>
 8005644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005646:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800564a:	f023 0301 	bic.w	r3, r3, #1
 800564e:	b2da      	uxtb	r2, r3
 8005650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005652:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8005656:	e000      	b.n	800565a <prvProcessReceivedCommands+0x19e>
 8005658:	bf00      	nop
 800565a:	4b08      	ldr	r3, [pc, #32]	; (800567c <prvProcessReceivedCommands+0x1c0>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	1d39      	adds	r1, r7, #4
 8005660:	2200      	movs	r2, #0
 8005662:	4618      	mov	r0, r3
 8005664:	f7fe fc16 	bl	8003e94 <xQueueReceive>
 8005668:	4603      	mov	r3, r0
 800566a:	2b00      	cmp	r3, #0
 800566c:	f47f af2a 	bne.w	80054c4 <prvProcessReceivedCommands+0x8>
 8005670:	bf00      	nop
 8005672:	bf00      	nop
 8005674:	3730      	adds	r7, #48	; 0x30
 8005676:	46bd      	mov	sp, r7
 8005678:	bd80      	pop	{r7, pc}
 800567a:	bf00      	nop
 800567c:	20000d24 	.word	0x20000d24

08005680 <prvSwitchTimerLists>:
 8005680:	b580      	push	{r7, lr}
 8005682:	b088      	sub	sp, #32
 8005684:	af02      	add	r7, sp, #8
 8005686:	e048      	b.n	800571a <prvSwitchTimerLists+0x9a>
 8005688:	4b2d      	ldr	r3, [pc, #180]	; (8005740 <prvSwitchTimerLists+0xc0>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	68db      	ldr	r3, [r3, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	613b      	str	r3, [r7, #16]
 8005692:	4b2b      	ldr	r3, [pc, #172]	; (8005740 <prvSwitchTimerLists+0xc0>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	68db      	ldr	r3, [r3, #12]
 8005698:	68db      	ldr	r3, [r3, #12]
 800569a:	60fb      	str	r3, [r7, #12]
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	3304      	adds	r3, #4
 80056a0:	4618      	mov	r0, r3
 80056a2:	f7fe f92f 	bl	8003904 <uxListRemove>
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	6a1b      	ldr	r3, [r3, #32]
 80056aa:	68f8      	ldr	r0, [r7, #12]
 80056ac:	4798      	blx	r3
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80056b4:	f003 0304 	and.w	r3, r3, #4
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d02e      	beq.n	800571a <prvSwitchTimerLists+0x9a>
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	699b      	ldr	r3, [r3, #24]
 80056c0:	693a      	ldr	r2, [r7, #16]
 80056c2:	4413      	add	r3, r2
 80056c4:	60bb      	str	r3, [r7, #8]
 80056c6:	68ba      	ldr	r2, [r7, #8]
 80056c8:	693b      	ldr	r3, [r7, #16]
 80056ca:	429a      	cmp	r2, r3
 80056cc:	d90e      	bls.n	80056ec <prvSwitchTimerLists+0x6c>
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	68ba      	ldr	r2, [r7, #8]
 80056d2:	605a      	str	r2, [r3, #4]
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	68fa      	ldr	r2, [r7, #12]
 80056d8:	611a      	str	r2, [r3, #16]
 80056da:	4b19      	ldr	r3, [pc, #100]	; (8005740 <prvSwitchTimerLists+0xc0>)
 80056dc:	681a      	ldr	r2, [r3, #0]
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	3304      	adds	r3, #4
 80056e2:	4619      	mov	r1, r3
 80056e4:	4610      	mov	r0, r2
 80056e6:	f7fe f8d4 	bl	8003892 <vListInsert>
 80056ea:	e016      	b.n	800571a <prvSwitchTimerLists+0x9a>
 80056ec:	2300      	movs	r3, #0
 80056ee:	9300      	str	r3, [sp, #0]
 80056f0:	2300      	movs	r3, #0
 80056f2:	693a      	ldr	r2, [r7, #16]
 80056f4:	2100      	movs	r1, #0
 80056f6:	68f8      	ldr	r0, [r7, #12]
 80056f8:	f7ff fd60 	bl	80051bc <xTimerGenericCommand>
 80056fc:	6078      	str	r0, [r7, #4]
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d10a      	bne.n	800571a <prvSwitchTimerLists+0x9a>
 8005704:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005708:	f383 8811 	msr	BASEPRI, r3
 800570c:	f3bf 8f6f 	isb	sy
 8005710:	f3bf 8f4f 	dsb	sy
 8005714:	603b      	str	r3, [r7, #0]
 8005716:	bf00      	nop
 8005718:	e7fe      	b.n	8005718 <prvSwitchTimerLists+0x98>
 800571a:	4b09      	ldr	r3, [pc, #36]	; (8005740 <prvSwitchTimerLists+0xc0>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d1b1      	bne.n	8005688 <prvSwitchTimerLists+0x8>
 8005724:	4b06      	ldr	r3, [pc, #24]	; (8005740 <prvSwitchTimerLists+0xc0>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	617b      	str	r3, [r7, #20]
 800572a:	4b06      	ldr	r3, [pc, #24]	; (8005744 <prvSwitchTimerLists+0xc4>)
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	4a04      	ldr	r2, [pc, #16]	; (8005740 <prvSwitchTimerLists+0xc0>)
 8005730:	6013      	str	r3, [r2, #0]
 8005732:	4a04      	ldr	r2, [pc, #16]	; (8005744 <prvSwitchTimerLists+0xc4>)
 8005734:	697b      	ldr	r3, [r7, #20]
 8005736:	6013      	str	r3, [r2, #0]
 8005738:	bf00      	nop
 800573a:	3718      	adds	r7, #24
 800573c:	46bd      	mov	sp, r7
 800573e:	bd80      	pop	{r7, pc}
 8005740:	20000d1c 	.word	0x20000d1c
 8005744:	20000d20 	.word	0x20000d20

08005748 <prvCheckForValidListAndQueue>:
 8005748:	b580      	push	{r7, lr}
 800574a:	b082      	sub	sp, #8
 800574c:	af02      	add	r7, sp, #8
 800574e:	f000 f969 	bl	8005a24 <vPortEnterCritical>
 8005752:	4b15      	ldr	r3, [pc, #84]	; (80057a8 <prvCheckForValidListAndQueue+0x60>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d120      	bne.n	800579c <prvCheckForValidListAndQueue+0x54>
 800575a:	4814      	ldr	r0, [pc, #80]	; (80057ac <prvCheckForValidListAndQueue+0x64>)
 800575c:	f7fe f848 	bl	80037f0 <vListInitialise>
 8005760:	4813      	ldr	r0, [pc, #76]	; (80057b0 <prvCheckForValidListAndQueue+0x68>)
 8005762:	f7fe f845 	bl	80037f0 <vListInitialise>
 8005766:	4b13      	ldr	r3, [pc, #76]	; (80057b4 <prvCheckForValidListAndQueue+0x6c>)
 8005768:	4a10      	ldr	r2, [pc, #64]	; (80057ac <prvCheckForValidListAndQueue+0x64>)
 800576a:	601a      	str	r2, [r3, #0]
 800576c:	4b12      	ldr	r3, [pc, #72]	; (80057b8 <prvCheckForValidListAndQueue+0x70>)
 800576e:	4a10      	ldr	r2, [pc, #64]	; (80057b0 <prvCheckForValidListAndQueue+0x68>)
 8005770:	601a      	str	r2, [r3, #0]
 8005772:	2300      	movs	r3, #0
 8005774:	9300      	str	r3, [sp, #0]
 8005776:	4b11      	ldr	r3, [pc, #68]	; (80057bc <prvCheckForValidListAndQueue+0x74>)
 8005778:	4a11      	ldr	r2, [pc, #68]	; (80057c0 <prvCheckForValidListAndQueue+0x78>)
 800577a:	2110      	movs	r1, #16
 800577c:	200a      	movs	r0, #10
 800577e:	f7fe f953 	bl	8003a28 <xQueueGenericCreateStatic>
 8005782:	4603      	mov	r3, r0
 8005784:	4a08      	ldr	r2, [pc, #32]	; (80057a8 <prvCheckForValidListAndQueue+0x60>)
 8005786:	6013      	str	r3, [r2, #0]
 8005788:	4b07      	ldr	r3, [pc, #28]	; (80057a8 <prvCheckForValidListAndQueue+0x60>)
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d005      	beq.n	800579c <prvCheckForValidListAndQueue+0x54>
 8005790:	4b05      	ldr	r3, [pc, #20]	; (80057a8 <prvCheckForValidListAndQueue+0x60>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	490b      	ldr	r1, [pc, #44]	; (80057c4 <prvCheckForValidListAndQueue+0x7c>)
 8005796:	4618      	mov	r0, r3
 8005798:	f7fe fd6c 	bl	8004274 <vQueueAddToRegistry>
 800579c:	f000 f972 	bl	8005a84 <vPortExitCritical>
 80057a0:	bf00      	nop
 80057a2:	46bd      	mov	sp, r7
 80057a4:	bd80      	pop	{r7, pc}
 80057a6:	bf00      	nop
 80057a8:	20000d24 	.word	0x20000d24
 80057ac:	20000cf4 	.word	0x20000cf4
 80057b0:	20000d08 	.word	0x20000d08
 80057b4:	20000d1c 	.word	0x20000d1c
 80057b8:	20000d20 	.word	0x20000d20
 80057bc:	20000dd0 	.word	0x20000dd0
 80057c0:	20000d30 	.word	0x20000d30
 80057c4:	0800611c 	.word	0x0800611c

080057c8 <pxPortInitialiseStack>:
 80057c8:	b480      	push	{r7}
 80057ca:	b085      	sub	sp, #20
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	60f8      	str	r0, [r7, #12]
 80057d0:	60b9      	str	r1, [r7, #8]
 80057d2:	607a      	str	r2, [r7, #4]
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	3b04      	subs	r3, #4
 80057d8:	60fb      	str	r3, [r7, #12]
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80057e0:	601a      	str	r2, [r3, #0]
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	3b04      	subs	r3, #4
 80057e6:	60fb      	str	r3, [r7, #12]
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	f023 0201 	bic.w	r2, r3, #1
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	601a      	str	r2, [r3, #0]
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	3b04      	subs	r3, #4
 80057f6:	60fb      	str	r3, [r7, #12]
 80057f8:	4a0c      	ldr	r2, [pc, #48]	; (800582c <pxPortInitialiseStack+0x64>)
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	601a      	str	r2, [r3, #0]
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	3b14      	subs	r3, #20
 8005802:	60fb      	str	r3, [r7, #12]
 8005804:	687a      	ldr	r2, [r7, #4]
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	601a      	str	r2, [r3, #0]
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	3b04      	subs	r3, #4
 800580e:	60fb      	str	r3, [r7, #12]
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	f06f 0202 	mvn.w	r2, #2
 8005816:	601a      	str	r2, [r3, #0]
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	3b20      	subs	r3, #32
 800581c:	60fb      	str	r3, [r7, #12]
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	4618      	mov	r0, r3
 8005822:	3714      	adds	r7, #20
 8005824:	46bd      	mov	sp, r7
 8005826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582a:	4770      	bx	lr
 800582c:	08005831 	.word	0x08005831

08005830 <prvTaskExitError>:
 8005830:	b480      	push	{r7}
 8005832:	b085      	sub	sp, #20
 8005834:	af00      	add	r7, sp, #0
 8005836:	2300      	movs	r3, #0
 8005838:	607b      	str	r3, [r7, #4]
 800583a:	4b12      	ldr	r3, [pc, #72]	; (8005884 <prvTaskExitError+0x54>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005842:	d00a      	beq.n	800585a <prvTaskExitError+0x2a>
 8005844:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005848:	f383 8811 	msr	BASEPRI, r3
 800584c:	f3bf 8f6f 	isb	sy
 8005850:	f3bf 8f4f 	dsb	sy
 8005854:	60fb      	str	r3, [r7, #12]
 8005856:	bf00      	nop
 8005858:	e7fe      	b.n	8005858 <prvTaskExitError+0x28>
 800585a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800585e:	f383 8811 	msr	BASEPRI, r3
 8005862:	f3bf 8f6f 	isb	sy
 8005866:	f3bf 8f4f 	dsb	sy
 800586a:	60bb      	str	r3, [r7, #8]
 800586c:	bf00      	nop
 800586e:	bf00      	nop
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d0fc      	beq.n	8005870 <prvTaskExitError+0x40>
 8005876:	bf00      	nop
 8005878:	bf00      	nop
 800587a:	3714      	adds	r7, #20
 800587c:	46bd      	mov	sp, r7
 800587e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005882:	4770      	bx	lr
 8005884:	20000010 	.word	0x20000010
	...

08005890 <SVC_Handler>:
 8005890:	4b07      	ldr	r3, [pc, #28]	; (80058b0 <pxCurrentTCBConst2>)
 8005892:	6819      	ldr	r1, [r3, #0]
 8005894:	6808      	ldr	r0, [r1, #0]
 8005896:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800589a:	f380 8809 	msr	PSP, r0
 800589e:	f3bf 8f6f 	isb	sy
 80058a2:	f04f 0000 	mov.w	r0, #0
 80058a6:	f380 8811 	msr	BASEPRI, r0
 80058aa:	4770      	bx	lr
 80058ac:	f3af 8000 	nop.w

080058b0 <pxCurrentTCBConst2>:
 80058b0:	200007f4 	.word	0x200007f4
 80058b4:	bf00      	nop
 80058b6:	bf00      	nop

080058b8 <prvPortStartFirstTask>:
 80058b8:	4808      	ldr	r0, [pc, #32]	; (80058dc <prvPortStartFirstTask+0x24>)
 80058ba:	6800      	ldr	r0, [r0, #0]
 80058bc:	6800      	ldr	r0, [r0, #0]
 80058be:	f380 8808 	msr	MSP, r0
 80058c2:	f04f 0000 	mov.w	r0, #0
 80058c6:	f380 8814 	msr	CONTROL, r0
 80058ca:	b662      	cpsie	i
 80058cc:	b661      	cpsie	f
 80058ce:	f3bf 8f4f 	dsb	sy
 80058d2:	f3bf 8f6f 	isb	sy
 80058d6:	df00      	svc	0
 80058d8:	bf00      	nop
 80058da:	bf00      	nop
 80058dc:	e000ed08 	.word	0xe000ed08

080058e0 <xPortStartScheduler>:
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b086      	sub	sp, #24
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	4b46      	ldr	r3, [pc, #280]	; (8005a00 <xPortStartScheduler+0x120>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	4a46      	ldr	r2, [pc, #280]	; (8005a04 <xPortStartScheduler+0x124>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d10a      	bne.n	8005906 <xPortStartScheduler+0x26>
 80058f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058f4:	f383 8811 	msr	BASEPRI, r3
 80058f8:	f3bf 8f6f 	isb	sy
 80058fc:	f3bf 8f4f 	dsb	sy
 8005900:	613b      	str	r3, [r7, #16]
 8005902:	bf00      	nop
 8005904:	e7fe      	b.n	8005904 <xPortStartScheduler+0x24>
 8005906:	4b3e      	ldr	r3, [pc, #248]	; (8005a00 <xPortStartScheduler+0x120>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4a3f      	ldr	r2, [pc, #252]	; (8005a08 <xPortStartScheduler+0x128>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d10a      	bne.n	8005926 <xPortStartScheduler+0x46>
 8005910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005914:	f383 8811 	msr	BASEPRI, r3
 8005918:	f3bf 8f6f 	isb	sy
 800591c:	f3bf 8f4f 	dsb	sy
 8005920:	60fb      	str	r3, [r7, #12]
 8005922:	bf00      	nop
 8005924:	e7fe      	b.n	8005924 <xPortStartScheduler+0x44>
 8005926:	4b39      	ldr	r3, [pc, #228]	; (8005a0c <xPortStartScheduler+0x12c>)
 8005928:	617b      	str	r3, [r7, #20]
 800592a:	697b      	ldr	r3, [r7, #20]
 800592c:	781b      	ldrb	r3, [r3, #0]
 800592e:	b2db      	uxtb	r3, r3
 8005930:	607b      	str	r3, [r7, #4]
 8005932:	697b      	ldr	r3, [r7, #20]
 8005934:	22ff      	movs	r2, #255	; 0xff
 8005936:	701a      	strb	r2, [r3, #0]
 8005938:	697b      	ldr	r3, [r7, #20]
 800593a:	781b      	ldrb	r3, [r3, #0]
 800593c:	b2db      	uxtb	r3, r3
 800593e:	70fb      	strb	r3, [r7, #3]
 8005940:	78fb      	ldrb	r3, [r7, #3]
 8005942:	b2db      	uxtb	r3, r3
 8005944:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005948:	b2da      	uxtb	r2, r3
 800594a:	4b31      	ldr	r3, [pc, #196]	; (8005a10 <xPortStartScheduler+0x130>)
 800594c:	701a      	strb	r2, [r3, #0]
 800594e:	4b31      	ldr	r3, [pc, #196]	; (8005a14 <xPortStartScheduler+0x134>)
 8005950:	2207      	movs	r2, #7
 8005952:	601a      	str	r2, [r3, #0]
 8005954:	e009      	b.n	800596a <xPortStartScheduler+0x8a>
 8005956:	4b2f      	ldr	r3, [pc, #188]	; (8005a14 <xPortStartScheduler+0x134>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	3b01      	subs	r3, #1
 800595c:	4a2d      	ldr	r2, [pc, #180]	; (8005a14 <xPortStartScheduler+0x134>)
 800595e:	6013      	str	r3, [r2, #0]
 8005960:	78fb      	ldrb	r3, [r7, #3]
 8005962:	b2db      	uxtb	r3, r3
 8005964:	005b      	lsls	r3, r3, #1
 8005966:	b2db      	uxtb	r3, r3
 8005968:	70fb      	strb	r3, [r7, #3]
 800596a:	78fb      	ldrb	r3, [r7, #3]
 800596c:	b2db      	uxtb	r3, r3
 800596e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005972:	2b80      	cmp	r3, #128	; 0x80
 8005974:	d0ef      	beq.n	8005956 <xPortStartScheduler+0x76>
 8005976:	4b27      	ldr	r3, [pc, #156]	; (8005a14 <xPortStartScheduler+0x134>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f1c3 0307 	rsb	r3, r3, #7
 800597e:	2b04      	cmp	r3, #4
 8005980:	d00a      	beq.n	8005998 <xPortStartScheduler+0xb8>
 8005982:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005986:	f383 8811 	msr	BASEPRI, r3
 800598a:	f3bf 8f6f 	isb	sy
 800598e:	f3bf 8f4f 	dsb	sy
 8005992:	60bb      	str	r3, [r7, #8]
 8005994:	bf00      	nop
 8005996:	e7fe      	b.n	8005996 <xPortStartScheduler+0xb6>
 8005998:	4b1e      	ldr	r3, [pc, #120]	; (8005a14 <xPortStartScheduler+0x134>)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	021b      	lsls	r3, r3, #8
 800599e:	4a1d      	ldr	r2, [pc, #116]	; (8005a14 <xPortStartScheduler+0x134>)
 80059a0:	6013      	str	r3, [r2, #0]
 80059a2:	4b1c      	ldr	r3, [pc, #112]	; (8005a14 <xPortStartScheduler+0x134>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80059aa:	4a1a      	ldr	r2, [pc, #104]	; (8005a14 <xPortStartScheduler+0x134>)
 80059ac:	6013      	str	r3, [r2, #0]
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	b2da      	uxtb	r2, r3
 80059b2:	697b      	ldr	r3, [r7, #20]
 80059b4:	701a      	strb	r2, [r3, #0]
 80059b6:	4b18      	ldr	r3, [pc, #96]	; (8005a18 <xPortStartScheduler+0x138>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4a17      	ldr	r2, [pc, #92]	; (8005a18 <xPortStartScheduler+0x138>)
 80059bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80059c0:	6013      	str	r3, [r2, #0]
 80059c2:	4b15      	ldr	r3, [pc, #84]	; (8005a18 <xPortStartScheduler+0x138>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4a14      	ldr	r2, [pc, #80]	; (8005a18 <xPortStartScheduler+0x138>)
 80059c8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80059cc:	6013      	str	r3, [r2, #0]
 80059ce:	f000 f8dd 	bl	8005b8c <vPortSetupTimerInterrupt>
 80059d2:	4b12      	ldr	r3, [pc, #72]	; (8005a1c <xPortStartScheduler+0x13c>)
 80059d4:	2200      	movs	r2, #0
 80059d6:	601a      	str	r2, [r3, #0]
 80059d8:	f000 f8fc 	bl	8005bd4 <vPortEnableVFP>
 80059dc:	4b10      	ldr	r3, [pc, #64]	; (8005a20 <xPortStartScheduler+0x140>)
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4a0f      	ldr	r2, [pc, #60]	; (8005a20 <xPortStartScheduler+0x140>)
 80059e2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80059e6:	6013      	str	r3, [r2, #0]
 80059e8:	f7ff ff66 	bl	80058b8 <prvPortStartFirstTask>
 80059ec:	f7ff f852 	bl	8004a94 <vTaskSwitchContext>
 80059f0:	f7ff ff1e 	bl	8005830 <prvTaskExitError>
 80059f4:	2300      	movs	r3, #0
 80059f6:	4618      	mov	r0, r3
 80059f8:	3718      	adds	r7, #24
 80059fa:	46bd      	mov	sp, r7
 80059fc:	bd80      	pop	{r7, pc}
 80059fe:	bf00      	nop
 8005a00:	e000ed00 	.word	0xe000ed00
 8005a04:	410fc271 	.word	0x410fc271
 8005a08:	410fc270 	.word	0x410fc270
 8005a0c:	e000e400 	.word	0xe000e400
 8005a10:	20000e20 	.word	0x20000e20
 8005a14:	20000e24 	.word	0x20000e24
 8005a18:	e000ed20 	.word	0xe000ed20
 8005a1c:	20000010 	.word	0x20000010
 8005a20:	e000ef34 	.word	0xe000ef34

08005a24 <vPortEnterCritical>:
 8005a24:	b480      	push	{r7}
 8005a26:	b083      	sub	sp, #12
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a2e:	f383 8811 	msr	BASEPRI, r3
 8005a32:	f3bf 8f6f 	isb	sy
 8005a36:	f3bf 8f4f 	dsb	sy
 8005a3a:	607b      	str	r3, [r7, #4]
 8005a3c:	bf00      	nop
 8005a3e:	4b0f      	ldr	r3, [pc, #60]	; (8005a7c <vPortEnterCritical+0x58>)
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	3301      	adds	r3, #1
 8005a44:	4a0d      	ldr	r2, [pc, #52]	; (8005a7c <vPortEnterCritical+0x58>)
 8005a46:	6013      	str	r3, [r2, #0]
 8005a48:	4b0c      	ldr	r3, [pc, #48]	; (8005a7c <vPortEnterCritical+0x58>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	2b01      	cmp	r3, #1
 8005a4e:	d10f      	bne.n	8005a70 <vPortEnterCritical+0x4c>
 8005a50:	4b0b      	ldr	r3, [pc, #44]	; (8005a80 <vPortEnterCritical+0x5c>)
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	b2db      	uxtb	r3, r3
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d00a      	beq.n	8005a70 <vPortEnterCritical+0x4c>
 8005a5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a5e:	f383 8811 	msr	BASEPRI, r3
 8005a62:	f3bf 8f6f 	isb	sy
 8005a66:	f3bf 8f4f 	dsb	sy
 8005a6a:	603b      	str	r3, [r7, #0]
 8005a6c:	bf00      	nop
 8005a6e:	e7fe      	b.n	8005a6e <vPortEnterCritical+0x4a>
 8005a70:	bf00      	nop
 8005a72:	370c      	adds	r7, #12
 8005a74:	46bd      	mov	sp, r7
 8005a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7a:	4770      	bx	lr
 8005a7c:	20000010 	.word	0x20000010
 8005a80:	e000ed04 	.word	0xe000ed04

08005a84 <vPortExitCritical>:
 8005a84:	b480      	push	{r7}
 8005a86:	b083      	sub	sp, #12
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	4b12      	ldr	r3, [pc, #72]	; (8005ad4 <vPortExitCritical+0x50>)
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d10a      	bne.n	8005aa8 <vPortExitCritical+0x24>
 8005a92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a96:	f383 8811 	msr	BASEPRI, r3
 8005a9a:	f3bf 8f6f 	isb	sy
 8005a9e:	f3bf 8f4f 	dsb	sy
 8005aa2:	607b      	str	r3, [r7, #4]
 8005aa4:	bf00      	nop
 8005aa6:	e7fe      	b.n	8005aa6 <vPortExitCritical+0x22>
 8005aa8:	4b0a      	ldr	r3, [pc, #40]	; (8005ad4 <vPortExitCritical+0x50>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	3b01      	subs	r3, #1
 8005aae:	4a09      	ldr	r2, [pc, #36]	; (8005ad4 <vPortExitCritical+0x50>)
 8005ab0:	6013      	str	r3, [r2, #0]
 8005ab2:	4b08      	ldr	r3, [pc, #32]	; (8005ad4 <vPortExitCritical+0x50>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d105      	bne.n	8005ac6 <vPortExitCritical+0x42>
 8005aba:	2300      	movs	r3, #0
 8005abc:	603b      	str	r3, [r7, #0]
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	f383 8811 	msr	BASEPRI, r3
 8005ac4:	bf00      	nop
 8005ac6:	bf00      	nop
 8005ac8:	370c      	adds	r7, #12
 8005aca:	46bd      	mov	sp, r7
 8005acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad0:	4770      	bx	lr
 8005ad2:	bf00      	nop
 8005ad4:	20000010 	.word	0x20000010
	...

08005ae0 <PendSV_Handler>:
 8005ae0:	f3ef 8009 	mrs	r0, PSP
 8005ae4:	f3bf 8f6f 	isb	sy
 8005ae8:	4b15      	ldr	r3, [pc, #84]	; (8005b40 <pxCurrentTCBConst>)
 8005aea:	681a      	ldr	r2, [r3, #0]
 8005aec:	f01e 0f10 	tst.w	lr, #16
 8005af0:	bf08      	it	eq
 8005af2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005af6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005afa:	6010      	str	r0, [r2, #0]
 8005afc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005b00:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005b04:	f380 8811 	msr	BASEPRI, r0
 8005b08:	f3bf 8f4f 	dsb	sy
 8005b0c:	f3bf 8f6f 	isb	sy
 8005b10:	f7fe ffc0 	bl	8004a94 <vTaskSwitchContext>
 8005b14:	f04f 0000 	mov.w	r0, #0
 8005b18:	f380 8811 	msr	BASEPRI, r0
 8005b1c:	bc09      	pop	{r0, r3}
 8005b1e:	6819      	ldr	r1, [r3, #0]
 8005b20:	6808      	ldr	r0, [r1, #0]
 8005b22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b26:	f01e 0f10 	tst.w	lr, #16
 8005b2a:	bf08      	it	eq
 8005b2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005b30:	f380 8809 	msr	PSP, r0
 8005b34:	f3bf 8f6f 	isb	sy
 8005b38:	4770      	bx	lr
 8005b3a:	bf00      	nop
 8005b3c:	f3af 8000 	nop.w

08005b40 <pxCurrentTCBConst>:
 8005b40:	200007f4 	.word	0x200007f4
 8005b44:	bf00      	nop
 8005b46:	bf00      	nop

08005b48 <xPortSysTickHandler>:
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b082      	sub	sp, #8
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b52:	f383 8811 	msr	BASEPRI, r3
 8005b56:	f3bf 8f6f 	isb	sy
 8005b5a:	f3bf 8f4f 	dsb	sy
 8005b5e:	607b      	str	r3, [r7, #4]
 8005b60:	bf00      	nop
 8005b62:	f7fe fedd 	bl	8004920 <xTaskIncrementTick>
 8005b66:	4603      	mov	r3, r0
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d003      	beq.n	8005b74 <xPortSysTickHandler+0x2c>
 8005b6c:	4b06      	ldr	r3, [pc, #24]	; (8005b88 <xPortSysTickHandler+0x40>)
 8005b6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b72:	601a      	str	r2, [r3, #0]
 8005b74:	2300      	movs	r3, #0
 8005b76:	603b      	str	r3, [r7, #0]
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	f383 8811 	msr	BASEPRI, r3
 8005b7e:	bf00      	nop
 8005b80:	bf00      	nop
 8005b82:	3708      	adds	r7, #8
 8005b84:	46bd      	mov	sp, r7
 8005b86:	bd80      	pop	{r7, pc}
 8005b88:	e000ed04 	.word	0xe000ed04

08005b8c <vPortSetupTimerInterrupt>:
 8005b8c:	b480      	push	{r7}
 8005b8e:	af00      	add	r7, sp, #0
 8005b90:	4b0b      	ldr	r3, [pc, #44]	; (8005bc0 <vPortSetupTimerInterrupt+0x34>)
 8005b92:	2200      	movs	r2, #0
 8005b94:	601a      	str	r2, [r3, #0]
 8005b96:	4b0b      	ldr	r3, [pc, #44]	; (8005bc4 <vPortSetupTimerInterrupt+0x38>)
 8005b98:	2200      	movs	r2, #0
 8005b9a:	601a      	str	r2, [r3, #0]
 8005b9c:	4b0a      	ldr	r3, [pc, #40]	; (8005bc8 <vPortSetupTimerInterrupt+0x3c>)
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	4a0a      	ldr	r2, [pc, #40]	; (8005bcc <vPortSetupTimerInterrupt+0x40>)
 8005ba2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ba6:	099b      	lsrs	r3, r3, #6
 8005ba8:	4a09      	ldr	r2, [pc, #36]	; (8005bd0 <vPortSetupTimerInterrupt+0x44>)
 8005baa:	3b01      	subs	r3, #1
 8005bac:	6013      	str	r3, [r2, #0]
 8005bae:	4b04      	ldr	r3, [pc, #16]	; (8005bc0 <vPortSetupTimerInterrupt+0x34>)
 8005bb0:	2207      	movs	r2, #7
 8005bb2:	601a      	str	r2, [r3, #0]
 8005bb4:	bf00      	nop
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbc:	4770      	bx	lr
 8005bbe:	bf00      	nop
 8005bc0:	e000e010 	.word	0xe000e010
 8005bc4:	e000e018 	.word	0xe000e018
 8005bc8:	20000004 	.word	0x20000004
 8005bcc:	10624dd3 	.word	0x10624dd3
 8005bd0:	e000e014 	.word	0xe000e014

08005bd4 <vPortEnableVFP>:
 8005bd4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005be4 <vPortEnableVFP+0x10>
 8005bd8:	6801      	ldr	r1, [r0, #0]
 8005bda:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005bde:	6001      	str	r1, [r0, #0]
 8005be0:	4770      	bx	lr
 8005be2:	bf00      	nop
 8005be4:	e000ed88 	.word	0xe000ed88

08005be8 <vPortValidateInterruptPriority>:
 8005be8:	b480      	push	{r7}
 8005bea:	b085      	sub	sp, #20
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	f3ef 8305 	mrs	r3, IPSR
 8005bf2:	60fb      	str	r3, [r7, #12]
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	2b0f      	cmp	r3, #15
 8005bf8:	d914      	bls.n	8005c24 <vPortValidateInterruptPriority+0x3c>
 8005bfa:	4a17      	ldr	r2, [pc, #92]	; (8005c58 <vPortValidateInterruptPriority+0x70>)
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	4413      	add	r3, r2
 8005c00:	781b      	ldrb	r3, [r3, #0]
 8005c02:	72fb      	strb	r3, [r7, #11]
 8005c04:	4b15      	ldr	r3, [pc, #84]	; (8005c5c <vPortValidateInterruptPriority+0x74>)
 8005c06:	781b      	ldrb	r3, [r3, #0]
 8005c08:	7afa      	ldrb	r2, [r7, #11]
 8005c0a:	429a      	cmp	r2, r3
 8005c0c:	d20a      	bcs.n	8005c24 <vPortValidateInterruptPriority+0x3c>
 8005c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c12:	f383 8811 	msr	BASEPRI, r3
 8005c16:	f3bf 8f6f 	isb	sy
 8005c1a:	f3bf 8f4f 	dsb	sy
 8005c1e:	607b      	str	r3, [r7, #4]
 8005c20:	bf00      	nop
 8005c22:	e7fe      	b.n	8005c22 <vPortValidateInterruptPriority+0x3a>
 8005c24:	4b0e      	ldr	r3, [pc, #56]	; (8005c60 <vPortValidateInterruptPriority+0x78>)
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005c2c:	4b0d      	ldr	r3, [pc, #52]	; (8005c64 <vPortValidateInterruptPriority+0x7c>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	429a      	cmp	r2, r3
 8005c32:	d90a      	bls.n	8005c4a <vPortValidateInterruptPriority+0x62>
 8005c34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c38:	f383 8811 	msr	BASEPRI, r3
 8005c3c:	f3bf 8f6f 	isb	sy
 8005c40:	f3bf 8f4f 	dsb	sy
 8005c44:	603b      	str	r3, [r7, #0]
 8005c46:	bf00      	nop
 8005c48:	e7fe      	b.n	8005c48 <vPortValidateInterruptPriority+0x60>
 8005c4a:	bf00      	nop
 8005c4c:	3714      	adds	r7, #20
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c54:	4770      	bx	lr
 8005c56:	bf00      	nop
 8005c58:	e000e3f0 	.word	0xe000e3f0
 8005c5c:	20000e20 	.word	0x20000e20
 8005c60:	e000ed0c 	.word	0xe000ed0c
 8005c64:	20000e24 	.word	0x20000e24

08005c68 <pvPortMalloc>:
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b08a      	sub	sp, #40	; 0x28
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
 8005c70:	2300      	movs	r3, #0
 8005c72:	61fb      	str	r3, [r7, #28]
 8005c74:	f7fe fd98 	bl	80047a8 <vTaskSuspendAll>
 8005c78:	4b5b      	ldr	r3, [pc, #364]	; (8005de8 <pvPortMalloc+0x180>)
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d101      	bne.n	8005c84 <pvPortMalloc+0x1c>
 8005c80:	f000 f920 	bl	8005ec4 <prvHeapInit>
 8005c84:	4b59      	ldr	r3, [pc, #356]	; (8005dec <pvPortMalloc+0x184>)
 8005c86:	681a      	ldr	r2, [r3, #0]
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	4013      	ands	r3, r2
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	f040 8093 	bne.w	8005db8 <pvPortMalloc+0x150>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d01d      	beq.n	8005cd4 <pvPortMalloc+0x6c>
 8005c98:	2208      	movs	r2, #8
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	4413      	add	r3, r2
 8005c9e:	607b      	str	r3, [r7, #4]
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	f003 0307 	and.w	r3, r3, #7
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d014      	beq.n	8005cd4 <pvPortMalloc+0x6c>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	f023 0307 	bic.w	r3, r3, #7
 8005cb0:	3308      	adds	r3, #8
 8005cb2:	607b      	str	r3, [r7, #4]
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	f003 0307 	and.w	r3, r3, #7
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d00a      	beq.n	8005cd4 <pvPortMalloc+0x6c>
 8005cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cc2:	f383 8811 	msr	BASEPRI, r3
 8005cc6:	f3bf 8f6f 	isb	sy
 8005cca:	f3bf 8f4f 	dsb	sy
 8005cce:	617b      	str	r3, [r7, #20]
 8005cd0:	bf00      	nop
 8005cd2:	e7fe      	b.n	8005cd2 <pvPortMalloc+0x6a>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d06e      	beq.n	8005db8 <pvPortMalloc+0x150>
 8005cda:	4b45      	ldr	r3, [pc, #276]	; (8005df0 <pvPortMalloc+0x188>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	687a      	ldr	r2, [r7, #4]
 8005ce0:	429a      	cmp	r2, r3
 8005ce2:	d869      	bhi.n	8005db8 <pvPortMalloc+0x150>
 8005ce4:	4b43      	ldr	r3, [pc, #268]	; (8005df4 <pvPortMalloc+0x18c>)
 8005ce6:	623b      	str	r3, [r7, #32]
 8005ce8:	4b42      	ldr	r3, [pc, #264]	; (8005df4 <pvPortMalloc+0x18c>)
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	627b      	str	r3, [r7, #36]	; 0x24
 8005cee:	e004      	b.n	8005cfa <pvPortMalloc+0x92>
 8005cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf2:	623b      	str	r3, [r7, #32]
 8005cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	627b      	str	r3, [r7, #36]	; 0x24
 8005cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cfc:	685b      	ldr	r3, [r3, #4]
 8005cfe:	687a      	ldr	r2, [r7, #4]
 8005d00:	429a      	cmp	r2, r3
 8005d02:	d903      	bls.n	8005d0c <pvPortMalloc+0xa4>
 8005d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d1f1      	bne.n	8005cf0 <pvPortMalloc+0x88>
 8005d0c:	4b36      	ldr	r3, [pc, #216]	; (8005de8 <pvPortMalloc+0x180>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d12:	429a      	cmp	r2, r3
 8005d14:	d050      	beq.n	8005db8 <pvPortMalloc+0x150>
 8005d16:	6a3b      	ldr	r3, [r7, #32]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	2208      	movs	r2, #8
 8005d1c:	4413      	add	r3, r2
 8005d1e:	61fb      	str	r3, [r7, #28]
 8005d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d22:	681a      	ldr	r2, [r3, #0]
 8005d24:	6a3b      	ldr	r3, [r7, #32]
 8005d26:	601a      	str	r2, [r3, #0]
 8005d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d2a:	685a      	ldr	r2, [r3, #4]
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	1ad2      	subs	r2, r2, r3
 8005d30:	2308      	movs	r3, #8
 8005d32:	005b      	lsls	r3, r3, #1
 8005d34:	429a      	cmp	r2, r3
 8005d36:	d91f      	bls.n	8005d78 <pvPortMalloc+0x110>
 8005d38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	4413      	add	r3, r2
 8005d3e:	61bb      	str	r3, [r7, #24]
 8005d40:	69bb      	ldr	r3, [r7, #24]
 8005d42:	f003 0307 	and.w	r3, r3, #7
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d00a      	beq.n	8005d60 <pvPortMalloc+0xf8>
 8005d4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d4e:	f383 8811 	msr	BASEPRI, r3
 8005d52:	f3bf 8f6f 	isb	sy
 8005d56:	f3bf 8f4f 	dsb	sy
 8005d5a:	613b      	str	r3, [r7, #16]
 8005d5c:	bf00      	nop
 8005d5e:	e7fe      	b.n	8005d5e <pvPortMalloc+0xf6>
 8005d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d62:	685a      	ldr	r2, [r3, #4]
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	1ad2      	subs	r2, r2, r3
 8005d68:	69bb      	ldr	r3, [r7, #24]
 8005d6a:	605a      	str	r2, [r3, #4]
 8005d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d6e:	687a      	ldr	r2, [r7, #4]
 8005d70:	605a      	str	r2, [r3, #4]
 8005d72:	69b8      	ldr	r0, [r7, #24]
 8005d74:	f000 f908 	bl	8005f88 <prvInsertBlockIntoFreeList>
 8005d78:	4b1d      	ldr	r3, [pc, #116]	; (8005df0 <pvPortMalloc+0x188>)
 8005d7a:	681a      	ldr	r2, [r3, #0]
 8005d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d7e:	685b      	ldr	r3, [r3, #4]
 8005d80:	1ad3      	subs	r3, r2, r3
 8005d82:	4a1b      	ldr	r2, [pc, #108]	; (8005df0 <pvPortMalloc+0x188>)
 8005d84:	6013      	str	r3, [r2, #0]
 8005d86:	4b1a      	ldr	r3, [pc, #104]	; (8005df0 <pvPortMalloc+0x188>)
 8005d88:	681a      	ldr	r2, [r3, #0]
 8005d8a:	4b1b      	ldr	r3, [pc, #108]	; (8005df8 <pvPortMalloc+0x190>)
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	429a      	cmp	r2, r3
 8005d90:	d203      	bcs.n	8005d9a <pvPortMalloc+0x132>
 8005d92:	4b17      	ldr	r3, [pc, #92]	; (8005df0 <pvPortMalloc+0x188>)
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	4a18      	ldr	r2, [pc, #96]	; (8005df8 <pvPortMalloc+0x190>)
 8005d98:	6013      	str	r3, [r2, #0]
 8005d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d9c:	685a      	ldr	r2, [r3, #4]
 8005d9e:	4b13      	ldr	r3, [pc, #76]	; (8005dec <pvPortMalloc+0x184>)
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	431a      	orrs	r2, r3
 8005da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da6:	605a      	str	r2, [r3, #4]
 8005da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005daa:	2200      	movs	r2, #0
 8005dac:	601a      	str	r2, [r3, #0]
 8005dae:	4b13      	ldr	r3, [pc, #76]	; (8005dfc <pvPortMalloc+0x194>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	3301      	adds	r3, #1
 8005db4:	4a11      	ldr	r2, [pc, #68]	; (8005dfc <pvPortMalloc+0x194>)
 8005db6:	6013      	str	r3, [r2, #0]
 8005db8:	f7fe fd04 	bl	80047c4 <xTaskResumeAll>
 8005dbc:	69fb      	ldr	r3, [r7, #28]
 8005dbe:	f003 0307 	and.w	r3, r3, #7
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d00a      	beq.n	8005ddc <pvPortMalloc+0x174>
 8005dc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dca:	f383 8811 	msr	BASEPRI, r3
 8005dce:	f3bf 8f6f 	isb	sy
 8005dd2:	f3bf 8f4f 	dsb	sy
 8005dd6:	60fb      	str	r3, [r7, #12]
 8005dd8:	bf00      	nop
 8005dda:	e7fe      	b.n	8005dda <pvPortMalloc+0x172>
 8005ddc:	69fb      	ldr	r3, [r7, #28]
 8005dde:	4618      	mov	r0, r3
 8005de0:	3728      	adds	r7, #40	; 0x28
 8005de2:	46bd      	mov	sp, r7
 8005de4:	bd80      	pop	{r7, pc}
 8005de6:	bf00      	nop
 8005de8:	20004a30 	.word	0x20004a30
 8005dec:	20004a44 	.word	0x20004a44
 8005df0:	20004a34 	.word	0x20004a34
 8005df4:	20004a28 	.word	0x20004a28
 8005df8:	20004a38 	.word	0x20004a38
 8005dfc:	20004a3c 	.word	0x20004a3c

08005e00 <vPortFree>:
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b086      	sub	sp, #24
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	617b      	str	r3, [r7, #20]
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d04d      	beq.n	8005eae <vPortFree+0xae>
 8005e12:	2308      	movs	r3, #8
 8005e14:	425b      	negs	r3, r3
 8005e16:	697a      	ldr	r2, [r7, #20]
 8005e18:	4413      	add	r3, r2
 8005e1a:	617b      	str	r3, [r7, #20]
 8005e1c:	697b      	ldr	r3, [r7, #20]
 8005e1e:	613b      	str	r3, [r7, #16]
 8005e20:	693b      	ldr	r3, [r7, #16]
 8005e22:	685a      	ldr	r2, [r3, #4]
 8005e24:	4b24      	ldr	r3, [pc, #144]	; (8005eb8 <vPortFree+0xb8>)
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	4013      	ands	r3, r2
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d10a      	bne.n	8005e44 <vPortFree+0x44>
 8005e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e32:	f383 8811 	msr	BASEPRI, r3
 8005e36:	f3bf 8f6f 	isb	sy
 8005e3a:	f3bf 8f4f 	dsb	sy
 8005e3e:	60fb      	str	r3, [r7, #12]
 8005e40:	bf00      	nop
 8005e42:	e7fe      	b.n	8005e42 <vPortFree+0x42>
 8005e44:	693b      	ldr	r3, [r7, #16]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d00a      	beq.n	8005e62 <vPortFree+0x62>
 8005e4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e50:	f383 8811 	msr	BASEPRI, r3
 8005e54:	f3bf 8f6f 	isb	sy
 8005e58:	f3bf 8f4f 	dsb	sy
 8005e5c:	60bb      	str	r3, [r7, #8]
 8005e5e:	bf00      	nop
 8005e60:	e7fe      	b.n	8005e60 <vPortFree+0x60>
 8005e62:	693b      	ldr	r3, [r7, #16]
 8005e64:	685a      	ldr	r2, [r3, #4]
 8005e66:	4b14      	ldr	r3, [pc, #80]	; (8005eb8 <vPortFree+0xb8>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4013      	ands	r3, r2
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d01e      	beq.n	8005eae <vPortFree+0xae>
 8005e70:	693b      	ldr	r3, [r7, #16]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d11a      	bne.n	8005eae <vPortFree+0xae>
 8005e78:	693b      	ldr	r3, [r7, #16]
 8005e7a:	685a      	ldr	r2, [r3, #4]
 8005e7c:	4b0e      	ldr	r3, [pc, #56]	; (8005eb8 <vPortFree+0xb8>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	43db      	mvns	r3, r3
 8005e82:	401a      	ands	r2, r3
 8005e84:	693b      	ldr	r3, [r7, #16]
 8005e86:	605a      	str	r2, [r3, #4]
 8005e88:	f7fe fc8e 	bl	80047a8 <vTaskSuspendAll>
 8005e8c:	693b      	ldr	r3, [r7, #16]
 8005e8e:	685a      	ldr	r2, [r3, #4]
 8005e90:	4b0a      	ldr	r3, [pc, #40]	; (8005ebc <vPortFree+0xbc>)
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	4413      	add	r3, r2
 8005e96:	4a09      	ldr	r2, [pc, #36]	; (8005ebc <vPortFree+0xbc>)
 8005e98:	6013      	str	r3, [r2, #0]
 8005e9a:	6938      	ldr	r0, [r7, #16]
 8005e9c:	f000 f874 	bl	8005f88 <prvInsertBlockIntoFreeList>
 8005ea0:	4b07      	ldr	r3, [pc, #28]	; (8005ec0 <vPortFree+0xc0>)
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	3301      	adds	r3, #1
 8005ea6:	4a06      	ldr	r2, [pc, #24]	; (8005ec0 <vPortFree+0xc0>)
 8005ea8:	6013      	str	r3, [r2, #0]
 8005eaa:	f7fe fc8b 	bl	80047c4 <xTaskResumeAll>
 8005eae:	bf00      	nop
 8005eb0:	3718      	adds	r7, #24
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	bd80      	pop	{r7, pc}
 8005eb6:	bf00      	nop
 8005eb8:	20004a44 	.word	0x20004a44
 8005ebc:	20004a34 	.word	0x20004a34
 8005ec0:	20004a40 	.word	0x20004a40

08005ec4 <prvHeapInit>:
 8005ec4:	b480      	push	{r7}
 8005ec6:	b085      	sub	sp, #20
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005ece:	60bb      	str	r3, [r7, #8]
 8005ed0:	4b27      	ldr	r3, [pc, #156]	; (8005f70 <prvHeapInit+0xac>)
 8005ed2:	60fb      	str	r3, [r7, #12]
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	f003 0307 	and.w	r3, r3, #7
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d00c      	beq.n	8005ef8 <prvHeapInit+0x34>
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	3307      	adds	r3, #7
 8005ee2:	60fb      	str	r3, [r7, #12]
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	f023 0307 	bic.w	r3, r3, #7
 8005eea:	60fb      	str	r3, [r7, #12]
 8005eec:	68ba      	ldr	r2, [r7, #8]
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	1ad3      	subs	r3, r2, r3
 8005ef2:	4a1f      	ldr	r2, [pc, #124]	; (8005f70 <prvHeapInit+0xac>)
 8005ef4:	4413      	add	r3, r2
 8005ef6:	60bb      	str	r3, [r7, #8]
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	607b      	str	r3, [r7, #4]
 8005efc:	4a1d      	ldr	r2, [pc, #116]	; (8005f74 <prvHeapInit+0xb0>)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6013      	str	r3, [r2, #0]
 8005f02:	4b1c      	ldr	r3, [pc, #112]	; (8005f74 <prvHeapInit+0xb0>)
 8005f04:	2200      	movs	r2, #0
 8005f06:	605a      	str	r2, [r3, #4]
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	68ba      	ldr	r2, [r7, #8]
 8005f0c:	4413      	add	r3, r2
 8005f0e:	60fb      	str	r3, [r7, #12]
 8005f10:	2208      	movs	r2, #8
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	1a9b      	subs	r3, r3, r2
 8005f16:	60fb      	str	r3, [r7, #12]
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	f023 0307 	bic.w	r3, r3, #7
 8005f1e:	60fb      	str	r3, [r7, #12]
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	4a15      	ldr	r2, [pc, #84]	; (8005f78 <prvHeapInit+0xb4>)
 8005f24:	6013      	str	r3, [r2, #0]
 8005f26:	4b14      	ldr	r3, [pc, #80]	; (8005f78 <prvHeapInit+0xb4>)
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	605a      	str	r2, [r3, #4]
 8005f2e:	4b12      	ldr	r3, [pc, #72]	; (8005f78 <prvHeapInit+0xb4>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	2200      	movs	r2, #0
 8005f34:	601a      	str	r2, [r3, #0]
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	603b      	str	r3, [r7, #0]
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	68fa      	ldr	r2, [r7, #12]
 8005f3e:	1ad2      	subs	r2, r2, r3
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	605a      	str	r2, [r3, #4]
 8005f44:	4b0c      	ldr	r3, [pc, #48]	; (8005f78 <prvHeapInit+0xb4>)
 8005f46:	681a      	ldr	r2, [r3, #0]
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	601a      	str	r2, [r3, #0]
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	685b      	ldr	r3, [r3, #4]
 8005f50:	4a0a      	ldr	r2, [pc, #40]	; (8005f7c <prvHeapInit+0xb8>)
 8005f52:	6013      	str	r3, [r2, #0]
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	685b      	ldr	r3, [r3, #4]
 8005f58:	4a09      	ldr	r2, [pc, #36]	; (8005f80 <prvHeapInit+0xbc>)
 8005f5a:	6013      	str	r3, [r2, #0]
 8005f5c:	4b09      	ldr	r3, [pc, #36]	; (8005f84 <prvHeapInit+0xc0>)
 8005f5e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005f62:	601a      	str	r2, [r3, #0]
 8005f64:	bf00      	nop
 8005f66:	3714      	adds	r7, #20
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6e:	4770      	bx	lr
 8005f70:	20000e28 	.word	0x20000e28
 8005f74:	20004a28 	.word	0x20004a28
 8005f78:	20004a30 	.word	0x20004a30
 8005f7c:	20004a38 	.word	0x20004a38
 8005f80:	20004a34 	.word	0x20004a34
 8005f84:	20004a44 	.word	0x20004a44

08005f88 <prvInsertBlockIntoFreeList>:
 8005f88:	b480      	push	{r7}
 8005f8a:	b085      	sub	sp, #20
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
 8005f90:	4b28      	ldr	r3, [pc, #160]	; (8006034 <prvInsertBlockIntoFreeList+0xac>)
 8005f92:	60fb      	str	r3, [r7, #12]
 8005f94:	e002      	b.n	8005f9c <prvInsertBlockIntoFreeList+0x14>
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	60fb      	str	r3, [r7, #12]
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	687a      	ldr	r2, [r7, #4]
 8005fa2:	429a      	cmp	r2, r3
 8005fa4:	d8f7      	bhi.n	8005f96 <prvInsertBlockIntoFreeList+0xe>
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	60bb      	str	r3, [r7, #8]
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	685b      	ldr	r3, [r3, #4]
 8005fae:	68ba      	ldr	r2, [r7, #8]
 8005fb0:	4413      	add	r3, r2
 8005fb2:	687a      	ldr	r2, [r7, #4]
 8005fb4:	429a      	cmp	r2, r3
 8005fb6:	d108      	bne.n	8005fca <prvInsertBlockIntoFreeList+0x42>
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	685a      	ldr	r2, [r3, #4]
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	685b      	ldr	r3, [r3, #4]
 8005fc0:	441a      	add	r2, r3
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	605a      	str	r2, [r3, #4]
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	607b      	str	r3, [r7, #4]
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	60bb      	str	r3, [r7, #8]
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	685b      	ldr	r3, [r3, #4]
 8005fd2:	68ba      	ldr	r2, [r7, #8]
 8005fd4:	441a      	add	r2, r3
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	429a      	cmp	r2, r3
 8005fdc:	d118      	bne.n	8006010 <prvInsertBlockIntoFreeList+0x88>
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681a      	ldr	r2, [r3, #0]
 8005fe2:	4b15      	ldr	r3, [pc, #84]	; (8006038 <prvInsertBlockIntoFreeList+0xb0>)
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	429a      	cmp	r2, r3
 8005fe8:	d00d      	beq.n	8006006 <prvInsertBlockIntoFreeList+0x7e>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	685a      	ldr	r2, [r3, #4]
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	685b      	ldr	r3, [r3, #4]
 8005ff4:	441a      	add	r2, r3
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	605a      	str	r2, [r3, #4]
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	681a      	ldr	r2, [r3, #0]
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	601a      	str	r2, [r3, #0]
 8006004:	e008      	b.n	8006018 <prvInsertBlockIntoFreeList+0x90>
 8006006:	4b0c      	ldr	r3, [pc, #48]	; (8006038 <prvInsertBlockIntoFreeList+0xb0>)
 8006008:	681a      	ldr	r2, [r3, #0]
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	601a      	str	r2, [r3, #0]
 800600e:	e003      	b.n	8006018 <prvInsertBlockIntoFreeList+0x90>
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681a      	ldr	r2, [r3, #0]
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	601a      	str	r2, [r3, #0]
 8006018:	68fa      	ldr	r2, [r7, #12]
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	429a      	cmp	r2, r3
 800601e:	d002      	beq.n	8006026 <prvInsertBlockIntoFreeList+0x9e>
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	687a      	ldr	r2, [r7, #4]
 8006024:	601a      	str	r2, [r3, #0]
 8006026:	bf00      	nop
 8006028:	3714      	adds	r7, #20
 800602a:	46bd      	mov	sp, r7
 800602c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006030:	4770      	bx	lr
 8006032:	bf00      	nop
 8006034:	20004a28 	.word	0x20004a28
 8006038:	20004a30 	.word	0x20004a30

0800603c <memset>:
 800603c:	4402      	add	r2, r0
 800603e:	4603      	mov	r3, r0
 8006040:	4293      	cmp	r3, r2
 8006042:	d100      	bne.n	8006046 <memset+0xa>
 8006044:	4770      	bx	lr
 8006046:	f803 1b01 	strb.w	r1, [r3], #1
 800604a:	e7f9      	b.n	8006040 <memset+0x4>

0800604c <__libc_init_array>:
 800604c:	b570      	push	{r4, r5, r6, lr}
 800604e:	4d0d      	ldr	r5, [pc, #52]	; (8006084 <__libc_init_array+0x38>)
 8006050:	4c0d      	ldr	r4, [pc, #52]	; (8006088 <__libc_init_array+0x3c>)
 8006052:	1b64      	subs	r4, r4, r5
 8006054:	10a4      	asrs	r4, r4, #2
 8006056:	2600      	movs	r6, #0
 8006058:	42a6      	cmp	r6, r4
 800605a:	d109      	bne.n	8006070 <__libc_init_array+0x24>
 800605c:	4d0b      	ldr	r5, [pc, #44]	; (800608c <__libc_init_array+0x40>)
 800605e:	4c0c      	ldr	r4, [pc, #48]	; (8006090 <__libc_init_array+0x44>)
 8006060:	f000 f826 	bl	80060b0 <_init>
 8006064:	1b64      	subs	r4, r4, r5
 8006066:	10a4      	asrs	r4, r4, #2
 8006068:	2600      	movs	r6, #0
 800606a:	42a6      	cmp	r6, r4
 800606c:	d105      	bne.n	800607a <__libc_init_array+0x2e>
 800606e:	bd70      	pop	{r4, r5, r6, pc}
 8006070:	f855 3b04 	ldr.w	r3, [r5], #4
 8006074:	4798      	blx	r3
 8006076:	3601      	adds	r6, #1
 8006078:	e7ee      	b.n	8006058 <__libc_init_array+0xc>
 800607a:	f855 3b04 	ldr.w	r3, [r5], #4
 800607e:	4798      	blx	r3
 8006080:	3601      	adds	r6, #1
 8006082:	e7f2      	b.n	800606a <__libc_init_array+0x1e>
 8006084:	080061f8 	.word	0x080061f8
 8006088:	080061f8 	.word	0x080061f8
 800608c:	080061f8 	.word	0x080061f8
 8006090:	080061fc 	.word	0x080061fc

08006094 <memcpy>:
 8006094:	440a      	add	r2, r1
 8006096:	4291      	cmp	r1, r2
 8006098:	f100 33ff 	add.w	r3, r0, #4294967295
 800609c:	d100      	bne.n	80060a0 <memcpy+0xc>
 800609e:	4770      	bx	lr
 80060a0:	b510      	push	{r4, lr}
 80060a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80060a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80060aa:	4291      	cmp	r1, r2
 80060ac:	d1f9      	bne.n	80060a2 <memcpy+0xe>
 80060ae:	bd10      	pop	{r4, pc}

080060b0 <_init>:
 80060b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060b2:	bf00      	nop
 80060b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060b6:	bc08      	pop	{r3}
 80060b8:	469e      	mov	lr, r3
 80060ba:	4770      	bx	lr

080060bc <_fini>:
 80060bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060be:	bf00      	nop
 80060c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060c2:	bc08      	pop	{r3}
 80060c4:	469e      	mov	lr, r3
 80060c6:	4770      	bx	lr
