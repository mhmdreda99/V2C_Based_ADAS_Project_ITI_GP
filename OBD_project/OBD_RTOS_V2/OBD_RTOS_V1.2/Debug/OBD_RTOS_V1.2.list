
OBD_RTOS_V1.2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007858  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000190  080079f8  080079f8  000179f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007b88  08007b88  00020020  2**0
                  CONTENTS
  4 .ARM          00000008  08007b88  08007b88  00017b88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007b90  08007b90  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007b90  08007b90  00017b90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007b94  08007b94  00017b94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  08007b98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004b24  20000020  08007bb8  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004b44  08007bb8  00024b44  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016623  00000000  00000000  00020093  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000032ad  00000000  00000000  000366b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001318  00000000  00000000  00039968  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ede  00000000  00000000  0003ac80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018679  00000000  00000000  0003bb5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016ce2  00000000  00000000  000541d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009db22  00000000  00000000  0006aeb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005050  00000000  00000000  001089dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  0010da2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000020 	.word	0x20000020
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080079e0 	.word	0x080079e0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000024 	.word	0x20000024
 80001dc:	080079e0 	.word	0x080079e0

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b970 	b.w	80004d8 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	460d      	mov	r5, r1
 8000218:	4604      	mov	r4, r0
 800021a:	460f      	mov	r7, r1
 800021c:	2b00      	cmp	r3, #0
 800021e:	d14a      	bne.n	80002b6 <__udivmoddi4+0xa6>
 8000220:	428a      	cmp	r2, r1
 8000222:	4694      	mov	ip, r2
 8000224:	d965      	bls.n	80002f2 <__udivmoddi4+0xe2>
 8000226:	fab2 f382 	clz	r3, r2
 800022a:	b143      	cbz	r3, 800023e <__udivmoddi4+0x2e>
 800022c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000230:	f1c3 0220 	rsb	r2, r3, #32
 8000234:	409f      	lsls	r7, r3
 8000236:	fa20 f202 	lsr.w	r2, r0, r2
 800023a:	4317      	orrs	r7, r2
 800023c:	409c      	lsls	r4, r3
 800023e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000242:	fa1f f58c 	uxth.w	r5, ip
 8000246:	fbb7 f1fe 	udiv	r1, r7, lr
 800024a:	0c22      	lsrs	r2, r4, #16
 800024c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000250:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000254:	fb01 f005 	mul.w	r0, r1, r5
 8000258:	4290      	cmp	r0, r2
 800025a:	d90a      	bls.n	8000272 <__udivmoddi4+0x62>
 800025c:	eb1c 0202 	adds.w	r2, ip, r2
 8000260:	f101 37ff 	add.w	r7, r1, #4294967295
 8000264:	f080 811c 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000268:	4290      	cmp	r0, r2
 800026a:	f240 8119 	bls.w	80004a0 <__udivmoddi4+0x290>
 800026e:	3902      	subs	r1, #2
 8000270:	4462      	add	r2, ip
 8000272:	1a12      	subs	r2, r2, r0
 8000274:	b2a4      	uxth	r4, r4
 8000276:	fbb2 f0fe 	udiv	r0, r2, lr
 800027a:	fb0e 2210 	mls	r2, lr, r0, r2
 800027e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000282:	fb00 f505 	mul.w	r5, r0, r5
 8000286:	42a5      	cmp	r5, r4
 8000288:	d90a      	bls.n	80002a0 <__udivmoddi4+0x90>
 800028a:	eb1c 0404 	adds.w	r4, ip, r4
 800028e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000292:	f080 8107 	bcs.w	80004a4 <__udivmoddi4+0x294>
 8000296:	42a5      	cmp	r5, r4
 8000298:	f240 8104 	bls.w	80004a4 <__udivmoddi4+0x294>
 800029c:	4464      	add	r4, ip
 800029e:	3802      	subs	r0, #2
 80002a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002a4:	1b64      	subs	r4, r4, r5
 80002a6:	2100      	movs	r1, #0
 80002a8:	b11e      	cbz	r6, 80002b2 <__udivmoddi4+0xa2>
 80002aa:	40dc      	lsrs	r4, r3
 80002ac:	2300      	movs	r3, #0
 80002ae:	e9c6 4300 	strd	r4, r3, [r6]
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d908      	bls.n	80002cc <__udivmoddi4+0xbc>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80ed 	beq.w	800049a <__udivmoddi4+0x28a>
 80002c0:	2100      	movs	r1, #0
 80002c2:	e9c6 0500 	strd	r0, r5, [r6]
 80002c6:	4608      	mov	r0, r1
 80002c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002cc:	fab3 f183 	clz	r1, r3
 80002d0:	2900      	cmp	r1, #0
 80002d2:	d149      	bne.n	8000368 <__udivmoddi4+0x158>
 80002d4:	42ab      	cmp	r3, r5
 80002d6:	d302      	bcc.n	80002de <__udivmoddi4+0xce>
 80002d8:	4282      	cmp	r2, r0
 80002da:	f200 80f8 	bhi.w	80004ce <__udivmoddi4+0x2be>
 80002de:	1a84      	subs	r4, r0, r2
 80002e0:	eb65 0203 	sbc.w	r2, r5, r3
 80002e4:	2001      	movs	r0, #1
 80002e6:	4617      	mov	r7, r2
 80002e8:	2e00      	cmp	r6, #0
 80002ea:	d0e2      	beq.n	80002b2 <__udivmoddi4+0xa2>
 80002ec:	e9c6 4700 	strd	r4, r7, [r6]
 80002f0:	e7df      	b.n	80002b2 <__udivmoddi4+0xa2>
 80002f2:	b902      	cbnz	r2, 80002f6 <__udivmoddi4+0xe6>
 80002f4:	deff      	udf	#255	; 0xff
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x210>
 8000300:	1a8a      	subs	r2, r1, r2
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2101      	movs	r1, #1
 800030c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000310:	fb07 2015 	mls	r0, r7, r5, r2
 8000314:	0c22      	lsrs	r2, r4, #16
 8000316:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800031a:	fb0e f005 	mul.w	r0, lr, r5
 800031e:	4290      	cmp	r0, r2
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x124>
 8000322:	eb1c 0202 	adds.w	r2, ip, r2
 8000326:	f105 38ff 	add.w	r8, r5, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4290      	cmp	r0, r2
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2b8>
 8000332:	4645      	mov	r5, r8
 8000334:	1a12      	subs	r2, r2, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb2 f0f7 	udiv	r0, r2, r7
 800033c:	fb07 2210 	mls	r2, r7, r0, r2
 8000340:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x14e>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 32ff 	add.w	r2, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x14c>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2c2>
 800035c:	4610      	mov	r0, r2
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000366:	e79f      	b.n	80002a8 <__udivmoddi4+0x98>
 8000368:	f1c1 0720 	rsb	r7, r1, #32
 800036c:	408b      	lsls	r3, r1
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa05 f401 	lsl.w	r4, r5, r1
 800037a:	fa20 f307 	lsr.w	r3, r0, r7
 800037e:	40fd      	lsrs	r5, r7
 8000380:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000384:	4323      	orrs	r3, r4
 8000386:	fbb5 f8f9 	udiv	r8, r5, r9
 800038a:	fa1f fe8c 	uxth.w	lr, ip
 800038e:	fb09 5518 	mls	r5, r9, r8, r5
 8000392:	0c1c      	lsrs	r4, r3, #16
 8000394:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000398:	fb08 f50e 	mul.w	r5, r8, lr
 800039c:	42a5      	cmp	r5, r4
 800039e:	fa02 f201 	lsl.w	r2, r2, r1
 80003a2:	fa00 f001 	lsl.w	r0, r0, r1
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2b4>
 80003b4:	42a5      	cmp	r5, r4
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2b4>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4464      	add	r4, ip
 80003c0:	1b64      	subs	r4, r4, r5
 80003c2:	b29d      	uxth	r5, r3
 80003c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c8:	fb09 4413 	mls	r4, r9, r3, r4
 80003cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f103 35ff 	add.w	r5, r3, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2ac>
 80003e2:	45a6      	cmp	lr, r4
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2ac>
 80003e6:	3b02      	subs	r3, #2
 80003e8:	4464      	add	r4, ip
 80003ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003ee:	fba3 9502 	umull	r9, r5, r3, r2
 80003f2:	eba4 040e 	sub.w	r4, r4, lr
 80003f6:	42ac      	cmp	r4, r5
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46ae      	mov	lr, r5
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x29c>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x298>
 8000400:	b156      	cbz	r6, 8000418 <__udivmoddi4+0x208>
 8000402:	ebb0 0208 	subs.w	r2, r0, r8
 8000406:	eb64 040e 	sbc.w	r4, r4, lr
 800040a:	fa04 f707 	lsl.w	r7, r4, r7
 800040e:	40ca      	lsrs	r2, r1
 8000410:	40cc      	lsrs	r4, r1
 8000412:	4317      	orrs	r7, r2
 8000414:	e9c6 7400 	strd	r7, r4, [r6]
 8000418:	4618      	mov	r0, r3
 800041a:	2100      	movs	r1, #0
 800041c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000420:	f1c3 0120 	rsb	r1, r3, #32
 8000424:	fa02 fc03 	lsl.w	ip, r2, r3
 8000428:	fa20 f201 	lsr.w	r2, r0, r1
 800042c:	fa25 f101 	lsr.w	r1, r5, r1
 8000430:	409d      	lsls	r5, r3
 8000432:	432a      	orrs	r2, r5
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000440:	fb07 1510 	mls	r5, r7, r0, r1
 8000444:	0c11      	lsrs	r1, r2, #16
 8000446:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800044a:	fb00 f50e 	mul.w	r5, r0, lr
 800044e:	428d      	cmp	r5, r1
 8000450:	fa04 f403 	lsl.w	r4, r4, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x258>
 8000456:	eb1c 0101 	adds.w	r1, ip, r1
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000460:	428d      	cmp	r5, r1
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000464:	3802      	subs	r0, #2
 8000466:	4461      	add	r1, ip
 8000468:	1b49      	subs	r1, r1, r5
 800046a:	b292      	uxth	r2, r2
 800046c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000470:	fb07 1115 	mls	r1, r7, r5, r1
 8000474:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000478:	fb05 f10e 	mul.w	r1, r5, lr
 800047c:	4291      	cmp	r1, r2
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x282>
 8000480:	eb1c 0202 	adds.w	r2, ip, r2
 8000484:	f105 38ff 	add.w	r8, r5, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2a8>
 800048a:	4291      	cmp	r1, r2
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2a8>
 800048e:	3d02      	subs	r5, #2
 8000490:	4462      	add	r2, ip
 8000492:	1a52      	subs	r2, r2, r1
 8000494:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0xfc>
 800049a:	4631      	mov	r1, r6
 800049c:	4630      	mov	r0, r6
 800049e:	e708      	b.n	80002b2 <__udivmoddi4+0xa2>
 80004a0:	4639      	mov	r1, r7
 80004a2:	e6e6      	b.n	8000272 <__udivmoddi4+0x62>
 80004a4:	4610      	mov	r0, r2
 80004a6:	e6fb      	b.n	80002a0 <__udivmoddi4+0x90>
 80004a8:	4548      	cmp	r0, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004b4:	3b01      	subs	r3, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b8:	4645      	mov	r5, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x282>
 80004bc:	462b      	mov	r3, r5
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1da>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x258>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c8:	3d02      	subs	r5, #2
 80004ca:	4462      	add	r2, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x124>
 80004ce:	4608      	mov	r0, r1
 80004d0:	e70a      	b.n	80002e8 <__udivmoddi4+0xd8>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x14e>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <bytestowrite>:
/*****************************************************************************************************************************************/
uint8_t bytes_temp[4];

// function to determine the remaining bytes
uint16_t bytestowrite (uint16_t size, uint16_t offset)
{
 80004dc:	b480      	push	{r7}
 80004de:	b083      	sub	sp, #12
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	4603      	mov	r3, r0
 80004e4:	460a      	mov	r2, r1
 80004e6:	80fb      	strh	r3, [r7, #6]
 80004e8:	4613      	mov	r3, r2
 80004ea:	80bb      	strh	r3, [r7, #4]
	if ((size+offset)<PAGE_SIZE) return size;
 80004ec:	88fa      	ldrh	r2, [r7, #6]
 80004ee:	88bb      	ldrh	r3, [r7, #4]
 80004f0:	4413      	add	r3, r2
 80004f2:	2b0f      	cmp	r3, #15
 80004f4:	dc01      	bgt.n	80004fa <bytestowrite+0x1e>
 80004f6:	88fb      	ldrh	r3, [r7, #6]
 80004f8:	e003      	b.n	8000502 <bytestowrite+0x26>
	else return PAGE_SIZE-offset;
 80004fa:	88bb      	ldrh	r3, [r7, #4]
 80004fc:	f1c3 0310 	rsb	r3, r3, #16
 8000500:	b29b      	uxth	r3, r3
}
 8000502:	4618      	mov	r0, r3
 8000504:	370c      	adds	r7, #12
 8000506:	46bd      	mov	sp, r7
 8000508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050c:	4770      	bx	lr
	...

08000510 <EEPROM_Write>:
 * @offset is the start byte offset in the page. Range from 0 to PAGE_SIZE-1
 * @data is the pointer to the data to write in bytes
 * @size is the size of the data
 */
void EEPROM_Write (uint16_t page, uint16_t offset, uint8_t *data, uint16_t size)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b08e      	sub	sp, #56	; 0x38
 8000514:	af04      	add	r7, sp, #16
 8000516:	60ba      	str	r2, [r7, #8]
 8000518:	461a      	mov	r2, r3
 800051a:	4603      	mov	r3, r0
 800051c:	81fb      	strh	r3, [r7, #14]
 800051e:	460b      	mov	r3, r1
 8000520:	81bb      	strh	r3, [r7, #12]
 8000522:	4613      	mov	r3, r2
 8000524:	80fb      	strh	r3, [r7, #6]

	// Find out the number of bit, where the page addressing starts
	int paddrposition = log(PAGE_SIZE)/log(2);
 8000526:	2304      	movs	r3, #4
 8000528:	61fb      	str	r3, [r7, #28]

	// calculate the start page and the end page
	uint16_t startPage = page;
 800052a:	89fb      	ldrh	r3, [r7, #14]
 800052c:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t endPage = page + ((size+offset)/PAGE_SIZE);
 800052e:	88fa      	ldrh	r2, [r7, #6]
 8000530:	89bb      	ldrh	r3, [r7, #12]
 8000532:	4413      	add	r3, r2
 8000534:	2b00      	cmp	r3, #0
 8000536:	da00      	bge.n	800053a <EEPROM_Write+0x2a>
 8000538:	330f      	adds	r3, #15
 800053a:	111b      	asrs	r3, r3, #4
 800053c:	b29a      	uxth	r2, r3
 800053e:	89fb      	ldrh	r3, [r7, #14]
 8000540:	4413      	add	r3, r2
 8000542:	837b      	strh	r3, [r7, #26]

	// number of pages to be written
	uint16_t numofpages = (endPage-startPage) + 1;
 8000544:	8b7a      	ldrh	r2, [r7, #26]
 8000546:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000548:	1ad3      	subs	r3, r2, r3
 800054a:	b29b      	uxth	r3, r3
 800054c:	3301      	adds	r3, #1
 800054e:	833b      	strh	r3, [r7, #24]
	uint16_t pos=0;
 8000550:	2300      	movs	r3, #0
 8000552:	84bb      	strh	r3, [r7, #36]	; 0x24

	// write the data
	for (int i=0; i<numofpages; i++)
 8000554:	2300      	movs	r3, #0
 8000556:	623b      	str	r3, [r7, #32]
 8000558:	e034      	b.n	80005c4 <EEPROM_Write+0xb4>
	{
		/* calculate the address of the memory location
		 * Here we add the page address with the byte address
		 */
		uint16_t MemAddress = startPage<<paddrposition | offset;
 800055a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800055c:	69fb      	ldr	r3, [r7, #28]
 800055e:	fa02 f303 	lsl.w	r3, r2, r3
 8000562:	b21a      	sxth	r2, r3
 8000564:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000568:	4313      	orrs	r3, r2
 800056a:	b21b      	sxth	r3, r3
 800056c:	82fb      	strh	r3, [r7, #22]
		uint16_t bytesremaining = bytestowrite(size, offset);  // calculate the remaining bytes to be written
 800056e:	89ba      	ldrh	r2, [r7, #12]
 8000570:	88fb      	ldrh	r3, [r7, #6]
 8000572:	4611      	mov	r1, r2
 8000574:	4618      	mov	r0, r3
 8000576:	f7ff ffb1 	bl	80004dc <bytestowrite>
 800057a:	4603      	mov	r3, r0
 800057c:	82bb      	strh	r3, [r7, #20]

		HAL_I2C_Mem_Write(EEPROM_I2C, EEPROM_ADDR, MemAddress, 2, &data[pos], bytesremaining, 1000);  // write the data to the EEPROM
 800057e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000580:	68ba      	ldr	r2, [r7, #8]
 8000582:	4413      	add	r3, r2
 8000584:	8af9      	ldrh	r1, [r7, #22]
 8000586:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800058a:	9202      	str	r2, [sp, #8]
 800058c:	8aba      	ldrh	r2, [r7, #20]
 800058e:	9201      	str	r2, [sp, #4]
 8000590:	9300      	str	r3, [sp, #0]
 8000592:	2302      	movs	r3, #2
 8000594:	460a      	mov	r2, r1
 8000596:	21a0      	movs	r1, #160	; 0xa0
 8000598:	480f      	ldr	r0, [pc, #60]	; (80005d8 <EEPROM_Write+0xc8>)
 800059a:	f002 fb19 	bl	8002bd0 <HAL_I2C_Mem_Write>

		startPage += 1;  // increment the page, so that a new page address can be selected for further write
 800059e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80005a0:	3301      	adds	r3, #1
 80005a2:	84fb      	strh	r3, [r7, #38]	; 0x26
		offset=0;   // since we will be writing to a new page, so offset will be 0
 80005a4:	2300      	movs	r3, #0
 80005a6:	81bb      	strh	r3, [r7, #12]
		size = size-bytesremaining;  // reduce the size of the bytes
 80005a8:	88fa      	ldrh	r2, [r7, #6]
 80005aa:	8abb      	ldrh	r3, [r7, #20]
 80005ac:	1ad3      	subs	r3, r2, r3
 80005ae:	80fb      	strh	r3, [r7, #6]
		pos += bytesremaining;  // update the position for the data buffer
 80005b0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80005b2:	8abb      	ldrh	r3, [r7, #20]
 80005b4:	4413      	add	r3, r2
 80005b6:	84bb      	strh	r3, [r7, #36]	; 0x24

		HAL_Delay (5);  // Write cycle delay (5ms)
 80005b8:	2005      	movs	r0, #5
 80005ba:	f000 ff9f 	bl	80014fc <HAL_Delay>
	for (int i=0; i<numofpages; i++)
 80005be:	6a3b      	ldr	r3, [r7, #32]
 80005c0:	3301      	adds	r3, #1
 80005c2:	623b      	str	r3, [r7, #32]
 80005c4:	8b3b      	ldrh	r3, [r7, #24]
 80005c6:	6a3a      	ldr	r2, [r7, #32]
 80005c8:	429a      	cmp	r2, r3
 80005ca:	dbc6      	blt.n	800055a <EEPROM_Write+0x4a>
//		for(uint16_t i = 0 ; i < 5000; i++ ){
//			__asm__("nop");
//		}
	}
}
 80005cc:	bf00      	nop
 80005ce:	bf00      	nop
 80005d0:	3728      	adds	r7, #40	; 0x28
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	bf00      	nop
 80005d8:	20000084 	.word	0x20000084

080005dc <EEPROM_Read>:
 * @offset is the start byte offset in the page. Range from 0 to PAGE_SIZE-1
 * @data is the pointer to the data to write in bytes
 * @size is the size of the data
 */
void EEPROM_Read (uint16_t page, uint16_t offset, uint8_t *data, uint16_t size)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b08e      	sub	sp, #56	; 0x38
 80005e0:	af04      	add	r7, sp, #16
 80005e2:	60ba      	str	r2, [r7, #8]
 80005e4:	461a      	mov	r2, r3
 80005e6:	4603      	mov	r3, r0
 80005e8:	81fb      	strh	r3, [r7, #14]
 80005ea:	460b      	mov	r3, r1
 80005ec:	81bb      	strh	r3, [r7, #12]
 80005ee:	4613      	mov	r3, r2
 80005f0:	80fb      	strh	r3, [r7, #6]
	int paddrposition = log(PAGE_SIZE)/log(2);
 80005f2:	2304      	movs	r3, #4
 80005f4:	61fb      	str	r3, [r7, #28]

	uint16_t startPage = page;
 80005f6:	89fb      	ldrh	r3, [r7, #14]
 80005f8:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t endPage = page + ((size+offset)/PAGE_SIZE);
 80005fa:	88fa      	ldrh	r2, [r7, #6]
 80005fc:	89bb      	ldrh	r3, [r7, #12]
 80005fe:	4413      	add	r3, r2
 8000600:	2b00      	cmp	r3, #0
 8000602:	da00      	bge.n	8000606 <EEPROM_Read+0x2a>
 8000604:	330f      	adds	r3, #15
 8000606:	111b      	asrs	r3, r3, #4
 8000608:	b29a      	uxth	r2, r3
 800060a:	89fb      	ldrh	r3, [r7, #14]
 800060c:	4413      	add	r3, r2
 800060e:	837b      	strh	r3, [r7, #26]

	uint16_t numofpages = (endPage-startPage) + 1;
 8000610:	8b7a      	ldrh	r2, [r7, #26]
 8000612:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000614:	1ad3      	subs	r3, r2, r3
 8000616:	b29b      	uxth	r3, r3
 8000618:	3301      	adds	r3, #1
 800061a:	833b      	strh	r3, [r7, #24]
	uint16_t pos=0;
 800061c:	2300      	movs	r3, #0
 800061e:	84bb      	strh	r3, [r7, #36]	; 0x24

	for (int i=0; i<numofpages; i++)
 8000620:	2300      	movs	r3, #0
 8000622:	623b      	str	r3, [r7, #32]
 8000624:	e031      	b.n	800068a <EEPROM_Read+0xae>
	{
		uint16_t MemAddress = startPage<<paddrposition | offset;
 8000626:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000628:	69fb      	ldr	r3, [r7, #28]
 800062a:	fa02 f303 	lsl.w	r3, r2, r3
 800062e:	b21a      	sxth	r2, r3
 8000630:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000634:	4313      	orrs	r3, r2
 8000636:	b21b      	sxth	r3, r3
 8000638:	82fb      	strh	r3, [r7, #22]
		uint16_t bytesremaining = bytestowrite(size, offset);
 800063a:	89ba      	ldrh	r2, [r7, #12]
 800063c:	88fb      	ldrh	r3, [r7, #6]
 800063e:	4611      	mov	r1, r2
 8000640:	4618      	mov	r0, r3
 8000642:	f7ff ff4b 	bl	80004dc <bytestowrite>
 8000646:	4603      	mov	r3, r0
 8000648:	82bb      	strh	r3, [r7, #20]
		HAL_I2C_Mem_Read(EEPROM_I2C, EEPROM_ADDR, MemAddress, 2, &data[pos], bytesremaining, 1000);
 800064a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800064c:	68ba      	ldr	r2, [r7, #8]
 800064e:	4413      	add	r3, r2
 8000650:	8af9      	ldrh	r1, [r7, #22]
 8000652:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000656:	9202      	str	r2, [sp, #8]
 8000658:	8aba      	ldrh	r2, [r7, #20]
 800065a:	9201      	str	r2, [sp, #4]
 800065c:	9300      	str	r3, [sp, #0]
 800065e:	2302      	movs	r3, #2
 8000660:	460a      	mov	r2, r1
 8000662:	21a0      	movs	r1, #160	; 0xa0
 8000664:	480d      	ldr	r0, [pc, #52]	; (800069c <EEPROM_Read+0xc0>)
 8000666:	f002 fbad 	bl	8002dc4 <HAL_I2C_Mem_Read>
		startPage += 1;
 800066a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800066c:	3301      	adds	r3, #1
 800066e:	84fb      	strh	r3, [r7, #38]	; 0x26
		offset=0;
 8000670:	2300      	movs	r3, #0
 8000672:	81bb      	strh	r3, [r7, #12]
		size = size-bytesremaining;
 8000674:	88fa      	ldrh	r2, [r7, #6]
 8000676:	8abb      	ldrh	r3, [r7, #20]
 8000678:	1ad3      	subs	r3, r2, r3
 800067a:	80fb      	strh	r3, [r7, #6]
		pos += bytesremaining;
 800067c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800067e:	8abb      	ldrh	r3, [r7, #20]
 8000680:	4413      	add	r3, r2
 8000682:	84bb      	strh	r3, [r7, #36]	; 0x24
	for (int i=0; i<numofpages; i++)
 8000684:	6a3b      	ldr	r3, [r7, #32]
 8000686:	3301      	adds	r3, #1
 8000688:	623b      	str	r3, [r7, #32]
 800068a:	8b3b      	ldrh	r3, [r7, #24]
 800068c:	6a3a      	ldr	r2, [r7, #32]
 800068e:	429a      	cmp	r2, r3
 8000690:	dbc9      	blt.n	8000626 <EEPROM_Read+0x4a>
	}
}
 8000692:	bf00      	nop
 8000694:	bf00      	nop
 8000696:	3728      	adds	r7, #40	; 0x28
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	20000084 	.word	0x20000084

080006a0 <EEPROM_PageErase>:
/* Erase a page in the EEPROM Memory
 * @page is the number of page to erase
 * In order to erase multiple pages, just use this function in the for loop
 */
void EEPROM_PageErase (uint16_t page)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b08c      	sub	sp, #48	; 0x30
 80006a4:	af04      	add	r7, sp, #16
 80006a6:	4603      	mov	r3, r0
 80006a8:	80fb      	strh	r3, [r7, #6]
	// calculate the memory address based on the page number
	int paddrposition = log(PAGE_SIZE)/log(2);
 80006aa:	2304      	movs	r3, #4
 80006ac:	61fb      	str	r3, [r7, #28]
	uint16_t MemAddress = page<<paddrposition;
 80006ae:	88fa      	ldrh	r2, [r7, #6]
 80006b0:	69fb      	ldr	r3, [r7, #28]
 80006b2:	fa02 f303 	lsl.w	r3, r2, r3
 80006b6:	837b      	strh	r3, [r7, #26]

	// create a buffer to store the reset values
	uint8_t data[PAGE_SIZE];
	memset(data,0xff,PAGE_SIZE);
 80006b8:	f107 0308 	add.w	r3, r7, #8
 80006bc:	2210      	movs	r2, #16
 80006be:	21ff      	movs	r1, #255	; 0xff
 80006c0:	4618      	mov	r0, r3
 80006c2:	f007 f953 	bl	800796c <memset>

	// write the data to the EEPROM
	HAL_I2C_Mem_Write(EEPROM_I2C, EEPROM_ADDR, MemAddress, 2, data, PAGE_SIZE, 1000);
 80006c6:	8b7a      	ldrh	r2, [r7, #26]
 80006c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006cc:	9302      	str	r3, [sp, #8]
 80006ce:	2310      	movs	r3, #16
 80006d0:	9301      	str	r3, [sp, #4]
 80006d2:	f107 0308 	add.w	r3, r7, #8
 80006d6:	9300      	str	r3, [sp, #0]
 80006d8:	2302      	movs	r3, #2
 80006da:	21a0      	movs	r1, #160	; 0xa0
 80006dc:	4804      	ldr	r0, [pc, #16]	; (80006f0 <EEPROM_PageErase+0x50>)
 80006de:	f002 fa77 	bl	8002bd0 <HAL_I2C_Mem_Write>

	HAL_Delay (5);  // write cycle delay 
 80006e2:	2005      	movs	r0, #5
 80006e4:	f000 ff0a 	bl	80014fc <HAL_Delay>
}
 80006e8:	bf00      	nop
 80006ea:	3720      	adds	r7, #32
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	20000084 	.word	0x20000084

080006f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006f8:	f000 fe8e 	bl	8001418 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006fc:	f000 f87a 	bl	80007f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000700:	f000 f9cc 	bl	8000a9c <MX_GPIO_Init>
  MX_DMA_Init();
 8000704:	f000 f9aa 	bl	8000a5c <MX_DMA_Init>
  MX_I2C1_Init();
 8000708:	f000 f926 	bl	8000958 <MX_I2C1_Init>
  MX_ADC1_Init();
 800070c:	f000 f8d2 	bl	80008b4 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8000710:	f000 f950 	bl	80009b4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000714:	f000 f978 	bl	8000a08 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
	HAL_I2C_Init(&hi2c1);
 8000718:	4820      	ldr	r0, [pc, #128]	; (800079c <main+0xa8>)
 800071a:	f002 f915 	bl	8002948 <HAL_I2C_Init>
	EEPROM_voidInitTime();
 800071e:	f000 fa55 	bl	8000bcc <EEPROM_voidInitTime>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000722:	f004 fbcf 	bl	8004ec4 <osKernelInitialize>
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of tim_Task1 */
  tim_Task1Handle = osThreadNew(IncTimFunc, NULL, &tim_Task1_attributes);
 8000726:	4a1e      	ldr	r2, [pc, #120]	; (80007a0 <main+0xac>)
 8000728:	2100      	movs	r1, #0
 800072a:	481e      	ldr	r0, [pc, #120]	; (80007a4 <main+0xb0>)
 800072c:	f004 fc14 	bl	8004f58 <osThreadNew>
 8000730:	4603      	mov	r3, r0
 8000732:	4a1d      	ldr	r2, [pc, #116]	; (80007a8 <main+0xb4>)
 8000734:	6013      	str	r3, [r2, #0]

  /* creation of timTask2 */
  timTask2Handle = osThreadNew(EEPROM_saveTimVal, NULL, &timTask2_attributes);
 8000736:	4a1d      	ldr	r2, [pc, #116]	; (80007ac <main+0xb8>)
 8000738:	2100      	movs	r1, #0
 800073a:	481d      	ldr	r0, [pc, #116]	; (80007b0 <main+0xbc>)
 800073c:	f004 fc0c 	bl	8004f58 <osThreadNew>
 8000740:	4603      	mov	r3, r0
 8000742:	4a1c      	ldr	r2, [pc, #112]	; (80007b4 <main+0xc0>)
 8000744:	6013      	str	r3, [r2, #0]

  /* creation of fuelLevelTask1 */
  fuelLevelTask1Handle = osThreadNew(getFuelLevelFromADC, NULL, &fuelLevelTask1_attributes);
 8000746:	4a1c      	ldr	r2, [pc, #112]	; (80007b8 <main+0xc4>)
 8000748:	2100      	movs	r1, #0
 800074a:	481c      	ldr	r0, [pc, #112]	; (80007bc <main+0xc8>)
 800074c:	f004 fc04 	bl	8004f58 <osThreadNew>
 8000750:	4603      	mov	r3, r0
 8000752:	4a1b      	ldr	r2, [pc, #108]	; (80007c0 <main+0xcc>)
 8000754:	6013      	str	r3, [r2, #0]

  /* creation of fuelLevelTask2 */
  fuelLevelTask2Handle = osThreadNew(mapFuelLevelDigtalToLED, NULL, &fuelLevelTask2_attributes);
 8000756:	4a1b      	ldr	r2, [pc, #108]	; (80007c4 <main+0xd0>)
 8000758:	2100      	movs	r1, #0
 800075a:	481b      	ldr	r0, [pc, #108]	; (80007c8 <main+0xd4>)
 800075c:	f004 fbfc 	bl	8004f58 <osThreadNew>
 8000760:	4603      	mov	r3, r0
 8000762:	4a1a      	ldr	r2, [pc, #104]	; (80007cc <main+0xd8>)
 8000764:	6013      	str	r3, [r2, #0]

  /* creation of LM35Task0 */
  LM35Task0Handle = osThreadNew(LM35_getTemprature, NULL, &LM35Task0_attributes);
 8000766:	4a1a      	ldr	r2, [pc, #104]	; (80007d0 <main+0xdc>)
 8000768:	2100      	movs	r1, #0
 800076a:	481a      	ldr	r0, [pc, #104]	; (80007d4 <main+0xe0>)
 800076c:	f004 fbf4 	bl	8004f58 <osThreadNew>
 8000770:	4603      	mov	r3, r0
 8000772:	4a19      	ldr	r2, [pc, #100]	; (80007d8 <main+0xe4>)
 8000774:	6013      	str	r3, [r2, #0]

  /* creation of RPI_task1 */
  RPI_task1Handle = osThreadNew(trigSendRPI, NULL, &RPI_task1_attributes);
 8000776:	4a19      	ldr	r2, [pc, #100]	; (80007dc <main+0xe8>)
 8000778:	2100      	movs	r1, #0
 800077a:	4819      	ldr	r0, [pc, #100]	; (80007e0 <main+0xec>)
 800077c:	f004 fbec 	bl	8004f58 <osThreadNew>
 8000780:	4603      	mov	r3, r0
 8000782:	4a18      	ldr	r2, [pc, #96]	; (80007e4 <main+0xf0>)
 8000784:	6013      	str	r3, [r2, #0]

  /* creation of BSA_task0 */
  BSA_task0Handle = osThreadNew(renableUART_DMA, NULL, &BSA_task0_attributes);
 8000786:	4a18      	ldr	r2, [pc, #96]	; (80007e8 <main+0xf4>)
 8000788:	2100      	movs	r1, #0
 800078a:	4818      	ldr	r0, [pc, #96]	; (80007ec <main+0xf8>)
 800078c:	f004 fbe4 	bl	8004f58 <osThreadNew>
 8000790:	4603      	mov	r3, r0
 8000792:	4a17      	ldr	r2, [pc, #92]	; (80007f0 <main+0xfc>)
 8000794:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000796:	f004 fbb9 	bl	8004f0c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 800079a:	e7fe      	b.n	800079a <main+0xa6>
 800079c:	20000084 	.word	0x20000084
 80007a0:	08007a6c 	.word	0x08007a6c
 80007a4:	08000e01 	.word	0x08000e01
 80007a8:	200001c0 	.word	0x200001c0
 80007ac:	08007a90 	.word	0x08007a90
 80007b0:	08000e21 	.word	0x08000e21
 80007b4:	200001c4 	.word	0x200001c4
 80007b8:	08007ab4 	.word	0x08007ab4
 80007bc:	08000ee1 	.word	0x08000ee1
 80007c0:	200001c8 	.word	0x200001c8
 80007c4:	08007ad8 	.word	0x08007ad8
 80007c8:	08000f25 	.word	0x08000f25
 80007cc:	200001cc 	.word	0x200001cc
 80007d0:	08007afc 	.word	0x08007afc
 80007d4:	08000f61 	.word	0x08000f61
 80007d8:	200001d0 	.word	0x200001d0
 80007dc:	08007b20 	.word	0x08007b20
 80007e0:	08000ff9 	.word	0x08000ff9
 80007e4:	200001d4 	.word	0x200001d4
 80007e8:	08007b44 	.word	0x08007b44
 80007ec:	08001041 	.word	0x08001041
 80007f0:	200001d8 	.word	0x200001d8

080007f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b094      	sub	sp, #80	; 0x50
 80007f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007fa:	f107 0320 	add.w	r3, r7, #32
 80007fe:	2230      	movs	r2, #48	; 0x30
 8000800:	2100      	movs	r1, #0
 8000802:	4618      	mov	r0, r3
 8000804:	f007 f8b2 	bl	800796c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000808:	f107 030c 	add.w	r3, r7, #12
 800080c:	2200      	movs	r2, #0
 800080e:	601a      	str	r2, [r3, #0]
 8000810:	605a      	str	r2, [r3, #4]
 8000812:	609a      	str	r2, [r3, #8]
 8000814:	60da      	str	r2, [r3, #12]
 8000816:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000818:	2300      	movs	r3, #0
 800081a:	60bb      	str	r3, [r7, #8]
 800081c:	4b23      	ldr	r3, [pc, #140]	; (80008ac <SystemClock_Config+0xb8>)
 800081e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000820:	4a22      	ldr	r2, [pc, #136]	; (80008ac <SystemClock_Config+0xb8>)
 8000822:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000826:	6413      	str	r3, [r2, #64]	; 0x40
 8000828:	4b20      	ldr	r3, [pc, #128]	; (80008ac <SystemClock_Config+0xb8>)
 800082a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800082c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000830:	60bb      	str	r3, [r7, #8]
 8000832:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000834:	2300      	movs	r3, #0
 8000836:	607b      	str	r3, [r7, #4]
 8000838:	4b1d      	ldr	r3, [pc, #116]	; (80008b0 <SystemClock_Config+0xbc>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000840:	4a1b      	ldr	r2, [pc, #108]	; (80008b0 <SystemClock_Config+0xbc>)
 8000842:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000846:	6013      	str	r3, [r2, #0]
 8000848:	4b19      	ldr	r3, [pc, #100]	; (80008b0 <SystemClock_Config+0xbc>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000850:	607b      	str	r3, [r7, #4]
 8000852:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000854:	2302      	movs	r3, #2
 8000856:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000858:	2301      	movs	r3, #1
 800085a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800085c:	2310      	movs	r3, #16
 800085e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000860:	2300      	movs	r3, #0
 8000862:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000864:	f107 0320 	add.w	r3, r7, #32
 8000868:	4618      	mov	r0, r3
 800086a:	f003 f82d 	bl	80038c8 <HAL_RCC_OscConfig>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d001      	beq.n	8000878 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000874:	f000 fbfa 	bl	800106c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000878:	230f      	movs	r3, #15
 800087a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800087c:	2300      	movs	r3, #0
 800087e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000880:	2300      	movs	r3, #0
 8000882:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000884:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000888:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800088a:	2300      	movs	r3, #0
 800088c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800088e:	f107 030c 	add.w	r3, r7, #12
 8000892:	2100      	movs	r1, #0
 8000894:	4618      	mov	r0, r3
 8000896:	f003 fa8f 	bl	8003db8 <HAL_RCC_ClockConfig>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80008a0:	f000 fbe4 	bl	800106c <Error_Handler>
  }
}
 80008a4:	bf00      	nop
 80008a6:	3750      	adds	r7, #80	; 0x50
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	40023800 	.word	0x40023800
 80008b0:	40007000 	.word	0x40007000

080008b4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b084      	sub	sp, #16
 80008b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80008ba:	463b      	mov	r3, r7
 80008bc:	2200      	movs	r2, #0
 80008be:	601a      	str	r2, [r3, #0]
 80008c0:	605a      	str	r2, [r3, #4]
 80008c2:	609a      	str	r2, [r3, #8]
 80008c4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80008c6:	4b21      	ldr	r3, [pc, #132]	; (800094c <MX_ADC1_Init+0x98>)
 80008c8:	4a21      	ldr	r2, [pc, #132]	; (8000950 <MX_ADC1_Init+0x9c>)
 80008ca:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80008cc:	4b1f      	ldr	r3, [pc, #124]	; (800094c <MX_ADC1_Init+0x98>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80008d2:	4b1e      	ldr	r3, [pc, #120]	; (800094c <MX_ADC1_Init+0x98>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80008d8:	4b1c      	ldr	r3, [pc, #112]	; (800094c <MX_ADC1_Init+0x98>)
 80008da:	2201      	movs	r2, #1
 80008dc:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80008de:	4b1b      	ldr	r3, [pc, #108]	; (800094c <MX_ADC1_Init+0x98>)
 80008e0:	2201      	movs	r2, #1
 80008e2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80008e4:	4b19      	ldr	r3, [pc, #100]	; (800094c <MX_ADC1_Init+0x98>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008ec:	4b17      	ldr	r3, [pc, #92]	; (800094c <MX_ADC1_Init+0x98>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008f2:	4b16      	ldr	r3, [pc, #88]	; (800094c <MX_ADC1_Init+0x98>)
 80008f4:	4a17      	ldr	r2, [pc, #92]	; (8000954 <MX_ADC1_Init+0xa0>)
 80008f6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008f8:	4b14      	ldr	r3, [pc, #80]	; (800094c <MX_ADC1_Init+0x98>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80008fe:	4b13      	ldr	r3, [pc, #76]	; (800094c <MX_ADC1_Init+0x98>)
 8000900:	2201      	movs	r2, #1
 8000902:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000904:	4b11      	ldr	r3, [pc, #68]	; (800094c <MX_ADC1_Init+0x98>)
 8000906:	2200      	movs	r2, #0
 8000908:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800090c:	4b0f      	ldr	r3, [pc, #60]	; (800094c <MX_ADC1_Init+0x98>)
 800090e:	2201      	movs	r2, #1
 8000910:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000912:	480e      	ldr	r0, [pc, #56]	; (800094c <MX_ADC1_Init+0x98>)
 8000914:	f000 fe16 	bl	8001544 <HAL_ADC_Init>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800091e:	f000 fba5 	bl	800106c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000922:	2300      	movs	r3, #0
 8000924:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000926:	2301      	movs	r3, #1
 8000928:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 800092a:	2304      	movs	r3, #4
 800092c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800092e:	463b      	mov	r3, r7
 8000930:	4619      	mov	r1, r3
 8000932:	4806      	ldr	r0, [pc, #24]	; (800094c <MX_ADC1_Init+0x98>)
 8000934:	f000 ffca 	bl	80018cc <HAL_ADC_ConfigChannel>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800093e:	f000 fb95 	bl	800106c <Error_Handler>
  }

}
 8000942:	bf00      	nop
 8000944:	3710      	adds	r7, #16
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	2000003c 	.word	0x2000003c
 8000950:	40012000 	.word	0x40012000
 8000954:	0f000001 	.word	0x0f000001

08000958 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800095c:	4b12      	ldr	r3, [pc, #72]	; (80009a8 <MX_I2C1_Init+0x50>)
 800095e:	4a13      	ldr	r2, [pc, #76]	; (80009ac <MX_I2C1_Init+0x54>)
 8000960:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000962:	4b11      	ldr	r3, [pc, #68]	; (80009a8 <MX_I2C1_Init+0x50>)
 8000964:	4a12      	ldr	r2, [pc, #72]	; (80009b0 <MX_I2C1_Init+0x58>)
 8000966:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000968:	4b0f      	ldr	r3, [pc, #60]	; (80009a8 <MX_I2C1_Init+0x50>)
 800096a:	2200      	movs	r2, #0
 800096c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800096e:	4b0e      	ldr	r3, [pc, #56]	; (80009a8 <MX_I2C1_Init+0x50>)
 8000970:	2200      	movs	r2, #0
 8000972:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000974:	4b0c      	ldr	r3, [pc, #48]	; (80009a8 <MX_I2C1_Init+0x50>)
 8000976:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800097a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800097c:	4b0a      	ldr	r3, [pc, #40]	; (80009a8 <MX_I2C1_Init+0x50>)
 800097e:	2200      	movs	r2, #0
 8000980:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000982:	4b09      	ldr	r3, [pc, #36]	; (80009a8 <MX_I2C1_Init+0x50>)
 8000984:	2200      	movs	r2, #0
 8000986:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000988:	4b07      	ldr	r3, [pc, #28]	; (80009a8 <MX_I2C1_Init+0x50>)
 800098a:	2200      	movs	r2, #0
 800098c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800098e:	4b06      	ldr	r3, [pc, #24]	; (80009a8 <MX_I2C1_Init+0x50>)
 8000990:	2200      	movs	r2, #0
 8000992:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000994:	4804      	ldr	r0, [pc, #16]	; (80009a8 <MX_I2C1_Init+0x50>)
 8000996:	f001 ffd7 	bl	8002948 <HAL_I2C_Init>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80009a0:	f000 fb64 	bl	800106c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80009a4:	bf00      	nop
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	20000084 	.word	0x20000084
 80009ac:	40005400 	.word	0x40005400
 80009b0:	000186a0 	.word	0x000186a0

080009b4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80009b8:	4b11      	ldr	r3, [pc, #68]	; (8000a00 <MX_USART1_UART_Init+0x4c>)
 80009ba:	4a12      	ldr	r2, [pc, #72]	; (8000a04 <MX_USART1_UART_Init+0x50>)
 80009bc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80009be:	4b10      	ldr	r3, [pc, #64]	; (8000a00 <MX_USART1_UART_Init+0x4c>)
 80009c0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80009c4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009c6:	4b0e      	ldr	r3, [pc, #56]	; (8000a00 <MX_USART1_UART_Init+0x4c>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009cc:	4b0c      	ldr	r3, [pc, #48]	; (8000a00 <MX_USART1_UART_Init+0x4c>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80009d2:	4b0b      	ldr	r3, [pc, #44]	; (8000a00 <MX_USART1_UART_Init+0x4c>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009d8:	4b09      	ldr	r3, [pc, #36]	; (8000a00 <MX_USART1_UART_Init+0x4c>)
 80009da:	220c      	movs	r2, #12
 80009dc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009de:	4b08      	ldr	r3, [pc, #32]	; (8000a00 <MX_USART1_UART_Init+0x4c>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009e4:	4b06      	ldr	r3, [pc, #24]	; (8000a00 <MX_USART1_UART_Init+0x4c>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009ea:	4805      	ldr	r0, [pc, #20]	; (8000a00 <MX_USART1_UART_Init+0x4c>)
 80009ec:	f003 fbc4 	bl	8004178 <HAL_UART_Init>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80009f6:	f000 fb39 	bl	800106c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80009fa:	bf00      	nop
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	200000d8 	.word	0x200000d8
 8000a04:	40011000 	.word	0x40011000

08000a08 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a0c:	4b11      	ldr	r3, [pc, #68]	; (8000a54 <MX_USART2_UART_Init+0x4c>)
 8000a0e:	4a12      	ldr	r2, [pc, #72]	; (8000a58 <MX_USART2_UART_Init+0x50>)
 8000a10:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000a12:	4b10      	ldr	r3, [pc, #64]	; (8000a54 <MX_USART2_UART_Init+0x4c>)
 8000a14:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000a18:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a1a:	4b0e      	ldr	r3, [pc, #56]	; (8000a54 <MX_USART2_UART_Init+0x4c>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a20:	4b0c      	ldr	r3, [pc, #48]	; (8000a54 <MX_USART2_UART_Init+0x4c>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a26:	4b0b      	ldr	r3, [pc, #44]	; (8000a54 <MX_USART2_UART_Init+0x4c>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a2c:	4b09      	ldr	r3, [pc, #36]	; (8000a54 <MX_USART2_UART_Init+0x4c>)
 8000a2e:	220c      	movs	r2, #12
 8000a30:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a32:	4b08      	ldr	r3, [pc, #32]	; (8000a54 <MX_USART2_UART_Init+0x4c>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a38:	4b06      	ldr	r3, [pc, #24]	; (8000a54 <MX_USART2_UART_Init+0x4c>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a3e:	4805      	ldr	r0, [pc, #20]	; (8000a54 <MX_USART2_UART_Init+0x4c>)
 8000a40:	f003 fb9a 	bl	8004178 <HAL_UART_Init>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a4a:	f000 fb0f 	bl	800106c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a4e:	bf00      	nop
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	2000011c 	.word	0x2000011c
 8000a58:	40004400 	.word	0x40004400

08000a5c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a62:	2300      	movs	r3, #0
 8000a64:	607b      	str	r3, [r7, #4]
 8000a66:	4b0c      	ldr	r3, [pc, #48]	; (8000a98 <MX_DMA_Init+0x3c>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6a:	4a0b      	ldr	r2, [pc, #44]	; (8000a98 <MX_DMA_Init+0x3c>)
 8000a6c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a70:	6313      	str	r3, [r2, #48]	; 0x30
 8000a72:	4b09      	ldr	r3, [pc, #36]	; (8000a98 <MX_DMA_Init+0x3c>)
 8000a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a76:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a7a:	607b      	str	r3, [r7, #4]
 8000a7c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8000a7e:	2200      	movs	r2, #0
 8000a80:	2105      	movs	r1, #5
 8000a82:	2010      	movs	r0, #16
 8000a84:	f001 fa1b 	bl	8001ebe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000a88:	2010      	movs	r0, #16
 8000a8a:	f001 fa34 	bl	8001ef6 <HAL_NVIC_EnableIRQ>

}
 8000a8e:	bf00      	nop
 8000a90:	3708      	adds	r7, #8
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	40023800 	.word	0x40023800

08000a9c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b088      	sub	sp, #32
 8000aa0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa2:	f107 030c 	add.w	r3, r7, #12
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	601a      	str	r2, [r3, #0]
 8000aaa:	605a      	str	r2, [r3, #4]
 8000aac:	609a      	str	r2, [r3, #8]
 8000aae:	60da      	str	r2, [r3, #12]
 8000ab0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	60bb      	str	r3, [r7, #8]
 8000ab6:	4b23      	ldr	r3, [pc, #140]	; (8000b44 <MX_GPIO_Init+0xa8>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aba:	4a22      	ldr	r2, [pc, #136]	; (8000b44 <MX_GPIO_Init+0xa8>)
 8000abc:	f043 0301 	orr.w	r3, r3, #1
 8000ac0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ac2:	4b20      	ldr	r3, [pc, #128]	; (8000b44 <MX_GPIO_Init+0xa8>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac6:	f003 0301 	and.w	r3, r3, #1
 8000aca:	60bb      	str	r3, [r7, #8]
 8000acc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ace:	2300      	movs	r3, #0
 8000ad0:	607b      	str	r3, [r7, #4]
 8000ad2:	4b1c      	ldr	r3, [pc, #112]	; (8000b44 <MX_GPIO_Init+0xa8>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad6:	4a1b      	ldr	r2, [pc, #108]	; (8000b44 <MX_GPIO_Init+0xa8>)
 8000ad8:	f043 0302 	orr.w	r3, r3, #2
 8000adc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ade:	4b19      	ldr	r3, [pc, #100]	; (8000b44 <MX_GPIO_Init+0xa8>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae2:	f003 0302 	and.w	r3, r3, #2
 8000ae6:	607b      	str	r3, [r7, #4]
 8000ae8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8000aea:	2200      	movs	r2, #0
 8000aec:	21d2      	movs	r1, #210	; 0xd2
 8000aee:	4816      	ldr	r0, [pc, #88]	; (8000b48 <MX_GPIO_Init+0xac>)
 8000af0:	f001 ff10 	bl	8002914 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8000af4:	2201      	movs	r2, #1
 8000af6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000afa:	4814      	ldr	r0, [pc, #80]	; (8000b4c <MX_GPIO_Init+0xb0>)
 8000afc:	f001 ff0a 	bl	8002914 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA1 PA4 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7;
 8000b00:	23d2      	movs	r3, #210	; 0xd2
 8000b02:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b04:	2301      	movs	r3, #1
 8000b06:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b10:	f107 030c 	add.w	r3, r7, #12
 8000b14:	4619      	mov	r1, r3
 8000b16:	480c      	ldr	r0, [pc, #48]	; (8000b48 <MX_GPIO_Init+0xac>)
 8000b18:	f001 fd78 	bl	800260c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000b1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b20:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b22:	2301      	movs	r3, #1
 8000b24:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b26:	2300      	movs	r3, #0
 8000b28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b2e:	f107 030c 	add.w	r3, r7, #12
 8000b32:	4619      	mov	r1, r3
 8000b34:	4805      	ldr	r0, [pc, #20]	; (8000b4c <MX_GPIO_Init+0xb0>)
 8000b36:	f001 fd69 	bl	800260c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b3a:	bf00      	nop
 8000b3c:	3720      	adds	r7, #32
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	40023800 	.word	0x40023800
 8000b48:	40020000 	.word	0x40020000
 8000b4c:	40020400 	.word	0x40020400

08000b50 <ADC_select_CH0>:
 * steps
 * 1- comment in init
 * 2- set rank of all to 1
 * 3- set n of conversions = 1    << most impo
 * */
void ADC_select_CH0(void){
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b084      	sub	sp, #16
 8000b54:	af00      	add	r7, sp, #0
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	ADC_ChannelConfTypeDef sConfig = {0};
 8000b56:	463b      	mov	r3, r7
 8000b58:	2200      	movs	r2, #0
 8000b5a:	601a      	str	r2, [r3, #0]
 8000b5c:	605a      	str	r2, [r3, #4]
 8000b5e:	609a      	str	r2, [r3, #8]
 8000b60:	60da      	str	r2, [r3, #12]
	sConfig.Channel = ADC_CHANNEL_0;
 8000b62:	2300      	movs	r3, #0
 8000b64:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8000b66:	2301      	movs	r3, #1
 8000b68:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 8000b6a:	2304      	movs	r3, #4
 8000b6c:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b6e:	463b      	mov	r3, r7
 8000b70:	4619      	mov	r1, r3
 8000b72:	4806      	ldr	r0, [pc, #24]	; (8000b8c <ADC_select_CH0+0x3c>)
 8000b74:	f000 feaa 	bl	80018cc <HAL_ADC_ConfigChannel>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <ADC_select_CH0+0x32>
	{
		Error_Handler();
 8000b7e:	f000 fa75 	bl	800106c <Error_Handler>
	}


}
 8000b82:	bf00      	nop
 8000b84:	3710      	adds	r7, #16
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	2000003c 	.word	0x2000003c

08000b90 <ADC_select_CH5>:

void ADC_select_CH5(void){
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b084      	sub	sp, #16
 8000b94:	af00      	add	r7, sp, #0
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	ADC_ChannelConfTypeDef sConfig = {0};
 8000b96:	463b      	mov	r3, r7
 8000b98:	2200      	movs	r2, #0
 8000b9a:	601a      	str	r2, [r3, #0]
 8000b9c:	605a      	str	r2, [r3, #4]
 8000b9e:	609a      	str	r2, [r3, #8]
 8000ba0:	60da      	str	r2, [r3, #12]
	sConfig.Channel = ADC_CHANNEL_5;
 8000ba2:	2305      	movs	r3, #5
 8000ba4:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000baa:	463b      	mov	r3, r7
 8000bac:	4619      	mov	r1, r3
 8000bae:	4806      	ldr	r0, [pc, #24]	; (8000bc8 <ADC_select_CH5+0x38>)
 8000bb0:	f000 fe8c 	bl	80018cc <HAL_ADC_ConfigChannel>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <ADC_select_CH5+0x2e>
	{
		Error_Handler();
 8000bba:	f000 fa57 	bl	800106c <Error_Handler>
	}
}
 8000bbe:	bf00      	nop
 8000bc0:	3710      	adds	r7, #16
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	2000003c 	.word	0x2000003c

08000bcc <EEPROM_voidInitTime>:
uint32_t GetElapsedTime(void){
	uint32_t l_ElapsTim = g_timeElapsedSec;
	return l_ElapsTim;
}
/* Read Flag value */
void EEPROM_voidInitTime(void){
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0
	EEPROM_Read(PAGE_NUM_FLAG_LOC, OFFSET_NUM_FLAG, &g_flag, FLAG_SIZE_DATA);
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	4a15      	ldr	r2, [pc, #84]	; (8000c2c <EEPROM_voidInitTime+0x60>)
 8000bd6:	2103      	movs	r1, #3
 8000bd8:	2064      	movs	r0, #100	; 0x64
 8000bda:	f7ff fcff 	bl	80005dc <EEPROM_Read>

	HAL_Delay(5);
 8000bde:	2005      	movs	r0, #5
 8000be0:	f000 fc8c 	bl	80014fc <HAL_Delay>
	if(g_flag != FIRST_TIME){
 8000be4:	4b11      	ldr	r3, [pc, #68]	; (8000c2c <EEPROM_voidInitTime+0x60>)
 8000be6:	781b      	ldrb	r3, [r3, #0]
 8000be8:	2bff      	cmp	r3, #255	; 0xff
 8000bea:	d006      	beq.n	8000bfa <EEPROM_voidInitTime+0x2e>

		EEPROM_Read(PAGE_NUM_TIM_LOC, OFFSET_NUM_TIM, (uint8_t *)&g_timeElapsedSec, TIM_SIZE_DATA);
 8000bec:	2304      	movs	r3, #4
 8000bee:	4a10      	ldr	r2, [pc, #64]	; (8000c30 <EEPROM_voidInitTime+0x64>)
 8000bf0:	2101      	movs	r1, #1
 8000bf2:	2001      	movs	r0, #1
 8000bf4:	f7ff fcf2 	bl	80005dc <EEPROM_Read>
		for(uint8_t i = 0 ; i < 7 ; i++){
			EEPROM_PageErase(i);
		}
		EEPROM_Write(PAGE_NUM_FLAG_LOC, OFFSET_NUM_FLAG,&Done, FLAG_SIZE_DATA);
	}
}
 8000bf8:	e013      	b.n	8000c22 <EEPROM_voidInitTime+0x56>
		for(uint8_t i = 0 ; i < 7 ; i++){
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	71fb      	strb	r3, [r7, #7]
 8000bfe:	e007      	b.n	8000c10 <EEPROM_voidInitTime+0x44>
			EEPROM_PageErase(i);
 8000c00:	79fb      	ldrb	r3, [r7, #7]
 8000c02:	b29b      	uxth	r3, r3
 8000c04:	4618      	mov	r0, r3
 8000c06:	f7ff fd4b 	bl	80006a0 <EEPROM_PageErase>
		for(uint8_t i = 0 ; i < 7 ; i++){
 8000c0a:	79fb      	ldrb	r3, [r7, #7]
 8000c0c:	3301      	adds	r3, #1
 8000c0e:	71fb      	strb	r3, [r7, #7]
 8000c10:	79fb      	ldrb	r3, [r7, #7]
 8000c12:	2b06      	cmp	r3, #6
 8000c14:	d9f4      	bls.n	8000c00 <EEPROM_voidInitTime+0x34>
		EEPROM_Write(PAGE_NUM_FLAG_LOC, OFFSET_NUM_FLAG,&Done, FLAG_SIZE_DATA);
 8000c16:	2301      	movs	r3, #1
 8000c18:	4a06      	ldr	r2, [pc, #24]	; (8000c34 <EEPROM_voidInitTime+0x68>)
 8000c1a:	2103      	movs	r1, #3
 8000c1c:	2064      	movs	r0, #100	; 0x64
 8000c1e:	f7ff fc77 	bl	8000510 <EEPROM_Write>
}
 8000c22:	bf00      	nop
 8000c24:	3708      	adds	r7, #8
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	200001e0 	.word	0x200001e0
 8000c30:	200001dc 	.word	0x200001dc
 8000c34:	20000000 	.word	0x20000000

08000c38 <mapDigitalvalueToLeds>:


//fuel part no RTOS
void mapDigitalvalueToLeds(uint32_t digitalValue){
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
	//full tank
	if (digitalValue > FUEL_MAX_DIGITA_VALUE){
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	f240 5214 	movw	r2, #1300	; 0x514
 8000c46:	4293      	cmp	r3, r2
 8000c48:	d917      	bls.n	8000c7a <mapDigitalvalueToLeds+0x42>

		HAL_GPIO_WritePin(FUEL_LED0_PORT, FUEL_LED0_PIN,GPIO_PIN_RESET);
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	2102      	movs	r1, #2
 8000c4e:	4843      	ldr	r0, [pc, #268]	; (8000d5c <mapDigitalvalueToLeds+0x124>)
 8000c50:	f001 fe60 	bl	8002914 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(FUEL_LED1_PORT, FUEL_LED1_PIN,GPIO_PIN_RESET);
 8000c54:	2200      	movs	r2, #0
 8000c56:	2110      	movs	r1, #16
 8000c58:	4840      	ldr	r0, [pc, #256]	; (8000d5c <mapDigitalvalueToLeds+0x124>)
 8000c5a:	f001 fe5b 	bl	8002914 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(FUEL_LED2_PORT, FUEL_LED2_PIN,GPIO_PIN_RESET);
 8000c5e:	2200      	movs	r2, #0
 8000c60:	2140      	movs	r1, #64	; 0x40
 8000c62:	483e      	ldr	r0, [pc, #248]	; (8000d5c <mapDigitalvalueToLeds+0x124>)
 8000c64:	f001 fe56 	bl	8002914 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(FUEL_LED3_PORT, FUEL_LED3_PIN,GPIO_PIN_RESET);
 8000c68:	2200      	movs	r2, #0
 8000c6a:	2180      	movs	r1, #128	; 0x80
 8000c6c:	483b      	ldr	r0, [pc, #236]	; (8000d5c <mapDigitalvalueToLeds+0x124>)
 8000c6e:	f001 fe51 	bl	8002914 <HAL_GPIO_WritePin>

		curretFuelValue = FUEL_LEVEL_FULL_TANK;
 8000c72:	4b3b      	ldr	r3, [pc, #236]	; (8000d60 <mapDigitalvalueToLeds+0x128>)
 8000c74:	2204      	movs	r2, #4
 8000c76:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(FUEL_LED2_PORT, FUEL_LED2_PIN,GPIO_PIN_SET);
		HAL_GPIO_WritePin(FUEL_LED3_PORT, FUEL_LED3_PIN,GPIO_PIN_SET);

		curretFuelValue = FUEL_LEVEL_EMPTY_TANK;
	}
}
 8000c78:	e06b      	b.n	8000d52 <mapDigitalvalueToLeds+0x11a>
	else if (digitalValue > (FUEL_MAX_DIGITA_VALUE*3)/4){
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	f5b3 7f74 	cmp.w	r3, #976	; 0x3d0
 8000c80:	d317      	bcc.n	8000cb2 <mapDigitalvalueToLeds+0x7a>
		HAL_GPIO_WritePin(FUEL_LED0_PORT, FUEL_LED0_PIN,GPIO_PIN_SET);
 8000c82:	2201      	movs	r2, #1
 8000c84:	2102      	movs	r1, #2
 8000c86:	4835      	ldr	r0, [pc, #212]	; (8000d5c <mapDigitalvalueToLeds+0x124>)
 8000c88:	f001 fe44 	bl	8002914 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(FUEL_LED1_PORT, FUEL_LED1_PIN,GPIO_PIN_RESET);
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	2110      	movs	r1, #16
 8000c90:	4832      	ldr	r0, [pc, #200]	; (8000d5c <mapDigitalvalueToLeds+0x124>)
 8000c92:	f001 fe3f 	bl	8002914 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(FUEL_LED2_PORT, FUEL_LED2_PIN,GPIO_PIN_RESET);
 8000c96:	2200      	movs	r2, #0
 8000c98:	2140      	movs	r1, #64	; 0x40
 8000c9a:	4830      	ldr	r0, [pc, #192]	; (8000d5c <mapDigitalvalueToLeds+0x124>)
 8000c9c:	f001 fe3a 	bl	8002914 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(FUEL_LED3_PORT, FUEL_LED3_PIN,GPIO_PIN_RESET);
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	2180      	movs	r1, #128	; 0x80
 8000ca4:	482d      	ldr	r0, [pc, #180]	; (8000d5c <mapDigitalvalueToLeds+0x124>)
 8000ca6:	f001 fe35 	bl	8002914 <HAL_GPIO_WritePin>
		curretFuelValue = FUEL_LEVEL_THREE_Q_TANK;
 8000caa:	4b2d      	ldr	r3, [pc, #180]	; (8000d60 <mapDigitalvalueToLeds+0x128>)
 8000cac:	2203      	movs	r2, #3
 8000cae:	701a      	strb	r2, [r3, #0]
}
 8000cb0:	e04f      	b.n	8000d52 <mapDigitalvalueToLeds+0x11a>
	else if (digitalValue > (FUEL_MAX_DIGITA_VALUE )/2){
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	f240 228a 	movw	r2, #650	; 0x28a
 8000cb8:	4293      	cmp	r3, r2
 8000cba:	d917      	bls.n	8000cec <mapDigitalvalueToLeds+0xb4>
		HAL_GPIO_WritePin(FUEL_LED0_PORT, FUEL_LED0_PIN,GPIO_PIN_SET);
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	2102      	movs	r1, #2
 8000cc0:	4826      	ldr	r0, [pc, #152]	; (8000d5c <mapDigitalvalueToLeds+0x124>)
 8000cc2:	f001 fe27 	bl	8002914 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(FUEL_LED1_PORT, FUEL_LED1_PIN,GPIO_PIN_SET);
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	2110      	movs	r1, #16
 8000cca:	4824      	ldr	r0, [pc, #144]	; (8000d5c <mapDigitalvalueToLeds+0x124>)
 8000ccc:	f001 fe22 	bl	8002914 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(FUEL_LED2_PORT, FUEL_LED2_PIN,GPIO_PIN_RESET);
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	2140      	movs	r1, #64	; 0x40
 8000cd4:	4821      	ldr	r0, [pc, #132]	; (8000d5c <mapDigitalvalueToLeds+0x124>)
 8000cd6:	f001 fe1d 	bl	8002914 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(FUEL_LED3_PORT, FUEL_LED3_PIN,GPIO_PIN_RESET);
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2180      	movs	r1, #128	; 0x80
 8000cde:	481f      	ldr	r0, [pc, #124]	; (8000d5c <mapDigitalvalueToLeds+0x124>)
 8000ce0:	f001 fe18 	bl	8002914 <HAL_GPIO_WritePin>
		curretFuelValue = FUEL_LEVEL_HALF_TANK;
 8000ce4:	4b1e      	ldr	r3, [pc, #120]	; (8000d60 <mapDigitalvalueToLeds+0x128>)
 8000ce6:	2202      	movs	r2, #2
 8000ce8:	701a      	strb	r2, [r3, #0]
}
 8000cea:	e032      	b.n	8000d52 <mapDigitalvalueToLeds+0x11a>
	else if (digitalValue > (FUEL_MAX_DIGITA_VALUE /4)){
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	f5b3 7fa3 	cmp.w	r3, #326	; 0x146
 8000cf2:	d317      	bcc.n	8000d24 <mapDigitalvalueToLeds+0xec>
		HAL_GPIO_WritePin(FUEL_LED0_PORT, FUEL_LED0_PIN,GPIO_PIN_SET);
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	2102      	movs	r1, #2
 8000cf8:	4818      	ldr	r0, [pc, #96]	; (8000d5c <mapDigitalvalueToLeds+0x124>)
 8000cfa:	f001 fe0b 	bl	8002914 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(FUEL_LED1_PORT, FUEL_LED1_PIN,GPIO_PIN_SET);
 8000cfe:	2201      	movs	r2, #1
 8000d00:	2110      	movs	r1, #16
 8000d02:	4816      	ldr	r0, [pc, #88]	; (8000d5c <mapDigitalvalueToLeds+0x124>)
 8000d04:	f001 fe06 	bl	8002914 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(FUEL_LED2_PORT, FUEL_LED2_PIN,GPIO_PIN_SET);
 8000d08:	2201      	movs	r2, #1
 8000d0a:	2140      	movs	r1, #64	; 0x40
 8000d0c:	4813      	ldr	r0, [pc, #76]	; (8000d5c <mapDigitalvalueToLeds+0x124>)
 8000d0e:	f001 fe01 	bl	8002914 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(FUEL_LED3_PORT, FUEL_LED3_PIN,GPIO_PIN_RESET);
 8000d12:	2200      	movs	r2, #0
 8000d14:	2180      	movs	r1, #128	; 0x80
 8000d16:	4811      	ldr	r0, [pc, #68]	; (8000d5c <mapDigitalvalueToLeds+0x124>)
 8000d18:	f001 fdfc 	bl	8002914 <HAL_GPIO_WritePin>
		curretFuelValue = FUEL_LEVEL_QUARTER_TANK;
 8000d1c:	4b10      	ldr	r3, [pc, #64]	; (8000d60 <mapDigitalvalueToLeds+0x128>)
 8000d1e:	2201      	movs	r2, #1
 8000d20:	701a      	strb	r2, [r3, #0]
}
 8000d22:	e016      	b.n	8000d52 <mapDigitalvalueToLeds+0x11a>
		HAL_GPIO_WritePin(FUEL_LED0_PORT, FUEL_LED0_PIN,GPIO_PIN_SET);
 8000d24:	2201      	movs	r2, #1
 8000d26:	2102      	movs	r1, #2
 8000d28:	480c      	ldr	r0, [pc, #48]	; (8000d5c <mapDigitalvalueToLeds+0x124>)
 8000d2a:	f001 fdf3 	bl	8002914 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(FUEL_LED1_PORT, FUEL_LED1_PIN,GPIO_PIN_SET);
 8000d2e:	2201      	movs	r2, #1
 8000d30:	2110      	movs	r1, #16
 8000d32:	480a      	ldr	r0, [pc, #40]	; (8000d5c <mapDigitalvalueToLeds+0x124>)
 8000d34:	f001 fdee 	bl	8002914 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(FUEL_LED2_PORT, FUEL_LED2_PIN,GPIO_PIN_SET);
 8000d38:	2201      	movs	r2, #1
 8000d3a:	2140      	movs	r1, #64	; 0x40
 8000d3c:	4807      	ldr	r0, [pc, #28]	; (8000d5c <mapDigitalvalueToLeds+0x124>)
 8000d3e:	f001 fde9 	bl	8002914 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(FUEL_LED3_PORT, FUEL_LED3_PIN,GPIO_PIN_SET);
 8000d42:	2201      	movs	r2, #1
 8000d44:	2180      	movs	r1, #128	; 0x80
 8000d46:	4805      	ldr	r0, [pc, #20]	; (8000d5c <mapDigitalvalueToLeds+0x124>)
 8000d48:	f001 fde4 	bl	8002914 <HAL_GPIO_WritePin>
		curretFuelValue = FUEL_LEVEL_EMPTY_TANK;
 8000d4c:	4b04      	ldr	r3, [pc, #16]	; (8000d60 <mapDigitalvalueToLeds+0x128>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	701a      	strb	r2, [r3, #0]
}
 8000d52:	bf00      	nop
 8000d54:	3708      	adds	r7, #8
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	40020000 	.word	0x40020000
 8000d60:	200001e8 	.word	0x200001e8

08000d64 <getDigitalTemperatureFromADC>:

//lm 35 temprater no RTOS
void getDigitalTemperatureFromADC (){
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0

	HAL_ADC_Start(&hadc1);
 8000d68:	4809      	ldr	r0, [pc, #36]	; (8000d90 <getDigitalTemperatureFromADC+0x2c>)
 8000d6a:	f000 fc2f 	bl	80015cc <HAL_ADC_Start>

	HAL_ADC_PollForConversion(&hadc1, 100);
 8000d6e:	2164      	movs	r1, #100	; 0x64
 8000d70:	4807      	ldr	r0, [pc, #28]	; (8000d90 <getDigitalTemperatureFromADC+0x2c>)
 8000d72:	f000 fd12 	bl	800179a <HAL_ADC_PollForConversion>
	ADC_TempratureDigitalRead = HAL_ADC_GetValue(&hadc1);
 8000d76:	4806      	ldr	r0, [pc, #24]	; (8000d90 <getDigitalTemperatureFromADC+0x2c>)
 8000d78:	f000 fd9a 	bl	80018b0 <HAL_ADC_GetValue>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	b29a      	uxth	r2, r3
 8000d80:	4b04      	ldr	r3, [pc, #16]	; (8000d94 <getDigitalTemperatureFromADC+0x30>)
 8000d82:	801a      	strh	r2, [r3, #0]
	HAL_ADC_Stop(&hadc1);
 8000d84:	4802      	ldr	r0, [pc, #8]	; (8000d90 <getDigitalTemperatureFromADC+0x2c>)
 8000d86:	f000 fcd5 	bl	8001734 <HAL_ADC_Stop>
}
 8000d8a:	bf00      	nop
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	2000003c 	.word	0x2000003c
 8000d94:	200001ea 	.word	0x200001ea

08000d98 <mapDigitalTemperatureToVolt>:
void mapDigitalTemperatureToVolt() {
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
	temperatureInMVolt = (ADC_TempratureDigitalRead*(LM35_MAX_OUT_VOLt-LM35_MINIMUM_OUT_VOLT))/(LM35_MAX_DIGITA_VALUE)+LM35_MINIMUM_OUT_VOLT;
 8000d9c:	4b09      	ldr	r3, [pc, #36]	; (8000dc4 <mapDigitalTemperatureToVolt+0x2c>)
 8000d9e:	881b      	ldrh	r3, [r3, #0]
 8000da0:	461a      	mov	r2, r3
 8000da2:	f44f 63b9 	mov.w	r3, #1480	; 0x5c8
 8000da6:	fb02 f303 	mul.w	r3, r2, r3
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	da01      	bge.n	8000db2 <mapDigitalTemperatureToVolt+0x1a>
 8000dae:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8000db2:	131b      	asrs	r3, r3, #12
 8000db4:	b29a      	uxth	r2, r3
 8000db6:	4b04      	ldr	r3, [pc, #16]	; (8000dc8 <mapDigitalTemperatureToVolt+0x30>)
 8000db8:	801a      	strh	r2, [r3, #0]
}
 8000dba:	bf00      	nop
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr
 8000dc4:	200001ea 	.word	0x200001ea
 8000dc8:	200001ee 	.word	0x200001ee

08000dcc <mapMVoltToCelsius>:

void mapMVoltToCelsius() {
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
	temperatureInCelsius = (temperatureInMVolt*(LM35_MAX_TEMPRATURE-LM35_MINIMUM_TEMPRATURE))/(LM35_MAX_OUT_VOLt-LM35_MINIMUM_OUT_VOLT) + LM35_MINIMUM_TEMPRATURE ;
 8000dd0:	4b08      	ldr	r3, [pc, #32]	; (8000df4 <mapMVoltToCelsius+0x28>)
 8000dd2:	881b      	ldrh	r3, [r3, #0]
 8000dd4:	4a08      	ldr	r2, [pc, #32]	; (8000df8 <mapMVoltToCelsius+0x2c>)
 8000dd6:	fb82 1203 	smull	r1, r2, r2, r3
 8000dda:	1092      	asrs	r2, r2, #2
 8000ddc:	17db      	asrs	r3, r3, #31
 8000dde:	1ad3      	subs	r3, r2, r3
 8000de0:	b2db      	uxtb	r3, r3
 8000de2:	3302      	adds	r3, #2
 8000de4:	b2da      	uxtb	r2, r3
 8000de6:	4b05      	ldr	r3, [pc, #20]	; (8000dfc <mapMVoltToCelsius+0x30>)
 8000de8:	701a      	strb	r2, [r3, #0]
}
 8000dea:	bf00      	nop
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr
 8000df4:	200001ee 	.word	0x200001ee
 8000df8:	66666667 	.word	0x66666667
 8000dfc:	200001ec 	.word	0x200001ec

08000e00 <IncTimFunc>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_IncTimFunc */
void IncTimFunc(void *argument)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for(;;)
	{
		g_timeElapsedSec += 2;
 8000e08:	4b04      	ldr	r3, [pc, #16]	; (8000e1c <IncTimFunc+0x1c>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	3302      	adds	r3, #2
 8000e0e:	4a03      	ldr	r2, [pc, #12]	; (8000e1c <IncTimFunc+0x1c>)
 8000e10:	6013      	str	r3, [r2, #0]

		osDelay(2000);
 8000e12:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000e16:	f004 f931 	bl	800507c <osDelay>
		g_timeElapsedSec += 2;
 8000e1a:	e7f5      	b.n	8000e08 <IncTimFunc+0x8>
 8000e1c:	200001dc 	.word	0x200001dc

08000e20 <EEPROM_saveTimVal>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_EEPROM_saveTimVal */
void EEPROM_saveTimVal(void *argument)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b084      	sub	sp, #16
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN EEPROM_saveTimVal */
	/* Infinite loop */
	for(;;)
	{
		EEPROM_Write(PAGE_NUM_TIM_LOC, OFFSET_NUM_TIM,(uint8_t *)&g_timeElapsedSec,TIM_SIZE_DATA);
 8000e28:	2304      	movs	r3, #4
 8000e2a:	4a28      	ldr	r2, [pc, #160]	; (8000ecc <EEPROM_saveTimVal+0xac>)
 8000e2c:	2101      	movs	r1, #1
 8000e2e:	2001      	movs	r0, #1
 8000e30:	f7ff fb6e 	bl	8000510 <EEPROM_Write>
		//uint32_t timeInMins = g_timeElapsedSec/60;
		uint8_t tim0 = (g_timeElapsedSec%10 ) 		+ 48;
 8000e34:	4b25      	ldr	r3, [pc, #148]	; (8000ecc <EEPROM_saveTimVal+0xac>)
 8000e36:	6819      	ldr	r1, [r3, #0]
 8000e38:	4b25      	ldr	r3, [pc, #148]	; (8000ed0 <EEPROM_saveTimVal+0xb0>)
 8000e3a:	fba3 2301 	umull	r2, r3, r3, r1
 8000e3e:	08da      	lsrs	r2, r3, #3
 8000e40:	4613      	mov	r3, r2
 8000e42:	009b      	lsls	r3, r3, #2
 8000e44:	4413      	add	r3, r2
 8000e46:	005b      	lsls	r3, r3, #1
 8000e48:	1aca      	subs	r2, r1, r3
 8000e4a:	b2d3      	uxtb	r3, r2
 8000e4c:	3330      	adds	r3, #48	; 0x30
 8000e4e:	73fb      	strb	r3, [r7, #15]
		uint8_t tim1 = (g_timeElapsedSec%100) /10 	+ 48;
 8000e50:	4b1e      	ldr	r3, [pc, #120]	; (8000ecc <EEPROM_saveTimVal+0xac>)
 8000e52:	681a      	ldr	r2, [r3, #0]
 8000e54:	4b1f      	ldr	r3, [pc, #124]	; (8000ed4 <EEPROM_saveTimVal+0xb4>)
 8000e56:	fba3 1302 	umull	r1, r3, r3, r2
 8000e5a:	095b      	lsrs	r3, r3, #5
 8000e5c:	2164      	movs	r1, #100	; 0x64
 8000e5e:	fb01 f303 	mul.w	r3, r1, r3
 8000e62:	1ad3      	subs	r3, r2, r3
 8000e64:	4a1a      	ldr	r2, [pc, #104]	; (8000ed0 <EEPROM_saveTimVal+0xb0>)
 8000e66:	fba2 2303 	umull	r2, r3, r2, r3
 8000e6a:	08db      	lsrs	r3, r3, #3
 8000e6c:	b2db      	uxtb	r3, r3
 8000e6e:	3330      	adds	r3, #48	; 0x30
 8000e70:	73bb      	strb	r3, [r7, #14]
		uint8_t tim2 = (g_timeElapsedSec%1000)/100 	+ 48;
 8000e72:	4b16      	ldr	r3, [pc, #88]	; (8000ecc <EEPROM_saveTimVal+0xac>)
 8000e74:	681a      	ldr	r2, [r3, #0]
 8000e76:	4b18      	ldr	r3, [pc, #96]	; (8000ed8 <EEPROM_saveTimVal+0xb8>)
 8000e78:	fba3 1302 	umull	r1, r3, r3, r2
 8000e7c:	099b      	lsrs	r3, r3, #6
 8000e7e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000e82:	fb01 f303 	mul.w	r3, r1, r3
 8000e86:	1ad3      	subs	r3, r2, r3
 8000e88:	4a12      	ldr	r2, [pc, #72]	; (8000ed4 <EEPROM_saveTimVal+0xb4>)
 8000e8a:	fba2 2303 	umull	r2, r3, r2, r3
 8000e8e:	095b      	lsrs	r3, r3, #5
 8000e90:	b2db      	uxtb	r3, r3
 8000e92:	3330      	adds	r3, #48	; 0x30
 8000e94:	737b      	strb	r3, [r7, #13]
		uint8_t tim3 = (g_timeElapsedSec/1000) 		+ 48;
 8000e96:	4b0d      	ldr	r3, [pc, #52]	; (8000ecc <EEPROM_saveTimVal+0xac>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	4a0f      	ldr	r2, [pc, #60]	; (8000ed8 <EEPROM_saveTimVal+0xb8>)
 8000e9c:	fba2 2303 	umull	r2, r3, r2, r3
 8000ea0:	099b      	lsrs	r3, r3, #6
 8000ea2:	b2db      	uxtb	r3, r3
 8000ea4:	3330      	adds	r3, #48	; 0x30
 8000ea6:	733b      	strb	r3, [r7, #12]

		rpi_data[8] = tim0;
 8000ea8:	4a0c      	ldr	r2, [pc, #48]	; (8000edc <EEPROM_saveTimVal+0xbc>)
 8000eaa:	7bfb      	ldrb	r3, [r7, #15]
 8000eac:	7213      	strb	r3, [r2, #8]
		rpi_data[7] = tim1;
 8000eae:	4a0b      	ldr	r2, [pc, #44]	; (8000edc <EEPROM_saveTimVal+0xbc>)
 8000eb0:	7bbb      	ldrb	r3, [r7, #14]
 8000eb2:	71d3      	strb	r3, [r2, #7]
		rpi_data[6] = tim2;
 8000eb4:	4a09      	ldr	r2, [pc, #36]	; (8000edc <EEPROM_saveTimVal+0xbc>)
 8000eb6:	7b7b      	ldrb	r3, [r7, #13]
 8000eb8:	7193      	strb	r3, [r2, #6]
		rpi_data[5] = tim3;
 8000eba:	4a08      	ldr	r2, [pc, #32]	; (8000edc <EEPROM_saveTimVal+0xbc>)
 8000ebc:	7b3b      	ldrb	r3, [r7, #12]
 8000ebe:	7153      	strb	r3, [r2, #5]

		osDelay(5000);
 8000ec0:	f241 3088 	movw	r0, #5000	; 0x1388
 8000ec4:	f004 f8da 	bl	800507c <osDelay>
	{
 8000ec8:	e7ae      	b.n	8000e28 <EEPROM_saveTimVal+0x8>
 8000eca:	bf00      	nop
 8000ecc:	200001dc 	.word	0x200001dc
 8000ed0:	cccccccd 	.word	0xcccccccd
 8000ed4:	51eb851f 	.word	0x51eb851f
 8000ed8:	10624dd3 	.word	0x10624dd3
 8000edc:	20000004 	.word	0x20000004

08000ee0 <getFuelLevelFromADC>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_getFuelLevelFromADC */
void getFuelLevelFromADC(void *argument)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN getFuelLevelFromADC */
	osDelay(50);
 8000ee8:	2032      	movs	r0, #50	; 0x32
 8000eea:	f004 f8c7 	bl	800507c <osDelay>
	/* Infinite loop */
	for(;;)
	{
		ADC_select_CH0();
 8000eee:	f7ff fe2f 	bl	8000b50 <ADC_select_CH0>
		HAL_ADC_Start(&hadc1);
 8000ef2:	480a      	ldr	r0, [pc, #40]	; (8000f1c <getFuelLevelFromADC+0x3c>)
 8000ef4:	f000 fb6a 	bl	80015cc <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, 100);
 8000ef8:	2164      	movs	r1, #100	; 0x64
 8000efa:	4808      	ldr	r0, [pc, #32]	; (8000f1c <getFuelLevelFromADC+0x3c>)
 8000efc:	f000 fc4d 	bl	800179a <HAL_ADC_PollForConversion>
		adcFuelValue = HAL_ADC_GetValue(&hadc1);
 8000f00:	4806      	ldr	r0, [pc, #24]	; (8000f1c <getFuelLevelFromADC+0x3c>)
 8000f02:	f000 fcd5 	bl	80018b0 <HAL_ADC_GetValue>
 8000f06:	4603      	mov	r3, r0
 8000f08:	4a05      	ldr	r2, [pc, #20]	; (8000f20 <getFuelLevelFromADC+0x40>)
 8000f0a:	6013      	str	r3, [r2, #0]
		HAL_ADC_Stop(&hadc1);
 8000f0c:	4803      	ldr	r0, [pc, #12]	; (8000f1c <getFuelLevelFromADC+0x3c>)
 8000f0e:	f000 fc11 	bl	8001734 <HAL_ADC_Stop>
		osDelay(2000);
 8000f12:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000f16:	f004 f8b1 	bl	800507c <osDelay>
		ADC_select_CH0();
 8000f1a:	e7e8      	b.n	8000eee <getFuelLevelFromADC+0xe>
 8000f1c:	2000003c 	.word	0x2000003c
 8000f20:	200001e4 	.word	0x200001e4

08000f24 <mapFuelLevelDigtalToLED>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_mapFuelLevelDigtalToLED */
void mapFuelLevelDigtalToLED(void *argument)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN mapFuelLevelDigtalToLED */
	osDelay(100);
 8000f2c:	2064      	movs	r0, #100	; 0x64
 8000f2e:	f004 f8a5 	bl	800507c <osDelay>

	/* Infinite loop */

	for(;;)
	{
		mapDigitalvalueToLeds(adcFuelValue);
 8000f32:	4b08      	ldr	r3, [pc, #32]	; (8000f54 <mapFuelLevelDigtalToLED+0x30>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	4618      	mov	r0, r3
 8000f38:	f7ff fe7e 	bl	8000c38 <mapDigitalvalueToLeds>

		rpi_data[0] = curretFuelValue + 48;
 8000f3c:	4b06      	ldr	r3, [pc, #24]	; (8000f58 <mapFuelLevelDigtalToLED+0x34>)
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	3330      	adds	r3, #48	; 0x30
 8000f42:	b2da      	uxtb	r2, r3
 8000f44:	4b05      	ldr	r3, [pc, #20]	; (8000f5c <mapFuelLevelDigtalToLED+0x38>)
 8000f46:	701a      	strb	r2, [r3, #0]
		osDelay(2000);
 8000f48:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000f4c:	f004 f896 	bl	800507c <osDelay>
		mapDigitalvalueToLeds(adcFuelValue);
 8000f50:	e7ef      	b.n	8000f32 <mapFuelLevelDigtalToLED+0xe>
 8000f52:	bf00      	nop
 8000f54:	200001e4 	.word	0x200001e4
 8000f58:	200001e8 	.word	0x200001e8
 8000f5c:	20000004 	.word	0x20000004

08000f60 <LM35_getTemprature>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_LM35_getTemprature */
void LM35_getTemprature(void *argument)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b084      	sub	sp, #16
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN LM35_getTemprature */
	/* Infinite loop */
	for(;;)
	{
		ADC_select_CH5();
 8000f68:	f7ff fe12 	bl	8000b90 <ADC_select_CH5>
		//getting temperature digital value from adc
		getDigitalTemperatureFromADC();
 8000f6c:	f7ff fefa 	bl	8000d64 <getDigitalTemperatureFromADC>
		//mapping Digital temperature to volt
		mapDigitalTemperatureToVolt();
 8000f70:	f7ff ff12 	bl	8000d98 <mapDigitalTemperatureToVolt>
		//mapping volt to celsius
		mapMVoltToCelsius();
 8000f74:	f7ff ff2a 	bl	8000dcc <mapMVoltToCelsius>

		// maping temp to 3 digits
		uint8_t temp0 = (temperatureInCelsius%10 ) 		+ 48;
 8000f78:	4b1b      	ldr	r3, [pc, #108]	; (8000fe8 <LM35_getTemprature+0x88>)
 8000f7a:	781a      	ldrb	r2, [r3, #0]
 8000f7c:	4b1b      	ldr	r3, [pc, #108]	; (8000fec <LM35_getTemprature+0x8c>)
 8000f7e:	fba3 1302 	umull	r1, r3, r3, r2
 8000f82:	08d9      	lsrs	r1, r3, #3
 8000f84:	460b      	mov	r3, r1
 8000f86:	009b      	lsls	r3, r3, #2
 8000f88:	440b      	add	r3, r1
 8000f8a:	005b      	lsls	r3, r3, #1
 8000f8c:	1ad3      	subs	r3, r2, r3
 8000f8e:	b2db      	uxtb	r3, r3
 8000f90:	3330      	adds	r3, #48	; 0x30
 8000f92:	73fb      	strb	r3, [r7, #15]
		uint8_t temp1 = (temperatureInCelsius%100) /10 	+ 48;
 8000f94:	4b14      	ldr	r3, [pc, #80]	; (8000fe8 <LM35_getTemprature+0x88>)
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	4a15      	ldr	r2, [pc, #84]	; (8000ff0 <LM35_getTemprature+0x90>)
 8000f9a:	fba2 1203 	umull	r1, r2, r2, r3
 8000f9e:	0952      	lsrs	r2, r2, #5
 8000fa0:	2164      	movs	r1, #100	; 0x64
 8000fa2:	fb01 f202 	mul.w	r2, r1, r2
 8000fa6:	1a9b      	subs	r3, r3, r2
 8000fa8:	b2db      	uxtb	r3, r3
 8000faa:	4a10      	ldr	r2, [pc, #64]	; (8000fec <LM35_getTemprature+0x8c>)
 8000fac:	fba2 2303 	umull	r2, r3, r2, r3
 8000fb0:	08db      	lsrs	r3, r3, #3
 8000fb2:	b2db      	uxtb	r3, r3
 8000fb4:	3330      	adds	r3, #48	; 0x30
 8000fb6:	73bb      	strb	r3, [r7, #14]
		uint8_t temp2 = (temperatureInCelsius/100) 		+ 48;
 8000fb8:	4b0b      	ldr	r3, [pc, #44]	; (8000fe8 <LM35_getTemprature+0x88>)
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	4a0c      	ldr	r2, [pc, #48]	; (8000ff0 <LM35_getTemprature+0x90>)
 8000fbe:	fba2 2303 	umull	r2, r3, r2, r3
 8000fc2:	095b      	lsrs	r3, r3, #5
 8000fc4:	b2db      	uxtb	r3, r3
 8000fc6:	3330      	adds	r3, #48	; 0x30
 8000fc8:	737b      	strb	r3, [r7, #13]

		rpi_data[4]   = temp0;
 8000fca:	4a0a      	ldr	r2, [pc, #40]	; (8000ff4 <LM35_getTemprature+0x94>)
 8000fcc:	7bfb      	ldrb	r3, [r7, #15]
 8000fce:	7113      	strb	r3, [r2, #4]
		rpi_data[3]   = temp1;
 8000fd0:	4a08      	ldr	r2, [pc, #32]	; (8000ff4 <LM35_getTemprature+0x94>)
 8000fd2:	7bbb      	ldrb	r3, [r7, #14]
 8000fd4:	70d3      	strb	r3, [r2, #3]
		rpi_data[2]   = temp2;
 8000fd6:	4a07      	ldr	r2, [pc, #28]	; (8000ff4 <LM35_getTemprature+0x94>)
 8000fd8:	7b7b      	ldrb	r3, [r7, #13]
 8000fda:	7093      	strb	r3, [r2, #2]
		osDelay(2000);
 8000fdc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000fe0:	f004 f84c 	bl	800507c <osDelay>
	{
 8000fe4:	e7c0      	b.n	8000f68 <LM35_getTemprature+0x8>
 8000fe6:	bf00      	nop
 8000fe8:	200001ec 	.word	0x200001ec
 8000fec:	cccccccd 	.word	0xcccccccd
 8000ff0:	51eb851f 	.word	0x51eb851f
 8000ff4:	20000004 	.word	0x20000004

08000ff8 <trigSendRPI>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_trigSendRPI */
void trigSendRPI(void *argument)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN trigSendRPI */
	/* Infinite loop */
	for(;;)
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8001000:	2200      	movs	r2, #0
 8001002:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001006:	480b      	ldr	r0, [pc, #44]	; (8001034 <trigSendRPI+0x3c>)
 8001008:	f001 fc84 	bl	8002914 <HAL_GPIO_WritePin>
		HAL_Delay(2);
 800100c:	2002      	movs	r0, #2
 800100e:	f000 fa75 	bl	80014fc <HAL_Delay>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8001012:	2201      	movs	r2, #1
 8001014:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001018:	4806      	ldr	r0, [pc, #24]	; (8001034 <trigSendRPI+0x3c>)
 800101a:	f001 fc7b 	bl	8002914 <HAL_GPIO_WritePin>

		HAL_UART_Transmit(&huart1, &rpi_data[0], 9, 10);
 800101e:	230a      	movs	r3, #10
 8001020:	2209      	movs	r2, #9
 8001022:	4905      	ldr	r1, [pc, #20]	; (8001038 <trigSendRPI+0x40>)
 8001024:	4805      	ldr	r0, [pc, #20]	; (800103c <trigSendRPI+0x44>)
 8001026:	f003 f8f4 	bl	8004212 <HAL_UART_Transmit>
		// uint8_t me = 'A';
		// HAL_UART_Transmit(&huart1, &me, 1, 100);
		osDelay(5000);
 800102a:	f241 3088 	movw	r0, #5000	; 0x1388
 800102e:	f004 f825 	bl	800507c <osDelay>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8001032:	e7e5      	b.n	8001000 <trigSendRPI+0x8>
 8001034:	40020400 	.word	0x40020400
 8001038:	20000004 	.word	0x20000004
 800103c:	200000d8 	.word	0x200000d8

08001040 <renableUART_DMA>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_renableUART_DMA */
void renableUART_DMA(void *argument)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
	vTaskDelay(240);
 8001048:	20f0      	movs	r0, #240	; 0xf0
 800104a:	f004 ffa9 	bl	8005fa0 <vTaskDelay>
  /* USER CODE BEGIN renableUART_DMA */
  /* Infinite loop */
  for(;;)
  {

	HAL_UARTEx_ReceiveToIdle_DMA(&huart2, &rpi_data[1], 1);
 800104e:	2201      	movs	r2, #1
 8001050:	4904      	ldr	r1, [pc, #16]	; (8001064 <renableUART_DMA+0x24>)
 8001052:	4805      	ldr	r0, [pc, #20]	; (8001068 <renableUART_DMA+0x28>)
 8001054:	f003 f96f 	bl	8004336 <HAL_UARTEx_ReceiveToIdle_DMA>
    osDelay(2000);
 8001058:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800105c:	f004 f80e 	bl	800507c <osDelay>
	HAL_UARTEx_ReceiveToIdle_DMA(&huart2, &rpi_data[1], 1);
 8001060:	e7f5      	b.n	800104e <renableUART_DMA+0xe>
 8001062:	bf00      	nop
 8001064:	20000005 	.word	0x20000005
 8001068:	2000011c 	.word	0x2000011c

0800106c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001070:	b672      	cpsid	i
}
 8001072:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001074:	e7fe      	b.n	8001074 <Error_Handler+0x8>
	...

08001078 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800107e:	2300      	movs	r3, #0
 8001080:	607b      	str	r3, [r7, #4]
 8001082:	4b12      	ldr	r3, [pc, #72]	; (80010cc <HAL_MspInit+0x54>)
 8001084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001086:	4a11      	ldr	r2, [pc, #68]	; (80010cc <HAL_MspInit+0x54>)
 8001088:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800108c:	6453      	str	r3, [r2, #68]	; 0x44
 800108e:	4b0f      	ldr	r3, [pc, #60]	; (80010cc <HAL_MspInit+0x54>)
 8001090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001092:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001096:	607b      	str	r3, [r7, #4]
 8001098:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800109a:	2300      	movs	r3, #0
 800109c:	603b      	str	r3, [r7, #0]
 800109e:	4b0b      	ldr	r3, [pc, #44]	; (80010cc <HAL_MspInit+0x54>)
 80010a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a2:	4a0a      	ldr	r2, [pc, #40]	; (80010cc <HAL_MspInit+0x54>)
 80010a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010a8:	6413      	str	r3, [r2, #64]	; 0x40
 80010aa:	4b08      	ldr	r3, [pc, #32]	; (80010cc <HAL_MspInit+0x54>)
 80010ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010b2:	603b      	str	r3, [r7, #0]
 80010b4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80010b6:	2200      	movs	r2, #0
 80010b8:	210f      	movs	r1, #15
 80010ba:	f06f 0001 	mvn.w	r0, #1
 80010be:	f000 fefe 	bl	8001ebe <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010c2:	bf00      	nop
 80010c4:	3708      	adds	r7, #8
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	40023800 	.word	0x40023800

080010d0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b08a      	sub	sp, #40	; 0x28
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d8:	f107 0314 	add.w	r3, r7, #20
 80010dc:	2200      	movs	r2, #0
 80010de:	601a      	str	r2, [r3, #0]
 80010e0:	605a      	str	r2, [r3, #4]
 80010e2:	609a      	str	r2, [r3, #8]
 80010e4:	60da      	str	r2, [r3, #12]
 80010e6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a17      	ldr	r2, [pc, #92]	; (800114c <HAL_ADC_MspInit+0x7c>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d127      	bne.n	8001142 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80010f2:	2300      	movs	r3, #0
 80010f4:	613b      	str	r3, [r7, #16]
 80010f6:	4b16      	ldr	r3, [pc, #88]	; (8001150 <HAL_ADC_MspInit+0x80>)
 80010f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010fa:	4a15      	ldr	r2, [pc, #84]	; (8001150 <HAL_ADC_MspInit+0x80>)
 80010fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001100:	6453      	str	r3, [r2, #68]	; 0x44
 8001102:	4b13      	ldr	r3, [pc, #76]	; (8001150 <HAL_ADC_MspInit+0x80>)
 8001104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001106:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800110a:	613b      	str	r3, [r7, #16]
 800110c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800110e:	2300      	movs	r3, #0
 8001110:	60fb      	str	r3, [r7, #12]
 8001112:	4b0f      	ldr	r3, [pc, #60]	; (8001150 <HAL_ADC_MspInit+0x80>)
 8001114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001116:	4a0e      	ldr	r2, [pc, #56]	; (8001150 <HAL_ADC_MspInit+0x80>)
 8001118:	f043 0301 	orr.w	r3, r3, #1
 800111c:	6313      	str	r3, [r2, #48]	; 0x30
 800111e:	4b0c      	ldr	r3, [pc, #48]	; (8001150 <HAL_ADC_MspInit+0x80>)
 8001120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001122:	f003 0301 	and.w	r3, r3, #1
 8001126:	60fb      	str	r3, [r7, #12]
 8001128:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_5;
 800112a:	2321      	movs	r3, #33	; 0x21
 800112c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800112e:	2303      	movs	r3, #3
 8001130:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001132:	2300      	movs	r3, #0
 8001134:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001136:	f107 0314 	add.w	r3, r7, #20
 800113a:	4619      	mov	r1, r3
 800113c:	4805      	ldr	r0, [pc, #20]	; (8001154 <HAL_ADC_MspInit+0x84>)
 800113e:	f001 fa65 	bl	800260c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001142:	bf00      	nop
 8001144:	3728      	adds	r7, #40	; 0x28
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	40012000 	.word	0x40012000
 8001150:	40023800 	.word	0x40023800
 8001154:	40020000 	.word	0x40020000

08001158 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b08a      	sub	sp, #40	; 0x28
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001160:	f107 0314 	add.w	r3, r7, #20
 8001164:	2200      	movs	r2, #0
 8001166:	601a      	str	r2, [r3, #0]
 8001168:	605a      	str	r2, [r3, #4]
 800116a:	609a      	str	r2, [r3, #8]
 800116c:	60da      	str	r2, [r3, #12]
 800116e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a19      	ldr	r2, [pc, #100]	; (80011dc <HAL_I2C_MspInit+0x84>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d12b      	bne.n	80011d2 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800117a:	2300      	movs	r3, #0
 800117c:	613b      	str	r3, [r7, #16]
 800117e:	4b18      	ldr	r3, [pc, #96]	; (80011e0 <HAL_I2C_MspInit+0x88>)
 8001180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001182:	4a17      	ldr	r2, [pc, #92]	; (80011e0 <HAL_I2C_MspInit+0x88>)
 8001184:	f043 0302 	orr.w	r3, r3, #2
 8001188:	6313      	str	r3, [r2, #48]	; 0x30
 800118a:	4b15      	ldr	r3, [pc, #84]	; (80011e0 <HAL_I2C_MspInit+0x88>)
 800118c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118e:	f003 0302 	and.w	r3, r3, #2
 8001192:	613b      	str	r3, [r7, #16]
 8001194:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001196:	23c0      	movs	r3, #192	; 0xc0
 8001198:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800119a:	2312      	movs	r3, #18
 800119c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119e:	2300      	movs	r3, #0
 80011a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011a2:	2303      	movs	r3, #3
 80011a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80011a6:	2304      	movs	r3, #4
 80011a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011aa:	f107 0314 	add.w	r3, r7, #20
 80011ae:	4619      	mov	r1, r3
 80011b0:	480c      	ldr	r0, [pc, #48]	; (80011e4 <HAL_I2C_MspInit+0x8c>)
 80011b2:	f001 fa2b 	bl	800260c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80011b6:	2300      	movs	r3, #0
 80011b8:	60fb      	str	r3, [r7, #12]
 80011ba:	4b09      	ldr	r3, [pc, #36]	; (80011e0 <HAL_I2C_MspInit+0x88>)
 80011bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011be:	4a08      	ldr	r2, [pc, #32]	; (80011e0 <HAL_I2C_MspInit+0x88>)
 80011c0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80011c4:	6413      	str	r3, [r2, #64]	; 0x40
 80011c6:	4b06      	ldr	r3, [pc, #24]	; (80011e0 <HAL_I2C_MspInit+0x88>)
 80011c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011ce:	60fb      	str	r3, [r7, #12]
 80011d0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80011d2:	bf00      	nop
 80011d4:	3728      	adds	r7, #40	; 0x28
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	40005400 	.word	0x40005400
 80011e0:	40023800 	.word	0x40023800
 80011e4:	40020400 	.word	0x40020400

080011e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b08c      	sub	sp, #48	; 0x30
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f0:	f107 031c 	add.w	r3, r7, #28
 80011f4:	2200      	movs	r2, #0
 80011f6:	601a      	str	r2, [r3, #0]
 80011f8:	605a      	str	r2, [r3, #4]
 80011fa:	609a      	str	r2, [r3, #8]
 80011fc:	60da      	str	r2, [r3, #12]
 80011fe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4a49      	ldr	r2, [pc, #292]	; (800132c <HAL_UART_MspInit+0x144>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d12d      	bne.n	8001266 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800120a:	2300      	movs	r3, #0
 800120c:	61bb      	str	r3, [r7, #24]
 800120e:	4b48      	ldr	r3, [pc, #288]	; (8001330 <HAL_UART_MspInit+0x148>)
 8001210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001212:	4a47      	ldr	r2, [pc, #284]	; (8001330 <HAL_UART_MspInit+0x148>)
 8001214:	f043 0310 	orr.w	r3, r3, #16
 8001218:	6453      	str	r3, [r2, #68]	; 0x44
 800121a:	4b45      	ldr	r3, [pc, #276]	; (8001330 <HAL_UART_MspInit+0x148>)
 800121c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800121e:	f003 0310 	and.w	r3, r3, #16
 8001222:	61bb      	str	r3, [r7, #24]
 8001224:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001226:	2300      	movs	r3, #0
 8001228:	617b      	str	r3, [r7, #20]
 800122a:	4b41      	ldr	r3, [pc, #260]	; (8001330 <HAL_UART_MspInit+0x148>)
 800122c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122e:	4a40      	ldr	r2, [pc, #256]	; (8001330 <HAL_UART_MspInit+0x148>)
 8001230:	f043 0301 	orr.w	r3, r3, #1
 8001234:	6313      	str	r3, [r2, #48]	; 0x30
 8001236:	4b3e      	ldr	r3, [pc, #248]	; (8001330 <HAL_UART_MspInit+0x148>)
 8001238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123a:	f003 0301 	and.w	r3, r3, #1
 800123e:	617b      	str	r3, [r7, #20]
 8001240:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001242:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001246:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001248:	2302      	movs	r3, #2
 800124a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124c:	2300      	movs	r3, #0
 800124e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001250:	2303      	movs	r3, #3
 8001252:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001254:	2307      	movs	r3, #7
 8001256:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001258:	f107 031c 	add.w	r3, r7, #28
 800125c:	4619      	mov	r1, r3
 800125e:	4835      	ldr	r0, [pc, #212]	; (8001334 <HAL_UART_MspInit+0x14c>)
 8001260:	f001 f9d4 	bl	800260c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001264:	e05e      	b.n	8001324 <HAL_UART_MspInit+0x13c>
  else if(huart->Instance==USART2)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4a33      	ldr	r2, [pc, #204]	; (8001338 <HAL_UART_MspInit+0x150>)
 800126c:	4293      	cmp	r3, r2
 800126e:	d159      	bne.n	8001324 <HAL_UART_MspInit+0x13c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001270:	2300      	movs	r3, #0
 8001272:	613b      	str	r3, [r7, #16]
 8001274:	4b2e      	ldr	r3, [pc, #184]	; (8001330 <HAL_UART_MspInit+0x148>)
 8001276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001278:	4a2d      	ldr	r2, [pc, #180]	; (8001330 <HAL_UART_MspInit+0x148>)
 800127a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800127e:	6413      	str	r3, [r2, #64]	; 0x40
 8001280:	4b2b      	ldr	r3, [pc, #172]	; (8001330 <HAL_UART_MspInit+0x148>)
 8001282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001284:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001288:	613b      	str	r3, [r7, #16]
 800128a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800128c:	2300      	movs	r3, #0
 800128e:	60fb      	str	r3, [r7, #12]
 8001290:	4b27      	ldr	r3, [pc, #156]	; (8001330 <HAL_UART_MspInit+0x148>)
 8001292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001294:	4a26      	ldr	r2, [pc, #152]	; (8001330 <HAL_UART_MspInit+0x148>)
 8001296:	f043 0301 	orr.w	r3, r3, #1
 800129a:	6313      	str	r3, [r2, #48]	; 0x30
 800129c:	4b24      	ldr	r3, [pc, #144]	; (8001330 <HAL_UART_MspInit+0x148>)
 800129e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a0:	f003 0301 	and.w	r3, r3, #1
 80012a4:	60fb      	str	r3, [r7, #12]
 80012a6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80012a8:	230c      	movs	r3, #12
 80012aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ac:	2302      	movs	r3, #2
 80012ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b0:	2300      	movs	r3, #0
 80012b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012b4:	2303      	movs	r3, #3
 80012b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80012b8:	2307      	movs	r3, #7
 80012ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012bc:	f107 031c 	add.w	r3, r7, #28
 80012c0:	4619      	mov	r1, r3
 80012c2:	481c      	ldr	r0, [pc, #112]	; (8001334 <HAL_UART_MspInit+0x14c>)
 80012c4:	f001 f9a2 	bl	800260c <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80012c8:	4b1c      	ldr	r3, [pc, #112]	; (800133c <HAL_UART_MspInit+0x154>)
 80012ca:	4a1d      	ldr	r2, [pc, #116]	; (8001340 <HAL_UART_MspInit+0x158>)
 80012cc:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80012ce:	4b1b      	ldr	r3, [pc, #108]	; (800133c <HAL_UART_MspInit+0x154>)
 80012d0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80012d4:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80012d6:	4b19      	ldr	r3, [pc, #100]	; (800133c <HAL_UART_MspInit+0x154>)
 80012d8:	2200      	movs	r2, #0
 80012da:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80012dc:	4b17      	ldr	r3, [pc, #92]	; (800133c <HAL_UART_MspInit+0x154>)
 80012de:	2200      	movs	r2, #0
 80012e0:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80012e2:	4b16      	ldr	r3, [pc, #88]	; (800133c <HAL_UART_MspInit+0x154>)
 80012e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012e8:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80012ea:	4b14      	ldr	r3, [pc, #80]	; (800133c <HAL_UART_MspInit+0x154>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80012f0:	4b12      	ldr	r3, [pc, #72]	; (800133c <HAL_UART_MspInit+0x154>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80012f6:	4b11      	ldr	r3, [pc, #68]	; (800133c <HAL_UART_MspInit+0x154>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80012fc:	4b0f      	ldr	r3, [pc, #60]	; (800133c <HAL_UART_MspInit+0x154>)
 80012fe:	2200      	movs	r2, #0
 8001300:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001302:	4b0e      	ldr	r3, [pc, #56]	; (800133c <HAL_UART_MspInit+0x154>)
 8001304:	2200      	movs	r2, #0
 8001306:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001308:	480c      	ldr	r0, [pc, #48]	; (800133c <HAL_UART_MspInit+0x154>)
 800130a:	f000 fe0f 	bl	8001f2c <HAL_DMA_Init>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d001      	beq.n	8001318 <HAL_UART_MspInit+0x130>
      Error_Handler();
 8001314:	f7ff feaa 	bl	800106c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	4a08      	ldr	r2, [pc, #32]	; (800133c <HAL_UART_MspInit+0x154>)
 800131c:	639a      	str	r2, [r3, #56]	; 0x38
 800131e:	4a07      	ldr	r2, [pc, #28]	; (800133c <HAL_UART_MspInit+0x154>)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001324:	bf00      	nop
 8001326:	3730      	adds	r7, #48	; 0x30
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	40011000 	.word	0x40011000
 8001330:	40023800 	.word	0x40023800
 8001334:	40020000 	.word	0x40020000
 8001338:	40004400 	.word	0x40004400
 800133c:	20000160 	.word	0x20000160
 8001340:	40026088 	.word	0x40026088

08001344 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001348:	e7fe      	b.n	8001348 <NMI_Handler+0x4>

0800134a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800134a:	b480      	push	{r7}
 800134c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800134e:	e7fe      	b.n	800134e <HardFault_Handler+0x4>

08001350 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001354:	e7fe      	b.n	8001354 <MemManage_Handler+0x4>

08001356 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001356:	b480      	push	{r7}
 8001358:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800135a:	e7fe      	b.n	800135a <BusFault_Handler+0x4>

0800135c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001360:	e7fe      	b.n	8001360 <UsageFault_Handler+0x4>

08001362 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001362:	b480      	push	{r7}
 8001364:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001366:	bf00      	nop
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr

08001370 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001374:	f000 f8a2 	bl	80014bc <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001378:	f005 fa8e 	bl	8006898 <xTaskGetSchedulerState>
 800137c:	4603      	mov	r3, r0
 800137e:	2b01      	cmp	r3, #1
 8001380:	d001      	beq.n	8001386 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001382:	f006 f879 	bl	8007478 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001386:	bf00      	nop
 8001388:	bd80      	pop	{r7, pc}
	...

0800138c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001390:	4802      	ldr	r0, [pc, #8]	; (800139c <DMA1_Stream5_IRQHandler+0x10>)
 8001392:	f000 fed1 	bl	8002138 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001396:	bf00      	nop
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	20000160 	.word	0x20000160

080013a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013a4:	4b06      	ldr	r3, [pc, #24]	; (80013c0 <SystemInit+0x20>)
 80013a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013aa:	4a05      	ldr	r2, [pc, #20]	; (80013c0 <SystemInit+0x20>)
 80013ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013b4:	bf00      	nop
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr
 80013be:	bf00      	nop
 80013c0:	e000ed00 	.word	0xe000ed00

080013c4 <Reset_Handler>:
 80013c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013fc <LoopFillZerobss+0x12>
 80013c8:	480d      	ldr	r0, [pc, #52]	; (8001400 <LoopFillZerobss+0x16>)
 80013ca:	490e      	ldr	r1, [pc, #56]	; (8001404 <LoopFillZerobss+0x1a>)
 80013cc:	4a0e      	ldr	r2, [pc, #56]	; (8001408 <LoopFillZerobss+0x1e>)
 80013ce:	2300      	movs	r3, #0
 80013d0:	e002      	b.n	80013d8 <LoopCopyDataInit>

080013d2 <CopyDataInit>:
 80013d2:	58d4      	ldr	r4, [r2, r3]
 80013d4:	50c4      	str	r4, [r0, r3]
 80013d6:	3304      	adds	r3, #4

080013d8 <LoopCopyDataInit>:
 80013d8:	18c4      	adds	r4, r0, r3
 80013da:	428c      	cmp	r4, r1
 80013dc:	d3f9      	bcc.n	80013d2 <CopyDataInit>
 80013de:	4a0b      	ldr	r2, [pc, #44]	; (800140c <LoopFillZerobss+0x22>)
 80013e0:	4c0b      	ldr	r4, [pc, #44]	; (8001410 <LoopFillZerobss+0x26>)
 80013e2:	2300      	movs	r3, #0
 80013e4:	e001      	b.n	80013ea <LoopFillZerobss>

080013e6 <FillZerobss>:
 80013e6:	6013      	str	r3, [r2, #0]
 80013e8:	3204      	adds	r2, #4

080013ea <LoopFillZerobss>:
 80013ea:	42a2      	cmp	r2, r4
 80013ec:	d3fb      	bcc.n	80013e6 <FillZerobss>
 80013ee:	f7ff ffd7 	bl	80013a0 <SystemInit>
 80013f2:	f006 fac3 	bl	800797c <__libc_init_array>
 80013f6:	f7ff f97d 	bl	80006f4 <main>
 80013fa:	4770      	bx	lr
 80013fc:	20010000 	.word	0x20010000
 8001400:	20000000 	.word	0x20000000
 8001404:	20000020 	.word	0x20000020
 8001408:	08007b98 	.word	0x08007b98
 800140c:	20000020 	.word	0x20000020
 8001410:	20004b44 	.word	0x20004b44

08001414 <ADC_IRQHandler>:
 8001414:	e7fe      	b.n	8001414 <ADC_IRQHandler>
	...

08001418 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800141c:	4b0e      	ldr	r3, [pc, #56]	; (8001458 <HAL_Init+0x40>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4a0d      	ldr	r2, [pc, #52]	; (8001458 <HAL_Init+0x40>)
 8001422:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001426:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001428:	4b0b      	ldr	r3, [pc, #44]	; (8001458 <HAL_Init+0x40>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a0a      	ldr	r2, [pc, #40]	; (8001458 <HAL_Init+0x40>)
 800142e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001432:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001434:	4b08      	ldr	r3, [pc, #32]	; (8001458 <HAL_Init+0x40>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a07      	ldr	r2, [pc, #28]	; (8001458 <HAL_Init+0x40>)
 800143a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800143e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001440:	2003      	movs	r0, #3
 8001442:	f000 fd31 	bl	8001ea8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001446:	200f      	movs	r0, #15
 8001448:	f000 f808 	bl	800145c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800144c:	f7ff fe14 	bl	8001078 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001450:	2300      	movs	r3, #0
}
 8001452:	4618      	mov	r0, r3
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	40023c00 	.word	0x40023c00

0800145c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001464:	4b12      	ldr	r3, [pc, #72]	; (80014b0 <HAL_InitTick+0x54>)
 8001466:	681a      	ldr	r2, [r3, #0]
 8001468:	4b12      	ldr	r3, [pc, #72]	; (80014b4 <HAL_InitTick+0x58>)
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	4619      	mov	r1, r3
 800146e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001472:	fbb3 f3f1 	udiv	r3, r3, r1
 8001476:	fbb2 f3f3 	udiv	r3, r2, r3
 800147a:	4618      	mov	r0, r3
 800147c:	f000 fd49 	bl	8001f12 <HAL_SYSTICK_Config>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001486:	2301      	movs	r3, #1
 8001488:	e00e      	b.n	80014a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	2b0f      	cmp	r3, #15
 800148e:	d80a      	bhi.n	80014a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001490:	2200      	movs	r2, #0
 8001492:	6879      	ldr	r1, [r7, #4]
 8001494:	f04f 30ff 	mov.w	r0, #4294967295
 8001498:	f000 fd11 	bl	8001ebe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800149c:	4a06      	ldr	r2, [pc, #24]	; (80014b8 <HAL_InitTick+0x5c>)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014a2:	2300      	movs	r3, #0
 80014a4:	e000      	b.n	80014a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014a6:	2301      	movs	r3, #1
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	3708      	adds	r7, #8
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	20000010 	.word	0x20000010
 80014b4:	20000018 	.word	0x20000018
 80014b8:	20000014 	.word	0x20000014

080014bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014c0:	4b06      	ldr	r3, [pc, #24]	; (80014dc <HAL_IncTick+0x20>)
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	461a      	mov	r2, r3
 80014c6:	4b06      	ldr	r3, [pc, #24]	; (80014e0 <HAL_IncTick+0x24>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4413      	add	r3, r2
 80014cc:	4a04      	ldr	r2, [pc, #16]	; (80014e0 <HAL_IncTick+0x24>)
 80014ce:	6013      	str	r3, [r2, #0]
}
 80014d0:	bf00      	nop
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr
 80014da:	bf00      	nop
 80014dc:	20000018 	.word	0x20000018
 80014e0:	200001f0 	.word	0x200001f0

080014e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  return uwTick;
 80014e8:	4b03      	ldr	r3, [pc, #12]	; (80014f8 <HAL_GetTick+0x14>)
 80014ea:	681b      	ldr	r3, [r3, #0]
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr
 80014f6:	bf00      	nop
 80014f8:	200001f0 	.word	0x200001f0

080014fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b084      	sub	sp, #16
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001504:	f7ff ffee 	bl	80014e4 <HAL_GetTick>
 8001508:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001514:	d005      	beq.n	8001522 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001516:	4b0a      	ldr	r3, [pc, #40]	; (8001540 <HAL_Delay+0x44>)
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	461a      	mov	r2, r3
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	4413      	add	r3, r2
 8001520:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001522:	bf00      	nop
 8001524:	f7ff ffde 	bl	80014e4 <HAL_GetTick>
 8001528:	4602      	mov	r2, r0
 800152a:	68bb      	ldr	r3, [r7, #8]
 800152c:	1ad3      	subs	r3, r2, r3
 800152e:	68fa      	ldr	r2, [r7, #12]
 8001530:	429a      	cmp	r2, r3
 8001532:	d8f7      	bhi.n	8001524 <HAL_Delay+0x28>
  {
  }
}
 8001534:	bf00      	nop
 8001536:	bf00      	nop
 8001538:	3710      	adds	r7, #16
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	20000018 	.word	0x20000018

08001544 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b084      	sub	sp, #16
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800154c:	2300      	movs	r3, #0
 800154e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d101      	bne.n	800155a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001556:	2301      	movs	r3, #1
 8001558:	e033      	b.n	80015c2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155e:	2b00      	cmp	r3, #0
 8001560:	d109      	bne.n	8001576 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001562:	6878      	ldr	r0, [r7, #4]
 8001564:	f7ff fdb4 	bl	80010d0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2200      	movs	r2, #0
 800156c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2200      	movs	r2, #0
 8001572:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800157a:	f003 0310 	and.w	r3, r3, #16
 800157e:	2b00      	cmp	r3, #0
 8001580:	d118      	bne.n	80015b4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001586:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800158a:	f023 0302 	bic.w	r3, r3, #2
 800158e:	f043 0202 	orr.w	r2, r3, #2
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001596:	6878      	ldr	r0, [r7, #4]
 8001598:	f000 faba 	bl	8001b10 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2200      	movs	r2, #0
 80015a0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a6:	f023 0303 	bic.w	r3, r3, #3
 80015aa:	f043 0201 	orr.w	r2, r3, #1
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	641a      	str	r2, [r3, #64]	; 0x40
 80015b2:	e001      	b.n	80015b8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80015b4:	2301      	movs	r3, #1
 80015b6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2200      	movs	r2, #0
 80015bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80015c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	3710      	adds	r7, #16
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
	...

080015cc <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b085      	sub	sp, #20
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80015d4:	2300      	movs	r3, #0
 80015d6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80015de:	2b01      	cmp	r3, #1
 80015e0:	d101      	bne.n	80015e6 <HAL_ADC_Start+0x1a>
 80015e2:	2302      	movs	r3, #2
 80015e4:	e097      	b.n	8001716 <HAL_ADC_Start+0x14a>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2201      	movs	r2, #1
 80015ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	689b      	ldr	r3, [r3, #8]
 80015f4:	f003 0301 	and.w	r3, r3, #1
 80015f8:	2b01      	cmp	r3, #1
 80015fa:	d018      	beq.n	800162e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	689a      	ldr	r2, [r3, #8]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f042 0201 	orr.w	r2, r2, #1
 800160a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800160c:	4b45      	ldr	r3, [pc, #276]	; (8001724 <HAL_ADC_Start+0x158>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a45      	ldr	r2, [pc, #276]	; (8001728 <HAL_ADC_Start+0x15c>)
 8001612:	fba2 2303 	umull	r2, r3, r2, r3
 8001616:	0c9a      	lsrs	r2, r3, #18
 8001618:	4613      	mov	r3, r2
 800161a:	005b      	lsls	r3, r3, #1
 800161c:	4413      	add	r3, r2
 800161e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001620:	e002      	b.n	8001628 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001622:	68bb      	ldr	r3, [r7, #8]
 8001624:	3b01      	subs	r3, #1
 8001626:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001628:	68bb      	ldr	r3, [r7, #8]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d1f9      	bne.n	8001622 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	689b      	ldr	r3, [r3, #8]
 8001634:	f003 0301 	and.w	r3, r3, #1
 8001638:	2b01      	cmp	r3, #1
 800163a:	d15f      	bne.n	80016fc <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001640:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001644:	f023 0301 	bic.w	r3, r3, #1
 8001648:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800165a:	2b00      	cmp	r3, #0
 800165c:	d007      	beq.n	800166e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001662:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001666:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001672:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001676:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800167a:	d106      	bne.n	800168a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001680:	f023 0206 	bic.w	r2, r3, #6
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	645a      	str	r2, [r3, #68]	; 0x44
 8001688:	e002      	b.n	8001690 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2200      	movs	r2, #0
 800168e:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2200      	movs	r2, #0
 8001694:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001698:	4b24      	ldr	r3, [pc, #144]	; (800172c <HAL_ADC_Start+0x160>)
 800169a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80016a4:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	f003 031f 	and.w	r3, r3, #31
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d10f      	bne.n	80016d2 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	689b      	ldr	r3, [r3, #8]
 80016b8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d129      	bne.n	8001714 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	689a      	ldr	r2, [r3, #8]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80016ce:	609a      	str	r2, [r3, #8]
 80016d0:	e020      	b.n	8001714 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4a16      	ldr	r2, [pc, #88]	; (8001730 <HAL_ADC_Start+0x164>)
 80016d8:	4293      	cmp	r3, r2
 80016da:	d11b      	bne.n	8001714 <HAL_ADC_Start+0x148>
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	689b      	ldr	r3, [r3, #8]
 80016e2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d114      	bne.n	8001714 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	689a      	ldr	r2, [r3, #8]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80016f8:	609a      	str	r2, [r3, #8]
 80016fa:	e00b      	b.n	8001714 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001700:	f043 0210 	orr.w	r2, r3, #16
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800170c:	f043 0201 	orr.w	r2, r3, #1
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001714:	2300      	movs	r3, #0
}
 8001716:	4618      	mov	r0, r3
 8001718:	3714      	adds	r7, #20
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr
 8001722:	bf00      	nop
 8001724:	20000010 	.word	0x20000010
 8001728:	431bde83 	.word	0x431bde83
 800172c:	40012300 	.word	0x40012300
 8001730:	40012000 	.word	0x40012000

08001734 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001734:	b480      	push	{r7}
 8001736:	b083      	sub	sp, #12
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001742:	2b01      	cmp	r3, #1
 8001744:	d101      	bne.n	800174a <HAL_ADC_Stop+0x16>
 8001746:	2302      	movs	r3, #2
 8001748:	e021      	b.n	800178e <HAL_ADC_Stop+0x5a>
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2201      	movs	r2, #1
 800174e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	689a      	ldr	r2, [r3, #8]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f022 0201 	bic.w	r2, r2, #1
 8001760:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	689b      	ldr	r3, [r3, #8]
 8001768:	f003 0301 	and.w	r3, r3, #1
 800176c:	2b00      	cmp	r3, #0
 800176e:	d109      	bne.n	8001784 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001774:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001778:	f023 0301 	bic.w	r3, r3, #1
 800177c:	f043 0201 	orr.w	r2, r3, #1
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2200      	movs	r2, #0
 8001788:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800178c:	2300      	movs	r3, #0
}
 800178e:	4618      	mov	r0, r3
 8001790:	370c      	adds	r7, #12
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr

0800179a <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800179a:	b580      	push	{r7, lr}
 800179c:	b084      	sub	sp, #16
 800179e:	af00      	add	r7, sp, #0
 80017a0:	6078      	str	r0, [r7, #4]
 80017a2:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80017a4:	2300      	movs	r3, #0
 80017a6:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	689b      	ldr	r3, [r3, #8]
 80017ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017b6:	d113      	bne.n	80017e0 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	689b      	ldr	r3, [r3, #8]
 80017be:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80017c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80017c6:	d10b      	bne.n	80017e0 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017cc:	f043 0220 	orr.w	r2, r3, #32
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2200      	movs	r2, #0
 80017d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80017dc:	2301      	movs	r3, #1
 80017de:	e063      	b.n	80018a8 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80017e0:	f7ff fe80 	bl	80014e4 <HAL_GetTick>
 80017e4:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80017e6:	e021      	b.n	800182c <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017ee:	d01d      	beq.n	800182c <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d007      	beq.n	8001806 <HAL_ADC_PollForConversion+0x6c>
 80017f6:	f7ff fe75 	bl	80014e4 <HAL_GetTick>
 80017fa:	4602      	mov	r2, r0
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	1ad3      	subs	r3, r2, r3
 8001800:	683a      	ldr	r2, [r7, #0]
 8001802:	429a      	cmp	r2, r3
 8001804:	d212      	bcs.n	800182c <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f003 0302 	and.w	r3, r3, #2
 8001810:	2b02      	cmp	r3, #2
 8001812:	d00b      	beq.n	800182c <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001818:	f043 0204 	orr.w	r2, r3, #4
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2200      	movs	r2, #0
 8001824:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001828:	2303      	movs	r3, #3
 800182a:	e03d      	b.n	80018a8 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f003 0302 	and.w	r3, r3, #2
 8001836:	2b02      	cmp	r3, #2
 8001838:	d1d6      	bne.n	80017e8 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f06f 0212 	mvn.w	r2, #18
 8001842:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001848:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	689b      	ldr	r3, [r3, #8]
 8001856:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800185a:	2b00      	cmp	r3, #0
 800185c:	d123      	bne.n	80018a6 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001862:	2b00      	cmp	r3, #0
 8001864:	d11f      	bne.n	80018a6 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800186c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001870:	2b00      	cmp	r3, #0
 8001872:	d006      	beq.n	8001882 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	689b      	ldr	r3, [r3, #8]
 800187a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800187e:	2b00      	cmp	r3, #0
 8001880:	d111      	bne.n	80018a6 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001886:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001892:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001896:	2b00      	cmp	r3, #0
 8001898:	d105      	bne.n	80018a6 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189e:	f043 0201 	orr.w	r2, r3, #1
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80018a6:	2300      	movs	r3, #0
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	3710      	adds	r7, #16
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}

080018b0 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80018b0:	b480      	push	{r7}
 80018b2:	b083      	sub	sp, #12
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80018be:	4618      	mov	r0, r3
 80018c0:	370c      	adds	r7, #12
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr
	...

080018cc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b085      	sub	sp, #20
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
 80018d4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80018d6:	2300      	movs	r3, #0
 80018d8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80018e0:	2b01      	cmp	r3, #1
 80018e2:	d101      	bne.n	80018e8 <HAL_ADC_ConfigChannel+0x1c>
 80018e4:	2302      	movs	r3, #2
 80018e6:	e105      	b.n	8001af4 <HAL_ADC_ConfigChannel+0x228>
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2201      	movs	r2, #1
 80018ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	2b09      	cmp	r3, #9
 80018f6:	d925      	bls.n	8001944 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	68d9      	ldr	r1, [r3, #12]
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	b29b      	uxth	r3, r3
 8001904:	461a      	mov	r2, r3
 8001906:	4613      	mov	r3, r2
 8001908:	005b      	lsls	r3, r3, #1
 800190a:	4413      	add	r3, r2
 800190c:	3b1e      	subs	r3, #30
 800190e:	2207      	movs	r2, #7
 8001910:	fa02 f303 	lsl.w	r3, r2, r3
 8001914:	43da      	mvns	r2, r3
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	400a      	ands	r2, r1
 800191c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	68d9      	ldr	r1, [r3, #12]
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	689a      	ldr	r2, [r3, #8]
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	b29b      	uxth	r3, r3
 800192e:	4618      	mov	r0, r3
 8001930:	4603      	mov	r3, r0
 8001932:	005b      	lsls	r3, r3, #1
 8001934:	4403      	add	r3, r0
 8001936:	3b1e      	subs	r3, #30
 8001938:	409a      	lsls	r2, r3
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	430a      	orrs	r2, r1
 8001940:	60da      	str	r2, [r3, #12]
 8001942:	e022      	b.n	800198a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	6919      	ldr	r1, [r3, #16]
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	b29b      	uxth	r3, r3
 8001950:	461a      	mov	r2, r3
 8001952:	4613      	mov	r3, r2
 8001954:	005b      	lsls	r3, r3, #1
 8001956:	4413      	add	r3, r2
 8001958:	2207      	movs	r2, #7
 800195a:	fa02 f303 	lsl.w	r3, r2, r3
 800195e:	43da      	mvns	r2, r3
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	400a      	ands	r2, r1
 8001966:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	6919      	ldr	r1, [r3, #16]
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	689a      	ldr	r2, [r3, #8]
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	b29b      	uxth	r3, r3
 8001978:	4618      	mov	r0, r3
 800197a:	4603      	mov	r3, r0
 800197c:	005b      	lsls	r3, r3, #1
 800197e:	4403      	add	r3, r0
 8001980:	409a      	lsls	r2, r3
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	430a      	orrs	r2, r1
 8001988:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	2b06      	cmp	r3, #6
 8001990:	d824      	bhi.n	80019dc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	685a      	ldr	r2, [r3, #4]
 800199c:	4613      	mov	r3, r2
 800199e:	009b      	lsls	r3, r3, #2
 80019a0:	4413      	add	r3, r2
 80019a2:	3b05      	subs	r3, #5
 80019a4:	221f      	movs	r2, #31
 80019a6:	fa02 f303 	lsl.w	r3, r2, r3
 80019aa:	43da      	mvns	r2, r3
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	400a      	ands	r2, r1
 80019b2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	b29b      	uxth	r3, r3
 80019c0:	4618      	mov	r0, r3
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	685a      	ldr	r2, [r3, #4]
 80019c6:	4613      	mov	r3, r2
 80019c8:	009b      	lsls	r3, r3, #2
 80019ca:	4413      	add	r3, r2
 80019cc:	3b05      	subs	r3, #5
 80019ce:	fa00 f203 	lsl.w	r2, r0, r3
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	430a      	orrs	r2, r1
 80019d8:	635a      	str	r2, [r3, #52]	; 0x34
 80019da:	e04c      	b.n	8001a76 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	2b0c      	cmp	r3, #12
 80019e2:	d824      	bhi.n	8001a2e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	685a      	ldr	r2, [r3, #4]
 80019ee:	4613      	mov	r3, r2
 80019f0:	009b      	lsls	r3, r3, #2
 80019f2:	4413      	add	r3, r2
 80019f4:	3b23      	subs	r3, #35	; 0x23
 80019f6:	221f      	movs	r2, #31
 80019f8:	fa02 f303 	lsl.w	r3, r2, r3
 80019fc:	43da      	mvns	r2, r3
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	400a      	ands	r2, r1
 8001a04:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	b29b      	uxth	r3, r3
 8001a12:	4618      	mov	r0, r3
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	685a      	ldr	r2, [r3, #4]
 8001a18:	4613      	mov	r3, r2
 8001a1a:	009b      	lsls	r3, r3, #2
 8001a1c:	4413      	add	r3, r2
 8001a1e:	3b23      	subs	r3, #35	; 0x23
 8001a20:	fa00 f203 	lsl.w	r2, r0, r3
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	430a      	orrs	r2, r1
 8001a2a:	631a      	str	r2, [r3, #48]	; 0x30
 8001a2c:	e023      	b.n	8001a76 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	685a      	ldr	r2, [r3, #4]
 8001a38:	4613      	mov	r3, r2
 8001a3a:	009b      	lsls	r3, r3, #2
 8001a3c:	4413      	add	r3, r2
 8001a3e:	3b41      	subs	r3, #65	; 0x41
 8001a40:	221f      	movs	r2, #31
 8001a42:	fa02 f303 	lsl.w	r3, r2, r3
 8001a46:	43da      	mvns	r2, r3
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	400a      	ands	r2, r1
 8001a4e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	b29b      	uxth	r3, r3
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	685a      	ldr	r2, [r3, #4]
 8001a62:	4613      	mov	r3, r2
 8001a64:	009b      	lsls	r3, r3, #2
 8001a66:	4413      	add	r3, r2
 8001a68:	3b41      	subs	r3, #65	; 0x41
 8001a6a:	fa00 f203 	lsl.w	r2, r0, r3
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	430a      	orrs	r2, r1
 8001a74:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a76:	4b22      	ldr	r3, [pc, #136]	; (8001b00 <HAL_ADC_ConfigChannel+0x234>)
 8001a78:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4a21      	ldr	r2, [pc, #132]	; (8001b04 <HAL_ADC_ConfigChannel+0x238>)
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d109      	bne.n	8001a98 <HAL_ADC_ConfigChannel+0x1cc>
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	2b12      	cmp	r3, #18
 8001a8a:	d105      	bne.n	8001a98 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a19      	ldr	r2, [pc, #100]	; (8001b04 <HAL_ADC_ConfigChannel+0x238>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d123      	bne.n	8001aea <HAL_ADC_ConfigChannel+0x21e>
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	2b10      	cmp	r3, #16
 8001aa8:	d003      	beq.n	8001ab2 <HAL_ADC_ConfigChannel+0x1e6>
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	2b11      	cmp	r3, #17
 8001ab0:	d11b      	bne.n	8001aea <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	2b10      	cmp	r3, #16
 8001ac4:	d111      	bne.n	8001aea <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001ac6:	4b10      	ldr	r3, [pc, #64]	; (8001b08 <HAL_ADC_ConfigChannel+0x23c>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a10      	ldr	r2, [pc, #64]	; (8001b0c <HAL_ADC_ConfigChannel+0x240>)
 8001acc:	fba2 2303 	umull	r2, r3, r2, r3
 8001ad0:	0c9a      	lsrs	r2, r3, #18
 8001ad2:	4613      	mov	r3, r2
 8001ad4:	009b      	lsls	r3, r3, #2
 8001ad6:	4413      	add	r3, r2
 8001ad8:	005b      	lsls	r3, r3, #1
 8001ada:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001adc:	e002      	b.n	8001ae4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001ade:	68bb      	ldr	r3, [r7, #8]
 8001ae0:	3b01      	subs	r3, #1
 8001ae2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001ae4:	68bb      	ldr	r3, [r7, #8]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d1f9      	bne.n	8001ade <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2200      	movs	r2, #0
 8001aee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001af2:	2300      	movs	r3, #0
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	3714      	adds	r7, #20
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr
 8001b00:	40012300 	.word	0x40012300
 8001b04:	40012000 	.word	0x40012000
 8001b08:	20000010 	.word	0x20000010
 8001b0c:	431bde83 	.word	0x431bde83

08001b10 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b085      	sub	sp, #20
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b18:	4b79      	ldr	r3, [pc, #484]	; (8001d00 <ADC_Init+0x1f0>)
 8001b1a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	685a      	ldr	r2, [r3, #4]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	431a      	orrs	r2, r3
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	685a      	ldr	r2, [r3, #4]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001b44:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	6859      	ldr	r1, [r3, #4]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	691b      	ldr	r3, [r3, #16]
 8001b50:	021a      	lsls	r2, r3, #8
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	430a      	orrs	r2, r1
 8001b58:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	685a      	ldr	r2, [r3, #4]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001b68:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	6859      	ldr	r1, [r3, #4]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	689a      	ldr	r2, [r3, #8]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	430a      	orrs	r2, r1
 8001b7a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	689a      	ldr	r2, [r3, #8]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b8a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	6899      	ldr	r1, [r3, #8]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	68da      	ldr	r2, [r3, #12]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	430a      	orrs	r2, r1
 8001b9c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ba2:	4a58      	ldr	r2, [pc, #352]	; (8001d04 <ADC_Init+0x1f4>)
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d022      	beq.n	8001bee <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	689a      	ldr	r2, [r3, #8]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001bb6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	6899      	ldr	r1, [r3, #8]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	430a      	orrs	r2, r1
 8001bc8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	689a      	ldr	r2, [r3, #8]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001bd8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	6899      	ldr	r1, [r3, #8]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	430a      	orrs	r2, r1
 8001bea:	609a      	str	r2, [r3, #8]
 8001bec:	e00f      	b.n	8001c0e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	689a      	ldr	r2, [r3, #8]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001bfc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	689a      	ldr	r2, [r3, #8]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001c0c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	689a      	ldr	r2, [r3, #8]
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f022 0202 	bic.w	r2, r2, #2
 8001c1c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	6899      	ldr	r1, [r3, #8]
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	7e1b      	ldrb	r3, [r3, #24]
 8001c28:	005a      	lsls	r2, r3, #1
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	430a      	orrs	r2, r1
 8001c30:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d01b      	beq.n	8001c74 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	685a      	ldr	r2, [r3, #4]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001c4a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	685a      	ldr	r2, [r3, #4]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001c5a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	6859      	ldr	r1, [r3, #4]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c66:	3b01      	subs	r3, #1
 8001c68:	035a      	lsls	r2, r3, #13
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	430a      	orrs	r2, r1
 8001c70:	605a      	str	r2, [r3, #4]
 8001c72:	e007      	b.n	8001c84 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	685a      	ldr	r2, [r3, #4]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c82:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001c92:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	69db      	ldr	r3, [r3, #28]
 8001c9e:	3b01      	subs	r3, #1
 8001ca0:	051a      	lsls	r2, r3, #20
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	430a      	orrs	r2, r1
 8001ca8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	689a      	ldr	r2, [r3, #8]
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001cb8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	6899      	ldr	r1, [r3, #8]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001cc6:	025a      	lsls	r2, r3, #9
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	430a      	orrs	r2, r1
 8001cce:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	689a      	ldr	r2, [r3, #8]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001cde:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	6899      	ldr	r1, [r3, #8]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	695b      	ldr	r3, [r3, #20]
 8001cea:	029a      	lsls	r2, r3, #10
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	430a      	orrs	r2, r1
 8001cf2:	609a      	str	r2, [r3, #8]
}
 8001cf4:	bf00      	nop
 8001cf6:	3714      	adds	r7, #20
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr
 8001d00:	40012300 	.word	0x40012300
 8001d04:	0f000001 	.word	0x0f000001

08001d08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b085      	sub	sp, #20
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	f003 0307 	and.w	r3, r3, #7
 8001d16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d18:	4b0c      	ldr	r3, [pc, #48]	; (8001d4c <__NVIC_SetPriorityGrouping+0x44>)
 8001d1a:	68db      	ldr	r3, [r3, #12]
 8001d1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d1e:	68ba      	ldr	r2, [r7, #8]
 8001d20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d24:	4013      	ands	r3, r2
 8001d26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d3a:	4a04      	ldr	r2, [pc, #16]	; (8001d4c <__NVIC_SetPriorityGrouping+0x44>)
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	60d3      	str	r3, [r2, #12]
}
 8001d40:	bf00      	nop
 8001d42:	3714      	adds	r7, #20
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr
 8001d4c:	e000ed00 	.word	0xe000ed00

08001d50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d50:	b480      	push	{r7}
 8001d52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d54:	4b04      	ldr	r3, [pc, #16]	; (8001d68 <__NVIC_GetPriorityGrouping+0x18>)
 8001d56:	68db      	ldr	r3, [r3, #12]
 8001d58:	0a1b      	lsrs	r3, r3, #8
 8001d5a:	f003 0307 	and.w	r3, r3, #7
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr
 8001d68:	e000ed00 	.word	0xe000ed00

08001d6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	4603      	mov	r3, r0
 8001d74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	db0b      	blt.n	8001d96 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d7e:	79fb      	ldrb	r3, [r7, #7]
 8001d80:	f003 021f 	and.w	r2, r3, #31
 8001d84:	4907      	ldr	r1, [pc, #28]	; (8001da4 <__NVIC_EnableIRQ+0x38>)
 8001d86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d8a:	095b      	lsrs	r3, r3, #5
 8001d8c:	2001      	movs	r0, #1
 8001d8e:	fa00 f202 	lsl.w	r2, r0, r2
 8001d92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d96:	bf00      	nop
 8001d98:	370c      	adds	r7, #12
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr
 8001da2:	bf00      	nop
 8001da4:	e000e100 	.word	0xe000e100

08001da8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b083      	sub	sp, #12
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	4603      	mov	r3, r0
 8001db0:	6039      	str	r1, [r7, #0]
 8001db2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001db4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	db0a      	blt.n	8001dd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	b2da      	uxtb	r2, r3
 8001dc0:	490c      	ldr	r1, [pc, #48]	; (8001df4 <__NVIC_SetPriority+0x4c>)
 8001dc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dc6:	0112      	lsls	r2, r2, #4
 8001dc8:	b2d2      	uxtb	r2, r2
 8001dca:	440b      	add	r3, r1
 8001dcc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001dd0:	e00a      	b.n	8001de8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	b2da      	uxtb	r2, r3
 8001dd6:	4908      	ldr	r1, [pc, #32]	; (8001df8 <__NVIC_SetPriority+0x50>)
 8001dd8:	79fb      	ldrb	r3, [r7, #7]
 8001dda:	f003 030f 	and.w	r3, r3, #15
 8001dde:	3b04      	subs	r3, #4
 8001de0:	0112      	lsls	r2, r2, #4
 8001de2:	b2d2      	uxtb	r2, r2
 8001de4:	440b      	add	r3, r1
 8001de6:	761a      	strb	r2, [r3, #24]
}
 8001de8:	bf00      	nop
 8001dea:	370c      	adds	r7, #12
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr
 8001df4:	e000e100 	.word	0xe000e100
 8001df8:	e000ed00 	.word	0xe000ed00

08001dfc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b089      	sub	sp, #36	; 0x24
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	60f8      	str	r0, [r7, #12]
 8001e04:	60b9      	str	r1, [r7, #8]
 8001e06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	f003 0307 	and.w	r3, r3, #7
 8001e0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e10:	69fb      	ldr	r3, [r7, #28]
 8001e12:	f1c3 0307 	rsb	r3, r3, #7
 8001e16:	2b04      	cmp	r3, #4
 8001e18:	bf28      	it	cs
 8001e1a:	2304      	movcs	r3, #4
 8001e1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e1e:	69fb      	ldr	r3, [r7, #28]
 8001e20:	3304      	adds	r3, #4
 8001e22:	2b06      	cmp	r3, #6
 8001e24:	d902      	bls.n	8001e2c <NVIC_EncodePriority+0x30>
 8001e26:	69fb      	ldr	r3, [r7, #28]
 8001e28:	3b03      	subs	r3, #3
 8001e2a:	e000      	b.n	8001e2e <NVIC_EncodePriority+0x32>
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e30:	f04f 32ff 	mov.w	r2, #4294967295
 8001e34:	69bb      	ldr	r3, [r7, #24]
 8001e36:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3a:	43da      	mvns	r2, r3
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	401a      	ands	r2, r3
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e44:	f04f 31ff 	mov.w	r1, #4294967295
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e4e:	43d9      	mvns	r1, r3
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e54:	4313      	orrs	r3, r2
         );
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	3724      	adds	r7, #36	; 0x24
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr
	...

08001e64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b082      	sub	sp, #8
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	3b01      	subs	r3, #1
 8001e70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e74:	d301      	bcc.n	8001e7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e76:	2301      	movs	r3, #1
 8001e78:	e00f      	b.n	8001e9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e7a:	4a0a      	ldr	r2, [pc, #40]	; (8001ea4 <SysTick_Config+0x40>)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	3b01      	subs	r3, #1
 8001e80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e82:	210f      	movs	r1, #15
 8001e84:	f04f 30ff 	mov.w	r0, #4294967295
 8001e88:	f7ff ff8e 	bl	8001da8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e8c:	4b05      	ldr	r3, [pc, #20]	; (8001ea4 <SysTick_Config+0x40>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e92:	4b04      	ldr	r3, [pc, #16]	; (8001ea4 <SysTick_Config+0x40>)
 8001e94:	2207      	movs	r2, #7
 8001e96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e98:	2300      	movs	r3, #0
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	3708      	adds	r7, #8
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	e000e010 	.word	0xe000e010

08001ea8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b082      	sub	sp, #8
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001eb0:	6878      	ldr	r0, [r7, #4]
 8001eb2:	f7ff ff29 	bl	8001d08 <__NVIC_SetPriorityGrouping>
}
 8001eb6:	bf00      	nop
 8001eb8:	3708      	adds	r7, #8
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}

08001ebe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ebe:	b580      	push	{r7, lr}
 8001ec0:	b086      	sub	sp, #24
 8001ec2:	af00      	add	r7, sp, #0
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	60b9      	str	r1, [r7, #8]
 8001ec8:	607a      	str	r2, [r7, #4]
 8001eca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ed0:	f7ff ff3e 	bl	8001d50 <__NVIC_GetPriorityGrouping>
 8001ed4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ed6:	687a      	ldr	r2, [r7, #4]
 8001ed8:	68b9      	ldr	r1, [r7, #8]
 8001eda:	6978      	ldr	r0, [r7, #20]
 8001edc:	f7ff ff8e 	bl	8001dfc <NVIC_EncodePriority>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ee6:	4611      	mov	r1, r2
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f7ff ff5d 	bl	8001da8 <__NVIC_SetPriority>
}
 8001eee:	bf00      	nop
 8001ef0:	3718      	adds	r7, #24
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}

08001ef6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ef6:	b580      	push	{r7, lr}
 8001ef8:	b082      	sub	sp, #8
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	4603      	mov	r3, r0
 8001efe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f04:	4618      	mov	r0, r3
 8001f06:	f7ff ff31 	bl	8001d6c <__NVIC_EnableIRQ>
}
 8001f0a:	bf00      	nop
 8001f0c:	3708      	adds	r7, #8
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}

08001f12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f12:	b580      	push	{r7, lr}
 8001f14:	b082      	sub	sp, #8
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f7ff ffa2 	bl	8001e64 <SysTick_Config>
 8001f20:	4603      	mov	r3, r0
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	3708      	adds	r7, #8
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
	...

08001f2c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b086      	sub	sp, #24
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001f34:	2300      	movs	r3, #0
 8001f36:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001f38:	f7ff fad4 	bl	80014e4 <HAL_GetTick>
 8001f3c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d101      	bne.n	8001f48 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001f44:	2301      	movs	r3, #1
 8001f46:	e099      	b.n	800207c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2202      	movs	r2, #2
 8001f4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2200      	movs	r2, #0
 8001f54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	681a      	ldr	r2, [r3, #0]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f022 0201 	bic.w	r2, r2, #1
 8001f66:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f68:	e00f      	b.n	8001f8a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f6a:	f7ff fabb 	bl	80014e4 <HAL_GetTick>
 8001f6e:	4602      	mov	r2, r0
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	1ad3      	subs	r3, r2, r3
 8001f74:	2b05      	cmp	r3, #5
 8001f76:	d908      	bls.n	8001f8a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2220      	movs	r2, #32
 8001f7c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2203      	movs	r2, #3
 8001f82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001f86:	2303      	movs	r3, #3
 8001f88:	e078      	b.n	800207c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f003 0301 	and.w	r3, r3, #1
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d1e8      	bne.n	8001f6a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001fa0:	697a      	ldr	r2, [r7, #20]
 8001fa2:	4b38      	ldr	r3, [pc, #224]	; (8002084 <HAL_DMA_Init+0x158>)
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	685a      	ldr	r2, [r3, #4]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001fb6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	691b      	ldr	r3, [r3, #16]
 8001fbc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fc2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	699b      	ldr	r3, [r3, #24]
 8001fc8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6a1b      	ldr	r3, [r3, #32]
 8001fd4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001fd6:	697a      	ldr	r2, [r7, #20]
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe0:	2b04      	cmp	r3, #4
 8001fe2:	d107      	bne.n	8001ff4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fec:	4313      	orrs	r3, r2
 8001fee:	697a      	ldr	r2, [r7, #20]
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	697a      	ldr	r2, [r7, #20]
 8001ffa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	695b      	ldr	r3, [r3, #20]
 8002002:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	f023 0307 	bic.w	r3, r3, #7
 800200a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002010:	697a      	ldr	r2, [r7, #20]
 8002012:	4313      	orrs	r3, r2
 8002014:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800201a:	2b04      	cmp	r3, #4
 800201c:	d117      	bne.n	800204e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002022:	697a      	ldr	r2, [r7, #20]
 8002024:	4313      	orrs	r3, r2
 8002026:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800202c:	2b00      	cmp	r3, #0
 800202e:	d00e      	beq.n	800204e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002030:	6878      	ldr	r0, [r7, #4]
 8002032:	f000 fa6f 	bl	8002514 <DMA_CheckFifoParam>
 8002036:	4603      	mov	r3, r0
 8002038:	2b00      	cmp	r3, #0
 800203a:	d008      	beq.n	800204e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2240      	movs	r2, #64	; 0x40
 8002040:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2201      	movs	r2, #1
 8002046:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800204a:	2301      	movs	r3, #1
 800204c:	e016      	b.n	800207c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	697a      	ldr	r2, [r7, #20]
 8002054:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002056:	6878      	ldr	r0, [r7, #4]
 8002058:	f000 fa26 	bl	80024a8 <DMA_CalcBaseAndBitshift>
 800205c:	4603      	mov	r3, r0
 800205e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002064:	223f      	movs	r2, #63	; 0x3f
 8002066:	409a      	lsls	r2, r3
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2200      	movs	r2, #0
 8002070:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2201      	movs	r2, #1
 8002076:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800207a:	2300      	movs	r3, #0
}
 800207c:	4618      	mov	r0, r3
 800207e:	3718      	adds	r7, #24
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}
 8002084:	f010803f 	.word	0xf010803f

08002088 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b086      	sub	sp, #24
 800208c:	af00      	add	r7, sp, #0
 800208e:	60f8      	str	r0, [r7, #12]
 8002090:	60b9      	str	r1, [r7, #8]
 8002092:	607a      	str	r2, [r7, #4]
 8002094:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002096:	2300      	movs	r3, #0
 8002098:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800209e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80020a6:	2b01      	cmp	r3, #1
 80020a8:	d101      	bne.n	80020ae <HAL_DMA_Start_IT+0x26>
 80020aa:	2302      	movs	r3, #2
 80020ac:	e040      	b.n	8002130 <HAL_DMA_Start_IT+0xa8>
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	2201      	movs	r2, #1
 80020b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80020bc:	b2db      	uxtb	r3, r3
 80020be:	2b01      	cmp	r3, #1
 80020c0:	d12f      	bne.n	8002122 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	2202      	movs	r2, #2
 80020c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	2200      	movs	r2, #0
 80020ce:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	687a      	ldr	r2, [r7, #4]
 80020d4:	68b9      	ldr	r1, [r7, #8]
 80020d6:	68f8      	ldr	r0, [r7, #12]
 80020d8:	f000 f9b8 	bl	800244c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020e0:	223f      	movs	r2, #63	; 0x3f
 80020e2:	409a      	lsls	r2, r3
 80020e4:	693b      	ldr	r3, [r7, #16]
 80020e6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	681a      	ldr	r2, [r3, #0]
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f042 0216 	orr.w	r2, r2, #22
 80020f6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d007      	beq.n	8002110 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f042 0208 	orr.w	r2, r2, #8
 800210e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	681a      	ldr	r2, [r3, #0]
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f042 0201 	orr.w	r2, r2, #1
 800211e:	601a      	str	r2, [r3, #0]
 8002120:	e005      	b.n	800212e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	2200      	movs	r2, #0
 8002126:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800212a:	2302      	movs	r3, #2
 800212c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800212e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002130:	4618      	mov	r0, r3
 8002132:	3718      	adds	r7, #24
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}

08002138 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b086      	sub	sp, #24
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002140:	2300      	movs	r3, #0
 8002142:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002144:	4b8e      	ldr	r3, [pc, #568]	; (8002380 <HAL_DMA_IRQHandler+0x248>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a8e      	ldr	r2, [pc, #568]	; (8002384 <HAL_DMA_IRQHandler+0x24c>)
 800214a:	fba2 2303 	umull	r2, r3, r2, r3
 800214e:	0a9b      	lsrs	r3, r3, #10
 8002150:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002156:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002162:	2208      	movs	r2, #8
 8002164:	409a      	lsls	r2, r3
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	4013      	ands	r3, r2
 800216a:	2b00      	cmp	r3, #0
 800216c:	d01a      	beq.n	80021a4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f003 0304 	and.w	r3, r3, #4
 8002178:	2b00      	cmp	r3, #0
 800217a:	d013      	beq.n	80021a4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	681a      	ldr	r2, [r3, #0]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f022 0204 	bic.w	r2, r2, #4
 800218a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002190:	2208      	movs	r2, #8
 8002192:	409a      	lsls	r2, r3
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800219c:	f043 0201 	orr.w	r2, r3, #1
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021a8:	2201      	movs	r2, #1
 80021aa:	409a      	lsls	r2, r3
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	4013      	ands	r3, r2
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d012      	beq.n	80021da <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	695b      	ldr	r3, [r3, #20]
 80021ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d00b      	beq.n	80021da <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021c6:	2201      	movs	r2, #1
 80021c8:	409a      	lsls	r2, r3
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021d2:	f043 0202 	orr.w	r2, r3, #2
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021de:	2204      	movs	r2, #4
 80021e0:	409a      	lsls	r2, r3
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	4013      	ands	r3, r2
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d012      	beq.n	8002210 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f003 0302 	and.w	r3, r3, #2
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d00b      	beq.n	8002210 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021fc:	2204      	movs	r2, #4
 80021fe:	409a      	lsls	r2, r3
 8002200:	693b      	ldr	r3, [r7, #16]
 8002202:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002208:	f043 0204 	orr.w	r2, r3, #4
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002214:	2210      	movs	r2, #16
 8002216:	409a      	lsls	r2, r3
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	4013      	ands	r3, r2
 800221c:	2b00      	cmp	r3, #0
 800221e:	d043      	beq.n	80022a8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 0308 	and.w	r3, r3, #8
 800222a:	2b00      	cmp	r3, #0
 800222c:	d03c      	beq.n	80022a8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002232:	2210      	movs	r2, #16
 8002234:	409a      	lsls	r2, r3
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002244:	2b00      	cmp	r3, #0
 8002246:	d018      	beq.n	800227a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002252:	2b00      	cmp	r3, #0
 8002254:	d108      	bne.n	8002268 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225a:	2b00      	cmp	r3, #0
 800225c:	d024      	beq.n	80022a8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002262:	6878      	ldr	r0, [r7, #4]
 8002264:	4798      	blx	r3
 8002266:	e01f      	b.n	80022a8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800226c:	2b00      	cmp	r3, #0
 800226e:	d01b      	beq.n	80022a8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002274:	6878      	ldr	r0, [r7, #4]
 8002276:	4798      	blx	r3
 8002278:	e016      	b.n	80022a8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002284:	2b00      	cmp	r3, #0
 8002286:	d107      	bne.n	8002298 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	681a      	ldr	r2, [r3, #0]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f022 0208 	bic.w	r2, r2, #8
 8002296:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800229c:	2b00      	cmp	r3, #0
 800229e:	d003      	beq.n	80022a8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a4:	6878      	ldr	r0, [r7, #4]
 80022a6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022ac:	2220      	movs	r2, #32
 80022ae:	409a      	lsls	r2, r3
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	4013      	ands	r3, r2
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	f000 808f 	beq.w	80023d8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f003 0310 	and.w	r3, r3, #16
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	f000 8087 	beq.w	80023d8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022ce:	2220      	movs	r2, #32
 80022d0:	409a      	lsls	r2, r3
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80022dc:	b2db      	uxtb	r3, r3
 80022de:	2b05      	cmp	r3, #5
 80022e0:	d136      	bne.n	8002350 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	681a      	ldr	r2, [r3, #0]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f022 0216 	bic.w	r2, r2, #22
 80022f0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	695a      	ldr	r2, [r3, #20]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002300:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002306:	2b00      	cmp	r3, #0
 8002308:	d103      	bne.n	8002312 <HAL_DMA_IRQHandler+0x1da>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800230e:	2b00      	cmp	r3, #0
 8002310:	d007      	beq.n	8002322 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	681a      	ldr	r2, [r3, #0]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f022 0208 	bic.w	r2, r2, #8
 8002320:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002326:	223f      	movs	r2, #63	; 0x3f
 8002328:	409a      	lsls	r2, r3
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2201      	movs	r2, #1
 8002332:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2200      	movs	r2, #0
 800233a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002342:	2b00      	cmp	r3, #0
 8002344:	d07e      	beq.n	8002444 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800234a:	6878      	ldr	r0, [r7, #4]
 800234c:	4798      	blx	r3
        }
        return;
 800234e:	e079      	b.n	8002444 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800235a:	2b00      	cmp	r3, #0
 800235c:	d01d      	beq.n	800239a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002368:	2b00      	cmp	r3, #0
 800236a:	d10d      	bne.n	8002388 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002370:	2b00      	cmp	r3, #0
 8002372:	d031      	beq.n	80023d8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002378:	6878      	ldr	r0, [r7, #4]
 800237a:	4798      	blx	r3
 800237c:	e02c      	b.n	80023d8 <HAL_DMA_IRQHandler+0x2a0>
 800237e:	bf00      	nop
 8002380:	20000010 	.word	0x20000010
 8002384:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800238c:	2b00      	cmp	r3, #0
 800238e:	d023      	beq.n	80023d8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002394:	6878      	ldr	r0, [r7, #4]
 8002396:	4798      	blx	r3
 8002398:	e01e      	b.n	80023d8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d10f      	bne.n	80023c8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f022 0210 	bic.w	r2, r2, #16
 80023b6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2201      	movs	r2, #1
 80023bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2200      	movs	r2, #0
 80023c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d003      	beq.n	80023d8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023d4:	6878      	ldr	r0, [r7, #4]
 80023d6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d032      	beq.n	8002446 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023e4:	f003 0301 	and.w	r3, r3, #1
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d022      	beq.n	8002432 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2205      	movs	r2, #5
 80023f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	681a      	ldr	r2, [r3, #0]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f022 0201 	bic.w	r2, r2, #1
 8002402:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	3301      	adds	r3, #1
 8002408:	60bb      	str	r3, [r7, #8]
 800240a:	697a      	ldr	r2, [r7, #20]
 800240c:	429a      	cmp	r2, r3
 800240e:	d307      	bcc.n	8002420 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 0301 	and.w	r3, r3, #1
 800241a:	2b00      	cmp	r3, #0
 800241c:	d1f2      	bne.n	8002404 <HAL_DMA_IRQHandler+0x2cc>
 800241e:	e000      	b.n	8002422 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002420:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2201      	movs	r2, #1
 8002426:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2200      	movs	r2, #0
 800242e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002436:	2b00      	cmp	r3, #0
 8002438:	d005      	beq.n	8002446 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800243e:	6878      	ldr	r0, [r7, #4]
 8002440:	4798      	blx	r3
 8002442:	e000      	b.n	8002446 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002444:	bf00      	nop
    }
  }
}
 8002446:	3718      	adds	r7, #24
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}

0800244c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800244c:	b480      	push	{r7}
 800244e:	b085      	sub	sp, #20
 8002450:	af00      	add	r7, sp, #0
 8002452:	60f8      	str	r0, [r7, #12]
 8002454:	60b9      	str	r1, [r7, #8]
 8002456:	607a      	str	r2, [r7, #4]
 8002458:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	681a      	ldr	r2, [r3, #0]
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002468:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	683a      	ldr	r2, [r7, #0]
 8002470:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	2b40      	cmp	r3, #64	; 0x40
 8002478:	d108      	bne.n	800248c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	687a      	ldr	r2, [r7, #4]
 8002480:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	68ba      	ldr	r2, [r7, #8]
 8002488:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800248a:	e007      	b.n	800249c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	68ba      	ldr	r2, [r7, #8]
 8002492:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	687a      	ldr	r2, [r7, #4]
 800249a:	60da      	str	r2, [r3, #12]
}
 800249c:	bf00      	nop
 800249e:	3714      	adds	r7, #20
 80024a0:	46bd      	mov	sp, r7
 80024a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a6:	4770      	bx	lr

080024a8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b085      	sub	sp, #20
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	3b10      	subs	r3, #16
 80024b8:	4a14      	ldr	r2, [pc, #80]	; (800250c <DMA_CalcBaseAndBitshift+0x64>)
 80024ba:	fba2 2303 	umull	r2, r3, r2, r3
 80024be:	091b      	lsrs	r3, r3, #4
 80024c0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80024c2:	4a13      	ldr	r2, [pc, #76]	; (8002510 <DMA_CalcBaseAndBitshift+0x68>)
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	4413      	add	r3, r2
 80024c8:	781b      	ldrb	r3, [r3, #0]
 80024ca:	461a      	mov	r2, r3
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	2b03      	cmp	r3, #3
 80024d4:	d909      	bls.n	80024ea <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80024de:	f023 0303 	bic.w	r3, r3, #3
 80024e2:	1d1a      	adds	r2, r3, #4
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	659a      	str	r2, [r3, #88]	; 0x58
 80024e8:	e007      	b.n	80024fa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80024f2:	f023 0303 	bic.w	r3, r3, #3
 80024f6:	687a      	ldr	r2, [r7, #4]
 80024f8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80024fe:	4618      	mov	r0, r3
 8002500:	3714      	adds	r7, #20
 8002502:	46bd      	mov	sp, r7
 8002504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002508:	4770      	bx	lr
 800250a:	bf00      	nop
 800250c:	aaaaaaab 	.word	0xaaaaaaab
 8002510:	08007b80 	.word	0x08007b80

08002514 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002514:	b480      	push	{r7}
 8002516:	b085      	sub	sp, #20
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800251c:	2300      	movs	r3, #0
 800251e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002524:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	699b      	ldr	r3, [r3, #24]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d11f      	bne.n	800256e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800252e:	68bb      	ldr	r3, [r7, #8]
 8002530:	2b03      	cmp	r3, #3
 8002532:	d856      	bhi.n	80025e2 <DMA_CheckFifoParam+0xce>
 8002534:	a201      	add	r2, pc, #4	; (adr r2, 800253c <DMA_CheckFifoParam+0x28>)
 8002536:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800253a:	bf00      	nop
 800253c:	0800254d 	.word	0x0800254d
 8002540:	0800255f 	.word	0x0800255f
 8002544:	0800254d 	.word	0x0800254d
 8002548:	080025e3 	.word	0x080025e3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002550:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002554:	2b00      	cmp	r3, #0
 8002556:	d046      	beq.n	80025e6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002558:	2301      	movs	r3, #1
 800255a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800255c:	e043      	b.n	80025e6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002562:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002566:	d140      	bne.n	80025ea <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002568:	2301      	movs	r3, #1
 800256a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800256c:	e03d      	b.n	80025ea <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	699b      	ldr	r3, [r3, #24]
 8002572:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002576:	d121      	bne.n	80025bc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	2b03      	cmp	r3, #3
 800257c:	d837      	bhi.n	80025ee <DMA_CheckFifoParam+0xda>
 800257e:	a201      	add	r2, pc, #4	; (adr r2, 8002584 <DMA_CheckFifoParam+0x70>)
 8002580:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002584:	08002595 	.word	0x08002595
 8002588:	0800259b 	.word	0x0800259b
 800258c:	08002595 	.word	0x08002595
 8002590:	080025ad 	.word	0x080025ad
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002594:	2301      	movs	r3, #1
 8002596:	73fb      	strb	r3, [r7, #15]
      break;
 8002598:	e030      	b.n	80025fc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800259e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d025      	beq.n	80025f2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025aa:	e022      	b.n	80025f2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025b0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80025b4:	d11f      	bne.n	80025f6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80025ba:	e01c      	b.n	80025f6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	2b02      	cmp	r3, #2
 80025c0:	d903      	bls.n	80025ca <DMA_CheckFifoParam+0xb6>
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	2b03      	cmp	r3, #3
 80025c6:	d003      	beq.n	80025d0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80025c8:	e018      	b.n	80025fc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80025ca:	2301      	movs	r3, #1
 80025cc:	73fb      	strb	r3, [r7, #15]
      break;
 80025ce:	e015      	b.n	80025fc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d00e      	beq.n	80025fa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80025dc:	2301      	movs	r3, #1
 80025de:	73fb      	strb	r3, [r7, #15]
      break;
 80025e0:	e00b      	b.n	80025fa <DMA_CheckFifoParam+0xe6>
      break;
 80025e2:	bf00      	nop
 80025e4:	e00a      	b.n	80025fc <DMA_CheckFifoParam+0xe8>
      break;
 80025e6:	bf00      	nop
 80025e8:	e008      	b.n	80025fc <DMA_CheckFifoParam+0xe8>
      break;
 80025ea:	bf00      	nop
 80025ec:	e006      	b.n	80025fc <DMA_CheckFifoParam+0xe8>
      break;
 80025ee:	bf00      	nop
 80025f0:	e004      	b.n	80025fc <DMA_CheckFifoParam+0xe8>
      break;
 80025f2:	bf00      	nop
 80025f4:	e002      	b.n	80025fc <DMA_CheckFifoParam+0xe8>
      break;   
 80025f6:	bf00      	nop
 80025f8:	e000      	b.n	80025fc <DMA_CheckFifoParam+0xe8>
      break;
 80025fa:	bf00      	nop
    }
  } 
  
  return status; 
 80025fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80025fe:	4618      	mov	r0, r3
 8002600:	3714      	adds	r7, #20
 8002602:	46bd      	mov	sp, r7
 8002604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002608:	4770      	bx	lr
 800260a:	bf00      	nop

0800260c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800260c:	b480      	push	{r7}
 800260e:	b089      	sub	sp, #36	; 0x24
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
 8002614:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002616:	2300      	movs	r3, #0
 8002618:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800261a:	2300      	movs	r3, #0
 800261c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800261e:	2300      	movs	r3, #0
 8002620:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002622:	2300      	movs	r3, #0
 8002624:	61fb      	str	r3, [r7, #28]
 8002626:	e159      	b.n	80028dc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002628:	2201      	movs	r2, #1
 800262a:	69fb      	ldr	r3, [r7, #28]
 800262c:	fa02 f303 	lsl.w	r3, r2, r3
 8002630:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	697a      	ldr	r2, [r7, #20]
 8002638:	4013      	ands	r3, r2
 800263a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800263c:	693a      	ldr	r2, [r7, #16]
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	429a      	cmp	r2, r3
 8002642:	f040 8148 	bne.w	80028d6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	f003 0303 	and.w	r3, r3, #3
 800264e:	2b01      	cmp	r3, #1
 8002650:	d005      	beq.n	800265e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800265a:	2b02      	cmp	r3, #2
 800265c:	d130      	bne.n	80026c0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002664:	69fb      	ldr	r3, [r7, #28]
 8002666:	005b      	lsls	r3, r3, #1
 8002668:	2203      	movs	r2, #3
 800266a:	fa02 f303 	lsl.w	r3, r2, r3
 800266e:	43db      	mvns	r3, r3
 8002670:	69ba      	ldr	r2, [r7, #24]
 8002672:	4013      	ands	r3, r2
 8002674:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	68da      	ldr	r2, [r3, #12]
 800267a:	69fb      	ldr	r3, [r7, #28]
 800267c:	005b      	lsls	r3, r3, #1
 800267e:	fa02 f303 	lsl.w	r3, r2, r3
 8002682:	69ba      	ldr	r2, [r7, #24]
 8002684:	4313      	orrs	r3, r2
 8002686:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	69ba      	ldr	r2, [r7, #24]
 800268c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002694:	2201      	movs	r2, #1
 8002696:	69fb      	ldr	r3, [r7, #28]
 8002698:	fa02 f303 	lsl.w	r3, r2, r3
 800269c:	43db      	mvns	r3, r3
 800269e:	69ba      	ldr	r2, [r7, #24]
 80026a0:	4013      	ands	r3, r2
 80026a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	091b      	lsrs	r3, r3, #4
 80026aa:	f003 0201 	and.w	r2, r3, #1
 80026ae:	69fb      	ldr	r3, [r7, #28]
 80026b0:	fa02 f303 	lsl.w	r3, r2, r3
 80026b4:	69ba      	ldr	r2, [r7, #24]
 80026b6:	4313      	orrs	r3, r2
 80026b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	69ba      	ldr	r2, [r7, #24]
 80026be:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	f003 0303 	and.w	r3, r3, #3
 80026c8:	2b03      	cmp	r3, #3
 80026ca:	d017      	beq.n	80026fc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	68db      	ldr	r3, [r3, #12]
 80026d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80026d2:	69fb      	ldr	r3, [r7, #28]
 80026d4:	005b      	lsls	r3, r3, #1
 80026d6:	2203      	movs	r2, #3
 80026d8:	fa02 f303 	lsl.w	r3, r2, r3
 80026dc:	43db      	mvns	r3, r3
 80026de:	69ba      	ldr	r2, [r7, #24]
 80026e0:	4013      	ands	r3, r2
 80026e2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	689a      	ldr	r2, [r3, #8]
 80026e8:	69fb      	ldr	r3, [r7, #28]
 80026ea:	005b      	lsls	r3, r3, #1
 80026ec:	fa02 f303 	lsl.w	r3, r2, r3
 80026f0:	69ba      	ldr	r2, [r7, #24]
 80026f2:	4313      	orrs	r3, r2
 80026f4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	69ba      	ldr	r2, [r7, #24]
 80026fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	f003 0303 	and.w	r3, r3, #3
 8002704:	2b02      	cmp	r3, #2
 8002706:	d123      	bne.n	8002750 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002708:	69fb      	ldr	r3, [r7, #28]
 800270a:	08da      	lsrs	r2, r3, #3
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	3208      	adds	r2, #8
 8002710:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002714:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002716:	69fb      	ldr	r3, [r7, #28]
 8002718:	f003 0307 	and.w	r3, r3, #7
 800271c:	009b      	lsls	r3, r3, #2
 800271e:	220f      	movs	r2, #15
 8002720:	fa02 f303 	lsl.w	r3, r2, r3
 8002724:	43db      	mvns	r3, r3
 8002726:	69ba      	ldr	r2, [r7, #24]
 8002728:	4013      	ands	r3, r2
 800272a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	691a      	ldr	r2, [r3, #16]
 8002730:	69fb      	ldr	r3, [r7, #28]
 8002732:	f003 0307 	and.w	r3, r3, #7
 8002736:	009b      	lsls	r3, r3, #2
 8002738:	fa02 f303 	lsl.w	r3, r2, r3
 800273c:	69ba      	ldr	r2, [r7, #24]
 800273e:	4313      	orrs	r3, r2
 8002740:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002742:	69fb      	ldr	r3, [r7, #28]
 8002744:	08da      	lsrs	r2, r3, #3
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	3208      	adds	r2, #8
 800274a:	69b9      	ldr	r1, [r7, #24]
 800274c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002756:	69fb      	ldr	r3, [r7, #28]
 8002758:	005b      	lsls	r3, r3, #1
 800275a:	2203      	movs	r2, #3
 800275c:	fa02 f303 	lsl.w	r3, r2, r3
 8002760:	43db      	mvns	r3, r3
 8002762:	69ba      	ldr	r2, [r7, #24]
 8002764:	4013      	ands	r3, r2
 8002766:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	f003 0203 	and.w	r2, r3, #3
 8002770:	69fb      	ldr	r3, [r7, #28]
 8002772:	005b      	lsls	r3, r3, #1
 8002774:	fa02 f303 	lsl.w	r3, r2, r3
 8002778:	69ba      	ldr	r2, [r7, #24]
 800277a:	4313      	orrs	r3, r2
 800277c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	69ba      	ldr	r2, [r7, #24]
 8002782:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800278c:	2b00      	cmp	r3, #0
 800278e:	f000 80a2 	beq.w	80028d6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002792:	2300      	movs	r3, #0
 8002794:	60fb      	str	r3, [r7, #12]
 8002796:	4b57      	ldr	r3, [pc, #348]	; (80028f4 <HAL_GPIO_Init+0x2e8>)
 8002798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800279a:	4a56      	ldr	r2, [pc, #344]	; (80028f4 <HAL_GPIO_Init+0x2e8>)
 800279c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027a0:	6453      	str	r3, [r2, #68]	; 0x44
 80027a2:	4b54      	ldr	r3, [pc, #336]	; (80028f4 <HAL_GPIO_Init+0x2e8>)
 80027a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027aa:	60fb      	str	r3, [r7, #12]
 80027ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80027ae:	4a52      	ldr	r2, [pc, #328]	; (80028f8 <HAL_GPIO_Init+0x2ec>)
 80027b0:	69fb      	ldr	r3, [r7, #28]
 80027b2:	089b      	lsrs	r3, r3, #2
 80027b4:	3302      	adds	r3, #2
 80027b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80027bc:	69fb      	ldr	r3, [r7, #28]
 80027be:	f003 0303 	and.w	r3, r3, #3
 80027c2:	009b      	lsls	r3, r3, #2
 80027c4:	220f      	movs	r2, #15
 80027c6:	fa02 f303 	lsl.w	r3, r2, r3
 80027ca:	43db      	mvns	r3, r3
 80027cc:	69ba      	ldr	r2, [r7, #24]
 80027ce:	4013      	ands	r3, r2
 80027d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	4a49      	ldr	r2, [pc, #292]	; (80028fc <HAL_GPIO_Init+0x2f0>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d019      	beq.n	800280e <HAL_GPIO_Init+0x202>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	4a48      	ldr	r2, [pc, #288]	; (8002900 <HAL_GPIO_Init+0x2f4>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d013      	beq.n	800280a <HAL_GPIO_Init+0x1fe>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	4a47      	ldr	r2, [pc, #284]	; (8002904 <HAL_GPIO_Init+0x2f8>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d00d      	beq.n	8002806 <HAL_GPIO_Init+0x1fa>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	4a46      	ldr	r2, [pc, #280]	; (8002908 <HAL_GPIO_Init+0x2fc>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d007      	beq.n	8002802 <HAL_GPIO_Init+0x1f6>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	4a45      	ldr	r2, [pc, #276]	; (800290c <HAL_GPIO_Init+0x300>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d101      	bne.n	80027fe <HAL_GPIO_Init+0x1f2>
 80027fa:	2304      	movs	r3, #4
 80027fc:	e008      	b.n	8002810 <HAL_GPIO_Init+0x204>
 80027fe:	2307      	movs	r3, #7
 8002800:	e006      	b.n	8002810 <HAL_GPIO_Init+0x204>
 8002802:	2303      	movs	r3, #3
 8002804:	e004      	b.n	8002810 <HAL_GPIO_Init+0x204>
 8002806:	2302      	movs	r3, #2
 8002808:	e002      	b.n	8002810 <HAL_GPIO_Init+0x204>
 800280a:	2301      	movs	r3, #1
 800280c:	e000      	b.n	8002810 <HAL_GPIO_Init+0x204>
 800280e:	2300      	movs	r3, #0
 8002810:	69fa      	ldr	r2, [r7, #28]
 8002812:	f002 0203 	and.w	r2, r2, #3
 8002816:	0092      	lsls	r2, r2, #2
 8002818:	4093      	lsls	r3, r2
 800281a:	69ba      	ldr	r2, [r7, #24]
 800281c:	4313      	orrs	r3, r2
 800281e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002820:	4935      	ldr	r1, [pc, #212]	; (80028f8 <HAL_GPIO_Init+0x2ec>)
 8002822:	69fb      	ldr	r3, [r7, #28]
 8002824:	089b      	lsrs	r3, r3, #2
 8002826:	3302      	adds	r3, #2
 8002828:	69ba      	ldr	r2, [r7, #24]
 800282a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800282e:	4b38      	ldr	r3, [pc, #224]	; (8002910 <HAL_GPIO_Init+0x304>)
 8002830:	689b      	ldr	r3, [r3, #8]
 8002832:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002834:	693b      	ldr	r3, [r7, #16]
 8002836:	43db      	mvns	r3, r3
 8002838:	69ba      	ldr	r2, [r7, #24]
 800283a:	4013      	ands	r3, r2
 800283c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002846:	2b00      	cmp	r3, #0
 8002848:	d003      	beq.n	8002852 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800284a:	69ba      	ldr	r2, [r7, #24]
 800284c:	693b      	ldr	r3, [r7, #16]
 800284e:	4313      	orrs	r3, r2
 8002850:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002852:	4a2f      	ldr	r2, [pc, #188]	; (8002910 <HAL_GPIO_Init+0x304>)
 8002854:	69bb      	ldr	r3, [r7, #24]
 8002856:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002858:	4b2d      	ldr	r3, [pc, #180]	; (8002910 <HAL_GPIO_Init+0x304>)
 800285a:	68db      	ldr	r3, [r3, #12]
 800285c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	43db      	mvns	r3, r3
 8002862:	69ba      	ldr	r2, [r7, #24]
 8002864:	4013      	ands	r3, r2
 8002866:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002870:	2b00      	cmp	r3, #0
 8002872:	d003      	beq.n	800287c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002874:	69ba      	ldr	r2, [r7, #24]
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	4313      	orrs	r3, r2
 800287a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800287c:	4a24      	ldr	r2, [pc, #144]	; (8002910 <HAL_GPIO_Init+0x304>)
 800287e:	69bb      	ldr	r3, [r7, #24]
 8002880:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002882:	4b23      	ldr	r3, [pc, #140]	; (8002910 <HAL_GPIO_Init+0x304>)
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	43db      	mvns	r3, r3
 800288c:	69ba      	ldr	r2, [r7, #24]
 800288e:	4013      	ands	r3, r2
 8002890:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800289a:	2b00      	cmp	r3, #0
 800289c:	d003      	beq.n	80028a6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800289e:	69ba      	ldr	r2, [r7, #24]
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	4313      	orrs	r3, r2
 80028a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80028a6:	4a1a      	ldr	r2, [pc, #104]	; (8002910 <HAL_GPIO_Init+0x304>)
 80028a8:	69bb      	ldr	r3, [r7, #24]
 80028aa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80028ac:	4b18      	ldr	r3, [pc, #96]	; (8002910 <HAL_GPIO_Init+0x304>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	43db      	mvns	r3, r3
 80028b6:	69ba      	ldr	r2, [r7, #24]
 80028b8:	4013      	ands	r3, r2
 80028ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d003      	beq.n	80028d0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80028c8:	69ba      	ldr	r2, [r7, #24]
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	4313      	orrs	r3, r2
 80028ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80028d0:	4a0f      	ldr	r2, [pc, #60]	; (8002910 <HAL_GPIO_Init+0x304>)
 80028d2:	69bb      	ldr	r3, [r7, #24]
 80028d4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028d6:	69fb      	ldr	r3, [r7, #28]
 80028d8:	3301      	adds	r3, #1
 80028da:	61fb      	str	r3, [r7, #28]
 80028dc:	69fb      	ldr	r3, [r7, #28]
 80028de:	2b0f      	cmp	r3, #15
 80028e0:	f67f aea2 	bls.w	8002628 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80028e4:	bf00      	nop
 80028e6:	bf00      	nop
 80028e8:	3724      	adds	r7, #36	; 0x24
 80028ea:	46bd      	mov	sp, r7
 80028ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f0:	4770      	bx	lr
 80028f2:	bf00      	nop
 80028f4:	40023800 	.word	0x40023800
 80028f8:	40013800 	.word	0x40013800
 80028fc:	40020000 	.word	0x40020000
 8002900:	40020400 	.word	0x40020400
 8002904:	40020800 	.word	0x40020800
 8002908:	40020c00 	.word	0x40020c00
 800290c:	40021000 	.word	0x40021000
 8002910:	40013c00 	.word	0x40013c00

08002914 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002914:	b480      	push	{r7}
 8002916:	b083      	sub	sp, #12
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
 800291c:	460b      	mov	r3, r1
 800291e:	807b      	strh	r3, [r7, #2]
 8002920:	4613      	mov	r3, r2
 8002922:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002924:	787b      	ldrb	r3, [r7, #1]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d003      	beq.n	8002932 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800292a:	887a      	ldrh	r2, [r7, #2]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002930:	e003      	b.n	800293a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002932:	887b      	ldrh	r3, [r7, #2]
 8002934:	041a      	lsls	r2, r3, #16
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	619a      	str	r2, [r3, #24]
}
 800293a:	bf00      	nop
 800293c:	370c      	adds	r7, #12
 800293e:	46bd      	mov	sp, r7
 8002940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002944:	4770      	bx	lr
	...

08002948 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b084      	sub	sp, #16
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d101      	bne.n	800295a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002956:	2301      	movs	r3, #1
 8002958:	e12b      	b.n	8002bb2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002960:	b2db      	uxtb	r3, r3
 8002962:	2b00      	cmp	r3, #0
 8002964:	d106      	bne.n	8002974 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2200      	movs	r2, #0
 800296a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800296e:	6878      	ldr	r0, [r7, #4]
 8002970:	f7fe fbf2 	bl	8001158 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2224      	movs	r2, #36	; 0x24
 8002978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f022 0201 	bic.w	r2, r2, #1
 800298a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	681a      	ldr	r2, [r3, #0]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800299a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	681a      	ldr	r2, [r3, #0]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80029aa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80029ac:	f001 fbbc 	bl	8004128 <HAL_RCC_GetPCLK1Freq>
 80029b0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	4a81      	ldr	r2, [pc, #516]	; (8002bbc <HAL_I2C_Init+0x274>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d807      	bhi.n	80029cc <HAL_I2C_Init+0x84>
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	4a80      	ldr	r2, [pc, #512]	; (8002bc0 <HAL_I2C_Init+0x278>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	bf94      	ite	ls
 80029c4:	2301      	movls	r3, #1
 80029c6:	2300      	movhi	r3, #0
 80029c8:	b2db      	uxtb	r3, r3
 80029ca:	e006      	b.n	80029da <HAL_I2C_Init+0x92>
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	4a7d      	ldr	r2, [pc, #500]	; (8002bc4 <HAL_I2C_Init+0x27c>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	bf94      	ite	ls
 80029d4:	2301      	movls	r3, #1
 80029d6:	2300      	movhi	r3, #0
 80029d8:	b2db      	uxtb	r3, r3
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d001      	beq.n	80029e2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	e0e7      	b.n	8002bb2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	4a78      	ldr	r2, [pc, #480]	; (8002bc8 <HAL_I2C_Init+0x280>)
 80029e6:	fba2 2303 	umull	r2, r3, r2, r3
 80029ea:	0c9b      	lsrs	r3, r3, #18
 80029ec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	68ba      	ldr	r2, [r7, #8]
 80029fe:	430a      	orrs	r2, r1
 8002a00:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	6a1b      	ldr	r3, [r3, #32]
 8002a08:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	4a6a      	ldr	r2, [pc, #424]	; (8002bbc <HAL_I2C_Init+0x274>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d802      	bhi.n	8002a1c <HAL_I2C_Init+0xd4>
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	3301      	adds	r3, #1
 8002a1a:	e009      	b.n	8002a30 <HAL_I2C_Init+0xe8>
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002a22:	fb02 f303 	mul.w	r3, r2, r3
 8002a26:	4a69      	ldr	r2, [pc, #420]	; (8002bcc <HAL_I2C_Init+0x284>)
 8002a28:	fba2 2303 	umull	r2, r3, r2, r3
 8002a2c:	099b      	lsrs	r3, r3, #6
 8002a2e:	3301      	adds	r3, #1
 8002a30:	687a      	ldr	r2, [r7, #4]
 8002a32:	6812      	ldr	r2, [r2, #0]
 8002a34:	430b      	orrs	r3, r1
 8002a36:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	69db      	ldr	r3, [r3, #28]
 8002a3e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002a42:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	495c      	ldr	r1, [pc, #368]	; (8002bbc <HAL_I2C_Init+0x274>)
 8002a4c:	428b      	cmp	r3, r1
 8002a4e:	d819      	bhi.n	8002a84 <HAL_I2C_Init+0x13c>
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	1e59      	subs	r1, r3, #1
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	005b      	lsls	r3, r3, #1
 8002a5a:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a5e:	1c59      	adds	r1, r3, #1
 8002a60:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002a64:	400b      	ands	r3, r1
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d00a      	beq.n	8002a80 <HAL_I2C_Init+0x138>
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	1e59      	subs	r1, r3, #1
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	005b      	lsls	r3, r3, #1
 8002a74:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a78:	3301      	adds	r3, #1
 8002a7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a7e:	e051      	b.n	8002b24 <HAL_I2C_Init+0x1dc>
 8002a80:	2304      	movs	r3, #4
 8002a82:	e04f      	b.n	8002b24 <HAL_I2C_Init+0x1dc>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d111      	bne.n	8002ab0 <HAL_I2C_Init+0x168>
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	1e58      	subs	r0, r3, #1
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6859      	ldr	r1, [r3, #4]
 8002a94:	460b      	mov	r3, r1
 8002a96:	005b      	lsls	r3, r3, #1
 8002a98:	440b      	add	r3, r1
 8002a9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a9e:	3301      	adds	r3, #1
 8002aa0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	bf0c      	ite	eq
 8002aa8:	2301      	moveq	r3, #1
 8002aaa:	2300      	movne	r3, #0
 8002aac:	b2db      	uxtb	r3, r3
 8002aae:	e012      	b.n	8002ad6 <HAL_I2C_Init+0x18e>
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	1e58      	subs	r0, r3, #1
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6859      	ldr	r1, [r3, #4]
 8002ab8:	460b      	mov	r3, r1
 8002aba:	009b      	lsls	r3, r3, #2
 8002abc:	440b      	add	r3, r1
 8002abe:	0099      	lsls	r1, r3, #2
 8002ac0:	440b      	add	r3, r1
 8002ac2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ac6:	3301      	adds	r3, #1
 8002ac8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	bf0c      	ite	eq
 8002ad0:	2301      	moveq	r3, #1
 8002ad2:	2300      	movne	r3, #0
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d001      	beq.n	8002ade <HAL_I2C_Init+0x196>
 8002ada:	2301      	movs	r3, #1
 8002adc:	e022      	b.n	8002b24 <HAL_I2C_Init+0x1dc>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d10e      	bne.n	8002b04 <HAL_I2C_Init+0x1bc>
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	1e58      	subs	r0, r3, #1
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6859      	ldr	r1, [r3, #4]
 8002aee:	460b      	mov	r3, r1
 8002af0:	005b      	lsls	r3, r3, #1
 8002af2:	440b      	add	r3, r1
 8002af4:	fbb0 f3f3 	udiv	r3, r0, r3
 8002af8:	3301      	adds	r3, #1
 8002afa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002afe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b02:	e00f      	b.n	8002b24 <HAL_I2C_Init+0x1dc>
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	1e58      	subs	r0, r3, #1
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6859      	ldr	r1, [r3, #4]
 8002b0c:	460b      	mov	r3, r1
 8002b0e:	009b      	lsls	r3, r3, #2
 8002b10:	440b      	add	r3, r1
 8002b12:	0099      	lsls	r1, r3, #2
 8002b14:	440b      	add	r3, r1
 8002b16:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b1a:	3301      	adds	r3, #1
 8002b1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b20:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002b24:	6879      	ldr	r1, [r7, #4]
 8002b26:	6809      	ldr	r1, [r1, #0]
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	69da      	ldr	r2, [r3, #28]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6a1b      	ldr	r3, [r3, #32]
 8002b3e:	431a      	orrs	r2, r3
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	430a      	orrs	r2, r1
 8002b46:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	689b      	ldr	r3, [r3, #8]
 8002b4e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002b52:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002b56:	687a      	ldr	r2, [r7, #4]
 8002b58:	6911      	ldr	r1, [r2, #16]
 8002b5a:	687a      	ldr	r2, [r7, #4]
 8002b5c:	68d2      	ldr	r2, [r2, #12]
 8002b5e:	4311      	orrs	r1, r2
 8002b60:	687a      	ldr	r2, [r7, #4]
 8002b62:	6812      	ldr	r2, [r2, #0]
 8002b64:	430b      	orrs	r3, r1
 8002b66:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	68db      	ldr	r3, [r3, #12]
 8002b6e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	695a      	ldr	r2, [r3, #20]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	699b      	ldr	r3, [r3, #24]
 8002b7a:	431a      	orrs	r2, r3
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	430a      	orrs	r2, r1
 8002b82:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f042 0201 	orr.w	r2, r2, #1
 8002b92:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2200      	movs	r2, #0
 8002b98:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2220      	movs	r2, #32
 8002b9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2200      	movs	r2, #0
 8002bac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002bb0:	2300      	movs	r3, #0
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	3710      	adds	r7, #16
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	bf00      	nop
 8002bbc:	000186a0 	.word	0x000186a0
 8002bc0:	001e847f 	.word	0x001e847f
 8002bc4:	003d08ff 	.word	0x003d08ff
 8002bc8:	431bde83 	.word	0x431bde83
 8002bcc:	10624dd3 	.word	0x10624dd3

08002bd0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b088      	sub	sp, #32
 8002bd4:	af02      	add	r7, sp, #8
 8002bd6:	60f8      	str	r0, [r7, #12]
 8002bd8:	4608      	mov	r0, r1
 8002bda:	4611      	mov	r1, r2
 8002bdc:	461a      	mov	r2, r3
 8002bde:	4603      	mov	r3, r0
 8002be0:	817b      	strh	r3, [r7, #10]
 8002be2:	460b      	mov	r3, r1
 8002be4:	813b      	strh	r3, [r7, #8]
 8002be6:	4613      	mov	r3, r2
 8002be8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002bea:	f7fe fc7b 	bl	80014e4 <HAL_GetTick>
 8002bee:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bf6:	b2db      	uxtb	r3, r3
 8002bf8:	2b20      	cmp	r3, #32
 8002bfa:	f040 80d9 	bne.w	8002db0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	9300      	str	r3, [sp, #0]
 8002c02:	2319      	movs	r3, #25
 8002c04:	2201      	movs	r2, #1
 8002c06:	496d      	ldr	r1, [pc, #436]	; (8002dbc <HAL_I2C_Mem_Write+0x1ec>)
 8002c08:	68f8      	ldr	r0, [r7, #12]
 8002c0a:	f000 fc7f 	bl	800350c <I2C_WaitOnFlagUntilTimeout>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d001      	beq.n	8002c18 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002c14:	2302      	movs	r3, #2
 8002c16:	e0cc      	b.n	8002db2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c1e:	2b01      	cmp	r3, #1
 8002c20:	d101      	bne.n	8002c26 <HAL_I2C_Mem_Write+0x56>
 8002c22:	2302      	movs	r3, #2
 8002c24:	e0c5      	b.n	8002db2 <HAL_I2C_Mem_Write+0x1e2>
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	2201      	movs	r2, #1
 8002c2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f003 0301 	and.w	r3, r3, #1
 8002c38:	2b01      	cmp	r3, #1
 8002c3a:	d007      	beq.n	8002c4c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f042 0201 	orr.w	r2, r2, #1
 8002c4a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	681a      	ldr	r2, [r3, #0]
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c5a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	2221      	movs	r2, #33	; 0x21
 8002c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	2240      	movs	r2, #64	; 0x40
 8002c68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	6a3a      	ldr	r2, [r7, #32]
 8002c76:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002c7c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c82:	b29a      	uxth	r2, r3
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	4a4d      	ldr	r2, [pc, #308]	; (8002dc0 <HAL_I2C_Mem_Write+0x1f0>)
 8002c8c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002c8e:	88f8      	ldrh	r0, [r7, #6]
 8002c90:	893a      	ldrh	r2, [r7, #8]
 8002c92:	8979      	ldrh	r1, [r7, #10]
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	9301      	str	r3, [sp, #4]
 8002c98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c9a:	9300      	str	r3, [sp, #0]
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	68f8      	ldr	r0, [r7, #12]
 8002ca0:	f000 fab6 	bl	8003210 <I2C_RequestMemoryWrite>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d052      	beq.n	8002d50 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	e081      	b.n	8002db2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cae:	697a      	ldr	r2, [r7, #20]
 8002cb0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002cb2:	68f8      	ldr	r0, [r7, #12]
 8002cb4:	f000 fd00 	bl	80036b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d00d      	beq.n	8002cda <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc2:	2b04      	cmp	r3, #4
 8002cc4:	d107      	bne.n	8002cd6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cd4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e06b      	b.n	8002db2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cde:	781a      	ldrb	r2, [r3, #0]
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cea:	1c5a      	adds	r2, r3, #1
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cf4:	3b01      	subs	r3, #1
 8002cf6:	b29a      	uxth	r2, r3
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d00:	b29b      	uxth	r3, r3
 8002d02:	3b01      	subs	r3, #1
 8002d04:	b29a      	uxth	r2, r3
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	695b      	ldr	r3, [r3, #20]
 8002d10:	f003 0304 	and.w	r3, r3, #4
 8002d14:	2b04      	cmp	r3, #4
 8002d16:	d11b      	bne.n	8002d50 <HAL_I2C_Mem_Write+0x180>
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d017      	beq.n	8002d50 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d24:	781a      	ldrb	r2, [r3, #0]
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d30:	1c5a      	adds	r2, r3, #1
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d3a:	3b01      	subs	r3, #1
 8002d3c:	b29a      	uxth	r2, r3
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d46:	b29b      	uxth	r3, r3
 8002d48:	3b01      	subs	r3, #1
 8002d4a:	b29a      	uxth	r2, r3
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d1aa      	bne.n	8002cae <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d58:	697a      	ldr	r2, [r7, #20]
 8002d5a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002d5c:	68f8      	ldr	r0, [r7, #12]
 8002d5e:	f000 fcec 	bl	800373a <I2C_WaitOnBTFFlagUntilTimeout>
 8002d62:	4603      	mov	r3, r0
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d00d      	beq.n	8002d84 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d6c:	2b04      	cmp	r3, #4
 8002d6e:	d107      	bne.n	8002d80 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	681a      	ldr	r2, [r3, #0]
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d7e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002d80:	2301      	movs	r3, #1
 8002d82:	e016      	b.n	8002db2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	681a      	ldr	r2, [r3, #0]
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d92:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2220      	movs	r2, #32
 8002d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	2200      	movs	r2, #0
 8002da8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002dac:	2300      	movs	r3, #0
 8002dae:	e000      	b.n	8002db2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002db0:	2302      	movs	r3, #2
  }
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	3718      	adds	r7, #24
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}
 8002dba:	bf00      	nop
 8002dbc:	00100002 	.word	0x00100002
 8002dc0:	ffff0000 	.word	0xffff0000

08002dc4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b08c      	sub	sp, #48	; 0x30
 8002dc8:	af02      	add	r7, sp, #8
 8002dca:	60f8      	str	r0, [r7, #12]
 8002dcc:	4608      	mov	r0, r1
 8002dce:	4611      	mov	r1, r2
 8002dd0:	461a      	mov	r2, r3
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	817b      	strh	r3, [r7, #10]
 8002dd6:	460b      	mov	r3, r1
 8002dd8:	813b      	strh	r3, [r7, #8]
 8002dda:	4613      	mov	r3, r2
 8002ddc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002dde:	f7fe fb81 	bl	80014e4 <HAL_GetTick>
 8002de2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dea:	b2db      	uxtb	r3, r3
 8002dec:	2b20      	cmp	r3, #32
 8002dee:	f040 8208 	bne.w	8003202 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df4:	9300      	str	r3, [sp, #0]
 8002df6:	2319      	movs	r3, #25
 8002df8:	2201      	movs	r2, #1
 8002dfa:	497b      	ldr	r1, [pc, #492]	; (8002fe8 <HAL_I2C_Mem_Read+0x224>)
 8002dfc:	68f8      	ldr	r0, [r7, #12]
 8002dfe:	f000 fb85 	bl	800350c <I2C_WaitOnFlagUntilTimeout>
 8002e02:	4603      	mov	r3, r0
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d001      	beq.n	8002e0c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002e08:	2302      	movs	r3, #2
 8002e0a:	e1fb      	b.n	8003204 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e12:	2b01      	cmp	r3, #1
 8002e14:	d101      	bne.n	8002e1a <HAL_I2C_Mem_Read+0x56>
 8002e16:	2302      	movs	r3, #2
 8002e18:	e1f4      	b.n	8003204 <HAL_I2C_Mem_Read+0x440>
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	2201      	movs	r2, #1
 8002e1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f003 0301 	and.w	r3, r3, #1
 8002e2c:	2b01      	cmp	r3, #1
 8002e2e:	d007      	beq.n	8002e40 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f042 0201 	orr.w	r2, r2, #1
 8002e3e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e4e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	2222      	movs	r2, #34	; 0x22
 8002e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	2240      	movs	r2, #64	; 0x40
 8002e5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	2200      	movs	r2, #0
 8002e64:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e6a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002e70:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e76:	b29a      	uxth	r2, r3
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	4a5b      	ldr	r2, [pc, #364]	; (8002fec <HAL_I2C_Mem_Read+0x228>)
 8002e80:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002e82:	88f8      	ldrh	r0, [r7, #6]
 8002e84:	893a      	ldrh	r2, [r7, #8]
 8002e86:	8979      	ldrh	r1, [r7, #10]
 8002e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e8a:	9301      	str	r3, [sp, #4]
 8002e8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e8e:	9300      	str	r3, [sp, #0]
 8002e90:	4603      	mov	r3, r0
 8002e92:	68f8      	ldr	r0, [r7, #12]
 8002e94:	f000 fa52 	bl	800333c <I2C_RequestMemoryRead>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d001      	beq.n	8002ea2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e1b0      	b.n	8003204 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d113      	bne.n	8002ed2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002eaa:	2300      	movs	r3, #0
 8002eac:	623b      	str	r3, [r7, #32]
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	695b      	ldr	r3, [r3, #20]
 8002eb4:	623b      	str	r3, [r7, #32]
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	699b      	ldr	r3, [r3, #24]
 8002ebc:	623b      	str	r3, [r7, #32]
 8002ebe:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	681a      	ldr	r2, [r3, #0]
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ece:	601a      	str	r2, [r3, #0]
 8002ed0:	e184      	b.n	80031dc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ed6:	2b01      	cmp	r3, #1
 8002ed8:	d11b      	bne.n	8002f12 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	681a      	ldr	r2, [r3, #0]
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ee8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002eea:	2300      	movs	r3, #0
 8002eec:	61fb      	str	r3, [r7, #28]
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	695b      	ldr	r3, [r3, #20]
 8002ef4:	61fb      	str	r3, [r7, #28]
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	699b      	ldr	r3, [r3, #24]
 8002efc:	61fb      	str	r3, [r7, #28]
 8002efe:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f0e:	601a      	str	r2, [r3, #0]
 8002f10:	e164      	b.n	80031dc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f16:	2b02      	cmp	r3, #2
 8002f18:	d11b      	bne.n	8002f52 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	681a      	ldr	r2, [r3, #0]
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f28:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	681a      	ldr	r2, [r3, #0]
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f38:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	61bb      	str	r3, [r7, #24]
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	695b      	ldr	r3, [r3, #20]
 8002f44:	61bb      	str	r3, [r7, #24]
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	699b      	ldr	r3, [r3, #24]
 8002f4c:	61bb      	str	r3, [r7, #24]
 8002f4e:	69bb      	ldr	r3, [r7, #24]
 8002f50:	e144      	b.n	80031dc <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f52:	2300      	movs	r3, #0
 8002f54:	617b      	str	r3, [r7, #20]
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	695b      	ldr	r3, [r3, #20]
 8002f5c:	617b      	str	r3, [r7, #20]
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	699b      	ldr	r3, [r3, #24]
 8002f64:	617b      	str	r3, [r7, #20]
 8002f66:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002f68:	e138      	b.n	80031dc <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f6e:	2b03      	cmp	r3, #3
 8002f70:	f200 80f1 	bhi.w	8003156 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	d123      	bne.n	8002fc4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f7e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002f80:	68f8      	ldr	r0, [r7, #12]
 8002f82:	f000 fc1b 	bl	80037bc <I2C_WaitOnRXNEFlagUntilTimeout>
 8002f86:	4603      	mov	r3, r0
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d001      	beq.n	8002f90 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	e139      	b.n	8003204 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	691a      	ldr	r2, [r3, #16]
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f9a:	b2d2      	uxtb	r2, r2
 8002f9c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa2:	1c5a      	adds	r2, r3, #1
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fac:	3b01      	subs	r3, #1
 8002fae:	b29a      	uxth	r2, r3
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fb8:	b29b      	uxth	r3, r3
 8002fba:	3b01      	subs	r3, #1
 8002fbc:	b29a      	uxth	r2, r3
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002fc2:	e10b      	b.n	80031dc <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fc8:	2b02      	cmp	r3, #2
 8002fca:	d14e      	bne.n	800306a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fce:	9300      	str	r3, [sp, #0]
 8002fd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	4906      	ldr	r1, [pc, #24]	; (8002ff0 <HAL_I2C_Mem_Read+0x22c>)
 8002fd6:	68f8      	ldr	r0, [r7, #12]
 8002fd8:	f000 fa98 	bl	800350c <I2C_WaitOnFlagUntilTimeout>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d008      	beq.n	8002ff4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e10e      	b.n	8003204 <HAL_I2C_Mem_Read+0x440>
 8002fe6:	bf00      	nop
 8002fe8:	00100002 	.word	0x00100002
 8002fec:	ffff0000 	.word	0xffff0000
 8002ff0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003002:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	691a      	ldr	r2, [r3, #16]
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800300e:	b2d2      	uxtb	r2, r2
 8003010:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003016:	1c5a      	adds	r2, r3, #1
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003020:	3b01      	subs	r3, #1
 8003022:	b29a      	uxth	r2, r3
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800302c:	b29b      	uxth	r3, r3
 800302e:	3b01      	subs	r3, #1
 8003030:	b29a      	uxth	r2, r3
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	691a      	ldr	r2, [r3, #16]
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003040:	b2d2      	uxtb	r2, r2
 8003042:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003048:	1c5a      	adds	r2, r3, #1
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003052:	3b01      	subs	r3, #1
 8003054:	b29a      	uxth	r2, r3
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800305e:	b29b      	uxth	r3, r3
 8003060:	3b01      	subs	r3, #1
 8003062:	b29a      	uxth	r2, r3
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003068:	e0b8      	b.n	80031dc <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800306a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800306c:	9300      	str	r3, [sp, #0]
 800306e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003070:	2200      	movs	r2, #0
 8003072:	4966      	ldr	r1, [pc, #408]	; (800320c <HAL_I2C_Mem_Read+0x448>)
 8003074:	68f8      	ldr	r0, [r7, #12]
 8003076:	f000 fa49 	bl	800350c <I2C_WaitOnFlagUntilTimeout>
 800307a:	4603      	mov	r3, r0
 800307c:	2b00      	cmp	r3, #0
 800307e:	d001      	beq.n	8003084 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	e0bf      	b.n	8003204 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	681a      	ldr	r2, [r3, #0]
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003092:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	691a      	ldr	r2, [r3, #16]
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800309e:	b2d2      	uxtb	r2, r2
 80030a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a6:	1c5a      	adds	r2, r3, #1
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030b0:	3b01      	subs	r3, #1
 80030b2:	b29a      	uxth	r2, r3
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030bc:	b29b      	uxth	r3, r3
 80030be:	3b01      	subs	r3, #1
 80030c0:	b29a      	uxth	r2, r3
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80030c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c8:	9300      	str	r3, [sp, #0]
 80030ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030cc:	2200      	movs	r2, #0
 80030ce:	494f      	ldr	r1, [pc, #316]	; (800320c <HAL_I2C_Mem_Read+0x448>)
 80030d0:	68f8      	ldr	r0, [r7, #12]
 80030d2:	f000 fa1b 	bl	800350c <I2C_WaitOnFlagUntilTimeout>
 80030d6:	4603      	mov	r3, r0
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d001      	beq.n	80030e0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	e091      	b.n	8003204 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	681a      	ldr	r2, [r3, #0]
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030ee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	691a      	ldr	r2, [r3, #16]
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030fa:	b2d2      	uxtb	r2, r2
 80030fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003102:	1c5a      	adds	r2, r3, #1
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800310c:	3b01      	subs	r3, #1
 800310e:	b29a      	uxth	r2, r3
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003118:	b29b      	uxth	r3, r3
 800311a:	3b01      	subs	r3, #1
 800311c:	b29a      	uxth	r2, r3
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	691a      	ldr	r2, [r3, #16]
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800312c:	b2d2      	uxtb	r2, r2
 800312e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003134:	1c5a      	adds	r2, r3, #1
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800313e:	3b01      	subs	r3, #1
 8003140:	b29a      	uxth	r2, r3
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800314a:	b29b      	uxth	r3, r3
 800314c:	3b01      	subs	r3, #1
 800314e:	b29a      	uxth	r2, r3
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003154:	e042      	b.n	80031dc <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003156:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003158:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800315a:	68f8      	ldr	r0, [r7, #12]
 800315c:	f000 fb2e 	bl	80037bc <I2C_WaitOnRXNEFlagUntilTimeout>
 8003160:	4603      	mov	r3, r0
 8003162:	2b00      	cmp	r3, #0
 8003164:	d001      	beq.n	800316a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	e04c      	b.n	8003204 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	691a      	ldr	r2, [r3, #16]
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003174:	b2d2      	uxtb	r2, r2
 8003176:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800317c:	1c5a      	adds	r2, r3, #1
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003186:	3b01      	subs	r3, #1
 8003188:	b29a      	uxth	r2, r3
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003192:	b29b      	uxth	r3, r3
 8003194:	3b01      	subs	r3, #1
 8003196:	b29a      	uxth	r2, r3
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	695b      	ldr	r3, [r3, #20]
 80031a2:	f003 0304 	and.w	r3, r3, #4
 80031a6:	2b04      	cmp	r3, #4
 80031a8:	d118      	bne.n	80031dc <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	691a      	ldr	r2, [r3, #16]
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b4:	b2d2      	uxtb	r2, r2
 80031b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031bc:	1c5a      	adds	r2, r3, #1
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031c6:	3b01      	subs	r3, #1
 80031c8:	b29a      	uxth	r2, r3
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031d2:	b29b      	uxth	r3, r3
 80031d4:	3b01      	subs	r3, #1
 80031d6:	b29a      	uxth	r2, r3
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	f47f aec2 	bne.w	8002f6a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	2220      	movs	r2, #32
 80031ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	2200      	movs	r2, #0
 80031f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	2200      	movs	r2, #0
 80031fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80031fe:	2300      	movs	r3, #0
 8003200:	e000      	b.n	8003204 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003202:	2302      	movs	r3, #2
  }
}
 8003204:	4618      	mov	r0, r3
 8003206:	3728      	adds	r7, #40	; 0x28
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}
 800320c:	00010004 	.word	0x00010004

08003210 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b088      	sub	sp, #32
 8003214:	af02      	add	r7, sp, #8
 8003216:	60f8      	str	r0, [r7, #12]
 8003218:	4608      	mov	r0, r1
 800321a:	4611      	mov	r1, r2
 800321c:	461a      	mov	r2, r3
 800321e:	4603      	mov	r3, r0
 8003220:	817b      	strh	r3, [r7, #10]
 8003222:	460b      	mov	r3, r1
 8003224:	813b      	strh	r3, [r7, #8]
 8003226:	4613      	mov	r3, r2
 8003228:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	681a      	ldr	r2, [r3, #0]
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003238:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800323a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800323c:	9300      	str	r3, [sp, #0]
 800323e:	6a3b      	ldr	r3, [r7, #32]
 8003240:	2200      	movs	r2, #0
 8003242:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003246:	68f8      	ldr	r0, [r7, #12]
 8003248:	f000 f960 	bl	800350c <I2C_WaitOnFlagUntilTimeout>
 800324c:	4603      	mov	r3, r0
 800324e:	2b00      	cmp	r3, #0
 8003250:	d00d      	beq.n	800326e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800325c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003260:	d103      	bne.n	800326a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003268:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800326a:	2303      	movs	r3, #3
 800326c:	e05f      	b.n	800332e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800326e:	897b      	ldrh	r3, [r7, #10]
 8003270:	b2db      	uxtb	r3, r3
 8003272:	461a      	mov	r2, r3
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800327c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800327e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003280:	6a3a      	ldr	r2, [r7, #32]
 8003282:	492d      	ldr	r1, [pc, #180]	; (8003338 <I2C_RequestMemoryWrite+0x128>)
 8003284:	68f8      	ldr	r0, [r7, #12]
 8003286:	f000 f998 	bl	80035ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800328a:	4603      	mov	r3, r0
 800328c:	2b00      	cmp	r3, #0
 800328e:	d001      	beq.n	8003294 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003290:	2301      	movs	r3, #1
 8003292:	e04c      	b.n	800332e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003294:	2300      	movs	r3, #0
 8003296:	617b      	str	r3, [r7, #20]
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	695b      	ldr	r3, [r3, #20]
 800329e:	617b      	str	r3, [r7, #20]
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	699b      	ldr	r3, [r3, #24]
 80032a6:	617b      	str	r3, [r7, #20]
 80032a8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80032aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032ac:	6a39      	ldr	r1, [r7, #32]
 80032ae:	68f8      	ldr	r0, [r7, #12]
 80032b0:	f000 fa02 	bl	80036b8 <I2C_WaitOnTXEFlagUntilTimeout>
 80032b4:	4603      	mov	r3, r0
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d00d      	beq.n	80032d6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032be:	2b04      	cmp	r3, #4
 80032c0:	d107      	bne.n	80032d2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	681a      	ldr	r2, [r3, #0]
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032d0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80032d2:	2301      	movs	r3, #1
 80032d4:	e02b      	b.n	800332e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80032d6:	88fb      	ldrh	r3, [r7, #6]
 80032d8:	2b01      	cmp	r3, #1
 80032da:	d105      	bne.n	80032e8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80032dc:	893b      	ldrh	r3, [r7, #8]
 80032de:	b2da      	uxtb	r2, r3
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	611a      	str	r2, [r3, #16]
 80032e6:	e021      	b.n	800332c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80032e8:	893b      	ldrh	r3, [r7, #8]
 80032ea:	0a1b      	lsrs	r3, r3, #8
 80032ec:	b29b      	uxth	r3, r3
 80032ee:	b2da      	uxtb	r2, r3
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80032f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032f8:	6a39      	ldr	r1, [r7, #32]
 80032fa:	68f8      	ldr	r0, [r7, #12]
 80032fc:	f000 f9dc 	bl	80036b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003300:	4603      	mov	r3, r0
 8003302:	2b00      	cmp	r3, #0
 8003304:	d00d      	beq.n	8003322 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800330a:	2b04      	cmp	r3, #4
 800330c:	d107      	bne.n	800331e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	681a      	ldr	r2, [r3, #0]
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800331c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	e005      	b.n	800332e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003322:	893b      	ldrh	r3, [r7, #8]
 8003324:	b2da      	uxtb	r2, r3
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800332c:	2300      	movs	r3, #0
}
 800332e:	4618      	mov	r0, r3
 8003330:	3718      	adds	r7, #24
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}
 8003336:	bf00      	nop
 8003338:	00010002 	.word	0x00010002

0800333c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b088      	sub	sp, #32
 8003340:	af02      	add	r7, sp, #8
 8003342:	60f8      	str	r0, [r7, #12]
 8003344:	4608      	mov	r0, r1
 8003346:	4611      	mov	r1, r2
 8003348:	461a      	mov	r2, r3
 800334a:	4603      	mov	r3, r0
 800334c:	817b      	strh	r3, [r7, #10]
 800334e:	460b      	mov	r3, r1
 8003350:	813b      	strh	r3, [r7, #8]
 8003352:	4613      	mov	r3, r2
 8003354:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	681a      	ldr	r2, [r3, #0]
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003364:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	681a      	ldr	r2, [r3, #0]
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003374:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003378:	9300      	str	r3, [sp, #0]
 800337a:	6a3b      	ldr	r3, [r7, #32]
 800337c:	2200      	movs	r2, #0
 800337e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003382:	68f8      	ldr	r0, [r7, #12]
 8003384:	f000 f8c2 	bl	800350c <I2C_WaitOnFlagUntilTimeout>
 8003388:	4603      	mov	r3, r0
 800338a:	2b00      	cmp	r3, #0
 800338c:	d00d      	beq.n	80033aa <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003398:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800339c:	d103      	bne.n	80033a6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80033a4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80033a6:	2303      	movs	r3, #3
 80033a8:	e0aa      	b.n	8003500 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80033aa:	897b      	ldrh	r3, [r7, #10]
 80033ac:	b2db      	uxtb	r3, r3
 80033ae:	461a      	mov	r2, r3
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80033b8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80033ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033bc:	6a3a      	ldr	r2, [r7, #32]
 80033be:	4952      	ldr	r1, [pc, #328]	; (8003508 <I2C_RequestMemoryRead+0x1cc>)
 80033c0:	68f8      	ldr	r0, [r7, #12]
 80033c2:	f000 f8fa 	bl	80035ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80033c6:	4603      	mov	r3, r0
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d001      	beq.n	80033d0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	e097      	b.n	8003500 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033d0:	2300      	movs	r3, #0
 80033d2:	617b      	str	r3, [r7, #20]
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	695b      	ldr	r3, [r3, #20]
 80033da:	617b      	str	r3, [r7, #20]
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	699b      	ldr	r3, [r3, #24]
 80033e2:	617b      	str	r3, [r7, #20]
 80033e4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80033e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033e8:	6a39      	ldr	r1, [r7, #32]
 80033ea:	68f8      	ldr	r0, [r7, #12]
 80033ec:	f000 f964 	bl	80036b8 <I2C_WaitOnTXEFlagUntilTimeout>
 80033f0:	4603      	mov	r3, r0
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d00d      	beq.n	8003412 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033fa:	2b04      	cmp	r3, #4
 80033fc:	d107      	bne.n	800340e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	681a      	ldr	r2, [r3, #0]
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800340c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	e076      	b.n	8003500 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003412:	88fb      	ldrh	r3, [r7, #6]
 8003414:	2b01      	cmp	r3, #1
 8003416:	d105      	bne.n	8003424 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003418:	893b      	ldrh	r3, [r7, #8]
 800341a:	b2da      	uxtb	r2, r3
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	611a      	str	r2, [r3, #16]
 8003422:	e021      	b.n	8003468 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003424:	893b      	ldrh	r3, [r7, #8]
 8003426:	0a1b      	lsrs	r3, r3, #8
 8003428:	b29b      	uxth	r3, r3
 800342a:	b2da      	uxtb	r2, r3
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003432:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003434:	6a39      	ldr	r1, [r7, #32]
 8003436:	68f8      	ldr	r0, [r7, #12]
 8003438:	f000 f93e 	bl	80036b8 <I2C_WaitOnTXEFlagUntilTimeout>
 800343c:	4603      	mov	r3, r0
 800343e:	2b00      	cmp	r3, #0
 8003440:	d00d      	beq.n	800345e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003446:	2b04      	cmp	r3, #4
 8003448:	d107      	bne.n	800345a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	681a      	ldr	r2, [r3, #0]
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003458:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	e050      	b.n	8003500 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800345e:	893b      	ldrh	r3, [r7, #8]
 8003460:	b2da      	uxtb	r2, r3
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003468:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800346a:	6a39      	ldr	r1, [r7, #32]
 800346c:	68f8      	ldr	r0, [r7, #12]
 800346e:	f000 f923 	bl	80036b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003472:	4603      	mov	r3, r0
 8003474:	2b00      	cmp	r3, #0
 8003476:	d00d      	beq.n	8003494 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800347c:	2b04      	cmp	r3, #4
 800347e:	d107      	bne.n	8003490 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	681a      	ldr	r2, [r3, #0]
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800348e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003490:	2301      	movs	r3, #1
 8003492:	e035      	b.n	8003500 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	681a      	ldr	r2, [r3, #0]
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80034a2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80034a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a6:	9300      	str	r3, [sp, #0]
 80034a8:	6a3b      	ldr	r3, [r7, #32]
 80034aa:	2200      	movs	r2, #0
 80034ac:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80034b0:	68f8      	ldr	r0, [r7, #12]
 80034b2:	f000 f82b 	bl	800350c <I2C_WaitOnFlagUntilTimeout>
 80034b6:	4603      	mov	r3, r0
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d00d      	beq.n	80034d8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034ca:	d103      	bne.n	80034d4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80034d2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80034d4:	2303      	movs	r3, #3
 80034d6:	e013      	b.n	8003500 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80034d8:	897b      	ldrh	r3, [r7, #10]
 80034da:	b2db      	uxtb	r3, r3
 80034dc:	f043 0301 	orr.w	r3, r3, #1
 80034e0:	b2da      	uxtb	r2, r3
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80034e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ea:	6a3a      	ldr	r2, [r7, #32]
 80034ec:	4906      	ldr	r1, [pc, #24]	; (8003508 <I2C_RequestMemoryRead+0x1cc>)
 80034ee:	68f8      	ldr	r0, [r7, #12]
 80034f0:	f000 f863 	bl	80035ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80034f4:	4603      	mov	r3, r0
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d001      	beq.n	80034fe <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	e000      	b.n	8003500 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80034fe:	2300      	movs	r3, #0
}
 8003500:	4618      	mov	r0, r3
 8003502:	3718      	adds	r7, #24
 8003504:	46bd      	mov	sp, r7
 8003506:	bd80      	pop	{r7, pc}
 8003508:	00010002 	.word	0x00010002

0800350c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b084      	sub	sp, #16
 8003510:	af00      	add	r7, sp, #0
 8003512:	60f8      	str	r0, [r7, #12]
 8003514:	60b9      	str	r1, [r7, #8]
 8003516:	603b      	str	r3, [r7, #0]
 8003518:	4613      	mov	r3, r2
 800351a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800351c:	e025      	b.n	800356a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003524:	d021      	beq.n	800356a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003526:	f7fd ffdd 	bl	80014e4 <HAL_GetTick>
 800352a:	4602      	mov	r2, r0
 800352c:	69bb      	ldr	r3, [r7, #24]
 800352e:	1ad3      	subs	r3, r2, r3
 8003530:	683a      	ldr	r2, [r7, #0]
 8003532:	429a      	cmp	r2, r3
 8003534:	d302      	bcc.n	800353c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d116      	bne.n	800356a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	2200      	movs	r2, #0
 8003540:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	2220      	movs	r2, #32
 8003546:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	2200      	movs	r2, #0
 800354e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003556:	f043 0220 	orr.w	r2, r3, #32
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2200      	movs	r2, #0
 8003562:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	e023      	b.n	80035b2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	0c1b      	lsrs	r3, r3, #16
 800356e:	b2db      	uxtb	r3, r3
 8003570:	2b01      	cmp	r3, #1
 8003572:	d10d      	bne.n	8003590 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	695b      	ldr	r3, [r3, #20]
 800357a:	43da      	mvns	r2, r3
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	4013      	ands	r3, r2
 8003580:	b29b      	uxth	r3, r3
 8003582:	2b00      	cmp	r3, #0
 8003584:	bf0c      	ite	eq
 8003586:	2301      	moveq	r3, #1
 8003588:	2300      	movne	r3, #0
 800358a:	b2db      	uxtb	r3, r3
 800358c:	461a      	mov	r2, r3
 800358e:	e00c      	b.n	80035aa <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	699b      	ldr	r3, [r3, #24]
 8003596:	43da      	mvns	r2, r3
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	4013      	ands	r3, r2
 800359c:	b29b      	uxth	r3, r3
 800359e:	2b00      	cmp	r3, #0
 80035a0:	bf0c      	ite	eq
 80035a2:	2301      	moveq	r3, #1
 80035a4:	2300      	movne	r3, #0
 80035a6:	b2db      	uxtb	r3, r3
 80035a8:	461a      	mov	r2, r3
 80035aa:	79fb      	ldrb	r3, [r7, #7]
 80035ac:	429a      	cmp	r2, r3
 80035ae:	d0b6      	beq.n	800351e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80035b0:	2300      	movs	r3, #0
}
 80035b2:	4618      	mov	r0, r3
 80035b4:	3710      	adds	r7, #16
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}

080035ba <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80035ba:	b580      	push	{r7, lr}
 80035bc:	b084      	sub	sp, #16
 80035be:	af00      	add	r7, sp, #0
 80035c0:	60f8      	str	r0, [r7, #12]
 80035c2:	60b9      	str	r1, [r7, #8]
 80035c4:	607a      	str	r2, [r7, #4]
 80035c6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80035c8:	e051      	b.n	800366e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	695b      	ldr	r3, [r3, #20]
 80035d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035d8:	d123      	bne.n	8003622 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	681a      	ldr	r2, [r3, #0]
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035e8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80035f2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	2200      	movs	r2, #0
 80035f8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	2220      	movs	r2, #32
 80035fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2200      	movs	r2, #0
 8003606:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800360e:	f043 0204 	orr.w	r2, r3, #4
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	2200      	movs	r2, #0
 800361a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	e046      	b.n	80036b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003628:	d021      	beq.n	800366e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800362a:	f7fd ff5b 	bl	80014e4 <HAL_GetTick>
 800362e:	4602      	mov	r2, r0
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	1ad3      	subs	r3, r2, r3
 8003634:	687a      	ldr	r2, [r7, #4]
 8003636:	429a      	cmp	r2, r3
 8003638:	d302      	bcc.n	8003640 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d116      	bne.n	800366e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	2200      	movs	r2, #0
 8003644:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	2220      	movs	r2, #32
 800364a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	2200      	movs	r2, #0
 8003652:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800365a:	f043 0220 	orr.w	r2, r3, #32
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	2200      	movs	r2, #0
 8003666:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	e020      	b.n	80036b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	0c1b      	lsrs	r3, r3, #16
 8003672:	b2db      	uxtb	r3, r3
 8003674:	2b01      	cmp	r3, #1
 8003676:	d10c      	bne.n	8003692 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	695b      	ldr	r3, [r3, #20]
 800367e:	43da      	mvns	r2, r3
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	4013      	ands	r3, r2
 8003684:	b29b      	uxth	r3, r3
 8003686:	2b00      	cmp	r3, #0
 8003688:	bf14      	ite	ne
 800368a:	2301      	movne	r3, #1
 800368c:	2300      	moveq	r3, #0
 800368e:	b2db      	uxtb	r3, r3
 8003690:	e00b      	b.n	80036aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	699b      	ldr	r3, [r3, #24]
 8003698:	43da      	mvns	r2, r3
 800369a:	68bb      	ldr	r3, [r7, #8]
 800369c:	4013      	ands	r3, r2
 800369e:	b29b      	uxth	r3, r3
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	bf14      	ite	ne
 80036a4:	2301      	movne	r3, #1
 80036a6:	2300      	moveq	r3, #0
 80036a8:	b2db      	uxtb	r3, r3
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d18d      	bne.n	80035ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80036ae:	2300      	movs	r3, #0
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	3710      	adds	r7, #16
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bd80      	pop	{r7, pc}

080036b8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b084      	sub	sp, #16
 80036bc:	af00      	add	r7, sp, #0
 80036be:	60f8      	str	r0, [r7, #12]
 80036c0:	60b9      	str	r1, [r7, #8]
 80036c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80036c4:	e02d      	b.n	8003722 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80036c6:	68f8      	ldr	r0, [r7, #12]
 80036c8:	f000 f8ce 	bl	8003868 <I2C_IsAcknowledgeFailed>
 80036cc:	4603      	mov	r3, r0
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d001      	beq.n	80036d6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	e02d      	b.n	8003732 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036dc:	d021      	beq.n	8003722 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036de:	f7fd ff01 	bl	80014e4 <HAL_GetTick>
 80036e2:	4602      	mov	r2, r0
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	1ad3      	subs	r3, r2, r3
 80036e8:	68ba      	ldr	r2, [r7, #8]
 80036ea:	429a      	cmp	r2, r3
 80036ec:	d302      	bcc.n	80036f4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d116      	bne.n	8003722 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	2200      	movs	r2, #0
 80036f8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	2220      	movs	r2, #32
 80036fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	2200      	movs	r2, #0
 8003706:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800370e:	f043 0220 	orr.w	r2, r3, #32
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2200      	movs	r2, #0
 800371a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	e007      	b.n	8003732 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	695b      	ldr	r3, [r3, #20]
 8003728:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800372c:	2b80      	cmp	r3, #128	; 0x80
 800372e:	d1ca      	bne.n	80036c6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003730:	2300      	movs	r3, #0
}
 8003732:	4618      	mov	r0, r3
 8003734:	3710      	adds	r7, #16
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}

0800373a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800373a:	b580      	push	{r7, lr}
 800373c:	b084      	sub	sp, #16
 800373e:	af00      	add	r7, sp, #0
 8003740:	60f8      	str	r0, [r7, #12]
 8003742:	60b9      	str	r1, [r7, #8]
 8003744:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003746:	e02d      	b.n	80037a4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003748:	68f8      	ldr	r0, [r7, #12]
 800374a:	f000 f88d 	bl	8003868 <I2C_IsAcknowledgeFailed>
 800374e:	4603      	mov	r3, r0
 8003750:	2b00      	cmp	r3, #0
 8003752:	d001      	beq.n	8003758 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003754:	2301      	movs	r3, #1
 8003756:	e02d      	b.n	80037b4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800375e:	d021      	beq.n	80037a4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003760:	f7fd fec0 	bl	80014e4 <HAL_GetTick>
 8003764:	4602      	mov	r2, r0
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	1ad3      	subs	r3, r2, r3
 800376a:	68ba      	ldr	r2, [r7, #8]
 800376c:	429a      	cmp	r2, r3
 800376e:	d302      	bcc.n	8003776 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d116      	bne.n	80037a4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	2200      	movs	r2, #0
 800377a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	2220      	movs	r2, #32
 8003780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	2200      	movs	r2, #0
 8003788:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003790:	f043 0220 	orr.w	r2, r3, #32
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	2200      	movs	r2, #0
 800379c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80037a0:	2301      	movs	r3, #1
 80037a2:	e007      	b.n	80037b4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	695b      	ldr	r3, [r3, #20]
 80037aa:	f003 0304 	and.w	r3, r3, #4
 80037ae:	2b04      	cmp	r3, #4
 80037b0:	d1ca      	bne.n	8003748 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80037b2:	2300      	movs	r3, #0
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	3710      	adds	r7, #16
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}

080037bc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b084      	sub	sp, #16
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	60f8      	str	r0, [r7, #12]
 80037c4:	60b9      	str	r1, [r7, #8]
 80037c6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80037c8:	e042      	b.n	8003850 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	695b      	ldr	r3, [r3, #20]
 80037d0:	f003 0310 	and.w	r3, r3, #16
 80037d4:	2b10      	cmp	r3, #16
 80037d6:	d119      	bne.n	800380c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f06f 0210 	mvn.w	r2, #16
 80037e0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	2200      	movs	r2, #0
 80037e6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	2220      	movs	r2, #32
 80037ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	2200      	movs	r2, #0
 80037f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2200      	movs	r2, #0
 8003804:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003808:	2301      	movs	r3, #1
 800380a:	e029      	b.n	8003860 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800380c:	f7fd fe6a 	bl	80014e4 <HAL_GetTick>
 8003810:	4602      	mov	r2, r0
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	1ad3      	subs	r3, r2, r3
 8003816:	68ba      	ldr	r2, [r7, #8]
 8003818:	429a      	cmp	r2, r3
 800381a:	d302      	bcc.n	8003822 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d116      	bne.n	8003850 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2200      	movs	r2, #0
 8003826:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	2220      	movs	r2, #32
 800382c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	2200      	movs	r2, #0
 8003834:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800383c:	f043 0220 	orr.w	r2, r3, #32
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2200      	movs	r2, #0
 8003848:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800384c:	2301      	movs	r3, #1
 800384e:	e007      	b.n	8003860 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	695b      	ldr	r3, [r3, #20]
 8003856:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800385a:	2b40      	cmp	r3, #64	; 0x40
 800385c:	d1b5      	bne.n	80037ca <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800385e:	2300      	movs	r3, #0
}
 8003860:	4618      	mov	r0, r3
 8003862:	3710      	adds	r7, #16
 8003864:	46bd      	mov	sp, r7
 8003866:	bd80      	pop	{r7, pc}

08003868 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003868:	b480      	push	{r7}
 800386a:	b083      	sub	sp, #12
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	695b      	ldr	r3, [r3, #20]
 8003876:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800387a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800387e:	d11b      	bne.n	80038b8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003888:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2200      	movs	r2, #0
 800388e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2220      	movs	r2, #32
 8003894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2200      	movs	r2, #0
 800389c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a4:	f043 0204 	orr.w	r2, r3, #4
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2200      	movs	r2, #0
 80038b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80038b4:	2301      	movs	r3, #1
 80038b6:	e000      	b.n	80038ba <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80038b8:	2300      	movs	r3, #0
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	370c      	adds	r7, #12
 80038be:	46bd      	mov	sp, r7
 80038c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c4:	4770      	bx	lr
	...

080038c8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b086      	sub	sp, #24
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d101      	bne.n	80038da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	e267      	b.n	8003daa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f003 0301 	and.w	r3, r3, #1
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d075      	beq.n	80039d2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80038e6:	4b88      	ldr	r3, [pc, #544]	; (8003b08 <HAL_RCC_OscConfig+0x240>)
 80038e8:	689b      	ldr	r3, [r3, #8]
 80038ea:	f003 030c 	and.w	r3, r3, #12
 80038ee:	2b04      	cmp	r3, #4
 80038f0:	d00c      	beq.n	800390c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80038f2:	4b85      	ldr	r3, [pc, #532]	; (8003b08 <HAL_RCC_OscConfig+0x240>)
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80038fa:	2b08      	cmp	r3, #8
 80038fc:	d112      	bne.n	8003924 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80038fe:	4b82      	ldr	r3, [pc, #520]	; (8003b08 <HAL_RCC_OscConfig+0x240>)
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003906:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800390a:	d10b      	bne.n	8003924 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800390c:	4b7e      	ldr	r3, [pc, #504]	; (8003b08 <HAL_RCC_OscConfig+0x240>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003914:	2b00      	cmp	r3, #0
 8003916:	d05b      	beq.n	80039d0 <HAL_RCC_OscConfig+0x108>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d157      	bne.n	80039d0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003920:	2301      	movs	r3, #1
 8003922:	e242      	b.n	8003daa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800392c:	d106      	bne.n	800393c <HAL_RCC_OscConfig+0x74>
 800392e:	4b76      	ldr	r3, [pc, #472]	; (8003b08 <HAL_RCC_OscConfig+0x240>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a75      	ldr	r2, [pc, #468]	; (8003b08 <HAL_RCC_OscConfig+0x240>)
 8003934:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003938:	6013      	str	r3, [r2, #0]
 800393a:	e01d      	b.n	8003978 <HAL_RCC_OscConfig+0xb0>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003944:	d10c      	bne.n	8003960 <HAL_RCC_OscConfig+0x98>
 8003946:	4b70      	ldr	r3, [pc, #448]	; (8003b08 <HAL_RCC_OscConfig+0x240>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a6f      	ldr	r2, [pc, #444]	; (8003b08 <HAL_RCC_OscConfig+0x240>)
 800394c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003950:	6013      	str	r3, [r2, #0]
 8003952:	4b6d      	ldr	r3, [pc, #436]	; (8003b08 <HAL_RCC_OscConfig+0x240>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a6c      	ldr	r2, [pc, #432]	; (8003b08 <HAL_RCC_OscConfig+0x240>)
 8003958:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800395c:	6013      	str	r3, [r2, #0]
 800395e:	e00b      	b.n	8003978 <HAL_RCC_OscConfig+0xb0>
 8003960:	4b69      	ldr	r3, [pc, #420]	; (8003b08 <HAL_RCC_OscConfig+0x240>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a68      	ldr	r2, [pc, #416]	; (8003b08 <HAL_RCC_OscConfig+0x240>)
 8003966:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800396a:	6013      	str	r3, [r2, #0]
 800396c:	4b66      	ldr	r3, [pc, #408]	; (8003b08 <HAL_RCC_OscConfig+0x240>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a65      	ldr	r2, [pc, #404]	; (8003b08 <HAL_RCC_OscConfig+0x240>)
 8003972:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003976:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d013      	beq.n	80039a8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003980:	f7fd fdb0 	bl	80014e4 <HAL_GetTick>
 8003984:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003986:	e008      	b.n	800399a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003988:	f7fd fdac 	bl	80014e4 <HAL_GetTick>
 800398c:	4602      	mov	r2, r0
 800398e:	693b      	ldr	r3, [r7, #16]
 8003990:	1ad3      	subs	r3, r2, r3
 8003992:	2b64      	cmp	r3, #100	; 0x64
 8003994:	d901      	bls.n	800399a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003996:	2303      	movs	r3, #3
 8003998:	e207      	b.n	8003daa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800399a:	4b5b      	ldr	r3, [pc, #364]	; (8003b08 <HAL_RCC_OscConfig+0x240>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d0f0      	beq.n	8003988 <HAL_RCC_OscConfig+0xc0>
 80039a6:	e014      	b.n	80039d2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039a8:	f7fd fd9c 	bl	80014e4 <HAL_GetTick>
 80039ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039ae:	e008      	b.n	80039c2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039b0:	f7fd fd98 	bl	80014e4 <HAL_GetTick>
 80039b4:	4602      	mov	r2, r0
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	1ad3      	subs	r3, r2, r3
 80039ba:	2b64      	cmp	r3, #100	; 0x64
 80039bc:	d901      	bls.n	80039c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80039be:	2303      	movs	r3, #3
 80039c0:	e1f3      	b.n	8003daa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039c2:	4b51      	ldr	r3, [pc, #324]	; (8003b08 <HAL_RCC_OscConfig+0x240>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d1f0      	bne.n	80039b0 <HAL_RCC_OscConfig+0xe8>
 80039ce:	e000      	b.n	80039d2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f003 0302 	and.w	r3, r3, #2
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d063      	beq.n	8003aa6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80039de:	4b4a      	ldr	r3, [pc, #296]	; (8003b08 <HAL_RCC_OscConfig+0x240>)
 80039e0:	689b      	ldr	r3, [r3, #8]
 80039e2:	f003 030c 	and.w	r3, r3, #12
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d00b      	beq.n	8003a02 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039ea:	4b47      	ldr	r3, [pc, #284]	; (8003b08 <HAL_RCC_OscConfig+0x240>)
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80039f2:	2b08      	cmp	r3, #8
 80039f4:	d11c      	bne.n	8003a30 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039f6:	4b44      	ldr	r3, [pc, #272]	; (8003b08 <HAL_RCC_OscConfig+0x240>)
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d116      	bne.n	8003a30 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a02:	4b41      	ldr	r3, [pc, #260]	; (8003b08 <HAL_RCC_OscConfig+0x240>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f003 0302 	and.w	r3, r3, #2
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d005      	beq.n	8003a1a <HAL_RCC_OscConfig+0x152>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	68db      	ldr	r3, [r3, #12]
 8003a12:	2b01      	cmp	r3, #1
 8003a14:	d001      	beq.n	8003a1a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	e1c7      	b.n	8003daa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a1a:	4b3b      	ldr	r3, [pc, #236]	; (8003b08 <HAL_RCC_OscConfig+0x240>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	691b      	ldr	r3, [r3, #16]
 8003a26:	00db      	lsls	r3, r3, #3
 8003a28:	4937      	ldr	r1, [pc, #220]	; (8003b08 <HAL_RCC_OscConfig+0x240>)
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a2e:	e03a      	b.n	8003aa6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	68db      	ldr	r3, [r3, #12]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d020      	beq.n	8003a7a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a38:	4b34      	ldr	r3, [pc, #208]	; (8003b0c <HAL_RCC_OscConfig+0x244>)
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a3e:	f7fd fd51 	bl	80014e4 <HAL_GetTick>
 8003a42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a44:	e008      	b.n	8003a58 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a46:	f7fd fd4d 	bl	80014e4 <HAL_GetTick>
 8003a4a:	4602      	mov	r2, r0
 8003a4c:	693b      	ldr	r3, [r7, #16]
 8003a4e:	1ad3      	subs	r3, r2, r3
 8003a50:	2b02      	cmp	r3, #2
 8003a52:	d901      	bls.n	8003a58 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003a54:	2303      	movs	r3, #3
 8003a56:	e1a8      	b.n	8003daa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a58:	4b2b      	ldr	r3, [pc, #172]	; (8003b08 <HAL_RCC_OscConfig+0x240>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f003 0302 	and.w	r3, r3, #2
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d0f0      	beq.n	8003a46 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a64:	4b28      	ldr	r3, [pc, #160]	; (8003b08 <HAL_RCC_OscConfig+0x240>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	691b      	ldr	r3, [r3, #16]
 8003a70:	00db      	lsls	r3, r3, #3
 8003a72:	4925      	ldr	r1, [pc, #148]	; (8003b08 <HAL_RCC_OscConfig+0x240>)
 8003a74:	4313      	orrs	r3, r2
 8003a76:	600b      	str	r3, [r1, #0]
 8003a78:	e015      	b.n	8003aa6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a7a:	4b24      	ldr	r3, [pc, #144]	; (8003b0c <HAL_RCC_OscConfig+0x244>)
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a80:	f7fd fd30 	bl	80014e4 <HAL_GetTick>
 8003a84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a86:	e008      	b.n	8003a9a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a88:	f7fd fd2c 	bl	80014e4 <HAL_GetTick>
 8003a8c:	4602      	mov	r2, r0
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	1ad3      	subs	r3, r2, r3
 8003a92:	2b02      	cmp	r3, #2
 8003a94:	d901      	bls.n	8003a9a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003a96:	2303      	movs	r3, #3
 8003a98:	e187      	b.n	8003daa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a9a:	4b1b      	ldr	r3, [pc, #108]	; (8003b08 <HAL_RCC_OscConfig+0x240>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f003 0302 	and.w	r3, r3, #2
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d1f0      	bne.n	8003a88 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f003 0308 	and.w	r3, r3, #8
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d036      	beq.n	8003b20 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	695b      	ldr	r3, [r3, #20]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d016      	beq.n	8003ae8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003aba:	4b15      	ldr	r3, [pc, #84]	; (8003b10 <HAL_RCC_OscConfig+0x248>)
 8003abc:	2201      	movs	r2, #1
 8003abe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ac0:	f7fd fd10 	bl	80014e4 <HAL_GetTick>
 8003ac4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ac6:	e008      	b.n	8003ada <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ac8:	f7fd fd0c 	bl	80014e4 <HAL_GetTick>
 8003acc:	4602      	mov	r2, r0
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	1ad3      	subs	r3, r2, r3
 8003ad2:	2b02      	cmp	r3, #2
 8003ad4:	d901      	bls.n	8003ada <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003ad6:	2303      	movs	r3, #3
 8003ad8:	e167      	b.n	8003daa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ada:	4b0b      	ldr	r3, [pc, #44]	; (8003b08 <HAL_RCC_OscConfig+0x240>)
 8003adc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ade:	f003 0302 	and.w	r3, r3, #2
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d0f0      	beq.n	8003ac8 <HAL_RCC_OscConfig+0x200>
 8003ae6:	e01b      	b.n	8003b20 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ae8:	4b09      	ldr	r3, [pc, #36]	; (8003b10 <HAL_RCC_OscConfig+0x248>)
 8003aea:	2200      	movs	r2, #0
 8003aec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003aee:	f7fd fcf9 	bl	80014e4 <HAL_GetTick>
 8003af2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003af4:	e00e      	b.n	8003b14 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003af6:	f7fd fcf5 	bl	80014e4 <HAL_GetTick>
 8003afa:	4602      	mov	r2, r0
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	1ad3      	subs	r3, r2, r3
 8003b00:	2b02      	cmp	r3, #2
 8003b02:	d907      	bls.n	8003b14 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003b04:	2303      	movs	r3, #3
 8003b06:	e150      	b.n	8003daa <HAL_RCC_OscConfig+0x4e2>
 8003b08:	40023800 	.word	0x40023800
 8003b0c:	42470000 	.word	0x42470000
 8003b10:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b14:	4b88      	ldr	r3, [pc, #544]	; (8003d38 <HAL_RCC_OscConfig+0x470>)
 8003b16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b18:	f003 0302 	and.w	r3, r3, #2
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d1ea      	bne.n	8003af6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f003 0304 	and.w	r3, r3, #4
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	f000 8097 	beq.w	8003c5c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b2e:	2300      	movs	r3, #0
 8003b30:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b32:	4b81      	ldr	r3, [pc, #516]	; (8003d38 <HAL_RCC_OscConfig+0x470>)
 8003b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d10f      	bne.n	8003b5e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b3e:	2300      	movs	r3, #0
 8003b40:	60bb      	str	r3, [r7, #8]
 8003b42:	4b7d      	ldr	r3, [pc, #500]	; (8003d38 <HAL_RCC_OscConfig+0x470>)
 8003b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b46:	4a7c      	ldr	r2, [pc, #496]	; (8003d38 <HAL_RCC_OscConfig+0x470>)
 8003b48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b4c:	6413      	str	r3, [r2, #64]	; 0x40
 8003b4e:	4b7a      	ldr	r3, [pc, #488]	; (8003d38 <HAL_RCC_OscConfig+0x470>)
 8003b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b56:	60bb      	str	r3, [r7, #8]
 8003b58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b5e:	4b77      	ldr	r3, [pc, #476]	; (8003d3c <HAL_RCC_OscConfig+0x474>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d118      	bne.n	8003b9c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b6a:	4b74      	ldr	r3, [pc, #464]	; (8003d3c <HAL_RCC_OscConfig+0x474>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a73      	ldr	r2, [pc, #460]	; (8003d3c <HAL_RCC_OscConfig+0x474>)
 8003b70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b76:	f7fd fcb5 	bl	80014e4 <HAL_GetTick>
 8003b7a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b7c:	e008      	b.n	8003b90 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b7e:	f7fd fcb1 	bl	80014e4 <HAL_GetTick>
 8003b82:	4602      	mov	r2, r0
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	1ad3      	subs	r3, r2, r3
 8003b88:	2b02      	cmp	r3, #2
 8003b8a:	d901      	bls.n	8003b90 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003b8c:	2303      	movs	r3, #3
 8003b8e:	e10c      	b.n	8003daa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b90:	4b6a      	ldr	r3, [pc, #424]	; (8003d3c <HAL_RCC_OscConfig+0x474>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d0f0      	beq.n	8003b7e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	689b      	ldr	r3, [r3, #8]
 8003ba0:	2b01      	cmp	r3, #1
 8003ba2:	d106      	bne.n	8003bb2 <HAL_RCC_OscConfig+0x2ea>
 8003ba4:	4b64      	ldr	r3, [pc, #400]	; (8003d38 <HAL_RCC_OscConfig+0x470>)
 8003ba6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ba8:	4a63      	ldr	r2, [pc, #396]	; (8003d38 <HAL_RCC_OscConfig+0x470>)
 8003baa:	f043 0301 	orr.w	r3, r3, #1
 8003bae:	6713      	str	r3, [r2, #112]	; 0x70
 8003bb0:	e01c      	b.n	8003bec <HAL_RCC_OscConfig+0x324>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	689b      	ldr	r3, [r3, #8]
 8003bb6:	2b05      	cmp	r3, #5
 8003bb8:	d10c      	bne.n	8003bd4 <HAL_RCC_OscConfig+0x30c>
 8003bba:	4b5f      	ldr	r3, [pc, #380]	; (8003d38 <HAL_RCC_OscConfig+0x470>)
 8003bbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bbe:	4a5e      	ldr	r2, [pc, #376]	; (8003d38 <HAL_RCC_OscConfig+0x470>)
 8003bc0:	f043 0304 	orr.w	r3, r3, #4
 8003bc4:	6713      	str	r3, [r2, #112]	; 0x70
 8003bc6:	4b5c      	ldr	r3, [pc, #368]	; (8003d38 <HAL_RCC_OscConfig+0x470>)
 8003bc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bca:	4a5b      	ldr	r2, [pc, #364]	; (8003d38 <HAL_RCC_OscConfig+0x470>)
 8003bcc:	f043 0301 	orr.w	r3, r3, #1
 8003bd0:	6713      	str	r3, [r2, #112]	; 0x70
 8003bd2:	e00b      	b.n	8003bec <HAL_RCC_OscConfig+0x324>
 8003bd4:	4b58      	ldr	r3, [pc, #352]	; (8003d38 <HAL_RCC_OscConfig+0x470>)
 8003bd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bd8:	4a57      	ldr	r2, [pc, #348]	; (8003d38 <HAL_RCC_OscConfig+0x470>)
 8003bda:	f023 0301 	bic.w	r3, r3, #1
 8003bde:	6713      	str	r3, [r2, #112]	; 0x70
 8003be0:	4b55      	ldr	r3, [pc, #340]	; (8003d38 <HAL_RCC_OscConfig+0x470>)
 8003be2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003be4:	4a54      	ldr	r2, [pc, #336]	; (8003d38 <HAL_RCC_OscConfig+0x470>)
 8003be6:	f023 0304 	bic.w	r3, r3, #4
 8003bea:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	689b      	ldr	r3, [r3, #8]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d015      	beq.n	8003c20 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bf4:	f7fd fc76 	bl	80014e4 <HAL_GetTick>
 8003bf8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bfa:	e00a      	b.n	8003c12 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003bfc:	f7fd fc72 	bl	80014e4 <HAL_GetTick>
 8003c00:	4602      	mov	r2, r0
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	1ad3      	subs	r3, r2, r3
 8003c06:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d901      	bls.n	8003c12 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003c0e:	2303      	movs	r3, #3
 8003c10:	e0cb      	b.n	8003daa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c12:	4b49      	ldr	r3, [pc, #292]	; (8003d38 <HAL_RCC_OscConfig+0x470>)
 8003c14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c16:	f003 0302 	and.w	r3, r3, #2
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d0ee      	beq.n	8003bfc <HAL_RCC_OscConfig+0x334>
 8003c1e:	e014      	b.n	8003c4a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c20:	f7fd fc60 	bl	80014e4 <HAL_GetTick>
 8003c24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c26:	e00a      	b.n	8003c3e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c28:	f7fd fc5c 	bl	80014e4 <HAL_GetTick>
 8003c2c:	4602      	mov	r2, r0
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	1ad3      	subs	r3, r2, r3
 8003c32:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d901      	bls.n	8003c3e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003c3a:	2303      	movs	r3, #3
 8003c3c:	e0b5      	b.n	8003daa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c3e:	4b3e      	ldr	r3, [pc, #248]	; (8003d38 <HAL_RCC_OscConfig+0x470>)
 8003c40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c42:	f003 0302 	and.w	r3, r3, #2
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d1ee      	bne.n	8003c28 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c4a:	7dfb      	ldrb	r3, [r7, #23]
 8003c4c:	2b01      	cmp	r3, #1
 8003c4e:	d105      	bne.n	8003c5c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c50:	4b39      	ldr	r3, [pc, #228]	; (8003d38 <HAL_RCC_OscConfig+0x470>)
 8003c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c54:	4a38      	ldr	r2, [pc, #224]	; (8003d38 <HAL_RCC_OscConfig+0x470>)
 8003c56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c5a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	699b      	ldr	r3, [r3, #24]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	f000 80a1 	beq.w	8003da8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003c66:	4b34      	ldr	r3, [pc, #208]	; (8003d38 <HAL_RCC_OscConfig+0x470>)
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	f003 030c 	and.w	r3, r3, #12
 8003c6e:	2b08      	cmp	r3, #8
 8003c70:	d05c      	beq.n	8003d2c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	699b      	ldr	r3, [r3, #24]
 8003c76:	2b02      	cmp	r3, #2
 8003c78:	d141      	bne.n	8003cfe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c7a:	4b31      	ldr	r3, [pc, #196]	; (8003d40 <HAL_RCC_OscConfig+0x478>)
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c80:	f7fd fc30 	bl	80014e4 <HAL_GetTick>
 8003c84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c86:	e008      	b.n	8003c9a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c88:	f7fd fc2c 	bl	80014e4 <HAL_GetTick>
 8003c8c:	4602      	mov	r2, r0
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	1ad3      	subs	r3, r2, r3
 8003c92:	2b02      	cmp	r3, #2
 8003c94:	d901      	bls.n	8003c9a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003c96:	2303      	movs	r3, #3
 8003c98:	e087      	b.n	8003daa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c9a:	4b27      	ldr	r3, [pc, #156]	; (8003d38 <HAL_RCC_OscConfig+0x470>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d1f0      	bne.n	8003c88 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	69da      	ldr	r2, [r3, #28]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6a1b      	ldr	r3, [r3, #32]
 8003cae:	431a      	orrs	r2, r3
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb4:	019b      	lsls	r3, r3, #6
 8003cb6:	431a      	orrs	r2, r3
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cbc:	085b      	lsrs	r3, r3, #1
 8003cbe:	3b01      	subs	r3, #1
 8003cc0:	041b      	lsls	r3, r3, #16
 8003cc2:	431a      	orrs	r2, r3
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cc8:	061b      	lsls	r3, r3, #24
 8003cca:	491b      	ldr	r1, [pc, #108]	; (8003d38 <HAL_RCC_OscConfig+0x470>)
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003cd0:	4b1b      	ldr	r3, [pc, #108]	; (8003d40 <HAL_RCC_OscConfig+0x478>)
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cd6:	f7fd fc05 	bl	80014e4 <HAL_GetTick>
 8003cda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cdc:	e008      	b.n	8003cf0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cde:	f7fd fc01 	bl	80014e4 <HAL_GetTick>
 8003ce2:	4602      	mov	r2, r0
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	1ad3      	subs	r3, r2, r3
 8003ce8:	2b02      	cmp	r3, #2
 8003cea:	d901      	bls.n	8003cf0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003cec:	2303      	movs	r3, #3
 8003cee:	e05c      	b.n	8003daa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cf0:	4b11      	ldr	r3, [pc, #68]	; (8003d38 <HAL_RCC_OscConfig+0x470>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d0f0      	beq.n	8003cde <HAL_RCC_OscConfig+0x416>
 8003cfc:	e054      	b.n	8003da8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cfe:	4b10      	ldr	r3, [pc, #64]	; (8003d40 <HAL_RCC_OscConfig+0x478>)
 8003d00:	2200      	movs	r2, #0
 8003d02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d04:	f7fd fbee 	bl	80014e4 <HAL_GetTick>
 8003d08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d0a:	e008      	b.n	8003d1e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d0c:	f7fd fbea 	bl	80014e4 <HAL_GetTick>
 8003d10:	4602      	mov	r2, r0
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	1ad3      	subs	r3, r2, r3
 8003d16:	2b02      	cmp	r3, #2
 8003d18:	d901      	bls.n	8003d1e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003d1a:	2303      	movs	r3, #3
 8003d1c:	e045      	b.n	8003daa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d1e:	4b06      	ldr	r3, [pc, #24]	; (8003d38 <HAL_RCC_OscConfig+0x470>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d1f0      	bne.n	8003d0c <HAL_RCC_OscConfig+0x444>
 8003d2a:	e03d      	b.n	8003da8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	699b      	ldr	r3, [r3, #24]
 8003d30:	2b01      	cmp	r3, #1
 8003d32:	d107      	bne.n	8003d44 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003d34:	2301      	movs	r3, #1
 8003d36:	e038      	b.n	8003daa <HAL_RCC_OscConfig+0x4e2>
 8003d38:	40023800 	.word	0x40023800
 8003d3c:	40007000 	.word	0x40007000
 8003d40:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003d44:	4b1b      	ldr	r3, [pc, #108]	; (8003db4 <HAL_RCC_OscConfig+0x4ec>)
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	699b      	ldr	r3, [r3, #24]
 8003d4e:	2b01      	cmp	r3, #1
 8003d50:	d028      	beq.n	8003da4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d5c:	429a      	cmp	r2, r3
 8003d5e:	d121      	bne.n	8003da4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d6a:	429a      	cmp	r2, r3
 8003d6c:	d11a      	bne.n	8003da4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d6e:	68fa      	ldr	r2, [r7, #12]
 8003d70:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003d74:	4013      	ands	r3, r2
 8003d76:	687a      	ldr	r2, [r7, #4]
 8003d78:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003d7a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d111      	bne.n	8003da4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d8a:	085b      	lsrs	r3, r3, #1
 8003d8c:	3b01      	subs	r3, #1
 8003d8e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d90:	429a      	cmp	r2, r3
 8003d92:	d107      	bne.n	8003da4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d9e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003da0:	429a      	cmp	r2, r3
 8003da2:	d001      	beq.n	8003da8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003da4:	2301      	movs	r3, #1
 8003da6:	e000      	b.n	8003daa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003da8:	2300      	movs	r3, #0
}
 8003daa:	4618      	mov	r0, r3
 8003dac:	3718      	adds	r7, #24
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}
 8003db2:	bf00      	nop
 8003db4:	40023800 	.word	0x40023800

08003db8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b084      	sub	sp, #16
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
 8003dc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d101      	bne.n	8003dcc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	e0cc      	b.n	8003f66 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003dcc:	4b68      	ldr	r3, [pc, #416]	; (8003f70 <HAL_RCC_ClockConfig+0x1b8>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f003 0307 	and.w	r3, r3, #7
 8003dd4:	683a      	ldr	r2, [r7, #0]
 8003dd6:	429a      	cmp	r2, r3
 8003dd8:	d90c      	bls.n	8003df4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dda:	4b65      	ldr	r3, [pc, #404]	; (8003f70 <HAL_RCC_ClockConfig+0x1b8>)
 8003ddc:	683a      	ldr	r2, [r7, #0]
 8003dde:	b2d2      	uxtb	r2, r2
 8003de0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003de2:	4b63      	ldr	r3, [pc, #396]	; (8003f70 <HAL_RCC_ClockConfig+0x1b8>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f003 0307 	and.w	r3, r3, #7
 8003dea:	683a      	ldr	r2, [r7, #0]
 8003dec:	429a      	cmp	r2, r3
 8003dee:	d001      	beq.n	8003df4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003df0:	2301      	movs	r3, #1
 8003df2:	e0b8      	b.n	8003f66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f003 0302 	and.w	r3, r3, #2
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d020      	beq.n	8003e42 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f003 0304 	and.w	r3, r3, #4
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d005      	beq.n	8003e18 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e0c:	4b59      	ldr	r3, [pc, #356]	; (8003f74 <HAL_RCC_ClockConfig+0x1bc>)
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	4a58      	ldr	r2, [pc, #352]	; (8003f74 <HAL_RCC_ClockConfig+0x1bc>)
 8003e12:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003e16:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f003 0308 	and.w	r3, r3, #8
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d005      	beq.n	8003e30 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e24:	4b53      	ldr	r3, [pc, #332]	; (8003f74 <HAL_RCC_ClockConfig+0x1bc>)
 8003e26:	689b      	ldr	r3, [r3, #8]
 8003e28:	4a52      	ldr	r2, [pc, #328]	; (8003f74 <HAL_RCC_ClockConfig+0x1bc>)
 8003e2a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003e2e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e30:	4b50      	ldr	r3, [pc, #320]	; (8003f74 <HAL_RCC_ClockConfig+0x1bc>)
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	689b      	ldr	r3, [r3, #8]
 8003e3c:	494d      	ldr	r1, [pc, #308]	; (8003f74 <HAL_RCC_ClockConfig+0x1bc>)
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f003 0301 	and.w	r3, r3, #1
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d044      	beq.n	8003ed8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	2b01      	cmp	r3, #1
 8003e54:	d107      	bne.n	8003e66 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e56:	4b47      	ldr	r3, [pc, #284]	; (8003f74 <HAL_RCC_ClockConfig+0x1bc>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d119      	bne.n	8003e96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e62:	2301      	movs	r3, #1
 8003e64:	e07f      	b.n	8003f66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	2b02      	cmp	r3, #2
 8003e6c:	d003      	beq.n	8003e76 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e72:	2b03      	cmp	r3, #3
 8003e74:	d107      	bne.n	8003e86 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e76:	4b3f      	ldr	r3, [pc, #252]	; (8003f74 <HAL_RCC_ClockConfig+0x1bc>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d109      	bne.n	8003e96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
 8003e84:	e06f      	b.n	8003f66 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e86:	4b3b      	ldr	r3, [pc, #236]	; (8003f74 <HAL_RCC_ClockConfig+0x1bc>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f003 0302 	and.w	r3, r3, #2
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d101      	bne.n	8003e96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e92:	2301      	movs	r3, #1
 8003e94:	e067      	b.n	8003f66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e96:	4b37      	ldr	r3, [pc, #220]	; (8003f74 <HAL_RCC_ClockConfig+0x1bc>)
 8003e98:	689b      	ldr	r3, [r3, #8]
 8003e9a:	f023 0203 	bic.w	r2, r3, #3
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	4934      	ldr	r1, [pc, #208]	; (8003f74 <HAL_RCC_ClockConfig+0x1bc>)
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ea8:	f7fd fb1c 	bl	80014e4 <HAL_GetTick>
 8003eac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003eae:	e00a      	b.n	8003ec6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003eb0:	f7fd fb18 	bl	80014e4 <HAL_GetTick>
 8003eb4:	4602      	mov	r2, r0
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	1ad3      	subs	r3, r2, r3
 8003eba:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d901      	bls.n	8003ec6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003ec2:	2303      	movs	r3, #3
 8003ec4:	e04f      	b.n	8003f66 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ec6:	4b2b      	ldr	r3, [pc, #172]	; (8003f74 <HAL_RCC_ClockConfig+0x1bc>)
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	f003 020c 	and.w	r2, r3, #12
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	009b      	lsls	r3, r3, #2
 8003ed4:	429a      	cmp	r2, r3
 8003ed6:	d1eb      	bne.n	8003eb0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ed8:	4b25      	ldr	r3, [pc, #148]	; (8003f70 <HAL_RCC_ClockConfig+0x1b8>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f003 0307 	and.w	r3, r3, #7
 8003ee0:	683a      	ldr	r2, [r7, #0]
 8003ee2:	429a      	cmp	r2, r3
 8003ee4:	d20c      	bcs.n	8003f00 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ee6:	4b22      	ldr	r3, [pc, #136]	; (8003f70 <HAL_RCC_ClockConfig+0x1b8>)
 8003ee8:	683a      	ldr	r2, [r7, #0]
 8003eea:	b2d2      	uxtb	r2, r2
 8003eec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003eee:	4b20      	ldr	r3, [pc, #128]	; (8003f70 <HAL_RCC_ClockConfig+0x1b8>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f003 0307 	and.w	r3, r3, #7
 8003ef6:	683a      	ldr	r2, [r7, #0]
 8003ef8:	429a      	cmp	r2, r3
 8003efa:	d001      	beq.n	8003f00 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003efc:	2301      	movs	r3, #1
 8003efe:	e032      	b.n	8003f66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f003 0304 	and.w	r3, r3, #4
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d008      	beq.n	8003f1e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f0c:	4b19      	ldr	r3, [pc, #100]	; (8003f74 <HAL_RCC_ClockConfig+0x1bc>)
 8003f0e:	689b      	ldr	r3, [r3, #8]
 8003f10:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	68db      	ldr	r3, [r3, #12]
 8003f18:	4916      	ldr	r1, [pc, #88]	; (8003f74 <HAL_RCC_ClockConfig+0x1bc>)
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f003 0308 	and.w	r3, r3, #8
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d009      	beq.n	8003f3e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f2a:	4b12      	ldr	r3, [pc, #72]	; (8003f74 <HAL_RCC_ClockConfig+0x1bc>)
 8003f2c:	689b      	ldr	r3, [r3, #8]
 8003f2e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	691b      	ldr	r3, [r3, #16]
 8003f36:	00db      	lsls	r3, r3, #3
 8003f38:	490e      	ldr	r1, [pc, #56]	; (8003f74 <HAL_RCC_ClockConfig+0x1bc>)
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003f3e:	f000 f821 	bl	8003f84 <HAL_RCC_GetSysClockFreq>
 8003f42:	4602      	mov	r2, r0
 8003f44:	4b0b      	ldr	r3, [pc, #44]	; (8003f74 <HAL_RCC_ClockConfig+0x1bc>)
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	091b      	lsrs	r3, r3, #4
 8003f4a:	f003 030f 	and.w	r3, r3, #15
 8003f4e:	490a      	ldr	r1, [pc, #40]	; (8003f78 <HAL_RCC_ClockConfig+0x1c0>)
 8003f50:	5ccb      	ldrb	r3, [r1, r3]
 8003f52:	fa22 f303 	lsr.w	r3, r2, r3
 8003f56:	4a09      	ldr	r2, [pc, #36]	; (8003f7c <HAL_RCC_ClockConfig+0x1c4>)
 8003f58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003f5a:	4b09      	ldr	r3, [pc, #36]	; (8003f80 <HAL_RCC_ClockConfig+0x1c8>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4618      	mov	r0, r3
 8003f60:	f7fd fa7c 	bl	800145c <HAL_InitTick>

  return HAL_OK;
 8003f64:	2300      	movs	r3, #0
}
 8003f66:	4618      	mov	r0, r3
 8003f68:	3710      	adds	r7, #16
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bd80      	pop	{r7, pc}
 8003f6e:	bf00      	nop
 8003f70:	40023c00 	.word	0x40023c00
 8003f74:	40023800 	.word	0x40023800
 8003f78:	08007b68 	.word	0x08007b68
 8003f7c:	20000010 	.word	0x20000010
 8003f80:	20000014 	.word	0x20000014

08003f84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f88:	b090      	sub	sp, #64	; 0x40
 8003f8a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	637b      	str	r3, [r7, #52]	; 0x34
 8003f90:	2300      	movs	r3, #0
 8003f92:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f94:	2300      	movs	r3, #0
 8003f96:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003f98:	2300      	movs	r3, #0
 8003f9a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003f9c:	4b59      	ldr	r3, [pc, #356]	; (8004104 <HAL_RCC_GetSysClockFreq+0x180>)
 8003f9e:	689b      	ldr	r3, [r3, #8]
 8003fa0:	f003 030c 	and.w	r3, r3, #12
 8003fa4:	2b08      	cmp	r3, #8
 8003fa6:	d00d      	beq.n	8003fc4 <HAL_RCC_GetSysClockFreq+0x40>
 8003fa8:	2b08      	cmp	r3, #8
 8003faa:	f200 80a1 	bhi.w	80040f0 <HAL_RCC_GetSysClockFreq+0x16c>
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d002      	beq.n	8003fb8 <HAL_RCC_GetSysClockFreq+0x34>
 8003fb2:	2b04      	cmp	r3, #4
 8003fb4:	d003      	beq.n	8003fbe <HAL_RCC_GetSysClockFreq+0x3a>
 8003fb6:	e09b      	b.n	80040f0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003fb8:	4b53      	ldr	r3, [pc, #332]	; (8004108 <HAL_RCC_GetSysClockFreq+0x184>)
 8003fba:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003fbc:	e09b      	b.n	80040f6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003fbe:	4b53      	ldr	r3, [pc, #332]	; (800410c <HAL_RCC_GetSysClockFreq+0x188>)
 8003fc0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003fc2:	e098      	b.n	80040f6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003fc4:	4b4f      	ldr	r3, [pc, #316]	; (8004104 <HAL_RCC_GetSysClockFreq+0x180>)
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003fcc:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003fce:	4b4d      	ldr	r3, [pc, #308]	; (8004104 <HAL_RCC_GetSysClockFreq+0x180>)
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d028      	beq.n	800402c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003fda:	4b4a      	ldr	r3, [pc, #296]	; (8004104 <HAL_RCC_GetSysClockFreq+0x180>)
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	099b      	lsrs	r3, r3, #6
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	623b      	str	r3, [r7, #32]
 8003fe4:	627a      	str	r2, [r7, #36]	; 0x24
 8003fe6:	6a3b      	ldr	r3, [r7, #32]
 8003fe8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003fec:	2100      	movs	r1, #0
 8003fee:	4b47      	ldr	r3, [pc, #284]	; (800410c <HAL_RCC_GetSysClockFreq+0x188>)
 8003ff0:	fb03 f201 	mul.w	r2, r3, r1
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	fb00 f303 	mul.w	r3, r0, r3
 8003ffa:	4413      	add	r3, r2
 8003ffc:	4a43      	ldr	r2, [pc, #268]	; (800410c <HAL_RCC_GetSysClockFreq+0x188>)
 8003ffe:	fba0 1202 	umull	r1, r2, r0, r2
 8004002:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004004:	460a      	mov	r2, r1
 8004006:	62ba      	str	r2, [r7, #40]	; 0x28
 8004008:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800400a:	4413      	add	r3, r2
 800400c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800400e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004010:	2200      	movs	r2, #0
 8004012:	61bb      	str	r3, [r7, #24]
 8004014:	61fa      	str	r2, [r7, #28]
 8004016:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800401a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800401e:	f7fc f8df 	bl	80001e0 <__aeabi_uldivmod>
 8004022:	4602      	mov	r2, r0
 8004024:	460b      	mov	r3, r1
 8004026:	4613      	mov	r3, r2
 8004028:	63fb      	str	r3, [r7, #60]	; 0x3c
 800402a:	e053      	b.n	80040d4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800402c:	4b35      	ldr	r3, [pc, #212]	; (8004104 <HAL_RCC_GetSysClockFreq+0x180>)
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	099b      	lsrs	r3, r3, #6
 8004032:	2200      	movs	r2, #0
 8004034:	613b      	str	r3, [r7, #16]
 8004036:	617a      	str	r2, [r7, #20]
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800403e:	f04f 0b00 	mov.w	fp, #0
 8004042:	4652      	mov	r2, sl
 8004044:	465b      	mov	r3, fp
 8004046:	f04f 0000 	mov.w	r0, #0
 800404a:	f04f 0100 	mov.w	r1, #0
 800404e:	0159      	lsls	r1, r3, #5
 8004050:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004054:	0150      	lsls	r0, r2, #5
 8004056:	4602      	mov	r2, r0
 8004058:	460b      	mov	r3, r1
 800405a:	ebb2 080a 	subs.w	r8, r2, sl
 800405e:	eb63 090b 	sbc.w	r9, r3, fp
 8004062:	f04f 0200 	mov.w	r2, #0
 8004066:	f04f 0300 	mov.w	r3, #0
 800406a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800406e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004072:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004076:	ebb2 0408 	subs.w	r4, r2, r8
 800407a:	eb63 0509 	sbc.w	r5, r3, r9
 800407e:	f04f 0200 	mov.w	r2, #0
 8004082:	f04f 0300 	mov.w	r3, #0
 8004086:	00eb      	lsls	r3, r5, #3
 8004088:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800408c:	00e2      	lsls	r2, r4, #3
 800408e:	4614      	mov	r4, r2
 8004090:	461d      	mov	r5, r3
 8004092:	eb14 030a 	adds.w	r3, r4, sl
 8004096:	603b      	str	r3, [r7, #0]
 8004098:	eb45 030b 	adc.w	r3, r5, fp
 800409c:	607b      	str	r3, [r7, #4]
 800409e:	f04f 0200 	mov.w	r2, #0
 80040a2:	f04f 0300 	mov.w	r3, #0
 80040a6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80040aa:	4629      	mov	r1, r5
 80040ac:	028b      	lsls	r3, r1, #10
 80040ae:	4621      	mov	r1, r4
 80040b0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80040b4:	4621      	mov	r1, r4
 80040b6:	028a      	lsls	r2, r1, #10
 80040b8:	4610      	mov	r0, r2
 80040ba:	4619      	mov	r1, r3
 80040bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040be:	2200      	movs	r2, #0
 80040c0:	60bb      	str	r3, [r7, #8]
 80040c2:	60fa      	str	r2, [r7, #12]
 80040c4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80040c8:	f7fc f88a 	bl	80001e0 <__aeabi_uldivmod>
 80040cc:	4602      	mov	r2, r0
 80040ce:	460b      	mov	r3, r1
 80040d0:	4613      	mov	r3, r2
 80040d2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80040d4:	4b0b      	ldr	r3, [pc, #44]	; (8004104 <HAL_RCC_GetSysClockFreq+0x180>)
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	0c1b      	lsrs	r3, r3, #16
 80040da:	f003 0303 	and.w	r3, r3, #3
 80040de:	3301      	adds	r3, #1
 80040e0:	005b      	lsls	r3, r3, #1
 80040e2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80040e4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80040e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80040ec:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80040ee:	e002      	b.n	80040f6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80040f0:	4b05      	ldr	r3, [pc, #20]	; (8004108 <HAL_RCC_GetSysClockFreq+0x184>)
 80040f2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80040f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80040f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80040f8:	4618      	mov	r0, r3
 80040fa:	3740      	adds	r7, #64	; 0x40
 80040fc:	46bd      	mov	sp, r7
 80040fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004102:	bf00      	nop
 8004104:	40023800 	.word	0x40023800
 8004108:	00f42400 	.word	0x00f42400
 800410c:	017d7840 	.word	0x017d7840

08004110 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004110:	b480      	push	{r7}
 8004112:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004114:	4b03      	ldr	r3, [pc, #12]	; (8004124 <HAL_RCC_GetHCLKFreq+0x14>)
 8004116:	681b      	ldr	r3, [r3, #0]
}
 8004118:	4618      	mov	r0, r3
 800411a:	46bd      	mov	sp, r7
 800411c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004120:	4770      	bx	lr
 8004122:	bf00      	nop
 8004124:	20000010 	.word	0x20000010

08004128 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800412c:	f7ff fff0 	bl	8004110 <HAL_RCC_GetHCLKFreq>
 8004130:	4602      	mov	r2, r0
 8004132:	4b05      	ldr	r3, [pc, #20]	; (8004148 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004134:	689b      	ldr	r3, [r3, #8]
 8004136:	0a9b      	lsrs	r3, r3, #10
 8004138:	f003 0307 	and.w	r3, r3, #7
 800413c:	4903      	ldr	r1, [pc, #12]	; (800414c <HAL_RCC_GetPCLK1Freq+0x24>)
 800413e:	5ccb      	ldrb	r3, [r1, r3]
 8004140:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004144:	4618      	mov	r0, r3
 8004146:	bd80      	pop	{r7, pc}
 8004148:	40023800 	.word	0x40023800
 800414c:	08007b78 	.word	0x08007b78

08004150 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004154:	f7ff ffdc 	bl	8004110 <HAL_RCC_GetHCLKFreq>
 8004158:	4602      	mov	r2, r0
 800415a:	4b05      	ldr	r3, [pc, #20]	; (8004170 <HAL_RCC_GetPCLK2Freq+0x20>)
 800415c:	689b      	ldr	r3, [r3, #8]
 800415e:	0b5b      	lsrs	r3, r3, #13
 8004160:	f003 0307 	and.w	r3, r3, #7
 8004164:	4903      	ldr	r1, [pc, #12]	; (8004174 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004166:	5ccb      	ldrb	r3, [r1, r3]
 8004168:	fa22 f303 	lsr.w	r3, r2, r3
}
 800416c:	4618      	mov	r0, r3
 800416e:	bd80      	pop	{r7, pc}
 8004170:	40023800 	.word	0x40023800
 8004174:	08007b78 	.word	0x08007b78

08004178 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b082      	sub	sp, #8
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d101      	bne.n	800418a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004186:	2301      	movs	r3, #1
 8004188:	e03f      	b.n	800420a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004190:	b2db      	uxtb	r3, r3
 8004192:	2b00      	cmp	r3, #0
 8004194:	d106      	bne.n	80041a4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2200      	movs	r2, #0
 800419a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800419e:	6878      	ldr	r0, [r7, #4]
 80041a0:	f7fd f822 	bl	80011e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2224      	movs	r2, #36	; 0x24
 80041a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	68da      	ldr	r2, [r3, #12]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80041ba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80041bc:	6878      	ldr	r0, [r7, #4]
 80041be:	f000 fbd9 	bl	8004974 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	691a      	ldr	r2, [r3, #16]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80041d0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	695a      	ldr	r2, [r3, #20]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80041e0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	68da      	ldr	r2, [r3, #12]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80041f0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2200      	movs	r2, #0
 80041f6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2220      	movs	r2, #32
 80041fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2220      	movs	r2, #32
 8004204:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004208:	2300      	movs	r3, #0
}
 800420a:	4618      	mov	r0, r3
 800420c:	3708      	adds	r7, #8
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}

08004212 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004212:	b580      	push	{r7, lr}
 8004214:	b08a      	sub	sp, #40	; 0x28
 8004216:	af02      	add	r7, sp, #8
 8004218:	60f8      	str	r0, [r7, #12]
 800421a:	60b9      	str	r1, [r7, #8]
 800421c:	603b      	str	r3, [r7, #0]
 800421e:	4613      	mov	r3, r2
 8004220:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004222:	2300      	movs	r3, #0
 8004224:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800422c:	b2db      	uxtb	r3, r3
 800422e:	2b20      	cmp	r3, #32
 8004230:	d17c      	bne.n	800432c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d002      	beq.n	800423e <HAL_UART_Transmit+0x2c>
 8004238:	88fb      	ldrh	r3, [r7, #6]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d101      	bne.n	8004242 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800423e:	2301      	movs	r3, #1
 8004240:	e075      	b.n	800432e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004248:	2b01      	cmp	r3, #1
 800424a:	d101      	bne.n	8004250 <HAL_UART_Transmit+0x3e>
 800424c:	2302      	movs	r3, #2
 800424e:	e06e      	b.n	800432e <HAL_UART_Transmit+0x11c>
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	2201      	movs	r2, #1
 8004254:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	2200      	movs	r2, #0
 800425c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	2221      	movs	r2, #33	; 0x21
 8004262:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004266:	f7fd f93d 	bl	80014e4 <HAL_GetTick>
 800426a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	88fa      	ldrh	r2, [r7, #6]
 8004270:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	88fa      	ldrh	r2, [r7, #6]
 8004276:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	689b      	ldr	r3, [r3, #8]
 800427c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004280:	d108      	bne.n	8004294 <HAL_UART_Transmit+0x82>
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	691b      	ldr	r3, [r3, #16]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d104      	bne.n	8004294 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800428a:	2300      	movs	r3, #0
 800428c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	61bb      	str	r3, [r7, #24]
 8004292:	e003      	b.n	800429c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004298:	2300      	movs	r3, #0
 800429a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	2200      	movs	r2, #0
 80042a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80042a4:	e02a      	b.n	80042fc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	9300      	str	r3, [sp, #0]
 80042aa:	697b      	ldr	r3, [r7, #20]
 80042ac:	2200      	movs	r2, #0
 80042ae:	2180      	movs	r1, #128	; 0x80
 80042b0:	68f8      	ldr	r0, [r7, #12]
 80042b2:	f000 f9c7 	bl	8004644 <UART_WaitOnFlagUntilTimeout>
 80042b6:	4603      	mov	r3, r0
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d001      	beq.n	80042c0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80042bc:	2303      	movs	r3, #3
 80042be:	e036      	b.n	800432e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80042c0:	69fb      	ldr	r3, [r7, #28]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d10b      	bne.n	80042de <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80042c6:	69bb      	ldr	r3, [r7, #24]
 80042c8:	881b      	ldrh	r3, [r3, #0]
 80042ca:	461a      	mov	r2, r3
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80042d4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80042d6:	69bb      	ldr	r3, [r7, #24]
 80042d8:	3302      	adds	r3, #2
 80042da:	61bb      	str	r3, [r7, #24]
 80042dc:	e007      	b.n	80042ee <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80042de:	69fb      	ldr	r3, [r7, #28]
 80042e0:	781a      	ldrb	r2, [r3, #0]
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80042e8:	69fb      	ldr	r3, [r7, #28]
 80042ea:	3301      	adds	r3, #1
 80042ec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80042f2:	b29b      	uxth	r3, r3
 80042f4:	3b01      	subs	r3, #1
 80042f6:	b29a      	uxth	r2, r3
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004300:	b29b      	uxth	r3, r3
 8004302:	2b00      	cmp	r3, #0
 8004304:	d1cf      	bne.n	80042a6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	9300      	str	r3, [sp, #0]
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	2200      	movs	r2, #0
 800430e:	2140      	movs	r1, #64	; 0x40
 8004310:	68f8      	ldr	r0, [r7, #12]
 8004312:	f000 f997 	bl	8004644 <UART_WaitOnFlagUntilTimeout>
 8004316:	4603      	mov	r3, r0
 8004318:	2b00      	cmp	r3, #0
 800431a:	d001      	beq.n	8004320 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800431c:	2303      	movs	r3, #3
 800431e:	e006      	b.n	800432e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	2220      	movs	r2, #32
 8004324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004328:	2300      	movs	r3, #0
 800432a:	e000      	b.n	800432e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800432c:	2302      	movs	r3, #2
  }
}
 800432e:	4618      	mov	r0, r3
 8004330:	3720      	adds	r7, #32
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}

08004336 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004336:	b580      	push	{r7, lr}
 8004338:	b08c      	sub	sp, #48	; 0x30
 800433a:	af00      	add	r7, sp, #0
 800433c:	60f8      	str	r0, [r7, #12]
 800433e:	60b9      	str	r1, [r7, #8]
 8004340:	4613      	mov	r3, r2
 8004342:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800434a:	b2db      	uxtb	r3, r3
 800434c:	2b20      	cmp	r3, #32
 800434e:	d152      	bne.n	80043f6 <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d002      	beq.n	800435c <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8004356:	88fb      	ldrh	r3, [r7, #6]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d101      	bne.n	8004360 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 800435c:	2301      	movs	r3, #1
 800435e:	e04b      	b.n	80043f8 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004366:	2b01      	cmp	r3, #1
 8004368:	d101      	bne.n	800436e <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 800436a:	2302      	movs	r3, #2
 800436c:	e044      	b.n	80043f8 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	2201      	movs	r2, #1
 8004372:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	2201      	movs	r2, #1
 800437a:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800437c:	88fb      	ldrh	r3, [r7, #6]
 800437e:	461a      	mov	r2, r3
 8004380:	68b9      	ldr	r1, [r7, #8]
 8004382:	68f8      	ldr	r0, [r7, #12]
 8004384:	f000 f9cc 	bl	8004720 <UART_Start_Receive_DMA>
 8004388:	4603      	mov	r3, r0
 800438a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800438e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004392:	2b00      	cmp	r3, #0
 8004394:	d12c      	bne.n	80043f0 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800439a:	2b01      	cmp	r3, #1
 800439c:	d125      	bne.n	80043ea <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 800439e:	2300      	movs	r3, #0
 80043a0:	613b      	str	r3, [r7, #16]
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	613b      	str	r3, [r7, #16]
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	613b      	str	r3, [r7, #16]
 80043b2:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	330c      	adds	r3, #12
 80043ba:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043bc:	69bb      	ldr	r3, [r7, #24]
 80043be:	e853 3f00 	ldrex	r3, [r3]
 80043c2:	617b      	str	r3, [r7, #20]
   return(result);
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	f043 0310 	orr.w	r3, r3, #16
 80043ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	330c      	adds	r3, #12
 80043d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80043d4:	627a      	str	r2, [r7, #36]	; 0x24
 80043d6:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043d8:	6a39      	ldr	r1, [r7, #32]
 80043da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043dc:	e841 2300 	strex	r3, r2, [r1]
 80043e0:	61fb      	str	r3, [r7, #28]
   return(result);
 80043e2:	69fb      	ldr	r3, [r7, #28]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d1e5      	bne.n	80043b4 <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 80043e8:	e002      	b.n	80043f0 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80043ea:	2301      	movs	r3, #1
 80043ec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 80043f0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80043f4:	e000      	b.n	80043f8 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 80043f6:	2302      	movs	r3, #2
  }
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	3730      	adds	r7, #48	; 0x30
 80043fc:	46bd      	mov	sp, r7
 80043fe:	bd80      	pop	{r7, pc}

08004400 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004400:	b480      	push	{r7}
 8004402:	b083      	sub	sp, #12
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004408:	bf00      	nop
 800440a:	370c      	adds	r7, #12
 800440c:	46bd      	mov	sp, r7
 800440e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004412:	4770      	bx	lr

08004414 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004414:	b480      	push	{r7}
 8004416:	b083      	sub	sp, #12
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800441c:	bf00      	nop
 800441e:	370c      	adds	r7, #12
 8004420:	46bd      	mov	sp, r7
 8004422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004426:	4770      	bx	lr

08004428 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004428:	b480      	push	{r7}
 800442a:	b083      	sub	sp, #12
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004430:	bf00      	nop
 8004432:	370c      	adds	r7, #12
 8004434:	46bd      	mov	sp, r7
 8004436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443a:	4770      	bx	lr

0800443c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800443c:	b480      	push	{r7}
 800443e:	b083      	sub	sp, #12
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
 8004444:	460b      	mov	r3, r1
 8004446:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004448:	bf00      	nop
 800444a:	370c      	adds	r7, #12
 800444c:	46bd      	mov	sp, r7
 800444e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004452:	4770      	bx	lr

08004454 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b09c      	sub	sp, #112	; 0x70
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004460:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800446c:	2b00      	cmp	r3, #0
 800446e:	d172      	bne.n	8004556 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8004470:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004472:	2200      	movs	r2, #0
 8004474:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004476:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	330c      	adds	r3, #12
 800447c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800447e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004480:	e853 3f00 	ldrex	r3, [r3]
 8004484:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004486:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004488:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800448c:	66bb      	str	r3, [r7, #104]	; 0x68
 800448e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	330c      	adds	r3, #12
 8004494:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004496:	65ba      	str	r2, [r7, #88]	; 0x58
 8004498:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800449a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800449c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800449e:	e841 2300 	strex	r3, r2, [r1]
 80044a2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80044a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d1e5      	bne.n	8004476 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	3314      	adds	r3, #20
 80044b0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044b4:	e853 3f00 	ldrex	r3, [r3]
 80044b8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80044ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044bc:	f023 0301 	bic.w	r3, r3, #1
 80044c0:	667b      	str	r3, [r7, #100]	; 0x64
 80044c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	3314      	adds	r3, #20
 80044c8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80044ca:	647a      	str	r2, [r7, #68]	; 0x44
 80044cc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044ce:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80044d0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80044d2:	e841 2300 	strex	r3, r2, [r1]
 80044d6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80044d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d1e5      	bne.n	80044aa <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80044de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	3314      	adds	r3, #20
 80044e4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e8:	e853 3f00 	ldrex	r3, [r3]
 80044ec:	623b      	str	r3, [r7, #32]
   return(result);
 80044ee:	6a3b      	ldr	r3, [r7, #32]
 80044f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044f4:	663b      	str	r3, [r7, #96]	; 0x60
 80044f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	3314      	adds	r3, #20
 80044fc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80044fe:	633a      	str	r2, [r7, #48]	; 0x30
 8004500:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004502:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004504:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004506:	e841 2300 	strex	r3, r2, [r1]
 800450a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800450c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800450e:	2b00      	cmp	r3, #0
 8004510:	d1e5      	bne.n	80044de <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004512:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004514:	2220      	movs	r2, #32
 8004516:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800451a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800451c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800451e:	2b01      	cmp	r3, #1
 8004520:	d119      	bne.n	8004556 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004522:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	330c      	adds	r3, #12
 8004528:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	e853 3f00 	ldrex	r3, [r3]
 8004530:	60fb      	str	r3, [r7, #12]
   return(result);
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	f023 0310 	bic.w	r3, r3, #16
 8004538:	65fb      	str	r3, [r7, #92]	; 0x5c
 800453a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	330c      	adds	r3, #12
 8004540:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004542:	61fa      	str	r2, [r7, #28]
 8004544:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004546:	69b9      	ldr	r1, [r7, #24]
 8004548:	69fa      	ldr	r2, [r7, #28]
 800454a:	e841 2300 	strex	r3, r2, [r1]
 800454e:	617b      	str	r3, [r7, #20]
   return(result);
 8004550:	697b      	ldr	r3, [r7, #20]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d1e5      	bne.n	8004522 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004556:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800455a:	2b01      	cmp	r3, #1
 800455c:	d106      	bne.n	800456c <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800455e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004560:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004562:	4619      	mov	r1, r3
 8004564:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004566:	f7ff ff69 	bl	800443c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800456a:	e002      	b.n	8004572 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800456c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800456e:	f7ff ff47 	bl	8004400 <HAL_UART_RxCpltCallback>
}
 8004572:	bf00      	nop
 8004574:	3770      	adds	r7, #112	; 0x70
 8004576:	46bd      	mov	sp, r7
 8004578:	bd80      	pop	{r7, pc}

0800457a <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800457a:	b580      	push	{r7, lr}
 800457c:	b084      	sub	sp, #16
 800457e:	af00      	add	r7, sp, #0
 8004580:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004586:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800458c:	2b01      	cmp	r3, #1
 800458e:	d108      	bne.n	80045a2 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004594:	085b      	lsrs	r3, r3, #1
 8004596:	b29b      	uxth	r3, r3
 8004598:	4619      	mov	r1, r3
 800459a:	68f8      	ldr	r0, [r7, #12]
 800459c:	f7ff ff4e 	bl	800443c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80045a0:	e002      	b.n	80045a8 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80045a2:	68f8      	ldr	r0, [r7, #12]
 80045a4:	f7ff ff36 	bl	8004414 <HAL_UART_RxHalfCpltCallback>
}
 80045a8:	bf00      	nop
 80045aa:	3710      	adds	r7, #16
 80045ac:	46bd      	mov	sp, r7
 80045ae:	bd80      	pop	{r7, pc}

080045b0 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b084      	sub	sp, #16
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80045b8:	2300      	movs	r3, #0
 80045ba:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045c0:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80045c2:	68bb      	ldr	r3, [r7, #8]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	695b      	ldr	r3, [r3, #20]
 80045c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045cc:	2b80      	cmp	r3, #128	; 0x80
 80045ce:	bf0c      	ite	eq
 80045d0:	2301      	moveq	r3, #1
 80045d2:	2300      	movne	r3, #0
 80045d4:	b2db      	uxtb	r3, r3
 80045d6:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045de:	b2db      	uxtb	r3, r3
 80045e0:	2b21      	cmp	r3, #33	; 0x21
 80045e2:	d108      	bne.n	80045f6 <UART_DMAError+0x46>
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d005      	beq.n	80045f6 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80045ea:	68bb      	ldr	r3, [r7, #8]
 80045ec:	2200      	movs	r2, #0
 80045ee:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80045f0:	68b8      	ldr	r0, [r7, #8]
 80045f2:	f000 f933 	bl	800485c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	695b      	ldr	r3, [r3, #20]
 80045fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004600:	2b40      	cmp	r3, #64	; 0x40
 8004602:	bf0c      	ite	eq
 8004604:	2301      	moveq	r3, #1
 8004606:	2300      	movne	r3, #0
 8004608:	b2db      	uxtb	r3, r3
 800460a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004612:	b2db      	uxtb	r3, r3
 8004614:	2b22      	cmp	r3, #34	; 0x22
 8004616:	d108      	bne.n	800462a <UART_DMAError+0x7a>
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d005      	beq.n	800462a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	2200      	movs	r2, #0
 8004622:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8004624:	68b8      	ldr	r0, [r7, #8]
 8004626:	f000 f941 	bl	80048ac <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800462e:	f043 0210 	orr.w	r2, r3, #16
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004636:	68b8      	ldr	r0, [r7, #8]
 8004638:	f7ff fef6 	bl	8004428 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800463c:	bf00      	nop
 800463e:	3710      	adds	r7, #16
 8004640:	46bd      	mov	sp, r7
 8004642:	bd80      	pop	{r7, pc}

08004644 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b090      	sub	sp, #64	; 0x40
 8004648:	af00      	add	r7, sp, #0
 800464a:	60f8      	str	r0, [r7, #12]
 800464c:	60b9      	str	r1, [r7, #8]
 800464e:	603b      	str	r3, [r7, #0]
 8004650:	4613      	mov	r3, r2
 8004652:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004654:	e050      	b.n	80046f8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004656:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004658:	f1b3 3fff 	cmp.w	r3, #4294967295
 800465c:	d04c      	beq.n	80046f8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800465e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004660:	2b00      	cmp	r3, #0
 8004662:	d007      	beq.n	8004674 <UART_WaitOnFlagUntilTimeout+0x30>
 8004664:	f7fc ff3e 	bl	80014e4 <HAL_GetTick>
 8004668:	4602      	mov	r2, r0
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	1ad3      	subs	r3, r2, r3
 800466e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004670:	429a      	cmp	r2, r3
 8004672:	d241      	bcs.n	80046f8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	330c      	adds	r3, #12
 800467a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800467c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800467e:	e853 3f00 	ldrex	r3, [r3]
 8004682:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004686:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800468a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	330c      	adds	r3, #12
 8004692:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004694:	637a      	str	r2, [r7, #52]	; 0x34
 8004696:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004698:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800469a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800469c:	e841 2300 	strex	r3, r2, [r1]
 80046a0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80046a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d1e5      	bne.n	8004674 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	3314      	adds	r3, #20
 80046ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046b0:	697b      	ldr	r3, [r7, #20]
 80046b2:	e853 3f00 	ldrex	r3, [r3]
 80046b6:	613b      	str	r3, [r7, #16]
   return(result);
 80046b8:	693b      	ldr	r3, [r7, #16]
 80046ba:	f023 0301 	bic.w	r3, r3, #1
 80046be:	63bb      	str	r3, [r7, #56]	; 0x38
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	3314      	adds	r3, #20
 80046c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80046c8:	623a      	str	r2, [r7, #32]
 80046ca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046cc:	69f9      	ldr	r1, [r7, #28]
 80046ce:	6a3a      	ldr	r2, [r7, #32]
 80046d0:	e841 2300 	strex	r3, r2, [r1]
 80046d4:	61bb      	str	r3, [r7, #24]
   return(result);
 80046d6:	69bb      	ldr	r3, [r7, #24]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d1e5      	bne.n	80046a8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	2220      	movs	r2, #32
 80046e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	2220      	movs	r2, #32
 80046e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	2200      	movs	r2, #0
 80046f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80046f4:	2303      	movs	r3, #3
 80046f6:	e00f      	b.n	8004718 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	681a      	ldr	r2, [r3, #0]
 80046fe:	68bb      	ldr	r3, [r7, #8]
 8004700:	4013      	ands	r3, r2
 8004702:	68ba      	ldr	r2, [r7, #8]
 8004704:	429a      	cmp	r2, r3
 8004706:	bf0c      	ite	eq
 8004708:	2301      	moveq	r3, #1
 800470a:	2300      	movne	r3, #0
 800470c:	b2db      	uxtb	r3, r3
 800470e:	461a      	mov	r2, r3
 8004710:	79fb      	ldrb	r3, [r7, #7]
 8004712:	429a      	cmp	r2, r3
 8004714:	d09f      	beq.n	8004656 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004716:	2300      	movs	r3, #0
}
 8004718:	4618      	mov	r0, r3
 800471a:	3740      	adds	r7, #64	; 0x40
 800471c:	46bd      	mov	sp, r7
 800471e:	bd80      	pop	{r7, pc}

08004720 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b098      	sub	sp, #96	; 0x60
 8004724:	af00      	add	r7, sp, #0
 8004726:	60f8      	str	r0, [r7, #12]
 8004728:	60b9      	str	r1, [r7, #8]
 800472a:	4613      	mov	r3, r2
 800472c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800472e:	68ba      	ldr	r2, [r7, #8]
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	88fa      	ldrh	r2, [r7, #6]
 8004738:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	2200      	movs	r2, #0
 800473e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	2222      	movs	r2, #34	; 0x22
 8004744:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800474c:	4a40      	ldr	r2, [pc, #256]	; (8004850 <UART_Start_Receive_DMA+0x130>)
 800474e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004754:	4a3f      	ldr	r2, [pc, #252]	; (8004854 <UART_Start_Receive_DMA+0x134>)
 8004756:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800475c:	4a3e      	ldr	r2, [pc, #248]	; (8004858 <UART_Start_Receive_DMA+0x138>)
 800475e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004764:	2200      	movs	r2, #0
 8004766:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8004768:	f107 0308 	add.w	r3, r7, #8
 800476c:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	3304      	adds	r3, #4
 8004778:	4619      	mov	r1, r3
 800477a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800477c:	681a      	ldr	r2, [r3, #0]
 800477e:	88fb      	ldrh	r3, [r7, #6]
 8004780:	f7fd fc82 	bl	8002088 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004784:	2300      	movs	r3, #0
 8004786:	613b      	str	r3, [r7, #16]
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	613b      	str	r3, [r7, #16]
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	613b      	str	r3, [r7, #16]
 8004798:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	2200      	movs	r2, #0
 800479e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	691b      	ldr	r3, [r3, #16]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d019      	beq.n	80047de <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	330c      	adds	r3, #12
 80047b0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047b4:	e853 3f00 	ldrex	r3, [r3]
 80047b8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80047ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047c0:	65bb      	str	r3, [r7, #88]	; 0x58
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	330c      	adds	r3, #12
 80047c8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80047ca:	64fa      	str	r2, [r7, #76]	; 0x4c
 80047cc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047ce:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80047d0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80047d2:	e841 2300 	strex	r3, r2, [r1]
 80047d6:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80047d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d1e5      	bne.n	80047aa <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	3314      	adds	r3, #20
 80047e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047e8:	e853 3f00 	ldrex	r3, [r3]
 80047ec:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80047ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047f0:	f043 0301 	orr.w	r3, r3, #1
 80047f4:	657b      	str	r3, [r7, #84]	; 0x54
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	3314      	adds	r3, #20
 80047fc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80047fe:	63ba      	str	r2, [r7, #56]	; 0x38
 8004800:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004802:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004804:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004806:	e841 2300 	strex	r3, r2, [r1]
 800480a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800480c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800480e:	2b00      	cmp	r3, #0
 8004810:	d1e5      	bne.n	80047de <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	3314      	adds	r3, #20
 8004818:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800481a:	69bb      	ldr	r3, [r7, #24]
 800481c:	e853 3f00 	ldrex	r3, [r3]
 8004820:	617b      	str	r3, [r7, #20]
   return(result);
 8004822:	697b      	ldr	r3, [r7, #20]
 8004824:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004828:	653b      	str	r3, [r7, #80]	; 0x50
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	3314      	adds	r3, #20
 8004830:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004832:	627a      	str	r2, [r7, #36]	; 0x24
 8004834:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004836:	6a39      	ldr	r1, [r7, #32]
 8004838:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800483a:	e841 2300 	strex	r3, r2, [r1]
 800483e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004840:	69fb      	ldr	r3, [r7, #28]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d1e5      	bne.n	8004812 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8004846:	2300      	movs	r3, #0
}
 8004848:	4618      	mov	r0, r3
 800484a:	3760      	adds	r7, #96	; 0x60
 800484c:	46bd      	mov	sp, r7
 800484e:	bd80      	pop	{r7, pc}
 8004850:	08004455 	.word	0x08004455
 8004854:	0800457b 	.word	0x0800457b
 8004858:	080045b1 	.word	0x080045b1

0800485c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800485c:	b480      	push	{r7}
 800485e:	b089      	sub	sp, #36	; 0x24
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	330c      	adds	r3, #12
 800486a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	e853 3f00 	ldrex	r3, [r3]
 8004872:	60bb      	str	r3, [r7, #8]
   return(result);
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800487a:	61fb      	str	r3, [r7, #28]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	330c      	adds	r3, #12
 8004882:	69fa      	ldr	r2, [r7, #28]
 8004884:	61ba      	str	r2, [r7, #24]
 8004886:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004888:	6979      	ldr	r1, [r7, #20]
 800488a:	69ba      	ldr	r2, [r7, #24]
 800488c:	e841 2300 	strex	r3, r2, [r1]
 8004890:	613b      	str	r3, [r7, #16]
   return(result);
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d1e5      	bne.n	8004864 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2220      	movs	r2, #32
 800489c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80048a0:	bf00      	nop
 80048a2:	3724      	adds	r7, #36	; 0x24
 80048a4:	46bd      	mov	sp, r7
 80048a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048aa:	4770      	bx	lr

080048ac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80048ac:	b480      	push	{r7}
 80048ae:	b095      	sub	sp, #84	; 0x54
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	330c      	adds	r3, #12
 80048ba:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048be:	e853 3f00 	ldrex	r3, [r3]
 80048c2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80048c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048c6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80048ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	330c      	adds	r3, #12
 80048d2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80048d4:	643a      	str	r2, [r7, #64]	; 0x40
 80048d6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048d8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80048da:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80048dc:	e841 2300 	strex	r3, r2, [r1]
 80048e0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80048e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d1e5      	bne.n	80048b4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	3314      	adds	r3, #20
 80048ee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048f0:	6a3b      	ldr	r3, [r7, #32]
 80048f2:	e853 3f00 	ldrex	r3, [r3]
 80048f6:	61fb      	str	r3, [r7, #28]
   return(result);
 80048f8:	69fb      	ldr	r3, [r7, #28]
 80048fa:	f023 0301 	bic.w	r3, r3, #1
 80048fe:	64bb      	str	r3, [r7, #72]	; 0x48
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	3314      	adds	r3, #20
 8004906:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004908:	62fa      	str	r2, [r7, #44]	; 0x2c
 800490a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800490c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800490e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004910:	e841 2300 	strex	r3, r2, [r1]
 8004914:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004918:	2b00      	cmp	r3, #0
 800491a:	d1e5      	bne.n	80048e8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004920:	2b01      	cmp	r3, #1
 8004922:	d119      	bne.n	8004958 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	330c      	adds	r3, #12
 800492a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	e853 3f00 	ldrex	r3, [r3]
 8004932:	60bb      	str	r3, [r7, #8]
   return(result);
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	f023 0310 	bic.w	r3, r3, #16
 800493a:	647b      	str	r3, [r7, #68]	; 0x44
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	330c      	adds	r3, #12
 8004942:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004944:	61ba      	str	r2, [r7, #24]
 8004946:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004948:	6979      	ldr	r1, [r7, #20]
 800494a:	69ba      	ldr	r2, [r7, #24]
 800494c:	e841 2300 	strex	r3, r2, [r1]
 8004950:	613b      	str	r3, [r7, #16]
   return(result);
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d1e5      	bne.n	8004924 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2220      	movs	r2, #32
 800495c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2200      	movs	r2, #0
 8004964:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004966:	bf00      	nop
 8004968:	3754      	adds	r7, #84	; 0x54
 800496a:	46bd      	mov	sp, r7
 800496c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004970:	4770      	bx	lr
	...

08004974 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004974:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004978:	b0c0      	sub	sp, #256	; 0x100
 800497a:	af00      	add	r7, sp, #0
 800497c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004980:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	691b      	ldr	r3, [r3, #16]
 8004988:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800498c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004990:	68d9      	ldr	r1, [r3, #12]
 8004992:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004996:	681a      	ldr	r2, [r3, #0]
 8004998:	ea40 0301 	orr.w	r3, r0, r1
 800499c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800499e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049a2:	689a      	ldr	r2, [r3, #8]
 80049a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049a8:	691b      	ldr	r3, [r3, #16]
 80049aa:	431a      	orrs	r2, r3
 80049ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049b0:	695b      	ldr	r3, [r3, #20]
 80049b2:	431a      	orrs	r2, r3
 80049b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049b8:	69db      	ldr	r3, [r3, #28]
 80049ba:	4313      	orrs	r3, r2
 80049bc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80049c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	68db      	ldr	r3, [r3, #12]
 80049c8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80049cc:	f021 010c 	bic.w	r1, r1, #12
 80049d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049d4:	681a      	ldr	r2, [r3, #0]
 80049d6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80049da:	430b      	orrs	r3, r1
 80049dc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80049de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	695b      	ldr	r3, [r3, #20]
 80049e6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80049ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049ee:	6999      	ldr	r1, [r3, #24]
 80049f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049f4:	681a      	ldr	r2, [r3, #0]
 80049f6:	ea40 0301 	orr.w	r3, r0, r1
 80049fa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80049fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a00:	681a      	ldr	r2, [r3, #0]
 8004a02:	4b8f      	ldr	r3, [pc, #572]	; (8004c40 <UART_SetConfig+0x2cc>)
 8004a04:	429a      	cmp	r2, r3
 8004a06:	d005      	beq.n	8004a14 <UART_SetConfig+0xa0>
 8004a08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a0c:	681a      	ldr	r2, [r3, #0]
 8004a0e:	4b8d      	ldr	r3, [pc, #564]	; (8004c44 <UART_SetConfig+0x2d0>)
 8004a10:	429a      	cmp	r2, r3
 8004a12:	d104      	bne.n	8004a1e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004a14:	f7ff fb9c 	bl	8004150 <HAL_RCC_GetPCLK2Freq>
 8004a18:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004a1c:	e003      	b.n	8004a26 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004a1e:	f7ff fb83 	bl	8004128 <HAL_RCC_GetPCLK1Freq>
 8004a22:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a2a:	69db      	ldr	r3, [r3, #28]
 8004a2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a30:	f040 810c 	bne.w	8004c4c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004a34:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a38:	2200      	movs	r2, #0
 8004a3a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004a3e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004a42:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004a46:	4622      	mov	r2, r4
 8004a48:	462b      	mov	r3, r5
 8004a4a:	1891      	adds	r1, r2, r2
 8004a4c:	65b9      	str	r1, [r7, #88]	; 0x58
 8004a4e:	415b      	adcs	r3, r3
 8004a50:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004a52:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004a56:	4621      	mov	r1, r4
 8004a58:	eb12 0801 	adds.w	r8, r2, r1
 8004a5c:	4629      	mov	r1, r5
 8004a5e:	eb43 0901 	adc.w	r9, r3, r1
 8004a62:	f04f 0200 	mov.w	r2, #0
 8004a66:	f04f 0300 	mov.w	r3, #0
 8004a6a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004a6e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004a72:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004a76:	4690      	mov	r8, r2
 8004a78:	4699      	mov	r9, r3
 8004a7a:	4623      	mov	r3, r4
 8004a7c:	eb18 0303 	adds.w	r3, r8, r3
 8004a80:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004a84:	462b      	mov	r3, r5
 8004a86:	eb49 0303 	adc.w	r3, r9, r3
 8004a8a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004a8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	2200      	movs	r2, #0
 8004a96:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004a9a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004a9e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004aa2:	460b      	mov	r3, r1
 8004aa4:	18db      	adds	r3, r3, r3
 8004aa6:	653b      	str	r3, [r7, #80]	; 0x50
 8004aa8:	4613      	mov	r3, r2
 8004aaa:	eb42 0303 	adc.w	r3, r2, r3
 8004aae:	657b      	str	r3, [r7, #84]	; 0x54
 8004ab0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004ab4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004ab8:	f7fb fb92 	bl	80001e0 <__aeabi_uldivmod>
 8004abc:	4602      	mov	r2, r0
 8004abe:	460b      	mov	r3, r1
 8004ac0:	4b61      	ldr	r3, [pc, #388]	; (8004c48 <UART_SetConfig+0x2d4>)
 8004ac2:	fba3 2302 	umull	r2, r3, r3, r2
 8004ac6:	095b      	lsrs	r3, r3, #5
 8004ac8:	011c      	lsls	r4, r3, #4
 8004aca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ace:	2200      	movs	r2, #0
 8004ad0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004ad4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004ad8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004adc:	4642      	mov	r2, r8
 8004ade:	464b      	mov	r3, r9
 8004ae0:	1891      	adds	r1, r2, r2
 8004ae2:	64b9      	str	r1, [r7, #72]	; 0x48
 8004ae4:	415b      	adcs	r3, r3
 8004ae6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ae8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004aec:	4641      	mov	r1, r8
 8004aee:	eb12 0a01 	adds.w	sl, r2, r1
 8004af2:	4649      	mov	r1, r9
 8004af4:	eb43 0b01 	adc.w	fp, r3, r1
 8004af8:	f04f 0200 	mov.w	r2, #0
 8004afc:	f04f 0300 	mov.w	r3, #0
 8004b00:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004b04:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004b08:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004b0c:	4692      	mov	sl, r2
 8004b0e:	469b      	mov	fp, r3
 8004b10:	4643      	mov	r3, r8
 8004b12:	eb1a 0303 	adds.w	r3, sl, r3
 8004b16:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004b1a:	464b      	mov	r3, r9
 8004b1c:	eb4b 0303 	adc.w	r3, fp, r3
 8004b20:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004b24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b28:	685b      	ldr	r3, [r3, #4]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004b30:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004b34:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004b38:	460b      	mov	r3, r1
 8004b3a:	18db      	adds	r3, r3, r3
 8004b3c:	643b      	str	r3, [r7, #64]	; 0x40
 8004b3e:	4613      	mov	r3, r2
 8004b40:	eb42 0303 	adc.w	r3, r2, r3
 8004b44:	647b      	str	r3, [r7, #68]	; 0x44
 8004b46:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004b4a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004b4e:	f7fb fb47 	bl	80001e0 <__aeabi_uldivmod>
 8004b52:	4602      	mov	r2, r0
 8004b54:	460b      	mov	r3, r1
 8004b56:	4611      	mov	r1, r2
 8004b58:	4b3b      	ldr	r3, [pc, #236]	; (8004c48 <UART_SetConfig+0x2d4>)
 8004b5a:	fba3 2301 	umull	r2, r3, r3, r1
 8004b5e:	095b      	lsrs	r3, r3, #5
 8004b60:	2264      	movs	r2, #100	; 0x64
 8004b62:	fb02 f303 	mul.w	r3, r2, r3
 8004b66:	1acb      	subs	r3, r1, r3
 8004b68:	00db      	lsls	r3, r3, #3
 8004b6a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004b6e:	4b36      	ldr	r3, [pc, #216]	; (8004c48 <UART_SetConfig+0x2d4>)
 8004b70:	fba3 2302 	umull	r2, r3, r3, r2
 8004b74:	095b      	lsrs	r3, r3, #5
 8004b76:	005b      	lsls	r3, r3, #1
 8004b78:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004b7c:	441c      	add	r4, r3
 8004b7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b82:	2200      	movs	r2, #0
 8004b84:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004b88:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004b8c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004b90:	4642      	mov	r2, r8
 8004b92:	464b      	mov	r3, r9
 8004b94:	1891      	adds	r1, r2, r2
 8004b96:	63b9      	str	r1, [r7, #56]	; 0x38
 8004b98:	415b      	adcs	r3, r3
 8004b9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b9c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004ba0:	4641      	mov	r1, r8
 8004ba2:	1851      	adds	r1, r2, r1
 8004ba4:	6339      	str	r1, [r7, #48]	; 0x30
 8004ba6:	4649      	mov	r1, r9
 8004ba8:	414b      	adcs	r3, r1
 8004baa:	637b      	str	r3, [r7, #52]	; 0x34
 8004bac:	f04f 0200 	mov.w	r2, #0
 8004bb0:	f04f 0300 	mov.w	r3, #0
 8004bb4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004bb8:	4659      	mov	r1, fp
 8004bba:	00cb      	lsls	r3, r1, #3
 8004bbc:	4651      	mov	r1, sl
 8004bbe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004bc2:	4651      	mov	r1, sl
 8004bc4:	00ca      	lsls	r2, r1, #3
 8004bc6:	4610      	mov	r0, r2
 8004bc8:	4619      	mov	r1, r3
 8004bca:	4603      	mov	r3, r0
 8004bcc:	4642      	mov	r2, r8
 8004bce:	189b      	adds	r3, r3, r2
 8004bd0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004bd4:	464b      	mov	r3, r9
 8004bd6:	460a      	mov	r2, r1
 8004bd8:	eb42 0303 	adc.w	r3, r2, r3
 8004bdc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004be0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	2200      	movs	r2, #0
 8004be8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004bec:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004bf0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004bf4:	460b      	mov	r3, r1
 8004bf6:	18db      	adds	r3, r3, r3
 8004bf8:	62bb      	str	r3, [r7, #40]	; 0x28
 8004bfa:	4613      	mov	r3, r2
 8004bfc:	eb42 0303 	adc.w	r3, r2, r3
 8004c00:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c02:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004c06:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004c0a:	f7fb fae9 	bl	80001e0 <__aeabi_uldivmod>
 8004c0e:	4602      	mov	r2, r0
 8004c10:	460b      	mov	r3, r1
 8004c12:	4b0d      	ldr	r3, [pc, #52]	; (8004c48 <UART_SetConfig+0x2d4>)
 8004c14:	fba3 1302 	umull	r1, r3, r3, r2
 8004c18:	095b      	lsrs	r3, r3, #5
 8004c1a:	2164      	movs	r1, #100	; 0x64
 8004c1c:	fb01 f303 	mul.w	r3, r1, r3
 8004c20:	1ad3      	subs	r3, r2, r3
 8004c22:	00db      	lsls	r3, r3, #3
 8004c24:	3332      	adds	r3, #50	; 0x32
 8004c26:	4a08      	ldr	r2, [pc, #32]	; (8004c48 <UART_SetConfig+0x2d4>)
 8004c28:	fba2 2303 	umull	r2, r3, r2, r3
 8004c2c:	095b      	lsrs	r3, r3, #5
 8004c2e:	f003 0207 	and.w	r2, r3, #7
 8004c32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4422      	add	r2, r4
 8004c3a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004c3c:	e106      	b.n	8004e4c <UART_SetConfig+0x4d8>
 8004c3e:	bf00      	nop
 8004c40:	40011000 	.word	0x40011000
 8004c44:	40011400 	.word	0x40011400
 8004c48:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004c4c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c50:	2200      	movs	r2, #0
 8004c52:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004c56:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004c5a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004c5e:	4642      	mov	r2, r8
 8004c60:	464b      	mov	r3, r9
 8004c62:	1891      	adds	r1, r2, r2
 8004c64:	6239      	str	r1, [r7, #32]
 8004c66:	415b      	adcs	r3, r3
 8004c68:	627b      	str	r3, [r7, #36]	; 0x24
 8004c6a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004c6e:	4641      	mov	r1, r8
 8004c70:	1854      	adds	r4, r2, r1
 8004c72:	4649      	mov	r1, r9
 8004c74:	eb43 0501 	adc.w	r5, r3, r1
 8004c78:	f04f 0200 	mov.w	r2, #0
 8004c7c:	f04f 0300 	mov.w	r3, #0
 8004c80:	00eb      	lsls	r3, r5, #3
 8004c82:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004c86:	00e2      	lsls	r2, r4, #3
 8004c88:	4614      	mov	r4, r2
 8004c8a:	461d      	mov	r5, r3
 8004c8c:	4643      	mov	r3, r8
 8004c8e:	18e3      	adds	r3, r4, r3
 8004c90:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004c94:	464b      	mov	r3, r9
 8004c96:	eb45 0303 	adc.w	r3, r5, r3
 8004c9a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004c9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ca2:	685b      	ldr	r3, [r3, #4]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004caa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004cae:	f04f 0200 	mov.w	r2, #0
 8004cb2:	f04f 0300 	mov.w	r3, #0
 8004cb6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004cba:	4629      	mov	r1, r5
 8004cbc:	008b      	lsls	r3, r1, #2
 8004cbe:	4621      	mov	r1, r4
 8004cc0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004cc4:	4621      	mov	r1, r4
 8004cc6:	008a      	lsls	r2, r1, #2
 8004cc8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004ccc:	f7fb fa88 	bl	80001e0 <__aeabi_uldivmod>
 8004cd0:	4602      	mov	r2, r0
 8004cd2:	460b      	mov	r3, r1
 8004cd4:	4b60      	ldr	r3, [pc, #384]	; (8004e58 <UART_SetConfig+0x4e4>)
 8004cd6:	fba3 2302 	umull	r2, r3, r3, r2
 8004cda:	095b      	lsrs	r3, r3, #5
 8004cdc:	011c      	lsls	r4, r3, #4
 8004cde:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004ce8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004cec:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004cf0:	4642      	mov	r2, r8
 8004cf2:	464b      	mov	r3, r9
 8004cf4:	1891      	adds	r1, r2, r2
 8004cf6:	61b9      	str	r1, [r7, #24]
 8004cf8:	415b      	adcs	r3, r3
 8004cfa:	61fb      	str	r3, [r7, #28]
 8004cfc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d00:	4641      	mov	r1, r8
 8004d02:	1851      	adds	r1, r2, r1
 8004d04:	6139      	str	r1, [r7, #16]
 8004d06:	4649      	mov	r1, r9
 8004d08:	414b      	adcs	r3, r1
 8004d0a:	617b      	str	r3, [r7, #20]
 8004d0c:	f04f 0200 	mov.w	r2, #0
 8004d10:	f04f 0300 	mov.w	r3, #0
 8004d14:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004d18:	4659      	mov	r1, fp
 8004d1a:	00cb      	lsls	r3, r1, #3
 8004d1c:	4651      	mov	r1, sl
 8004d1e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d22:	4651      	mov	r1, sl
 8004d24:	00ca      	lsls	r2, r1, #3
 8004d26:	4610      	mov	r0, r2
 8004d28:	4619      	mov	r1, r3
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	4642      	mov	r2, r8
 8004d2e:	189b      	adds	r3, r3, r2
 8004d30:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004d34:	464b      	mov	r3, r9
 8004d36:	460a      	mov	r2, r1
 8004d38:	eb42 0303 	adc.w	r3, r2, r3
 8004d3c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004d40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	2200      	movs	r2, #0
 8004d48:	67bb      	str	r3, [r7, #120]	; 0x78
 8004d4a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004d4c:	f04f 0200 	mov.w	r2, #0
 8004d50:	f04f 0300 	mov.w	r3, #0
 8004d54:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004d58:	4649      	mov	r1, r9
 8004d5a:	008b      	lsls	r3, r1, #2
 8004d5c:	4641      	mov	r1, r8
 8004d5e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d62:	4641      	mov	r1, r8
 8004d64:	008a      	lsls	r2, r1, #2
 8004d66:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004d6a:	f7fb fa39 	bl	80001e0 <__aeabi_uldivmod>
 8004d6e:	4602      	mov	r2, r0
 8004d70:	460b      	mov	r3, r1
 8004d72:	4611      	mov	r1, r2
 8004d74:	4b38      	ldr	r3, [pc, #224]	; (8004e58 <UART_SetConfig+0x4e4>)
 8004d76:	fba3 2301 	umull	r2, r3, r3, r1
 8004d7a:	095b      	lsrs	r3, r3, #5
 8004d7c:	2264      	movs	r2, #100	; 0x64
 8004d7e:	fb02 f303 	mul.w	r3, r2, r3
 8004d82:	1acb      	subs	r3, r1, r3
 8004d84:	011b      	lsls	r3, r3, #4
 8004d86:	3332      	adds	r3, #50	; 0x32
 8004d88:	4a33      	ldr	r2, [pc, #204]	; (8004e58 <UART_SetConfig+0x4e4>)
 8004d8a:	fba2 2303 	umull	r2, r3, r2, r3
 8004d8e:	095b      	lsrs	r3, r3, #5
 8004d90:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d94:	441c      	add	r4, r3
 8004d96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	673b      	str	r3, [r7, #112]	; 0x70
 8004d9e:	677a      	str	r2, [r7, #116]	; 0x74
 8004da0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004da4:	4642      	mov	r2, r8
 8004da6:	464b      	mov	r3, r9
 8004da8:	1891      	adds	r1, r2, r2
 8004daa:	60b9      	str	r1, [r7, #8]
 8004dac:	415b      	adcs	r3, r3
 8004dae:	60fb      	str	r3, [r7, #12]
 8004db0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004db4:	4641      	mov	r1, r8
 8004db6:	1851      	adds	r1, r2, r1
 8004db8:	6039      	str	r1, [r7, #0]
 8004dba:	4649      	mov	r1, r9
 8004dbc:	414b      	adcs	r3, r1
 8004dbe:	607b      	str	r3, [r7, #4]
 8004dc0:	f04f 0200 	mov.w	r2, #0
 8004dc4:	f04f 0300 	mov.w	r3, #0
 8004dc8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004dcc:	4659      	mov	r1, fp
 8004dce:	00cb      	lsls	r3, r1, #3
 8004dd0:	4651      	mov	r1, sl
 8004dd2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004dd6:	4651      	mov	r1, sl
 8004dd8:	00ca      	lsls	r2, r1, #3
 8004dda:	4610      	mov	r0, r2
 8004ddc:	4619      	mov	r1, r3
 8004dde:	4603      	mov	r3, r0
 8004de0:	4642      	mov	r2, r8
 8004de2:	189b      	adds	r3, r3, r2
 8004de4:	66bb      	str	r3, [r7, #104]	; 0x68
 8004de6:	464b      	mov	r3, r9
 8004de8:	460a      	mov	r2, r1
 8004dea:	eb42 0303 	adc.w	r3, r2, r3
 8004dee:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004df0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	2200      	movs	r2, #0
 8004df8:	663b      	str	r3, [r7, #96]	; 0x60
 8004dfa:	667a      	str	r2, [r7, #100]	; 0x64
 8004dfc:	f04f 0200 	mov.w	r2, #0
 8004e00:	f04f 0300 	mov.w	r3, #0
 8004e04:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004e08:	4649      	mov	r1, r9
 8004e0a:	008b      	lsls	r3, r1, #2
 8004e0c:	4641      	mov	r1, r8
 8004e0e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e12:	4641      	mov	r1, r8
 8004e14:	008a      	lsls	r2, r1, #2
 8004e16:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004e1a:	f7fb f9e1 	bl	80001e0 <__aeabi_uldivmod>
 8004e1e:	4602      	mov	r2, r0
 8004e20:	460b      	mov	r3, r1
 8004e22:	4b0d      	ldr	r3, [pc, #52]	; (8004e58 <UART_SetConfig+0x4e4>)
 8004e24:	fba3 1302 	umull	r1, r3, r3, r2
 8004e28:	095b      	lsrs	r3, r3, #5
 8004e2a:	2164      	movs	r1, #100	; 0x64
 8004e2c:	fb01 f303 	mul.w	r3, r1, r3
 8004e30:	1ad3      	subs	r3, r2, r3
 8004e32:	011b      	lsls	r3, r3, #4
 8004e34:	3332      	adds	r3, #50	; 0x32
 8004e36:	4a08      	ldr	r2, [pc, #32]	; (8004e58 <UART_SetConfig+0x4e4>)
 8004e38:	fba2 2303 	umull	r2, r3, r2, r3
 8004e3c:	095b      	lsrs	r3, r3, #5
 8004e3e:	f003 020f 	and.w	r2, r3, #15
 8004e42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4422      	add	r2, r4
 8004e4a:	609a      	str	r2, [r3, #8]
}
 8004e4c:	bf00      	nop
 8004e4e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004e52:	46bd      	mov	sp, r7
 8004e54:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e58:	51eb851f 	.word	0x51eb851f

08004e5c <__NVIC_SetPriority>:
{
 8004e5c:	b480      	push	{r7}
 8004e5e:	b083      	sub	sp, #12
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	4603      	mov	r3, r0
 8004e64:	6039      	str	r1, [r7, #0]
 8004e66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004e68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	db0a      	blt.n	8004e86 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	b2da      	uxtb	r2, r3
 8004e74:	490c      	ldr	r1, [pc, #48]	; (8004ea8 <__NVIC_SetPriority+0x4c>)
 8004e76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e7a:	0112      	lsls	r2, r2, #4
 8004e7c:	b2d2      	uxtb	r2, r2
 8004e7e:	440b      	add	r3, r1
 8004e80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004e84:	e00a      	b.n	8004e9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	b2da      	uxtb	r2, r3
 8004e8a:	4908      	ldr	r1, [pc, #32]	; (8004eac <__NVIC_SetPriority+0x50>)
 8004e8c:	79fb      	ldrb	r3, [r7, #7]
 8004e8e:	f003 030f 	and.w	r3, r3, #15
 8004e92:	3b04      	subs	r3, #4
 8004e94:	0112      	lsls	r2, r2, #4
 8004e96:	b2d2      	uxtb	r2, r2
 8004e98:	440b      	add	r3, r1
 8004e9a:	761a      	strb	r2, [r3, #24]
}
 8004e9c:	bf00      	nop
 8004e9e:	370c      	adds	r7, #12
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea6:	4770      	bx	lr
 8004ea8:	e000e100 	.word	0xe000e100
 8004eac:	e000ed00 	.word	0xe000ed00

08004eb0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004eb4:	2100      	movs	r1, #0
 8004eb6:	f06f 0004 	mvn.w	r0, #4
 8004eba:	f7ff ffcf 	bl	8004e5c <__NVIC_SetPriority>
#endif
}
 8004ebe:	bf00      	nop
 8004ec0:	bd80      	pop	{r7, pc}
	...

08004ec4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004ec4:	b480      	push	{r7}
 8004ec6:	b083      	sub	sp, #12
 8004ec8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004eca:	f3ef 8305 	mrs	r3, IPSR
 8004ece:	603b      	str	r3, [r7, #0]
  return(result);
 8004ed0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d003      	beq.n	8004ede <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004ed6:	f06f 0305 	mvn.w	r3, #5
 8004eda:	607b      	str	r3, [r7, #4]
 8004edc:	e00c      	b.n	8004ef8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004ede:	4b0a      	ldr	r3, [pc, #40]	; (8004f08 <osKernelInitialize+0x44>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d105      	bne.n	8004ef2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004ee6:	4b08      	ldr	r3, [pc, #32]	; (8004f08 <osKernelInitialize+0x44>)
 8004ee8:	2201      	movs	r2, #1
 8004eea:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004eec:	2300      	movs	r3, #0
 8004eee:	607b      	str	r3, [r7, #4]
 8004ef0:	e002      	b.n	8004ef8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004ef2:	f04f 33ff 	mov.w	r3, #4294967295
 8004ef6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004ef8:	687b      	ldr	r3, [r7, #4]
}
 8004efa:	4618      	mov	r0, r3
 8004efc:	370c      	adds	r7, #12
 8004efe:	46bd      	mov	sp, r7
 8004f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f04:	4770      	bx	lr
 8004f06:	bf00      	nop
 8004f08:	200001f4 	.word	0x200001f4

08004f0c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b082      	sub	sp, #8
 8004f10:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004f12:	f3ef 8305 	mrs	r3, IPSR
 8004f16:	603b      	str	r3, [r7, #0]
  return(result);
 8004f18:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d003      	beq.n	8004f26 <osKernelStart+0x1a>
    stat = osErrorISR;
 8004f1e:	f06f 0305 	mvn.w	r3, #5
 8004f22:	607b      	str	r3, [r7, #4]
 8004f24:	e010      	b.n	8004f48 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004f26:	4b0b      	ldr	r3, [pc, #44]	; (8004f54 <osKernelStart+0x48>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	2b01      	cmp	r3, #1
 8004f2c:	d109      	bne.n	8004f42 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004f2e:	f7ff ffbf 	bl	8004eb0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004f32:	4b08      	ldr	r3, [pc, #32]	; (8004f54 <osKernelStart+0x48>)
 8004f34:	2202      	movs	r2, #2
 8004f36:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004f38:	f001 f866 	bl	8006008 <vTaskStartScheduler>
      stat = osOK;
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	607b      	str	r3, [r7, #4]
 8004f40:	e002      	b.n	8004f48 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004f42:	f04f 33ff 	mov.w	r3, #4294967295
 8004f46:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004f48:	687b      	ldr	r3, [r7, #4]
}
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	3708      	adds	r7, #8
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bd80      	pop	{r7, pc}
 8004f52:	bf00      	nop
 8004f54:	200001f4 	.word	0x200001f4

08004f58 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b08e      	sub	sp, #56	; 0x38
 8004f5c:	af04      	add	r7, sp, #16
 8004f5e:	60f8      	str	r0, [r7, #12]
 8004f60:	60b9      	str	r1, [r7, #8]
 8004f62:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004f64:	2300      	movs	r3, #0
 8004f66:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004f68:	f3ef 8305 	mrs	r3, IPSR
 8004f6c:	617b      	str	r3, [r7, #20]
  return(result);
 8004f6e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d17e      	bne.n	8005072 <osThreadNew+0x11a>
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d07b      	beq.n	8005072 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004f7a:	2380      	movs	r3, #128	; 0x80
 8004f7c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004f7e:	2318      	movs	r3, #24
 8004f80:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004f82:	2300      	movs	r3, #0
 8004f84:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8004f86:	f04f 33ff 	mov.w	r3, #4294967295
 8004f8a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d045      	beq.n	800501e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d002      	beq.n	8004fa0 <osThreadNew+0x48>
        name = attr->name;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	699b      	ldr	r3, [r3, #24]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d002      	beq.n	8004fae <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	699b      	ldr	r3, [r3, #24]
 8004fac:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004fae:	69fb      	ldr	r3, [r7, #28]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d008      	beq.n	8004fc6 <osThreadNew+0x6e>
 8004fb4:	69fb      	ldr	r3, [r7, #28]
 8004fb6:	2b38      	cmp	r3, #56	; 0x38
 8004fb8:	d805      	bhi.n	8004fc6 <osThreadNew+0x6e>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	f003 0301 	and.w	r3, r3, #1
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d001      	beq.n	8004fca <osThreadNew+0x72>
        return (NULL);
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	e054      	b.n	8005074 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	695b      	ldr	r3, [r3, #20]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d003      	beq.n	8004fda <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	695b      	ldr	r3, [r3, #20]
 8004fd6:	089b      	lsrs	r3, r3, #2
 8004fd8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	689b      	ldr	r3, [r3, #8]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d00e      	beq.n	8005000 <osThreadNew+0xa8>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	68db      	ldr	r3, [r3, #12]
 8004fe6:	2b5b      	cmp	r3, #91	; 0x5b
 8004fe8:	d90a      	bls.n	8005000 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d006      	beq.n	8005000 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	695b      	ldr	r3, [r3, #20]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d002      	beq.n	8005000 <osThreadNew+0xa8>
        mem = 1;
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	61bb      	str	r3, [r7, #24]
 8004ffe:	e010      	b.n	8005022 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	689b      	ldr	r3, [r3, #8]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d10c      	bne.n	8005022 <osThreadNew+0xca>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	68db      	ldr	r3, [r3, #12]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d108      	bne.n	8005022 <osThreadNew+0xca>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	691b      	ldr	r3, [r3, #16]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d104      	bne.n	8005022 <osThreadNew+0xca>
          mem = 0;
 8005018:	2300      	movs	r3, #0
 800501a:	61bb      	str	r3, [r7, #24]
 800501c:	e001      	b.n	8005022 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800501e:	2300      	movs	r3, #0
 8005020:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005022:	69bb      	ldr	r3, [r7, #24]
 8005024:	2b01      	cmp	r3, #1
 8005026:	d110      	bne.n	800504a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800502c:	687a      	ldr	r2, [r7, #4]
 800502e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005030:	9202      	str	r2, [sp, #8]
 8005032:	9301      	str	r3, [sp, #4]
 8005034:	69fb      	ldr	r3, [r7, #28]
 8005036:	9300      	str	r3, [sp, #0]
 8005038:	68bb      	ldr	r3, [r7, #8]
 800503a:	6a3a      	ldr	r2, [r7, #32]
 800503c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800503e:	68f8      	ldr	r0, [r7, #12]
 8005040:	f000 fe0c 	bl	8005c5c <xTaskCreateStatic>
 8005044:	4603      	mov	r3, r0
 8005046:	613b      	str	r3, [r7, #16]
 8005048:	e013      	b.n	8005072 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800504a:	69bb      	ldr	r3, [r7, #24]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d110      	bne.n	8005072 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005050:	6a3b      	ldr	r3, [r7, #32]
 8005052:	b29a      	uxth	r2, r3
 8005054:	f107 0310 	add.w	r3, r7, #16
 8005058:	9301      	str	r3, [sp, #4]
 800505a:	69fb      	ldr	r3, [r7, #28]
 800505c:	9300      	str	r3, [sp, #0]
 800505e:	68bb      	ldr	r3, [r7, #8]
 8005060:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005062:	68f8      	ldr	r0, [r7, #12]
 8005064:	f000 fe57 	bl	8005d16 <xTaskCreate>
 8005068:	4603      	mov	r3, r0
 800506a:	2b01      	cmp	r3, #1
 800506c:	d001      	beq.n	8005072 <osThreadNew+0x11a>
            hTask = NULL;
 800506e:	2300      	movs	r3, #0
 8005070:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005072:	693b      	ldr	r3, [r7, #16]
}
 8005074:	4618      	mov	r0, r3
 8005076:	3728      	adds	r7, #40	; 0x28
 8005078:	46bd      	mov	sp, r7
 800507a:	bd80      	pop	{r7, pc}

0800507c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800507c:	b580      	push	{r7, lr}
 800507e:	b084      	sub	sp, #16
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005084:	f3ef 8305 	mrs	r3, IPSR
 8005088:	60bb      	str	r3, [r7, #8]
  return(result);
 800508a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800508c:	2b00      	cmp	r3, #0
 800508e:	d003      	beq.n	8005098 <osDelay+0x1c>
    stat = osErrorISR;
 8005090:	f06f 0305 	mvn.w	r3, #5
 8005094:	60fb      	str	r3, [r7, #12]
 8005096:	e007      	b.n	80050a8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005098:	2300      	movs	r3, #0
 800509a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d002      	beq.n	80050a8 <osDelay+0x2c>
      vTaskDelay(ticks);
 80050a2:	6878      	ldr	r0, [r7, #4]
 80050a4:	f000 ff7c 	bl	8005fa0 <vTaskDelay>
    }
  }

  return (stat);
 80050a8:	68fb      	ldr	r3, [r7, #12]
}
 80050aa:	4618      	mov	r0, r3
 80050ac:	3710      	adds	r7, #16
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bd80      	pop	{r7, pc}
	...

080050b4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80050b4:	b480      	push	{r7}
 80050b6:	b085      	sub	sp, #20
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	60f8      	str	r0, [r7, #12]
 80050bc:	60b9      	str	r1, [r7, #8]
 80050be:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	4a07      	ldr	r2, [pc, #28]	; (80050e0 <vApplicationGetIdleTaskMemory+0x2c>)
 80050c4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80050c6:	68bb      	ldr	r3, [r7, #8]
 80050c8:	4a06      	ldr	r2, [pc, #24]	; (80050e4 <vApplicationGetIdleTaskMemory+0x30>)
 80050ca:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2280      	movs	r2, #128	; 0x80
 80050d0:	601a      	str	r2, [r3, #0]
}
 80050d2:	bf00      	nop
 80050d4:	3714      	adds	r7, #20
 80050d6:	46bd      	mov	sp, r7
 80050d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050dc:	4770      	bx	lr
 80050de:	bf00      	nop
 80050e0:	200001f8 	.word	0x200001f8
 80050e4:	20000254 	.word	0x20000254

080050e8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80050e8:	b480      	push	{r7}
 80050ea:	b085      	sub	sp, #20
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	60f8      	str	r0, [r7, #12]
 80050f0:	60b9      	str	r1, [r7, #8]
 80050f2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	4a07      	ldr	r2, [pc, #28]	; (8005114 <vApplicationGetTimerTaskMemory+0x2c>)
 80050f8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80050fa:	68bb      	ldr	r3, [r7, #8]
 80050fc:	4a06      	ldr	r2, [pc, #24]	; (8005118 <vApplicationGetTimerTaskMemory+0x30>)
 80050fe:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005106:	601a      	str	r2, [r3, #0]
}
 8005108:	bf00      	nop
 800510a:	3714      	adds	r7, #20
 800510c:	46bd      	mov	sp, r7
 800510e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005112:	4770      	bx	lr
 8005114:	20000454 	.word	0x20000454
 8005118:	200004b0 	.word	0x200004b0

0800511c <vListInitialise>:
 800511c:	b480      	push	{r7}
 800511e:	b083      	sub	sp, #12
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	f103 0208 	add.w	r2, r3, #8
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	605a      	str	r2, [r3, #4]
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	f04f 32ff 	mov.w	r2, #4294967295
 8005134:	609a      	str	r2, [r3, #8]
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	f103 0208 	add.w	r2, r3, #8
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	60da      	str	r2, [r3, #12]
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	f103 0208 	add.w	r2, r3, #8
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	611a      	str	r2, [r3, #16]
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2200      	movs	r2, #0
 800514e:	601a      	str	r2, [r3, #0]
 8005150:	bf00      	nop
 8005152:	370c      	adds	r7, #12
 8005154:	46bd      	mov	sp, r7
 8005156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515a:	4770      	bx	lr

0800515c <vListInitialiseItem>:
 800515c:	b480      	push	{r7}
 800515e:	b083      	sub	sp, #12
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2200      	movs	r2, #0
 8005168:	611a      	str	r2, [r3, #16]
 800516a:	bf00      	nop
 800516c:	370c      	adds	r7, #12
 800516e:	46bd      	mov	sp, r7
 8005170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005174:	4770      	bx	lr

08005176 <vListInsertEnd>:
 8005176:	b480      	push	{r7}
 8005178:	b085      	sub	sp, #20
 800517a:	af00      	add	r7, sp, #0
 800517c:	6078      	str	r0, [r7, #4]
 800517e:	6039      	str	r1, [r7, #0]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	685b      	ldr	r3, [r3, #4]
 8005184:	60fb      	str	r3, [r7, #12]
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	68fa      	ldr	r2, [r7, #12]
 800518a:	605a      	str	r2, [r3, #4]
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	689a      	ldr	r2, [r3, #8]
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	609a      	str	r2, [r3, #8]
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	689b      	ldr	r3, [r3, #8]
 8005198:	683a      	ldr	r2, [r7, #0]
 800519a:	605a      	str	r2, [r3, #4]
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	683a      	ldr	r2, [r7, #0]
 80051a0:	609a      	str	r2, [r3, #8]
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	687a      	ldr	r2, [r7, #4]
 80051a6:	611a      	str	r2, [r3, #16]
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	1c5a      	adds	r2, r3, #1
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	601a      	str	r2, [r3, #0]
 80051b2:	bf00      	nop
 80051b4:	3714      	adds	r7, #20
 80051b6:	46bd      	mov	sp, r7
 80051b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051bc:	4770      	bx	lr

080051be <vListInsert>:
 80051be:	b480      	push	{r7}
 80051c0:	b085      	sub	sp, #20
 80051c2:	af00      	add	r7, sp, #0
 80051c4:	6078      	str	r0, [r7, #4]
 80051c6:	6039      	str	r1, [r7, #0]
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	60bb      	str	r3, [r7, #8]
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051d4:	d103      	bne.n	80051de <vListInsert+0x20>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	691b      	ldr	r3, [r3, #16]
 80051da:	60fb      	str	r3, [r7, #12]
 80051dc:	e00c      	b.n	80051f8 <vListInsert+0x3a>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	3308      	adds	r3, #8
 80051e2:	60fb      	str	r3, [r7, #12]
 80051e4:	e002      	b.n	80051ec <vListInsert+0x2e>
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	685b      	ldr	r3, [r3, #4]
 80051ea:	60fb      	str	r3, [r7, #12]
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	68ba      	ldr	r2, [r7, #8]
 80051f4:	429a      	cmp	r2, r3
 80051f6:	d2f6      	bcs.n	80051e6 <vListInsert+0x28>
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	685a      	ldr	r2, [r3, #4]
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	605a      	str	r2, [r3, #4]
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	685b      	ldr	r3, [r3, #4]
 8005204:	683a      	ldr	r2, [r7, #0]
 8005206:	609a      	str	r2, [r3, #8]
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	68fa      	ldr	r2, [r7, #12]
 800520c:	609a      	str	r2, [r3, #8]
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	683a      	ldr	r2, [r7, #0]
 8005212:	605a      	str	r2, [r3, #4]
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	687a      	ldr	r2, [r7, #4]
 8005218:	611a      	str	r2, [r3, #16]
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	1c5a      	adds	r2, r3, #1
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	601a      	str	r2, [r3, #0]
 8005224:	bf00      	nop
 8005226:	3714      	adds	r7, #20
 8005228:	46bd      	mov	sp, r7
 800522a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522e:	4770      	bx	lr

08005230 <uxListRemove>:
 8005230:	b480      	push	{r7}
 8005232:	b085      	sub	sp, #20
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	691b      	ldr	r3, [r3, #16]
 800523c:	60fb      	str	r3, [r7, #12]
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	685b      	ldr	r3, [r3, #4]
 8005242:	687a      	ldr	r2, [r7, #4]
 8005244:	6892      	ldr	r2, [r2, #8]
 8005246:	609a      	str	r2, [r3, #8]
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	689b      	ldr	r3, [r3, #8]
 800524c:	687a      	ldr	r2, [r7, #4]
 800524e:	6852      	ldr	r2, [r2, #4]
 8005250:	605a      	str	r2, [r3, #4]
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	685b      	ldr	r3, [r3, #4]
 8005256:	687a      	ldr	r2, [r7, #4]
 8005258:	429a      	cmp	r2, r3
 800525a:	d103      	bne.n	8005264 <uxListRemove+0x34>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	689a      	ldr	r2, [r3, #8]
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	605a      	str	r2, [r3, #4]
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2200      	movs	r2, #0
 8005268:	611a      	str	r2, [r3, #16]
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	1e5a      	subs	r2, r3, #1
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	601a      	str	r2, [r3, #0]
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4618      	mov	r0, r3
 800527a:	3714      	adds	r7, #20
 800527c:	46bd      	mov	sp, r7
 800527e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005282:	4770      	bx	lr

08005284 <xQueueGenericReset>:
 8005284:	b580      	push	{r7, lr}
 8005286:	b084      	sub	sp, #16
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
 800528c:	6039      	str	r1, [r7, #0]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	60fb      	str	r3, [r7, #12]
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d10a      	bne.n	80052ae <xQueueGenericReset+0x2a>
 8005298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800529c:	f383 8811 	msr	BASEPRI, r3
 80052a0:	f3bf 8f6f 	isb	sy
 80052a4:	f3bf 8f4f 	dsb	sy
 80052a8:	60bb      	str	r3, [r7, #8]
 80052aa:	bf00      	nop
 80052ac:	e7fe      	b.n	80052ac <xQueueGenericReset+0x28>
 80052ae:	f002 f851 	bl	8007354 <vPortEnterCritical>
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681a      	ldr	r2, [r3, #0]
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052ba:	68f9      	ldr	r1, [r7, #12]
 80052bc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80052be:	fb01 f303 	mul.w	r3, r1, r3
 80052c2:	441a      	add	r2, r3
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	609a      	str	r2, [r3, #8]
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	2200      	movs	r2, #0
 80052cc:	639a      	str	r2, [r3, #56]	; 0x38
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681a      	ldr	r2, [r3, #0]
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	605a      	str	r2, [r3, #4]
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681a      	ldr	r2, [r3, #0]
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052de:	3b01      	subs	r3, #1
 80052e0:	68f9      	ldr	r1, [r7, #12]
 80052e2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80052e4:	fb01 f303 	mul.w	r3, r1, r3
 80052e8:	441a      	add	r2, r3
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	60da      	str	r2, [r3, #12]
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	22ff      	movs	r2, #255	; 0xff
 80052f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	22ff      	movs	r2, #255	; 0xff
 80052fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d114      	bne.n	800532e <xQueueGenericReset+0xaa>
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	691b      	ldr	r3, [r3, #16]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d01a      	beq.n	8005342 <xQueueGenericReset+0xbe>
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	3310      	adds	r3, #16
 8005310:	4618      	mov	r0, r3
 8005312:	f001 f903 	bl	800651c <xTaskRemoveFromEventList>
 8005316:	4603      	mov	r3, r0
 8005318:	2b00      	cmp	r3, #0
 800531a:	d012      	beq.n	8005342 <xQueueGenericReset+0xbe>
 800531c:	4b0c      	ldr	r3, [pc, #48]	; (8005350 <xQueueGenericReset+0xcc>)
 800531e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005322:	601a      	str	r2, [r3, #0]
 8005324:	f3bf 8f4f 	dsb	sy
 8005328:	f3bf 8f6f 	isb	sy
 800532c:	e009      	b.n	8005342 <xQueueGenericReset+0xbe>
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	3310      	adds	r3, #16
 8005332:	4618      	mov	r0, r3
 8005334:	f7ff fef2 	bl	800511c <vListInitialise>
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	3324      	adds	r3, #36	; 0x24
 800533c:	4618      	mov	r0, r3
 800533e:	f7ff feed 	bl	800511c <vListInitialise>
 8005342:	f002 f837 	bl	80073b4 <vPortExitCritical>
 8005346:	2301      	movs	r3, #1
 8005348:	4618      	mov	r0, r3
 800534a:	3710      	adds	r7, #16
 800534c:	46bd      	mov	sp, r7
 800534e:	bd80      	pop	{r7, pc}
 8005350:	e000ed04 	.word	0xe000ed04

08005354 <xQueueGenericCreateStatic>:
 8005354:	b580      	push	{r7, lr}
 8005356:	b08e      	sub	sp, #56	; 0x38
 8005358:	af02      	add	r7, sp, #8
 800535a:	60f8      	str	r0, [r7, #12]
 800535c:	60b9      	str	r1, [r7, #8]
 800535e:	607a      	str	r2, [r7, #4]
 8005360:	603b      	str	r3, [r7, #0]
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d10a      	bne.n	800537e <xQueueGenericCreateStatic+0x2a>
 8005368:	f04f 0350 	mov.w	r3, #80	; 0x50
 800536c:	f383 8811 	msr	BASEPRI, r3
 8005370:	f3bf 8f6f 	isb	sy
 8005374:	f3bf 8f4f 	dsb	sy
 8005378:	62bb      	str	r3, [r7, #40]	; 0x28
 800537a:	bf00      	nop
 800537c:	e7fe      	b.n	800537c <xQueueGenericCreateStatic+0x28>
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d10a      	bne.n	800539a <xQueueGenericCreateStatic+0x46>
 8005384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005388:	f383 8811 	msr	BASEPRI, r3
 800538c:	f3bf 8f6f 	isb	sy
 8005390:	f3bf 8f4f 	dsb	sy
 8005394:	627b      	str	r3, [r7, #36]	; 0x24
 8005396:	bf00      	nop
 8005398:	e7fe      	b.n	8005398 <xQueueGenericCreateStatic+0x44>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d002      	beq.n	80053a6 <xQueueGenericCreateStatic+0x52>
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d001      	beq.n	80053aa <xQueueGenericCreateStatic+0x56>
 80053a6:	2301      	movs	r3, #1
 80053a8:	e000      	b.n	80053ac <xQueueGenericCreateStatic+0x58>
 80053aa:	2300      	movs	r3, #0
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d10a      	bne.n	80053c6 <xQueueGenericCreateStatic+0x72>
 80053b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053b4:	f383 8811 	msr	BASEPRI, r3
 80053b8:	f3bf 8f6f 	isb	sy
 80053bc:	f3bf 8f4f 	dsb	sy
 80053c0:	623b      	str	r3, [r7, #32]
 80053c2:	bf00      	nop
 80053c4:	e7fe      	b.n	80053c4 <xQueueGenericCreateStatic+0x70>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d102      	bne.n	80053d2 <xQueueGenericCreateStatic+0x7e>
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d101      	bne.n	80053d6 <xQueueGenericCreateStatic+0x82>
 80053d2:	2301      	movs	r3, #1
 80053d4:	e000      	b.n	80053d8 <xQueueGenericCreateStatic+0x84>
 80053d6:	2300      	movs	r3, #0
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d10a      	bne.n	80053f2 <xQueueGenericCreateStatic+0x9e>
 80053dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053e0:	f383 8811 	msr	BASEPRI, r3
 80053e4:	f3bf 8f6f 	isb	sy
 80053e8:	f3bf 8f4f 	dsb	sy
 80053ec:	61fb      	str	r3, [r7, #28]
 80053ee:	bf00      	nop
 80053f0:	e7fe      	b.n	80053f0 <xQueueGenericCreateStatic+0x9c>
 80053f2:	2350      	movs	r3, #80	; 0x50
 80053f4:	617b      	str	r3, [r7, #20]
 80053f6:	697b      	ldr	r3, [r7, #20]
 80053f8:	2b50      	cmp	r3, #80	; 0x50
 80053fa:	d00a      	beq.n	8005412 <xQueueGenericCreateStatic+0xbe>
 80053fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005400:	f383 8811 	msr	BASEPRI, r3
 8005404:	f3bf 8f6f 	isb	sy
 8005408:	f3bf 8f4f 	dsb	sy
 800540c:	61bb      	str	r3, [r7, #24]
 800540e:	bf00      	nop
 8005410:	e7fe      	b.n	8005410 <xQueueGenericCreateStatic+0xbc>
 8005412:	697b      	ldr	r3, [r7, #20]
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800541a:	2b00      	cmp	r3, #0
 800541c:	d00d      	beq.n	800543a <xQueueGenericCreateStatic+0xe6>
 800541e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005420:	2201      	movs	r2, #1
 8005422:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005426:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800542a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800542c:	9300      	str	r3, [sp, #0]
 800542e:	4613      	mov	r3, r2
 8005430:	687a      	ldr	r2, [r7, #4]
 8005432:	68b9      	ldr	r1, [r7, #8]
 8005434:	68f8      	ldr	r0, [r7, #12]
 8005436:	f000 f805 	bl	8005444 <prvInitialiseNewQueue>
 800543a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800543c:	4618      	mov	r0, r3
 800543e:	3730      	adds	r7, #48	; 0x30
 8005440:	46bd      	mov	sp, r7
 8005442:	bd80      	pop	{r7, pc}

08005444 <prvInitialiseNewQueue>:
 8005444:	b580      	push	{r7, lr}
 8005446:	b084      	sub	sp, #16
 8005448:	af00      	add	r7, sp, #0
 800544a:	60f8      	str	r0, [r7, #12]
 800544c:	60b9      	str	r1, [r7, #8]
 800544e:	607a      	str	r2, [r7, #4]
 8005450:	70fb      	strb	r3, [r7, #3]
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d103      	bne.n	8005460 <prvInitialiseNewQueue+0x1c>
 8005458:	69bb      	ldr	r3, [r7, #24]
 800545a:	69ba      	ldr	r2, [r7, #24]
 800545c:	601a      	str	r2, [r3, #0]
 800545e:	e002      	b.n	8005466 <prvInitialiseNewQueue+0x22>
 8005460:	69bb      	ldr	r3, [r7, #24]
 8005462:	687a      	ldr	r2, [r7, #4]
 8005464:	601a      	str	r2, [r3, #0]
 8005466:	69bb      	ldr	r3, [r7, #24]
 8005468:	68fa      	ldr	r2, [r7, #12]
 800546a:	63da      	str	r2, [r3, #60]	; 0x3c
 800546c:	69bb      	ldr	r3, [r7, #24]
 800546e:	68ba      	ldr	r2, [r7, #8]
 8005470:	641a      	str	r2, [r3, #64]	; 0x40
 8005472:	2101      	movs	r1, #1
 8005474:	69b8      	ldr	r0, [r7, #24]
 8005476:	f7ff ff05 	bl	8005284 <xQueueGenericReset>
 800547a:	69bb      	ldr	r3, [r7, #24]
 800547c:	78fa      	ldrb	r2, [r7, #3]
 800547e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 8005482:	bf00      	nop
 8005484:	3710      	adds	r7, #16
 8005486:	46bd      	mov	sp, r7
 8005488:	bd80      	pop	{r7, pc}
	...

0800548c <xQueueGenericSend>:
 800548c:	b580      	push	{r7, lr}
 800548e:	b08e      	sub	sp, #56	; 0x38
 8005490:	af00      	add	r7, sp, #0
 8005492:	60f8      	str	r0, [r7, #12]
 8005494:	60b9      	str	r1, [r7, #8]
 8005496:	607a      	str	r2, [r7, #4]
 8005498:	603b      	str	r3, [r7, #0]
 800549a:	2300      	movs	r3, #0
 800549c:	637b      	str	r3, [r7, #52]	; 0x34
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	633b      	str	r3, [r7, #48]	; 0x30
 80054a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d10a      	bne.n	80054be <xQueueGenericSend+0x32>
 80054a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054ac:	f383 8811 	msr	BASEPRI, r3
 80054b0:	f3bf 8f6f 	isb	sy
 80054b4:	f3bf 8f4f 	dsb	sy
 80054b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80054ba:	bf00      	nop
 80054bc:	e7fe      	b.n	80054bc <xQueueGenericSend+0x30>
 80054be:	68bb      	ldr	r3, [r7, #8]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d103      	bne.n	80054cc <xQueueGenericSend+0x40>
 80054c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d101      	bne.n	80054d0 <xQueueGenericSend+0x44>
 80054cc:	2301      	movs	r3, #1
 80054ce:	e000      	b.n	80054d2 <xQueueGenericSend+0x46>
 80054d0:	2300      	movs	r3, #0
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d10a      	bne.n	80054ec <xQueueGenericSend+0x60>
 80054d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054da:	f383 8811 	msr	BASEPRI, r3
 80054de:	f3bf 8f6f 	isb	sy
 80054e2:	f3bf 8f4f 	dsb	sy
 80054e6:	627b      	str	r3, [r7, #36]	; 0x24
 80054e8:	bf00      	nop
 80054ea:	e7fe      	b.n	80054ea <xQueueGenericSend+0x5e>
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	2b02      	cmp	r3, #2
 80054f0:	d103      	bne.n	80054fa <xQueueGenericSend+0x6e>
 80054f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054f6:	2b01      	cmp	r3, #1
 80054f8:	d101      	bne.n	80054fe <xQueueGenericSend+0x72>
 80054fa:	2301      	movs	r3, #1
 80054fc:	e000      	b.n	8005500 <xQueueGenericSend+0x74>
 80054fe:	2300      	movs	r3, #0
 8005500:	2b00      	cmp	r3, #0
 8005502:	d10a      	bne.n	800551a <xQueueGenericSend+0x8e>
 8005504:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005508:	f383 8811 	msr	BASEPRI, r3
 800550c:	f3bf 8f6f 	isb	sy
 8005510:	f3bf 8f4f 	dsb	sy
 8005514:	623b      	str	r3, [r7, #32]
 8005516:	bf00      	nop
 8005518:	e7fe      	b.n	8005518 <xQueueGenericSend+0x8c>
 800551a:	f001 f9bd 	bl	8006898 <xTaskGetSchedulerState>
 800551e:	4603      	mov	r3, r0
 8005520:	2b00      	cmp	r3, #0
 8005522:	d102      	bne.n	800552a <xQueueGenericSend+0x9e>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d101      	bne.n	800552e <xQueueGenericSend+0xa2>
 800552a:	2301      	movs	r3, #1
 800552c:	e000      	b.n	8005530 <xQueueGenericSend+0xa4>
 800552e:	2300      	movs	r3, #0
 8005530:	2b00      	cmp	r3, #0
 8005532:	d10a      	bne.n	800554a <xQueueGenericSend+0xbe>
 8005534:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005538:	f383 8811 	msr	BASEPRI, r3
 800553c:	f3bf 8f6f 	isb	sy
 8005540:	f3bf 8f4f 	dsb	sy
 8005544:	61fb      	str	r3, [r7, #28]
 8005546:	bf00      	nop
 8005548:	e7fe      	b.n	8005548 <xQueueGenericSend+0xbc>
 800554a:	f001 ff03 	bl	8007354 <vPortEnterCritical>
 800554e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005550:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005554:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005556:	429a      	cmp	r2, r3
 8005558:	d302      	bcc.n	8005560 <xQueueGenericSend+0xd4>
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	2b02      	cmp	r3, #2
 800555e:	d129      	bne.n	80055b4 <xQueueGenericSend+0x128>
 8005560:	683a      	ldr	r2, [r7, #0]
 8005562:	68b9      	ldr	r1, [r7, #8]
 8005564:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005566:	f000 fa0b 	bl	8005980 <prvCopyDataToQueue>
 800556a:	62f8      	str	r0, [r7, #44]	; 0x2c
 800556c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800556e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005570:	2b00      	cmp	r3, #0
 8005572:	d010      	beq.n	8005596 <xQueueGenericSend+0x10a>
 8005574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005576:	3324      	adds	r3, #36	; 0x24
 8005578:	4618      	mov	r0, r3
 800557a:	f000 ffcf 	bl	800651c <xTaskRemoveFromEventList>
 800557e:	4603      	mov	r3, r0
 8005580:	2b00      	cmp	r3, #0
 8005582:	d013      	beq.n	80055ac <xQueueGenericSend+0x120>
 8005584:	4b3f      	ldr	r3, [pc, #252]	; (8005684 <xQueueGenericSend+0x1f8>)
 8005586:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800558a:	601a      	str	r2, [r3, #0]
 800558c:	f3bf 8f4f 	dsb	sy
 8005590:	f3bf 8f6f 	isb	sy
 8005594:	e00a      	b.n	80055ac <xQueueGenericSend+0x120>
 8005596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005598:	2b00      	cmp	r3, #0
 800559a:	d007      	beq.n	80055ac <xQueueGenericSend+0x120>
 800559c:	4b39      	ldr	r3, [pc, #228]	; (8005684 <xQueueGenericSend+0x1f8>)
 800559e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055a2:	601a      	str	r2, [r3, #0]
 80055a4:	f3bf 8f4f 	dsb	sy
 80055a8:	f3bf 8f6f 	isb	sy
 80055ac:	f001 ff02 	bl	80073b4 <vPortExitCritical>
 80055b0:	2301      	movs	r3, #1
 80055b2:	e063      	b.n	800567c <xQueueGenericSend+0x1f0>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d103      	bne.n	80055c2 <xQueueGenericSend+0x136>
 80055ba:	f001 fefb 	bl	80073b4 <vPortExitCritical>
 80055be:	2300      	movs	r3, #0
 80055c0:	e05c      	b.n	800567c <xQueueGenericSend+0x1f0>
 80055c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d106      	bne.n	80055d6 <xQueueGenericSend+0x14a>
 80055c8:	f107 0314 	add.w	r3, r7, #20
 80055cc:	4618      	mov	r0, r3
 80055ce:	f001 f809 	bl	80065e4 <vTaskInternalSetTimeOutState>
 80055d2:	2301      	movs	r3, #1
 80055d4:	637b      	str	r3, [r7, #52]	; 0x34
 80055d6:	f001 feed 	bl	80073b4 <vPortExitCritical>
 80055da:	f000 fd7b 	bl	80060d4 <vTaskSuspendAll>
 80055de:	f001 feb9 	bl	8007354 <vPortEnterCritical>
 80055e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80055e8:	b25b      	sxtb	r3, r3
 80055ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055ee:	d103      	bne.n	80055f8 <xQueueGenericSend+0x16c>
 80055f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055f2:	2200      	movs	r2, #0
 80055f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80055f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80055fe:	b25b      	sxtb	r3, r3
 8005600:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005604:	d103      	bne.n	800560e <xQueueGenericSend+0x182>
 8005606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005608:	2200      	movs	r2, #0
 800560a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800560e:	f001 fed1 	bl	80073b4 <vPortExitCritical>
 8005612:	1d3a      	adds	r2, r7, #4
 8005614:	f107 0314 	add.w	r3, r7, #20
 8005618:	4611      	mov	r1, r2
 800561a:	4618      	mov	r0, r3
 800561c:	f000 fff8 	bl	8006610 <xTaskCheckForTimeOut>
 8005620:	4603      	mov	r3, r0
 8005622:	2b00      	cmp	r3, #0
 8005624:	d124      	bne.n	8005670 <xQueueGenericSend+0x1e4>
 8005626:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005628:	f000 faa2 	bl	8005b70 <prvIsQueueFull>
 800562c:	4603      	mov	r3, r0
 800562e:	2b00      	cmp	r3, #0
 8005630:	d018      	beq.n	8005664 <xQueueGenericSend+0x1d8>
 8005632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005634:	3310      	adds	r3, #16
 8005636:	687a      	ldr	r2, [r7, #4]
 8005638:	4611      	mov	r1, r2
 800563a:	4618      	mov	r0, r3
 800563c:	f000 ff1e 	bl	800647c <vTaskPlaceOnEventList>
 8005640:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005642:	f000 fa2d 	bl	8005aa0 <prvUnlockQueue>
 8005646:	f000 fd53 	bl	80060f0 <xTaskResumeAll>
 800564a:	4603      	mov	r3, r0
 800564c:	2b00      	cmp	r3, #0
 800564e:	f47f af7c 	bne.w	800554a <xQueueGenericSend+0xbe>
 8005652:	4b0c      	ldr	r3, [pc, #48]	; (8005684 <xQueueGenericSend+0x1f8>)
 8005654:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005658:	601a      	str	r2, [r3, #0]
 800565a:	f3bf 8f4f 	dsb	sy
 800565e:	f3bf 8f6f 	isb	sy
 8005662:	e772      	b.n	800554a <xQueueGenericSend+0xbe>
 8005664:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005666:	f000 fa1b 	bl	8005aa0 <prvUnlockQueue>
 800566a:	f000 fd41 	bl	80060f0 <xTaskResumeAll>
 800566e:	e76c      	b.n	800554a <xQueueGenericSend+0xbe>
 8005670:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005672:	f000 fa15 	bl	8005aa0 <prvUnlockQueue>
 8005676:	f000 fd3b 	bl	80060f0 <xTaskResumeAll>
 800567a:	2300      	movs	r3, #0
 800567c:	4618      	mov	r0, r3
 800567e:	3738      	adds	r7, #56	; 0x38
 8005680:	46bd      	mov	sp, r7
 8005682:	bd80      	pop	{r7, pc}
 8005684:	e000ed04 	.word	0xe000ed04

08005688 <xQueueGenericSendFromISR>:
 8005688:	b580      	push	{r7, lr}
 800568a:	b090      	sub	sp, #64	; 0x40
 800568c:	af00      	add	r7, sp, #0
 800568e:	60f8      	str	r0, [r7, #12]
 8005690:	60b9      	str	r1, [r7, #8]
 8005692:	607a      	str	r2, [r7, #4]
 8005694:	603b      	str	r3, [r7, #0]
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	63bb      	str	r3, [r7, #56]	; 0x38
 800569a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800569c:	2b00      	cmp	r3, #0
 800569e:	d10a      	bne.n	80056b6 <xQueueGenericSendFromISR+0x2e>
 80056a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056a4:	f383 8811 	msr	BASEPRI, r3
 80056a8:	f3bf 8f6f 	isb	sy
 80056ac:	f3bf 8f4f 	dsb	sy
 80056b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80056b2:	bf00      	nop
 80056b4:	e7fe      	b.n	80056b4 <xQueueGenericSendFromISR+0x2c>
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d103      	bne.n	80056c4 <xQueueGenericSendFromISR+0x3c>
 80056bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d101      	bne.n	80056c8 <xQueueGenericSendFromISR+0x40>
 80056c4:	2301      	movs	r3, #1
 80056c6:	e000      	b.n	80056ca <xQueueGenericSendFromISR+0x42>
 80056c8:	2300      	movs	r3, #0
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d10a      	bne.n	80056e4 <xQueueGenericSendFromISR+0x5c>
 80056ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056d2:	f383 8811 	msr	BASEPRI, r3
 80056d6:	f3bf 8f6f 	isb	sy
 80056da:	f3bf 8f4f 	dsb	sy
 80056de:	627b      	str	r3, [r7, #36]	; 0x24
 80056e0:	bf00      	nop
 80056e2:	e7fe      	b.n	80056e2 <xQueueGenericSendFromISR+0x5a>
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	2b02      	cmp	r3, #2
 80056e8:	d103      	bne.n	80056f2 <xQueueGenericSendFromISR+0x6a>
 80056ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056ee:	2b01      	cmp	r3, #1
 80056f0:	d101      	bne.n	80056f6 <xQueueGenericSendFromISR+0x6e>
 80056f2:	2301      	movs	r3, #1
 80056f4:	e000      	b.n	80056f8 <xQueueGenericSendFromISR+0x70>
 80056f6:	2300      	movs	r3, #0
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d10a      	bne.n	8005712 <xQueueGenericSendFromISR+0x8a>
 80056fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005700:	f383 8811 	msr	BASEPRI, r3
 8005704:	f3bf 8f6f 	isb	sy
 8005708:	f3bf 8f4f 	dsb	sy
 800570c:	623b      	str	r3, [r7, #32]
 800570e:	bf00      	nop
 8005710:	e7fe      	b.n	8005710 <xQueueGenericSendFromISR+0x88>
 8005712:	f001 ff01 	bl	8007518 <vPortValidateInterruptPriority>
 8005716:	f3ef 8211 	mrs	r2, BASEPRI
 800571a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800571e:	f383 8811 	msr	BASEPRI, r3
 8005722:	f3bf 8f6f 	isb	sy
 8005726:	f3bf 8f4f 	dsb	sy
 800572a:	61fa      	str	r2, [r7, #28]
 800572c:	61bb      	str	r3, [r7, #24]
 800572e:	69fb      	ldr	r3, [r7, #28]
 8005730:	637b      	str	r3, [r7, #52]	; 0x34
 8005732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005734:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005736:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005738:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800573a:	429a      	cmp	r2, r3
 800573c:	d302      	bcc.n	8005744 <xQueueGenericSendFromISR+0xbc>
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	2b02      	cmp	r3, #2
 8005742:	d12f      	bne.n	80057a4 <xQueueGenericSendFromISR+0x11c>
 8005744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005746:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800574a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800574e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005752:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005754:	683a      	ldr	r2, [r7, #0]
 8005756:	68b9      	ldr	r1, [r7, #8]
 8005758:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800575a:	f000 f911 	bl	8005980 <prvCopyDataToQueue>
 800575e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005762:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005766:	d112      	bne.n	800578e <xQueueGenericSendFromISR+0x106>
 8005768:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800576a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800576c:	2b00      	cmp	r3, #0
 800576e:	d016      	beq.n	800579e <xQueueGenericSendFromISR+0x116>
 8005770:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005772:	3324      	adds	r3, #36	; 0x24
 8005774:	4618      	mov	r0, r3
 8005776:	f000 fed1 	bl	800651c <xTaskRemoveFromEventList>
 800577a:	4603      	mov	r3, r0
 800577c:	2b00      	cmp	r3, #0
 800577e:	d00e      	beq.n	800579e <xQueueGenericSendFromISR+0x116>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d00b      	beq.n	800579e <xQueueGenericSendFromISR+0x116>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2201      	movs	r2, #1
 800578a:	601a      	str	r2, [r3, #0]
 800578c:	e007      	b.n	800579e <xQueueGenericSendFromISR+0x116>
 800578e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005792:	3301      	adds	r3, #1
 8005794:	b2db      	uxtb	r3, r3
 8005796:	b25a      	sxtb	r2, r3
 8005798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800579a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800579e:	2301      	movs	r3, #1
 80057a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80057a2:	e001      	b.n	80057a8 <xQueueGenericSendFromISR+0x120>
 80057a4:	2300      	movs	r3, #0
 80057a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80057a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057aa:	617b      	str	r3, [r7, #20]
 80057ac:	697b      	ldr	r3, [r7, #20]
 80057ae:	f383 8811 	msr	BASEPRI, r3
 80057b2:	bf00      	nop
 80057b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057b6:	4618      	mov	r0, r3
 80057b8:	3740      	adds	r7, #64	; 0x40
 80057ba:	46bd      	mov	sp, r7
 80057bc:	bd80      	pop	{r7, pc}
	...

080057c0 <xQueueReceive>:
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b08c      	sub	sp, #48	; 0x30
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	60f8      	str	r0, [r7, #12]
 80057c8:	60b9      	str	r1, [r7, #8]
 80057ca:	607a      	str	r2, [r7, #4]
 80057cc:	2300      	movs	r3, #0
 80057ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80057d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d10a      	bne.n	80057f0 <xQueueReceive+0x30>
 80057da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057de:	f383 8811 	msr	BASEPRI, r3
 80057e2:	f3bf 8f6f 	isb	sy
 80057e6:	f3bf 8f4f 	dsb	sy
 80057ea:	623b      	str	r3, [r7, #32]
 80057ec:	bf00      	nop
 80057ee:	e7fe      	b.n	80057ee <xQueueReceive+0x2e>
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d103      	bne.n	80057fe <xQueueReceive+0x3e>
 80057f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d101      	bne.n	8005802 <xQueueReceive+0x42>
 80057fe:	2301      	movs	r3, #1
 8005800:	e000      	b.n	8005804 <xQueueReceive+0x44>
 8005802:	2300      	movs	r3, #0
 8005804:	2b00      	cmp	r3, #0
 8005806:	d10a      	bne.n	800581e <xQueueReceive+0x5e>
 8005808:	f04f 0350 	mov.w	r3, #80	; 0x50
 800580c:	f383 8811 	msr	BASEPRI, r3
 8005810:	f3bf 8f6f 	isb	sy
 8005814:	f3bf 8f4f 	dsb	sy
 8005818:	61fb      	str	r3, [r7, #28]
 800581a:	bf00      	nop
 800581c:	e7fe      	b.n	800581c <xQueueReceive+0x5c>
 800581e:	f001 f83b 	bl	8006898 <xTaskGetSchedulerState>
 8005822:	4603      	mov	r3, r0
 8005824:	2b00      	cmp	r3, #0
 8005826:	d102      	bne.n	800582e <xQueueReceive+0x6e>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d101      	bne.n	8005832 <xQueueReceive+0x72>
 800582e:	2301      	movs	r3, #1
 8005830:	e000      	b.n	8005834 <xQueueReceive+0x74>
 8005832:	2300      	movs	r3, #0
 8005834:	2b00      	cmp	r3, #0
 8005836:	d10a      	bne.n	800584e <xQueueReceive+0x8e>
 8005838:	f04f 0350 	mov.w	r3, #80	; 0x50
 800583c:	f383 8811 	msr	BASEPRI, r3
 8005840:	f3bf 8f6f 	isb	sy
 8005844:	f3bf 8f4f 	dsb	sy
 8005848:	61bb      	str	r3, [r7, #24]
 800584a:	bf00      	nop
 800584c:	e7fe      	b.n	800584c <xQueueReceive+0x8c>
 800584e:	f001 fd81 	bl	8007354 <vPortEnterCritical>
 8005852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005856:	627b      	str	r3, [r7, #36]	; 0x24
 8005858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800585a:	2b00      	cmp	r3, #0
 800585c:	d01f      	beq.n	800589e <xQueueReceive+0xde>
 800585e:	68b9      	ldr	r1, [r7, #8]
 8005860:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005862:	f000 f8f7 	bl	8005a54 <prvCopyDataFromQueue>
 8005866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005868:	1e5a      	subs	r2, r3, #1
 800586a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800586c:	639a      	str	r2, [r3, #56]	; 0x38
 800586e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005870:	691b      	ldr	r3, [r3, #16]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d00f      	beq.n	8005896 <xQueueReceive+0xd6>
 8005876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005878:	3310      	adds	r3, #16
 800587a:	4618      	mov	r0, r3
 800587c:	f000 fe4e 	bl	800651c <xTaskRemoveFromEventList>
 8005880:	4603      	mov	r3, r0
 8005882:	2b00      	cmp	r3, #0
 8005884:	d007      	beq.n	8005896 <xQueueReceive+0xd6>
 8005886:	4b3d      	ldr	r3, [pc, #244]	; (800597c <xQueueReceive+0x1bc>)
 8005888:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800588c:	601a      	str	r2, [r3, #0]
 800588e:	f3bf 8f4f 	dsb	sy
 8005892:	f3bf 8f6f 	isb	sy
 8005896:	f001 fd8d 	bl	80073b4 <vPortExitCritical>
 800589a:	2301      	movs	r3, #1
 800589c:	e069      	b.n	8005972 <xQueueReceive+0x1b2>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d103      	bne.n	80058ac <xQueueReceive+0xec>
 80058a4:	f001 fd86 	bl	80073b4 <vPortExitCritical>
 80058a8:	2300      	movs	r3, #0
 80058aa:	e062      	b.n	8005972 <xQueueReceive+0x1b2>
 80058ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d106      	bne.n	80058c0 <xQueueReceive+0x100>
 80058b2:	f107 0310 	add.w	r3, r7, #16
 80058b6:	4618      	mov	r0, r3
 80058b8:	f000 fe94 	bl	80065e4 <vTaskInternalSetTimeOutState>
 80058bc:	2301      	movs	r3, #1
 80058be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80058c0:	f001 fd78 	bl	80073b4 <vPortExitCritical>
 80058c4:	f000 fc06 	bl	80060d4 <vTaskSuspendAll>
 80058c8:	f001 fd44 	bl	8007354 <vPortEnterCritical>
 80058cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058ce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80058d2:	b25b      	sxtb	r3, r3
 80058d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058d8:	d103      	bne.n	80058e2 <xQueueReceive+0x122>
 80058da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058dc:	2200      	movs	r2, #0
 80058de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80058e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80058e8:	b25b      	sxtb	r3, r3
 80058ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058ee:	d103      	bne.n	80058f8 <xQueueReceive+0x138>
 80058f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058f2:	2200      	movs	r2, #0
 80058f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80058f8:	f001 fd5c 	bl	80073b4 <vPortExitCritical>
 80058fc:	1d3a      	adds	r2, r7, #4
 80058fe:	f107 0310 	add.w	r3, r7, #16
 8005902:	4611      	mov	r1, r2
 8005904:	4618      	mov	r0, r3
 8005906:	f000 fe83 	bl	8006610 <xTaskCheckForTimeOut>
 800590a:	4603      	mov	r3, r0
 800590c:	2b00      	cmp	r3, #0
 800590e:	d123      	bne.n	8005958 <xQueueReceive+0x198>
 8005910:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005912:	f000 f917 	bl	8005b44 <prvIsQueueEmpty>
 8005916:	4603      	mov	r3, r0
 8005918:	2b00      	cmp	r3, #0
 800591a:	d017      	beq.n	800594c <xQueueReceive+0x18c>
 800591c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800591e:	3324      	adds	r3, #36	; 0x24
 8005920:	687a      	ldr	r2, [r7, #4]
 8005922:	4611      	mov	r1, r2
 8005924:	4618      	mov	r0, r3
 8005926:	f000 fda9 	bl	800647c <vTaskPlaceOnEventList>
 800592a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800592c:	f000 f8b8 	bl	8005aa0 <prvUnlockQueue>
 8005930:	f000 fbde 	bl	80060f0 <xTaskResumeAll>
 8005934:	4603      	mov	r3, r0
 8005936:	2b00      	cmp	r3, #0
 8005938:	d189      	bne.n	800584e <xQueueReceive+0x8e>
 800593a:	4b10      	ldr	r3, [pc, #64]	; (800597c <xQueueReceive+0x1bc>)
 800593c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005940:	601a      	str	r2, [r3, #0]
 8005942:	f3bf 8f4f 	dsb	sy
 8005946:	f3bf 8f6f 	isb	sy
 800594a:	e780      	b.n	800584e <xQueueReceive+0x8e>
 800594c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800594e:	f000 f8a7 	bl	8005aa0 <prvUnlockQueue>
 8005952:	f000 fbcd 	bl	80060f0 <xTaskResumeAll>
 8005956:	e77a      	b.n	800584e <xQueueReceive+0x8e>
 8005958:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800595a:	f000 f8a1 	bl	8005aa0 <prvUnlockQueue>
 800595e:	f000 fbc7 	bl	80060f0 <xTaskResumeAll>
 8005962:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005964:	f000 f8ee 	bl	8005b44 <prvIsQueueEmpty>
 8005968:	4603      	mov	r3, r0
 800596a:	2b00      	cmp	r3, #0
 800596c:	f43f af6f 	beq.w	800584e <xQueueReceive+0x8e>
 8005970:	2300      	movs	r3, #0
 8005972:	4618      	mov	r0, r3
 8005974:	3730      	adds	r7, #48	; 0x30
 8005976:	46bd      	mov	sp, r7
 8005978:	bd80      	pop	{r7, pc}
 800597a:	bf00      	nop
 800597c:	e000ed04 	.word	0xe000ed04

08005980 <prvCopyDataToQueue>:
 8005980:	b580      	push	{r7, lr}
 8005982:	b086      	sub	sp, #24
 8005984:	af00      	add	r7, sp, #0
 8005986:	60f8      	str	r0, [r7, #12]
 8005988:	60b9      	str	r1, [r7, #8]
 800598a:	607a      	str	r2, [r7, #4]
 800598c:	2300      	movs	r3, #0
 800598e:	617b      	str	r3, [r7, #20]
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005994:	613b      	str	r3, [r7, #16]
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800599a:	2b00      	cmp	r3, #0
 800599c:	d10d      	bne.n	80059ba <prvCopyDataToQueue+0x3a>
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d14d      	bne.n	8005a42 <prvCopyDataToQueue+0xc2>
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	689b      	ldr	r3, [r3, #8]
 80059aa:	4618      	mov	r0, r3
 80059ac:	f000 ff92 	bl	80068d4 <xTaskPriorityDisinherit>
 80059b0:	6178      	str	r0, [r7, #20]
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	2200      	movs	r2, #0
 80059b6:	609a      	str	r2, [r3, #8]
 80059b8:	e043      	b.n	8005a42 <prvCopyDataToQueue+0xc2>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d119      	bne.n	80059f4 <prvCopyDataToQueue+0x74>
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	6858      	ldr	r0, [r3, #4]
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059c8:	461a      	mov	r2, r3
 80059ca:	68b9      	ldr	r1, [r7, #8]
 80059cc:	f001 fffa 	bl	80079c4 <memcpy>
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	685a      	ldr	r2, [r3, #4]
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059d8:	441a      	add	r2, r3
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	605a      	str	r2, [r3, #4]
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	685a      	ldr	r2, [r3, #4]
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	689b      	ldr	r3, [r3, #8]
 80059e6:	429a      	cmp	r2, r3
 80059e8:	d32b      	bcc.n	8005a42 <prvCopyDataToQueue+0xc2>
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681a      	ldr	r2, [r3, #0]
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	605a      	str	r2, [r3, #4]
 80059f2:	e026      	b.n	8005a42 <prvCopyDataToQueue+0xc2>
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	68d8      	ldr	r0, [r3, #12]
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059fc:	461a      	mov	r2, r3
 80059fe:	68b9      	ldr	r1, [r7, #8]
 8005a00:	f001 ffe0 	bl	80079c4 <memcpy>
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	68da      	ldr	r2, [r3, #12]
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a0c:	425b      	negs	r3, r3
 8005a0e:	441a      	add	r2, r3
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	60da      	str	r2, [r3, #12]
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	68da      	ldr	r2, [r3, #12]
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	429a      	cmp	r2, r3
 8005a1e:	d207      	bcs.n	8005a30 <prvCopyDataToQueue+0xb0>
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	689a      	ldr	r2, [r3, #8]
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a28:	425b      	negs	r3, r3
 8005a2a:	441a      	add	r2, r3
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	60da      	str	r2, [r3, #12]
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2b02      	cmp	r3, #2
 8005a34:	d105      	bne.n	8005a42 <prvCopyDataToQueue+0xc2>
 8005a36:	693b      	ldr	r3, [r7, #16]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d002      	beq.n	8005a42 <prvCopyDataToQueue+0xc2>
 8005a3c:	693b      	ldr	r3, [r7, #16]
 8005a3e:	3b01      	subs	r3, #1
 8005a40:	613b      	str	r3, [r7, #16]
 8005a42:	693b      	ldr	r3, [r7, #16]
 8005a44:	1c5a      	adds	r2, r3, #1
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	639a      	str	r2, [r3, #56]	; 0x38
 8005a4a:	697b      	ldr	r3, [r7, #20]
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	3718      	adds	r7, #24
 8005a50:	46bd      	mov	sp, r7
 8005a52:	bd80      	pop	{r7, pc}

08005a54 <prvCopyDataFromQueue>:
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b082      	sub	sp, #8
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
 8005a5c:	6039      	str	r1, [r7, #0]
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d018      	beq.n	8005a98 <prvCopyDataFromQueue+0x44>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	68da      	ldr	r2, [r3, #12]
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a6e:	441a      	add	r2, r3
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	60da      	str	r2, [r3, #12]
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	68da      	ldr	r2, [r3, #12]
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	689b      	ldr	r3, [r3, #8]
 8005a7c:	429a      	cmp	r2, r3
 8005a7e:	d303      	bcc.n	8005a88 <prvCopyDataFromQueue+0x34>
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681a      	ldr	r2, [r3, #0]
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	60da      	str	r2, [r3, #12]
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	68d9      	ldr	r1, [r3, #12]
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a90:	461a      	mov	r2, r3
 8005a92:	6838      	ldr	r0, [r7, #0]
 8005a94:	f001 ff96 	bl	80079c4 <memcpy>
 8005a98:	bf00      	nop
 8005a9a:	3708      	adds	r7, #8
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	bd80      	pop	{r7, pc}

08005aa0 <prvUnlockQueue>:
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b084      	sub	sp, #16
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
 8005aa8:	f001 fc54 	bl	8007354 <vPortEnterCritical>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005ab2:	73fb      	strb	r3, [r7, #15]
 8005ab4:	e011      	b.n	8005ada <prvUnlockQueue+0x3a>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d012      	beq.n	8005ae4 <prvUnlockQueue+0x44>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	3324      	adds	r3, #36	; 0x24
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	f000 fd2a 	bl	800651c <xTaskRemoveFromEventList>
 8005ac8:	4603      	mov	r3, r0
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d001      	beq.n	8005ad2 <prvUnlockQueue+0x32>
 8005ace:	f000 fe01 	bl	80066d4 <vTaskMissedYield>
 8005ad2:	7bfb      	ldrb	r3, [r7, #15]
 8005ad4:	3b01      	subs	r3, #1
 8005ad6:	b2db      	uxtb	r3, r3
 8005ad8:	73fb      	strb	r3, [r7, #15]
 8005ada:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	dce9      	bgt.n	8005ab6 <prvUnlockQueue+0x16>
 8005ae2:	e000      	b.n	8005ae6 <prvUnlockQueue+0x46>
 8005ae4:	bf00      	nop
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	22ff      	movs	r2, #255	; 0xff
 8005aea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005aee:	f001 fc61 	bl	80073b4 <vPortExitCritical>
 8005af2:	f001 fc2f 	bl	8007354 <vPortEnterCritical>
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005afc:	73bb      	strb	r3, [r7, #14]
 8005afe:	e011      	b.n	8005b24 <prvUnlockQueue+0x84>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	691b      	ldr	r3, [r3, #16]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d012      	beq.n	8005b2e <prvUnlockQueue+0x8e>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	3310      	adds	r3, #16
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	f000 fd05 	bl	800651c <xTaskRemoveFromEventList>
 8005b12:	4603      	mov	r3, r0
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d001      	beq.n	8005b1c <prvUnlockQueue+0x7c>
 8005b18:	f000 fddc 	bl	80066d4 <vTaskMissedYield>
 8005b1c:	7bbb      	ldrb	r3, [r7, #14]
 8005b1e:	3b01      	subs	r3, #1
 8005b20:	b2db      	uxtb	r3, r3
 8005b22:	73bb      	strb	r3, [r7, #14]
 8005b24:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	dce9      	bgt.n	8005b00 <prvUnlockQueue+0x60>
 8005b2c:	e000      	b.n	8005b30 <prvUnlockQueue+0x90>
 8005b2e:	bf00      	nop
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	22ff      	movs	r2, #255	; 0xff
 8005b34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b38:	f001 fc3c 	bl	80073b4 <vPortExitCritical>
 8005b3c:	bf00      	nop
 8005b3e:	3710      	adds	r7, #16
 8005b40:	46bd      	mov	sp, r7
 8005b42:	bd80      	pop	{r7, pc}

08005b44 <prvIsQueueEmpty>:
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b084      	sub	sp, #16
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
 8005b4c:	f001 fc02 	bl	8007354 <vPortEnterCritical>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d102      	bne.n	8005b5e <prvIsQueueEmpty+0x1a>
 8005b58:	2301      	movs	r3, #1
 8005b5a:	60fb      	str	r3, [r7, #12]
 8005b5c:	e001      	b.n	8005b62 <prvIsQueueEmpty+0x1e>
 8005b5e:	2300      	movs	r3, #0
 8005b60:	60fb      	str	r3, [r7, #12]
 8005b62:	f001 fc27 	bl	80073b4 <vPortExitCritical>
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	4618      	mov	r0, r3
 8005b6a:	3710      	adds	r7, #16
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	bd80      	pop	{r7, pc}

08005b70 <prvIsQueueFull>:
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b084      	sub	sp, #16
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
 8005b78:	f001 fbec 	bl	8007354 <vPortEnterCritical>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b84:	429a      	cmp	r2, r3
 8005b86:	d102      	bne.n	8005b8e <prvIsQueueFull+0x1e>
 8005b88:	2301      	movs	r3, #1
 8005b8a:	60fb      	str	r3, [r7, #12]
 8005b8c:	e001      	b.n	8005b92 <prvIsQueueFull+0x22>
 8005b8e:	2300      	movs	r3, #0
 8005b90:	60fb      	str	r3, [r7, #12]
 8005b92:	f001 fc0f 	bl	80073b4 <vPortExitCritical>
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	4618      	mov	r0, r3
 8005b9a:	3710      	adds	r7, #16
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	bd80      	pop	{r7, pc}

08005ba0 <vQueueAddToRegistry>:
 8005ba0:	b480      	push	{r7}
 8005ba2:	b085      	sub	sp, #20
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
 8005ba8:	6039      	str	r1, [r7, #0]
 8005baa:	2300      	movs	r3, #0
 8005bac:	60fb      	str	r3, [r7, #12]
 8005bae:	e014      	b.n	8005bda <vQueueAddToRegistry+0x3a>
 8005bb0:	4a0f      	ldr	r2, [pc, #60]	; (8005bf0 <vQueueAddToRegistry+0x50>)
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d10b      	bne.n	8005bd4 <vQueueAddToRegistry+0x34>
 8005bbc:	490c      	ldr	r1, [pc, #48]	; (8005bf0 <vQueueAddToRegistry+0x50>)
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	683a      	ldr	r2, [r7, #0]
 8005bc2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 8005bc6:	4a0a      	ldr	r2, [pc, #40]	; (8005bf0 <vQueueAddToRegistry+0x50>)
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	00db      	lsls	r3, r3, #3
 8005bcc:	4413      	add	r3, r2
 8005bce:	687a      	ldr	r2, [r7, #4]
 8005bd0:	605a      	str	r2, [r3, #4]
 8005bd2:	e006      	b.n	8005be2 <vQueueAddToRegistry+0x42>
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	3301      	adds	r3, #1
 8005bd8:	60fb      	str	r3, [r7, #12]
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	2b07      	cmp	r3, #7
 8005bde:	d9e7      	bls.n	8005bb0 <vQueueAddToRegistry+0x10>
 8005be0:	bf00      	nop
 8005be2:	bf00      	nop
 8005be4:	3714      	adds	r7, #20
 8005be6:	46bd      	mov	sp, r7
 8005be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bec:	4770      	bx	lr
 8005bee:	bf00      	nop
 8005bf0:	200008b0 	.word	0x200008b0

08005bf4 <vQueueWaitForMessageRestricted>:
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b086      	sub	sp, #24
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	60f8      	str	r0, [r7, #12]
 8005bfc:	60b9      	str	r1, [r7, #8]
 8005bfe:	607a      	str	r2, [r7, #4]
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	617b      	str	r3, [r7, #20]
 8005c04:	f001 fba6 	bl	8007354 <vPortEnterCritical>
 8005c08:	697b      	ldr	r3, [r7, #20]
 8005c0a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005c0e:	b25b      	sxtb	r3, r3
 8005c10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c14:	d103      	bne.n	8005c1e <vQueueWaitForMessageRestricted+0x2a>
 8005c16:	697b      	ldr	r3, [r7, #20]
 8005c18:	2200      	movs	r2, #0
 8005c1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c1e:	697b      	ldr	r3, [r7, #20]
 8005c20:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005c24:	b25b      	sxtb	r3, r3
 8005c26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c2a:	d103      	bne.n	8005c34 <vQueueWaitForMessageRestricted+0x40>
 8005c2c:	697b      	ldr	r3, [r7, #20]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005c34:	f001 fbbe 	bl	80073b4 <vPortExitCritical>
 8005c38:	697b      	ldr	r3, [r7, #20]
 8005c3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d106      	bne.n	8005c4e <vQueueWaitForMessageRestricted+0x5a>
 8005c40:	697b      	ldr	r3, [r7, #20]
 8005c42:	3324      	adds	r3, #36	; 0x24
 8005c44:	687a      	ldr	r2, [r7, #4]
 8005c46:	68b9      	ldr	r1, [r7, #8]
 8005c48:	4618      	mov	r0, r3
 8005c4a:	f000 fc3b 	bl	80064c4 <vTaskPlaceOnEventListRestricted>
 8005c4e:	6978      	ldr	r0, [r7, #20]
 8005c50:	f7ff ff26 	bl	8005aa0 <prvUnlockQueue>
 8005c54:	bf00      	nop
 8005c56:	3718      	adds	r7, #24
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	bd80      	pop	{r7, pc}

08005c5c <xTaskCreateStatic>:
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b08e      	sub	sp, #56	; 0x38
 8005c60:	af04      	add	r7, sp, #16
 8005c62:	60f8      	str	r0, [r7, #12]
 8005c64:	60b9      	str	r1, [r7, #8]
 8005c66:	607a      	str	r2, [r7, #4]
 8005c68:	603b      	str	r3, [r7, #0]
 8005c6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d10a      	bne.n	8005c86 <xTaskCreateStatic+0x2a>
 8005c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c74:	f383 8811 	msr	BASEPRI, r3
 8005c78:	f3bf 8f6f 	isb	sy
 8005c7c:	f3bf 8f4f 	dsb	sy
 8005c80:	623b      	str	r3, [r7, #32]
 8005c82:	bf00      	nop
 8005c84:	e7fe      	b.n	8005c84 <xTaskCreateStatic+0x28>
 8005c86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d10a      	bne.n	8005ca2 <xTaskCreateStatic+0x46>
 8005c8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c90:	f383 8811 	msr	BASEPRI, r3
 8005c94:	f3bf 8f6f 	isb	sy
 8005c98:	f3bf 8f4f 	dsb	sy
 8005c9c:	61fb      	str	r3, [r7, #28]
 8005c9e:	bf00      	nop
 8005ca0:	e7fe      	b.n	8005ca0 <xTaskCreateStatic+0x44>
 8005ca2:	235c      	movs	r3, #92	; 0x5c
 8005ca4:	613b      	str	r3, [r7, #16]
 8005ca6:	693b      	ldr	r3, [r7, #16]
 8005ca8:	2b5c      	cmp	r3, #92	; 0x5c
 8005caa:	d00a      	beq.n	8005cc2 <xTaskCreateStatic+0x66>
 8005cac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cb0:	f383 8811 	msr	BASEPRI, r3
 8005cb4:	f3bf 8f6f 	isb	sy
 8005cb8:	f3bf 8f4f 	dsb	sy
 8005cbc:	61bb      	str	r3, [r7, #24]
 8005cbe:	bf00      	nop
 8005cc0:	e7fe      	b.n	8005cc0 <xTaskCreateStatic+0x64>
 8005cc2:	693b      	ldr	r3, [r7, #16]
 8005cc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d01e      	beq.n	8005d08 <xTaskCreateStatic+0xac>
 8005cca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d01b      	beq.n	8005d08 <xTaskCreateStatic+0xac>
 8005cd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cd2:	627b      	str	r3, [r7, #36]	; 0x24
 8005cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cd6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005cd8:	631a      	str	r2, [r3, #48]	; 0x30
 8005cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cdc:	2202      	movs	r2, #2
 8005cde:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	9303      	str	r3, [sp, #12]
 8005ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ce8:	9302      	str	r3, [sp, #8]
 8005cea:	f107 0314 	add.w	r3, r7, #20
 8005cee:	9301      	str	r3, [sp, #4]
 8005cf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cf2:	9300      	str	r3, [sp, #0]
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	687a      	ldr	r2, [r7, #4]
 8005cf8:	68b9      	ldr	r1, [r7, #8]
 8005cfa:	68f8      	ldr	r0, [r7, #12]
 8005cfc:	f000 f850 	bl	8005da0 <prvInitialiseNewTask>
 8005d00:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005d02:	f000 f8dd 	bl	8005ec0 <prvAddNewTaskToReadyList>
 8005d06:	e001      	b.n	8005d0c <xTaskCreateStatic+0xb0>
 8005d08:	2300      	movs	r3, #0
 8005d0a:	617b      	str	r3, [r7, #20]
 8005d0c:	697b      	ldr	r3, [r7, #20]
 8005d0e:	4618      	mov	r0, r3
 8005d10:	3728      	adds	r7, #40	; 0x28
 8005d12:	46bd      	mov	sp, r7
 8005d14:	bd80      	pop	{r7, pc}

08005d16 <xTaskCreate>:
 8005d16:	b580      	push	{r7, lr}
 8005d18:	b08c      	sub	sp, #48	; 0x30
 8005d1a:	af04      	add	r7, sp, #16
 8005d1c:	60f8      	str	r0, [r7, #12]
 8005d1e:	60b9      	str	r1, [r7, #8]
 8005d20:	603b      	str	r3, [r7, #0]
 8005d22:	4613      	mov	r3, r2
 8005d24:	80fb      	strh	r3, [r7, #6]
 8005d26:	88fb      	ldrh	r3, [r7, #6]
 8005d28:	009b      	lsls	r3, r3, #2
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	f001 fc34 	bl	8007598 <pvPortMalloc>
 8005d30:	6178      	str	r0, [r7, #20]
 8005d32:	697b      	ldr	r3, [r7, #20]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d00e      	beq.n	8005d56 <xTaskCreate+0x40>
 8005d38:	205c      	movs	r0, #92	; 0x5c
 8005d3a:	f001 fc2d 	bl	8007598 <pvPortMalloc>
 8005d3e:	61f8      	str	r0, [r7, #28]
 8005d40:	69fb      	ldr	r3, [r7, #28]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d003      	beq.n	8005d4e <xTaskCreate+0x38>
 8005d46:	69fb      	ldr	r3, [r7, #28]
 8005d48:	697a      	ldr	r2, [r7, #20]
 8005d4a:	631a      	str	r2, [r3, #48]	; 0x30
 8005d4c:	e005      	b.n	8005d5a <xTaskCreate+0x44>
 8005d4e:	6978      	ldr	r0, [r7, #20]
 8005d50:	f001 fcee 	bl	8007730 <vPortFree>
 8005d54:	e001      	b.n	8005d5a <xTaskCreate+0x44>
 8005d56:	2300      	movs	r3, #0
 8005d58:	61fb      	str	r3, [r7, #28]
 8005d5a:	69fb      	ldr	r3, [r7, #28]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d017      	beq.n	8005d90 <xTaskCreate+0x7a>
 8005d60:	69fb      	ldr	r3, [r7, #28]
 8005d62:	2200      	movs	r2, #0
 8005d64:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
 8005d68:	88fa      	ldrh	r2, [r7, #6]
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	9303      	str	r3, [sp, #12]
 8005d6e:	69fb      	ldr	r3, [r7, #28]
 8005d70:	9302      	str	r3, [sp, #8]
 8005d72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d74:	9301      	str	r3, [sp, #4]
 8005d76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d78:	9300      	str	r3, [sp, #0]
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	68b9      	ldr	r1, [r7, #8]
 8005d7e:	68f8      	ldr	r0, [r7, #12]
 8005d80:	f000 f80e 	bl	8005da0 <prvInitialiseNewTask>
 8005d84:	69f8      	ldr	r0, [r7, #28]
 8005d86:	f000 f89b 	bl	8005ec0 <prvAddNewTaskToReadyList>
 8005d8a:	2301      	movs	r3, #1
 8005d8c:	61bb      	str	r3, [r7, #24]
 8005d8e:	e002      	b.n	8005d96 <xTaskCreate+0x80>
 8005d90:	f04f 33ff 	mov.w	r3, #4294967295
 8005d94:	61bb      	str	r3, [r7, #24]
 8005d96:	69bb      	ldr	r3, [r7, #24]
 8005d98:	4618      	mov	r0, r3
 8005d9a:	3720      	adds	r7, #32
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	bd80      	pop	{r7, pc}

08005da0 <prvInitialiseNewTask>:
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b088      	sub	sp, #32
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	60f8      	str	r0, [r7, #12]
 8005da8:	60b9      	str	r1, [r7, #8]
 8005daa:	607a      	str	r2, [r7, #4]
 8005dac:	603b      	str	r3, [r7, #0]
 8005dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005db0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	009b      	lsls	r3, r3, #2
 8005db6:	461a      	mov	r2, r3
 8005db8:	21a5      	movs	r1, #165	; 0xa5
 8005dba:	f001 fdd7 	bl	800796c <memset>
 8005dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dc0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005dc8:	3b01      	subs	r3, #1
 8005dca:	009b      	lsls	r3, r3, #2
 8005dcc:	4413      	add	r3, r2
 8005dce:	61bb      	str	r3, [r7, #24]
 8005dd0:	69bb      	ldr	r3, [r7, #24]
 8005dd2:	f023 0307 	bic.w	r3, r3, #7
 8005dd6:	61bb      	str	r3, [r7, #24]
 8005dd8:	69bb      	ldr	r3, [r7, #24]
 8005dda:	f003 0307 	and.w	r3, r3, #7
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d00a      	beq.n	8005df8 <prvInitialiseNewTask+0x58>
 8005de2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005de6:	f383 8811 	msr	BASEPRI, r3
 8005dea:	f3bf 8f6f 	isb	sy
 8005dee:	f3bf 8f4f 	dsb	sy
 8005df2:	617b      	str	r3, [r7, #20]
 8005df4:	bf00      	nop
 8005df6:	e7fe      	b.n	8005df6 <prvInitialiseNewTask+0x56>
 8005df8:	68bb      	ldr	r3, [r7, #8]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d01f      	beq.n	8005e3e <prvInitialiseNewTask+0x9e>
 8005dfe:	2300      	movs	r3, #0
 8005e00:	61fb      	str	r3, [r7, #28]
 8005e02:	e012      	b.n	8005e2a <prvInitialiseNewTask+0x8a>
 8005e04:	68ba      	ldr	r2, [r7, #8]
 8005e06:	69fb      	ldr	r3, [r7, #28]
 8005e08:	4413      	add	r3, r2
 8005e0a:	7819      	ldrb	r1, [r3, #0]
 8005e0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e0e:	69fb      	ldr	r3, [r7, #28]
 8005e10:	4413      	add	r3, r2
 8005e12:	3334      	adds	r3, #52	; 0x34
 8005e14:	460a      	mov	r2, r1
 8005e16:	701a      	strb	r2, [r3, #0]
 8005e18:	68ba      	ldr	r2, [r7, #8]
 8005e1a:	69fb      	ldr	r3, [r7, #28]
 8005e1c:	4413      	add	r3, r2
 8005e1e:	781b      	ldrb	r3, [r3, #0]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d006      	beq.n	8005e32 <prvInitialiseNewTask+0x92>
 8005e24:	69fb      	ldr	r3, [r7, #28]
 8005e26:	3301      	adds	r3, #1
 8005e28:	61fb      	str	r3, [r7, #28]
 8005e2a:	69fb      	ldr	r3, [r7, #28]
 8005e2c:	2b0f      	cmp	r3, #15
 8005e2e:	d9e9      	bls.n	8005e04 <prvInitialiseNewTask+0x64>
 8005e30:	e000      	b.n	8005e34 <prvInitialiseNewTask+0x94>
 8005e32:	bf00      	nop
 8005e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e36:	2200      	movs	r2, #0
 8005e38:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005e3c:	e003      	b.n	8005e46 <prvInitialiseNewTask+0xa6>
 8005e3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e40:	2200      	movs	r2, #0
 8005e42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8005e46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e48:	2b37      	cmp	r3, #55	; 0x37
 8005e4a:	d901      	bls.n	8005e50 <prvInitialiseNewTask+0xb0>
 8005e4c:	2337      	movs	r3, #55	; 0x37
 8005e4e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005e54:	62da      	str	r2, [r3, #44]	; 0x2c
 8005e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005e5a:	64da      	str	r2, [r3, #76]	; 0x4c
 8005e5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e5e:	2200      	movs	r2, #0
 8005e60:	651a      	str	r2, [r3, #80]	; 0x50
 8005e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e64:	3304      	adds	r3, #4
 8005e66:	4618      	mov	r0, r3
 8005e68:	f7ff f978 	bl	800515c <vListInitialiseItem>
 8005e6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e6e:	3318      	adds	r3, #24
 8005e70:	4618      	mov	r0, r3
 8005e72:	f7ff f973 	bl	800515c <vListInitialiseItem>
 8005e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e7a:	611a      	str	r2, [r3, #16]
 8005e7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e7e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e84:	619a      	str	r2, [r3, #24]
 8005e86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e8a:	625a      	str	r2, [r3, #36]	; 0x24
 8005e8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e8e:	2200      	movs	r2, #0
 8005e90:	655a      	str	r2, [r3, #84]	; 0x54
 8005e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e94:	2200      	movs	r2, #0
 8005e96:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8005e9a:	683a      	ldr	r2, [r7, #0]
 8005e9c:	68f9      	ldr	r1, [r7, #12]
 8005e9e:	69b8      	ldr	r0, [r7, #24]
 8005ea0:	f001 f928 	bl	80070f4 <pxPortInitialiseStack>
 8005ea4:	4602      	mov	r2, r0
 8005ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ea8:	601a      	str	r2, [r3, #0]
 8005eaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d002      	beq.n	8005eb6 <prvInitialiseNewTask+0x116>
 8005eb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eb2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005eb4:	601a      	str	r2, [r3, #0]
 8005eb6:	bf00      	nop
 8005eb8:	3720      	adds	r7, #32
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bd80      	pop	{r7, pc}
	...

08005ec0 <prvAddNewTaskToReadyList>:
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b082      	sub	sp, #8
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
 8005ec8:	f001 fa44 	bl	8007354 <vPortEnterCritical>
 8005ecc:	4b2d      	ldr	r3, [pc, #180]	; (8005f84 <prvAddNewTaskToReadyList+0xc4>)
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	3301      	adds	r3, #1
 8005ed2:	4a2c      	ldr	r2, [pc, #176]	; (8005f84 <prvAddNewTaskToReadyList+0xc4>)
 8005ed4:	6013      	str	r3, [r2, #0]
 8005ed6:	4b2c      	ldr	r3, [pc, #176]	; (8005f88 <prvAddNewTaskToReadyList+0xc8>)
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d109      	bne.n	8005ef2 <prvAddNewTaskToReadyList+0x32>
 8005ede:	4a2a      	ldr	r2, [pc, #168]	; (8005f88 <prvAddNewTaskToReadyList+0xc8>)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6013      	str	r3, [r2, #0]
 8005ee4:	4b27      	ldr	r3, [pc, #156]	; (8005f84 <prvAddNewTaskToReadyList+0xc4>)
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	2b01      	cmp	r3, #1
 8005eea:	d110      	bne.n	8005f0e <prvAddNewTaskToReadyList+0x4e>
 8005eec:	f000 fc16 	bl	800671c <prvInitialiseTaskLists>
 8005ef0:	e00d      	b.n	8005f0e <prvAddNewTaskToReadyList+0x4e>
 8005ef2:	4b26      	ldr	r3, [pc, #152]	; (8005f8c <prvAddNewTaskToReadyList+0xcc>)
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d109      	bne.n	8005f0e <prvAddNewTaskToReadyList+0x4e>
 8005efa:	4b23      	ldr	r3, [pc, #140]	; (8005f88 <prvAddNewTaskToReadyList+0xc8>)
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f04:	429a      	cmp	r2, r3
 8005f06:	d802      	bhi.n	8005f0e <prvAddNewTaskToReadyList+0x4e>
 8005f08:	4a1f      	ldr	r2, [pc, #124]	; (8005f88 <prvAddNewTaskToReadyList+0xc8>)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6013      	str	r3, [r2, #0]
 8005f0e:	4b20      	ldr	r3, [pc, #128]	; (8005f90 <prvAddNewTaskToReadyList+0xd0>)
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	3301      	adds	r3, #1
 8005f14:	4a1e      	ldr	r2, [pc, #120]	; (8005f90 <prvAddNewTaskToReadyList+0xd0>)
 8005f16:	6013      	str	r3, [r2, #0]
 8005f18:	4b1d      	ldr	r3, [pc, #116]	; (8005f90 <prvAddNewTaskToReadyList+0xd0>)
 8005f1a:	681a      	ldr	r2, [r3, #0]
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	645a      	str	r2, [r3, #68]	; 0x44
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f24:	4b1b      	ldr	r3, [pc, #108]	; (8005f94 <prvAddNewTaskToReadyList+0xd4>)
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	429a      	cmp	r2, r3
 8005f2a:	d903      	bls.n	8005f34 <prvAddNewTaskToReadyList+0x74>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f30:	4a18      	ldr	r2, [pc, #96]	; (8005f94 <prvAddNewTaskToReadyList+0xd4>)
 8005f32:	6013      	str	r3, [r2, #0]
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f38:	4613      	mov	r3, r2
 8005f3a:	009b      	lsls	r3, r3, #2
 8005f3c:	4413      	add	r3, r2
 8005f3e:	009b      	lsls	r3, r3, #2
 8005f40:	4a15      	ldr	r2, [pc, #84]	; (8005f98 <prvAddNewTaskToReadyList+0xd8>)
 8005f42:	441a      	add	r2, r3
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	3304      	adds	r3, #4
 8005f48:	4619      	mov	r1, r3
 8005f4a:	4610      	mov	r0, r2
 8005f4c:	f7ff f913 	bl	8005176 <vListInsertEnd>
 8005f50:	f001 fa30 	bl	80073b4 <vPortExitCritical>
 8005f54:	4b0d      	ldr	r3, [pc, #52]	; (8005f8c <prvAddNewTaskToReadyList+0xcc>)
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d00e      	beq.n	8005f7a <prvAddNewTaskToReadyList+0xba>
 8005f5c:	4b0a      	ldr	r3, [pc, #40]	; (8005f88 <prvAddNewTaskToReadyList+0xc8>)
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f66:	429a      	cmp	r2, r3
 8005f68:	d207      	bcs.n	8005f7a <prvAddNewTaskToReadyList+0xba>
 8005f6a:	4b0c      	ldr	r3, [pc, #48]	; (8005f9c <prvAddNewTaskToReadyList+0xdc>)
 8005f6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f70:	601a      	str	r2, [r3, #0]
 8005f72:	f3bf 8f4f 	dsb	sy
 8005f76:	f3bf 8f6f 	isb	sy
 8005f7a:	bf00      	nop
 8005f7c:	3708      	adds	r7, #8
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	bd80      	pop	{r7, pc}
 8005f82:	bf00      	nop
 8005f84:	20000dc4 	.word	0x20000dc4
 8005f88:	200008f0 	.word	0x200008f0
 8005f8c:	20000dd0 	.word	0x20000dd0
 8005f90:	20000de0 	.word	0x20000de0
 8005f94:	20000dcc 	.word	0x20000dcc
 8005f98:	200008f4 	.word	0x200008f4
 8005f9c:	e000ed04 	.word	0xe000ed04

08005fa0 <vTaskDelay>:
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b084      	sub	sp, #16
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
 8005fa8:	2300      	movs	r3, #0
 8005faa:	60fb      	str	r3, [r7, #12]
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d017      	beq.n	8005fe2 <vTaskDelay+0x42>
 8005fb2:	4b13      	ldr	r3, [pc, #76]	; (8006000 <vTaskDelay+0x60>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d00a      	beq.n	8005fd0 <vTaskDelay+0x30>
 8005fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fbe:	f383 8811 	msr	BASEPRI, r3
 8005fc2:	f3bf 8f6f 	isb	sy
 8005fc6:	f3bf 8f4f 	dsb	sy
 8005fca:	60bb      	str	r3, [r7, #8]
 8005fcc:	bf00      	nop
 8005fce:	e7fe      	b.n	8005fce <vTaskDelay+0x2e>
 8005fd0:	f000 f880 	bl	80060d4 <vTaskSuspendAll>
 8005fd4:	2100      	movs	r1, #0
 8005fd6:	6878      	ldr	r0, [r7, #4]
 8005fd8:	f000 fcea 	bl	80069b0 <prvAddCurrentTaskToDelayedList>
 8005fdc:	f000 f888 	bl	80060f0 <xTaskResumeAll>
 8005fe0:	60f8      	str	r0, [r7, #12]
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d107      	bne.n	8005ff8 <vTaskDelay+0x58>
 8005fe8:	4b06      	ldr	r3, [pc, #24]	; (8006004 <vTaskDelay+0x64>)
 8005fea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005fee:	601a      	str	r2, [r3, #0]
 8005ff0:	f3bf 8f4f 	dsb	sy
 8005ff4:	f3bf 8f6f 	isb	sy
 8005ff8:	bf00      	nop
 8005ffa:	3710      	adds	r7, #16
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	bd80      	pop	{r7, pc}
 8006000:	20000dec 	.word	0x20000dec
 8006004:	e000ed04 	.word	0xe000ed04

08006008 <vTaskStartScheduler>:
 8006008:	b580      	push	{r7, lr}
 800600a:	b08a      	sub	sp, #40	; 0x28
 800600c:	af04      	add	r7, sp, #16
 800600e:	2300      	movs	r3, #0
 8006010:	60bb      	str	r3, [r7, #8]
 8006012:	2300      	movs	r3, #0
 8006014:	607b      	str	r3, [r7, #4]
 8006016:	463a      	mov	r2, r7
 8006018:	1d39      	adds	r1, r7, #4
 800601a:	f107 0308 	add.w	r3, r7, #8
 800601e:	4618      	mov	r0, r3
 8006020:	f7ff f848 	bl	80050b4 <vApplicationGetIdleTaskMemory>
 8006024:	6839      	ldr	r1, [r7, #0]
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	68ba      	ldr	r2, [r7, #8]
 800602a:	9202      	str	r2, [sp, #8]
 800602c:	9301      	str	r3, [sp, #4]
 800602e:	2300      	movs	r3, #0
 8006030:	9300      	str	r3, [sp, #0]
 8006032:	2300      	movs	r3, #0
 8006034:	460a      	mov	r2, r1
 8006036:	4921      	ldr	r1, [pc, #132]	; (80060bc <vTaskStartScheduler+0xb4>)
 8006038:	4821      	ldr	r0, [pc, #132]	; (80060c0 <vTaskStartScheduler+0xb8>)
 800603a:	f7ff fe0f 	bl	8005c5c <xTaskCreateStatic>
 800603e:	4603      	mov	r3, r0
 8006040:	4a20      	ldr	r2, [pc, #128]	; (80060c4 <vTaskStartScheduler+0xbc>)
 8006042:	6013      	str	r3, [r2, #0]
 8006044:	4b1f      	ldr	r3, [pc, #124]	; (80060c4 <vTaskStartScheduler+0xbc>)
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d002      	beq.n	8006052 <vTaskStartScheduler+0x4a>
 800604c:	2301      	movs	r3, #1
 800604e:	617b      	str	r3, [r7, #20]
 8006050:	e001      	b.n	8006056 <vTaskStartScheduler+0x4e>
 8006052:	2300      	movs	r3, #0
 8006054:	617b      	str	r3, [r7, #20]
 8006056:	697b      	ldr	r3, [r7, #20]
 8006058:	2b01      	cmp	r3, #1
 800605a:	d102      	bne.n	8006062 <vTaskStartScheduler+0x5a>
 800605c:	f000 fcfc 	bl	8006a58 <xTimerCreateTimerTask>
 8006060:	6178      	str	r0, [r7, #20]
 8006062:	697b      	ldr	r3, [r7, #20]
 8006064:	2b01      	cmp	r3, #1
 8006066:	d116      	bne.n	8006096 <vTaskStartScheduler+0x8e>
 8006068:	f04f 0350 	mov.w	r3, #80	; 0x50
 800606c:	f383 8811 	msr	BASEPRI, r3
 8006070:	f3bf 8f6f 	isb	sy
 8006074:	f3bf 8f4f 	dsb	sy
 8006078:	613b      	str	r3, [r7, #16]
 800607a:	bf00      	nop
 800607c:	4b12      	ldr	r3, [pc, #72]	; (80060c8 <vTaskStartScheduler+0xc0>)
 800607e:	f04f 32ff 	mov.w	r2, #4294967295
 8006082:	601a      	str	r2, [r3, #0]
 8006084:	4b11      	ldr	r3, [pc, #68]	; (80060cc <vTaskStartScheduler+0xc4>)
 8006086:	2201      	movs	r2, #1
 8006088:	601a      	str	r2, [r3, #0]
 800608a:	4b11      	ldr	r3, [pc, #68]	; (80060d0 <vTaskStartScheduler+0xc8>)
 800608c:	2200      	movs	r2, #0
 800608e:	601a      	str	r2, [r3, #0]
 8006090:	f001 f8be 	bl	8007210 <xPortStartScheduler>
 8006094:	e00e      	b.n	80060b4 <vTaskStartScheduler+0xac>
 8006096:	697b      	ldr	r3, [r7, #20]
 8006098:	f1b3 3fff 	cmp.w	r3, #4294967295
 800609c:	d10a      	bne.n	80060b4 <vTaskStartScheduler+0xac>
 800609e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060a2:	f383 8811 	msr	BASEPRI, r3
 80060a6:	f3bf 8f6f 	isb	sy
 80060aa:	f3bf 8f4f 	dsb	sy
 80060ae:	60fb      	str	r3, [r7, #12]
 80060b0:	bf00      	nop
 80060b2:	e7fe      	b.n	80060b2 <vTaskStartScheduler+0xaa>
 80060b4:	bf00      	nop
 80060b6:	3718      	adds	r7, #24
 80060b8:	46bd      	mov	sp, r7
 80060ba:	bd80      	pop	{r7, pc}
 80060bc:	08007a54 	.word	0x08007a54
 80060c0:	080066ed 	.word	0x080066ed
 80060c4:	20000de8 	.word	0x20000de8
 80060c8:	20000de4 	.word	0x20000de4
 80060cc:	20000dd0 	.word	0x20000dd0
 80060d0:	20000dc8 	.word	0x20000dc8

080060d4 <vTaskSuspendAll>:
 80060d4:	b480      	push	{r7}
 80060d6:	af00      	add	r7, sp, #0
 80060d8:	4b04      	ldr	r3, [pc, #16]	; (80060ec <vTaskSuspendAll+0x18>)
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	3301      	adds	r3, #1
 80060de:	4a03      	ldr	r2, [pc, #12]	; (80060ec <vTaskSuspendAll+0x18>)
 80060e0:	6013      	str	r3, [r2, #0]
 80060e2:	bf00      	nop
 80060e4:	46bd      	mov	sp, r7
 80060e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ea:	4770      	bx	lr
 80060ec:	20000dec 	.word	0x20000dec

080060f0 <xTaskResumeAll>:
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b084      	sub	sp, #16
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	2300      	movs	r3, #0
 80060f8:	60fb      	str	r3, [r7, #12]
 80060fa:	2300      	movs	r3, #0
 80060fc:	60bb      	str	r3, [r7, #8]
 80060fe:	4b42      	ldr	r3, [pc, #264]	; (8006208 <xTaskResumeAll+0x118>)
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d10a      	bne.n	800611c <xTaskResumeAll+0x2c>
 8006106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800610a:	f383 8811 	msr	BASEPRI, r3
 800610e:	f3bf 8f6f 	isb	sy
 8006112:	f3bf 8f4f 	dsb	sy
 8006116:	603b      	str	r3, [r7, #0]
 8006118:	bf00      	nop
 800611a:	e7fe      	b.n	800611a <xTaskResumeAll+0x2a>
 800611c:	f001 f91a 	bl	8007354 <vPortEnterCritical>
 8006120:	4b39      	ldr	r3, [pc, #228]	; (8006208 <xTaskResumeAll+0x118>)
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	3b01      	subs	r3, #1
 8006126:	4a38      	ldr	r2, [pc, #224]	; (8006208 <xTaskResumeAll+0x118>)
 8006128:	6013      	str	r3, [r2, #0]
 800612a:	4b37      	ldr	r3, [pc, #220]	; (8006208 <xTaskResumeAll+0x118>)
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d162      	bne.n	80061f8 <xTaskResumeAll+0x108>
 8006132:	4b36      	ldr	r3, [pc, #216]	; (800620c <xTaskResumeAll+0x11c>)
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d05e      	beq.n	80061f8 <xTaskResumeAll+0x108>
 800613a:	e02f      	b.n	800619c <xTaskResumeAll+0xac>
 800613c:	4b34      	ldr	r3, [pc, #208]	; (8006210 <xTaskResumeAll+0x120>)
 800613e:	68db      	ldr	r3, [r3, #12]
 8006140:	68db      	ldr	r3, [r3, #12]
 8006142:	60fb      	str	r3, [r7, #12]
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	3318      	adds	r3, #24
 8006148:	4618      	mov	r0, r3
 800614a:	f7ff f871 	bl	8005230 <uxListRemove>
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	3304      	adds	r3, #4
 8006152:	4618      	mov	r0, r3
 8006154:	f7ff f86c 	bl	8005230 <uxListRemove>
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800615c:	4b2d      	ldr	r3, [pc, #180]	; (8006214 <xTaskResumeAll+0x124>)
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	429a      	cmp	r2, r3
 8006162:	d903      	bls.n	800616c <xTaskResumeAll+0x7c>
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006168:	4a2a      	ldr	r2, [pc, #168]	; (8006214 <xTaskResumeAll+0x124>)
 800616a:	6013      	str	r3, [r2, #0]
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006170:	4613      	mov	r3, r2
 8006172:	009b      	lsls	r3, r3, #2
 8006174:	4413      	add	r3, r2
 8006176:	009b      	lsls	r3, r3, #2
 8006178:	4a27      	ldr	r2, [pc, #156]	; (8006218 <xTaskResumeAll+0x128>)
 800617a:	441a      	add	r2, r3
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	3304      	adds	r3, #4
 8006180:	4619      	mov	r1, r3
 8006182:	4610      	mov	r0, r2
 8006184:	f7fe fff7 	bl	8005176 <vListInsertEnd>
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800618c:	4b23      	ldr	r3, [pc, #140]	; (800621c <xTaskResumeAll+0x12c>)
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006192:	429a      	cmp	r2, r3
 8006194:	d302      	bcc.n	800619c <xTaskResumeAll+0xac>
 8006196:	4b22      	ldr	r3, [pc, #136]	; (8006220 <xTaskResumeAll+0x130>)
 8006198:	2201      	movs	r2, #1
 800619a:	601a      	str	r2, [r3, #0]
 800619c:	4b1c      	ldr	r3, [pc, #112]	; (8006210 <xTaskResumeAll+0x120>)
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d1cb      	bne.n	800613c <xTaskResumeAll+0x4c>
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d001      	beq.n	80061ae <xTaskResumeAll+0xbe>
 80061aa:	f000 fb55 	bl	8006858 <prvResetNextTaskUnblockTime>
 80061ae:	4b1d      	ldr	r3, [pc, #116]	; (8006224 <xTaskResumeAll+0x134>)
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	607b      	str	r3, [r7, #4]
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d010      	beq.n	80061dc <xTaskResumeAll+0xec>
 80061ba:	f000 f847 	bl	800624c <xTaskIncrementTick>
 80061be:	4603      	mov	r3, r0
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d002      	beq.n	80061ca <xTaskResumeAll+0xda>
 80061c4:	4b16      	ldr	r3, [pc, #88]	; (8006220 <xTaskResumeAll+0x130>)
 80061c6:	2201      	movs	r2, #1
 80061c8:	601a      	str	r2, [r3, #0]
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	3b01      	subs	r3, #1
 80061ce:	607b      	str	r3, [r7, #4]
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d1f1      	bne.n	80061ba <xTaskResumeAll+0xca>
 80061d6:	4b13      	ldr	r3, [pc, #76]	; (8006224 <xTaskResumeAll+0x134>)
 80061d8:	2200      	movs	r2, #0
 80061da:	601a      	str	r2, [r3, #0]
 80061dc:	4b10      	ldr	r3, [pc, #64]	; (8006220 <xTaskResumeAll+0x130>)
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d009      	beq.n	80061f8 <xTaskResumeAll+0x108>
 80061e4:	2301      	movs	r3, #1
 80061e6:	60bb      	str	r3, [r7, #8]
 80061e8:	4b0f      	ldr	r3, [pc, #60]	; (8006228 <xTaskResumeAll+0x138>)
 80061ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061ee:	601a      	str	r2, [r3, #0]
 80061f0:	f3bf 8f4f 	dsb	sy
 80061f4:	f3bf 8f6f 	isb	sy
 80061f8:	f001 f8dc 	bl	80073b4 <vPortExitCritical>
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	4618      	mov	r0, r3
 8006200:	3710      	adds	r7, #16
 8006202:	46bd      	mov	sp, r7
 8006204:	bd80      	pop	{r7, pc}
 8006206:	bf00      	nop
 8006208:	20000dec 	.word	0x20000dec
 800620c:	20000dc4 	.word	0x20000dc4
 8006210:	20000d84 	.word	0x20000d84
 8006214:	20000dcc 	.word	0x20000dcc
 8006218:	200008f4 	.word	0x200008f4
 800621c:	200008f0 	.word	0x200008f0
 8006220:	20000dd8 	.word	0x20000dd8
 8006224:	20000dd4 	.word	0x20000dd4
 8006228:	e000ed04 	.word	0xe000ed04

0800622c <xTaskGetTickCount>:
 800622c:	b480      	push	{r7}
 800622e:	b083      	sub	sp, #12
 8006230:	af00      	add	r7, sp, #0
 8006232:	4b05      	ldr	r3, [pc, #20]	; (8006248 <xTaskGetTickCount+0x1c>)
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	607b      	str	r3, [r7, #4]
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	4618      	mov	r0, r3
 800623c:	370c      	adds	r7, #12
 800623e:	46bd      	mov	sp, r7
 8006240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006244:	4770      	bx	lr
 8006246:	bf00      	nop
 8006248:	20000dc8 	.word	0x20000dc8

0800624c <xTaskIncrementTick>:
 800624c:	b580      	push	{r7, lr}
 800624e:	b086      	sub	sp, #24
 8006250:	af00      	add	r7, sp, #0
 8006252:	2300      	movs	r3, #0
 8006254:	617b      	str	r3, [r7, #20]
 8006256:	4b4f      	ldr	r3, [pc, #316]	; (8006394 <xTaskIncrementTick+0x148>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	2b00      	cmp	r3, #0
 800625c:	f040 808f 	bne.w	800637e <xTaskIncrementTick+0x132>
 8006260:	4b4d      	ldr	r3, [pc, #308]	; (8006398 <xTaskIncrementTick+0x14c>)
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	3301      	adds	r3, #1
 8006266:	613b      	str	r3, [r7, #16]
 8006268:	4a4b      	ldr	r2, [pc, #300]	; (8006398 <xTaskIncrementTick+0x14c>)
 800626a:	693b      	ldr	r3, [r7, #16]
 800626c:	6013      	str	r3, [r2, #0]
 800626e:	693b      	ldr	r3, [r7, #16]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d120      	bne.n	80062b6 <xTaskIncrementTick+0x6a>
 8006274:	4b49      	ldr	r3, [pc, #292]	; (800639c <xTaskIncrementTick+0x150>)
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d00a      	beq.n	8006294 <xTaskIncrementTick+0x48>
 800627e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006282:	f383 8811 	msr	BASEPRI, r3
 8006286:	f3bf 8f6f 	isb	sy
 800628a:	f3bf 8f4f 	dsb	sy
 800628e:	603b      	str	r3, [r7, #0]
 8006290:	bf00      	nop
 8006292:	e7fe      	b.n	8006292 <xTaskIncrementTick+0x46>
 8006294:	4b41      	ldr	r3, [pc, #260]	; (800639c <xTaskIncrementTick+0x150>)
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	60fb      	str	r3, [r7, #12]
 800629a:	4b41      	ldr	r3, [pc, #260]	; (80063a0 <xTaskIncrementTick+0x154>)
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	4a3f      	ldr	r2, [pc, #252]	; (800639c <xTaskIncrementTick+0x150>)
 80062a0:	6013      	str	r3, [r2, #0]
 80062a2:	4a3f      	ldr	r2, [pc, #252]	; (80063a0 <xTaskIncrementTick+0x154>)
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	6013      	str	r3, [r2, #0]
 80062a8:	4b3e      	ldr	r3, [pc, #248]	; (80063a4 <xTaskIncrementTick+0x158>)
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	3301      	adds	r3, #1
 80062ae:	4a3d      	ldr	r2, [pc, #244]	; (80063a4 <xTaskIncrementTick+0x158>)
 80062b0:	6013      	str	r3, [r2, #0]
 80062b2:	f000 fad1 	bl	8006858 <prvResetNextTaskUnblockTime>
 80062b6:	4b3c      	ldr	r3, [pc, #240]	; (80063a8 <xTaskIncrementTick+0x15c>)
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	693a      	ldr	r2, [r7, #16]
 80062bc:	429a      	cmp	r2, r3
 80062be:	d349      	bcc.n	8006354 <xTaskIncrementTick+0x108>
 80062c0:	4b36      	ldr	r3, [pc, #216]	; (800639c <xTaskIncrementTick+0x150>)
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d104      	bne.n	80062d4 <xTaskIncrementTick+0x88>
 80062ca:	4b37      	ldr	r3, [pc, #220]	; (80063a8 <xTaskIncrementTick+0x15c>)
 80062cc:	f04f 32ff 	mov.w	r2, #4294967295
 80062d0:	601a      	str	r2, [r3, #0]
 80062d2:	e03f      	b.n	8006354 <xTaskIncrementTick+0x108>
 80062d4:	4b31      	ldr	r3, [pc, #196]	; (800639c <xTaskIncrementTick+0x150>)
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	68db      	ldr	r3, [r3, #12]
 80062da:	68db      	ldr	r3, [r3, #12]
 80062dc:	60bb      	str	r3, [r7, #8]
 80062de:	68bb      	ldr	r3, [r7, #8]
 80062e0:	685b      	ldr	r3, [r3, #4]
 80062e2:	607b      	str	r3, [r7, #4]
 80062e4:	693a      	ldr	r2, [r7, #16]
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	429a      	cmp	r2, r3
 80062ea:	d203      	bcs.n	80062f4 <xTaskIncrementTick+0xa8>
 80062ec:	4a2e      	ldr	r2, [pc, #184]	; (80063a8 <xTaskIncrementTick+0x15c>)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6013      	str	r3, [r2, #0]
 80062f2:	e02f      	b.n	8006354 <xTaskIncrementTick+0x108>
 80062f4:	68bb      	ldr	r3, [r7, #8]
 80062f6:	3304      	adds	r3, #4
 80062f8:	4618      	mov	r0, r3
 80062fa:	f7fe ff99 	bl	8005230 <uxListRemove>
 80062fe:	68bb      	ldr	r3, [r7, #8]
 8006300:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006302:	2b00      	cmp	r3, #0
 8006304:	d004      	beq.n	8006310 <xTaskIncrementTick+0xc4>
 8006306:	68bb      	ldr	r3, [r7, #8]
 8006308:	3318      	adds	r3, #24
 800630a:	4618      	mov	r0, r3
 800630c:	f7fe ff90 	bl	8005230 <uxListRemove>
 8006310:	68bb      	ldr	r3, [r7, #8]
 8006312:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006314:	4b25      	ldr	r3, [pc, #148]	; (80063ac <xTaskIncrementTick+0x160>)
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	429a      	cmp	r2, r3
 800631a:	d903      	bls.n	8006324 <xTaskIncrementTick+0xd8>
 800631c:	68bb      	ldr	r3, [r7, #8]
 800631e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006320:	4a22      	ldr	r2, [pc, #136]	; (80063ac <xTaskIncrementTick+0x160>)
 8006322:	6013      	str	r3, [r2, #0]
 8006324:	68bb      	ldr	r3, [r7, #8]
 8006326:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006328:	4613      	mov	r3, r2
 800632a:	009b      	lsls	r3, r3, #2
 800632c:	4413      	add	r3, r2
 800632e:	009b      	lsls	r3, r3, #2
 8006330:	4a1f      	ldr	r2, [pc, #124]	; (80063b0 <xTaskIncrementTick+0x164>)
 8006332:	441a      	add	r2, r3
 8006334:	68bb      	ldr	r3, [r7, #8]
 8006336:	3304      	adds	r3, #4
 8006338:	4619      	mov	r1, r3
 800633a:	4610      	mov	r0, r2
 800633c:	f7fe ff1b 	bl	8005176 <vListInsertEnd>
 8006340:	68bb      	ldr	r3, [r7, #8]
 8006342:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006344:	4b1b      	ldr	r3, [pc, #108]	; (80063b4 <xTaskIncrementTick+0x168>)
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800634a:	429a      	cmp	r2, r3
 800634c:	d3b8      	bcc.n	80062c0 <xTaskIncrementTick+0x74>
 800634e:	2301      	movs	r3, #1
 8006350:	617b      	str	r3, [r7, #20]
 8006352:	e7b5      	b.n	80062c0 <xTaskIncrementTick+0x74>
 8006354:	4b17      	ldr	r3, [pc, #92]	; (80063b4 <xTaskIncrementTick+0x168>)
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800635a:	4915      	ldr	r1, [pc, #84]	; (80063b0 <xTaskIncrementTick+0x164>)
 800635c:	4613      	mov	r3, r2
 800635e:	009b      	lsls	r3, r3, #2
 8006360:	4413      	add	r3, r2
 8006362:	009b      	lsls	r3, r3, #2
 8006364:	440b      	add	r3, r1
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	2b01      	cmp	r3, #1
 800636a:	d901      	bls.n	8006370 <xTaskIncrementTick+0x124>
 800636c:	2301      	movs	r3, #1
 800636e:	617b      	str	r3, [r7, #20]
 8006370:	4b11      	ldr	r3, [pc, #68]	; (80063b8 <xTaskIncrementTick+0x16c>)
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d007      	beq.n	8006388 <xTaskIncrementTick+0x13c>
 8006378:	2301      	movs	r3, #1
 800637a:	617b      	str	r3, [r7, #20]
 800637c:	e004      	b.n	8006388 <xTaskIncrementTick+0x13c>
 800637e:	4b0f      	ldr	r3, [pc, #60]	; (80063bc <xTaskIncrementTick+0x170>)
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	3301      	adds	r3, #1
 8006384:	4a0d      	ldr	r2, [pc, #52]	; (80063bc <xTaskIncrementTick+0x170>)
 8006386:	6013      	str	r3, [r2, #0]
 8006388:	697b      	ldr	r3, [r7, #20]
 800638a:	4618      	mov	r0, r3
 800638c:	3718      	adds	r7, #24
 800638e:	46bd      	mov	sp, r7
 8006390:	bd80      	pop	{r7, pc}
 8006392:	bf00      	nop
 8006394:	20000dec 	.word	0x20000dec
 8006398:	20000dc8 	.word	0x20000dc8
 800639c:	20000d7c 	.word	0x20000d7c
 80063a0:	20000d80 	.word	0x20000d80
 80063a4:	20000ddc 	.word	0x20000ddc
 80063a8:	20000de4 	.word	0x20000de4
 80063ac:	20000dcc 	.word	0x20000dcc
 80063b0:	200008f4 	.word	0x200008f4
 80063b4:	200008f0 	.word	0x200008f0
 80063b8:	20000dd8 	.word	0x20000dd8
 80063bc:	20000dd4 	.word	0x20000dd4

080063c0 <vTaskSwitchContext>:
 80063c0:	b480      	push	{r7}
 80063c2:	b085      	sub	sp, #20
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	4b28      	ldr	r3, [pc, #160]	; (8006468 <vTaskSwitchContext+0xa8>)
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d003      	beq.n	80063d6 <vTaskSwitchContext+0x16>
 80063ce:	4b27      	ldr	r3, [pc, #156]	; (800646c <vTaskSwitchContext+0xac>)
 80063d0:	2201      	movs	r2, #1
 80063d2:	601a      	str	r2, [r3, #0]
 80063d4:	e041      	b.n	800645a <vTaskSwitchContext+0x9a>
 80063d6:	4b25      	ldr	r3, [pc, #148]	; (800646c <vTaskSwitchContext+0xac>)
 80063d8:	2200      	movs	r2, #0
 80063da:	601a      	str	r2, [r3, #0]
 80063dc:	4b24      	ldr	r3, [pc, #144]	; (8006470 <vTaskSwitchContext+0xb0>)
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	60fb      	str	r3, [r7, #12]
 80063e2:	e010      	b.n	8006406 <vTaskSwitchContext+0x46>
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d10a      	bne.n	8006400 <vTaskSwitchContext+0x40>
 80063ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063ee:	f383 8811 	msr	BASEPRI, r3
 80063f2:	f3bf 8f6f 	isb	sy
 80063f6:	f3bf 8f4f 	dsb	sy
 80063fa:	607b      	str	r3, [r7, #4]
 80063fc:	bf00      	nop
 80063fe:	e7fe      	b.n	80063fe <vTaskSwitchContext+0x3e>
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	3b01      	subs	r3, #1
 8006404:	60fb      	str	r3, [r7, #12]
 8006406:	491b      	ldr	r1, [pc, #108]	; (8006474 <vTaskSwitchContext+0xb4>)
 8006408:	68fa      	ldr	r2, [r7, #12]
 800640a:	4613      	mov	r3, r2
 800640c:	009b      	lsls	r3, r3, #2
 800640e:	4413      	add	r3, r2
 8006410:	009b      	lsls	r3, r3, #2
 8006412:	440b      	add	r3, r1
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d0e4      	beq.n	80063e4 <vTaskSwitchContext+0x24>
 800641a:	68fa      	ldr	r2, [r7, #12]
 800641c:	4613      	mov	r3, r2
 800641e:	009b      	lsls	r3, r3, #2
 8006420:	4413      	add	r3, r2
 8006422:	009b      	lsls	r3, r3, #2
 8006424:	4a13      	ldr	r2, [pc, #76]	; (8006474 <vTaskSwitchContext+0xb4>)
 8006426:	4413      	add	r3, r2
 8006428:	60bb      	str	r3, [r7, #8]
 800642a:	68bb      	ldr	r3, [r7, #8]
 800642c:	685b      	ldr	r3, [r3, #4]
 800642e:	685a      	ldr	r2, [r3, #4]
 8006430:	68bb      	ldr	r3, [r7, #8]
 8006432:	605a      	str	r2, [r3, #4]
 8006434:	68bb      	ldr	r3, [r7, #8]
 8006436:	685a      	ldr	r2, [r3, #4]
 8006438:	68bb      	ldr	r3, [r7, #8]
 800643a:	3308      	adds	r3, #8
 800643c:	429a      	cmp	r2, r3
 800643e:	d104      	bne.n	800644a <vTaskSwitchContext+0x8a>
 8006440:	68bb      	ldr	r3, [r7, #8]
 8006442:	685b      	ldr	r3, [r3, #4]
 8006444:	685a      	ldr	r2, [r3, #4]
 8006446:	68bb      	ldr	r3, [r7, #8]
 8006448:	605a      	str	r2, [r3, #4]
 800644a:	68bb      	ldr	r3, [r7, #8]
 800644c:	685b      	ldr	r3, [r3, #4]
 800644e:	68db      	ldr	r3, [r3, #12]
 8006450:	4a09      	ldr	r2, [pc, #36]	; (8006478 <vTaskSwitchContext+0xb8>)
 8006452:	6013      	str	r3, [r2, #0]
 8006454:	4a06      	ldr	r2, [pc, #24]	; (8006470 <vTaskSwitchContext+0xb0>)
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	6013      	str	r3, [r2, #0]
 800645a:	bf00      	nop
 800645c:	3714      	adds	r7, #20
 800645e:	46bd      	mov	sp, r7
 8006460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006464:	4770      	bx	lr
 8006466:	bf00      	nop
 8006468:	20000dec 	.word	0x20000dec
 800646c:	20000dd8 	.word	0x20000dd8
 8006470:	20000dcc 	.word	0x20000dcc
 8006474:	200008f4 	.word	0x200008f4
 8006478:	200008f0 	.word	0x200008f0

0800647c <vTaskPlaceOnEventList>:
 800647c:	b580      	push	{r7, lr}
 800647e:	b084      	sub	sp, #16
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
 8006484:	6039      	str	r1, [r7, #0]
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d10a      	bne.n	80064a2 <vTaskPlaceOnEventList+0x26>
 800648c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006490:	f383 8811 	msr	BASEPRI, r3
 8006494:	f3bf 8f6f 	isb	sy
 8006498:	f3bf 8f4f 	dsb	sy
 800649c:	60fb      	str	r3, [r7, #12]
 800649e:	bf00      	nop
 80064a0:	e7fe      	b.n	80064a0 <vTaskPlaceOnEventList+0x24>
 80064a2:	4b07      	ldr	r3, [pc, #28]	; (80064c0 <vTaskPlaceOnEventList+0x44>)
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	3318      	adds	r3, #24
 80064a8:	4619      	mov	r1, r3
 80064aa:	6878      	ldr	r0, [r7, #4]
 80064ac:	f7fe fe87 	bl	80051be <vListInsert>
 80064b0:	2101      	movs	r1, #1
 80064b2:	6838      	ldr	r0, [r7, #0]
 80064b4:	f000 fa7c 	bl	80069b0 <prvAddCurrentTaskToDelayedList>
 80064b8:	bf00      	nop
 80064ba:	3710      	adds	r7, #16
 80064bc:	46bd      	mov	sp, r7
 80064be:	bd80      	pop	{r7, pc}
 80064c0:	200008f0 	.word	0x200008f0

080064c4 <vTaskPlaceOnEventListRestricted>:
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b086      	sub	sp, #24
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	60f8      	str	r0, [r7, #12]
 80064cc:	60b9      	str	r1, [r7, #8]
 80064ce:	607a      	str	r2, [r7, #4]
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d10a      	bne.n	80064ec <vTaskPlaceOnEventListRestricted+0x28>
 80064d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064da:	f383 8811 	msr	BASEPRI, r3
 80064de:	f3bf 8f6f 	isb	sy
 80064e2:	f3bf 8f4f 	dsb	sy
 80064e6:	617b      	str	r3, [r7, #20]
 80064e8:	bf00      	nop
 80064ea:	e7fe      	b.n	80064ea <vTaskPlaceOnEventListRestricted+0x26>
 80064ec:	4b0a      	ldr	r3, [pc, #40]	; (8006518 <vTaskPlaceOnEventListRestricted+0x54>)
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	3318      	adds	r3, #24
 80064f2:	4619      	mov	r1, r3
 80064f4:	68f8      	ldr	r0, [r7, #12]
 80064f6:	f7fe fe3e 	bl	8005176 <vListInsertEnd>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d002      	beq.n	8006506 <vTaskPlaceOnEventListRestricted+0x42>
 8006500:	f04f 33ff 	mov.w	r3, #4294967295
 8006504:	60bb      	str	r3, [r7, #8]
 8006506:	6879      	ldr	r1, [r7, #4]
 8006508:	68b8      	ldr	r0, [r7, #8]
 800650a:	f000 fa51 	bl	80069b0 <prvAddCurrentTaskToDelayedList>
 800650e:	bf00      	nop
 8006510:	3718      	adds	r7, #24
 8006512:	46bd      	mov	sp, r7
 8006514:	bd80      	pop	{r7, pc}
 8006516:	bf00      	nop
 8006518:	200008f0 	.word	0x200008f0

0800651c <xTaskRemoveFromEventList>:
 800651c:	b580      	push	{r7, lr}
 800651e:	b086      	sub	sp, #24
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	68db      	ldr	r3, [r3, #12]
 8006528:	68db      	ldr	r3, [r3, #12]
 800652a:	613b      	str	r3, [r7, #16]
 800652c:	693b      	ldr	r3, [r7, #16]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d10a      	bne.n	8006548 <xTaskRemoveFromEventList+0x2c>
 8006532:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006536:	f383 8811 	msr	BASEPRI, r3
 800653a:	f3bf 8f6f 	isb	sy
 800653e:	f3bf 8f4f 	dsb	sy
 8006542:	60fb      	str	r3, [r7, #12]
 8006544:	bf00      	nop
 8006546:	e7fe      	b.n	8006546 <xTaskRemoveFromEventList+0x2a>
 8006548:	693b      	ldr	r3, [r7, #16]
 800654a:	3318      	adds	r3, #24
 800654c:	4618      	mov	r0, r3
 800654e:	f7fe fe6f 	bl	8005230 <uxListRemove>
 8006552:	4b1e      	ldr	r3, [pc, #120]	; (80065cc <xTaskRemoveFromEventList+0xb0>)
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d11d      	bne.n	8006596 <xTaskRemoveFromEventList+0x7a>
 800655a:	693b      	ldr	r3, [r7, #16]
 800655c:	3304      	adds	r3, #4
 800655e:	4618      	mov	r0, r3
 8006560:	f7fe fe66 	bl	8005230 <uxListRemove>
 8006564:	693b      	ldr	r3, [r7, #16]
 8006566:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006568:	4b19      	ldr	r3, [pc, #100]	; (80065d0 <xTaskRemoveFromEventList+0xb4>)
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	429a      	cmp	r2, r3
 800656e:	d903      	bls.n	8006578 <xTaskRemoveFromEventList+0x5c>
 8006570:	693b      	ldr	r3, [r7, #16]
 8006572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006574:	4a16      	ldr	r2, [pc, #88]	; (80065d0 <xTaskRemoveFromEventList+0xb4>)
 8006576:	6013      	str	r3, [r2, #0]
 8006578:	693b      	ldr	r3, [r7, #16]
 800657a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800657c:	4613      	mov	r3, r2
 800657e:	009b      	lsls	r3, r3, #2
 8006580:	4413      	add	r3, r2
 8006582:	009b      	lsls	r3, r3, #2
 8006584:	4a13      	ldr	r2, [pc, #76]	; (80065d4 <xTaskRemoveFromEventList+0xb8>)
 8006586:	441a      	add	r2, r3
 8006588:	693b      	ldr	r3, [r7, #16]
 800658a:	3304      	adds	r3, #4
 800658c:	4619      	mov	r1, r3
 800658e:	4610      	mov	r0, r2
 8006590:	f7fe fdf1 	bl	8005176 <vListInsertEnd>
 8006594:	e005      	b.n	80065a2 <xTaskRemoveFromEventList+0x86>
 8006596:	693b      	ldr	r3, [r7, #16]
 8006598:	3318      	adds	r3, #24
 800659a:	4619      	mov	r1, r3
 800659c:	480e      	ldr	r0, [pc, #56]	; (80065d8 <xTaskRemoveFromEventList+0xbc>)
 800659e:	f7fe fdea 	bl	8005176 <vListInsertEnd>
 80065a2:	693b      	ldr	r3, [r7, #16]
 80065a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065a6:	4b0d      	ldr	r3, [pc, #52]	; (80065dc <xTaskRemoveFromEventList+0xc0>)
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065ac:	429a      	cmp	r2, r3
 80065ae:	d905      	bls.n	80065bc <xTaskRemoveFromEventList+0xa0>
 80065b0:	2301      	movs	r3, #1
 80065b2:	617b      	str	r3, [r7, #20]
 80065b4:	4b0a      	ldr	r3, [pc, #40]	; (80065e0 <xTaskRemoveFromEventList+0xc4>)
 80065b6:	2201      	movs	r2, #1
 80065b8:	601a      	str	r2, [r3, #0]
 80065ba:	e001      	b.n	80065c0 <xTaskRemoveFromEventList+0xa4>
 80065bc:	2300      	movs	r3, #0
 80065be:	617b      	str	r3, [r7, #20]
 80065c0:	697b      	ldr	r3, [r7, #20]
 80065c2:	4618      	mov	r0, r3
 80065c4:	3718      	adds	r7, #24
 80065c6:	46bd      	mov	sp, r7
 80065c8:	bd80      	pop	{r7, pc}
 80065ca:	bf00      	nop
 80065cc:	20000dec 	.word	0x20000dec
 80065d0:	20000dcc 	.word	0x20000dcc
 80065d4:	200008f4 	.word	0x200008f4
 80065d8:	20000d84 	.word	0x20000d84
 80065dc:	200008f0 	.word	0x200008f0
 80065e0:	20000dd8 	.word	0x20000dd8

080065e4 <vTaskInternalSetTimeOutState>:
 80065e4:	b480      	push	{r7}
 80065e6:	b083      	sub	sp, #12
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
 80065ec:	4b06      	ldr	r3, [pc, #24]	; (8006608 <vTaskInternalSetTimeOutState+0x24>)
 80065ee:	681a      	ldr	r2, [r3, #0]
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	601a      	str	r2, [r3, #0]
 80065f4:	4b05      	ldr	r3, [pc, #20]	; (800660c <vTaskInternalSetTimeOutState+0x28>)
 80065f6:	681a      	ldr	r2, [r3, #0]
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	605a      	str	r2, [r3, #4]
 80065fc:	bf00      	nop
 80065fe:	370c      	adds	r7, #12
 8006600:	46bd      	mov	sp, r7
 8006602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006606:	4770      	bx	lr
 8006608:	20000ddc 	.word	0x20000ddc
 800660c:	20000dc8 	.word	0x20000dc8

08006610 <xTaskCheckForTimeOut>:
 8006610:	b580      	push	{r7, lr}
 8006612:	b088      	sub	sp, #32
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
 8006618:	6039      	str	r1, [r7, #0]
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d10a      	bne.n	8006636 <xTaskCheckForTimeOut+0x26>
 8006620:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006624:	f383 8811 	msr	BASEPRI, r3
 8006628:	f3bf 8f6f 	isb	sy
 800662c:	f3bf 8f4f 	dsb	sy
 8006630:	613b      	str	r3, [r7, #16]
 8006632:	bf00      	nop
 8006634:	e7fe      	b.n	8006634 <xTaskCheckForTimeOut+0x24>
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d10a      	bne.n	8006652 <xTaskCheckForTimeOut+0x42>
 800663c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006640:	f383 8811 	msr	BASEPRI, r3
 8006644:	f3bf 8f6f 	isb	sy
 8006648:	f3bf 8f4f 	dsb	sy
 800664c:	60fb      	str	r3, [r7, #12]
 800664e:	bf00      	nop
 8006650:	e7fe      	b.n	8006650 <xTaskCheckForTimeOut+0x40>
 8006652:	f000 fe7f 	bl	8007354 <vPortEnterCritical>
 8006656:	4b1d      	ldr	r3, [pc, #116]	; (80066cc <xTaskCheckForTimeOut+0xbc>)
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	61bb      	str	r3, [r7, #24]
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	685b      	ldr	r3, [r3, #4]
 8006660:	69ba      	ldr	r2, [r7, #24]
 8006662:	1ad3      	subs	r3, r2, r3
 8006664:	617b      	str	r3, [r7, #20]
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800666e:	d102      	bne.n	8006676 <xTaskCheckForTimeOut+0x66>
 8006670:	2300      	movs	r3, #0
 8006672:	61fb      	str	r3, [r7, #28]
 8006674:	e023      	b.n	80066be <xTaskCheckForTimeOut+0xae>
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681a      	ldr	r2, [r3, #0]
 800667a:	4b15      	ldr	r3, [pc, #84]	; (80066d0 <xTaskCheckForTimeOut+0xc0>)
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	429a      	cmp	r2, r3
 8006680:	d007      	beq.n	8006692 <xTaskCheckForTimeOut+0x82>
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	685b      	ldr	r3, [r3, #4]
 8006686:	69ba      	ldr	r2, [r7, #24]
 8006688:	429a      	cmp	r2, r3
 800668a:	d302      	bcc.n	8006692 <xTaskCheckForTimeOut+0x82>
 800668c:	2301      	movs	r3, #1
 800668e:	61fb      	str	r3, [r7, #28]
 8006690:	e015      	b.n	80066be <xTaskCheckForTimeOut+0xae>
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	697a      	ldr	r2, [r7, #20]
 8006698:	429a      	cmp	r2, r3
 800669a:	d20b      	bcs.n	80066b4 <xTaskCheckForTimeOut+0xa4>
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	681a      	ldr	r2, [r3, #0]
 80066a0:	697b      	ldr	r3, [r7, #20]
 80066a2:	1ad2      	subs	r2, r2, r3
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	601a      	str	r2, [r3, #0]
 80066a8:	6878      	ldr	r0, [r7, #4]
 80066aa:	f7ff ff9b 	bl	80065e4 <vTaskInternalSetTimeOutState>
 80066ae:	2300      	movs	r3, #0
 80066b0:	61fb      	str	r3, [r7, #28]
 80066b2:	e004      	b.n	80066be <xTaskCheckForTimeOut+0xae>
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	2200      	movs	r2, #0
 80066b8:	601a      	str	r2, [r3, #0]
 80066ba:	2301      	movs	r3, #1
 80066bc:	61fb      	str	r3, [r7, #28]
 80066be:	f000 fe79 	bl	80073b4 <vPortExitCritical>
 80066c2:	69fb      	ldr	r3, [r7, #28]
 80066c4:	4618      	mov	r0, r3
 80066c6:	3720      	adds	r7, #32
 80066c8:	46bd      	mov	sp, r7
 80066ca:	bd80      	pop	{r7, pc}
 80066cc:	20000dc8 	.word	0x20000dc8
 80066d0:	20000ddc 	.word	0x20000ddc

080066d4 <vTaskMissedYield>:
 80066d4:	b480      	push	{r7}
 80066d6:	af00      	add	r7, sp, #0
 80066d8:	4b03      	ldr	r3, [pc, #12]	; (80066e8 <vTaskMissedYield+0x14>)
 80066da:	2201      	movs	r2, #1
 80066dc:	601a      	str	r2, [r3, #0]
 80066de:	bf00      	nop
 80066e0:	46bd      	mov	sp, r7
 80066e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e6:	4770      	bx	lr
 80066e8:	20000dd8 	.word	0x20000dd8

080066ec <prvIdleTask>:
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b082      	sub	sp, #8
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
 80066f4:	f000 f852 	bl	800679c <prvCheckTasksWaitingTermination>
 80066f8:	4b06      	ldr	r3, [pc, #24]	; (8006714 <prvIdleTask+0x28>)
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	2b01      	cmp	r3, #1
 80066fe:	d9f9      	bls.n	80066f4 <prvIdleTask+0x8>
 8006700:	4b05      	ldr	r3, [pc, #20]	; (8006718 <prvIdleTask+0x2c>)
 8006702:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006706:	601a      	str	r2, [r3, #0]
 8006708:	f3bf 8f4f 	dsb	sy
 800670c:	f3bf 8f6f 	isb	sy
 8006710:	e7f0      	b.n	80066f4 <prvIdleTask+0x8>
 8006712:	bf00      	nop
 8006714:	200008f4 	.word	0x200008f4
 8006718:	e000ed04 	.word	0xe000ed04

0800671c <prvInitialiseTaskLists>:
 800671c:	b580      	push	{r7, lr}
 800671e:	b082      	sub	sp, #8
 8006720:	af00      	add	r7, sp, #0
 8006722:	2300      	movs	r3, #0
 8006724:	607b      	str	r3, [r7, #4]
 8006726:	e00c      	b.n	8006742 <prvInitialiseTaskLists+0x26>
 8006728:	687a      	ldr	r2, [r7, #4]
 800672a:	4613      	mov	r3, r2
 800672c:	009b      	lsls	r3, r3, #2
 800672e:	4413      	add	r3, r2
 8006730:	009b      	lsls	r3, r3, #2
 8006732:	4a12      	ldr	r2, [pc, #72]	; (800677c <prvInitialiseTaskLists+0x60>)
 8006734:	4413      	add	r3, r2
 8006736:	4618      	mov	r0, r3
 8006738:	f7fe fcf0 	bl	800511c <vListInitialise>
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	3301      	adds	r3, #1
 8006740:	607b      	str	r3, [r7, #4]
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	2b37      	cmp	r3, #55	; 0x37
 8006746:	d9ef      	bls.n	8006728 <prvInitialiseTaskLists+0xc>
 8006748:	480d      	ldr	r0, [pc, #52]	; (8006780 <prvInitialiseTaskLists+0x64>)
 800674a:	f7fe fce7 	bl	800511c <vListInitialise>
 800674e:	480d      	ldr	r0, [pc, #52]	; (8006784 <prvInitialiseTaskLists+0x68>)
 8006750:	f7fe fce4 	bl	800511c <vListInitialise>
 8006754:	480c      	ldr	r0, [pc, #48]	; (8006788 <prvInitialiseTaskLists+0x6c>)
 8006756:	f7fe fce1 	bl	800511c <vListInitialise>
 800675a:	480c      	ldr	r0, [pc, #48]	; (800678c <prvInitialiseTaskLists+0x70>)
 800675c:	f7fe fcde 	bl	800511c <vListInitialise>
 8006760:	480b      	ldr	r0, [pc, #44]	; (8006790 <prvInitialiseTaskLists+0x74>)
 8006762:	f7fe fcdb 	bl	800511c <vListInitialise>
 8006766:	4b0b      	ldr	r3, [pc, #44]	; (8006794 <prvInitialiseTaskLists+0x78>)
 8006768:	4a05      	ldr	r2, [pc, #20]	; (8006780 <prvInitialiseTaskLists+0x64>)
 800676a:	601a      	str	r2, [r3, #0]
 800676c:	4b0a      	ldr	r3, [pc, #40]	; (8006798 <prvInitialiseTaskLists+0x7c>)
 800676e:	4a05      	ldr	r2, [pc, #20]	; (8006784 <prvInitialiseTaskLists+0x68>)
 8006770:	601a      	str	r2, [r3, #0]
 8006772:	bf00      	nop
 8006774:	3708      	adds	r7, #8
 8006776:	46bd      	mov	sp, r7
 8006778:	bd80      	pop	{r7, pc}
 800677a:	bf00      	nop
 800677c:	200008f4 	.word	0x200008f4
 8006780:	20000d54 	.word	0x20000d54
 8006784:	20000d68 	.word	0x20000d68
 8006788:	20000d84 	.word	0x20000d84
 800678c:	20000d98 	.word	0x20000d98
 8006790:	20000db0 	.word	0x20000db0
 8006794:	20000d7c 	.word	0x20000d7c
 8006798:	20000d80 	.word	0x20000d80

0800679c <prvCheckTasksWaitingTermination>:
 800679c:	b580      	push	{r7, lr}
 800679e:	b082      	sub	sp, #8
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	e019      	b.n	80067d8 <prvCheckTasksWaitingTermination+0x3c>
 80067a4:	f000 fdd6 	bl	8007354 <vPortEnterCritical>
 80067a8:	4b10      	ldr	r3, [pc, #64]	; (80067ec <prvCheckTasksWaitingTermination+0x50>)
 80067aa:	68db      	ldr	r3, [r3, #12]
 80067ac:	68db      	ldr	r3, [r3, #12]
 80067ae:	607b      	str	r3, [r7, #4]
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	3304      	adds	r3, #4
 80067b4:	4618      	mov	r0, r3
 80067b6:	f7fe fd3b 	bl	8005230 <uxListRemove>
 80067ba:	4b0d      	ldr	r3, [pc, #52]	; (80067f0 <prvCheckTasksWaitingTermination+0x54>)
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	3b01      	subs	r3, #1
 80067c0:	4a0b      	ldr	r2, [pc, #44]	; (80067f0 <prvCheckTasksWaitingTermination+0x54>)
 80067c2:	6013      	str	r3, [r2, #0]
 80067c4:	4b0b      	ldr	r3, [pc, #44]	; (80067f4 <prvCheckTasksWaitingTermination+0x58>)
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	3b01      	subs	r3, #1
 80067ca:	4a0a      	ldr	r2, [pc, #40]	; (80067f4 <prvCheckTasksWaitingTermination+0x58>)
 80067cc:	6013      	str	r3, [r2, #0]
 80067ce:	f000 fdf1 	bl	80073b4 <vPortExitCritical>
 80067d2:	6878      	ldr	r0, [r7, #4]
 80067d4:	f000 f810 	bl	80067f8 <prvDeleteTCB>
 80067d8:	4b06      	ldr	r3, [pc, #24]	; (80067f4 <prvCheckTasksWaitingTermination+0x58>)
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d1e1      	bne.n	80067a4 <prvCheckTasksWaitingTermination+0x8>
 80067e0:	bf00      	nop
 80067e2:	bf00      	nop
 80067e4:	3708      	adds	r7, #8
 80067e6:	46bd      	mov	sp, r7
 80067e8:	bd80      	pop	{r7, pc}
 80067ea:	bf00      	nop
 80067ec:	20000d98 	.word	0x20000d98
 80067f0:	20000dc4 	.word	0x20000dc4
 80067f4:	20000dac 	.word	0x20000dac

080067f8 <prvDeleteTCB>:
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b084      	sub	sp, #16
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006806:	2b00      	cmp	r3, #0
 8006808:	d108      	bne.n	800681c <prvDeleteTCB+0x24>
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800680e:	4618      	mov	r0, r3
 8006810:	f000 ff8e 	bl	8007730 <vPortFree>
 8006814:	6878      	ldr	r0, [r7, #4]
 8006816:	f000 ff8b 	bl	8007730 <vPortFree>
 800681a:	e018      	b.n	800684e <prvDeleteTCB+0x56>
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006822:	2b01      	cmp	r3, #1
 8006824:	d103      	bne.n	800682e <prvDeleteTCB+0x36>
 8006826:	6878      	ldr	r0, [r7, #4]
 8006828:	f000 ff82 	bl	8007730 <vPortFree>
 800682c:	e00f      	b.n	800684e <prvDeleteTCB+0x56>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006834:	2b02      	cmp	r3, #2
 8006836:	d00a      	beq.n	800684e <prvDeleteTCB+0x56>
 8006838:	f04f 0350 	mov.w	r3, #80	; 0x50
 800683c:	f383 8811 	msr	BASEPRI, r3
 8006840:	f3bf 8f6f 	isb	sy
 8006844:	f3bf 8f4f 	dsb	sy
 8006848:	60fb      	str	r3, [r7, #12]
 800684a:	bf00      	nop
 800684c:	e7fe      	b.n	800684c <prvDeleteTCB+0x54>
 800684e:	bf00      	nop
 8006850:	3710      	adds	r7, #16
 8006852:	46bd      	mov	sp, r7
 8006854:	bd80      	pop	{r7, pc}
	...

08006858 <prvResetNextTaskUnblockTime>:
 8006858:	b480      	push	{r7}
 800685a:	b083      	sub	sp, #12
 800685c:	af00      	add	r7, sp, #0
 800685e:	4b0c      	ldr	r3, [pc, #48]	; (8006890 <prvResetNextTaskUnblockTime+0x38>)
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d104      	bne.n	8006872 <prvResetNextTaskUnblockTime+0x1a>
 8006868:	4b0a      	ldr	r3, [pc, #40]	; (8006894 <prvResetNextTaskUnblockTime+0x3c>)
 800686a:	f04f 32ff 	mov.w	r2, #4294967295
 800686e:	601a      	str	r2, [r3, #0]
 8006870:	e008      	b.n	8006884 <prvResetNextTaskUnblockTime+0x2c>
 8006872:	4b07      	ldr	r3, [pc, #28]	; (8006890 <prvResetNextTaskUnblockTime+0x38>)
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	68db      	ldr	r3, [r3, #12]
 8006878:	68db      	ldr	r3, [r3, #12]
 800687a:	607b      	str	r3, [r7, #4]
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	685b      	ldr	r3, [r3, #4]
 8006880:	4a04      	ldr	r2, [pc, #16]	; (8006894 <prvResetNextTaskUnblockTime+0x3c>)
 8006882:	6013      	str	r3, [r2, #0]
 8006884:	bf00      	nop
 8006886:	370c      	adds	r7, #12
 8006888:	46bd      	mov	sp, r7
 800688a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688e:	4770      	bx	lr
 8006890:	20000d7c 	.word	0x20000d7c
 8006894:	20000de4 	.word	0x20000de4

08006898 <xTaskGetSchedulerState>:
 8006898:	b480      	push	{r7}
 800689a:	b083      	sub	sp, #12
 800689c:	af00      	add	r7, sp, #0
 800689e:	4b0b      	ldr	r3, [pc, #44]	; (80068cc <xTaskGetSchedulerState+0x34>)
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d102      	bne.n	80068ac <xTaskGetSchedulerState+0x14>
 80068a6:	2301      	movs	r3, #1
 80068a8:	607b      	str	r3, [r7, #4]
 80068aa:	e008      	b.n	80068be <xTaskGetSchedulerState+0x26>
 80068ac:	4b08      	ldr	r3, [pc, #32]	; (80068d0 <xTaskGetSchedulerState+0x38>)
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d102      	bne.n	80068ba <xTaskGetSchedulerState+0x22>
 80068b4:	2302      	movs	r3, #2
 80068b6:	607b      	str	r3, [r7, #4]
 80068b8:	e001      	b.n	80068be <xTaskGetSchedulerState+0x26>
 80068ba:	2300      	movs	r3, #0
 80068bc:	607b      	str	r3, [r7, #4]
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	4618      	mov	r0, r3
 80068c2:	370c      	adds	r7, #12
 80068c4:	46bd      	mov	sp, r7
 80068c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ca:	4770      	bx	lr
 80068cc:	20000dd0 	.word	0x20000dd0
 80068d0:	20000dec 	.word	0x20000dec

080068d4 <xTaskPriorityDisinherit>:
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b086      	sub	sp, #24
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	613b      	str	r3, [r7, #16]
 80068e0:	2300      	movs	r3, #0
 80068e2:	617b      	str	r3, [r7, #20]
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d056      	beq.n	8006998 <xTaskPriorityDisinherit+0xc4>
 80068ea:	4b2e      	ldr	r3, [pc, #184]	; (80069a4 <xTaskPriorityDisinherit+0xd0>)
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	693a      	ldr	r2, [r7, #16]
 80068f0:	429a      	cmp	r2, r3
 80068f2:	d00a      	beq.n	800690a <xTaskPriorityDisinherit+0x36>
 80068f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068f8:	f383 8811 	msr	BASEPRI, r3
 80068fc:	f3bf 8f6f 	isb	sy
 8006900:	f3bf 8f4f 	dsb	sy
 8006904:	60fb      	str	r3, [r7, #12]
 8006906:	bf00      	nop
 8006908:	e7fe      	b.n	8006908 <xTaskPriorityDisinherit+0x34>
 800690a:	693b      	ldr	r3, [r7, #16]
 800690c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800690e:	2b00      	cmp	r3, #0
 8006910:	d10a      	bne.n	8006928 <xTaskPriorityDisinherit+0x54>
 8006912:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006916:	f383 8811 	msr	BASEPRI, r3
 800691a:	f3bf 8f6f 	isb	sy
 800691e:	f3bf 8f4f 	dsb	sy
 8006922:	60bb      	str	r3, [r7, #8]
 8006924:	bf00      	nop
 8006926:	e7fe      	b.n	8006926 <xTaskPriorityDisinherit+0x52>
 8006928:	693b      	ldr	r3, [r7, #16]
 800692a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800692c:	1e5a      	subs	r2, r3, #1
 800692e:	693b      	ldr	r3, [r7, #16]
 8006930:	651a      	str	r2, [r3, #80]	; 0x50
 8006932:	693b      	ldr	r3, [r7, #16]
 8006934:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006936:	693b      	ldr	r3, [r7, #16]
 8006938:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800693a:	429a      	cmp	r2, r3
 800693c:	d02c      	beq.n	8006998 <xTaskPriorityDisinherit+0xc4>
 800693e:	693b      	ldr	r3, [r7, #16]
 8006940:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006942:	2b00      	cmp	r3, #0
 8006944:	d128      	bne.n	8006998 <xTaskPriorityDisinherit+0xc4>
 8006946:	693b      	ldr	r3, [r7, #16]
 8006948:	3304      	adds	r3, #4
 800694a:	4618      	mov	r0, r3
 800694c:	f7fe fc70 	bl	8005230 <uxListRemove>
 8006950:	693b      	ldr	r3, [r7, #16]
 8006952:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006954:	693b      	ldr	r3, [r7, #16]
 8006956:	62da      	str	r2, [r3, #44]	; 0x2c
 8006958:	693b      	ldr	r3, [r7, #16]
 800695a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800695c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006960:	693b      	ldr	r3, [r7, #16]
 8006962:	619a      	str	r2, [r3, #24]
 8006964:	693b      	ldr	r3, [r7, #16]
 8006966:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006968:	4b0f      	ldr	r3, [pc, #60]	; (80069a8 <xTaskPriorityDisinherit+0xd4>)
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	429a      	cmp	r2, r3
 800696e:	d903      	bls.n	8006978 <xTaskPriorityDisinherit+0xa4>
 8006970:	693b      	ldr	r3, [r7, #16]
 8006972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006974:	4a0c      	ldr	r2, [pc, #48]	; (80069a8 <xTaskPriorityDisinherit+0xd4>)
 8006976:	6013      	str	r3, [r2, #0]
 8006978:	693b      	ldr	r3, [r7, #16]
 800697a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800697c:	4613      	mov	r3, r2
 800697e:	009b      	lsls	r3, r3, #2
 8006980:	4413      	add	r3, r2
 8006982:	009b      	lsls	r3, r3, #2
 8006984:	4a09      	ldr	r2, [pc, #36]	; (80069ac <xTaskPriorityDisinherit+0xd8>)
 8006986:	441a      	add	r2, r3
 8006988:	693b      	ldr	r3, [r7, #16]
 800698a:	3304      	adds	r3, #4
 800698c:	4619      	mov	r1, r3
 800698e:	4610      	mov	r0, r2
 8006990:	f7fe fbf1 	bl	8005176 <vListInsertEnd>
 8006994:	2301      	movs	r3, #1
 8006996:	617b      	str	r3, [r7, #20]
 8006998:	697b      	ldr	r3, [r7, #20]
 800699a:	4618      	mov	r0, r3
 800699c:	3718      	adds	r7, #24
 800699e:	46bd      	mov	sp, r7
 80069a0:	bd80      	pop	{r7, pc}
 80069a2:	bf00      	nop
 80069a4:	200008f0 	.word	0x200008f0
 80069a8:	20000dcc 	.word	0x20000dcc
 80069ac:	200008f4 	.word	0x200008f4

080069b0 <prvAddCurrentTaskToDelayedList>:
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b084      	sub	sp, #16
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
 80069b8:	6039      	str	r1, [r7, #0]
 80069ba:	4b21      	ldr	r3, [pc, #132]	; (8006a40 <prvAddCurrentTaskToDelayedList+0x90>)
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	60fb      	str	r3, [r7, #12]
 80069c0:	4b20      	ldr	r3, [pc, #128]	; (8006a44 <prvAddCurrentTaskToDelayedList+0x94>)
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	3304      	adds	r3, #4
 80069c6:	4618      	mov	r0, r3
 80069c8:	f7fe fc32 	bl	8005230 <uxListRemove>
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069d2:	d10a      	bne.n	80069ea <prvAddCurrentTaskToDelayedList+0x3a>
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d007      	beq.n	80069ea <prvAddCurrentTaskToDelayedList+0x3a>
 80069da:	4b1a      	ldr	r3, [pc, #104]	; (8006a44 <prvAddCurrentTaskToDelayedList+0x94>)
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	3304      	adds	r3, #4
 80069e0:	4619      	mov	r1, r3
 80069e2:	4819      	ldr	r0, [pc, #100]	; (8006a48 <prvAddCurrentTaskToDelayedList+0x98>)
 80069e4:	f7fe fbc7 	bl	8005176 <vListInsertEnd>
 80069e8:	e026      	b.n	8006a38 <prvAddCurrentTaskToDelayedList+0x88>
 80069ea:	68fa      	ldr	r2, [r7, #12]
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	4413      	add	r3, r2
 80069f0:	60bb      	str	r3, [r7, #8]
 80069f2:	4b14      	ldr	r3, [pc, #80]	; (8006a44 <prvAddCurrentTaskToDelayedList+0x94>)
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	68ba      	ldr	r2, [r7, #8]
 80069f8:	605a      	str	r2, [r3, #4]
 80069fa:	68ba      	ldr	r2, [r7, #8]
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	429a      	cmp	r2, r3
 8006a00:	d209      	bcs.n	8006a16 <prvAddCurrentTaskToDelayedList+0x66>
 8006a02:	4b12      	ldr	r3, [pc, #72]	; (8006a4c <prvAddCurrentTaskToDelayedList+0x9c>)
 8006a04:	681a      	ldr	r2, [r3, #0]
 8006a06:	4b0f      	ldr	r3, [pc, #60]	; (8006a44 <prvAddCurrentTaskToDelayedList+0x94>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	3304      	adds	r3, #4
 8006a0c:	4619      	mov	r1, r3
 8006a0e:	4610      	mov	r0, r2
 8006a10:	f7fe fbd5 	bl	80051be <vListInsert>
 8006a14:	e010      	b.n	8006a38 <prvAddCurrentTaskToDelayedList+0x88>
 8006a16:	4b0e      	ldr	r3, [pc, #56]	; (8006a50 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006a18:	681a      	ldr	r2, [r3, #0]
 8006a1a:	4b0a      	ldr	r3, [pc, #40]	; (8006a44 <prvAddCurrentTaskToDelayedList+0x94>)
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	3304      	adds	r3, #4
 8006a20:	4619      	mov	r1, r3
 8006a22:	4610      	mov	r0, r2
 8006a24:	f7fe fbcb 	bl	80051be <vListInsert>
 8006a28:	4b0a      	ldr	r3, [pc, #40]	; (8006a54 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	68ba      	ldr	r2, [r7, #8]
 8006a2e:	429a      	cmp	r2, r3
 8006a30:	d202      	bcs.n	8006a38 <prvAddCurrentTaskToDelayedList+0x88>
 8006a32:	4a08      	ldr	r2, [pc, #32]	; (8006a54 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006a34:	68bb      	ldr	r3, [r7, #8]
 8006a36:	6013      	str	r3, [r2, #0]
 8006a38:	bf00      	nop
 8006a3a:	3710      	adds	r7, #16
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	bd80      	pop	{r7, pc}
 8006a40:	20000dc8 	.word	0x20000dc8
 8006a44:	200008f0 	.word	0x200008f0
 8006a48:	20000db0 	.word	0x20000db0
 8006a4c:	20000d80 	.word	0x20000d80
 8006a50:	20000d7c 	.word	0x20000d7c
 8006a54:	20000de4 	.word	0x20000de4

08006a58 <xTimerCreateTimerTask>:
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b08a      	sub	sp, #40	; 0x28
 8006a5c:	af04      	add	r7, sp, #16
 8006a5e:	2300      	movs	r3, #0
 8006a60:	617b      	str	r3, [r7, #20]
 8006a62:	f000 fb07 	bl	8007074 <prvCheckForValidListAndQueue>
 8006a66:	4b1c      	ldr	r3, [pc, #112]	; (8006ad8 <xTimerCreateTimerTask+0x80>)
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d021      	beq.n	8006ab2 <xTimerCreateTimerTask+0x5a>
 8006a6e:	2300      	movs	r3, #0
 8006a70:	60fb      	str	r3, [r7, #12]
 8006a72:	2300      	movs	r3, #0
 8006a74:	60bb      	str	r3, [r7, #8]
 8006a76:	1d3a      	adds	r2, r7, #4
 8006a78:	f107 0108 	add.w	r1, r7, #8
 8006a7c:	f107 030c 	add.w	r3, r7, #12
 8006a80:	4618      	mov	r0, r3
 8006a82:	f7fe fb31 	bl	80050e8 <vApplicationGetTimerTaskMemory>
 8006a86:	6879      	ldr	r1, [r7, #4]
 8006a88:	68bb      	ldr	r3, [r7, #8]
 8006a8a:	68fa      	ldr	r2, [r7, #12]
 8006a8c:	9202      	str	r2, [sp, #8]
 8006a8e:	9301      	str	r3, [sp, #4]
 8006a90:	2302      	movs	r3, #2
 8006a92:	9300      	str	r3, [sp, #0]
 8006a94:	2300      	movs	r3, #0
 8006a96:	460a      	mov	r2, r1
 8006a98:	4910      	ldr	r1, [pc, #64]	; (8006adc <xTimerCreateTimerTask+0x84>)
 8006a9a:	4811      	ldr	r0, [pc, #68]	; (8006ae0 <xTimerCreateTimerTask+0x88>)
 8006a9c:	f7ff f8de 	bl	8005c5c <xTaskCreateStatic>
 8006aa0:	4603      	mov	r3, r0
 8006aa2:	4a10      	ldr	r2, [pc, #64]	; (8006ae4 <xTimerCreateTimerTask+0x8c>)
 8006aa4:	6013      	str	r3, [r2, #0]
 8006aa6:	4b0f      	ldr	r3, [pc, #60]	; (8006ae4 <xTimerCreateTimerTask+0x8c>)
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d001      	beq.n	8006ab2 <xTimerCreateTimerTask+0x5a>
 8006aae:	2301      	movs	r3, #1
 8006ab0:	617b      	str	r3, [r7, #20]
 8006ab2:	697b      	ldr	r3, [r7, #20]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d10a      	bne.n	8006ace <xTimerCreateTimerTask+0x76>
 8006ab8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006abc:	f383 8811 	msr	BASEPRI, r3
 8006ac0:	f3bf 8f6f 	isb	sy
 8006ac4:	f3bf 8f4f 	dsb	sy
 8006ac8:	613b      	str	r3, [r7, #16]
 8006aca:	bf00      	nop
 8006acc:	e7fe      	b.n	8006acc <xTimerCreateTimerTask+0x74>
 8006ace:	697b      	ldr	r3, [r7, #20]
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	3718      	adds	r7, #24
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	bd80      	pop	{r7, pc}
 8006ad8:	20000e20 	.word	0x20000e20
 8006adc:	08007a5c 	.word	0x08007a5c
 8006ae0:	08006c1d 	.word	0x08006c1d
 8006ae4:	20000e24 	.word	0x20000e24

08006ae8 <xTimerGenericCommand>:
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b08a      	sub	sp, #40	; 0x28
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	60f8      	str	r0, [r7, #12]
 8006af0:	60b9      	str	r1, [r7, #8]
 8006af2:	607a      	str	r2, [r7, #4]
 8006af4:	603b      	str	r3, [r7, #0]
 8006af6:	2300      	movs	r3, #0
 8006af8:	627b      	str	r3, [r7, #36]	; 0x24
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d10a      	bne.n	8006b16 <xTimerGenericCommand+0x2e>
 8006b00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b04:	f383 8811 	msr	BASEPRI, r3
 8006b08:	f3bf 8f6f 	isb	sy
 8006b0c:	f3bf 8f4f 	dsb	sy
 8006b10:	623b      	str	r3, [r7, #32]
 8006b12:	bf00      	nop
 8006b14:	e7fe      	b.n	8006b14 <xTimerGenericCommand+0x2c>
 8006b16:	4b1a      	ldr	r3, [pc, #104]	; (8006b80 <xTimerGenericCommand+0x98>)
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d02a      	beq.n	8006b74 <xTimerGenericCommand+0x8c>
 8006b1e:	68bb      	ldr	r3, [r7, #8]
 8006b20:	613b      	str	r3, [r7, #16]
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	617b      	str	r3, [r7, #20]
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	61bb      	str	r3, [r7, #24]
 8006b2a:	68bb      	ldr	r3, [r7, #8]
 8006b2c:	2b05      	cmp	r3, #5
 8006b2e:	dc18      	bgt.n	8006b62 <xTimerGenericCommand+0x7a>
 8006b30:	f7ff feb2 	bl	8006898 <xTaskGetSchedulerState>
 8006b34:	4603      	mov	r3, r0
 8006b36:	2b02      	cmp	r3, #2
 8006b38:	d109      	bne.n	8006b4e <xTimerGenericCommand+0x66>
 8006b3a:	4b11      	ldr	r3, [pc, #68]	; (8006b80 <xTimerGenericCommand+0x98>)
 8006b3c:	6818      	ldr	r0, [r3, #0]
 8006b3e:	f107 0110 	add.w	r1, r7, #16
 8006b42:	2300      	movs	r3, #0
 8006b44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b46:	f7fe fca1 	bl	800548c <xQueueGenericSend>
 8006b4a:	6278      	str	r0, [r7, #36]	; 0x24
 8006b4c:	e012      	b.n	8006b74 <xTimerGenericCommand+0x8c>
 8006b4e:	4b0c      	ldr	r3, [pc, #48]	; (8006b80 <xTimerGenericCommand+0x98>)
 8006b50:	6818      	ldr	r0, [r3, #0]
 8006b52:	f107 0110 	add.w	r1, r7, #16
 8006b56:	2300      	movs	r3, #0
 8006b58:	2200      	movs	r2, #0
 8006b5a:	f7fe fc97 	bl	800548c <xQueueGenericSend>
 8006b5e:	6278      	str	r0, [r7, #36]	; 0x24
 8006b60:	e008      	b.n	8006b74 <xTimerGenericCommand+0x8c>
 8006b62:	4b07      	ldr	r3, [pc, #28]	; (8006b80 <xTimerGenericCommand+0x98>)
 8006b64:	6818      	ldr	r0, [r3, #0]
 8006b66:	f107 0110 	add.w	r1, r7, #16
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	683a      	ldr	r2, [r7, #0]
 8006b6e:	f7fe fd8b 	bl	8005688 <xQueueGenericSendFromISR>
 8006b72:	6278      	str	r0, [r7, #36]	; 0x24
 8006b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b76:	4618      	mov	r0, r3
 8006b78:	3728      	adds	r7, #40	; 0x28
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	bd80      	pop	{r7, pc}
 8006b7e:	bf00      	nop
 8006b80:	20000e20 	.word	0x20000e20

08006b84 <prvProcessExpiredTimer>:
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b088      	sub	sp, #32
 8006b88:	af02      	add	r7, sp, #8
 8006b8a:	6078      	str	r0, [r7, #4]
 8006b8c:	6039      	str	r1, [r7, #0]
 8006b8e:	4b22      	ldr	r3, [pc, #136]	; (8006c18 <prvProcessExpiredTimer+0x94>)
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	68db      	ldr	r3, [r3, #12]
 8006b94:	68db      	ldr	r3, [r3, #12]
 8006b96:	617b      	str	r3, [r7, #20]
 8006b98:	697b      	ldr	r3, [r7, #20]
 8006b9a:	3304      	adds	r3, #4
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	f7fe fb47 	bl	8005230 <uxListRemove>
 8006ba2:	697b      	ldr	r3, [r7, #20]
 8006ba4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006ba8:	f003 0304 	and.w	r3, r3, #4
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d022      	beq.n	8006bf6 <prvProcessExpiredTimer+0x72>
 8006bb0:	697b      	ldr	r3, [r7, #20]
 8006bb2:	699a      	ldr	r2, [r3, #24]
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	18d1      	adds	r1, r2, r3
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	683a      	ldr	r2, [r7, #0]
 8006bbc:	6978      	ldr	r0, [r7, #20]
 8006bbe:	f000 f8d1 	bl	8006d64 <prvInsertTimerInActiveList>
 8006bc2:	4603      	mov	r3, r0
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d01f      	beq.n	8006c08 <prvProcessExpiredTimer+0x84>
 8006bc8:	2300      	movs	r3, #0
 8006bca:	9300      	str	r3, [sp, #0]
 8006bcc:	2300      	movs	r3, #0
 8006bce:	687a      	ldr	r2, [r7, #4]
 8006bd0:	2100      	movs	r1, #0
 8006bd2:	6978      	ldr	r0, [r7, #20]
 8006bd4:	f7ff ff88 	bl	8006ae8 <xTimerGenericCommand>
 8006bd8:	6138      	str	r0, [r7, #16]
 8006bda:	693b      	ldr	r3, [r7, #16]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d113      	bne.n	8006c08 <prvProcessExpiredTimer+0x84>
 8006be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006be4:	f383 8811 	msr	BASEPRI, r3
 8006be8:	f3bf 8f6f 	isb	sy
 8006bec:	f3bf 8f4f 	dsb	sy
 8006bf0:	60fb      	str	r3, [r7, #12]
 8006bf2:	bf00      	nop
 8006bf4:	e7fe      	b.n	8006bf4 <prvProcessExpiredTimer+0x70>
 8006bf6:	697b      	ldr	r3, [r7, #20]
 8006bf8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006bfc:	f023 0301 	bic.w	r3, r3, #1
 8006c00:	b2da      	uxtb	r2, r3
 8006c02:	697b      	ldr	r3, [r7, #20]
 8006c04:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8006c08:	697b      	ldr	r3, [r7, #20]
 8006c0a:	6a1b      	ldr	r3, [r3, #32]
 8006c0c:	6978      	ldr	r0, [r7, #20]
 8006c0e:	4798      	blx	r3
 8006c10:	bf00      	nop
 8006c12:	3718      	adds	r7, #24
 8006c14:	46bd      	mov	sp, r7
 8006c16:	bd80      	pop	{r7, pc}
 8006c18:	20000e18 	.word	0x20000e18

08006c1c <prvTimerTask>:
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	b084      	sub	sp, #16
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
 8006c24:	f107 0308 	add.w	r3, r7, #8
 8006c28:	4618      	mov	r0, r3
 8006c2a:	f000 f857 	bl	8006cdc <prvGetNextExpireTime>
 8006c2e:	60f8      	str	r0, [r7, #12]
 8006c30:	68bb      	ldr	r3, [r7, #8]
 8006c32:	4619      	mov	r1, r3
 8006c34:	68f8      	ldr	r0, [r7, #12]
 8006c36:	f000 f803 	bl	8006c40 <prvProcessTimerOrBlockTask>
 8006c3a:	f000 f8d5 	bl	8006de8 <prvProcessReceivedCommands>
 8006c3e:	e7f1      	b.n	8006c24 <prvTimerTask+0x8>

08006c40 <prvProcessTimerOrBlockTask>:
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b084      	sub	sp, #16
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
 8006c48:	6039      	str	r1, [r7, #0]
 8006c4a:	f7ff fa43 	bl	80060d4 <vTaskSuspendAll>
 8006c4e:	f107 0308 	add.w	r3, r7, #8
 8006c52:	4618      	mov	r0, r3
 8006c54:	f000 f866 	bl	8006d24 <prvSampleTimeNow>
 8006c58:	60f8      	str	r0, [r7, #12]
 8006c5a:	68bb      	ldr	r3, [r7, #8]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d130      	bne.n	8006cc2 <prvProcessTimerOrBlockTask+0x82>
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d10a      	bne.n	8006c7c <prvProcessTimerOrBlockTask+0x3c>
 8006c66:	687a      	ldr	r2, [r7, #4]
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	429a      	cmp	r2, r3
 8006c6c:	d806      	bhi.n	8006c7c <prvProcessTimerOrBlockTask+0x3c>
 8006c6e:	f7ff fa3f 	bl	80060f0 <xTaskResumeAll>
 8006c72:	68f9      	ldr	r1, [r7, #12]
 8006c74:	6878      	ldr	r0, [r7, #4]
 8006c76:	f7ff ff85 	bl	8006b84 <prvProcessExpiredTimer>
 8006c7a:	e024      	b.n	8006cc6 <prvProcessTimerOrBlockTask+0x86>
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d008      	beq.n	8006c94 <prvProcessTimerOrBlockTask+0x54>
 8006c82:	4b13      	ldr	r3, [pc, #76]	; (8006cd0 <prvProcessTimerOrBlockTask+0x90>)
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d101      	bne.n	8006c90 <prvProcessTimerOrBlockTask+0x50>
 8006c8c:	2301      	movs	r3, #1
 8006c8e:	e000      	b.n	8006c92 <prvProcessTimerOrBlockTask+0x52>
 8006c90:	2300      	movs	r3, #0
 8006c92:	603b      	str	r3, [r7, #0]
 8006c94:	4b0f      	ldr	r3, [pc, #60]	; (8006cd4 <prvProcessTimerOrBlockTask+0x94>)
 8006c96:	6818      	ldr	r0, [r3, #0]
 8006c98:	687a      	ldr	r2, [r7, #4]
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	1ad3      	subs	r3, r2, r3
 8006c9e:	683a      	ldr	r2, [r7, #0]
 8006ca0:	4619      	mov	r1, r3
 8006ca2:	f7fe ffa7 	bl	8005bf4 <vQueueWaitForMessageRestricted>
 8006ca6:	f7ff fa23 	bl	80060f0 <xTaskResumeAll>
 8006caa:	4603      	mov	r3, r0
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d10a      	bne.n	8006cc6 <prvProcessTimerOrBlockTask+0x86>
 8006cb0:	4b09      	ldr	r3, [pc, #36]	; (8006cd8 <prvProcessTimerOrBlockTask+0x98>)
 8006cb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006cb6:	601a      	str	r2, [r3, #0]
 8006cb8:	f3bf 8f4f 	dsb	sy
 8006cbc:	f3bf 8f6f 	isb	sy
 8006cc0:	e001      	b.n	8006cc6 <prvProcessTimerOrBlockTask+0x86>
 8006cc2:	f7ff fa15 	bl	80060f0 <xTaskResumeAll>
 8006cc6:	bf00      	nop
 8006cc8:	3710      	adds	r7, #16
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	bd80      	pop	{r7, pc}
 8006cce:	bf00      	nop
 8006cd0:	20000e1c 	.word	0x20000e1c
 8006cd4:	20000e20 	.word	0x20000e20
 8006cd8:	e000ed04 	.word	0xe000ed04

08006cdc <prvGetNextExpireTime>:
 8006cdc:	b480      	push	{r7}
 8006cde:	b085      	sub	sp, #20
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
 8006ce4:	4b0e      	ldr	r3, [pc, #56]	; (8006d20 <prvGetNextExpireTime+0x44>)
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d101      	bne.n	8006cf2 <prvGetNextExpireTime+0x16>
 8006cee:	2201      	movs	r2, #1
 8006cf0:	e000      	b.n	8006cf4 <prvGetNextExpireTime+0x18>
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	601a      	str	r2, [r3, #0]
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d105      	bne.n	8006d0c <prvGetNextExpireTime+0x30>
 8006d00:	4b07      	ldr	r3, [pc, #28]	; (8006d20 <prvGetNextExpireTime+0x44>)
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	68db      	ldr	r3, [r3, #12]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	60fb      	str	r3, [r7, #12]
 8006d0a:	e001      	b.n	8006d10 <prvGetNextExpireTime+0x34>
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	60fb      	str	r3, [r7, #12]
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	4618      	mov	r0, r3
 8006d14:	3714      	adds	r7, #20
 8006d16:	46bd      	mov	sp, r7
 8006d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1c:	4770      	bx	lr
 8006d1e:	bf00      	nop
 8006d20:	20000e18 	.word	0x20000e18

08006d24 <prvSampleTimeNow>:
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b084      	sub	sp, #16
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
 8006d2c:	f7ff fa7e 	bl	800622c <xTaskGetTickCount>
 8006d30:	60f8      	str	r0, [r7, #12]
 8006d32:	4b0b      	ldr	r3, [pc, #44]	; (8006d60 <prvSampleTimeNow+0x3c>)
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	68fa      	ldr	r2, [r7, #12]
 8006d38:	429a      	cmp	r2, r3
 8006d3a:	d205      	bcs.n	8006d48 <prvSampleTimeNow+0x24>
 8006d3c:	f000 f936 	bl	8006fac <prvSwitchTimerLists>
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2201      	movs	r2, #1
 8006d44:	601a      	str	r2, [r3, #0]
 8006d46:	e002      	b.n	8006d4e <prvSampleTimeNow+0x2a>
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	601a      	str	r2, [r3, #0]
 8006d4e:	4a04      	ldr	r2, [pc, #16]	; (8006d60 <prvSampleTimeNow+0x3c>)
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	6013      	str	r3, [r2, #0]
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	4618      	mov	r0, r3
 8006d58:	3710      	adds	r7, #16
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	bd80      	pop	{r7, pc}
 8006d5e:	bf00      	nop
 8006d60:	20000e28 	.word	0x20000e28

08006d64 <prvInsertTimerInActiveList>:
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b086      	sub	sp, #24
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	60f8      	str	r0, [r7, #12]
 8006d6c:	60b9      	str	r1, [r7, #8]
 8006d6e:	607a      	str	r2, [r7, #4]
 8006d70:	603b      	str	r3, [r7, #0]
 8006d72:	2300      	movs	r3, #0
 8006d74:	617b      	str	r3, [r7, #20]
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	68ba      	ldr	r2, [r7, #8]
 8006d7a:	605a      	str	r2, [r3, #4]
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	68fa      	ldr	r2, [r7, #12]
 8006d80:	611a      	str	r2, [r3, #16]
 8006d82:	68ba      	ldr	r2, [r7, #8]
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	429a      	cmp	r2, r3
 8006d88:	d812      	bhi.n	8006db0 <prvInsertTimerInActiveList+0x4c>
 8006d8a:	687a      	ldr	r2, [r7, #4]
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	1ad2      	subs	r2, r2, r3
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	699b      	ldr	r3, [r3, #24]
 8006d94:	429a      	cmp	r2, r3
 8006d96:	d302      	bcc.n	8006d9e <prvInsertTimerInActiveList+0x3a>
 8006d98:	2301      	movs	r3, #1
 8006d9a:	617b      	str	r3, [r7, #20]
 8006d9c:	e01b      	b.n	8006dd6 <prvInsertTimerInActiveList+0x72>
 8006d9e:	4b10      	ldr	r3, [pc, #64]	; (8006de0 <prvInsertTimerInActiveList+0x7c>)
 8006da0:	681a      	ldr	r2, [r3, #0]
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	3304      	adds	r3, #4
 8006da6:	4619      	mov	r1, r3
 8006da8:	4610      	mov	r0, r2
 8006daa:	f7fe fa08 	bl	80051be <vListInsert>
 8006dae:	e012      	b.n	8006dd6 <prvInsertTimerInActiveList+0x72>
 8006db0:	687a      	ldr	r2, [r7, #4]
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	429a      	cmp	r2, r3
 8006db6:	d206      	bcs.n	8006dc6 <prvInsertTimerInActiveList+0x62>
 8006db8:	68ba      	ldr	r2, [r7, #8]
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	429a      	cmp	r2, r3
 8006dbe:	d302      	bcc.n	8006dc6 <prvInsertTimerInActiveList+0x62>
 8006dc0:	2301      	movs	r3, #1
 8006dc2:	617b      	str	r3, [r7, #20]
 8006dc4:	e007      	b.n	8006dd6 <prvInsertTimerInActiveList+0x72>
 8006dc6:	4b07      	ldr	r3, [pc, #28]	; (8006de4 <prvInsertTimerInActiveList+0x80>)
 8006dc8:	681a      	ldr	r2, [r3, #0]
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	3304      	adds	r3, #4
 8006dce:	4619      	mov	r1, r3
 8006dd0:	4610      	mov	r0, r2
 8006dd2:	f7fe f9f4 	bl	80051be <vListInsert>
 8006dd6:	697b      	ldr	r3, [r7, #20]
 8006dd8:	4618      	mov	r0, r3
 8006dda:	3718      	adds	r7, #24
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	bd80      	pop	{r7, pc}
 8006de0:	20000e1c 	.word	0x20000e1c
 8006de4:	20000e18 	.word	0x20000e18

08006de8 <prvProcessReceivedCommands>:
 8006de8:	b580      	push	{r7, lr}
 8006dea:	b08e      	sub	sp, #56	; 0x38
 8006dec:	af02      	add	r7, sp, #8
 8006dee:	e0ca      	b.n	8006f86 <prvProcessReceivedCommands+0x19e>
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	da18      	bge.n	8006e28 <prvProcessReceivedCommands+0x40>
 8006df6:	1d3b      	adds	r3, r7, #4
 8006df8:	3304      	adds	r3, #4
 8006dfa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006dfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d10a      	bne.n	8006e18 <prvProcessReceivedCommands+0x30>
 8006e02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e06:	f383 8811 	msr	BASEPRI, r3
 8006e0a:	f3bf 8f6f 	isb	sy
 8006e0e:	f3bf 8f4f 	dsb	sy
 8006e12:	61fb      	str	r3, [r7, #28]
 8006e14:	bf00      	nop
 8006e16:	e7fe      	b.n	8006e16 <prvProcessReceivedCommands+0x2e>
 8006e18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e1e:	6850      	ldr	r0, [r2, #4]
 8006e20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e22:	6892      	ldr	r2, [r2, #8]
 8006e24:	4611      	mov	r1, r2
 8006e26:	4798      	blx	r3
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	f2c0 80ab 	blt.w	8006f86 <prvProcessReceivedCommands+0x19e>
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e36:	695b      	ldr	r3, [r3, #20]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d004      	beq.n	8006e46 <prvProcessReceivedCommands+0x5e>
 8006e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e3e:	3304      	adds	r3, #4
 8006e40:	4618      	mov	r0, r3
 8006e42:	f7fe f9f5 	bl	8005230 <uxListRemove>
 8006e46:	463b      	mov	r3, r7
 8006e48:	4618      	mov	r0, r3
 8006e4a:	f7ff ff6b 	bl	8006d24 <prvSampleTimeNow>
 8006e4e:	6278      	str	r0, [r7, #36]	; 0x24
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2b09      	cmp	r3, #9
 8006e54:	f200 8096 	bhi.w	8006f84 <prvProcessReceivedCommands+0x19c>
 8006e58:	a201      	add	r2, pc, #4	; (adr r2, 8006e60 <prvProcessReceivedCommands+0x78>)
 8006e5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e5e:	bf00      	nop
 8006e60:	08006e89 	.word	0x08006e89
 8006e64:	08006e89 	.word	0x08006e89
 8006e68:	08006e89 	.word	0x08006e89
 8006e6c:	08006efd 	.word	0x08006efd
 8006e70:	08006f11 	.word	0x08006f11
 8006e74:	08006f5b 	.word	0x08006f5b
 8006e78:	08006e89 	.word	0x08006e89
 8006e7c:	08006e89 	.word	0x08006e89
 8006e80:	08006efd 	.word	0x08006efd
 8006e84:	08006f11 	.word	0x08006f11
 8006e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e8a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006e8e:	f043 0301 	orr.w	r3, r3, #1
 8006e92:	b2da      	uxtb	r2, r3
 8006e94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e96:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8006e9a:	68ba      	ldr	r2, [r7, #8]
 8006e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e9e:	699b      	ldr	r3, [r3, #24]
 8006ea0:	18d1      	adds	r1, r2, r3
 8006ea2:	68bb      	ldr	r3, [r7, #8]
 8006ea4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ea6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ea8:	f7ff ff5c 	bl	8006d64 <prvInsertTimerInActiveList>
 8006eac:	4603      	mov	r3, r0
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d069      	beq.n	8006f86 <prvProcessReceivedCommands+0x19e>
 8006eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eb4:	6a1b      	ldr	r3, [r3, #32]
 8006eb6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006eb8:	4798      	blx	r3
 8006eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ebc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006ec0:	f003 0304 	and.w	r3, r3, #4
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d05e      	beq.n	8006f86 <prvProcessReceivedCommands+0x19e>
 8006ec8:	68ba      	ldr	r2, [r7, #8]
 8006eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ecc:	699b      	ldr	r3, [r3, #24]
 8006ece:	441a      	add	r2, r3
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	9300      	str	r3, [sp, #0]
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	2100      	movs	r1, #0
 8006ed8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006eda:	f7ff fe05 	bl	8006ae8 <xTimerGenericCommand>
 8006ede:	6238      	str	r0, [r7, #32]
 8006ee0:	6a3b      	ldr	r3, [r7, #32]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d14f      	bne.n	8006f86 <prvProcessReceivedCommands+0x19e>
 8006ee6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eea:	f383 8811 	msr	BASEPRI, r3
 8006eee:	f3bf 8f6f 	isb	sy
 8006ef2:	f3bf 8f4f 	dsb	sy
 8006ef6:	61bb      	str	r3, [r7, #24]
 8006ef8:	bf00      	nop
 8006efa:	e7fe      	b.n	8006efa <prvProcessReceivedCommands+0x112>
 8006efc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006efe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006f02:	f023 0301 	bic.w	r3, r3, #1
 8006f06:	b2da      	uxtb	r2, r3
 8006f08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f0a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8006f0e:	e03a      	b.n	8006f86 <prvProcessReceivedCommands+0x19e>
 8006f10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f12:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006f16:	f043 0301 	orr.w	r3, r3, #1
 8006f1a:	b2da      	uxtb	r2, r3
 8006f1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f1e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8006f22:	68ba      	ldr	r2, [r7, #8]
 8006f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f26:	619a      	str	r2, [r3, #24]
 8006f28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f2a:	699b      	ldr	r3, [r3, #24]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d10a      	bne.n	8006f46 <prvProcessReceivedCommands+0x15e>
 8006f30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f34:	f383 8811 	msr	BASEPRI, r3
 8006f38:	f3bf 8f6f 	isb	sy
 8006f3c:	f3bf 8f4f 	dsb	sy
 8006f40:	617b      	str	r3, [r7, #20]
 8006f42:	bf00      	nop
 8006f44:	e7fe      	b.n	8006f44 <prvProcessReceivedCommands+0x15c>
 8006f46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f48:	699a      	ldr	r2, [r3, #24]
 8006f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f4c:	18d1      	adds	r1, r2, r3
 8006f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f52:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f54:	f7ff ff06 	bl	8006d64 <prvInsertTimerInActiveList>
 8006f58:	e015      	b.n	8006f86 <prvProcessReceivedCommands+0x19e>
 8006f5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f5c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006f60:	f003 0302 	and.w	r3, r3, #2
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d103      	bne.n	8006f70 <prvProcessReceivedCommands+0x188>
 8006f68:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f6a:	f000 fbe1 	bl	8007730 <vPortFree>
 8006f6e:	e00a      	b.n	8006f86 <prvProcessReceivedCommands+0x19e>
 8006f70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f72:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006f76:	f023 0301 	bic.w	r3, r3, #1
 8006f7a:	b2da      	uxtb	r2, r3
 8006f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f7e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8006f82:	e000      	b.n	8006f86 <prvProcessReceivedCommands+0x19e>
 8006f84:	bf00      	nop
 8006f86:	4b08      	ldr	r3, [pc, #32]	; (8006fa8 <prvProcessReceivedCommands+0x1c0>)
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	1d39      	adds	r1, r7, #4
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	4618      	mov	r0, r3
 8006f90:	f7fe fc16 	bl	80057c0 <xQueueReceive>
 8006f94:	4603      	mov	r3, r0
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	f47f af2a 	bne.w	8006df0 <prvProcessReceivedCommands+0x8>
 8006f9c:	bf00      	nop
 8006f9e:	bf00      	nop
 8006fa0:	3730      	adds	r7, #48	; 0x30
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	bd80      	pop	{r7, pc}
 8006fa6:	bf00      	nop
 8006fa8:	20000e20 	.word	0x20000e20

08006fac <prvSwitchTimerLists>:
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b088      	sub	sp, #32
 8006fb0:	af02      	add	r7, sp, #8
 8006fb2:	e048      	b.n	8007046 <prvSwitchTimerLists+0x9a>
 8006fb4:	4b2d      	ldr	r3, [pc, #180]	; (800706c <prvSwitchTimerLists+0xc0>)
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	68db      	ldr	r3, [r3, #12]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	613b      	str	r3, [r7, #16]
 8006fbe:	4b2b      	ldr	r3, [pc, #172]	; (800706c <prvSwitchTimerLists+0xc0>)
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	68db      	ldr	r3, [r3, #12]
 8006fc4:	68db      	ldr	r3, [r3, #12]
 8006fc6:	60fb      	str	r3, [r7, #12]
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	3304      	adds	r3, #4
 8006fcc:	4618      	mov	r0, r3
 8006fce:	f7fe f92f 	bl	8005230 <uxListRemove>
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	6a1b      	ldr	r3, [r3, #32]
 8006fd6:	68f8      	ldr	r0, [r7, #12]
 8006fd8:	4798      	blx	r3
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006fe0:	f003 0304 	and.w	r3, r3, #4
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d02e      	beq.n	8007046 <prvSwitchTimerLists+0x9a>
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	699b      	ldr	r3, [r3, #24]
 8006fec:	693a      	ldr	r2, [r7, #16]
 8006fee:	4413      	add	r3, r2
 8006ff0:	60bb      	str	r3, [r7, #8]
 8006ff2:	68ba      	ldr	r2, [r7, #8]
 8006ff4:	693b      	ldr	r3, [r7, #16]
 8006ff6:	429a      	cmp	r2, r3
 8006ff8:	d90e      	bls.n	8007018 <prvSwitchTimerLists+0x6c>
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	68ba      	ldr	r2, [r7, #8]
 8006ffe:	605a      	str	r2, [r3, #4]
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	68fa      	ldr	r2, [r7, #12]
 8007004:	611a      	str	r2, [r3, #16]
 8007006:	4b19      	ldr	r3, [pc, #100]	; (800706c <prvSwitchTimerLists+0xc0>)
 8007008:	681a      	ldr	r2, [r3, #0]
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	3304      	adds	r3, #4
 800700e:	4619      	mov	r1, r3
 8007010:	4610      	mov	r0, r2
 8007012:	f7fe f8d4 	bl	80051be <vListInsert>
 8007016:	e016      	b.n	8007046 <prvSwitchTimerLists+0x9a>
 8007018:	2300      	movs	r3, #0
 800701a:	9300      	str	r3, [sp, #0]
 800701c:	2300      	movs	r3, #0
 800701e:	693a      	ldr	r2, [r7, #16]
 8007020:	2100      	movs	r1, #0
 8007022:	68f8      	ldr	r0, [r7, #12]
 8007024:	f7ff fd60 	bl	8006ae8 <xTimerGenericCommand>
 8007028:	6078      	str	r0, [r7, #4]
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d10a      	bne.n	8007046 <prvSwitchTimerLists+0x9a>
 8007030:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007034:	f383 8811 	msr	BASEPRI, r3
 8007038:	f3bf 8f6f 	isb	sy
 800703c:	f3bf 8f4f 	dsb	sy
 8007040:	603b      	str	r3, [r7, #0]
 8007042:	bf00      	nop
 8007044:	e7fe      	b.n	8007044 <prvSwitchTimerLists+0x98>
 8007046:	4b09      	ldr	r3, [pc, #36]	; (800706c <prvSwitchTimerLists+0xc0>)
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d1b1      	bne.n	8006fb4 <prvSwitchTimerLists+0x8>
 8007050:	4b06      	ldr	r3, [pc, #24]	; (800706c <prvSwitchTimerLists+0xc0>)
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	617b      	str	r3, [r7, #20]
 8007056:	4b06      	ldr	r3, [pc, #24]	; (8007070 <prvSwitchTimerLists+0xc4>)
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	4a04      	ldr	r2, [pc, #16]	; (800706c <prvSwitchTimerLists+0xc0>)
 800705c:	6013      	str	r3, [r2, #0]
 800705e:	4a04      	ldr	r2, [pc, #16]	; (8007070 <prvSwitchTimerLists+0xc4>)
 8007060:	697b      	ldr	r3, [r7, #20]
 8007062:	6013      	str	r3, [r2, #0]
 8007064:	bf00      	nop
 8007066:	3718      	adds	r7, #24
 8007068:	46bd      	mov	sp, r7
 800706a:	bd80      	pop	{r7, pc}
 800706c:	20000e18 	.word	0x20000e18
 8007070:	20000e1c 	.word	0x20000e1c

08007074 <prvCheckForValidListAndQueue>:
 8007074:	b580      	push	{r7, lr}
 8007076:	b082      	sub	sp, #8
 8007078:	af02      	add	r7, sp, #8
 800707a:	f000 f96b 	bl	8007354 <vPortEnterCritical>
 800707e:	4b15      	ldr	r3, [pc, #84]	; (80070d4 <prvCheckForValidListAndQueue+0x60>)
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d120      	bne.n	80070c8 <prvCheckForValidListAndQueue+0x54>
 8007086:	4814      	ldr	r0, [pc, #80]	; (80070d8 <prvCheckForValidListAndQueue+0x64>)
 8007088:	f7fe f848 	bl	800511c <vListInitialise>
 800708c:	4813      	ldr	r0, [pc, #76]	; (80070dc <prvCheckForValidListAndQueue+0x68>)
 800708e:	f7fe f845 	bl	800511c <vListInitialise>
 8007092:	4b13      	ldr	r3, [pc, #76]	; (80070e0 <prvCheckForValidListAndQueue+0x6c>)
 8007094:	4a10      	ldr	r2, [pc, #64]	; (80070d8 <prvCheckForValidListAndQueue+0x64>)
 8007096:	601a      	str	r2, [r3, #0]
 8007098:	4b12      	ldr	r3, [pc, #72]	; (80070e4 <prvCheckForValidListAndQueue+0x70>)
 800709a:	4a10      	ldr	r2, [pc, #64]	; (80070dc <prvCheckForValidListAndQueue+0x68>)
 800709c:	601a      	str	r2, [r3, #0]
 800709e:	2300      	movs	r3, #0
 80070a0:	9300      	str	r3, [sp, #0]
 80070a2:	4b11      	ldr	r3, [pc, #68]	; (80070e8 <prvCheckForValidListAndQueue+0x74>)
 80070a4:	4a11      	ldr	r2, [pc, #68]	; (80070ec <prvCheckForValidListAndQueue+0x78>)
 80070a6:	2110      	movs	r1, #16
 80070a8:	200a      	movs	r0, #10
 80070aa:	f7fe f953 	bl	8005354 <xQueueGenericCreateStatic>
 80070ae:	4603      	mov	r3, r0
 80070b0:	4a08      	ldr	r2, [pc, #32]	; (80070d4 <prvCheckForValidListAndQueue+0x60>)
 80070b2:	6013      	str	r3, [r2, #0]
 80070b4:	4b07      	ldr	r3, [pc, #28]	; (80070d4 <prvCheckForValidListAndQueue+0x60>)
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d005      	beq.n	80070c8 <prvCheckForValidListAndQueue+0x54>
 80070bc:	4b05      	ldr	r3, [pc, #20]	; (80070d4 <prvCheckForValidListAndQueue+0x60>)
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	490b      	ldr	r1, [pc, #44]	; (80070f0 <prvCheckForValidListAndQueue+0x7c>)
 80070c2:	4618      	mov	r0, r3
 80070c4:	f7fe fd6c 	bl	8005ba0 <vQueueAddToRegistry>
 80070c8:	f000 f974 	bl	80073b4 <vPortExitCritical>
 80070cc:	bf00      	nop
 80070ce:	46bd      	mov	sp, r7
 80070d0:	bd80      	pop	{r7, pc}
 80070d2:	bf00      	nop
 80070d4:	20000e20 	.word	0x20000e20
 80070d8:	20000df0 	.word	0x20000df0
 80070dc:	20000e04 	.word	0x20000e04
 80070e0:	20000e18 	.word	0x20000e18
 80070e4:	20000e1c 	.word	0x20000e1c
 80070e8:	20000ecc 	.word	0x20000ecc
 80070ec:	20000e2c 	.word	0x20000e2c
 80070f0:	08007a64 	.word	0x08007a64

080070f4 <pxPortInitialiseStack>:
 80070f4:	b480      	push	{r7}
 80070f6:	b085      	sub	sp, #20
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	60f8      	str	r0, [r7, #12]
 80070fc:	60b9      	str	r1, [r7, #8]
 80070fe:	607a      	str	r2, [r7, #4]
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	3b04      	subs	r3, #4
 8007104:	60fb      	str	r3, [r7, #12]
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800710c:	601a      	str	r2, [r3, #0]
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	3b04      	subs	r3, #4
 8007112:	60fb      	str	r3, [r7, #12]
 8007114:	68bb      	ldr	r3, [r7, #8]
 8007116:	f023 0201 	bic.w	r2, r3, #1
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	601a      	str	r2, [r3, #0]
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	3b04      	subs	r3, #4
 8007122:	60fb      	str	r3, [r7, #12]
 8007124:	4a0c      	ldr	r2, [pc, #48]	; (8007158 <pxPortInitialiseStack+0x64>)
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	601a      	str	r2, [r3, #0]
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	3b14      	subs	r3, #20
 800712e:	60fb      	str	r3, [r7, #12]
 8007130:	687a      	ldr	r2, [r7, #4]
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	601a      	str	r2, [r3, #0]
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	3b04      	subs	r3, #4
 800713a:	60fb      	str	r3, [r7, #12]
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	f06f 0202 	mvn.w	r2, #2
 8007142:	601a      	str	r2, [r3, #0]
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	3b20      	subs	r3, #32
 8007148:	60fb      	str	r3, [r7, #12]
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	4618      	mov	r0, r3
 800714e:	3714      	adds	r7, #20
 8007150:	46bd      	mov	sp, r7
 8007152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007156:	4770      	bx	lr
 8007158:	0800715d 	.word	0x0800715d

0800715c <prvTaskExitError>:
 800715c:	b480      	push	{r7}
 800715e:	b085      	sub	sp, #20
 8007160:	af00      	add	r7, sp, #0
 8007162:	2300      	movs	r3, #0
 8007164:	607b      	str	r3, [r7, #4]
 8007166:	4b12      	ldr	r3, [pc, #72]	; (80071b0 <prvTaskExitError+0x54>)
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800716e:	d00a      	beq.n	8007186 <prvTaskExitError+0x2a>
 8007170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007174:	f383 8811 	msr	BASEPRI, r3
 8007178:	f3bf 8f6f 	isb	sy
 800717c:	f3bf 8f4f 	dsb	sy
 8007180:	60fb      	str	r3, [r7, #12]
 8007182:	bf00      	nop
 8007184:	e7fe      	b.n	8007184 <prvTaskExitError+0x28>
 8007186:	f04f 0350 	mov.w	r3, #80	; 0x50
 800718a:	f383 8811 	msr	BASEPRI, r3
 800718e:	f3bf 8f6f 	isb	sy
 8007192:	f3bf 8f4f 	dsb	sy
 8007196:	60bb      	str	r3, [r7, #8]
 8007198:	bf00      	nop
 800719a:	bf00      	nop
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d0fc      	beq.n	800719c <prvTaskExitError+0x40>
 80071a2:	bf00      	nop
 80071a4:	bf00      	nop
 80071a6:	3714      	adds	r7, #20
 80071a8:	46bd      	mov	sp, r7
 80071aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ae:	4770      	bx	lr
 80071b0:	2000001c 	.word	0x2000001c
	...

080071c0 <SVC_Handler>:
 80071c0:	4b07      	ldr	r3, [pc, #28]	; (80071e0 <pxCurrentTCBConst2>)
 80071c2:	6819      	ldr	r1, [r3, #0]
 80071c4:	6808      	ldr	r0, [r1, #0]
 80071c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071ca:	f380 8809 	msr	PSP, r0
 80071ce:	f3bf 8f6f 	isb	sy
 80071d2:	f04f 0000 	mov.w	r0, #0
 80071d6:	f380 8811 	msr	BASEPRI, r0
 80071da:	4770      	bx	lr
 80071dc:	f3af 8000 	nop.w

080071e0 <pxCurrentTCBConst2>:
 80071e0:	200008f0 	.word	0x200008f0
 80071e4:	bf00      	nop
 80071e6:	bf00      	nop

080071e8 <prvPortStartFirstTask>:
 80071e8:	4808      	ldr	r0, [pc, #32]	; (800720c <prvPortStartFirstTask+0x24>)
 80071ea:	6800      	ldr	r0, [r0, #0]
 80071ec:	6800      	ldr	r0, [r0, #0]
 80071ee:	f380 8808 	msr	MSP, r0
 80071f2:	f04f 0000 	mov.w	r0, #0
 80071f6:	f380 8814 	msr	CONTROL, r0
 80071fa:	b662      	cpsie	i
 80071fc:	b661      	cpsie	f
 80071fe:	f3bf 8f4f 	dsb	sy
 8007202:	f3bf 8f6f 	isb	sy
 8007206:	df00      	svc	0
 8007208:	bf00      	nop
 800720a:	bf00      	nop
 800720c:	e000ed08 	.word	0xe000ed08

08007210 <xPortStartScheduler>:
 8007210:	b580      	push	{r7, lr}
 8007212:	b086      	sub	sp, #24
 8007214:	af00      	add	r7, sp, #0
 8007216:	4b46      	ldr	r3, [pc, #280]	; (8007330 <xPortStartScheduler+0x120>)
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	4a46      	ldr	r2, [pc, #280]	; (8007334 <xPortStartScheduler+0x124>)
 800721c:	4293      	cmp	r3, r2
 800721e:	d10a      	bne.n	8007236 <xPortStartScheduler+0x26>
 8007220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007224:	f383 8811 	msr	BASEPRI, r3
 8007228:	f3bf 8f6f 	isb	sy
 800722c:	f3bf 8f4f 	dsb	sy
 8007230:	613b      	str	r3, [r7, #16]
 8007232:	bf00      	nop
 8007234:	e7fe      	b.n	8007234 <xPortStartScheduler+0x24>
 8007236:	4b3e      	ldr	r3, [pc, #248]	; (8007330 <xPortStartScheduler+0x120>)
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	4a3f      	ldr	r2, [pc, #252]	; (8007338 <xPortStartScheduler+0x128>)
 800723c:	4293      	cmp	r3, r2
 800723e:	d10a      	bne.n	8007256 <xPortStartScheduler+0x46>
 8007240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007244:	f383 8811 	msr	BASEPRI, r3
 8007248:	f3bf 8f6f 	isb	sy
 800724c:	f3bf 8f4f 	dsb	sy
 8007250:	60fb      	str	r3, [r7, #12]
 8007252:	bf00      	nop
 8007254:	e7fe      	b.n	8007254 <xPortStartScheduler+0x44>
 8007256:	4b39      	ldr	r3, [pc, #228]	; (800733c <xPortStartScheduler+0x12c>)
 8007258:	617b      	str	r3, [r7, #20]
 800725a:	697b      	ldr	r3, [r7, #20]
 800725c:	781b      	ldrb	r3, [r3, #0]
 800725e:	b2db      	uxtb	r3, r3
 8007260:	607b      	str	r3, [r7, #4]
 8007262:	697b      	ldr	r3, [r7, #20]
 8007264:	22ff      	movs	r2, #255	; 0xff
 8007266:	701a      	strb	r2, [r3, #0]
 8007268:	697b      	ldr	r3, [r7, #20]
 800726a:	781b      	ldrb	r3, [r3, #0]
 800726c:	b2db      	uxtb	r3, r3
 800726e:	70fb      	strb	r3, [r7, #3]
 8007270:	78fb      	ldrb	r3, [r7, #3]
 8007272:	b2db      	uxtb	r3, r3
 8007274:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007278:	b2da      	uxtb	r2, r3
 800727a:	4b31      	ldr	r3, [pc, #196]	; (8007340 <xPortStartScheduler+0x130>)
 800727c:	701a      	strb	r2, [r3, #0]
 800727e:	4b31      	ldr	r3, [pc, #196]	; (8007344 <xPortStartScheduler+0x134>)
 8007280:	2207      	movs	r2, #7
 8007282:	601a      	str	r2, [r3, #0]
 8007284:	e009      	b.n	800729a <xPortStartScheduler+0x8a>
 8007286:	4b2f      	ldr	r3, [pc, #188]	; (8007344 <xPortStartScheduler+0x134>)
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	3b01      	subs	r3, #1
 800728c:	4a2d      	ldr	r2, [pc, #180]	; (8007344 <xPortStartScheduler+0x134>)
 800728e:	6013      	str	r3, [r2, #0]
 8007290:	78fb      	ldrb	r3, [r7, #3]
 8007292:	b2db      	uxtb	r3, r3
 8007294:	005b      	lsls	r3, r3, #1
 8007296:	b2db      	uxtb	r3, r3
 8007298:	70fb      	strb	r3, [r7, #3]
 800729a:	78fb      	ldrb	r3, [r7, #3]
 800729c:	b2db      	uxtb	r3, r3
 800729e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072a2:	2b80      	cmp	r3, #128	; 0x80
 80072a4:	d0ef      	beq.n	8007286 <xPortStartScheduler+0x76>
 80072a6:	4b27      	ldr	r3, [pc, #156]	; (8007344 <xPortStartScheduler+0x134>)
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f1c3 0307 	rsb	r3, r3, #7
 80072ae:	2b04      	cmp	r3, #4
 80072b0:	d00a      	beq.n	80072c8 <xPortStartScheduler+0xb8>
 80072b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072b6:	f383 8811 	msr	BASEPRI, r3
 80072ba:	f3bf 8f6f 	isb	sy
 80072be:	f3bf 8f4f 	dsb	sy
 80072c2:	60bb      	str	r3, [r7, #8]
 80072c4:	bf00      	nop
 80072c6:	e7fe      	b.n	80072c6 <xPortStartScheduler+0xb6>
 80072c8:	4b1e      	ldr	r3, [pc, #120]	; (8007344 <xPortStartScheduler+0x134>)
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	021b      	lsls	r3, r3, #8
 80072ce:	4a1d      	ldr	r2, [pc, #116]	; (8007344 <xPortStartScheduler+0x134>)
 80072d0:	6013      	str	r3, [r2, #0]
 80072d2:	4b1c      	ldr	r3, [pc, #112]	; (8007344 <xPortStartScheduler+0x134>)
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80072da:	4a1a      	ldr	r2, [pc, #104]	; (8007344 <xPortStartScheduler+0x134>)
 80072dc:	6013      	str	r3, [r2, #0]
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	b2da      	uxtb	r2, r3
 80072e2:	697b      	ldr	r3, [r7, #20]
 80072e4:	701a      	strb	r2, [r3, #0]
 80072e6:	4b18      	ldr	r3, [pc, #96]	; (8007348 <xPortStartScheduler+0x138>)
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	4a17      	ldr	r2, [pc, #92]	; (8007348 <xPortStartScheduler+0x138>)
 80072ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80072f0:	6013      	str	r3, [r2, #0]
 80072f2:	4b15      	ldr	r3, [pc, #84]	; (8007348 <xPortStartScheduler+0x138>)
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	4a14      	ldr	r2, [pc, #80]	; (8007348 <xPortStartScheduler+0x138>)
 80072f8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80072fc:	6013      	str	r3, [r2, #0]
 80072fe:	f000 f8dd 	bl	80074bc <vPortSetupTimerInterrupt>
 8007302:	4b12      	ldr	r3, [pc, #72]	; (800734c <xPortStartScheduler+0x13c>)
 8007304:	2200      	movs	r2, #0
 8007306:	601a      	str	r2, [r3, #0]
 8007308:	f000 f8fc 	bl	8007504 <vPortEnableVFP>
 800730c:	4b10      	ldr	r3, [pc, #64]	; (8007350 <xPortStartScheduler+0x140>)
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	4a0f      	ldr	r2, [pc, #60]	; (8007350 <xPortStartScheduler+0x140>)
 8007312:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007316:	6013      	str	r3, [r2, #0]
 8007318:	f7ff ff66 	bl	80071e8 <prvPortStartFirstTask>
 800731c:	f7ff f850 	bl	80063c0 <vTaskSwitchContext>
 8007320:	f7ff ff1c 	bl	800715c <prvTaskExitError>
 8007324:	2300      	movs	r3, #0
 8007326:	4618      	mov	r0, r3
 8007328:	3718      	adds	r7, #24
 800732a:	46bd      	mov	sp, r7
 800732c:	bd80      	pop	{r7, pc}
 800732e:	bf00      	nop
 8007330:	e000ed00 	.word	0xe000ed00
 8007334:	410fc271 	.word	0x410fc271
 8007338:	410fc270 	.word	0x410fc270
 800733c:	e000e400 	.word	0xe000e400
 8007340:	20000f1c 	.word	0x20000f1c
 8007344:	20000f20 	.word	0x20000f20
 8007348:	e000ed20 	.word	0xe000ed20
 800734c:	2000001c 	.word	0x2000001c
 8007350:	e000ef34 	.word	0xe000ef34

08007354 <vPortEnterCritical>:
 8007354:	b480      	push	{r7}
 8007356:	b083      	sub	sp, #12
 8007358:	af00      	add	r7, sp, #0
 800735a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800735e:	f383 8811 	msr	BASEPRI, r3
 8007362:	f3bf 8f6f 	isb	sy
 8007366:	f3bf 8f4f 	dsb	sy
 800736a:	607b      	str	r3, [r7, #4]
 800736c:	bf00      	nop
 800736e:	4b0f      	ldr	r3, [pc, #60]	; (80073ac <vPortEnterCritical+0x58>)
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	3301      	adds	r3, #1
 8007374:	4a0d      	ldr	r2, [pc, #52]	; (80073ac <vPortEnterCritical+0x58>)
 8007376:	6013      	str	r3, [r2, #0]
 8007378:	4b0c      	ldr	r3, [pc, #48]	; (80073ac <vPortEnterCritical+0x58>)
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	2b01      	cmp	r3, #1
 800737e:	d10f      	bne.n	80073a0 <vPortEnterCritical+0x4c>
 8007380:	4b0b      	ldr	r3, [pc, #44]	; (80073b0 <vPortEnterCritical+0x5c>)
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	b2db      	uxtb	r3, r3
 8007386:	2b00      	cmp	r3, #0
 8007388:	d00a      	beq.n	80073a0 <vPortEnterCritical+0x4c>
 800738a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800738e:	f383 8811 	msr	BASEPRI, r3
 8007392:	f3bf 8f6f 	isb	sy
 8007396:	f3bf 8f4f 	dsb	sy
 800739a:	603b      	str	r3, [r7, #0]
 800739c:	bf00      	nop
 800739e:	e7fe      	b.n	800739e <vPortEnterCritical+0x4a>
 80073a0:	bf00      	nop
 80073a2:	370c      	adds	r7, #12
 80073a4:	46bd      	mov	sp, r7
 80073a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073aa:	4770      	bx	lr
 80073ac:	2000001c 	.word	0x2000001c
 80073b0:	e000ed04 	.word	0xe000ed04

080073b4 <vPortExitCritical>:
 80073b4:	b480      	push	{r7}
 80073b6:	b083      	sub	sp, #12
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	4b12      	ldr	r3, [pc, #72]	; (8007404 <vPortExitCritical+0x50>)
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d10a      	bne.n	80073d8 <vPortExitCritical+0x24>
 80073c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073c6:	f383 8811 	msr	BASEPRI, r3
 80073ca:	f3bf 8f6f 	isb	sy
 80073ce:	f3bf 8f4f 	dsb	sy
 80073d2:	607b      	str	r3, [r7, #4]
 80073d4:	bf00      	nop
 80073d6:	e7fe      	b.n	80073d6 <vPortExitCritical+0x22>
 80073d8:	4b0a      	ldr	r3, [pc, #40]	; (8007404 <vPortExitCritical+0x50>)
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	3b01      	subs	r3, #1
 80073de:	4a09      	ldr	r2, [pc, #36]	; (8007404 <vPortExitCritical+0x50>)
 80073e0:	6013      	str	r3, [r2, #0]
 80073e2:	4b08      	ldr	r3, [pc, #32]	; (8007404 <vPortExitCritical+0x50>)
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d105      	bne.n	80073f6 <vPortExitCritical+0x42>
 80073ea:	2300      	movs	r3, #0
 80073ec:	603b      	str	r3, [r7, #0]
 80073ee:	683b      	ldr	r3, [r7, #0]
 80073f0:	f383 8811 	msr	BASEPRI, r3
 80073f4:	bf00      	nop
 80073f6:	bf00      	nop
 80073f8:	370c      	adds	r7, #12
 80073fa:	46bd      	mov	sp, r7
 80073fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007400:	4770      	bx	lr
 8007402:	bf00      	nop
 8007404:	2000001c 	.word	0x2000001c
	...

08007410 <PendSV_Handler>:
 8007410:	f3ef 8009 	mrs	r0, PSP
 8007414:	f3bf 8f6f 	isb	sy
 8007418:	4b15      	ldr	r3, [pc, #84]	; (8007470 <pxCurrentTCBConst>)
 800741a:	681a      	ldr	r2, [r3, #0]
 800741c:	f01e 0f10 	tst.w	lr, #16
 8007420:	bf08      	it	eq
 8007422:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007426:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800742a:	6010      	str	r0, [r2, #0]
 800742c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007430:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007434:	f380 8811 	msr	BASEPRI, r0
 8007438:	f3bf 8f4f 	dsb	sy
 800743c:	f3bf 8f6f 	isb	sy
 8007440:	f7fe ffbe 	bl	80063c0 <vTaskSwitchContext>
 8007444:	f04f 0000 	mov.w	r0, #0
 8007448:	f380 8811 	msr	BASEPRI, r0
 800744c:	bc09      	pop	{r0, r3}
 800744e:	6819      	ldr	r1, [r3, #0]
 8007450:	6808      	ldr	r0, [r1, #0]
 8007452:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007456:	f01e 0f10 	tst.w	lr, #16
 800745a:	bf08      	it	eq
 800745c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007460:	f380 8809 	msr	PSP, r0
 8007464:	f3bf 8f6f 	isb	sy
 8007468:	4770      	bx	lr
 800746a:	bf00      	nop
 800746c:	f3af 8000 	nop.w

08007470 <pxCurrentTCBConst>:
 8007470:	200008f0 	.word	0x200008f0
 8007474:	bf00      	nop
 8007476:	bf00      	nop

08007478 <xPortSysTickHandler>:
 8007478:	b580      	push	{r7, lr}
 800747a:	b082      	sub	sp, #8
 800747c:	af00      	add	r7, sp, #0
 800747e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007482:	f383 8811 	msr	BASEPRI, r3
 8007486:	f3bf 8f6f 	isb	sy
 800748a:	f3bf 8f4f 	dsb	sy
 800748e:	607b      	str	r3, [r7, #4]
 8007490:	bf00      	nop
 8007492:	f7fe fedb 	bl	800624c <xTaskIncrementTick>
 8007496:	4603      	mov	r3, r0
 8007498:	2b00      	cmp	r3, #0
 800749a:	d003      	beq.n	80074a4 <xPortSysTickHandler+0x2c>
 800749c:	4b06      	ldr	r3, [pc, #24]	; (80074b8 <xPortSysTickHandler+0x40>)
 800749e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074a2:	601a      	str	r2, [r3, #0]
 80074a4:	2300      	movs	r3, #0
 80074a6:	603b      	str	r3, [r7, #0]
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	f383 8811 	msr	BASEPRI, r3
 80074ae:	bf00      	nop
 80074b0:	bf00      	nop
 80074b2:	3708      	adds	r7, #8
 80074b4:	46bd      	mov	sp, r7
 80074b6:	bd80      	pop	{r7, pc}
 80074b8:	e000ed04 	.word	0xe000ed04

080074bc <vPortSetupTimerInterrupt>:
 80074bc:	b480      	push	{r7}
 80074be:	af00      	add	r7, sp, #0
 80074c0:	4b0b      	ldr	r3, [pc, #44]	; (80074f0 <vPortSetupTimerInterrupt+0x34>)
 80074c2:	2200      	movs	r2, #0
 80074c4:	601a      	str	r2, [r3, #0]
 80074c6:	4b0b      	ldr	r3, [pc, #44]	; (80074f4 <vPortSetupTimerInterrupt+0x38>)
 80074c8:	2200      	movs	r2, #0
 80074ca:	601a      	str	r2, [r3, #0]
 80074cc:	4b0a      	ldr	r3, [pc, #40]	; (80074f8 <vPortSetupTimerInterrupt+0x3c>)
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	4a0a      	ldr	r2, [pc, #40]	; (80074fc <vPortSetupTimerInterrupt+0x40>)
 80074d2:	fba2 2303 	umull	r2, r3, r2, r3
 80074d6:	099b      	lsrs	r3, r3, #6
 80074d8:	4a09      	ldr	r2, [pc, #36]	; (8007500 <vPortSetupTimerInterrupt+0x44>)
 80074da:	3b01      	subs	r3, #1
 80074dc:	6013      	str	r3, [r2, #0]
 80074de:	4b04      	ldr	r3, [pc, #16]	; (80074f0 <vPortSetupTimerInterrupt+0x34>)
 80074e0:	2207      	movs	r2, #7
 80074e2:	601a      	str	r2, [r3, #0]
 80074e4:	bf00      	nop
 80074e6:	46bd      	mov	sp, r7
 80074e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ec:	4770      	bx	lr
 80074ee:	bf00      	nop
 80074f0:	e000e010 	.word	0xe000e010
 80074f4:	e000e018 	.word	0xe000e018
 80074f8:	20000010 	.word	0x20000010
 80074fc:	10624dd3 	.word	0x10624dd3
 8007500:	e000e014 	.word	0xe000e014

08007504 <vPortEnableVFP>:
 8007504:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007514 <vPortEnableVFP+0x10>
 8007508:	6801      	ldr	r1, [r0, #0]
 800750a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800750e:	6001      	str	r1, [r0, #0]
 8007510:	4770      	bx	lr
 8007512:	bf00      	nop
 8007514:	e000ed88 	.word	0xe000ed88

08007518 <vPortValidateInterruptPriority>:
 8007518:	b480      	push	{r7}
 800751a:	b085      	sub	sp, #20
 800751c:	af00      	add	r7, sp, #0
 800751e:	f3ef 8305 	mrs	r3, IPSR
 8007522:	60fb      	str	r3, [r7, #12]
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	2b0f      	cmp	r3, #15
 8007528:	d914      	bls.n	8007554 <vPortValidateInterruptPriority+0x3c>
 800752a:	4a17      	ldr	r2, [pc, #92]	; (8007588 <vPortValidateInterruptPriority+0x70>)
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	4413      	add	r3, r2
 8007530:	781b      	ldrb	r3, [r3, #0]
 8007532:	72fb      	strb	r3, [r7, #11]
 8007534:	4b15      	ldr	r3, [pc, #84]	; (800758c <vPortValidateInterruptPriority+0x74>)
 8007536:	781b      	ldrb	r3, [r3, #0]
 8007538:	7afa      	ldrb	r2, [r7, #11]
 800753a:	429a      	cmp	r2, r3
 800753c:	d20a      	bcs.n	8007554 <vPortValidateInterruptPriority+0x3c>
 800753e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007542:	f383 8811 	msr	BASEPRI, r3
 8007546:	f3bf 8f6f 	isb	sy
 800754a:	f3bf 8f4f 	dsb	sy
 800754e:	607b      	str	r3, [r7, #4]
 8007550:	bf00      	nop
 8007552:	e7fe      	b.n	8007552 <vPortValidateInterruptPriority+0x3a>
 8007554:	4b0e      	ldr	r3, [pc, #56]	; (8007590 <vPortValidateInterruptPriority+0x78>)
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800755c:	4b0d      	ldr	r3, [pc, #52]	; (8007594 <vPortValidateInterruptPriority+0x7c>)
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	429a      	cmp	r2, r3
 8007562:	d90a      	bls.n	800757a <vPortValidateInterruptPriority+0x62>
 8007564:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007568:	f383 8811 	msr	BASEPRI, r3
 800756c:	f3bf 8f6f 	isb	sy
 8007570:	f3bf 8f4f 	dsb	sy
 8007574:	603b      	str	r3, [r7, #0]
 8007576:	bf00      	nop
 8007578:	e7fe      	b.n	8007578 <vPortValidateInterruptPriority+0x60>
 800757a:	bf00      	nop
 800757c:	3714      	adds	r7, #20
 800757e:	46bd      	mov	sp, r7
 8007580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007584:	4770      	bx	lr
 8007586:	bf00      	nop
 8007588:	e000e3f0 	.word	0xe000e3f0
 800758c:	20000f1c 	.word	0x20000f1c
 8007590:	e000ed0c 	.word	0xe000ed0c
 8007594:	20000f20 	.word	0x20000f20

08007598 <pvPortMalloc>:
 8007598:	b580      	push	{r7, lr}
 800759a:	b08a      	sub	sp, #40	; 0x28
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
 80075a0:	2300      	movs	r3, #0
 80075a2:	61fb      	str	r3, [r7, #28]
 80075a4:	f7fe fd96 	bl	80060d4 <vTaskSuspendAll>
 80075a8:	4b5b      	ldr	r3, [pc, #364]	; (8007718 <pvPortMalloc+0x180>)
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d101      	bne.n	80075b4 <pvPortMalloc+0x1c>
 80075b0:	f000 f920 	bl	80077f4 <prvHeapInit>
 80075b4:	4b59      	ldr	r3, [pc, #356]	; (800771c <pvPortMalloc+0x184>)
 80075b6:	681a      	ldr	r2, [r3, #0]
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	4013      	ands	r3, r2
 80075bc:	2b00      	cmp	r3, #0
 80075be:	f040 8093 	bne.w	80076e8 <pvPortMalloc+0x150>
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d01d      	beq.n	8007604 <pvPortMalloc+0x6c>
 80075c8:	2208      	movs	r2, #8
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	4413      	add	r3, r2
 80075ce:	607b      	str	r3, [r7, #4]
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	f003 0307 	and.w	r3, r3, #7
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d014      	beq.n	8007604 <pvPortMalloc+0x6c>
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	f023 0307 	bic.w	r3, r3, #7
 80075e0:	3308      	adds	r3, #8
 80075e2:	607b      	str	r3, [r7, #4]
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	f003 0307 	and.w	r3, r3, #7
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d00a      	beq.n	8007604 <pvPortMalloc+0x6c>
 80075ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075f2:	f383 8811 	msr	BASEPRI, r3
 80075f6:	f3bf 8f6f 	isb	sy
 80075fa:	f3bf 8f4f 	dsb	sy
 80075fe:	617b      	str	r3, [r7, #20]
 8007600:	bf00      	nop
 8007602:	e7fe      	b.n	8007602 <pvPortMalloc+0x6a>
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d06e      	beq.n	80076e8 <pvPortMalloc+0x150>
 800760a:	4b45      	ldr	r3, [pc, #276]	; (8007720 <pvPortMalloc+0x188>)
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	687a      	ldr	r2, [r7, #4]
 8007610:	429a      	cmp	r2, r3
 8007612:	d869      	bhi.n	80076e8 <pvPortMalloc+0x150>
 8007614:	4b43      	ldr	r3, [pc, #268]	; (8007724 <pvPortMalloc+0x18c>)
 8007616:	623b      	str	r3, [r7, #32]
 8007618:	4b42      	ldr	r3, [pc, #264]	; (8007724 <pvPortMalloc+0x18c>)
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	627b      	str	r3, [r7, #36]	; 0x24
 800761e:	e004      	b.n	800762a <pvPortMalloc+0x92>
 8007620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007622:	623b      	str	r3, [r7, #32]
 8007624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	627b      	str	r3, [r7, #36]	; 0x24
 800762a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800762c:	685b      	ldr	r3, [r3, #4]
 800762e:	687a      	ldr	r2, [r7, #4]
 8007630:	429a      	cmp	r2, r3
 8007632:	d903      	bls.n	800763c <pvPortMalloc+0xa4>
 8007634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d1f1      	bne.n	8007620 <pvPortMalloc+0x88>
 800763c:	4b36      	ldr	r3, [pc, #216]	; (8007718 <pvPortMalloc+0x180>)
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007642:	429a      	cmp	r2, r3
 8007644:	d050      	beq.n	80076e8 <pvPortMalloc+0x150>
 8007646:	6a3b      	ldr	r3, [r7, #32]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	2208      	movs	r2, #8
 800764c:	4413      	add	r3, r2
 800764e:	61fb      	str	r3, [r7, #28]
 8007650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007652:	681a      	ldr	r2, [r3, #0]
 8007654:	6a3b      	ldr	r3, [r7, #32]
 8007656:	601a      	str	r2, [r3, #0]
 8007658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800765a:	685a      	ldr	r2, [r3, #4]
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	1ad2      	subs	r2, r2, r3
 8007660:	2308      	movs	r3, #8
 8007662:	005b      	lsls	r3, r3, #1
 8007664:	429a      	cmp	r2, r3
 8007666:	d91f      	bls.n	80076a8 <pvPortMalloc+0x110>
 8007668:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	4413      	add	r3, r2
 800766e:	61bb      	str	r3, [r7, #24]
 8007670:	69bb      	ldr	r3, [r7, #24]
 8007672:	f003 0307 	and.w	r3, r3, #7
 8007676:	2b00      	cmp	r3, #0
 8007678:	d00a      	beq.n	8007690 <pvPortMalloc+0xf8>
 800767a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800767e:	f383 8811 	msr	BASEPRI, r3
 8007682:	f3bf 8f6f 	isb	sy
 8007686:	f3bf 8f4f 	dsb	sy
 800768a:	613b      	str	r3, [r7, #16]
 800768c:	bf00      	nop
 800768e:	e7fe      	b.n	800768e <pvPortMalloc+0xf6>
 8007690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007692:	685a      	ldr	r2, [r3, #4]
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	1ad2      	subs	r2, r2, r3
 8007698:	69bb      	ldr	r3, [r7, #24]
 800769a:	605a      	str	r2, [r3, #4]
 800769c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800769e:	687a      	ldr	r2, [r7, #4]
 80076a0:	605a      	str	r2, [r3, #4]
 80076a2:	69b8      	ldr	r0, [r7, #24]
 80076a4:	f000 f908 	bl	80078b8 <prvInsertBlockIntoFreeList>
 80076a8:	4b1d      	ldr	r3, [pc, #116]	; (8007720 <pvPortMalloc+0x188>)
 80076aa:	681a      	ldr	r2, [r3, #0]
 80076ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ae:	685b      	ldr	r3, [r3, #4]
 80076b0:	1ad3      	subs	r3, r2, r3
 80076b2:	4a1b      	ldr	r2, [pc, #108]	; (8007720 <pvPortMalloc+0x188>)
 80076b4:	6013      	str	r3, [r2, #0]
 80076b6:	4b1a      	ldr	r3, [pc, #104]	; (8007720 <pvPortMalloc+0x188>)
 80076b8:	681a      	ldr	r2, [r3, #0]
 80076ba:	4b1b      	ldr	r3, [pc, #108]	; (8007728 <pvPortMalloc+0x190>)
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	429a      	cmp	r2, r3
 80076c0:	d203      	bcs.n	80076ca <pvPortMalloc+0x132>
 80076c2:	4b17      	ldr	r3, [pc, #92]	; (8007720 <pvPortMalloc+0x188>)
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	4a18      	ldr	r2, [pc, #96]	; (8007728 <pvPortMalloc+0x190>)
 80076c8:	6013      	str	r3, [r2, #0]
 80076ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076cc:	685a      	ldr	r2, [r3, #4]
 80076ce:	4b13      	ldr	r3, [pc, #76]	; (800771c <pvPortMalloc+0x184>)
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	431a      	orrs	r2, r3
 80076d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076d6:	605a      	str	r2, [r3, #4]
 80076d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076da:	2200      	movs	r2, #0
 80076dc:	601a      	str	r2, [r3, #0]
 80076de:	4b13      	ldr	r3, [pc, #76]	; (800772c <pvPortMalloc+0x194>)
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	3301      	adds	r3, #1
 80076e4:	4a11      	ldr	r2, [pc, #68]	; (800772c <pvPortMalloc+0x194>)
 80076e6:	6013      	str	r3, [r2, #0]
 80076e8:	f7fe fd02 	bl	80060f0 <xTaskResumeAll>
 80076ec:	69fb      	ldr	r3, [r7, #28]
 80076ee:	f003 0307 	and.w	r3, r3, #7
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d00a      	beq.n	800770c <pvPortMalloc+0x174>
 80076f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076fa:	f383 8811 	msr	BASEPRI, r3
 80076fe:	f3bf 8f6f 	isb	sy
 8007702:	f3bf 8f4f 	dsb	sy
 8007706:	60fb      	str	r3, [r7, #12]
 8007708:	bf00      	nop
 800770a:	e7fe      	b.n	800770a <pvPortMalloc+0x172>
 800770c:	69fb      	ldr	r3, [r7, #28]
 800770e:	4618      	mov	r0, r3
 8007710:	3728      	adds	r7, #40	; 0x28
 8007712:	46bd      	mov	sp, r7
 8007714:	bd80      	pop	{r7, pc}
 8007716:	bf00      	nop
 8007718:	20004b2c 	.word	0x20004b2c
 800771c:	20004b40 	.word	0x20004b40
 8007720:	20004b30 	.word	0x20004b30
 8007724:	20004b24 	.word	0x20004b24
 8007728:	20004b34 	.word	0x20004b34
 800772c:	20004b38 	.word	0x20004b38

08007730 <vPortFree>:
 8007730:	b580      	push	{r7, lr}
 8007732:	b086      	sub	sp, #24
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	617b      	str	r3, [r7, #20]
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2b00      	cmp	r3, #0
 8007740:	d04d      	beq.n	80077de <vPortFree+0xae>
 8007742:	2308      	movs	r3, #8
 8007744:	425b      	negs	r3, r3
 8007746:	697a      	ldr	r2, [r7, #20]
 8007748:	4413      	add	r3, r2
 800774a:	617b      	str	r3, [r7, #20]
 800774c:	697b      	ldr	r3, [r7, #20]
 800774e:	613b      	str	r3, [r7, #16]
 8007750:	693b      	ldr	r3, [r7, #16]
 8007752:	685a      	ldr	r2, [r3, #4]
 8007754:	4b24      	ldr	r3, [pc, #144]	; (80077e8 <vPortFree+0xb8>)
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	4013      	ands	r3, r2
 800775a:	2b00      	cmp	r3, #0
 800775c:	d10a      	bne.n	8007774 <vPortFree+0x44>
 800775e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007762:	f383 8811 	msr	BASEPRI, r3
 8007766:	f3bf 8f6f 	isb	sy
 800776a:	f3bf 8f4f 	dsb	sy
 800776e:	60fb      	str	r3, [r7, #12]
 8007770:	bf00      	nop
 8007772:	e7fe      	b.n	8007772 <vPortFree+0x42>
 8007774:	693b      	ldr	r3, [r7, #16]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d00a      	beq.n	8007792 <vPortFree+0x62>
 800777c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007780:	f383 8811 	msr	BASEPRI, r3
 8007784:	f3bf 8f6f 	isb	sy
 8007788:	f3bf 8f4f 	dsb	sy
 800778c:	60bb      	str	r3, [r7, #8]
 800778e:	bf00      	nop
 8007790:	e7fe      	b.n	8007790 <vPortFree+0x60>
 8007792:	693b      	ldr	r3, [r7, #16]
 8007794:	685a      	ldr	r2, [r3, #4]
 8007796:	4b14      	ldr	r3, [pc, #80]	; (80077e8 <vPortFree+0xb8>)
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	4013      	ands	r3, r2
 800779c:	2b00      	cmp	r3, #0
 800779e:	d01e      	beq.n	80077de <vPortFree+0xae>
 80077a0:	693b      	ldr	r3, [r7, #16]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d11a      	bne.n	80077de <vPortFree+0xae>
 80077a8:	693b      	ldr	r3, [r7, #16]
 80077aa:	685a      	ldr	r2, [r3, #4]
 80077ac:	4b0e      	ldr	r3, [pc, #56]	; (80077e8 <vPortFree+0xb8>)
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	43db      	mvns	r3, r3
 80077b2:	401a      	ands	r2, r3
 80077b4:	693b      	ldr	r3, [r7, #16]
 80077b6:	605a      	str	r2, [r3, #4]
 80077b8:	f7fe fc8c 	bl	80060d4 <vTaskSuspendAll>
 80077bc:	693b      	ldr	r3, [r7, #16]
 80077be:	685a      	ldr	r2, [r3, #4]
 80077c0:	4b0a      	ldr	r3, [pc, #40]	; (80077ec <vPortFree+0xbc>)
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	4413      	add	r3, r2
 80077c6:	4a09      	ldr	r2, [pc, #36]	; (80077ec <vPortFree+0xbc>)
 80077c8:	6013      	str	r3, [r2, #0]
 80077ca:	6938      	ldr	r0, [r7, #16]
 80077cc:	f000 f874 	bl	80078b8 <prvInsertBlockIntoFreeList>
 80077d0:	4b07      	ldr	r3, [pc, #28]	; (80077f0 <vPortFree+0xc0>)
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	3301      	adds	r3, #1
 80077d6:	4a06      	ldr	r2, [pc, #24]	; (80077f0 <vPortFree+0xc0>)
 80077d8:	6013      	str	r3, [r2, #0]
 80077da:	f7fe fc89 	bl	80060f0 <xTaskResumeAll>
 80077de:	bf00      	nop
 80077e0:	3718      	adds	r7, #24
 80077e2:	46bd      	mov	sp, r7
 80077e4:	bd80      	pop	{r7, pc}
 80077e6:	bf00      	nop
 80077e8:	20004b40 	.word	0x20004b40
 80077ec:	20004b30 	.word	0x20004b30
 80077f0:	20004b3c 	.word	0x20004b3c

080077f4 <prvHeapInit>:
 80077f4:	b480      	push	{r7}
 80077f6:	b085      	sub	sp, #20
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80077fe:	60bb      	str	r3, [r7, #8]
 8007800:	4b27      	ldr	r3, [pc, #156]	; (80078a0 <prvHeapInit+0xac>)
 8007802:	60fb      	str	r3, [r7, #12]
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	f003 0307 	and.w	r3, r3, #7
 800780a:	2b00      	cmp	r3, #0
 800780c:	d00c      	beq.n	8007828 <prvHeapInit+0x34>
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	3307      	adds	r3, #7
 8007812:	60fb      	str	r3, [r7, #12]
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	f023 0307 	bic.w	r3, r3, #7
 800781a:	60fb      	str	r3, [r7, #12]
 800781c:	68ba      	ldr	r2, [r7, #8]
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	1ad3      	subs	r3, r2, r3
 8007822:	4a1f      	ldr	r2, [pc, #124]	; (80078a0 <prvHeapInit+0xac>)
 8007824:	4413      	add	r3, r2
 8007826:	60bb      	str	r3, [r7, #8]
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	607b      	str	r3, [r7, #4]
 800782c:	4a1d      	ldr	r2, [pc, #116]	; (80078a4 <prvHeapInit+0xb0>)
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	6013      	str	r3, [r2, #0]
 8007832:	4b1c      	ldr	r3, [pc, #112]	; (80078a4 <prvHeapInit+0xb0>)
 8007834:	2200      	movs	r2, #0
 8007836:	605a      	str	r2, [r3, #4]
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	68ba      	ldr	r2, [r7, #8]
 800783c:	4413      	add	r3, r2
 800783e:	60fb      	str	r3, [r7, #12]
 8007840:	2208      	movs	r2, #8
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	1a9b      	subs	r3, r3, r2
 8007846:	60fb      	str	r3, [r7, #12]
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	f023 0307 	bic.w	r3, r3, #7
 800784e:	60fb      	str	r3, [r7, #12]
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	4a15      	ldr	r2, [pc, #84]	; (80078a8 <prvHeapInit+0xb4>)
 8007854:	6013      	str	r3, [r2, #0]
 8007856:	4b14      	ldr	r3, [pc, #80]	; (80078a8 <prvHeapInit+0xb4>)
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	2200      	movs	r2, #0
 800785c:	605a      	str	r2, [r3, #4]
 800785e:	4b12      	ldr	r3, [pc, #72]	; (80078a8 <prvHeapInit+0xb4>)
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	2200      	movs	r2, #0
 8007864:	601a      	str	r2, [r3, #0]
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	603b      	str	r3, [r7, #0]
 800786a:	683b      	ldr	r3, [r7, #0]
 800786c:	68fa      	ldr	r2, [r7, #12]
 800786e:	1ad2      	subs	r2, r2, r3
 8007870:	683b      	ldr	r3, [r7, #0]
 8007872:	605a      	str	r2, [r3, #4]
 8007874:	4b0c      	ldr	r3, [pc, #48]	; (80078a8 <prvHeapInit+0xb4>)
 8007876:	681a      	ldr	r2, [r3, #0]
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	601a      	str	r2, [r3, #0]
 800787c:	683b      	ldr	r3, [r7, #0]
 800787e:	685b      	ldr	r3, [r3, #4]
 8007880:	4a0a      	ldr	r2, [pc, #40]	; (80078ac <prvHeapInit+0xb8>)
 8007882:	6013      	str	r3, [r2, #0]
 8007884:	683b      	ldr	r3, [r7, #0]
 8007886:	685b      	ldr	r3, [r3, #4]
 8007888:	4a09      	ldr	r2, [pc, #36]	; (80078b0 <prvHeapInit+0xbc>)
 800788a:	6013      	str	r3, [r2, #0]
 800788c:	4b09      	ldr	r3, [pc, #36]	; (80078b4 <prvHeapInit+0xc0>)
 800788e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007892:	601a      	str	r2, [r3, #0]
 8007894:	bf00      	nop
 8007896:	3714      	adds	r7, #20
 8007898:	46bd      	mov	sp, r7
 800789a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789e:	4770      	bx	lr
 80078a0:	20000f24 	.word	0x20000f24
 80078a4:	20004b24 	.word	0x20004b24
 80078a8:	20004b2c 	.word	0x20004b2c
 80078ac:	20004b34 	.word	0x20004b34
 80078b0:	20004b30 	.word	0x20004b30
 80078b4:	20004b40 	.word	0x20004b40

080078b8 <prvInsertBlockIntoFreeList>:
 80078b8:	b480      	push	{r7}
 80078ba:	b085      	sub	sp, #20
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
 80078c0:	4b28      	ldr	r3, [pc, #160]	; (8007964 <prvInsertBlockIntoFreeList+0xac>)
 80078c2:	60fb      	str	r3, [r7, #12]
 80078c4:	e002      	b.n	80078cc <prvInsertBlockIntoFreeList+0x14>
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	60fb      	str	r3, [r7, #12]
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	687a      	ldr	r2, [r7, #4]
 80078d2:	429a      	cmp	r2, r3
 80078d4:	d8f7      	bhi.n	80078c6 <prvInsertBlockIntoFreeList+0xe>
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	60bb      	str	r3, [r7, #8]
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	685b      	ldr	r3, [r3, #4]
 80078de:	68ba      	ldr	r2, [r7, #8]
 80078e0:	4413      	add	r3, r2
 80078e2:	687a      	ldr	r2, [r7, #4]
 80078e4:	429a      	cmp	r2, r3
 80078e6:	d108      	bne.n	80078fa <prvInsertBlockIntoFreeList+0x42>
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	685a      	ldr	r2, [r3, #4]
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	685b      	ldr	r3, [r3, #4]
 80078f0:	441a      	add	r2, r3
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	605a      	str	r2, [r3, #4]
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	607b      	str	r3, [r7, #4]
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	60bb      	str	r3, [r7, #8]
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	685b      	ldr	r3, [r3, #4]
 8007902:	68ba      	ldr	r2, [r7, #8]
 8007904:	441a      	add	r2, r3
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	429a      	cmp	r2, r3
 800790c:	d118      	bne.n	8007940 <prvInsertBlockIntoFreeList+0x88>
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	681a      	ldr	r2, [r3, #0]
 8007912:	4b15      	ldr	r3, [pc, #84]	; (8007968 <prvInsertBlockIntoFreeList+0xb0>)
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	429a      	cmp	r2, r3
 8007918:	d00d      	beq.n	8007936 <prvInsertBlockIntoFreeList+0x7e>
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	685a      	ldr	r2, [r3, #4]
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	685b      	ldr	r3, [r3, #4]
 8007924:	441a      	add	r2, r3
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	605a      	str	r2, [r3, #4]
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	681a      	ldr	r2, [r3, #0]
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	601a      	str	r2, [r3, #0]
 8007934:	e008      	b.n	8007948 <prvInsertBlockIntoFreeList+0x90>
 8007936:	4b0c      	ldr	r3, [pc, #48]	; (8007968 <prvInsertBlockIntoFreeList+0xb0>)
 8007938:	681a      	ldr	r2, [r3, #0]
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	601a      	str	r2, [r3, #0]
 800793e:	e003      	b.n	8007948 <prvInsertBlockIntoFreeList+0x90>
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	681a      	ldr	r2, [r3, #0]
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	601a      	str	r2, [r3, #0]
 8007948:	68fa      	ldr	r2, [r7, #12]
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	429a      	cmp	r2, r3
 800794e:	d002      	beq.n	8007956 <prvInsertBlockIntoFreeList+0x9e>
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	687a      	ldr	r2, [r7, #4]
 8007954:	601a      	str	r2, [r3, #0]
 8007956:	bf00      	nop
 8007958:	3714      	adds	r7, #20
 800795a:	46bd      	mov	sp, r7
 800795c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007960:	4770      	bx	lr
 8007962:	bf00      	nop
 8007964:	20004b24 	.word	0x20004b24
 8007968:	20004b2c 	.word	0x20004b2c

0800796c <memset>:
 800796c:	4402      	add	r2, r0
 800796e:	4603      	mov	r3, r0
 8007970:	4293      	cmp	r3, r2
 8007972:	d100      	bne.n	8007976 <memset+0xa>
 8007974:	4770      	bx	lr
 8007976:	f803 1b01 	strb.w	r1, [r3], #1
 800797a:	e7f9      	b.n	8007970 <memset+0x4>

0800797c <__libc_init_array>:
 800797c:	b570      	push	{r4, r5, r6, lr}
 800797e:	4d0d      	ldr	r5, [pc, #52]	; (80079b4 <__libc_init_array+0x38>)
 8007980:	4c0d      	ldr	r4, [pc, #52]	; (80079b8 <__libc_init_array+0x3c>)
 8007982:	1b64      	subs	r4, r4, r5
 8007984:	10a4      	asrs	r4, r4, #2
 8007986:	2600      	movs	r6, #0
 8007988:	42a6      	cmp	r6, r4
 800798a:	d109      	bne.n	80079a0 <__libc_init_array+0x24>
 800798c:	4d0b      	ldr	r5, [pc, #44]	; (80079bc <__libc_init_array+0x40>)
 800798e:	4c0c      	ldr	r4, [pc, #48]	; (80079c0 <__libc_init_array+0x44>)
 8007990:	f000 f826 	bl	80079e0 <_init>
 8007994:	1b64      	subs	r4, r4, r5
 8007996:	10a4      	asrs	r4, r4, #2
 8007998:	2600      	movs	r6, #0
 800799a:	42a6      	cmp	r6, r4
 800799c:	d105      	bne.n	80079aa <__libc_init_array+0x2e>
 800799e:	bd70      	pop	{r4, r5, r6, pc}
 80079a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80079a4:	4798      	blx	r3
 80079a6:	3601      	adds	r6, #1
 80079a8:	e7ee      	b.n	8007988 <__libc_init_array+0xc>
 80079aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80079ae:	4798      	blx	r3
 80079b0:	3601      	adds	r6, #1
 80079b2:	e7f2      	b.n	800799a <__libc_init_array+0x1e>
 80079b4:	08007b90 	.word	0x08007b90
 80079b8:	08007b90 	.word	0x08007b90
 80079bc:	08007b90 	.word	0x08007b90
 80079c0:	08007b94 	.word	0x08007b94

080079c4 <memcpy>:
 80079c4:	440a      	add	r2, r1
 80079c6:	4291      	cmp	r1, r2
 80079c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80079cc:	d100      	bne.n	80079d0 <memcpy+0xc>
 80079ce:	4770      	bx	lr
 80079d0:	b510      	push	{r4, lr}
 80079d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80079d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80079da:	4291      	cmp	r1, r2
 80079dc:	d1f9      	bne.n	80079d2 <memcpy+0xe>
 80079de:	bd10      	pop	{r4, pc}

080079e0 <_init>:
 80079e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079e2:	bf00      	nop
 80079e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079e6:	bc08      	pop	{r3}
 80079e8:	469e      	mov	lr, r3
 80079ea:	4770      	bx	lr

080079ec <_fini>:
 80079ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079ee:	bf00      	nop
 80079f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079f2:	bc08      	pop	{r3}
 80079f4:	469e      	mov	lr, r3
 80079f6:	4770      	bx	lr
