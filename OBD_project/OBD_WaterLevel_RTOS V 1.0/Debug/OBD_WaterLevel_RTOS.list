
OBD_WaterLevel_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ce8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08004e88  08004e88  00014e88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f18  08004f18  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08004f18  08004f18  00014f18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004f20  08004f20  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f20  08004f20  00014f20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004f24  08004f24  00014f24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004f28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000049c4  20000010  08004f38  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200049d4  08004f38  000249d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000fc06  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002a27  00000000  00000000  0002fc89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000da0  00000000  00000000  000326b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a4e  00000000  00000000  00033450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002b15  00000000  00000000  00033e9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f4d3  00000000  00000000  000369b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00098093  00000000  00000000  00045e86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003784  00000000  00000000  000ddf1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  000e16a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000010 	.word	0x20000010
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004e70 	.word	0x08004e70

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000014 	.word	0x20000014
 80001dc:	08004e70 	.word	0x08004e70

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b970 	b.w	80004d8 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	460d      	mov	r5, r1
 8000218:	4604      	mov	r4, r0
 800021a:	460f      	mov	r7, r1
 800021c:	2b00      	cmp	r3, #0
 800021e:	d14a      	bne.n	80002b6 <__udivmoddi4+0xa6>
 8000220:	428a      	cmp	r2, r1
 8000222:	4694      	mov	ip, r2
 8000224:	d965      	bls.n	80002f2 <__udivmoddi4+0xe2>
 8000226:	fab2 f382 	clz	r3, r2
 800022a:	b143      	cbz	r3, 800023e <__udivmoddi4+0x2e>
 800022c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000230:	f1c3 0220 	rsb	r2, r3, #32
 8000234:	409f      	lsls	r7, r3
 8000236:	fa20 f202 	lsr.w	r2, r0, r2
 800023a:	4317      	orrs	r7, r2
 800023c:	409c      	lsls	r4, r3
 800023e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000242:	fa1f f58c 	uxth.w	r5, ip
 8000246:	fbb7 f1fe 	udiv	r1, r7, lr
 800024a:	0c22      	lsrs	r2, r4, #16
 800024c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000250:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000254:	fb01 f005 	mul.w	r0, r1, r5
 8000258:	4290      	cmp	r0, r2
 800025a:	d90a      	bls.n	8000272 <__udivmoddi4+0x62>
 800025c:	eb1c 0202 	adds.w	r2, ip, r2
 8000260:	f101 37ff 	add.w	r7, r1, #4294967295
 8000264:	f080 811c 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000268:	4290      	cmp	r0, r2
 800026a:	f240 8119 	bls.w	80004a0 <__udivmoddi4+0x290>
 800026e:	3902      	subs	r1, #2
 8000270:	4462      	add	r2, ip
 8000272:	1a12      	subs	r2, r2, r0
 8000274:	b2a4      	uxth	r4, r4
 8000276:	fbb2 f0fe 	udiv	r0, r2, lr
 800027a:	fb0e 2210 	mls	r2, lr, r0, r2
 800027e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000282:	fb00 f505 	mul.w	r5, r0, r5
 8000286:	42a5      	cmp	r5, r4
 8000288:	d90a      	bls.n	80002a0 <__udivmoddi4+0x90>
 800028a:	eb1c 0404 	adds.w	r4, ip, r4
 800028e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000292:	f080 8107 	bcs.w	80004a4 <__udivmoddi4+0x294>
 8000296:	42a5      	cmp	r5, r4
 8000298:	f240 8104 	bls.w	80004a4 <__udivmoddi4+0x294>
 800029c:	4464      	add	r4, ip
 800029e:	3802      	subs	r0, #2
 80002a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002a4:	1b64      	subs	r4, r4, r5
 80002a6:	2100      	movs	r1, #0
 80002a8:	b11e      	cbz	r6, 80002b2 <__udivmoddi4+0xa2>
 80002aa:	40dc      	lsrs	r4, r3
 80002ac:	2300      	movs	r3, #0
 80002ae:	e9c6 4300 	strd	r4, r3, [r6]
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d908      	bls.n	80002cc <__udivmoddi4+0xbc>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80ed 	beq.w	800049a <__udivmoddi4+0x28a>
 80002c0:	2100      	movs	r1, #0
 80002c2:	e9c6 0500 	strd	r0, r5, [r6]
 80002c6:	4608      	mov	r0, r1
 80002c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002cc:	fab3 f183 	clz	r1, r3
 80002d0:	2900      	cmp	r1, #0
 80002d2:	d149      	bne.n	8000368 <__udivmoddi4+0x158>
 80002d4:	42ab      	cmp	r3, r5
 80002d6:	d302      	bcc.n	80002de <__udivmoddi4+0xce>
 80002d8:	4282      	cmp	r2, r0
 80002da:	f200 80f8 	bhi.w	80004ce <__udivmoddi4+0x2be>
 80002de:	1a84      	subs	r4, r0, r2
 80002e0:	eb65 0203 	sbc.w	r2, r5, r3
 80002e4:	2001      	movs	r0, #1
 80002e6:	4617      	mov	r7, r2
 80002e8:	2e00      	cmp	r6, #0
 80002ea:	d0e2      	beq.n	80002b2 <__udivmoddi4+0xa2>
 80002ec:	e9c6 4700 	strd	r4, r7, [r6]
 80002f0:	e7df      	b.n	80002b2 <__udivmoddi4+0xa2>
 80002f2:	b902      	cbnz	r2, 80002f6 <__udivmoddi4+0xe6>
 80002f4:	deff      	udf	#255	; 0xff
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x210>
 8000300:	1a8a      	subs	r2, r1, r2
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2101      	movs	r1, #1
 800030c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000310:	fb07 2015 	mls	r0, r7, r5, r2
 8000314:	0c22      	lsrs	r2, r4, #16
 8000316:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800031a:	fb0e f005 	mul.w	r0, lr, r5
 800031e:	4290      	cmp	r0, r2
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x124>
 8000322:	eb1c 0202 	adds.w	r2, ip, r2
 8000326:	f105 38ff 	add.w	r8, r5, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4290      	cmp	r0, r2
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2b8>
 8000332:	4645      	mov	r5, r8
 8000334:	1a12      	subs	r2, r2, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb2 f0f7 	udiv	r0, r2, r7
 800033c:	fb07 2210 	mls	r2, r7, r0, r2
 8000340:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x14e>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 32ff 	add.w	r2, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x14c>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2c2>
 800035c:	4610      	mov	r0, r2
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000366:	e79f      	b.n	80002a8 <__udivmoddi4+0x98>
 8000368:	f1c1 0720 	rsb	r7, r1, #32
 800036c:	408b      	lsls	r3, r1
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa05 f401 	lsl.w	r4, r5, r1
 800037a:	fa20 f307 	lsr.w	r3, r0, r7
 800037e:	40fd      	lsrs	r5, r7
 8000380:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000384:	4323      	orrs	r3, r4
 8000386:	fbb5 f8f9 	udiv	r8, r5, r9
 800038a:	fa1f fe8c 	uxth.w	lr, ip
 800038e:	fb09 5518 	mls	r5, r9, r8, r5
 8000392:	0c1c      	lsrs	r4, r3, #16
 8000394:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000398:	fb08 f50e 	mul.w	r5, r8, lr
 800039c:	42a5      	cmp	r5, r4
 800039e:	fa02 f201 	lsl.w	r2, r2, r1
 80003a2:	fa00 f001 	lsl.w	r0, r0, r1
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2b4>
 80003b4:	42a5      	cmp	r5, r4
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2b4>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4464      	add	r4, ip
 80003c0:	1b64      	subs	r4, r4, r5
 80003c2:	b29d      	uxth	r5, r3
 80003c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c8:	fb09 4413 	mls	r4, r9, r3, r4
 80003cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f103 35ff 	add.w	r5, r3, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2ac>
 80003e2:	45a6      	cmp	lr, r4
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2ac>
 80003e6:	3b02      	subs	r3, #2
 80003e8:	4464      	add	r4, ip
 80003ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003ee:	fba3 9502 	umull	r9, r5, r3, r2
 80003f2:	eba4 040e 	sub.w	r4, r4, lr
 80003f6:	42ac      	cmp	r4, r5
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46ae      	mov	lr, r5
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x29c>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x298>
 8000400:	b156      	cbz	r6, 8000418 <__udivmoddi4+0x208>
 8000402:	ebb0 0208 	subs.w	r2, r0, r8
 8000406:	eb64 040e 	sbc.w	r4, r4, lr
 800040a:	fa04 f707 	lsl.w	r7, r4, r7
 800040e:	40ca      	lsrs	r2, r1
 8000410:	40cc      	lsrs	r4, r1
 8000412:	4317      	orrs	r7, r2
 8000414:	e9c6 7400 	strd	r7, r4, [r6]
 8000418:	4618      	mov	r0, r3
 800041a:	2100      	movs	r1, #0
 800041c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000420:	f1c3 0120 	rsb	r1, r3, #32
 8000424:	fa02 fc03 	lsl.w	ip, r2, r3
 8000428:	fa20 f201 	lsr.w	r2, r0, r1
 800042c:	fa25 f101 	lsr.w	r1, r5, r1
 8000430:	409d      	lsls	r5, r3
 8000432:	432a      	orrs	r2, r5
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000440:	fb07 1510 	mls	r5, r7, r0, r1
 8000444:	0c11      	lsrs	r1, r2, #16
 8000446:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800044a:	fb00 f50e 	mul.w	r5, r0, lr
 800044e:	428d      	cmp	r5, r1
 8000450:	fa04 f403 	lsl.w	r4, r4, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x258>
 8000456:	eb1c 0101 	adds.w	r1, ip, r1
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000460:	428d      	cmp	r5, r1
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000464:	3802      	subs	r0, #2
 8000466:	4461      	add	r1, ip
 8000468:	1b49      	subs	r1, r1, r5
 800046a:	b292      	uxth	r2, r2
 800046c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000470:	fb07 1115 	mls	r1, r7, r5, r1
 8000474:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000478:	fb05 f10e 	mul.w	r1, r5, lr
 800047c:	4291      	cmp	r1, r2
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x282>
 8000480:	eb1c 0202 	adds.w	r2, ip, r2
 8000484:	f105 38ff 	add.w	r8, r5, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2a8>
 800048a:	4291      	cmp	r1, r2
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2a8>
 800048e:	3d02      	subs	r5, #2
 8000490:	4462      	add	r2, ip
 8000492:	1a52      	subs	r2, r2, r1
 8000494:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0xfc>
 800049a:	4631      	mov	r1, r6
 800049c:	4630      	mov	r0, r6
 800049e:	e708      	b.n	80002b2 <__udivmoddi4+0xa2>
 80004a0:	4639      	mov	r1, r7
 80004a2:	e6e6      	b.n	8000272 <__udivmoddi4+0x62>
 80004a4:	4610      	mov	r0, r2
 80004a6:	e6fb      	b.n	80002a0 <__udivmoddi4+0x90>
 80004a8:	4548      	cmp	r0, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004b4:	3b01      	subs	r3, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b8:	4645      	mov	r5, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x282>
 80004bc:	462b      	mov	r3, r5
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1da>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x258>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c8:	3d02      	subs	r5, #2
 80004ca:	4462      	add	r2, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x124>
 80004ce:	4608      	mov	r0, r1
 80004d0:	e70a      	b.n	80002e8 <__udivmoddi4+0xd8>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x14e>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80004e0:	f000 faa8 	bl	8000a34 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80004e4:	f000 f826 	bl	8000534 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80004e8:	f000 f8d6 	bl	8000698 <MX_GPIO_Init>
	MX_ADC1_Init();
 80004ec:	f000 f882 	bl	80005f4 <MX_ADC1_Init>
	/* USER CODE BEGIN 2 */

	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize();
 80004f0:	f001 ff34 	bl	800235c <osKernelInitialize>
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of fuelLevelTask1 */
	fuelLevelTask1Handle = osThreadNew(getFuelLevelFromADC, NULL, &fuelLevelTask1_attributes);
 80004f4:	4a09      	ldr	r2, [pc, #36]	; (800051c <main+0x40>)
 80004f6:	2100      	movs	r1, #0
 80004f8:	4809      	ldr	r0, [pc, #36]	; (8000520 <main+0x44>)
 80004fa:	f001 ff79 	bl	80023f0 <osThreadNew>
 80004fe:	4603      	mov	r3, r0
 8000500:	4a08      	ldr	r2, [pc, #32]	; (8000524 <main+0x48>)
 8000502:	6013      	str	r3, [r2, #0]

	/* creation of fuelLevelTask2 */
	fuelLevelTask2Handle = osThreadNew(mapFuelLevelDigitalToLeds, NULL, &fuelLevelTask2_attributes);
 8000504:	4a08      	ldr	r2, [pc, #32]	; (8000528 <main+0x4c>)
 8000506:	2100      	movs	r1, #0
 8000508:	4808      	ldr	r0, [pc, #32]	; (800052c <main+0x50>)
 800050a:	f001 ff71 	bl	80023f0 <osThreadNew>
 800050e:	4603      	mov	r3, r0
 8000510:	4a07      	ldr	r2, [pc, #28]	; (8000530 <main+0x54>)
 8000512:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	/* USER CODE END RTOS_EVENTS */

	/* Start scheduler */
	osKernelStart();
 8000514:	f001 ff46 	bl	80023a4 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 8000518:	e7fe      	b.n	8000518 <main+0x3c>
 800051a:	bf00      	nop
 800051c:	08004ec0 	.word	0x08004ec0
 8000520:	0800080d 	.word	0x0800080d
 8000524:	20000074 	.word	0x20000074
 8000528:	08004ee4 	.word	0x08004ee4
 800052c:	08000845 	.word	0x08000845
 8000530:	20000078 	.word	0x20000078

08000534 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b094      	sub	sp, #80	; 0x50
 8000538:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800053a:	f107 0320 	add.w	r3, r7, #32
 800053e:	2230      	movs	r2, #48	; 0x30
 8000540:	2100      	movs	r1, #0
 8000542:	4618      	mov	r0, r3
 8000544:	f004 fc5a 	bl	8004dfc <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000548:	f107 030c 	add.w	r3, r7, #12
 800054c:	2200      	movs	r2, #0
 800054e:	601a      	str	r2, [r3, #0]
 8000550:	605a      	str	r2, [r3, #4]
 8000552:	609a      	str	r2, [r3, #8]
 8000554:	60da      	str	r2, [r3, #12]
 8000556:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000558:	2300      	movs	r3, #0
 800055a:	60bb      	str	r3, [r7, #8]
 800055c:	4b23      	ldr	r3, [pc, #140]	; (80005ec <SystemClock_Config+0xb8>)
 800055e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000560:	4a22      	ldr	r2, [pc, #136]	; (80005ec <SystemClock_Config+0xb8>)
 8000562:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000566:	6413      	str	r3, [r2, #64]	; 0x40
 8000568:	4b20      	ldr	r3, [pc, #128]	; (80005ec <SystemClock_Config+0xb8>)
 800056a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800056c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000570:	60bb      	str	r3, [r7, #8]
 8000572:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000574:	2300      	movs	r3, #0
 8000576:	607b      	str	r3, [r7, #4]
 8000578:	4b1d      	ldr	r3, [pc, #116]	; (80005f0 <SystemClock_Config+0xbc>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000580:	4a1b      	ldr	r2, [pc, #108]	; (80005f0 <SystemClock_Config+0xbc>)
 8000582:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000586:	6013      	str	r3, [r2, #0]
 8000588:	4b19      	ldr	r3, [pc, #100]	; (80005f0 <SystemClock_Config+0xbc>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000590:	607b      	str	r3, [r7, #4]
 8000592:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000594:	2302      	movs	r3, #2
 8000596:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000598:	2301      	movs	r3, #1
 800059a:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800059c:	2310      	movs	r3, #16
 800059e:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005a0:	2300      	movs	r3, #0
 80005a2:	63bb      	str	r3, [r7, #56]	; 0x38
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005a4:	f107 0320 	add.w	r3, r7, #32
 80005a8:	4618      	mov	r0, r3
 80005aa:	f001 fa7f 	bl	8001aac <HAL_RCC_OscConfig>
 80005ae:	4603      	mov	r3, r0
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d001      	beq.n	80005b8 <SystemClock_Config+0x84>
	{
		Error_Handler();
 80005b4:	f000 f956 	bl	8000864 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005b8:	230f      	movs	r3, #15
 80005ba:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005bc:	2300      	movs	r3, #0
 80005be:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005c0:	2300      	movs	r3, #0
 80005c2:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005c4:	2300      	movs	r3, #0
 80005c6:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005c8:	2300      	movs	r3, #0
 80005ca:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005cc:	f107 030c 	add.w	r3, r7, #12
 80005d0:	2100      	movs	r1, #0
 80005d2:	4618      	mov	r0, r3
 80005d4:	f001 fce2 	bl	8001f9c <HAL_RCC_ClockConfig>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d001      	beq.n	80005e2 <SystemClock_Config+0xae>
	{
		Error_Handler();
 80005de:	f000 f941 	bl	8000864 <Error_Handler>
	}
}
 80005e2:	bf00      	nop
 80005e4:	3750      	adds	r7, #80	; 0x50
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	40023800 	.word	0x40023800
 80005f0:	40007000 	.word	0x40007000

080005f4 <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b084      	sub	sp, #16
 80005f8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = {0};
 80005fa:	463b      	mov	r3, r7
 80005fc:	2200      	movs	r2, #0
 80005fe:	601a      	str	r2, [r3, #0]
 8000600:	605a      	str	r2, [r3, #4]
 8000602:	609a      	str	r2, [r3, #8]
 8000604:	60da      	str	r2, [r3, #12]

	/* USER CODE END ADC1_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 8000606:	4b21      	ldr	r3, [pc, #132]	; (800068c <MX_ADC1_Init+0x98>)
 8000608:	4a21      	ldr	r2, [pc, #132]	; (8000690 <MX_ADC1_Init+0x9c>)
 800060a:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800060c:	4b1f      	ldr	r3, [pc, #124]	; (800068c <MX_ADC1_Init+0x98>)
 800060e:	2200      	movs	r2, #0
 8000610:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000612:	4b1e      	ldr	r3, [pc, #120]	; (800068c <MX_ADC1_Init+0x98>)
 8000614:	2200      	movs	r2, #0
 8000616:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = DISABLE;
 8000618:	4b1c      	ldr	r3, [pc, #112]	; (800068c <MX_ADC1_Init+0x98>)
 800061a:	2200      	movs	r2, #0
 800061c:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = ENABLE;
 800061e:	4b1b      	ldr	r3, [pc, #108]	; (800068c <MX_ADC1_Init+0x98>)
 8000620:	2201      	movs	r2, #1
 8000622:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000624:	4b19      	ldr	r3, [pc, #100]	; (800068c <MX_ADC1_Init+0x98>)
 8000626:	2200      	movs	r2, #0
 8000628:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800062c:	4b17      	ldr	r3, [pc, #92]	; (800068c <MX_ADC1_Init+0x98>)
 800062e:	2200      	movs	r2, #0
 8000630:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000632:	4b16      	ldr	r3, [pc, #88]	; (800068c <MX_ADC1_Init+0x98>)
 8000634:	4a17      	ldr	r2, [pc, #92]	; (8000694 <MX_ADC1_Init+0xa0>)
 8000636:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000638:	4b14      	ldr	r3, [pc, #80]	; (800068c <MX_ADC1_Init+0x98>)
 800063a:	2200      	movs	r2, #0
 800063c:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 800063e:	4b13      	ldr	r3, [pc, #76]	; (800068c <MX_ADC1_Init+0x98>)
 8000640:	2201      	movs	r2, #1
 8000642:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 8000644:	4b11      	ldr	r3, [pc, #68]	; (800068c <MX_ADC1_Init+0x98>)
 8000646:	2200      	movs	r2, #0
 8000648:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800064c:	4b0f      	ldr	r3, [pc, #60]	; (800068c <MX_ADC1_Init+0x98>)
 800064e:	2201      	movs	r2, #1
 8000650:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000652:	480e      	ldr	r0, [pc, #56]	; (800068c <MX_ADC1_Init+0x98>)
 8000654:	f000 fa60 	bl	8000b18 <HAL_ADC_Init>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <MX_ADC1_Init+0x6e>
	{
		Error_Handler();
 800065e:	f000 f901 	bl	8000864 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 8000662:	2300      	movs	r3, #0
 8000664:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8000666:	2301      	movs	r3, #1
 8000668:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800066a:	2300      	movs	r3, #0
 800066c:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800066e:	463b      	mov	r3, r7
 8000670:	4619      	mov	r1, r3
 8000672:	4806      	ldr	r0, [pc, #24]	; (800068c <MX_ADC1_Init+0x98>)
 8000674:	f000 fd42 	bl	80010fc <HAL_ADC_ConfigChannel>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <MX_ADC1_Init+0x8e>
	{
		Error_Handler();
 800067e:	f000 f8f1 	bl	8000864 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8000682:	bf00      	nop
 8000684:	3710      	adds	r7, #16
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	2000002c 	.word	0x2000002c
 8000690:	40012000 	.word	0x40012000
 8000694:	0f000001 	.word	0x0f000001

08000698 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b086      	sub	sp, #24
 800069c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800069e:	1d3b      	adds	r3, r7, #4
 80006a0:	2200      	movs	r2, #0
 80006a2:	601a      	str	r2, [r3, #0]
 80006a4:	605a      	str	r2, [r3, #4]
 80006a6:	609a      	str	r2, [r3, #8]
 80006a8:	60da      	str	r2, [r3, #12]
 80006aa:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80006ac:	2300      	movs	r3, #0
 80006ae:	603b      	str	r3, [r7, #0]
 80006b0:	4b10      	ldr	r3, [pc, #64]	; (80006f4 <MX_GPIO_Init+0x5c>)
 80006b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b4:	4a0f      	ldr	r2, [pc, #60]	; (80006f4 <MX_GPIO_Init+0x5c>)
 80006b6:	f043 0301 	orr.w	r3, r3, #1
 80006ba:	6313      	str	r3, [r2, #48]	; 0x30
 80006bc:	4b0d      	ldr	r3, [pc, #52]	; (80006f4 <MX_GPIO_Init+0x5c>)
 80006be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c0:	f003 0301 	and.w	r3, r3, #1
 80006c4:	603b      	str	r3, [r7, #0]
 80006c6:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 80006c8:	2200      	movs	r2, #0
 80006ca:	211e      	movs	r1, #30
 80006cc:	480a      	ldr	r0, [pc, #40]	; (80006f8 <MX_GPIO_Init+0x60>)
 80006ce:	f001 f9d3 	bl	8001a78 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : PA1 PA2 PA3 PA4 */
	GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 80006d2:	231e      	movs	r3, #30
 80006d4:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006d6:	2301      	movs	r3, #1
 80006d8:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006da:	2300      	movs	r3, #0
 80006dc:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006de:	2300      	movs	r3, #0
 80006e0:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006e2:	1d3b      	adds	r3, r7, #4
 80006e4:	4619      	mov	r1, r3
 80006e6:	4804      	ldr	r0, [pc, #16]	; (80006f8 <MX_GPIO_Init+0x60>)
 80006e8:	f001 f842 	bl	8001770 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80006ec:	bf00      	nop
 80006ee:	3718      	adds	r7, #24
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	40023800 	.word	0x40023800
 80006f8:	40020000 	.word	0x40020000

080006fc <mapDigitalvalueToLeds>:

/* USER CODE BEGIN 4 */


void mapDigitalvalueToLeds(uint32_t digitalValue){
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
	//empty tank
	if (digitalValue <= FUEL_MINIMUM_DIGITA_VALUE){
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	2bb4      	cmp	r3, #180	; 0xb4
 8000708:	d814      	bhi.n	8000734 <mapDigitalvalueToLeds+0x38>
		HAL_GPIO_WritePin(FUEL_LED0_PORT, FUEL_LED0_PIN,GPIO_PIN_SET);
 800070a:	2201      	movs	r2, #1
 800070c:	2102      	movs	r1, #2
 800070e:	483e      	ldr	r0, [pc, #248]	; (8000808 <mapDigitalvalueToLeds+0x10c>)
 8000710:	f001 f9b2 	bl	8001a78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(FUEL_LED1_PORT, FUEL_LED1_PIN,GPIO_PIN_SET);
 8000714:	2201      	movs	r2, #1
 8000716:	2104      	movs	r1, #4
 8000718:	483b      	ldr	r0, [pc, #236]	; (8000808 <mapDigitalvalueToLeds+0x10c>)
 800071a:	f001 f9ad 	bl	8001a78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(FUEL_LED2_PORT, FUEL_LED2_PIN,GPIO_PIN_SET);
 800071e:	2201      	movs	r2, #1
 8000720:	2108      	movs	r1, #8
 8000722:	4839      	ldr	r0, [pc, #228]	; (8000808 <mapDigitalvalueToLeds+0x10c>)
 8000724:	f001 f9a8 	bl	8001a78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(FUEL_LED3_PORT, FUEL_LED3_PIN,GPIO_PIN_SET);
 8000728:	2201      	movs	r2, #1
 800072a:	2110      	movs	r1, #16
 800072c:	4836      	ldr	r0, [pc, #216]	; (8000808 <mapDigitalvalueToLeds+0x10c>)
 800072e:	f001 f9a3 	bl	8001a78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(FUEL_LED0_PORT, FUEL_LED0_PIN,GPIO_PIN_RESET);
		HAL_GPIO_WritePin(FUEL_LED1_PORT, FUEL_LED1_PIN,GPIO_PIN_RESET);
		HAL_GPIO_WritePin(FUEL_LED2_PORT, FUEL_LED2_PIN,GPIO_PIN_RESET);
		HAL_GPIO_WritePin(FUEL_LED3_PORT, FUEL_LED3_PIN,GPIO_PIN_RESET);
	}
}
 8000732:	e065      	b.n	8000800 <mapDigitalvalueToLeds+0x104>
	else if (digitalValue <= (FUEL_MAX_DIGITA_VALUE - FUEL_MINIMUM_DIGITA_VALUE)/4){
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	f5b3 7fe4 	cmp.w	r3, #456	; 0x1c8
 800073a:	d214      	bcs.n	8000766 <mapDigitalvalueToLeds+0x6a>
		HAL_GPIO_WritePin(FUEL_LED0_PORT, FUEL_LED0_PIN,GPIO_PIN_SET);
 800073c:	2201      	movs	r2, #1
 800073e:	2102      	movs	r1, #2
 8000740:	4831      	ldr	r0, [pc, #196]	; (8000808 <mapDigitalvalueToLeds+0x10c>)
 8000742:	f001 f999 	bl	8001a78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(FUEL_LED1_PORT, FUEL_LED1_PIN,GPIO_PIN_SET);
 8000746:	2201      	movs	r2, #1
 8000748:	2104      	movs	r1, #4
 800074a:	482f      	ldr	r0, [pc, #188]	; (8000808 <mapDigitalvalueToLeds+0x10c>)
 800074c:	f001 f994 	bl	8001a78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(FUEL_LED2_PORT, FUEL_LED2_PIN,GPIO_PIN_SET);
 8000750:	2201      	movs	r2, #1
 8000752:	2108      	movs	r1, #8
 8000754:	482c      	ldr	r0, [pc, #176]	; (8000808 <mapDigitalvalueToLeds+0x10c>)
 8000756:	f001 f98f 	bl	8001a78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(FUEL_LED3_PORT, FUEL_LED3_PIN,GPIO_PIN_RESET);
 800075a:	2200      	movs	r2, #0
 800075c:	2110      	movs	r1, #16
 800075e:	482a      	ldr	r0, [pc, #168]	; (8000808 <mapDigitalvalueToLeds+0x10c>)
 8000760:	f001 f98a 	bl	8001a78 <HAL_GPIO_WritePin>
}
 8000764:	e04c      	b.n	8000800 <mapDigitalvalueToLeds+0x104>
	else if (digitalValue <= (FUEL_MAX_DIGITA_VALUE - FUEL_MINIMUM_DIGITA_VALUE)/2){
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	f240 328e 	movw	r2, #910	; 0x38e
 800076c:	4293      	cmp	r3, r2
 800076e:	d814      	bhi.n	800079a <mapDigitalvalueToLeds+0x9e>
		HAL_GPIO_WritePin(FUEL_LED0_PORT, FUEL_LED0_PIN,GPIO_PIN_SET);
 8000770:	2201      	movs	r2, #1
 8000772:	2102      	movs	r1, #2
 8000774:	4824      	ldr	r0, [pc, #144]	; (8000808 <mapDigitalvalueToLeds+0x10c>)
 8000776:	f001 f97f 	bl	8001a78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(FUEL_LED1_PORT, FUEL_LED1_PIN,GPIO_PIN_SET);
 800077a:	2201      	movs	r2, #1
 800077c:	2104      	movs	r1, #4
 800077e:	4822      	ldr	r0, [pc, #136]	; (8000808 <mapDigitalvalueToLeds+0x10c>)
 8000780:	f001 f97a 	bl	8001a78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(FUEL_LED2_PORT, FUEL_LED2_PIN,GPIO_PIN_RESET);
 8000784:	2200      	movs	r2, #0
 8000786:	2108      	movs	r1, #8
 8000788:	481f      	ldr	r0, [pc, #124]	; (8000808 <mapDigitalvalueToLeds+0x10c>)
 800078a:	f001 f975 	bl	8001a78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(FUEL_LED3_PORT, FUEL_LED3_PIN,GPIO_PIN_RESET);
 800078e:	2200      	movs	r2, #0
 8000790:	2110      	movs	r1, #16
 8000792:	481d      	ldr	r0, [pc, #116]	; (8000808 <mapDigitalvalueToLeds+0x10c>)
 8000794:	f001 f970 	bl	8001a78 <HAL_GPIO_WritePin>
}
 8000798:	e032      	b.n	8000800 <mapDigitalvalueToLeds+0x104>
	else if (digitalValue <= (FUEL_MAX_DIGITA_VALUE - FUEL_MINIMUM_DIGITA_VALUE)/4*3){
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	f240 5255 	movw	r2, #1365	; 0x555
 80007a0:	4293      	cmp	r3, r2
 80007a2:	d814      	bhi.n	80007ce <mapDigitalvalueToLeds+0xd2>
		HAL_GPIO_WritePin(FUEL_LED0_PORT, FUEL_LED0_PIN,GPIO_PIN_SET);
 80007a4:	2201      	movs	r2, #1
 80007a6:	2102      	movs	r1, #2
 80007a8:	4817      	ldr	r0, [pc, #92]	; (8000808 <mapDigitalvalueToLeds+0x10c>)
 80007aa:	f001 f965 	bl	8001a78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(FUEL_LED1_PORT, FUEL_LED1_PIN,GPIO_PIN_RESET);
 80007ae:	2200      	movs	r2, #0
 80007b0:	2104      	movs	r1, #4
 80007b2:	4815      	ldr	r0, [pc, #84]	; (8000808 <mapDigitalvalueToLeds+0x10c>)
 80007b4:	f001 f960 	bl	8001a78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(FUEL_LED2_PORT, FUEL_LED2_PIN,GPIO_PIN_RESET);
 80007b8:	2200      	movs	r2, #0
 80007ba:	2108      	movs	r1, #8
 80007bc:	4812      	ldr	r0, [pc, #72]	; (8000808 <mapDigitalvalueToLeds+0x10c>)
 80007be:	f001 f95b 	bl	8001a78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(FUEL_LED3_PORT, FUEL_LED3_PIN,GPIO_PIN_RESET);
 80007c2:	2200      	movs	r2, #0
 80007c4:	2110      	movs	r1, #16
 80007c6:	4810      	ldr	r0, [pc, #64]	; (8000808 <mapDigitalvalueToLeds+0x10c>)
 80007c8:	f001 f956 	bl	8001a78 <HAL_GPIO_WritePin>
}
 80007cc:	e018      	b.n	8000800 <mapDigitalvalueToLeds+0x104>
	else if (digitalValue <= (FUEL_MAX_DIGITA_VALUE - FUEL_MINIMUM_DIGITA_VALUE)){
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	f240 721c 	movw	r2, #1820	; 0x71c
 80007d4:	4293      	cmp	r3, r2
 80007d6:	d813      	bhi.n	8000800 <mapDigitalvalueToLeds+0x104>
		HAL_GPIO_WritePin(FUEL_LED0_PORT, FUEL_LED0_PIN,GPIO_PIN_RESET);
 80007d8:	2200      	movs	r2, #0
 80007da:	2102      	movs	r1, #2
 80007dc:	480a      	ldr	r0, [pc, #40]	; (8000808 <mapDigitalvalueToLeds+0x10c>)
 80007de:	f001 f94b 	bl	8001a78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(FUEL_LED1_PORT, FUEL_LED1_PIN,GPIO_PIN_RESET);
 80007e2:	2200      	movs	r2, #0
 80007e4:	2104      	movs	r1, #4
 80007e6:	4808      	ldr	r0, [pc, #32]	; (8000808 <mapDigitalvalueToLeds+0x10c>)
 80007e8:	f001 f946 	bl	8001a78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(FUEL_LED2_PORT, FUEL_LED2_PIN,GPIO_PIN_RESET);
 80007ec:	2200      	movs	r2, #0
 80007ee:	2108      	movs	r1, #8
 80007f0:	4805      	ldr	r0, [pc, #20]	; (8000808 <mapDigitalvalueToLeds+0x10c>)
 80007f2:	f001 f941 	bl	8001a78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(FUEL_LED3_PORT, FUEL_LED3_PIN,GPIO_PIN_RESET);
 80007f6:	2200      	movs	r2, #0
 80007f8:	2110      	movs	r1, #16
 80007fa:	4803      	ldr	r0, [pc, #12]	; (8000808 <mapDigitalvalueToLeds+0x10c>)
 80007fc:	f001 f93c 	bl	8001a78 <HAL_GPIO_WritePin>
}
 8000800:	bf00      	nop
 8000802:	3708      	adds	r7, #8
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	40020000 	.word	0x40020000

0800080c <getFuelLevelFromADC>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_getFuelLevelFromADC */
void getFuelLevelFromADC(void *argument)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b082      	sub	sp, #8
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for(;;)
	{
		HAL_ADC_Start(&hadc1);
 8000814:	4809      	ldr	r0, [pc, #36]	; (800083c <getFuelLevelFromADC+0x30>)
 8000816:	f000 f9c3 	bl	8000ba0 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, 100);
 800081a:	2164      	movs	r1, #100	; 0x64
 800081c:	4807      	ldr	r0, [pc, #28]	; (800083c <getFuelLevelFromADC+0x30>)
 800081e:	f000 faa6 	bl	8000d6e <HAL_ADC_PollForConversion>
		adcValue = HAL_ADC_GetValue(&hadc1);
 8000822:	4806      	ldr	r0, [pc, #24]	; (800083c <getFuelLevelFromADC+0x30>)
 8000824:	f000 fc3e 	bl	80010a4 <HAL_ADC_GetValue>
 8000828:	4603      	mov	r3, r0
 800082a:	4a05      	ldr	r2, [pc, #20]	; (8000840 <getFuelLevelFromADC+0x34>)
 800082c:	6013      	str	r3, [r2, #0]
		HAL_ADC_Stop(&hadc1);
 800082e:	4803      	ldr	r0, [pc, #12]	; (800083c <getFuelLevelFromADC+0x30>)
 8000830:	f000 fa6a 	bl	8000d08 <HAL_ADC_Stop>
		osDelay(1);
 8000834:	2001      	movs	r0, #1
 8000836:	f001 fe6d 	bl	8002514 <osDelay>
		HAL_ADC_Start(&hadc1);
 800083a:	e7eb      	b.n	8000814 <getFuelLevelFromADC+0x8>
 800083c:	2000002c 	.word	0x2000002c
 8000840:	2000007c 	.word	0x2000007c

08000844 <mapFuelLevelDigitalToLeds>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_mapFuelLevelDigitalToLeds */
void mapFuelLevelDigitalToLeds(void *argument)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN mapFuelLevelDigitalToLeds */
	/* Infinite loop */
	for(;;)
	{
		mapDigitalvalueToLeds(adcValue);
 800084c:	4b04      	ldr	r3, [pc, #16]	; (8000860 <mapFuelLevelDigitalToLeds+0x1c>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	4618      	mov	r0, r3
 8000852:	f7ff ff53 	bl	80006fc <mapDigitalvalueToLeds>
		osDelay(1);
 8000856:	2001      	movs	r0, #1
 8000858:	f001 fe5c 	bl	8002514 <osDelay>
		mapDigitalvalueToLeds(adcValue);
 800085c:	e7f6      	b.n	800084c <mapFuelLevelDigitalToLeds+0x8>
 800085e:	bf00      	nop
 8000860:	2000007c 	.word	0x2000007c

08000864 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000868:	b672      	cpsid	i
}
 800086a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800086c:	e7fe      	b.n	800086c <Error_Handler+0x8>
	...

08000870 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000876:	2300      	movs	r3, #0
 8000878:	607b      	str	r3, [r7, #4]
 800087a:	4b12      	ldr	r3, [pc, #72]	; (80008c4 <HAL_MspInit+0x54>)
 800087c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800087e:	4a11      	ldr	r2, [pc, #68]	; (80008c4 <HAL_MspInit+0x54>)
 8000880:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000884:	6453      	str	r3, [r2, #68]	; 0x44
 8000886:	4b0f      	ldr	r3, [pc, #60]	; (80008c4 <HAL_MspInit+0x54>)
 8000888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800088a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800088e:	607b      	str	r3, [r7, #4]
 8000890:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000892:	2300      	movs	r3, #0
 8000894:	603b      	str	r3, [r7, #0]
 8000896:	4b0b      	ldr	r3, [pc, #44]	; (80008c4 <HAL_MspInit+0x54>)
 8000898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800089a:	4a0a      	ldr	r2, [pc, #40]	; (80008c4 <HAL_MspInit+0x54>)
 800089c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008a0:	6413      	str	r3, [r2, #64]	; 0x40
 80008a2:	4b08      	ldr	r3, [pc, #32]	; (80008c4 <HAL_MspInit+0x54>)
 80008a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008aa:	603b      	str	r3, [r7, #0]
 80008ac:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80008ae:	2200      	movs	r2, #0
 80008b0:	210f      	movs	r1, #15
 80008b2:	f06f 0001 	mvn.w	r0, #1
 80008b6:	f000 ff24 	bl	8001702 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ba:	bf00      	nop
 80008bc:	3708      	adds	r7, #8
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	40023800 	.word	0x40023800

080008c8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b08a      	sub	sp, #40	; 0x28
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d0:	f107 0314 	add.w	r3, r7, #20
 80008d4:	2200      	movs	r2, #0
 80008d6:	601a      	str	r2, [r3, #0]
 80008d8:	605a      	str	r2, [r3, #4]
 80008da:	609a      	str	r2, [r3, #8]
 80008dc:	60da      	str	r2, [r3, #12]
 80008de:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	4a1b      	ldr	r2, [pc, #108]	; (8000954 <HAL_ADC_MspInit+0x8c>)
 80008e6:	4293      	cmp	r3, r2
 80008e8:	d12f      	bne.n	800094a <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80008ea:	2300      	movs	r3, #0
 80008ec:	613b      	str	r3, [r7, #16]
 80008ee:	4b1a      	ldr	r3, [pc, #104]	; (8000958 <HAL_ADC_MspInit+0x90>)
 80008f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008f2:	4a19      	ldr	r2, [pc, #100]	; (8000958 <HAL_ADC_MspInit+0x90>)
 80008f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008f8:	6453      	str	r3, [r2, #68]	; 0x44
 80008fa:	4b17      	ldr	r3, [pc, #92]	; (8000958 <HAL_ADC_MspInit+0x90>)
 80008fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000902:	613b      	str	r3, [r7, #16]
 8000904:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000906:	2300      	movs	r3, #0
 8000908:	60fb      	str	r3, [r7, #12]
 800090a:	4b13      	ldr	r3, [pc, #76]	; (8000958 <HAL_ADC_MspInit+0x90>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090e:	4a12      	ldr	r2, [pc, #72]	; (8000958 <HAL_ADC_MspInit+0x90>)
 8000910:	f043 0301 	orr.w	r3, r3, #1
 8000914:	6313      	str	r3, [r2, #48]	; 0x30
 8000916:	4b10      	ldr	r3, [pc, #64]	; (8000958 <HAL_ADC_MspInit+0x90>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091a:	f003 0301 	and.w	r3, r3, #1
 800091e:	60fb      	str	r3, [r7, #12]
 8000920:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000922:	2301      	movs	r3, #1
 8000924:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000926:	2303      	movs	r3, #3
 8000928:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092a:	2300      	movs	r3, #0
 800092c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800092e:	f107 0314 	add.w	r3, r7, #20
 8000932:	4619      	mov	r1, r3
 8000934:	4809      	ldr	r0, [pc, #36]	; (800095c <HAL_ADC_MspInit+0x94>)
 8000936:	f000 ff1b 	bl	8001770 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 800093a:	2200      	movs	r2, #0
 800093c:	2105      	movs	r1, #5
 800093e:	2012      	movs	r0, #18
 8000940:	f000 fedf 	bl	8001702 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000944:	2012      	movs	r0, #18
 8000946:	f000 fef8 	bl	800173a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800094a:	bf00      	nop
 800094c:	3728      	adds	r7, #40	; 0x28
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	40012000 	.word	0x40012000
 8000958:	40023800 	.word	0x40023800
 800095c:	40020000 	.word	0x40020000

08000960 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000964:	e7fe      	b.n	8000964 <NMI_Handler+0x4>

08000966 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000966:	b480      	push	{r7}
 8000968:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800096a:	e7fe      	b.n	800096a <HardFault_Handler+0x4>

0800096c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000970:	e7fe      	b.n	8000970 <MemManage_Handler+0x4>

08000972 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000972:	b480      	push	{r7}
 8000974:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000976:	e7fe      	b.n	8000976 <BusFault_Handler+0x4>

08000978 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800097c:	e7fe      	b.n	800097c <UsageFault_Handler+0x4>

0800097e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800097e:	b480      	push	{r7}
 8000980:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000982:	bf00      	nop
 8000984:	46bd      	mov	sp, r7
 8000986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098a:	4770      	bx	lr

0800098c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000990:	f000 f8a2 	bl	8000ad8 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000994:	f003 f9cc 	bl	8003d30 <xTaskGetSchedulerState>
 8000998:	4603      	mov	r3, r0
 800099a:	2b01      	cmp	r3, #1
 800099c:	d001      	beq.n	80009a2 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800099e:	f003 ffb3 	bl	8004908 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009a2:	bf00      	nop
 80009a4:	bd80      	pop	{r7, pc}
	...

080009a8 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80009ac:	4802      	ldr	r0, [pc, #8]	; (80009b8 <ADC_IRQHandler+0x10>)
 80009ae:	f000 fa69 	bl	8000e84 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80009b2:	bf00      	nop
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	2000002c 	.word	0x2000002c

080009bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009c0:	4b06      	ldr	r3, [pc, #24]	; (80009dc <SystemInit+0x20>)
 80009c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009c6:	4a05      	ldr	r2, [pc, #20]	; (80009dc <SystemInit+0x20>)
 80009c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009d0:	bf00      	nop
 80009d2:	46bd      	mov	sp, r7
 80009d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop
 80009dc:	e000ed00 	.word	0xe000ed00

080009e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80009e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a18 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80009e4:	480d      	ldr	r0, [pc, #52]	; (8000a1c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80009e6:	490e      	ldr	r1, [pc, #56]	; (8000a20 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80009e8:	4a0e      	ldr	r2, [pc, #56]	; (8000a24 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80009ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009ec:	e002      	b.n	80009f4 <LoopCopyDataInit>

080009ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009f2:	3304      	adds	r3, #4

080009f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009f8:	d3f9      	bcc.n	80009ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009fa:	4a0b      	ldr	r2, [pc, #44]	; (8000a28 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80009fc:	4c0b      	ldr	r4, [pc, #44]	; (8000a2c <LoopFillZerobss+0x26>)
  movs r3, #0
 80009fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a00:	e001      	b.n	8000a06 <LoopFillZerobss>

08000a02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a04:	3204      	adds	r2, #4

08000a06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a08:	d3fb      	bcc.n	8000a02 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a0a:	f7ff ffd7 	bl	80009bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a0e:	f004 f9fd 	bl	8004e0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a12:	f7ff fd63 	bl	80004dc <main>
  bx  lr    
 8000a16:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000a18:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000a1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a20:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000a24:	08004f28 	.word	0x08004f28
  ldr r2, =_sbss
 8000a28:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000a2c:	200049d4 	.word	0x200049d4

08000a30 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a30:	e7fe      	b.n	8000a30 <DMA1_Stream0_IRQHandler>
	...

08000a34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a38:	4b0e      	ldr	r3, [pc, #56]	; (8000a74 <HAL_Init+0x40>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	4a0d      	ldr	r2, [pc, #52]	; (8000a74 <HAL_Init+0x40>)
 8000a3e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a42:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a44:	4b0b      	ldr	r3, [pc, #44]	; (8000a74 <HAL_Init+0x40>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	4a0a      	ldr	r2, [pc, #40]	; (8000a74 <HAL_Init+0x40>)
 8000a4a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a4e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a50:	4b08      	ldr	r3, [pc, #32]	; (8000a74 <HAL_Init+0x40>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	4a07      	ldr	r2, [pc, #28]	; (8000a74 <HAL_Init+0x40>)
 8000a56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a5a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a5c:	2003      	movs	r0, #3
 8000a5e:	f000 fe45 	bl	80016ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a62:	200f      	movs	r0, #15
 8000a64:	f000 f808 	bl	8000a78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a68:	f7ff ff02 	bl	8000870 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a6c:	2300      	movs	r3, #0
}
 8000a6e:	4618      	mov	r0, r3
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	40023c00 	.word	0x40023c00

08000a78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b082      	sub	sp, #8
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a80:	4b12      	ldr	r3, [pc, #72]	; (8000acc <HAL_InitTick+0x54>)
 8000a82:	681a      	ldr	r2, [r3, #0]
 8000a84:	4b12      	ldr	r3, [pc, #72]	; (8000ad0 <HAL_InitTick+0x58>)
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	4619      	mov	r1, r3
 8000a8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a92:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a96:	4618      	mov	r0, r3
 8000a98:	f000 fe5d 	bl	8001756 <HAL_SYSTICK_Config>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	e00e      	b.n	8000ac4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	2b0f      	cmp	r3, #15
 8000aaa:	d80a      	bhi.n	8000ac2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000aac:	2200      	movs	r2, #0
 8000aae:	6879      	ldr	r1, [r7, #4]
 8000ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ab4:	f000 fe25 	bl	8001702 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ab8:	4a06      	ldr	r2, [pc, #24]	; (8000ad4 <HAL_InitTick+0x5c>)
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	e000      	b.n	8000ac4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ac2:	2301      	movs	r3, #1
}
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	3708      	adds	r7, #8
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	20000000 	.word	0x20000000
 8000ad0:	20000008 	.word	0x20000008
 8000ad4:	20000004 	.word	0x20000004

08000ad8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000adc:	4b06      	ldr	r3, [pc, #24]	; (8000af8 <HAL_IncTick+0x20>)
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	461a      	mov	r2, r3
 8000ae2:	4b06      	ldr	r3, [pc, #24]	; (8000afc <HAL_IncTick+0x24>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	4413      	add	r3, r2
 8000ae8:	4a04      	ldr	r2, [pc, #16]	; (8000afc <HAL_IncTick+0x24>)
 8000aea:	6013      	str	r3, [r2, #0]
}
 8000aec:	bf00      	nop
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop
 8000af8:	20000008 	.word	0x20000008
 8000afc:	20000080 	.word	0x20000080

08000b00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  return uwTick;
 8000b04:	4b03      	ldr	r3, [pc, #12]	; (8000b14 <HAL_GetTick+0x14>)
 8000b06:	681b      	ldr	r3, [r3, #0]
}
 8000b08:	4618      	mov	r0, r3
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop
 8000b14:	20000080 	.word	0x20000080

08000b18 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b084      	sub	sp, #16
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b20:	2300      	movs	r3, #0
 8000b22:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d101      	bne.n	8000b2e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	e033      	b.n	8000b96 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d109      	bne.n	8000b4a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000b36:	6878      	ldr	r0, [r7, #4]
 8000b38:	f7ff fec6 	bl	80008c8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	2200      	movs	r2, #0
 8000b40:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	2200      	movs	r2, #0
 8000b46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b4e:	f003 0310 	and.w	r3, r3, #16
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d118      	bne.n	8000b88 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b5a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000b5e:	f023 0302 	bic.w	r3, r3, #2
 8000b62:	f043 0202 	orr.w	r2, r3, #2
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000b6a:	6878      	ldr	r0, [r7, #4]
 8000b6c:	f000 fbe8 	bl	8001340 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	2200      	movs	r2, #0
 8000b74:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b7a:	f023 0303 	bic.w	r3, r3, #3
 8000b7e:	f043 0201 	orr.w	r2, r3, #1
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	641a      	str	r2, [r3, #64]	; 0x40
 8000b86:	e001      	b.n	8000b8c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000b88:	2301      	movs	r3, #1
 8000b8a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	2200      	movs	r2, #0
 8000b90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000b94:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b96:	4618      	mov	r0, r3
 8000b98:	3710      	adds	r7, #16
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
	...

08000ba0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	b085      	sub	sp, #20
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000bb2:	2b01      	cmp	r3, #1
 8000bb4:	d101      	bne.n	8000bba <HAL_ADC_Start+0x1a>
 8000bb6:	2302      	movs	r3, #2
 8000bb8:	e097      	b.n	8000cea <HAL_ADC_Start+0x14a>
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	2201      	movs	r2, #1
 8000bbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	689b      	ldr	r3, [r3, #8]
 8000bc8:	f003 0301 	and.w	r3, r3, #1
 8000bcc:	2b01      	cmp	r3, #1
 8000bce:	d018      	beq.n	8000c02 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	689a      	ldr	r2, [r3, #8]
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	f042 0201 	orr.w	r2, r2, #1
 8000bde:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000be0:	4b45      	ldr	r3, [pc, #276]	; (8000cf8 <HAL_ADC_Start+0x158>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4a45      	ldr	r2, [pc, #276]	; (8000cfc <HAL_ADC_Start+0x15c>)
 8000be6:	fba2 2303 	umull	r2, r3, r2, r3
 8000bea:	0c9a      	lsrs	r2, r3, #18
 8000bec:	4613      	mov	r3, r2
 8000bee:	005b      	lsls	r3, r3, #1
 8000bf0:	4413      	add	r3, r2
 8000bf2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8000bf4:	e002      	b.n	8000bfc <HAL_ADC_Start+0x5c>
    {
      counter--;
 8000bf6:	68bb      	ldr	r3, [r7, #8]
 8000bf8:	3b01      	subs	r3, #1
 8000bfa:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8000bfc:	68bb      	ldr	r3, [r7, #8]
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d1f9      	bne.n	8000bf6 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	689b      	ldr	r3, [r3, #8]
 8000c08:	f003 0301 	and.w	r3, r3, #1
 8000c0c:	2b01      	cmp	r3, #1
 8000c0e:	d15f      	bne.n	8000cd0 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c14:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000c18:	f023 0301 	bic.w	r3, r3, #1
 8000c1c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	685b      	ldr	r3, [r3, #4]
 8000c2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d007      	beq.n	8000c42 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c36:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000c3a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c46:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000c4e:	d106      	bne.n	8000c5e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c54:	f023 0206 	bic.w	r2, r3, #6
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	645a      	str	r2, [r3, #68]	; 0x44
 8000c5c:	e002      	b.n	8000c64 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	2200      	movs	r2, #0
 8000c62:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	2200      	movs	r2, #0
 8000c68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000c6c:	4b24      	ldr	r3, [pc, #144]	; (8000d00 <HAL_ADC_Start+0x160>)
 8000c6e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000c78:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	685b      	ldr	r3, [r3, #4]
 8000c7e:	f003 031f 	and.w	r3, r3, #31
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d10f      	bne.n	8000ca6 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	689b      	ldr	r3, [r3, #8]
 8000c8c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d129      	bne.n	8000ce8 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	689a      	ldr	r2, [r3, #8]
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000ca2:	609a      	str	r2, [r3, #8]
 8000ca4:	e020      	b.n	8000ce8 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	4a16      	ldr	r2, [pc, #88]	; (8000d04 <HAL_ADC_Start+0x164>)
 8000cac:	4293      	cmp	r3, r2
 8000cae:	d11b      	bne.n	8000ce8 <HAL_ADC_Start+0x148>
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	689b      	ldr	r3, [r3, #8]
 8000cb6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d114      	bne.n	8000ce8 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	689a      	ldr	r2, [r3, #8]
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000ccc:	609a      	str	r2, [r3, #8]
 8000cce:	e00b      	b.n	8000ce8 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cd4:	f043 0210 	orr.w	r2, r3, #16
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ce0:	f043 0201 	orr.w	r2, r3, #1
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8000ce8:	2300      	movs	r3, #0
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	3714      	adds	r7, #20
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop
 8000cf8:	20000000 	.word	0x20000000
 8000cfc:	431bde83 	.word	0x431bde83
 8000d00:	40012300 	.word	0x40012300
 8000d04:	40012000 	.word	0x40012000

08000d08 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b083      	sub	sp, #12
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000d16:	2b01      	cmp	r3, #1
 8000d18:	d101      	bne.n	8000d1e <HAL_ADC_Stop+0x16>
 8000d1a:	2302      	movs	r3, #2
 8000d1c:	e021      	b.n	8000d62 <HAL_ADC_Stop+0x5a>
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	2201      	movs	r2, #1
 8000d22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	689a      	ldr	r2, [r3, #8]
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	f022 0201 	bic.w	r2, r2, #1
 8000d34:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	689b      	ldr	r3, [r3, #8]
 8000d3c:	f003 0301 	and.w	r3, r3, #1
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d109      	bne.n	8000d58 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d48:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000d4c:	f023 0301 	bic.w	r3, r3, #1
 8000d50:	f043 0201 	orr.w	r2, r3, #1
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8000d60:	2300      	movs	r3, #0
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	370c      	adds	r7, #12
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr

08000d6e <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000d6e:	b580      	push	{r7, lr}
 8000d70:	b084      	sub	sp, #16
 8000d72:	af00      	add	r7, sp, #0
 8000d74:	6078      	str	r0, [r7, #4]
 8000d76:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	689b      	ldr	r3, [r3, #8]
 8000d82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d8a:	d113      	bne.n	8000db4 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	689b      	ldr	r3, [r3, #8]
 8000d92:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8000d96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000d9a:	d10b      	bne.n	8000db4 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da0:	f043 0220 	orr.w	r2, r3, #32
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	2200      	movs	r2, #0
 8000dac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8000db0:	2301      	movs	r3, #1
 8000db2:	e063      	b.n	8000e7c <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8000db4:	f7ff fea4 	bl	8000b00 <HAL_GetTick>
 8000db8:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8000dba:	e021      	b.n	8000e00 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dc2:	d01d      	beq.n	8000e00 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d007      	beq.n	8000dda <HAL_ADC_PollForConversion+0x6c>
 8000dca:	f7ff fe99 	bl	8000b00 <HAL_GetTick>
 8000dce:	4602      	mov	r2, r0
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	1ad3      	subs	r3, r2, r3
 8000dd4:	683a      	ldr	r2, [r7, #0]
 8000dd6:	429a      	cmp	r2, r3
 8000dd8:	d212      	bcs.n	8000e00 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	f003 0302 	and.w	r3, r3, #2
 8000de4:	2b02      	cmp	r3, #2
 8000de6:	d00b      	beq.n	8000e00 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dec:	f043 0204 	orr.w	r2, r3, #4
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	2200      	movs	r2, #0
 8000df8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8000dfc:	2303      	movs	r3, #3
 8000dfe:	e03d      	b.n	8000e7c <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	f003 0302 	and.w	r3, r3, #2
 8000e0a:	2b02      	cmp	r3, #2
 8000e0c:	d1d6      	bne.n	8000dbc <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	f06f 0212 	mvn.w	r2, #18
 8000e16:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e1c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	689b      	ldr	r3, [r3, #8]
 8000e2a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d123      	bne.n	8000e7a <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d11f      	bne.n	8000e7a <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e40:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d006      	beq.n	8000e56 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	689b      	ldr	r3, [r3, #8]
 8000e4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d111      	bne.n	8000e7a <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e5a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e66:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d105      	bne.n	8000e7a <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e72:	f043 0201 	orr.w	r2, r3, #1
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8000e7a:	2300      	movs	r3, #0
}
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	3710      	adds	r7, #16
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}

08000e84 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b086      	sub	sp, #24
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	617b      	str	r3, [r7, #20]
 8000e90:	2300      	movs	r3, #0
 8000e92:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	685b      	ldr	r3, [r3, #4]
 8000ea2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	f003 0302 	and.w	r3, r3, #2
 8000eaa:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8000eac:	68bb      	ldr	r3, [r7, #8]
 8000eae:	f003 0320 	and.w	r3, r3, #32
 8000eb2:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d049      	beq.n	8000f4e <HAL_ADC_IRQHandler+0xca>
 8000eba:	693b      	ldr	r3, [r7, #16]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d046      	beq.n	8000f4e <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec4:	f003 0310 	and.w	r3, r3, #16
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d105      	bne.n	8000ed8 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	689b      	ldr	r3, [r3, #8]
 8000ede:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d12b      	bne.n	8000f3e <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d127      	bne.n	8000f3e <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ef4:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d006      	beq.n	8000f0a <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	689b      	ldr	r3, [r3, #8]
 8000f02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d119      	bne.n	8000f3e <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	685a      	ldr	r2, [r3, #4]
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	f022 0220 	bic.w	r2, r2, #32
 8000f18:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f1e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f2a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d105      	bne.n	8000f3e <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f36:	f043 0201 	orr.w	r2, r3, #1
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8000f3e:	6878      	ldr	r0, [r7, #4]
 8000f40:	f000 f8bd 	bl	80010be <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	f06f 0212 	mvn.w	r2, #18
 8000f4c:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	f003 0304 	and.w	r3, r3, #4
 8000f54:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8000f56:	68bb      	ldr	r3, [r7, #8]
 8000f58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f5c:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d057      	beq.n	8001014 <HAL_ADC_IRQHandler+0x190>
 8000f64:	693b      	ldr	r3, [r7, #16]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d054      	beq.n	8001014 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f6e:	f003 0310 	and.w	r3, r3, #16
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d105      	bne.n	8000f82 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f7a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	689b      	ldr	r3, [r3, #8]
 8000f88:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d139      	bne.n	8001004 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f96:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d006      	beq.n	8000fac <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	689b      	ldr	r3, [r3, #8]
 8000fa4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d12b      	bne.n	8001004 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	685b      	ldr	r3, [r3, #4]
 8000fb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d124      	bne.n	8001004 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	689b      	ldr	r3, [r3, #8]
 8000fc0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d11d      	bne.n	8001004 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d119      	bne.n	8001004 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	685a      	ldr	r2, [r3, #4]
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000fde:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d105      	bne.n	8001004 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ffc:	f043 0201 	orr.w	r2, r3, #1
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001004:	6878      	ldr	r0, [r7, #4]
 8001006:	f000 fa97 	bl	8001538 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f06f 020c 	mvn.w	r2, #12
 8001012:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	f003 0301 	and.w	r3, r3, #1
 800101a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 800101c:	68bb      	ldr	r3, [r7, #8]
 800101e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001022:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d017      	beq.n	800105a <HAL_ADC_IRQHandler+0x1d6>
 800102a:	693b      	ldr	r3, [r7, #16]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d014      	beq.n	800105a <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f003 0301 	and.w	r3, r3, #1
 800103a:	2b01      	cmp	r3, #1
 800103c:	d10d      	bne.n	800105a <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001042:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800104a:	6878      	ldr	r0, [r7, #4]
 800104c:	f000 f841 	bl	80010d2 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f06f 0201 	mvn.w	r2, #1
 8001058:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	f003 0320 	and.w	r3, r3, #32
 8001060:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8001062:	68bb      	ldr	r3, [r7, #8]
 8001064:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001068:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 800106a:	697b      	ldr	r3, [r7, #20]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d015      	beq.n	800109c <HAL_ADC_IRQHandler+0x218>
 8001070:	693b      	ldr	r3, [r7, #16]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d012      	beq.n	800109c <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800107a:	f043 0202 	orr.w	r2, r3, #2
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f06f 0220 	mvn.w	r2, #32
 800108a:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800108c:	6878      	ldr	r0, [r7, #4]
 800108e:	f000 f82a 	bl	80010e6 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f06f 0220 	mvn.w	r2, #32
 800109a:	601a      	str	r2, [r3, #0]
  }
}
 800109c:	bf00      	nop
 800109e:	3718      	adds	r7, #24
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}

080010a4 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80010a4:	b480      	push	{r7}
 80010a6:	b083      	sub	sp, #12
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	370c      	adds	r7, #12
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr

080010be <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80010be:	b480      	push	{r7}
 80010c0:	b083      	sub	sp, #12
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80010c6:	bf00      	nop
 80010c8:	370c      	adds	r7, #12
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr

080010d2 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80010d2:	b480      	push	{r7}
 80010d4:	b083      	sub	sp, #12
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80010da:	bf00      	nop
 80010dc:	370c      	adds	r7, #12
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr

080010e6 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80010e6:	b480      	push	{r7}
 80010e8:	b083      	sub	sp, #12
 80010ea:	af00      	add	r7, sp, #0
 80010ec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80010ee:	bf00      	nop
 80010f0:	370c      	adds	r7, #12
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr
	...

080010fc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b085      	sub	sp, #20
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
 8001104:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001106:	2300      	movs	r3, #0
 8001108:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001110:	2b01      	cmp	r3, #1
 8001112:	d101      	bne.n	8001118 <HAL_ADC_ConfigChannel+0x1c>
 8001114:	2302      	movs	r3, #2
 8001116:	e105      	b.n	8001324 <HAL_ADC_ConfigChannel+0x228>
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	2201      	movs	r2, #1
 800111c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	2b09      	cmp	r3, #9
 8001126:	d925      	bls.n	8001174 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	68d9      	ldr	r1, [r3, #12]
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	b29b      	uxth	r3, r3
 8001134:	461a      	mov	r2, r3
 8001136:	4613      	mov	r3, r2
 8001138:	005b      	lsls	r3, r3, #1
 800113a:	4413      	add	r3, r2
 800113c:	3b1e      	subs	r3, #30
 800113e:	2207      	movs	r2, #7
 8001140:	fa02 f303 	lsl.w	r3, r2, r3
 8001144:	43da      	mvns	r2, r3
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	400a      	ands	r2, r1
 800114c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	68d9      	ldr	r1, [r3, #12]
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	689a      	ldr	r2, [r3, #8]
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	b29b      	uxth	r3, r3
 800115e:	4618      	mov	r0, r3
 8001160:	4603      	mov	r3, r0
 8001162:	005b      	lsls	r3, r3, #1
 8001164:	4403      	add	r3, r0
 8001166:	3b1e      	subs	r3, #30
 8001168:	409a      	lsls	r2, r3
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	430a      	orrs	r2, r1
 8001170:	60da      	str	r2, [r3, #12]
 8001172:	e022      	b.n	80011ba <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	6919      	ldr	r1, [r3, #16]
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	b29b      	uxth	r3, r3
 8001180:	461a      	mov	r2, r3
 8001182:	4613      	mov	r3, r2
 8001184:	005b      	lsls	r3, r3, #1
 8001186:	4413      	add	r3, r2
 8001188:	2207      	movs	r2, #7
 800118a:	fa02 f303 	lsl.w	r3, r2, r3
 800118e:	43da      	mvns	r2, r3
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	400a      	ands	r2, r1
 8001196:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	6919      	ldr	r1, [r3, #16]
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	689a      	ldr	r2, [r3, #8]
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	b29b      	uxth	r3, r3
 80011a8:	4618      	mov	r0, r3
 80011aa:	4603      	mov	r3, r0
 80011ac:	005b      	lsls	r3, r3, #1
 80011ae:	4403      	add	r3, r0
 80011b0:	409a      	lsls	r2, r3
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	430a      	orrs	r2, r1
 80011b8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	2b06      	cmp	r3, #6
 80011c0:	d824      	bhi.n	800120c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	685a      	ldr	r2, [r3, #4]
 80011cc:	4613      	mov	r3, r2
 80011ce:	009b      	lsls	r3, r3, #2
 80011d0:	4413      	add	r3, r2
 80011d2:	3b05      	subs	r3, #5
 80011d4:	221f      	movs	r2, #31
 80011d6:	fa02 f303 	lsl.w	r3, r2, r3
 80011da:	43da      	mvns	r2, r3
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	400a      	ands	r2, r1
 80011e2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	b29b      	uxth	r3, r3
 80011f0:	4618      	mov	r0, r3
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	685a      	ldr	r2, [r3, #4]
 80011f6:	4613      	mov	r3, r2
 80011f8:	009b      	lsls	r3, r3, #2
 80011fa:	4413      	add	r3, r2
 80011fc:	3b05      	subs	r3, #5
 80011fe:	fa00 f203 	lsl.w	r2, r0, r3
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	430a      	orrs	r2, r1
 8001208:	635a      	str	r2, [r3, #52]	; 0x34
 800120a:	e04c      	b.n	80012a6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	2b0c      	cmp	r3, #12
 8001212:	d824      	bhi.n	800125e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	685a      	ldr	r2, [r3, #4]
 800121e:	4613      	mov	r3, r2
 8001220:	009b      	lsls	r3, r3, #2
 8001222:	4413      	add	r3, r2
 8001224:	3b23      	subs	r3, #35	; 0x23
 8001226:	221f      	movs	r2, #31
 8001228:	fa02 f303 	lsl.w	r3, r2, r3
 800122c:	43da      	mvns	r2, r3
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	400a      	ands	r2, r1
 8001234:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	b29b      	uxth	r3, r3
 8001242:	4618      	mov	r0, r3
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	685a      	ldr	r2, [r3, #4]
 8001248:	4613      	mov	r3, r2
 800124a:	009b      	lsls	r3, r3, #2
 800124c:	4413      	add	r3, r2
 800124e:	3b23      	subs	r3, #35	; 0x23
 8001250:	fa00 f203 	lsl.w	r2, r0, r3
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	430a      	orrs	r2, r1
 800125a:	631a      	str	r2, [r3, #48]	; 0x30
 800125c:	e023      	b.n	80012a6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	685a      	ldr	r2, [r3, #4]
 8001268:	4613      	mov	r3, r2
 800126a:	009b      	lsls	r3, r3, #2
 800126c:	4413      	add	r3, r2
 800126e:	3b41      	subs	r3, #65	; 0x41
 8001270:	221f      	movs	r2, #31
 8001272:	fa02 f303 	lsl.w	r3, r2, r3
 8001276:	43da      	mvns	r2, r3
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	400a      	ands	r2, r1
 800127e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	b29b      	uxth	r3, r3
 800128c:	4618      	mov	r0, r3
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	685a      	ldr	r2, [r3, #4]
 8001292:	4613      	mov	r3, r2
 8001294:	009b      	lsls	r3, r3, #2
 8001296:	4413      	add	r3, r2
 8001298:	3b41      	subs	r3, #65	; 0x41
 800129a:	fa00 f203 	lsl.w	r2, r0, r3
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	430a      	orrs	r2, r1
 80012a4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80012a6:	4b22      	ldr	r3, [pc, #136]	; (8001330 <HAL_ADC_ConfigChannel+0x234>)
 80012a8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4a21      	ldr	r2, [pc, #132]	; (8001334 <HAL_ADC_ConfigChannel+0x238>)
 80012b0:	4293      	cmp	r3, r2
 80012b2:	d109      	bne.n	80012c8 <HAL_ADC_ConfigChannel+0x1cc>
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	2b12      	cmp	r3, #18
 80012ba:	d105      	bne.n	80012c8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a19      	ldr	r2, [pc, #100]	; (8001334 <HAL_ADC_ConfigChannel+0x238>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d123      	bne.n	800131a <HAL_ADC_ConfigChannel+0x21e>
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	2b10      	cmp	r3, #16
 80012d8:	d003      	beq.n	80012e2 <HAL_ADC_ConfigChannel+0x1e6>
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	2b11      	cmp	r3, #17
 80012e0:	d11b      	bne.n	800131a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	2b10      	cmp	r3, #16
 80012f4:	d111      	bne.n	800131a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80012f6:	4b10      	ldr	r3, [pc, #64]	; (8001338 <HAL_ADC_ConfigChannel+0x23c>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4a10      	ldr	r2, [pc, #64]	; (800133c <HAL_ADC_ConfigChannel+0x240>)
 80012fc:	fba2 2303 	umull	r2, r3, r2, r3
 8001300:	0c9a      	lsrs	r2, r3, #18
 8001302:	4613      	mov	r3, r2
 8001304:	009b      	lsls	r3, r3, #2
 8001306:	4413      	add	r3, r2
 8001308:	005b      	lsls	r3, r3, #1
 800130a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800130c:	e002      	b.n	8001314 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800130e:	68bb      	ldr	r3, [r7, #8]
 8001310:	3b01      	subs	r3, #1
 8001312:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001314:	68bb      	ldr	r3, [r7, #8]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d1f9      	bne.n	800130e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	2200      	movs	r2, #0
 800131e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001322:	2300      	movs	r3, #0
}
 8001324:	4618      	mov	r0, r3
 8001326:	3714      	adds	r7, #20
 8001328:	46bd      	mov	sp, r7
 800132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132e:	4770      	bx	lr
 8001330:	40012300 	.word	0x40012300
 8001334:	40012000 	.word	0x40012000
 8001338:	20000000 	.word	0x20000000
 800133c:	431bde83 	.word	0x431bde83

08001340 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001340:	b480      	push	{r7}
 8001342:	b085      	sub	sp, #20
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001348:	4b79      	ldr	r3, [pc, #484]	; (8001530 <ADC_Init+0x1f0>)
 800134a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	685a      	ldr	r2, [r3, #4]
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	431a      	orrs	r2, r3
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	685a      	ldr	r2, [r3, #4]
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001374:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	6859      	ldr	r1, [r3, #4]
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	691b      	ldr	r3, [r3, #16]
 8001380:	021a      	lsls	r2, r3, #8
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	430a      	orrs	r2, r1
 8001388:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	685a      	ldr	r2, [r3, #4]
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001398:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	6859      	ldr	r1, [r3, #4]
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	689a      	ldr	r2, [r3, #8]
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	430a      	orrs	r2, r1
 80013aa:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	689a      	ldr	r2, [r3, #8]
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80013ba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	6899      	ldr	r1, [r3, #8]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	68da      	ldr	r2, [r3, #12]
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	430a      	orrs	r2, r1
 80013cc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013d2:	4a58      	ldr	r2, [pc, #352]	; (8001534 <ADC_Init+0x1f4>)
 80013d4:	4293      	cmp	r3, r2
 80013d6:	d022      	beq.n	800141e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	689a      	ldr	r2, [r3, #8]
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80013e6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	6899      	ldr	r1, [r3, #8]
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	430a      	orrs	r2, r1
 80013f8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	689a      	ldr	r2, [r3, #8]
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001408:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	6899      	ldr	r1, [r3, #8]
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	430a      	orrs	r2, r1
 800141a:	609a      	str	r2, [r3, #8]
 800141c:	e00f      	b.n	800143e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	689a      	ldr	r2, [r3, #8]
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800142c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	689a      	ldr	r2, [r3, #8]
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800143c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	689a      	ldr	r2, [r3, #8]
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f022 0202 	bic.w	r2, r2, #2
 800144c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	6899      	ldr	r1, [r3, #8]
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	7e1b      	ldrb	r3, [r3, #24]
 8001458:	005a      	lsls	r2, r3, #1
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	430a      	orrs	r2, r1
 8001460:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001468:	2b00      	cmp	r3, #0
 800146a:	d01b      	beq.n	80014a4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	685a      	ldr	r2, [r3, #4]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800147a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	685a      	ldr	r2, [r3, #4]
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800148a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	6859      	ldr	r1, [r3, #4]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001496:	3b01      	subs	r3, #1
 8001498:	035a      	lsls	r2, r3, #13
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	430a      	orrs	r2, r1
 80014a0:	605a      	str	r2, [r3, #4]
 80014a2:	e007      	b.n	80014b4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	685a      	ldr	r2, [r3, #4]
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80014b2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80014c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	69db      	ldr	r3, [r3, #28]
 80014ce:	3b01      	subs	r3, #1
 80014d0:	051a      	lsls	r2, r3, #20
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	430a      	orrs	r2, r1
 80014d8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	689a      	ldr	r2, [r3, #8]
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80014e8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	6899      	ldr	r1, [r3, #8]
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80014f6:	025a      	lsls	r2, r3, #9
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	430a      	orrs	r2, r1
 80014fe:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	689a      	ldr	r2, [r3, #8]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800150e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	6899      	ldr	r1, [r3, #8]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	695b      	ldr	r3, [r3, #20]
 800151a:	029a      	lsls	r2, r3, #10
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	430a      	orrs	r2, r1
 8001522:	609a      	str	r2, [r3, #8]
}
 8001524:	bf00      	nop
 8001526:	3714      	adds	r7, #20
 8001528:	46bd      	mov	sp, r7
 800152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152e:	4770      	bx	lr
 8001530:	40012300 	.word	0x40012300
 8001534:	0f000001 	.word	0x0f000001

08001538 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001538:	b480      	push	{r7}
 800153a:	b083      	sub	sp, #12
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001540:	bf00      	nop
 8001542:	370c      	adds	r7, #12
 8001544:	46bd      	mov	sp, r7
 8001546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154a:	4770      	bx	lr

0800154c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800154c:	b480      	push	{r7}
 800154e:	b085      	sub	sp, #20
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	f003 0307 	and.w	r3, r3, #7
 800155a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800155c:	4b0c      	ldr	r3, [pc, #48]	; (8001590 <__NVIC_SetPriorityGrouping+0x44>)
 800155e:	68db      	ldr	r3, [r3, #12]
 8001560:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001562:	68ba      	ldr	r2, [r7, #8]
 8001564:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001568:	4013      	ands	r3, r2
 800156a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001574:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001578:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800157c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800157e:	4a04      	ldr	r2, [pc, #16]	; (8001590 <__NVIC_SetPriorityGrouping+0x44>)
 8001580:	68bb      	ldr	r3, [r7, #8]
 8001582:	60d3      	str	r3, [r2, #12]
}
 8001584:	bf00      	nop
 8001586:	3714      	adds	r7, #20
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr
 8001590:	e000ed00 	.word	0xe000ed00

08001594 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001598:	4b04      	ldr	r3, [pc, #16]	; (80015ac <__NVIC_GetPriorityGrouping+0x18>)
 800159a:	68db      	ldr	r3, [r3, #12]
 800159c:	0a1b      	lsrs	r3, r3, #8
 800159e:	f003 0307 	and.w	r3, r3, #7
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	46bd      	mov	sp, r7
 80015a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015aa:	4770      	bx	lr
 80015ac:	e000ed00 	.word	0xe000ed00

080015b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b083      	sub	sp, #12
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	4603      	mov	r3, r0
 80015b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	db0b      	blt.n	80015da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015c2:	79fb      	ldrb	r3, [r7, #7]
 80015c4:	f003 021f 	and.w	r2, r3, #31
 80015c8:	4907      	ldr	r1, [pc, #28]	; (80015e8 <__NVIC_EnableIRQ+0x38>)
 80015ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ce:	095b      	lsrs	r3, r3, #5
 80015d0:	2001      	movs	r0, #1
 80015d2:	fa00 f202 	lsl.w	r2, r0, r2
 80015d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015da:	bf00      	nop
 80015dc:	370c      	adds	r7, #12
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr
 80015e6:	bf00      	nop
 80015e8:	e000e100 	.word	0xe000e100

080015ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b083      	sub	sp, #12
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	4603      	mov	r3, r0
 80015f4:	6039      	str	r1, [r7, #0]
 80015f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	db0a      	blt.n	8001616 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	b2da      	uxtb	r2, r3
 8001604:	490c      	ldr	r1, [pc, #48]	; (8001638 <__NVIC_SetPriority+0x4c>)
 8001606:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800160a:	0112      	lsls	r2, r2, #4
 800160c:	b2d2      	uxtb	r2, r2
 800160e:	440b      	add	r3, r1
 8001610:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001614:	e00a      	b.n	800162c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	b2da      	uxtb	r2, r3
 800161a:	4908      	ldr	r1, [pc, #32]	; (800163c <__NVIC_SetPriority+0x50>)
 800161c:	79fb      	ldrb	r3, [r7, #7]
 800161e:	f003 030f 	and.w	r3, r3, #15
 8001622:	3b04      	subs	r3, #4
 8001624:	0112      	lsls	r2, r2, #4
 8001626:	b2d2      	uxtb	r2, r2
 8001628:	440b      	add	r3, r1
 800162a:	761a      	strb	r2, [r3, #24]
}
 800162c:	bf00      	nop
 800162e:	370c      	adds	r7, #12
 8001630:	46bd      	mov	sp, r7
 8001632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001636:	4770      	bx	lr
 8001638:	e000e100 	.word	0xe000e100
 800163c:	e000ed00 	.word	0xe000ed00

08001640 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001640:	b480      	push	{r7}
 8001642:	b089      	sub	sp, #36	; 0x24
 8001644:	af00      	add	r7, sp, #0
 8001646:	60f8      	str	r0, [r7, #12]
 8001648:	60b9      	str	r1, [r7, #8]
 800164a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	f003 0307 	and.w	r3, r3, #7
 8001652:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001654:	69fb      	ldr	r3, [r7, #28]
 8001656:	f1c3 0307 	rsb	r3, r3, #7
 800165a:	2b04      	cmp	r3, #4
 800165c:	bf28      	it	cs
 800165e:	2304      	movcs	r3, #4
 8001660:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001662:	69fb      	ldr	r3, [r7, #28]
 8001664:	3304      	adds	r3, #4
 8001666:	2b06      	cmp	r3, #6
 8001668:	d902      	bls.n	8001670 <NVIC_EncodePriority+0x30>
 800166a:	69fb      	ldr	r3, [r7, #28]
 800166c:	3b03      	subs	r3, #3
 800166e:	e000      	b.n	8001672 <NVIC_EncodePriority+0x32>
 8001670:	2300      	movs	r3, #0
 8001672:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001674:	f04f 32ff 	mov.w	r2, #4294967295
 8001678:	69bb      	ldr	r3, [r7, #24]
 800167a:	fa02 f303 	lsl.w	r3, r2, r3
 800167e:	43da      	mvns	r2, r3
 8001680:	68bb      	ldr	r3, [r7, #8]
 8001682:	401a      	ands	r2, r3
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001688:	f04f 31ff 	mov.w	r1, #4294967295
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	fa01 f303 	lsl.w	r3, r1, r3
 8001692:	43d9      	mvns	r1, r3
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001698:	4313      	orrs	r3, r2
         );
}
 800169a:	4618      	mov	r0, r3
 800169c:	3724      	adds	r7, #36	; 0x24
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr
	...

080016a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	3b01      	subs	r3, #1
 80016b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016b8:	d301      	bcc.n	80016be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016ba:	2301      	movs	r3, #1
 80016bc:	e00f      	b.n	80016de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016be:	4a0a      	ldr	r2, [pc, #40]	; (80016e8 <SysTick_Config+0x40>)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	3b01      	subs	r3, #1
 80016c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016c6:	210f      	movs	r1, #15
 80016c8:	f04f 30ff 	mov.w	r0, #4294967295
 80016cc:	f7ff ff8e 	bl	80015ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016d0:	4b05      	ldr	r3, [pc, #20]	; (80016e8 <SysTick_Config+0x40>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016d6:	4b04      	ldr	r3, [pc, #16]	; (80016e8 <SysTick_Config+0x40>)
 80016d8:	2207      	movs	r2, #7
 80016da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016dc:	2300      	movs	r3, #0
}
 80016de:	4618      	mov	r0, r3
 80016e0:	3708      	adds	r7, #8
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	e000e010 	.word	0xe000e010

080016ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016f4:	6878      	ldr	r0, [r7, #4]
 80016f6:	f7ff ff29 	bl	800154c <__NVIC_SetPriorityGrouping>
}
 80016fa:	bf00      	nop
 80016fc:	3708      	adds	r7, #8
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}

08001702 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001702:	b580      	push	{r7, lr}
 8001704:	b086      	sub	sp, #24
 8001706:	af00      	add	r7, sp, #0
 8001708:	4603      	mov	r3, r0
 800170a:	60b9      	str	r1, [r7, #8]
 800170c:	607a      	str	r2, [r7, #4]
 800170e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001710:	2300      	movs	r3, #0
 8001712:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001714:	f7ff ff3e 	bl	8001594 <__NVIC_GetPriorityGrouping>
 8001718:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800171a:	687a      	ldr	r2, [r7, #4]
 800171c:	68b9      	ldr	r1, [r7, #8]
 800171e:	6978      	ldr	r0, [r7, #20]
 8001720:	f7ff ff8e 	bl	8001640 <NVIC_EncodePriority>
 8001724:	4602      	mov	r2, r0
 8001726:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800172a:	4611      	mov	r1, r2
 800172c:	4618      	mov	r0, r3
 800172e:	f7ff ff5d 	bl	80015ec <__NVIC_SetPriority>
}
 8001732:	bf00      	nop
 8001734:	3718      	adds	r7, #24
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}

0800173a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800173a:	b580      	push	{r7, lr}
 800173c:	b082      	sub	sp, #8
 800173e:	af00      	add	r7, sp, #0
 8001740:	4603      	mov	r3, r0
 8001742:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001744:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001748:	4618      	mov	r0, r3
 800174a:	f7ff ff31 	bl	80015b0 <__NVIC_EnableIRQ>
}
 800174e:	bf00      	nop
 8001750:	3708      	adds	r7, #8
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}

08001756 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001756:	b580      	push	{r7, lr}
 8001758:	b082      	sub	sp, #8
 800175a:	af00      	add	r7, sp, #0
 800175c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800175e:	6878      	ldr	r0, [r7, #4]
 8001760:	f7ff ffa2 	bl	80016a8 <SysTick_Config>
 8001764:	4603      	mov	r3, r0
}
 8001766:	4618      	mov	r0, r3
 8001768:	3708      	adds	r7, #8
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
	...

08001770 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001770:	b480      	push	{r7}
 8001772:	b089      	sub	sp, #36	; 0x24
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
 8001778:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800177a:	2300      	movs	r3, #0
 800177c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800177e:	2300      	movs	r3, #0
 8001780:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001782:	2300      	movs	r3, #0
 8001784:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001786:	2300      	movs	r3, #0
 8001788:	61fb      	str	r3, [r7, #28]
 800178a:	e159      	b.n	8001a40 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800178c:	2201      	movs	r2, #1
 800178e:	69fb      	ldr	r3, [r7, #28]
 8001790:	fa02 f303 	lsl.w	r3, r2, r3
 8001794:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	697a      	ldr	r2, [r7, #20]
 800179c:	4013      	ands	r3, r2
 800179e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80017a0:	693a      	ldr	r2, [r7, #16]
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	429a      	cmp	r2, r3
 80017a6:	f040 8148 	bne.w	8001a3a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	f003 0303 	and.w	r3, r3, #3
 80017b2:	2b01      	cmp	r3, #1
 80017b4:	d005      	beq.n	80017c2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017be:	2b02      	cmp	r3, #2
 80017c0:	d130      	bne.n	8001824 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	689b      	ldr	r3, [r3, #8]
 80017c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80017c8:	69fb      	ldr	r3, [r7, #28]
 80017ca:	005b      	lsls	r3, r3, #1
 80017cc:	2203      	movs	r2, #3
 80017ce:	fa02 f303 	lsl.w	r3, r2, r3
 80017d2:	43db      	mvns	r3, r3
 80017d4:	69ba      	ldr	r2, [r7, #24]
 80017d6:	4013      	ands	r3, r2
 80017d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	68da      	ldr	r2, [r3, #12]
 80017de:	69fb      	ldr	r3, [r7, #28]
 80017e0:	005b      	lsls	r3, r3, #1
 80017e2:	fa02 f303 	lsl.w	r3, r2, r3
 80017e6:	69ba      	ldr	r2, [r7, #24]
 80017e8:	4313      	orrs	r3, r2
 80017ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	69ba      	ldr	r2, [r7, #24]
 80017f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017f8:	2201      	movs	r2, #1
 80017fa:	69fb      	ldr	r3, [r7, #28]
 80017fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001800:	43db      	mvns	r3, r3
 8001802:	69ba      	ldr	r2, [r7, #24]
 8001804:	4013      	ands	r3, r2
 8001806:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	091b      	lsrs	r3, r3, #4
 800180e:	f003 0201 	and.w	r2, r3, #1
 8001812:	69fb      	ldr	r3, [r7, #28]
 8001814:	fa02 f303 	lsl.w	r3, r2, r3
 8001818:	69ba      	ldr	r2, [r7, #24]
 800181a:	4313      	orrs	r3, r2
 800181c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	69ba      	ldr	r2, [r7, #24]
 8001822:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	f003 0303 	and.w	r3, r3, #3
 800182c:	2b03      	cmp	r3, #3
 800182e:	d017      	beq.n	8001860 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	68db      	ldr	r3, [r3, #12]
 8001834:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001836:	69fb      	ldr	r3, [r7, #28]
 8001838:	005b      	lsls	r3, r3, #1
 800183a:	2203      	movs	r2, #3
 800183c:	fa02 f303 	lsl.w	r3, r2, r3
 8001840:	43db      	mvns	r3, r3
 8001842:	69ba      	ldr	r2, [r7, #24]
 8001844:	4013      	ands	r3, r2
 8001846:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	689a      	ldr	r2, [r3, #8]
 800184c:	69fb      	ldr	r3, [r7, #28]
 800184e:	005b      	lsls	r3, r3, #1
 8001850:	fa02 f303 	lsl.w	r3, r2, r3
 8001854:	69ba      	ldr	r2, [r7, #24]
 8001856:	4313      	orrs	r3, r2
 8001858:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	69ba      	ldr	r2, [r7, #24]
 800185e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	f003 0303 	and.w	r3, r3, #3
 8001868:	2b02      	cmp	r3, #2
 800186a:	d123      	bne.n	80018b4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800186c:	69fb      	ldr	r3, [r7, #28]
 800186e:	08da      	lsrs	r2, r3, #3
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	3208      	adds	r2, #8
 8001874:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001878:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800187a:	69fb      	ldr	r3, [r7, #28]
 800187c:	f003 0307 	and.w	r3, r3, #7
 8001880:	009b      	lsls	r3, r3, #2
 8001882:	220f      	movs	r2, #15
 8001884:	fa02 f303 	lsl.w	r3, r2, r3
 8001888:	43db      	mvns	r3, r3
 800188a:	69ba      	ldr	r2, [r7, #24]
 800188c:	4013      	ands	r3, r2
 800188e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	691a      	ldr	r2, [r3, #16]
 8001894:	69fb      	ldr	r3, [r7, #28]
 8001896:	f003 0307 	and.w	r3, r3, #7
 800189a:	009b      	lsls	r3, r3, #2
 800189c:	fa02 f303 	lsl.w	r3, r2, r3
 80018a0:	69ba      	ldr	r2, [r7, #24]
 80018a2:	4313      	orrs	r3, r2
 80018a4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80018a6:	69fb      	ldr	r3, [r7, #28]
 80018a8:	08da      	lsrs	r2, r3, #3
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	3208      	adds	r2, #8
 80018ae:	69b9      	ldr	r1, [r7, #24]
 80018b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80018ba:	69fb      	ldr	r3, [r7, #28]
 80018bc:	005b      	lsls	r3, r3, #1
 80018be:	2203      	movs	r2, #3
 80018c0:	fa02 f303 	lsl.w	r3, r2, r3
 80018c4:	43db      	mvns	r3, r3
 80018c6:	69ba      	ldr	r2, [r7, #24]
 80018c8:	4013      	ands	r3, r2
 80018ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	f003 0203 	and.w	r2, r3, #3
 80018d4:	69fb      	ldr	r3, [r7, #28]
 80018d6:	005b      	lsls	r3, r3, #1
 80018d8:	fa02 f303 	lsl.w	r3, r2, r3
 80018dc:	69ba      	ldr	r2, [r7, #24]
 80018de:	4313      	orrs	r3, r2
 80018e0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	69ba      	ldr	r2, [r7, #24]
 80018e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	f000 80a2 	beq.w	8001a3a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018f6:	2300      	movs	r3, #0
 80018f8:	60fb      	str	r3, [r7, #12]
 80018fa:	4b57      	ldr	r3, [pc, #348]	; (8001a58 <HAL_GPIO_Init+0x2e8>)
 80018fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018fe:	4a56      	ldr	r2, [pc, #344]	; (8001a58 <HAL_GPIO_Init+0x2e8>)
 8001900:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001904:	6453      	str	r3, [r2, #68]	; 0x44
 8001906:	4b54      	ldr	r3, [pc, #336]	; (8001a58 <HAL_GPIO_Init+0x2e8>)
 8001908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800190a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800190e:	60fb      	str	r3, [r7, #12]
 8001910:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001912:	4a52      	ldr	r2, [pc, #328]	; (8001a5c <HAL_GPIO_Init+0x2ec>)
 8001914:	69fb      	ldr	r3, [r7, #28]
 8001916:	089b      	lsrs	r3, r3, #2
 8001918:	3302      	adds	r3, #2
 800191a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800191e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001920:	69fb      	ldr	r3, [r7, #28]
 8001922:	f003 0303 	and.w	r3, r3, #3
 8001926:	009b      	lsls	r3, r3, #2
 8001928:	220f      	movs	r2, #15
 800192a:	fa02 f303 	lsl.w	r3, r2, r3
 800192e:	43db      	mvns	r3, r3
 8001930:	69ba      	ldr	r2, [r7, #24]
 8001932:	4013      	ands	r3, r2
 8001934:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	4a49      	ldr	r2, [pc, #292]	; (8001a60 <HAL_GPIO_Init+0x2f0>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d019      	beq.n	8001972 <HAL_GPIO_Init+0x202>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	4a48      	ldr	r2, [pc, #288]	; (8001a64 <HAL_GPIO_Init+0x2f4>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d013      	beq.n	800196e <HAL_GPIO_Init+0x1fe>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	4a47      	ldr	r2, [pc, #284]	; (8001a68 <HAL_GPIO_Init+0x2f8>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d00d      	beq.n	800196a <HAL_GPIO_Init+0x1fa>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	4a46      	ldr	r2, [pc, #280]	; (8001a6c <HAL_GPIO_Init+0x2fc>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d007      	beq.n	8001966 <HAL_GPIO_Init+0x1f6>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	4a45      	ldr	r2, [pc, #276]	; (8001a70 <HAL_GPIO_Init+0x300>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d101      	bne.n	8001962 <HAL_GPIO_Init+0x1f2>
 800195e:	2304      	movs	r3, #4
 8001960:	e008      	b.n	8001974 <HAL_GPIO_Init+0x204>
 8001962:	2307      	movs	r3, #7
 8001964:	e006      	b.n	8001974 <HAL_GPIO_Init+0x204>
 8001966:	2303      	movs	r3, #3
 8001968:	e004      	b.n	8001974 <HAL_GPIO_Init+0x204>
 800196a:	2302      	movs	r3, #2
 800196c:	e002      	b.n	8001974 <HAL_GPIO_Init+0x204>
 800196e:	2301      	movs	r3, #1
 8001970:	e000      	b.n	8001974 <HAL_GPIO_Init+0x204>
 8001972:	2300      	movs	r3, #0
 8001974:	69fa      	ldr	r2, [r7, #28]
 8001976:	f002 0203 	and.w	r2, r2, #3
 800197a:	0092      	lsls	r2, r2, #2
 800197c:	4093      	lsls	r3, r2
 800197e:	69ba      	ldr	r2, [r7, #24]
 8001980:	4313      	orrs	r3, r2
 8001982:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001984:	4935      	ldr	r1, [pc, #212]	; (8001a5c <HAL_GPIO_Init+0x2ec>)
 8001986:	69fb      	ldr	r3, [r7, #28]
 8001988:	089b      	lsrs	r3, r3, #2
 800198a:	3302      	adds	r3, #2
 800198c:	69ba      	ldr	r2, [r7, #24]
 800198e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001992:	4b38      	ldr	r3, [pc, #224]	; (8001a74 <HAL_GPIO_Init+0x304>)
 8001994:	689b      	ldr	r3, [r3, #8]
 8001996:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001998:	693b      	ldr	r3, [r7, #16]
 800199a:	43db      	mvns	r3, r3
 800199c:	69ba      	ldr	r2, [r7, #24]
 800199e:	4013      	ands	r3, r2
 80019a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d003      	beq.n	80019b6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80019ae:	69ba      	ldr	r2, [r7, #24]
 80019b0:	693b      	ldr	r3, [r7, #16]
 80019b2:	4313      	orrs	r3, r2
 80019b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80019b6:	4a2f      	ldr	r2, [pc, #188]	; (8001a74 <HAL_GPIO_Init+0x304>)
 80019b8:	69bb      	ldr	r3, [r7, #24]
 80019ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80019bc:	4b2d      	ldr	r3, [pc, #180]	; (8001a74 <HAL_GPIO_Init+0x304>)
 80019be:	68db      	ldr	r3, [r3, #12]
 80019c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019c2:	693b      	ldr	r3, [r7, #16]
 80019c4:	43db      	mvns	r3, r3
 80019c6:	69ba      	ldr	r2, [r7, #24]
 80019c8:	4013      	ands	r3, r2
 80019ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d003      	beq.n	80019e0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80019d8:	69ba      	ldr	r2, [r7, #24]
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	4313      	orrs	r3, r2
 80019de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80019e0:	4a24      	ldr	r2, [pc, #144]	; (8001a74 <HAL_GPIO_Init+0x304>)
 80019e2:	69bb      	ldr	r3, [r7, #24]
 80019e4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80019e6:	4b23      	ldr	r3, [pc, #140]	; (8001a74 <HAL_GPIO_Init+0x304>)
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019ec:	693b      	ldr	r3, [r7, #16]
 80019ee:	43db      	mvns	r3, r3
 80019f0:	69ba      	ldr	r2, [r7, #24]
 80019f2:	4013      	ands	r3, r2
 80019f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d003      	beq.n	8001a0a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001a02:	69ba      	ldr	r2, [r7, #24]
 8001a04:	693b      	ldr	r3, [r7, #16]
 8001a06:	4313      	orrs	r3, r2
 8001a08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a0a:	4a1a      	ldr	r2, [pc, #104]	; (8001a74 <HAL_GPIO_Init+0x304>)
 8001a0c:	69bb      	ldr	r3, [r7, #24]
 8001a0e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a10:	4b18      	ldr	r3, [pc, #96]	; (8001a74 <HAL_GPIO_Init+0x304>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a16:	693b      	ldr	r3, [r7, #16]
 8001a18:	43db      	mvns	r3, r3
 8001a1a:	69ba      	ldr	r2, [r7, #24]
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d003      	beq.n	8001a34 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001a2c:	69ba      	ldr	r2, [r7, #24]
 8001a2e:	693b      	ldr	r3, [r7, #16]
 8001a30:	4313      	orrs	r3, r2
 8001a32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a34:	4a0f      	ldr	r2, [pc, #60]	; (8001a74 <HAL_GPIO_Init+0x304>)
 8001a36:	69bb      	ldr	r3, [r7, #24]
 8001a38:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a3a:	69fb      	ldr	r3, [r7, #28]
 8001a3c:	3301      	adds	r3, #1
 8001a3e:	61fb      	str	r3, [r7, #28]
 8001a40:	69fb      	ldr	r3, [r7, #28]
 8001a42:	2b0f      	cmp	r3, #15
 8001a44:	f67f aea2 	bls.w	800178c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a48:	bf00      	nop
 8001a4a:	bf00      	nop
 8001a4c:	3724      	adds	r7, #36	; 0x24
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr
 8001a56:	bf00      	nop
 8001a58:	40023800 	.word	0x40023800
 8001a5c:	40013800 	.word	0x40013800
 8001a60:	40020000 	.word	0x40020000
 8001a64:	40020400 	.word	0x40020400
 8001a68:	40020800 	.word	0x40020800
 8001a6c:	40020c00 	.word	0x40020c00
 8001a70:	40021000 	.word	0x40021000
 8001a74:	40013c00 	.word	0x40013c00

08001a78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b083      	sub	sp, #12
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
 8001a80:	460b      	mov	r3, r1
 8001a82:	807b      	strh	r3, [r7, #2]
 8001a84:	4613      	mov	r3, r2
 8001a86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a88:	787b      	ldrb	r3, [r7, #1]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d003      	beq.n	8001a96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a8e:	887a      	ldrh	r2, [r7, #2]
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001a94:	e003      	b.n	8001a9e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a96:	887b      	ldrh	r3, [r7, #2]
 8001a98:	041a      	lsls	r2, r3, #16
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	619a      	str	r2, [r3, #24]
}
 8001a9e:	bf00      	nop
 8001aa0:	370c      	adds	r7, #12
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr
	...

08001aac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b086      	sub	sp, #24
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d101      	bne.n	8001abe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
 8001abc:	e267      	b.n	8001f8e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f003 0301 	and.w	r3, r3, #1
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d075      	beq.n	8001bb6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001aca:	4b88      	ldr	r3, [pc, #544]	; (8001cec <HAL_RCC_OscConfig+0x240>)
 8001acc:	689b      	ldr	r3, [r3, #8]
 8001ace:	f003 030c 	and.w	r3, r3, #12
 8001ad2:	2b04      	cmp	r3, #4
 8001ad4:	d00c      	beq.n	8001af0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ad6:	4b85      	ldr	r3, [pc, #532]	; (8001cec <HAL_RCC_OscConfig+0x240>)
 8001ad8:	689b      	ldr	r3, [r3, #8]
 8001ada:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001ade:	2b08      	cmp	r3, #8
 8001ae0:	d112      	bne.n	8001b08 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ae2:	4b82      	ldr	r3, [pc, #520]	; (8001cec <HAL_RCC_OscConfig+0x240>)
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001aea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001aee:	d10b      	bne.n	8001b08 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001af0:	4b7e      	ldr	r3, [pc, #504]	; (8001cec <HAL_RCC_OscConfig+0x240>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d05b      	beq.n	8001bb4 <HAL_RCC_OscConfig+0x108>
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d157      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001b04:	2301      	movs	r3, #1
 8001b06:	e242      	b.n	8001f8e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b10:	d106      	bne.n	8001b20 <HAL_RCC_OscConfig+0x74>
 8001b12:	4b76      	ldr	r3, [pc, #472]	; (8001cec <HAL_RCC_OscConfig+0x240>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4a75      	ldr	r2, [pc, #468]	; (8001cec <HAL_RCC_OscConfig+0x240>)
 8001b18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b1c:	6013      	str	r3, [r2, #0]
 8001b1e:	e01d      	b.n	8001b5c <HAL_RCC_OscConfig+0xb0>
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b28:	d10c      	bne.n	8001b44 <HAL_RCC_OscConfig+0x98>
 8001b2a:	4b70      	ldr	r3, [pc, #448]	; (8001cec <HAL_RCC_OscConfig+0x240>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4a6f      	ldr	r2, [pc, #444]	; (8001cec <HAL_RCC_OscConfig+0x240>)
 8001b30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b34:	6013      	str	r3, [r2, #0]
 8001b36:	4b6d      	ldr	r3, [pc, #436]	; (8001cec <HAL_RCC_OscConfig+0x240>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a6c      	ldr	r2, [pc, #432]	; (8001cec <HAL_RCC_OscConfig+0x240>)
 8001b3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b40:	6013      	str	r3, [r2, #0]
 8001b42:	e00b      	b.n	8001b5c <HAL_RCC_OscConfig+0xb0>
 8001b44:	4b69      	ldr	r3, [pc, #420]	; (8001cec <HAL_RCC_OscConfig+0x240>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a68      	ldr	r2, [pc, #416]	; (8001cec <HAL_RCC_OscConfig+0x240>)
 8001b4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b4e:	6013      	str	r3, [r2, #0]
 8001b50:	4b66      	ldr	r3, [pc, #408]	; (8001cec <HAL_RCC_OscConfig+0x240>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a65      	ldr	r2, [pc, #404]	; (8001cec <HAL_RCC_OscConfig+0x240>)
 8001b56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b5a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d013      	beq.n	8001b8c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b64:	f7fe ffcc 	bl	8000b00 <HAL_GetTick>
 8001b68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b6a:	e008      	b.n	8001b7e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b6c:	f7fe ffc8 	bl	8000b00 <HAL_GetTick>
 8001b70:	4602      	mov	r2, r0
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	1ad3      	subs	r3, r2, r3
 8001b76:	2b64      	cmp	r3, #100	; 0x64
 8001b78:	d901      	bls.n	8001b7e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	e207      	b.n	8001f8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b7e:	4b5b      	ldr	r3, [pc, #364]	; (8001cec <HAL_RCC_OscConfig+0x240>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d0f0      	beq.n	8001b6c <HAL_RCC_OscConfig+0xc0>
 8001b8a:	e014      	b.n	8001bb6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b8c:	f7fe ffb8 	bl	8000b00 <HAL_GetTick>
 8001b90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b92:	e008      	b.n	8001ba6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b94:	f7fe ffb4 	bl	8000b00 <HAL_GetTick>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	1ad3      	subs	r3, r2, r3
 8001b9e:	2b64      	cmp	r3, #100	; 0x64
 8001ba0:	d901      	bls.n	8001ba6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001ba2:	2303      	movs	r3, #3
 8001ba4:	e1f3      	b.n	8001f8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ba6:	4b51      	ldr	r3, [pc, #324]	; (8001cec <HAL_RCC_OscConfig+0x240>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d1f0      	bne.n	8001b94 <HAL_RCC_OscConfig+0xe8>
 8001bb2:	e000      	b.n	8001bb6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bb4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f003 0302 	and.w	r3, r3, #2
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d063      	beq.n	8001c8a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001bc2:	4b4a      	ldr	r3, [pc, #296]	; (8001cec <HAL_RCC_OscConfig+0x240>)
 8001bc4:	689b      	ldr	r3, [r3, #8]
 8001bc6:	f003 030c 	and.w	r3, r3, #12
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d00b      	beq.n	8001be6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001bce:	4b47      	ldr	r3, [pc, #284]	; (8001cec <HAL_RCC_OscConfig+0x240>)
 8001bd0:	689b      	ldr	r3, [r3, #8]
 8001bd2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001bd6:	2b08      	cmp	r3, #8
 8001bd8:	d11c      	bne.n	8001c14 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001bda:	4b44      	ldr	r3, [pc, #272]	; (8001cec <HAL_RCC_OscConfig+0x240>)
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d116      	bne.n	8001c14 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001be6:	4b41      	ldr	r3, [pc, #260]	; (8001cec <HAL_RCC_OscConfig+0x240>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f003 0302 	and.w	r3, r3, #2
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d005      	beq.n	8001bfe <HAL_RCC_OscConfig+0x152>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	68db      	ldr	r3, [r3, #12]
 8001bf6:	2b01      	cmp	r3, #1
 8001bf8:	d001      	beq.n	8001bfe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e1c7      	b.n	8001f8e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bfe:	4b3b      	ldr	r3, [pc, #236]	; (8001cec <HAL_RCC_OscConfig+0x240>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	691b      	ldr	r3, [r3, #16]
 8001c0a:	00db      	lsls	r3, r3, #3
 8001c0c:	4937      	ldr	r1, [pc, #220]	; (8001cec <HAL_RCC_OscConfig+0x240>)
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c12:	e03a      	b.n	8001c8a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	68db      	ldr	r3, [r3, #12]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d020      	beq.n	8001c5e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c1c:	4b34      	ldr	r3, [pc, #208]	; (8001cf0 <HAL_RCC_OscConfig+0x244>)
 8001c1e:	2201      	movs	r2, #1
 8001c20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c22:	f7fe ff6d 	bl	8000b00 <HAL_GetTick>
 8001c26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c28:	e008      	b.n	8001c3c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c2a:	f7fe ff69 	bl	8000b00 <HAL_GetTick>
 8001c2e:	4602      	mov	r2, r0
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	1ad3      	subs	r3, r2, r3
 8001c34:	2b02      	cmp	r3, #2
 8001c36:	d901      	bls.n	8001c3c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001c38:	2303      	movs	r3, #3
 8001c3a:	e1a8      	b.n	8001f8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c3c:	4b2b      	ldr	r3, [pc, #172]	; (8001cec <HAL_RCC_OscConfig+0x240>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f003 0302 	and.w	r3, r3, #2
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d0f0      	beq.n	8001c2a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c48:	4b28      	ldr	r3, [pc, #160]	; (8001cec <HAL_RCC_OscConfig+0x240>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	691b      	ldr	r3, [r3, #16]
 8001c54:	00db      	lsls	r3, r3, #3
 8001c56:	4925      	ldr	r1, [pc, #148]	; (8001cec <HAL_RCC_OscConfig+0x240>)
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	600b      	str	r3, [r1, #0]
 8001c5c:	e015      	b.n	8001c8a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c5e:	4b24      	ldr	r3, [pc, #144]	; (8001cf0 <HAL_RCC_OscConfig+0x244>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c64:	f7fe ff4c 	bl	8000b00 <HAL_GetTick>
 8001c68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c6a:	e008      	b.n	8001c7e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c6c:	f7fe ff48 	bl	8000b00 <HAL_GetTick>
 8001c70:	4602      	mov	r2, r0
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	1ad3      	subs	r3, r2, r3
 8001c76:	2b02      	cmp	r3, #2
 8001c78:	d901      	bls.n	8001c7e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001c7a:	2303      	movs	r3, #3
 8001c7c:	e187      	b.n	8001f8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c7e:	4b1b      	ldr	r3, [pc, #108]	; (8001cec <HAL_RCC_OscConfig+0x240>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f003 0302 	and.w	r3, r3, #2
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d1f0      	bne.n	8001c6c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f003 0308 	and.w	r3, r3, #8
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d036      	beq.n	8001d04 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	695b      	ldr	r3, [r3, #20]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d016      	beq.n	8001ccc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c9e:	4b15      	ldr	r3, [pc, #84]	; (8001cf4 <HAL_RCC_OscConfig+0x248>)
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ca4:	f7fe ff2c 	bl	8000b00 <HAL_GetTick>
 8001ca8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001caa:	e008      	b.n	8001cbe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cac:	f7fe ff28 	bl	8000b00 <HAL_GetTick>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	2b02      	cmp	r3, #2
 8001cb8:	d901      	bls.n	8001cbe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001cba:	2303      	movs	r3, #3
 8001cbc:	e167      	b.n	8001f8e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cbe:	4b0b      	ldr	r3, [pc, #44]	; (8001cec <HAL_RCC_OscConfig+0x240>)
 8001cc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001cc2:	f003 0302 	and.w	r3, r3, #2
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d0f0      	beq.n	8001cac <HAL_RCC_OscConfig+0x200>
 8001cca:	e01b      	b.n	8001d04 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ccc:	4b09      	ldr	r3, [pc, #36]	; (8001cf4 <HAL_RCC_OscConfig+0x248>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cd2:	f7fe ff15 	bl	8000b00 <HAL_GetTick>
 8001cd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cd8:	e00e      	b.n	8001cf8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cda:	f7fe ff11 	bl	8000b00 <HAL_GetTick>
 8001cde:	4602      	mov	r2, r0
 8001ce0:	693b      	ldr	r3, [r7, #16]
 8001ce2:	1ad3      	subs	r3, r2, r3
 8001ce4:	2b02      	cmp	r3, #2
 8001ce6:	d907      	bls.n	8001cf8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001ce8:	2303      	movs	r3, #3
 8001cea:	e150      	b.n	8001f8e <HAL_RCC_OscConfig+0x4e2>
 8001cec:	40023800 	.word	0x40023800
 8001cf0:	42470000 	.word	0x42470000
 8001cf4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cf8:	4b88      	ldr	r3, [pc, #544]	; (8001f1c <HAL_RCC_OscConfig+0x470>)
 8001cfa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001cfc:	f003 0302 	and.w	r3, r3, #2
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d1ea      	bne.n	8001cda <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f003 0304 	and.w	r3, r3, #4
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	f000 8097 	beq.w	8001e40 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d12:	2300      	movs	r3, #0
 8001d14:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d16:	4b81      	ldr	r3, [pc, #516]	; (8001f1c <HAL_RCC_OscConfig+0x470>)
 8001d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d10f      	bne.n	8001d42 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d22:	2300      	movs	r3, #0
 8001d24:	60bb      	str	r3, [r7, #8]
 8001d26:	4b7d      	ldr	r3, [pc, #500]	; (8001f1c <HAL_RCC_OscConfig+0x470>)
 8001d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d2a:	4a7c      	ldr	r2, [pc, #496]	; (8001f1c <HAL_RCC_OscConfig+0x470>)
 8001d2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d30:	6413      	str	r3, [r2, #64]	; 0x40
 8001d32:	4b7a      	ldr	r3, [pc, #488]	; (8001f1c <HAL_RCC_OscConfig+0x470>)
 8001d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d3a:	60bb      	str	r3, [r7, #8]
 8001d3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d42:	4b77      	ldr	r3, [pc, #476]	; (8001f20 <HAL_RCC_OscConfig+0x474>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d118      	bne.n	8001d80 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d4e:	4b74      	ldr	r3, [pc, #464]	; (8001f20 <HAL_RCC_OscConfig+0x474>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4a73      	ldr	r2, [pc, #460]	; (8001f20 <HAL_RCC_OscConfig+0x474>)
 8001d54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d5a:	f7fe fed1 	bl	8000b00 <HAL_GetTick>
 8001d5e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d60:	e008      	b.n	8001d74 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d62:	f7fe fecd 	bl	8000b00 <HAL_GetTick>
 8001d66:	4602      	mov	r2, r0
 8001d68:	693b      	ldr	r3, [r7, #16]
 8001d6a:	1ad3      	subs	r3, r2, r3
 8001d6c:	2b02      	cmp	r3, #2
 8001d6e:	d901      	bls.n	8001d74 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001d70:	2303      	movs	r3, #3
 8001d72:	e10c      	b.n	8001f8e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d74:	4b6a      	ldr	r3, [pc, #424]	; (8001f20 <HAL_RCC_OscConfig+0x474>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d0f0      	beq.n	8001d62 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	2b01      	cmp	r3, #1
 8001d86:	d106      	bne.n	8001d96 <HAL_RCC_OscConfig+0x2ea>
 8001d88:	4b64      	ldr	r3, [pc, #400]	; (8001f1c <HAL_RCC_OscConfig+0x470>)
 8001d8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d8c:	4a63      	ldr	r2, [pc, #396]	; (8001f1c <HAL_RCC_OscConfig+0x470>)
 8001d8e:	f043 0301 	orr.w	r3, r3, #1
 8001d92:	6713      	str	r3, [r2, #112]	; 0x70
 8001d94:	e01c      	b.n	8001dd0 <HAL_RCC_OscConfig+0x324>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	689b      	ldr	r3, [r3, #8]
 8001d9a:	2b05      	cmp	r3, #5
 8001d9c:	d10c      	bne.n	8001db8 <HAL_RCC_OscConfig+0x30c>
 8001d9e:	4b5f      	ldr	r3, [pc, #380]	; (8001f1c <HAL_RCC_OscConfig+0x470>)
 8001da0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001da2:	4a5e      	ldr	r2, [pc, #376]	; (8001f1c <HAL_RCC_OscConfig+0x470>)
 8001da4:	f043 0304 	orr.w	r3, r3, #4
 8001da8:	6713      	str	r3, [r2, #112]	; 0x70
 8001daa:	4b5c      	ldr	r3, [pc, #368]	; (8001f1c <HAL_RCC_OscConfig+0x470>)
 8001dac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dae:	4a5b      	ldr	r2, [pc, #364]	; (8001f1c <HAL_RCC_OscConfig+0x470>)
 8001db0:	f043 0301 	orr.w	r3, r3, #1
 8001db4:	6713      	str	r3, [r2, #112]	; 0x70
 8001db6:	e00b      	b.n	8001dd0 <HAL_RCC_OscConfig+0x324>
 8001db8:	4b58      	ldr	r3, [pc, #352]	; (8001f1c <HAL_RCC_OscConfig+0x470>)
 8001dba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dbc:	4a57      	ldr	r2, [pc, #348]	; (8001f1c <HAL_RCC_OscConfig+0x470>)
 8001dbe:	f023 0301 	bic.w	r3, r3, #1
 8001dc2:	6713      	str	r3, [r2, #112]	; 0x70
 8001dc4:	4b55      	ldr	r3, [pc, #340]	; (8001f1c <HAL_RCC_OscConfig+0x470>)
 8001dc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dc8:	4a54      	ldr	r2, [pc, #336]	; (8001f1c <HAL_RCC_OscConfig+0x470>)
 8001dca:	f023 0304 	bic.w	r3, r3, #4
 8001dce:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d015      	beq.n	8001e04 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dd8:	f7fe fe92 	bl	8000b00 <HAL_GetTick>
 8001ddc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dde:	e00a      	b.n	8001df6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001de0:	f7fe fe8e 	bl	8000b00 <HAL_GetTick>
 8001de4:	4602      	mov	r2, r0
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	1ad3      	subs	r3, r2, r3
 8001dea:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d901      	bls.n	8001df6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001df2:	2303      	movs	r3, #3
 8001df4:	e0cb      	b.n	8001f8e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001df6:	4b49      	ldr	r3, [pc, #292]	; (8001f1c <HAL_RCC_OscConfig+0x470>)
 8001df8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dfa:	f003 0302 	and.w	r3, r3, #2
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d0ee      	beq.n	8001de0 <HAL_RCC_OscConfig+0x334>
 8001e02:	e014      	b.n	8001e2e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e04:	f7fe fe7c 	bl	8000b00 <HAL_GetTick>
 8001e08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e0a:	e00a      	b.n	8001e22 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e0c:	f7fe fe78 	bl	8000b00 <HAL_GetTick>
 8001e10:	4602      	mov	r2, r0
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	1ad3      	subs	r3, r2, r3
 8001e16:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d901      	bls.n	8001e22 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001e1e:	2303      	movs	r3, #3
 8001e20:	e0b5      	b.n	8001f8e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e22:	4b3e      	ldr	r3, [pc, #248]	; (8001f1c <HAL_RCC_OscConfig+0x470>)
 8001e24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e26:	f003 0302 	and.w	r3, r3, #2
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d1ee      	bne.n	8001e0c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e2e:	7dfb      	ldrb	r3, [r7, #23]
 8001e30:	2b01      	cmp	r3, #1
 8001e32:	d105      	bne.n	8001e40 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e34:	4b39      	ldr	r3, [pc, #228]	; (8001f1c <HAL_RCC_OscConfig+0x470>)
 8001e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e38:	4a38      	ldr	r2, [pc, #224]	; (8001f1c <HAL_RCC_OscConfig+0x470>)
 8001e3a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e3e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	699b      	ldr	r3, [r3, #24]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	f000 80a1 	beq.w	8001f8c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001e4a:	4b34      	ldr	r3, [pc, #208]	; (8001f1c <HAL_RCC_OscConfig+0x470>)
 8001e4c:	689b      	ldr	r3, [r3, #8]
 8001e4e:	f003 030c 	and.w	r3, r3, #12
 8001e52:	2b08      	cmp	r3, #8
 8001e54:	d05c      	beq.n	8001f10 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	699b      	ldr	r3, [r3, #24]
 8001e5a:	2b02      	cmp	r3, #2
 8001e5c:	d141      	bne.n	8001ee2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e5e:	4b31      	ldr	r3, [pc, #196]	; (8001f24 <HAL_RCC_OscConfig+0x478>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e64:	f7fe fe4c 	bl	8000b00 <HAL_GetTick>
 8001e68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e6a:	e008      	b.n	8001e7e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e6c:	f7fe fe48 	bl	8000b00 <HAL_GetTick>
 8001e70:	4602      	mov	r2, r0
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	1ad3      	subs	r3, r2, r3
 8001e76:	2b02      	cmp	r3, #2
 8001e78:	d901      	bls.n	8001e7e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001e7a:	2303      	movs	r3, #3
 8001e7c:	e087      	b.n	8001f8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e7e:	4b27      	ldr	r3, [pc, #156]	; (8001f1c <HAL_RCC_OscConfig+0x470>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d1f0      	bne.n	8001e6c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	69da      	ldr	r2, [r3, #28]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6a1b      	ldr	r3, [r3, #32]
 8001e92:	431a      	orrs	r2, r3
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e98:	019b      	lsls	r3, r3, #6
 8001e9a:	431a      	orrs	r2, r3
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ea0:	085b      	lsrs	r3, r3, #1
 8001ea2:	3b01      	subs	r3, #1
 8001ea4:	041b      	lsls	r3, r3, #16
 8001ea6:	431a      	orrs	r2, r3
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eac:	061b      	lsls	r3, r3, #24
 8001eae:	491b      	ldr	r1, [pc, #108]	; (8001f1c <HAL_RCC_OscConfig+0x470>)
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001eb4:	4b1b      	ldr	r3, [pc, #108]	; (8001f24 <HAL_RCC_OscConfig+0x478>)
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eba:	f7fe fe21 	bl	8000b00 <HAL_GetTick>
 8001ebe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ec0:	e008      	b.n	8001ed4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ec2:	f7fe fe1d 	bl	8000b00 <HAL_GetTick>
 8001ec6:	4602      	mov	r2, r0
 8001ec8:	693b      	ldr	r3, [r7, #16]
 8001eca:	1ad3      	subs	r3, r2, r3
 8001ecc:	2b02      	cmp	r3, #2
 8001ece:	d901      	bls.n	8001ed4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001ed0:	2303      	movs	r3, #3
 8001ed2:	e05c      	b.n	8001f8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ed4:	4b11      	ldr	r3, [pc, #68]	; (8001f1c <HAL_RCC_OscConfig+0x470>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d0f0      	beq.n	8001ec2 <HAL_RCC_OscConfig+0x416>
 8001ee0:	e054      	b.n	8001f8c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ee2:	4b10      	ldr	r3, [pc, #64]	; (8001f24 <HAL_RCC_OscConfig+0x478>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ee8:	f7fe fe0a 	bl	8000b00 <HAL_GetTick>
 8001eec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001eee:	e008      	b.n	8001f02 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ef0:	f7fe fe06 	bl	8000b00 <HAL_GetTick>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	693b      	ldr	r3, [r7, #16]
 8001ef8:	1ad3      	subs	r3, r2, r3
 8001efa:	2b02      	cmp	r3, #2
 8001efc:	d901      	bls.n	8001f02 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001efe:	2303      	movs	r3, #3
 8001f00:	e045      	b.n	8001f8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f02:	4b06      	ldr	r3, [pc, #24]	; (8001f1c <HAL_RCC_OscConfig+0x470>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d1f0      	bne.n	8001ef0 <HAL_RCC_OscConfig+0x444>
 8001f0e:	e03d      	b.n	8001f8c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	699b      	ldr	r3, [r3, #24]
 8001f14:	2b01      	cmp	r3, #1
 8001f16:	d107      	bne.n	8001f28 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	e038      	b.n	8001f8e <HAL_RCC_OscConfig+0x4e2>
 8001f1c:	40023800 	.word	0x40023800
 8001f20:	40007000 	.word	0x40007000
 8001f24:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001f28:	4b1b      	ldr	r3, [pc, #108]	; (8001f98 <HAL_RCC_OscConfig+0x4ec>)
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	699b      	ldr	r3, [r3, #24]
 8001f32:	2b01      	cmp	r3, #1
 8001f34:	d028      	beq.n	8001f88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f40:	429a      	cmp	r2, r3
 8001f42:	d121      	bne.n	8001f88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f4e:	429a      	cmp	r2, r3
 8001f50:	d11a      	bne.n	8001f88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f52:	68fa      	ldr	r2, [r7, #12]
 8001f54:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001f58:	4013      	ands	r3, r2
 8001f5a:	687a      	ldr	r2, [r7, #4]
 8001f5c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001f5e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d111      	bne.n	8001f88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f6e:	085b      	lsrs	r3, r3, #1
 8001f70:	3b01      	subs	r3, #1
 8001f72:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f74:	429a      	cmp	r2, r3
 8001f76:	d107      	bne.n	8001f88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f82:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f84:	429a      	cmp	r2, r3
 8001f86:	d001      	beq.n	8001f8c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	e000      	b.n	8001f8e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001f8c:	2300      	movs	r3, #0
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	3718      	adds	r7, #24
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	40023800 	.word	0x40023800

08001f9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b084      	sub	sp, #16
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
 8001fa4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d101      	bne.n	8001fb0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fac:	2301      	movs	r3, #1
 8001fae:	e0cc      	b.n	800214a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001fb0:	4b68      	ldr	r3, [pc, #416]	; (8002154 <HAL_RCC_ClockConfig+0x1b8>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f003 0307 	and.w	r3, r3, #7
 8001fb8:	683a      	ldr	r2, [r7, #0]
 8001fba:	429a      	cmp	r2, r3
 8001fbc:	d90c      	bls.n	8001fd8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fbe:	4b65      	ldr	r3, [pc, #404]	; (8002154 <HAL_RCC_ClockConfig+0x1b8>)
 8001fc0:	683a      	ldr	r2, [r7, #0]
 8001fc2:	b2d2      	uxtb	r2, r2
 8001fc4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fc6:	4b63      	ldr	r3, [pc, #396]	; (8002154 <HAL_RCC_ClockConfig+0x1b8>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f003 0307 	and.w	r3, r3, #7
 8001fce:	683a      	ldr	r2, [r7, #0]
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	d001      	beq.n	8001fd8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	e0b8      	b.n	800214a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 0302 	and.w	r3, r3, #2
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d020      	beq.n	8002026 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f003 0304 	and.w	r3, r3, #4
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d005      	beq.n	8001ffc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ff0:	4b59      	ldr	r3, [pc, #356]	; (8002158 <HAL_RCC_ClockConfig+0x1bc>)
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	4a58      	ldr	r2, [pc, #352]	; (8002158 <HAL_RCC_ClockConfig+0x1bc>)
 8001ff6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001ffa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f003 0308 	and.w	r3, r3, #8
 8002004:	2b00      	cmp	r3, #0
 8002006:	d005      	beq.n	8002014 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002008:	4b53      	ldr	r3, [pc, #332]	; (8002158 <HAL_RCC_ClockConfig+0x1bc>)
 800200a:	689b      	ldr	r3, [r3, #8]
 800200c:	4a52      	ldr	r2, [pc, #328]	; (8002158 <HAL_RCC_ClockConfig+0x1bc>)
 800200e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002012:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002014:	4b50      	ldr	r3, [pc, #320]	; (8002158 <HAL_RCC_ClockConfig+0x1bc>)
 8002016:	689b      	ldr	r3, [r3, #8]
 8002018:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	689b      	ldr	r3, [r3, #8]
 8002020:	494d      	ldr	r1, [pc, #308]	; (8002158 <HAL_RCC_ClockConfig+0x1bc>)
 8002022:	4313      	orrs	r3, r2
 8002024:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f003 0301 	and.w	r3, r3, #1
 800202e:	2b00      	cmp	r3, #0
 8002030:	d044      	beq.n	80020bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	2b01      	cmp	r3, #1
 8002038:	d107      	bne.n	800204a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800203a:	4b47      	ldr	r3, [pc, #284]	; (8002158 <HAL_RCC_ClockConfig+0x1bc>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002042:	2b00      	cmp	r3, #0
 8002044:	d119      	bne.n	800207a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	e07f      	b.n	800214a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	2b02      	cmp	r3, #2
 8002050:	d003      	beq.n	800205a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002056:	2b03      	cmp	r3, #3
 8002058:	d107      	bne.n	800206a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800205a:	4b3f      	ldr	r3, [pc, #252]	; (8002158 <HAL_RCC_ClockConfig+0x1bc>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002062:	2b00      	cmp	r3, #0
 8002064:	d109      	bne.n	800207a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	e06f      	b.n	800214a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800206a:	4b3b      	ldr	r3, [pc, #236]	; (8002158 <HAL_RCC_ClockConfig+0x1bc>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f003 0302 	and.w	r3, r3, #2
 8002072:	2b00      	cmp	r3, #0
 8002074:	d101      	bne.n	800207a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002076:	2301      	movs	r3, #1
 8002078:	e067      	b.n	800214a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800207a:	4b37      	ldr	r3, [pc, #220]	; (8002158 <HAL_RCC_ClockConfig+0x1bc>)
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	f023 0203 	bic.w	r2, r3, #3
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	4934      	ldr	r1, [pc, #208]	; (8002158 <HAL_RCC_ClockConfig+0x1bc>)
 8002088:	4313      	orrs	r3, r2
 800208a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800208c:	f7fe fd38 	bl	8000b00 <HAL_GetTick>
 8002090:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002092:	e00a      	b.n	80020aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002094:	f7fe fd34 	bl	8000b00 <HAL_GetTick>
 8002098:	4602      	mov	r2, r0
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	1ad3      	subs	r3, r2, r3
 800209e:	f241 3288 	movw	r2, #5000	; 0x1388
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d901      	bls.n	80020aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80020a6:	2303      	movs	r3, #3
 80020a8:	e04f      	b.n	800214a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020aa:	4b2b      	ldr	r3, [pc, #172]	; (8002158 <HAL_RCC_ClockConfig+0x1bc>)
 80020ac:	689b      	ldr	r3, [r3, #8]
 80020ae:	f003 020c 	and.w	r2, r3, #12
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	009b      	lsls	r3, r3, #2
 80020b8:	429a      	cmp	r2, r3
 80020ba:	d1eb      	bne.n	8002094 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80020bc:	4b25      	ldr	r3, [pc, #148]	; (8002154 <HAL_RCC_ClockConfig+0x1b8>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f003 0307 	and.w	r3, r3, #7
 80020c4:	683a      	ldr	r2, [r7, #0]
 80020c6:	429a      	cmp	r2, r3
 80020c8:	d20c      	bcs.n	80020e4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020ca:	4b22      	ldr	r3, [pc, #136]	; (8002154 <HAL_RCC_ClockConfig+0x1b8>)
 80020cc:	683a      	ldr	r2, [r7, #0]
 80020ce:	b2d2      	uxtb	r2, r2
 80020d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020d2:	4b20      	ldr	r3, [pc, #128]	; (8002154 <HAL_RCC_ClockConfig+0x1b8>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 0307 	and.w	r3, r3, #7
 80020da:	683a      	ldr	r2, [r7, #0]
 80020dc:	429a      	cmp	r2, r3
 80020de:	d001      	beq.n	80020e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80020e0:	2301      	movs	r3, #1
 80020e2:	e032      	b.n	800214a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f003 0304 	and.w	r3, r3, #4
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d008      	beq.n	8002102 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020f0:	4b19      	ldr	r3, [pc, #100]	; (8002158 <HAL_RCC_ClockConfig+0x1bc>)
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	68db      	ldr	r3, [r3, #12]
 80020fc:	4916      	ldr	r1, [pc, #88]	; (8002158 <HAL_RCC_ClockConfig+0x1bc>)
 80020fe:	4313      	orrs	r3, r2
 8002100:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f003 0308 	and.w	r3, r3, #8
 800210a:	2b00      	cmp	r3, #0
 800210c:	d009      	beq.n	8002122 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800210e:	4b12      	ldr	r3, [pc, #72]	; (8002158 <HAL_RCC_ClockConfig+0x1bc>)
 8002110:	689b      	ldr	r3, [r3, #8]
 8002112:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	691b      	ldr	r3, [r3, #16]
 800211a:	00db      	lsls	r3, r3, #3
 800211c:	490e      	ldr	r1, [pc, #56]	; (8002158 <HAL_RCC_ClockConfig+0x1bc>)
 800211e:	4313      	orrs	r3, r2
 8002120:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002122:	f000 f821 	bl	8002168 <HAL_RCC_GetSysClockFreq>
 8002126:	4602      	mov	r2, r0
 8002128:	4b0b      	ldr	r3, [pc, #44]	; (8002158 <HAL_RCC_ClockConfig+0x1bc>)
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	091b      	lsrs	r3, r3, #4
 800212e:	f003 030f 	and.w	r3, r3, #15
 8002132:	490a      	ldr	r1, [pc, #40]	; (800215c <HAL_RCC_ClockConfig+0x1c0>)
 8002134:	5ccb      	ldrb	r3, [r1, r3]
 8002136:	fa22 f303 	lsr.w	r3, r2, r3
 800213a:	4a09      	ldr	r2, [pc, #36]	; (8002160 <HAL_RCC_ClockConfig+0x1c4>)
 800213c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800213e:	4b09      	ldr	r3, [pc, #36]	; (8002164 <HAL_RCC_ClockConfig+0x1c8>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4618      	mov	r0, r3
 8002144:	f7fe fc98 	bl	8000a78 <HAL_InitTick>

  return HAL_OK;
 8002148:	2300      	movs	r3, #0
}
 800214a:	4618      	mov	r0, r3
 800214c:	3710      	adds	r7, #16
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	40023c00 	.word	0x40023c00
 8002158:	40023800 	.word	0x40023800
 800215c:	08004f08 	.word	0x08004f08
 8002160:	20000000 	.word	0x20000000
 8002164:	20000004 	.word	0x20000004

08002168 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002168:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800216c:	b090      	sub	sp, #64	; 0x40
 800216e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002170:	2300      	movs	r3, #0
 8002172:	637b      	str	r3, [r7, #52]	; 0x34
 8002174:	2300      	movs	r3, #0
 8002176:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002178:	2300      	movs	r3, #0
 800217a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800217c:	2300      	movs	r3, #0
 800217e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002180:	4b59      	ldr	r3, [pc, #356]	; (80022e8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002182:	689b      	ldr	r3, [r3, #8]
 8002184:	f003 030c 	and.w	r3, r3, #12
 8002188:	2b08      	cmp	r3, #8
 800218a:	d00d      	beq.n	80021a8 <HAL_RCC_GetSysClockFreq+0x40>
 800218c:	2b08      	cmp	r3, #8
 800218e:	f200 80a1 	bhi.w	80022d4 <HAL_RCC_GetSysClockFreq+0x16c>
 8002192:	2b00      	cmp	r3, #0
 8002194:	d002      	beq.n	800219c <HAL_RCC_GetSysClockFreq+0x34>
 8002196:	2b04      	cmp	r3, #4
 8002198:	d003      	beq.n	80021a2 <HAL_RCC_GetSysClockFreq+0x3a>
 800219a:	e09b      	b.n	80022d4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800219c:	4b53      	ldr	r3, [pc, #332]	; (80022ec <HAL_RCC_GetSysClockFreq+0x184>)
 800219e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80021a0:	e09b      	b.n	80022da <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80021a2:	4b53      	ldr	r3, [pc, #332]	; (80022f0 <HAL_RCC_GetSysClockFreq+0x188>)
 80021a4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80021a6:	e098      	b.n	80022da <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80021a8:	4b4f      	ldr	r3, [pc, #316]	; (80022e8 <HAL_RCC_GetSysClockFreq+0x180>)
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80021b0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80021b2:	4b4d      	ldr	r3, [pc, #308]	; (80022e8 <HAL_RCC_GetSysClockFreq+0x180>)
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d028      	beq.n	8002210 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021be:	4b4a      	ldr	r3, [pc, #296]	; (80022e8 <HAL_RCC_GetSysClockFreq+0x180>)
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	099b      	lsrs	r3, r3, #6
 80021c4:	2200      	movs	r2, #0
 80021c6:	623b      	str	r3, [r7, #32]
 80021c8:	627a      	str	r2, [r7, #36]	; 0x24
 80021ca:	6a3b      	ldr	r3, [r7, #32]
 80021cc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80021d0:	2100      	movs	r1, #0
 80021d2:	4b47      	ldr	r3, [pc, #284]	; (80022f0 <HAL_RCC_GetSysClockFreq+0x188>)
 80021d4:	fb03 f201 	mul.w	r2, r3, r1
 80021d8:	2300      	movs	r3, #0
 80021da:	fb00 f303 	mul.w	r3, r0, r3
 80021de:	4413      	add	r3, r2
 80021e0:	4a43      	ldr	r2, [pc, #268]	; (80022f0 <HAL_RCC_GetSysClockFreq+0x188>)
 80021e2:	fba0 1202 	umull	r1, r2, r0, r2
 80021e6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80021e8:	460a      	mov	r2, r1
 80021ea:	62ba      	str	r2, [r7, #40]	; 0x28
 80021ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80021ee:	4413      	add	r3, r2
 80021f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80021f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021f4:	2200      	movs	r2, #0
 80021f6:	61bb      	str	r3, [r7, #24]
 80021f8:	61fa      	str	r2, [r7, #28]
 80021fa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80021fe:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002202:	f7fd ffed 	bl	80001e0 <__aeabi_uldivmod>
 8002206:	4602      	mov	r2, r0
 8002208:	460b      	mov	r3, r1
 800220a:	4613      	mov	r3, r2
 800220c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800220e:	e053      	b.n	80022b8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002210:	4b35      	ldr	r3, [pc, #212]	; (80022e8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	099b      	lsrs	r3, r3, #6
 8002216:	2200      	movs	r2, #0
 8002218:	613b      	str	r3, [r7, #16]
 800221a:	617a      	str	r2, [r7, #20]
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002222:	f04f 0b00 	mov.w	fp, #0
 8002226:	4652      	mov	r2, sl
 8002228:	465b      	mov	r3, fp
 800222a:	f04f 0000 	mov.w	r0, #0
 800222e:	f04f 0100 	mov.w	r1, #0
 8002232:	0159      	lsls	r1, r3, #5
 8002234:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002238:	0150      	lsls	r0, r2, #5
 800223a:	4602      	mov	r2, r0
 800223c:	460b      	mov	r3, r1
 800223e:	ebb2 080a 	subs.w	r8, r2, sl
 8002242:	eb63 090b 	sbc.w	r9, r3, fp
 8002246:	f04f 0200 	mov.w	r2, #0
 800224a:	f04f 0300 	mov.w	r3, #0
 800224e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002252:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002256:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800225a:	ebb2 0408 	subs.w	r4, r2, r8
 800225e:	eb63 0509 	sbc.w	r5, r3, r9
 8002262:	f04f 0200 	mov.w	r2, #0
 8002266:	f04f 0300 	mov.w	r3, #0
 800226a:	00eb      	lsls	r3, r5, #3
 800226c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002270:	00e2      	lsls	r2, r4, #3
 8002272:	4614      	mov	r4, r2
 8002274:	461d      	mov	r5, r3
 8002276:	eb14 030a 	adds.w	r3, r4, sl
 800227a:	603b      	str	r3, [r7, #0]
 800227c:	eb45 030b 	adc.w	r3, r5, fp
 8002280:	607b      	str	r3, [r7, #4]
 8002282:	f04f 0200 	mov.w	r2, #0
 8002286:	f04f 0300 	mov.w	r3, #0
 800228a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800228e:	4629      	mov	r1, r5
 8002290:	028b      	lsls	r3, r1, #10
 8002292:	4621      	mov	r1, r4
 8002294:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002298:	4621      	mov	r1, r4
 800229a:	028a      	lsls	r2, r1, #10
 800229c:	4610      	mov	r0, r2
 800229e:	4619      	mov	r1, r3
 80022a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022a2:	2200      	movs	r2, #0
 80022a4:	60bb      	str	r3, [r7, #8]
 80022a6:	60fa      	str	r2, [r7, #12]
 80022a8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80022ac:	f7fd ff98 	bl	80001e0 <__aeabi_uldivmod>
 80022b0:	4602      	mov	r2, r0
 80022b2:	460b      	mov	r3, r1
 80022b4:	4613      	mov	r3, r2
 80022b6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80022b8:	4b0b      	ldr	r3, [pc, #44]	; (80022e8 <HAL_RCC_GetSysClockFreq+0x180>)
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	0c1b      	lsrs	r3, r3, #16
 80022be:	f003 0303 	and.w	r3, r3, #3
 80022c2:	3301      	adds	r3, #1
 80022c4:	005b      	lsls	r3, r3, #1
 80022c6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80022c8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80022ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80022d0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80022d2:	e002      	b.n	80022da <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80022d4:	4b05      	ldr	r3, [pc, #20]	; (80022ec <HAL_RCC_GetSysClockFreq+0x184>)
 80022d6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80022d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80022dc:	4618      	mov	r0, r3
 80022de:	3740      	adds	r7, #64	; 0x40
 80022e0:	46bd      	mov	sp, r7
 80022e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80022e6:	bf00      	nop
 80022e8:	40023800 	.word	0x40023800
 80022ec:	00f42400 	.word	0x00f42400
 80022f0:	017d7840 	.word	0x017d7840

080022f4 <__NVIC_SetPriority>:
{
 80022f4:	b480      	push	{r7}
 80022f6:	b083      	sub	sp, #12
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	4603      	mov	r3, r0
 80022fc:	6039      	str	r1, [r7, #0]
 80022fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002300:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002304:	2b00      	cmp	r3, #0
 8002306:	db0a      	blt.n	800231e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	b2da      	uxtb	r2, r3
 800230c:	490c      	ldr	r1, [pc, #48]	; (8002340 <__NVIC_SetPriority+0x4c>)
 800230e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002312:	0112      	lsls	r2, r2, #4
 8002314:	b2d2      	uxtb	r2, r2
 8002316:	440b      	add	r3, r1
 8002318:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800231c:	e00a      	b.n	8002334 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	b2da      	uxtb	r2, r3
 8002322:	4908      	ldr	r1, [pc, #32]	; (8002344 <__NVIC_SetPriority+0x50>)
 8002324:	79fb      	ldrb	r3, [r7, #7]
 8002326:	f003 030f 	and.w	r3, r3, #15
 800232a:	3b04      	subs	r3, #4
 800232c:	0112      	lsls	r2, r2, #4
 800232e:	b2d2      	uxtb	r2, r2
 8002330:	440b      	add	r3, r1
 8002332:	761a      	strb	r2, [r3, #24]
}
 8002334:	bf00      	nop
 8002336:	370c      	adds	r7, #12
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr
 8002340:	e000e100 	.word	0xe000e100
 8002344:	e000ed00 	.word	0xe000ed00

08002348 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8002348:	b580      	push	{r7, lr}
 800234a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800234c:	2100      	movs	r1, #0
 800234e:	f06f 0004 	mvn.w	r0, #4
 8002352:	f7ff ffcf 	bl	80022f4 <__NVIC_SetPriority>
#endif
}
 8002356:	bf00      	nop
 8002358:	bd80      	pop	{r7, pc}
	...

0800235c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800235c:	b480      	push	{r7}
 800235e:	b083      	sub	sp, #12
 8002360:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002362:	f3ef 8305 	mrs	r3, IPSR
 8002366:	603b      	str	r3, [r7, #0]
  return(result);
 8002368:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800236a:	2b00      	cmp	r3, #0
 800236c:	d003      	beq.n	8002376 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800236e:	f06f 0305 	mvn.w	r3, #5
 8002372:	607b      	str	r3, [r7, #4]
 8002374:	e00c      	b.n	8002390 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002376:	4b0a      	ldr	r3, [pc, #40]	; (80023a0 <osKernelInitialize+0x44>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d105      	bne.n	800238a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800237e:	4b08      	ldr	r3, [pc, #32]	; (80023a0 <osKernelInitialize+0x44>)
 8002380:	2201      	movs	r2, #1
 8002382:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002384:	2300      	movs	r3, #0
 8002386:	607b      	str	r3, [r7, #4]
 8002388:	e002      	b.n	8002390 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800238a:	f04f 33ff 	mov.w	r3, #4294967295
 800238e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002390:	687b      	ldr	r3, [r7, #4]
}
 8002392:	4618      	mov	r0, r3
 8002394:	370c      	adds	r7, #12
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr
 800239e:	bf00      	nop
 80023a0:	20000084 	.word	0x20000084

080023a4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b082      	sub	sp, #8
 80023a8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80023aa:	f3ef 8305 	mrs	r3, IPSR
 80023ae:	603b      	str	r3, [r7, #0]
  return(result);
 80023b0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d003      	beq.n	80023be <osKernelStart+0x1a>
    stat = osErrorISR;
 80023b6:	f06f 0305 	mvn.w	r3, #5
 80023ba:	607b      	str	r3, [r7, #4]
 80023bc:	e010      	b.n	80023e0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80023be:	4b0b      	ldr	r3, [pc, #44]	; (80023ec <osKernelStart+0x48>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	2b01      	cmp	r3, #1
 80023c4:	d109      	bne.n	80023da <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80023c6:	f7ff ffbf 	bl	8002348 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80023ca:	4b08      	ldr	r3, [pc, #32]	; (80023ec <osKernelStart+0x48>)
 80023cc:	2202      	movs	r2, #2
 80023ce:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80023d0:	f001 f866 	bl	80034a0 <vTaskStartScheduler>
      stat = osOK;
 80023d4:	2300      	movs	r3, #0
 80023d6:	607b      	str	r3, [r7, #4]
 80023d8:	e002      	b.n	80023e0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80023da:	f04f 33ff 	mov.w	r3, #4294967295
 80023de:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80023e0:	687b      	ldr	r3, [r7, #4]
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	3708      	adds	r7, #8
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	bf00      	nop
 80023ec:	20000084 	.word	0x20000084

080023f0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b08e      	sub	sp, #56	; 0x38
 80023f4:	af04      	add	r7, sp, #16
 80023f6:	60f8      	str	r0, [r7, #12]
 80023f8:	60b9      	str	r1, [r7, #8]
 80023fa:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80023fc:	2300      	movs	r3, #0
 80023fe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002400:	f3ef 8305 	mrs	r3, IPSR
 8002404:	617b      	str	r3, [r7, #20]
  return(result);
 8002406:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8002408:	2b00      	cmp	r3, #0
 800240a:	d17e      	bne.n	800250a <osThreadNew+0x11a>
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d07b      	beq.n	800250a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8002412:	2380      	movs	r3, #128	; 0x80
 8002414:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8002416:	2318      	movs	r3, #24
 8002418:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800241a:	2300      	movs	r3, #0
 800241c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800241e:	f04f 33ff 	mov.w	r3, #4294967295
 8002422:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d045      	beq.n	80024b6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d002      	beq.n	8002438 <osThreadNew+0x48>
        name = attr->name;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	699b      	ldr	r3, [r3, #24]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d002      	beq.n	8002446 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	699b      	ldr	r3, [r3, #24]
 8002444:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002446:	69fb      	ldr	r3, [r7, #28]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d008      	beq.n	800245e <osThreadNew+0x6e>
 800244c:	69fb      	ldr	r3, [r7, #28]
 800244e:	2b38      	cmp	r3, #56	; 0x38
 8002450:	d805      	bhi.n	800245e <osThreadNew+0x6e>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	f003 0301 	and.w	r3, r3, #1
 800245a:	2b00      	cmp	r3, #0
 800245c:	d001      	beq.n	8002462 <osThreadNew+0x72>
        return (NULL);
 800245e:	2300      	movs	r3, #0
 8002460:	e054      	b.n	800250c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	695b      	ldr	r3, [r3, #20]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d003      	beq.n	8002472 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	695b      	ldr	r3, [r3, #20]
 800246e:	089b      	lsrs	r3, r3, #2
 8002470:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d00e      	beq.n	8002498 <osThreadNew+0xa8>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	68db      	ldr	r3, [r3, #12]
 800247e:	2b5b      	cmp	r3, #91	; 0x5b
 8002480:	d90a      	bls.n	8002498 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002486:	2b00      	cmp	r3, #0
 8002488:	d006      	beq.n	8002498 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	695b      	ldr	r3, [r3, #20]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d002      	beq.n	8002498 <osThreadNew+0xa8>
        mem = 1;
 8002492:	2301      	movs	r3, #1
 8002494:	61bb      	str	r3, [r7, #24]
 8002496:	e010      	b.n	80024ba <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d10c      	bne.n	80024ba <osThreadNew+0xca>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	68db      	ldr	r3, [r3, #12]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d108      	bne.n	80024ba <osThreadNew+0xca>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	691b      	ldr	r3, [r3, #16]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d104      	bne.n	80024ba <osThreadNew+0xca>
          mem = 0;
 80024b0:	2300      	movs	r3, #0
 80024b2:	61bb      	str	r3, [r7, #24]
 80024b4:	e001      	b.n	80024ba <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80024b6:	2300      	movs	r3, #0
 80024b8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80024ba:	69bb      	ldr	r3, [r7, #24]
 80024bc:	2b01      	cmp	r3, #1
 80024be:	d110      	bne.n	80024e2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80024c4:	687a      	ldr	r2, [r7, #4]
 80024c6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80024c8:	9202      	str	r2, [sp, #8]
 80024ca:	9301      	str	r3, [sp, #4]
 80024cc:	69fb      	ldr	r3, [r7, #28]
 80024ce:	9300      	str	r3, [sp, #0]
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	6a3a      	ldr	r2, [r7, #32]
 80024d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80024d6:	68f8      	ldr	r0, [r7, #12]
 80024d8:	f000 fe0c 	bl	80030f4 <xTaskCreateStatic>
 80024dc:	4603      	mov	r3, r0
 80024de:	613b      	str	r3, [r7, #16]
 80024e0:	e013      	b.n	800250a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80024e2:	69bb      	ldr	r3, [r7, #24]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d110      	bne.n	800250a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80024e8:	6a3b      	ldr	r3, [r7, #32]
 80024ea:	b29a      	uxth	r2, r3
 80024ec:	f107 0310 	add.w	r3, r7, #16
 80024f0:	9301      	str	r3, [sp, #4]
 80024f2:	69fb      	ldr	r3, [r7, #28]
 80024f4:	9300      	str	r3, [sp, #0]
 80024f6:	68bb      	ldr	r3, [r7, #8]
 80024f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80024fa:	68f8      	ldr	r0, [r7, #12]
 80024fc:	f000 fe57 	bl	80031ae <xTaskCreate>
 8002500:	4603      	mov	r3, r0
 8002502:	2b01      	cmp	r3, #1
 8002504:	d001      	beq.n	800250a <osThreadNew+0x11a>
            hTask = NULL;
 8002506:	2300      	movs	r3, #0
 8002508:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800250a:	693b      	ldr	r3, [r7, #16]
}
 800250c:	4618      	mov	r0, r3
 800250e:	3728      	adds	r7, #40	; 0x28
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}

08002514 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8002514:	b580      	push	{r7, lr}
 8002516:	b084      	sub	sp, #16
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800251c:	f3ef 8305 	mrs	r3, IPSR
 8002520:	60bb      	str	r3, [r7, #8]
  return(result);
 8002522:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002524:	2b00      	cmp	r3, #0
 8002526:	d003      	beq.n	8002530 <osDelay+0x1c>
    stat = osErrorISR;
 8002528:	f06f 0305 	mvn.w	r3, #5
 800252c:	60fb      	str	r3, [r7, #12]
 800252e:	e007      	b.n	8002540 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8002530:	2300      	movs	r3, #0
 8002532:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d002      	beq.n	8002540 <osDelay+0x2c>
      vTaskDelay(ticks);
 800253a:	6878      	ldr	r0, [r7, #4]
 800253c:	f000 ff7c 	bl	8003438 <vTaskDelay>
    }
  }

  return (stat);
 8002540:	68fb      	ldr	r3, [r7, #12]
}
 8002542:	4618      	mov	r0, r3
 8002544:	3710      	adds	r7, #16
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}
	...

0800254c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800254c:	b480      	push	{r7}
 800254e:	b085      	sub	sp, #20
 8002550:	af00      	add	r7, sp, #0
 8002552:	60f8      	str	r0, [r7, #12]
 8002554:	60b9      	str	r1, [r7, #8]
 8002556:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	4a07      	ldr	r2, [pc, #28]	; (8002578 <vApplicationGetIdleTaskMemory+0x2c>)
 800255c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	4a06      	ldr	r2, [pc, #24]	; (800257c <vApplicationGetIdleTaskMemory+0x30>)
 8002562:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2280      	movs	r2, #128	; 0x80
 8002568:	601a      	str	r2, [r3, #0]
}
 800256a:	bf00      	nop
 800256c:	3714      	adds	r7, #20
 800256e:	46bd      	mov	sp, r7
 8002570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002574:	4770      	bx	lr
 8002576:	bf00      	nop
 8002578:	20000088 	.word	0x20000088
 800257c:	200000e4 	.word	0x200000e4

08002580 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002580:	b480      	push	{r7}
 8002582:	b085      	sub	sp, #20
 8002584:	af00      	add	r7, sp, #0
 8002586:	60f8      	str	r0, [r7, #12]
 8002588:	60b9      	str	r1, [r7, #8]
 800258a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	4a07      	ldr	r2, [pc, #28]	; (80025ac <vApplicationGetTimerTaskMemory+0x2c>)
 8002590:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002592:	68bb      	ldr	r3, [r7, #8]
 8002594:	4a06      	ldr	r2, [pc, #24]	; (80025b0 <vApplicationGetTimerTaskMemory+0x30>)
 8002596:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800259e:	601a      	str	r2, [r3, #0]
}
 80025a0:	bf00      	nop
 80025a2:	3714      	adds	r7, #20
 80025a4:	46bd      	mov	sp, r7
 80025a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025aa:	4770      	bx	lr
 80025ac:	200002e4 	.word	0x200002e4
 80025b0:	20000340 	.word	0x20000340

080025b4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80025b4:	b480      	push	{r7}
 80025b6:	b083      	sub	sp, #12
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	f103 0208 	add.w	r2, r3, #8
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	f04f 32ff 	mov.w	r2, #4294967295
 80025cc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	f103 0208 	add.w	r2, r3, #8
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	f103 0208 	add.w	r2, r3, #8
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2200      	movs	r2, #0
 80025e6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80025e8:	bf00      	nop
 80025ea:	370c      	adds	r7, #12
 80025ec:	46bd      	mov	sp, r7
 80025ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f2:	4770      	bx	lr

080025f4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80025f4:	b480      	push	{r7}
 80025f6:	b083      	sub	sp, #12
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2200      	movs	r2, #0
 8002600:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002602:	bf00      	nop
 8002604:	370c      	adds	r7, #12
 8002606:	46bd      	mov	sp, r7
 8002608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260c:	4770      	bx	lr

0800260e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800260e:	b480      	push	{r7}
 8002610:	b085      	sub	sp, #20
 8002612:	af00      	add	r7, sp, #0
 8002614:	6078      	str	r0, [r7, #4]
 8002616:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	68fa      	ldr	r2, [r7, #12]
 8002622:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	689a      	ldr	r2, [r3, #8]
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	683a      	ldr	r2, [r7, #0]
 8002632:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	683a      	ldr	r2, [r7, #0]
 8002638:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	687a      	ldr	r2, [r7, #4]
 800263e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	1c5a      	adds	r2, r3, #1
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	601a      	str	r2, [r3, #0]
}
 800264a:	bf00      	nop
 800264c:	3714      	adds	r7, #20
 800264e:	46bd      	mov	sp, r7
 8002650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002654:	4770      	bx	lr

08002656 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002656:	b480      	push	{r7}
 8002658:	b085      	sub	sp, #20
 800265a:	af00      	add	r7, sp, #0
 800265c:	6078      	str	r0, [r7, #4]
 800265e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002666:	68bb      	ldr	r3, [r7, #8]
 8002668:	f1b3 3fff 	cmp.w	r3, #4294967295
 800266c:	d103      	bne.n	8002676 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	691b      	ldr	r3, [r3, #16]
 8002672:	60fb      	str	r3, [r7, #12]
 8002674:	e00c      	b.n	8002690 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	3308      	adds	r3, #8
 800267a:	60fb      	str	r3, [r7, #12]
 800267c:	e002      	b.n	8002684 <vListInsert+0x2e>
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	60fb      	str	r3, [r7, #12]
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	68ba      	ldr	r2, [r7, #8]
 800268c:	429a      	cmp	r2, r3
 800268e:	d2f6      	bcs.n	800267e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	685a      	ldr	r2, [r3, #4]
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	683a      	ldr	r2, [r7, #0]
 800269e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	68fa      	ldr	r2, [r7, #12]
 80026a4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	683a      	ldr	r2, [r7, #0]
 80026aa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	687a      	ldr	r2, [r7, #4]
 80026b0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	1c5a      	adds	r2, r3, #1
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	601a      	str	r2, [r3, #0]
}
 80026bc:	bf00      	nop
 80026be:	3714      	adds	r7, #20
 80026c0:	46bd      	mov	sp, r7
 80026c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c6:	4770      	bx	lr

080026c8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80026c8:	b480      	push	{r7}
 80026ca:	b085      	sub	sp, #20
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	691b      	ldr	r3, [r3, #16]
 80026d4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	687a      	ldr	r2, [r7, #4]
 80026dc:	6892      	ldr	r2, [r2, #8]
 80026de:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	687a      	ldr	r2, [r7, #4]
 80026e6:	6852      	ldr	r2, [r2, #4]
 80026e8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	687a      	ldr	r2, [r7, #4]
 80026f0:	429a      	cmp	r2, r3
 80026f2:	d103      	bne.n	80026fc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	689a      	ldr	r2, [r3, #8]
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2200      	movs	r2, #0
 8002700:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	1e5a      	subs	r2, r3, #1
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
}
 8002710:	4618      	mov	r0, r3
 8002712:	3714      	adds	r7, #20
 8002714:	46bd      	mov	sp, r7
 8002716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271a:	4770      	bx	lr

0800271c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b084      	sub	sp, #16
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
 8002724:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d10a      	bne.n	8002746 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002730:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002734:	f383 8811 	msr	BASEPRI, r3
 8002738:	f3bf 8f6f 	isb	sy
 800273c:	f3bf 8f4f 	dsb	sy
 8002740:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002742:	bf00      	nop
 8002744:	e7fe      	b.n	8002744 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002746:	f002 f84d 	bl	80047e4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681a      	ldr	r2, [r3, #0]
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002752:	68f9      	ldr	r1, [r7, #12]
 8002754:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002756:	fb01 f303 	mul.w	r3, r1, r3
 800275a:	441a      	add	r2, r3
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	2200      	movs	r2, #0
 8002764:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002776:	3b01      	subs	r3, #1
 8002778:	68f9      	ldr	r1, [r7, #12]
 800277a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800277c:	fb01 f303 	mul.w	r3, r1, r3
 8002780:	441a      	add	r2, r3
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	22ff      	movs	r2, #255	; 0xff
 800278a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	22ff      	movs	r2, #255	; 0xff
 8002792:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d114      	bne.n	80027c6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	691b      	ldr	r3, [r3, #16]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d01a      	beq.n	80027da <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	3310      	adds	r3, #16
 80027a8:	4618      	mov	r0, r3
 80027aa:	f001 f903 	bl	80039b4 <xTaskRemoveFromEventList>
 80027ae:	4603      	mov	r3, r0
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d012      	beq.n	80027da <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80027b4:	4b0c      	ldr	r3, [pc, #48]	; (80027e8 <xQueueGenericReset+0xcc>)
 80027b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80027ba:	601a      	str	r2, [r3, #0]
 80027bc:	f3bf 8f4f 	dsb	sy
 80027c0:	f3bf 8f6f 	isb	sy
 80027c4:	e009      	b.n	80027da <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	3310      	adds	r3, #16
 80027ca:	4618      	mov	r0, r3
 80027cc:	f7ff fef2 	bl	80025b4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	3324      	adds	r3, #36	; 0x24
 80027d4:	4618      	mov	r0, r3
 80027d6:	f7ff feed 	bl	80025b4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80027da:	f002 f833 	bl	8004844 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80027de:	2301      	movs	r3, #1
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	3710      	adds	r7, #16
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	e000ed04 	.word	0xe000ed04

080027ec <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b08e      	sub	sp, #56	; 0x38
 80027f0:	af02      	add	r7, sp, #8
 80027f2:	60f8      	str	r0, [r7, #12]
 80027f4:	60b9      	str	r1, [r7, #8]
 80027f6:	607a      	str	r2, [r7, #4]
 80027f8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d10a      	bne.n	8002816 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002804:	f383 8811 	msr	BASEPRI, r3
 8002808:	f3bf 8f6f 	isb	sy
 800280c:	f3bf 8f4f 	dsb	sy
 8002810:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002812:	bf00      	nop
 8002814:	e7fe      	b.n	8002814 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d10a      	bne.n	8002832 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800281c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002820:	f383 8811 	msr	BASEPRI, r3
 8002824:	f3bf 8f6f 	isb	sy
 8002828:	f3bf 8f4f 	dsb	sy
 800282c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800282e:	bf00      	nop
 8002830:	e7fe      	b.n	8002830 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d002      	beq.n	800283e <xQueueGenericCreateStatic+0x52>
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d001      	beq.n	8002842 <xQueueGenericCreateStatic+0x56>
 800283e:	2301      	movs	r3, #1
 8002840:	e000      	b.n	8002844 <xQueueGenericCreateStatic+0x58>
 8002842:	2300      	movs	r3, #0
 8002844:	2b00      	cmp	r3, #0
 8002846:	d10a      	bne.n	800285e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002848:	f04f 0350 	mov.w	r3, #80	; 0x50
 800284c:	f383 8811 	msr	BASEPRI, r3
 8002850:	f3bf 8f6f 	isb	sy
 8002854:	f3bf 8f4f 	dsb	sy
 8002858:	623b      	str	r3, [r7, #32]
}
 800285a:	bf00      	nop
 800285c:	e7fe      	b.n	800285c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d102      	bne.n	800286a <xQueueGenericCreateStatic+0x7e>
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d101      	bne.n	800286e <xQueueGenericCreateStatic+0x82>
 800286a:	2301      	movs	r3, #1
 800286c:	e000      	b.n	8002870 <xQueueGenericCreateStatic+0x84>
 800286e:	2300      	movs	r3, #0
 8002870:	2b00      	cmp	r3, #0
 8002872:	d10a      	bne.n	800288a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002874:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002878:	f383 8811 	msr	BASEPRI, r3
 800287c:	f3bf 8f6f 	isb	sy
 8002880:	f3bf 8f4f 	dsb	sy
 8002884:	61fb      	str	r3, [r7, #28]
}
 8002886:	bf00      	nop
 8002888:	e7fe      	b.n	8002888 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800288a:	2350      	movs	r3, #80	; 0x50
 800288c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	2b50      	cmp	r3, #80	; 0x50
 8002892:	d00a      	beq.n	80028aa <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002894:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002898:	f383 8811 	msr	BASEPRI, r3
 800289c:	f3bf 8f6f 	isb	sy
 80028a0:	f3bf 8f4f 	dsb	sy
 80028a4:	61bb      	str	r3, [r7, #24]
}
 80028a6:	bf00      	nop
 80028a8:	e7fe      	b.n	80028a8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80028aa:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80028b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d00d      	beq.n	80028d2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80028b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028b8:	2201      	movs	r2, #1
 80028ba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80028be:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80028c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028c4:	9300      	str	r3, [sp, #0]
 80028c6:	4613      	mov	r3, r2
 80028c8:	687a      	ldr	r2, [r7, #4]
 80028ca:	68b9      	ldr	r1, [r7, #8]
 80028cc:	68f8      	ldr	r0, [r7, #12]
 80028ce:	f000 f805 	bl	80028dc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80028d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80028d4:	4618      	mov	r0, r3
 80028d6:	3730      	adds	r7, #48	; 0x30
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}

080028dc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b084      	sub	sp, #16
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	60f8      	str	r0, [r7, #12]
 80028e4:	60b9      	str	r1, [r7, #8]
 80028e6:	607a      	str	r2, [r7, #4]
 80028e8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80028ea:	68bb      	ldr	r3, [r7, #8]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d103      	bne.n	80028f8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80028f0:	69bb      	ldr	r3, [r7, #24]
 80028f2:	69ba      	ldr	r2, [r7, #24]
 80028f4:	601a      	str	r2, [r3, #0]
 80028f6:	e002      	b.n	80028fe <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80028f8:	69bb      	ldr	r3, [r7, #24]
 80028fa:	687a      	ldr	r2, [r7, #4]
 80028fc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80028fe:	69bb      	ldr	r3, [r7, #24]
 8002900:	68fa      	ldr	r2, [r7, #12]
 8002902:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002904:	69bb      	ldr	r3, [r7, #24]
 8002906:	68ba      	ldr	r2, [r7, #8]
 8002908:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800290a:	2101      	movs	r1, #1
 800290c:	69b8      	ldr	r0, [r7, #24]
 800290e:	f7ff ff05 	bl	800271c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002912:	69bb      	ldr	r3, [r7, #24]
 8002914:	78fa      	ldrb	r2, [r7, #3]
 8002916:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800291a:	bf00      	nop
 800291c:	3710      	adds	r7, #16
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}
	...

08002924 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b08e      	sub	sp, #56	; 0x38
 8002928:	af00      	add	r7, sp, #0
 800292a:	60f8      	str	r0, [r7, #12]
 800292c:	60b9      	str	r1, [r7, #8]
 800292e:	607a      	str	r2, [r7, #4]
 8002930:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002932:	2300      	movs	r3, #0
 8002934:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800293a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800293c:	2b00      	cmp	r3, #0
 800293e:	d10a      	bne.n	8002956 <xQueueGenericSend+0x32>
	__asm volatile
 8002940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002944:	f383 8811 	msr	BASEPRI, r3
 8002948:	f3bf 8f6f 	isb	sy
 800294c:	f3bf 8f4f 	dsb	sy
 8002950:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002952:	bf00      	nop
 8002954:	e7fe      	b.n	8002954 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d103      	bne.n	8002964 <xQueueGenericSend+0x40>
 800295c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800295e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002960:	2b00      	cmp	r3, #0
 8002962:	d101      	bne.n	8002968 <xQueueGenericSend+0x44>
 8002964:	2301      	movs	r3, #1
 8002966:	e000      	b.n	800296a <xQueueGenericSend+0x46>
 8002968:	2300      	movs	r3, #0
 800296a:	2b00      	cmp	r3, #0
 800296c:	d10a      	bne.n	8002984 <xQueueGenericSend+0x60>
	__asm volatile
 800296e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002972:	f383 8811 	msr	BASEPRI, r3
 8002976:	f3bf 8f6f 	isb	sy
 800297a:	f3bf 8f4f 	dsb	sy
 800297e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002980:	bf00      	nop
 8002982:	e7fe      	b.n	8002982 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	2b02      	cmp	r3, #2
 8002988:	d103      	bne.n	8002992 <xQueueGenericSend+0x6e>
 800298a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800298c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800298e:	2b01      	cmp	r3, #1
 8002990:	d101      	bne.n	8002996 <xQueueGenericSend+0x72>
 8002992:	2301      	movs	r3, #1
 8002994:	e000      	b.n	8002998 <xQueueGenericSend+0x74>
 8002996:	2300      	movs	r3, #0
 8002998:	2b00      	cmp	r3, #0
 800299a:	d10a      	bne.n	80029b2 <xQueueGenericSend+0x8e>
	__asm volatile
 800299c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029a0:	f383 8811 	msr	BASEPRI, r3
 80029a4:	f3bf 8f6f 	isb	sy
 80029a8:	f3bf 8f4f 	dsb	sy
 80029ac:	623b      	str	r3, [r7, #32]
}
 80029ae:	bf00      	nop
 80029b0:	e7fe      	b.n	80029b0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80029b2:	f001 f9bd 	bl	8003d30 <xTaskGetSchedulerState>
 80029b6:	4603      	mov	r3, r0
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d102      	bne.n	80029c2 <xQueueGenericSend+0x9e>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d101      	bne.n	80029c6 <xQueueGenericSend+0xa2>
 80029c2:	2301      	movs	r3, #1
 80029c4:	e000      	b.n	80029c8 <xQueueGenericSend+0xa4>
 80029c6:	2300      	movs	r3, #0
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d10a      	bne.n	80029e2 <xQueueGenericSend+0xbe>
	__asm volatile
 80029cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029d0:	f383 8811 	msr	BASEPRI, r3
 80029d4:	f3bf 8f6f 	isb	sy
 80029d8:	f3bf 8f4f 	dsb	sy
 80029dc:	61fb      	str	r3, [r7, #28]
}
 80029de:	bf00      	nop
 80029e0:	e7fe      	b.n	80029e0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80029e2:	f001 feff 	bl	80047e4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80029e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80029ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029ee:	429a      	cmp	r2, r3
 80029f0:	d302      	bcc.n	80029f8 <xQueueGenericSend+0xd4>
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	2b02      	cmp	r3, #2
 80029f6:	d129      	bne.n	8002a4c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80029f8:	683a      	ldr	r2, [r7, #0]
 80029fa:	68b9      	ldr	r1, [r7, #8]
 80029fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80029fe:	f000 fa0b 	bl	8002e18 <prvCopyDataToQueue>
 8002a02:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002a04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d010      	beq.n	8002a2e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002a0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a0e:	3324      	adds	r3, #36	; 0x24
 8002a10:	4618      	mov	r0, r3
 8002a12:	f000 ffcf 	bl	80039b4 <xTaskRemoveFromEventList>
 8002a16:	4603      	mov	r3, r0
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d013      	beq.n	8002a44 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002a1c:	4b3f      	ldr	r3, [pc, #252]	; (8002b1c <xQueueGenericSend+0x1f8>)
 8002a1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a22:	601a      	str	r2, [r3, #0]
 8002a24:	f3bf 8f4f 	dsb	sy
 8002a28:	f3bf 8f6f 	isb	sy
 8002a2c:	e00a      	b.n	8002a44 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002a2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d007      	beq.n	8002a44 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002a34:	4b39      	ldr	r3, [pc, #228]	; (8002b1c <xQueueGenericSend+0x1f8>)
 8002a36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a3a:	601a      	str	r2, [r3, #0]
 8002a3c:	f3bf 8f4f 	dsb	sy
 8002a40:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002a44:	f001 fefe 	bl	8004844 <vPortExitCritical>
				return pdPASS;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	e063      	b.n	8002b14 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d103      	bne.n	8002a5a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002a52:	f001 fef7 	bl	8004844 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002a56:	2300      	movs	r3, #0
 8002a58:	e05c      	b.n	8002b14 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002a5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d106      	bne.n	8002a6e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002a60:	f107 0314 	add.w	r3, r7, #20
 8002a64:	4618      	mov	r0, r3
 8002a66:	f001 f809 	bl	8003a7c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002a6e:	f001 fee9 	bl	8004844 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002a72:	f000 fd7b 	bl	800356c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002a76:	f001 feb5 	bl	80047e4 <vPortEnterCritical>
 8002a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a7c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002a80:	b25b      	sxtb	r3, r3
 8002a82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a86:	d103      	bne.n	8002a90 <xQueueGenericSend+0x16c>
 8002a88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a92:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002a96:	b25b      	sxtb	r3, r3
 8002a98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a9c:	d103      	bne.n	8002aa6 <xQueueGenericSend+0x182>
 8002a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002aa6:	f001 fecd 	bl	8004844 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002aaa:	1d3a      	adds	r2, r7, #4
 8002aac:	f107 0314 	add.w	r3, r7, #20
 8002ab0:	4611      	mov	r1, r2
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f000 fff8 	bl	8003aa8 <xTaskCheckForTimeOut>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d124      	bne.n	8002b08 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002abe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002ac0:	f000 faa2 	bl	8003008 <prvIsQueueFull>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d018      	beq.n	8002afc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002acc:	3310      	adds	r3, #16
 8002ace:	687a      	ldr	r2, [r7, #4]
 8002ad0:	4611      	mov	r1, r2
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f000 ff1e 	bl	8003914 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002ad8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002ada:	f000 fa2d 	bl	8002f38 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002ade:	f000 fd53 	bl	8003588 <xTaskResumeAll>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	f47f af7c 	bne.w	80029e2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002aea:	4b0c      	ldr	r3, [pc, #48]	; (8002b1c <xQueueGenericSend+0x1f8>)
 8002aec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002af0:	601a      	str	r2, [r3, #0]
 8002af2:	f3bf 8f4f 	dsb	sy
 8002af6:	f3bf 8f6f 	isb	sy
 8002afa:	e772      	b.n	80029e2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002afc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002afe:	f000 fa1b 	bl	8002f38 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002b02:	f000 fd41 	bl	8003588 <xTaskResumeAll>
 8002b06:	e76c      	b.n	80029e2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002b08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002b0a:	f000 fa15 	bl	8002f38 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002b0e:	f000 fd3b 	bl	8003588 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002b12:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	3738      	adds	r7, #56	; 0x38
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}
 8002b1c:	e000ed04 	.word	0xe000ed04

08002b20 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b090      	sub	sp, #64	; 0x40
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	60f8      	str	r0, [r7, #12]
 8002b28:	60b9      	str	r1, [r7, #8]
 8002b2a:	607a      	str	r2, [r7, #4]
 8002b2c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8002b32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d10a      	bne.n	8002b4e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002b38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b3c:	f383 8811 	msr	BASEPRI, r3
 8002b40:	f3bf 8f6f 	isb	sy
 8002b44:	f3bf 8f4f 	dsb	sy
 8002b48:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002b4a:	bf00      	nop
 8002b4c:	e7fe      	b.n	8002b4c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002b4e:	68bb      	ldr	r3, [r7, #8]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d103      	bne.n	8002b5c <xQueueGenericSendFromISR+0x3c>
 8002b54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d101      	bne.n	8002b60 <xQueueGenericSendFromISR+0x40>
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	e000      	b.n	8002b62 <xQueueGenericSendFromISR+0x42>
 8002b60:	2300      	movs	r3, #0
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d10a      	bne.n	8002b7c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8002b66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b6a:	f383 8811 	msr	BASEPRI, r3
 8002b6e:	f3bf 8f6f 	isb	sy
 8002b72:	f3bf 8f4f 	dsb	sy
 8002b76:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002b78:	bf00      	nop
 8002b7a:	e7fe      	b.n	8002b7a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	2b02      	cmp	r3, #2
 8002b80:	d103      	bne.n	8002b8a <xQueueGenericSendFromISR+0x6a>
 8002b82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b86:	2b01      	cmp	r3, #1
 8002b88:	d101      	bne.n	8002b8e <xQueueGenericSendFromISR+0x6e>
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e000      	b.n	8002b90 <xQueueGenericSendFromISR+0x70>
 8002b8e:	2300      	movs	r3, #0
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d10a      	bne.n	8002baa <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8002b94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b98:	f383 8811 	msr	BASEPRI, r3
 8002b9c:	f3bf 8f6f 	isb	sy
 8002ba0:	f3bf 8f4f 	dsb	sy
 8002ba4:	623b      	str	r3, [r7, #32]
}
 8002ba6:	bf00      	nop
 8002ba8:	e7fe      	b.n	8002ba8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002baa:	f001 fefd 	bl	80049a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002bae:	f3ef 8211 	mrs	r2, BASEPRI
 8002bb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bb6:	f383 8811 	msr	BASEPRI, r3
 8002bba:	f3bf 8f6f 	isb	sy
 8002bbe:	f3bf 8f4f 	dsb	sy
 8002bc2:	61fa      	str	r2, [r7, #28]
 8002bc4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002bc6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002bc8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002bca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bcc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002bce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bd2:	429a      	cmp	r2, r3
 8002bd4:	d302      	bcc.n	8002bdc <xQueueGenericSendFromISR+0xbc>
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	2b02      	cmp	r3, #2
 8002bda:	d12f      	bne.n	8002c3c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002bdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bde:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002be2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002be6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002be8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bea:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002bec:	683a      	ldr	r2, [r7, #0]
 8002bee:	68b9      	ldr	r1, [r7, #8]
 8002bf0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002bf2:	f000 f911 	bl	8002e18 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002bf6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002bfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bfe:	d112      	bne.n	8002c26 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002c00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d016      	beq.n	8002c36 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002c08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c0a:	3324      	adds	r3, #36	; 0x24
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f000 fed1 	bl	80039b4 <xTaskRemoveFromEventList>
 8002c12:	4603      	mov	r3, r0
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d00e      	beq.n	8002c36 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d00b      	beq.n	8002c36 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2201      	movs	r2, #1
 8002c22:	601a      	str	r2, [r3, #0]
 8002c24:	e007      	b.n	8002c36 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002c26:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002c2a:	3301      	adds	r3, #1
 8002c2c:	b2db      	uxtb	r3, r3
 8002c2e:	b25a      	sxtb	r2, r3
 8002c30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002c36:	2301      	movs	r3, #1
 8002c38:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8002c3a:	e001      	b.n	8002c40 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c42:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002c4a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002c4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	3740      	adds	r7, #64	; 0x40
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}
	...

08002c58 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b08c      	sub	sp, #48	; 0x30
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	60f8      	str	r0, [r7, #12]
 8002c60:	60b9      	str	r1, [r7, #8]
 8002c62:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002c64:	2300      	movs	r3, #0
 8002c66:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002c6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d10a      	bne.n	8002c88 <xQueueReceive+0x30>
	__asm volatile
 8002c72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c76:	f383 8811 	msr	BASEPRI, r3
 8002c7a:	f3bf 8f6f 	isb	sy
 8002c7e:	f3bf 8f4f 	dsb	sy
 8002c82:	623b      	str	r3, [r7, #32]
}
 8002c84:	bf00      	nop
 8002c86:	e7fe      	b.n	8002c86 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d103      	bne.n	8002c96 <xQueueReceive+0x3e>
 8002c8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d101      	bne.n	8002c9a <xQueueReceive+0x42>
 8002c96:	2301      	movs	r3, #1
 8002c98:	e000      	b.n	8002c9c <xQueueReceive+0x44>
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d10a      	bne.n	8002cb6 <xQueueReceive+0x5e>
	__asm volatile
 8002ca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ca4:	f383 8811 	msr	BASEPRI, r3
 8002ca8:	f3bf 8f6f 	isb	sy
 8002cac:	f3bf 8f4f 	dsb	sy
 8002cb0:	61fb      	str	r3, [r7, #28]
}
 8002cb2:	bf00      	nop
 8002cb4:	e7fe      	b.n	8002cb4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002cb6:	f001 f83b 	bl	8003d30 <xTaskGetSchedulerState>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d102      	bne.n	8002cc6 <xQueueReceive+0x6e>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d101      	bne.n	8002cca <xQueueReceive+0x72>
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e000      	b.n	8002ccc <xQueueReceive+0x74>
 8002cca:	2300      	movs	r3, #0
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d10a      	bne.n	8002ce6 <xQueueReceive+0x8e>
	__asm volatile
 8002cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cd4:	f383 8811 	msr	BASEPRI, r3
 8002cd8:	f3bf 8f6f 	isb	sy
 8002cdc:	f3bf 8f4f 	dsb	sy
 8002ce0:	61bb      	str	r3, [r7, #24]
}
 8002ce2:	bf00      	nop
 8002ce4:	e7fe      	b.n	8002ce4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002ce6:	f001 fd7d 	bl	80047e4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cee:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d01f      	beq.n	8002d36 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002cf6:	68b9      	ldr	r1, [r7, #8]
 8002cf8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002cfa:	f000 f8f7 	bl	8002eec <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d00:	1e5a      	subs	r2, r3, #1
 8002d02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d04:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d08:	691b      	ldr	r3, [r3, #16]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d00f      	beq.n	8002d2e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d10:	3310      	adds	r3, #16
 8002d12:	4618      	mov	r0, r3
 8002d14:	f000 fe4e 	bl	80039b4 <xTaskRemoveFromEventList>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d007      	beq.n	8002d2e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002d1e:	4b3d      	ldr	r3, [pc, #244]	; (8002e14 <xQueueReceive+0x1bc>)
 8002d20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d24:	601a      	str	r2, [r3, #0]
 8002d26:	f3bf 8f4f 	dsb	sy
 8002d2a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002d2e:	f001 fd89 	bl	8004844 <vPortExitCritical>
				return pdPASS;
 8002d32:	2301      	movs	r3, #1
 8002d34:	e069      	b.n	8002e0a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d103      	bne.n	8002d44 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002d3c:	f001 fd82 	bl	8004844 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002d40:	2300      	movs	r3, #0
 8002d42:	e062      	b.n	8002e0a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002d44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d106      	bne.n	8002d58 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002d4a:	f107 0310 	add.w	r3, r7, #16
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f000 fe94 	bl	8003a7c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002d54:	2301      	movs	r3, #1
 8002d56:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002d58:	f001 fd74 	bl	8004844 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002d5c:	f000 fc06 	bl	800356c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002d60:	f001 fd40 	bl	80047e4 <vPortEnterCritical>
 8002d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d66:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002d6a:	b25b      	sxtb	r3, r3
 8002d6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d70:	d103      	bne.n	8002d7a <xQueueReceive+0x122>
 8002d72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d74:	2200      	movs	r2, #0
 8002d76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d7c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002d80:	b25b      	sxtb	r3, r3
 8002d82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d86:	d103      	bne.n	8002d90 <xQueueReceive+0x138>
 8002d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002d90:	f001 fd58 	bl	8004844 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002d94:	1d3a      	adds	r2, r7, #4
 8002d96:	f107 0310 	add.w	r3, r7, #16
 8002d9a:	4611      	mov	r1, r2
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f000 fe83 	bl	8003aa8 <xTaskCheckForTimeOut>
 8002da2:	4603      	mov	r3, r0
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d123      	bne.n	8002df0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002da8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002daa:	f000 f917 	bl	8002fdc <prvIsQueueEmpty>
 8002dae:	4603      	mov	r3, r0
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d017      	beq.n	8002de4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002db6:	3324      	adds	r3, #36	; 0x24
 8002db8:	687a      	ldr	r2, [r7, #4]
 8002dba:	4611      	mov	r1, r2
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f000 fda9 	bl	8003914 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002dc2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002dc4:	f000 f8b8 	bl	8002f38 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002dc8:	f000 fbde 	bl	8003588 <xTaskResumeAll>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d189      	bne.n	8002ce6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8002dd2:	4b10      	ldr	r3, [pc, #64]	; (8002e14 <xQueueReceive+0x1bc>)
 8002dd4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002dd8:	601a      	str	r2, [r3, #0]
 8002dda:	f3bf 8f4f 	dsb	sy
 8002dde:	f3bf 8f6f 	isb	sy
 8002de2:	e780      	b.n	8002ce6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002de4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002de6:	f000 f8a7 	bl	8002f38 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002dea:	f000 fbcd 	bl	8003588 <xTaskResumeAll>
 8002dee:	e77a      	b.n	8002ce6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002df0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002df2:	f000 f8a1 	bl	8002f38 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002df6:	f000 fbc7 	bl	8003588 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002dfa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002dfc:	f000 f8ee 	bl	8002fdc <prvIsQueueEmpty>
 8002e00:	4603      	mov	r3, r0
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	f43f af6f 	beq.w	8002ce6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002e08:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3730      	adds	r7, #48	; 0x30
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}
 8002e12:	bf00      	nop
 8002e14:	e000ed04 	.word	0xe000ed04

08002e18 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b086      	sub	sp, #24
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	60f8      	str	r0, [r7, #12]
 8002e20:	60b9      	str	r1, [r7, #8]
 8002e22:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002e24:	2300      	movs	r3, #0
 8002e26:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e2c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d10d      	bne.n	8002e52 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d14d      	bne.n	8002eda <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	4618      	mov	r0, r3
 8002e44:	f000 ff92 	bl	8003d6c <xTaskPriorityDisinherit>
 8002e48:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	609a      	str	r2, [r3, #8]
 8002e50:	e043      	b.n	8002eda <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d119      	bne.n	8002e8c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	6858      	ldr	r0, [r3, #4]
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e60:	461a      	mov	r2, r3
 8002e62:	68b9      	ldr	r1, [r7, #8]
 8002e64:	f001 fff6 	bl	8004e54 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	685a      	ldr	r2, [r3, #4]
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e70:	441a      	add	r2, r3
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	685a      	ldr	r2, [r3, #4]
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	429a      	cmp	r2, r3
 8002e80:	d32b      	bcc.n	8002eda <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681a      	ldr	r2, [r3, #0]
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	605a      	str	r2, [r3, #4]
 8002e8a:	e026      	b.n	8002eda <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	68d8      	ldr	r0, [r3, #12]
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e94:	461a      	mov	r2, r3
 8002e96:	68b9      	ldr	r1, [r7, #8]
 8002e98:	f001 ffdc 	bl	8004e54 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	68da      	ldr	r2, [r3, #12]
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea4:	425b      	negs	r3, r3
 8002ea6:	441a      	add	r2, r3
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	68da      	ldr	r2, [r3, #12]
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	d207      	bcs.n	8002ec8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	689a      	ldr	r2, [r3, #8]
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec0:	425b      	negs	r3, r3
 8002ec2:	441a      	add	r2, r3
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2b02      	cmp	r3, #2
 8002ecc:	d105      	bne.n	8002eda <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d002      	beq.n	8002eda <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	3b01      	subs	r3, #1
 8002ed8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	1c5a      	adds	r2, r3, #1
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002ee2:	697b      	ldr	r3, [r7, #20]
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	3718      	adds	r7, #24
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}

08002eec <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b082      	sub	sp, #8
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
 8002ef4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d018      	beq.n	8002f30 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	68da      	ldr	r2, [r3, #12]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f06:	441a      	add	r2, r3
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	68da      	ldr	r2, [r3, #12]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	429a      	cmp	r2, r3
 8002f16:	d303      	bcc.n	8002f20 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681a      	ldr	r2, [r3, #0]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	68d9      	ldr	r1, [r3, #12]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f28:	461a      	mov	r2, r3
 8002f2a:	6838      	ldr	r0, [r7, #0]
 8002f2c:	f001 ff92 	bl	8004e54 <memcpy>
	}
}
 8002f30:	bf00      	nop
 8002f32:	3708      	adds	r7, #8
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}

08002f38 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b084      	sub	sp, #16
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002f40:	f001 fc50 	bl	80047e4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002f4a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002f4c:	e011      	b.n	8002f72 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d012      	beq.n	8002f7c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	3324      	adds	r3, #36	; 0x24
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f000 fd2a 	bl	80039b4 <xTaskRemoveFromEventList>
 8002f60:	4603      	mov	r3, r0
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d001      	beq.n	8002f6a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002f66:	f000 fe01 	bl	8003b6c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002f6a:	7bfb      	ldrb	r3, [r7, #15]
 8002f6c:	3b01      	subs	r3, #1
 8002f6e:	b2db      	uxtb	r3, r3
 8002f70:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002f72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	dce9      	bgt.n	8002f4e <prvUnlockQueue+0x16>
 8002f7a:	e000      	b.n	8002f7e <prvUnlockQueue+0x46>
					break;
 8002f7c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	22ff      	movs	r2, #255	; 0xff
 8002f82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002f86:	f001 fc5d 	bl	8004844 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002f8a:	f001 fc2b 	bl	80047e4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002f94:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002f96:	e011      	b.n	8002fbc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	691b      	ldr	r3, [r3, #16]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d012      	beq.n	8002fc6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	3310      	adds	r3, #16
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f000 fd05 	bl	80039b4 <xTaskRemoveFromEventList>
 8002faa:	4603      	mov	r3, r0
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d001      	beq.n	8002fb4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002fb0:	f000 fddc 	bl	8003b6c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002fb4:	7bbb      	ldrb	r3, [r7, #14]
 8002fb6:	3b01      	subs	r3, #1
 8002fb8:	b2db      	uxtb	r3, r3
 8002fba:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002fbc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	dce9      	bgt.n	8002f98 <prvUnlockQueue+0x60>
 8002fc4:	e000      	b.n	8002fc8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002fc6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	22ff      	movs	r2, #255	; 0xff
 8002fcc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002fd0:	f001 fc38 	bl	8004844 <vPortExitCritical>
}
 8002fd4:	bf00      	nop
 8002fd6:	3710      	adds	r7, #16
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bd80      	pop	{r7, pc}

08002fdc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b084      	sub	sp, #16
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002fe4:	f001 fbfe 	bl	80047e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d102      	bne.n	8002ff6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	60fb      	str	r3, [r7, #12]
 8002ff4:	e001      	b.n	8002ffa <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002ffa:	f001 fc23 	bl	8004844 <vPortExitCritical>

	return xReturn;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
}
 8003000:	4618      	mov	r0, r3
 8003002:	3710      	adds	r7, #16
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}

08003008 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b084      	sub	sp, #16
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003010:	f001 fbe8 	bl	80047e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800301c:	429a      	cmp	r2, r3
 800301e:	d102      	bne.n	8003026 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003020:	2301      	movs	r3, #1
 8003022:	60fb      	str	r3, [r7, #12]
 8003024:	e001      	b.n	800302a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003026:	2300      	movs	r3, #0
 8003028:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800302a:	f001 fc0b 	bl	8004844 <vPortExitCritical>

	return xReturn;
 800302e:	68fb      	ldr	r3, [r7, #12]
}
 8003030:	4618      	mov	r0, r3
 8003032:	3710      	adds	r7, #16
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}

08003038 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003038:	b480      	push	{r7}
 800303a:	b085      	sub	sp, #20
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
 8003040:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003042:	2300      	movs	r3, #0
 8003044:	60fb      	str	r3, [r7, #12]
 8003046:	e014      	b.n	8003072 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003048:	4a0f      	ldr	r2, [pc, #60]	; (8003088 <vQueueAddToRegistry+0x50>)
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d10b      	bne.n	800306c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003054:	490c      	ldr	r1, [pc, #48]	; (8003088 <vQueueAddToRegistry+0x50>)
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	683a      	ldr	r2, [r7, #0]
 800305a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800305e:	4a0a      	ldr	r2, [pc, #40]	; (8003088 <vQueueAddToRegistry+0x50>)
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	00db      	lsls	r3, r3, #3
 8003064:	4413      	add	r3, r2
 8003066:	687a      	ldr	r2, [r7, #4]
 8003068:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800306a:	e006      	b.n	800307a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	3301      	adds	r3, #1
 8003070:	60fb      	str	r3, [r7, #12]
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	2b07      	cmp	r3, #7
 8003076:	d9e7      	bls.n	8003048 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003078:	bf00      	nop
 800307a:	bf00      	nop
 800307c:	3714      	adds	r7, #20
 800307e:	46bd      	mov	sp, r7
 8003080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003084:	4770      	bx	lr
 8003086:	bf00      	nop
 8003088:	20000740 	.word	0x20000740

0800308c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800308c:	b580      	push	{r7, lr}
 800308e:	b086      	sub	sp, #24
 8003090:	af00      	add	r7, sp, #0
 8003092:	60f8      	str	r0, [r7, #12]
 8003094:	60b9      	str	r1, [r7, #8]
 8003096:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800309c:	f001 fba2 	bl	80047e4 <vPortEnterCritical>
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80030a6:	b25b      	sxtb	r3, r3
 80030a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030ac:	d103      	bne.n	80030b6 <vQueueWaitForMessageRestricted+0x2a>
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	2200      	movs	r2, #0
 80030b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80030bc:	b25b      	sxtb	r3, r3
 80030be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030c2:	d103      	bne.n	80030cc <vQueueWaitForMessageRestricted+0x40>
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	2200      	movs	r2, #0
 80030c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80030cc:	f001 fbba 	bl	8004844 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d106      	bne.n	80030e6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	3324      	adds	r3, #36	; 0x24
 80030dc:	687a      	ldr	r2, [r7, #4]
 80030de:	68b9      	ldr	r1, [r7, #8]
 80030e0:	4618      	mov	r0, r3
 80030e2:	f000 fc3b 	bl	800395c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80030e6:	6978      	ldr	r0, [r7, #20]
 80030e8:	f7ff ff26 	bl	8002f38 <prvUnlockQueue>
	}
 80030ec:	bf00      	nop
 80030ee:	3718      	adds	r7, #24
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bd80      	pop	{r7, pc}

080030f4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b08e      	sub	sp, #56	; 0x38
 80030f8:	af04      	add	r7, sp, #16
 80030fa:	60f8      	str	r0, [r7, #12]
 80030fc:	60b9      	str	r1, [r7, #8]
 80030fe:	607a      	str	r2, [r7, #4]
 8003100:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003102:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003104:	2b00      	cmp	r3, #0
 8003106:	d10a      	bne.n	800311e <xTaskCreateStatic+0x2a>
	__asm volatile
 8003108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800310c:	f383 8811 	msr	BASEPRI, r3
 8003110:	f3bf 8f6f 	isb	sy
 8003114:	f3bf 8f4f 	dsb	sy
 8003118:	623b      	str	r3, [r7, #32]
}
 800311a:	bf00      	nop
 800311c:	e7fe      	b.n	800311c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800311e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003120:	2b00      	cmp	r3, #0
 8003122:	d10a      	bne.n	800313a <xTaskCreateStatic+0x46>
	__asm volatile
 8003124:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003128:	f383 8811 	msr	BASEPRI, r3
 800312c:	f3bf 8f6f 	isb	sy
 8003130:	f3bf 8f4f 	dsb	sy
 8003134:	61fb      	str	r3, [r7, #28]
}
 8003136:	bf00      	nop
 8003138:	e7fe      	b.n	8003138 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800313a:	235c      	movs	r3, #92	; 0x5c
 800313c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	2b5c      	cmp	r3, #92	; 0x5c
 8003142:	d00a      	beq.n	800315a <xTaskCreateStatic+0x66>
	__asm volatile
 8003144:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003148:	f383 8811 	msr	BASEPRI, r3
 800314c:	f3bf 8f6f 	isb	sy
 8003150:	f3bf 8f4f 	dsb	sy
 8003154:	61bb      	str	r3, [r7, #24]
}
 8003156:	bf00      	nop
 8003158:	e7fe      	b.n	8003158 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800315a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800315c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800315e:	2b00      	cmp	r3, #0
 8003160:	d01e      	beq.n	80031a0 <xTaskCreateStatic+0xac>
 8003162:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003164:	2b00      	cmp	r3, #0
 8003166:	d01b      	beq.n	80031a0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800316a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800316c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800316e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003170:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003174:	2202      	movs	r2, #2
 8003176:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800317a:	2300      	movs	r3, #0
 800317c:	9303      	str	r3, [sp, #12]
 800317e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003180:	9302      	str	r3, [sp, #8]
 8003182:	f107 0314 	add.w	r3, r7, #20
 8003186:	9301      	str	r3, [sp, #4]
 8003188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800318a:	9300      	str	r3, [sp, #0]
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	687a      	ldr	r2, [r7, #4]
 8003190:	68b9      	ldr	r1, [r7, #8]
 8003192:	68f8      	ldr	r0, [r7, #12]
 8003194:	f000 f850 	bl	8003238 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003198:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800319a:	f000 f8dd 	bl	8003358 <prvAddNewTaskToReadyList>
 800319e:	e001      	b.n	80031a4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80031a0:	2300      	movs	r3, #0
 80031a2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80031a4:	697b      	ldr	r3, [r7, #20]
	}
 80031a6:	4618      	mov	r0, r3
 80031a8:	3728      	adds	r7, #40	; 0x28
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}

080031ae <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80031ae:	b580      	push	{r7, lr}
 80031b0:	b08c      	sub	sp, #48	; 0x30
 80031b2:	af04      	add	r7, sp, #16
 80031b4:	60f8      	str	r0, [r7, #12]
 80031b6:	60b9      	str	r1, [r7, #8]
 80031b8:	603b      	str	r3, [r7, #0]
 80031ba:	4613      	mov	r3, r2
 80031bc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80031be:	88fb      	ldrh	r3, [r7, #6]
 80031c0:	009b      	lsls	r3, r3, #2
 80031c2:	4618      	mov	r0, r3
 80031c4:	f001 fc30 	bl	8004a28 <pvPortMalloc>
 80031c8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d00e      	beq.n	80031ee <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80031d0:	205c      	movs	r0, #92	; 0x5c
 80031d2:	f001 fc29 	bl	8004a28 <pvPortMalloc>
 80031d6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80031d8:	69fb      	ldr	r3, [r7, #28]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d003      	beq.n	80031e6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80031de:	69fb      	ldr	r3, [r7, #28]
 80031e0:	697a      	ldr	r2, [r7, #20]
 80031e2:	631a      	str	r2, [r3, #48]	; 0x30
 80031e4:	e005      	b.n	80031f2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80031e6:	6978      	ldr	r0, [r7, #20]
 80031e8:	f001 fcea 	bl	8004bc0 <vPortFree>
 80031ec:	e001      	b.n	80031f2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80031ee:	2300      	movs	r3, #0
 80031f0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80031f2:	69fb      	ldr	r3, [r7, #28]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d017      	beq.n	8003228 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80031f8:	69fb      	ldr	r3, [r7, #28]
 80031fa:	2200      	movs	r2, #0
 80031fc:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003200:	88fa      	ldrh	r2, [r7, #6]
 8003202:	2300      	movs	r3, #0
 8003204:	9303      	str	r3, [sp, #12]
 8003206:	69fb      	ldr	r3, [r7, #28]
 8003208:	9302      	str	r3, [sp, #8]
 800320a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800320c:	9301      	str	r3, [sp, #4]
 800320e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003210:	9300      	str	r3, [sp, #0]
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	68b9      	ldr	r1, [r7, #8]
 8003216:	68f8      	ldr	r0, [r7, #12]
 8003218:	f000 f80e 	bl	8003238 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800321c:	69f8      	ldr	r0, [r7, #28]
 800321e:	f000 f89b 	bl	8003358 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003222:	2301      	movs	r3, #1
 8003224:	61bb      	str	r3, [r7, #24]
 8003226:	e002      	b.n	800322e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003228:	f04f 33ff 	mov.w	r3, #4294967295
 800322c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800322e:	69bb      	ldr	r3, [r7, #24]
	}
 8003230:	4618      	mov	r0, r3
 8003232:	3720      	adds	r7, #32
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}

08003238 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b088      	sub	sp, #32
 800323c:	af00      	add	r7, sp, #0
 800323e:	60f8      	str	r0, [r7, #12]
 8003240:	60b9      	str	r1, [r7, #8]
 8003242:	607a      	str	r2, [r7, #4]
 8003244:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003248:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	009b      	lsls	r3, r3, #2
 800324e:	461a      	mov	r2, r3
 8003250:	21a5      	movs	r1, #165	; 0xa5
 8003252:	f001 fdd3 	bl	8004dfc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003258:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003260:	3b01      	subs	r3, #1
 8003262:	009b      	lsls	r3, r3, #2
 8003264:	4413      	add	r3, r2
 8003266:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003268:	69bb      	ldr	r3, [r7, #24]
 800326a:	f023 0307 	bic.w	r3, r3, #7
 800326e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003270:	69bb      	ldr	r3, [r7, #24]
 8003272:	f003 0307 	and.w	r3, r3, #7
 8003276:	2b00      	cmp	r3, #0
 8003278:	d00a      	beq.n	8003290 <prvInitialiseNewTask+0x58>
	__asm volatile
 800327a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800327e:	f383 8811 	msr	BASEPRI, r3
 8003282:	f3bf 8f6f 	isb	sy
 8003286:	f3bf 8f4f 	dsb	sy
 800328a:	617b      	str	r3, [r7, #20]
}
 800328c:	bf00      	nop
 800328e:	e7fe      	b.n	800328e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003290:	68bb      	ldr	r3, [r7, #8]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d01f      	beq.n	80032d6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003296:	2300      	movs	r3, #0
 8003298:	61fb      	str	r3, [r7, #28]
 800329a:	e012      	b.n	80032c2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800329c:	68ba      	ldr	r2, [r7, #8]
 800329e:	69fb      	ldr	r3, [r7, #28]
 80032a0:	4413      	add	r3, r2
 80032a2:	7819      	ldrb	r1, [r3, #0]
 80032a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80032a6:	69fb      	ldr	r3, [r7, #28]
 80032a8:	4413      	add	r3, r2
 80032aa:	3334      	adds	r3, #52	; 0x34
 80032ac:	460a      	mov	r2, r1
 80032ae:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80032b0:	68ba      	ldr	r2, [r7, #8]
 80032b2:	69fb      	ldr	r3, [r7, #28]
 80032b4:	4413      	add	r3, r2
 80032b6:	781b      	ldrb	r3, [r3, #0]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d006      	beq.n	80032ca <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80032bc:	69fb      	ldr	r3, [r7, #28]
 80032be:	3301      	adds	r3, #1
 80032c0:	61fb      	str	r3, [r7, #28]
 80032c2:	69fb      	ldr	r3, [r7, #28]
 80032c4:	2b0f      	cmp	r3, #15
 80032c6:	d9e9      	bls.n	800329c <prvInitialiseNewTask+0x64>
 80032c8:	e000      	b.n	80032cc <prvInitialiseNewTask+0x94>
			{
				break;
 80032ca:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80032cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032ce:	2200      	movs	r2, #0
 80032d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80032d4:	e003      	b.n	80032de <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80032d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032d8:	2200      	movs	r2, #0
 80032da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80032de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032e0:	2b37      	cmp	r3, #55	; 0x37
 80032e2:	d901      	bls.n	80032e8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80032e4:	2337      	movs	r3, #55	; 0x37
 80032e6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80032e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80032ec:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80032ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80032f2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80032f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032f6:	2200      	movs	r2, #0
 80032f8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80032fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032fc:	3304      	adds	r3, #4
 80032fe:	4618      	mov	r0, r3
 8003300:	f7ff f978 	bl	80025f4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003306:	3318      	adds	r3, #24
 8003308:	4618      	mov	r0, r3
 800330a:	f7ff f973 	bl	80025f4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800330e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003310:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003312:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003316:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800331a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800331c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800331e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003320:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003322:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003326:	2200      	movs	r2, #0
 8003328:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800332a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800332c:	2200      	movs	r2, #0
 800332e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003332:	683a      	ldr	r2, [r7, #0]
 8003334:	68f9      	ldr	r1, [r7, #12]
 8003336:	69b8      	ldr	r0, [r7, #24]
 8003338:	f001 f928 	bl	800458c <pxPortInitialiseStack>
 800333c:	4602      	mov	r2, r0
 800333e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003340:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003344:	2b00      	cmp	r3, #0
 8003346:	d002      	beq.n	800334e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800334a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800334c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800334e:	bf00      	nop
 8003350:	3720      	adds	r7, #32
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}
	...

08003358 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b082      	sub	sp, #8
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003360:	f001 fa40 	bl	80047e4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003364:	4b2d      	ldr	r3, [pc, #180]	; (800341c <prvAddNewTaskToReadyList+0xc4>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	3301      	adds	r3, #1
 800336a:	4a2c      	ldr	r2, [pc, #176]	; (800341c <prvAddNewTaskToReadyList+0xc4>)
 800336c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800336e:	4b2c      	ldr	r3, [pc, #176]	; (8003420 <prvAddNewTaskToReadyList+0xc8>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d109      	bne.n	800338a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003376:	4a2a      	ldr	r2, [pc, #168]	; (8003420 <prvAddNewTaskToReadyList+0xc8>)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800337c:	4b27      	ldr	r3, [pc, #156]	; (800341c <prvAddNewTaskToReadyList+0xc4>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	2b01      	cmp	r3, #1
 8003382:	d110      	bne.n	80033a6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003384:	f000 fc16 	bl	8003bb4 <prvInitialiseTaskLists>
 8003388:	e00d      	b.n	80033a6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800338a:	4b26      	ldr	r3, [pc, #152]	; (8003424 <prvAddNewTaskToReadyList+0xcc>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d109      	bne.n	80033a6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003392:	4b23      	ldr	r3, [pc, #140]	; (8003420 <prvAddNewTaskToReadyList+0xc8>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800339c:	429a      	cmp	r2, r3
 800339e:	d802      	bhi.n	80033a6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80033a0:	4a1f      	ldr	r2, [pc, #124]	; (8003420 <prvAddNewTaskToReadyList+0xc8>)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80033a6:	4b20      	ldr	r3, [pc, #128]	; (8003428 <prvAddNewTaskToReadyList+0xd0>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	3301      	adds	r3, #1
 80033ac:	4a1e      	ldr	r2, [pc, #120]	; (8003428 <prvAddNewTaskToReadyList+0xd0>)
 80033ae:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80033b0:	4b1d      	ldr	r3, [pc, #116]	; (8003428 <prvAddNewTaskToReadyList+0xd0>)
 80033b2:	681a      	ldr	r2, [r3, #0]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033bc:	4b1b      	ldr	r3, [pc, #108]	; (800342c <prvAddNewTaskToReadyList+0xd4>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	429a      	cmp	r2, r3
 80033c2:	d903      	bls.n	80033cc <prvAddNewTaskToReadyList+0x74>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033c8:	4a18      	ldr	r2, [pc, #96]	; (800342c <prvAddNewTaskToReadyList+0xd4>)
 80033ca:	6013      	str	r3, [r2, #0]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033d0:	4613      	mov	r3, r2
 80033d2:	009b      	lsls	r3, r3, #2
 80033d4:	4413      	add	r3, r2
 80033d6:	009b      	lsls	r3, r3, #2
 80033d8:	4a15      	ldr	r2, [pc, #84]	; (8003430 <prvAddNewTaskToReadyList+0xd8>)
 80033da:	441a      	add	r2, r3
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	3304      	adds	r3, #4
 80033e0:	4619      	mov	r1, r3
 80033e2:	4610      	mov	r0, r2
 80033e4:	f7ff f913 	bl	800260e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80033e8:	f001 fa2c 	bl	8004844 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80033ec:	4b0d      	ldr	r3, [pc, #52]	; (8003424 <prvAddNewTaskToReadyList+0xcc>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d00e      	beq.n	8003412 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80033f4:	4b0a      	ldr	r3, [pc, #40]	; (8003420 <prvAddNewTaskToReadyList+0xc8>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033fe:	429a      	cmp	r2, r3
 8003400:	d207      	bcs.n	8003412 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003402:	4b0c      	ldr	r3, [pc, #48]	; (8003434 <prvAddNewTaskToReadyList+0xdc>)
 8003404:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003408:	601a      	str	r2, [r3, #0]
 800340a:	f3bf 8f4f 	dsb	sy
 800340e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003412:	bf00      	nop
 8003414:	3708      	adds	r7, #8
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}
 800341a:	bf00      	nop
 800341c:	20000c54 	.word	0x20000c54
 8003420:	20000780 	.word	0x20000780
 8003424:	20000c60 	.word	0x20000c60
 8003428:	20000c70 	.word	0x20000c70
 800342c:	20000c5c 	.word	0x20000c5c
 8003430:	20000784 	.word	0x20000784
 8003434:	e000ed04 	.word	0xe000ed04

08003438 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003438:	b580      	push	{r7, lr}
 800343a:	b084      	sub	sp, #16
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003440:	2300      	movs	r3, #0
 8003442:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d017      	beq.n	800347a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800344a:	4b13      	ldr	r3, [pc, #76]	; (8003498 <vTaskDelay+0x60>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d00a      	beq.n	8003468 <vTaskDelay+0x30>
	__asm volatile
 8003452:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003456:	f383 8811 	msr	BASEPRI, r3
 800345a:	f3bf 8f6f 	isb	sy
 800345e:	f3bf 8f4f 	dsb	sy
 8003462:	60bb      	str	r3, [r7, #8]
}
 8003464:	bf00      	nop
 8003466:	e7fe      	b.n	8003466 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003468:	f000 f880 	bl	800356c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800346c:	2100      	movs	r1, #0
 800346e:	6878      	ldr	r0, [r7, #4]
 8003470:	f000 fcea 	bl	8003e48 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003474:	f000 f888 	bl	8003588 <xTaskResumeAll>
 8003478:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d107      	bne.n	8003490 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003480:	4b06      	ldr	r3, [pc, #24]	; (800349c <vTaskDelay+0x64>)
 8003482:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003486:	601a      	str	r2, [r3, #0]
 8003488:	f3bf 8f4f 	dsb	sy
 800348c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003490:	bf00      	nop
 8003492:	3710      	adds	r7, #16
 8003494:	46bd      	mov	sp, r7
 8003496:	bd80      	pop	{r7, pc}
 8003498:	20000c7c 	.word	0x20000c7c
 800349c:	e000ed04 	.word	0xe000ed04

080034a0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b08a      	sub	sp, #40	; 0x28
 80034a4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80034a6:	2300      	movs	r3, #0
 80034a8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80034aa:	2300      	movs	r3, #0
 80034ac:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80034ae:	463a      	mov	r2, r7
 80034b0:	1d39      	adds	r1, r7, #4
 80034b2:	f107 0308 	add.w	r3, r7, #8
 80034b6:	4618      	mov	r0, r3
 80034b8:	f7ff f848 	bl	800254c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80034bc:	6839      	ldr	r1, [r7, #0]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	68ba      	ldr	r2, [r7, #8]
 80034c2:	9202      	str	r2, [sp, #8]
 80034c4:	9301      	str	r3, [sp, #4]
 80034c6:	2300      	movs	r3, #0
 80034c8:	9300      	str	r3, [sp, #0]
 80034ca:	2300      	movs	r3, #0
 80034cc:	460a      	mov	r2, r1
 80034ce:	4921      	ldr	r1, [pc, #132]	; (8003554 <vTaskStartScheduler+0xb4>)
 80034d0:	4821      	ldr	r0, [pc, #132]	; (8003558 <vTaskStartScheduler+0xb8>)
 80034d2:	f7ff fe0f 	bl	80030f4 <xTaskCreateStatic>
 80034d6:	4603      	mov	r3, r0
 80034d8:	4a20      	ldr	r2, [pc, #128]	; (800355c <vTaskStartScheduler+0xbc>)
 80034da:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80034dc:	4b1f      	ldr	r3, [pc, #124]	; (800355c <vTaskStartScheduler+0xbc>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d002      	beq.n	80034ea <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80034e4:	2301      	movs	r3, #1
 80034e6:	617b      	str	r3, [r7, #20]
 80034e8:	e001      	b.n	80034ee <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80034ea:	2300      	movs	r3, #0
 80034ec:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	2b01      	cmp	r3, #1
 80034f2:	d102      	bne.n	80034fa <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80034f4:	f000 fcfc 	bl	8003ef0 <xTimerCreateTimerTask>
 80034f8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	2b01      	cmp	r3, #1
 80034fe:	d116      	bne.n	800352e <vTaskStartScheduler+0x8e>
	__asm volatile
 8003500:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003504:	f383 8811 	msr	BASEPRI, r3
 8003508:	f3bf 8f6f 	isb	sy
 800350c:	f3bf 8f4f 	dsb	sy
 8003510:	613b      	str	r3, [r7, #16]
}
 8003512:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003514:	4b12      	ldr	r3, [pc, #72]	; (8003560 <vTaskStartScheduler+0xc0>)
 8003516:	f04f 32ff 	mov.w	r2, #4294967295
 800351a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800351c:	4b11      	ldr	r3, [pc, #68]	; (8003564 <vTaskStartScheduler+0xc4>)
 800351e:	2201      	movs	r2, #1
 8003520:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003522:	4b11      	ldr	r3, [pc, #68]	; (8003568 <vTaskStartScheduler+0xc8>)
 8003524:	2200      	movs	r2, #0
 8003526:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003528:	f001 f8ba 	bl	80046a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800352c:	e00e      	b.n	800354c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800352e:	697b      	ldr	r3, [r7, #20]
 8003530:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003534:	d10a      	bne.n	800354c <vTaskStartScheduler+0xac>
	__asm volatile
 8003536:	f04f 0350 	mov.w	r3, #80	; 0x50
 800353a:	f383 8811 	msr	BASEPRI, r3
 800353e:	f3bf 8f6f 	isb	sy
 8003542:	f3bf 8f4f 	dsb	sy
 8003546:	60fb      	str	r3, [r7, #12]
}
 8003548:	bf00      	nop
 800354a:	e7fe      	b.n	800354a <vTaskStartScheduler+0xaa>
}
 800354c:	bf00      	nop
 800354e:	3718      	adds	r7, #24
 8003550:	46bd      	mov	sp, r7
 8003552:	bd80      	pop	{r7, pc}
 8003554:	08004ea8 	.word	0x08004ea8
 8003558:	08003b85 	.word	0x08003b85
 800355c:	20000c78 	.word	0x20000c78
 8003560:	20000c74 	.word	0x20000c74
 8003564:	20000c60 	.word	0x20000c60
 8003568:	20000c58 	.word	0x20000c58

0800356c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800356c:	b480      	push	{r7}
 800356e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003570:	4b04      	ldr	r3, [pc, #16]	; (8003584 <vTaskSuspendAll+0x18>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	3301      	adds	r3, #1
 8003576:	4a03      	ldr	r2, [pc, #12]	; (8003584 <vTaskSuspendAll+0x18>)
 8003578:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800357a:	bf00      	nop
 800357c:	46bd      	mov	sp, r7
 800357e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003582:	4770      	bx	lr
 8003584:	20000c7c 	.word	0x20000c7c

08003588 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b084      	sub	sp, #16
 800358c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800358e:	2300      	movs	r3, #0
 8003590:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003592:	2300      	movs	r3, #0
 8003594:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003596:	4b42      	ldr	r3, [pc, #264]	; (80036a0 <xTaskResumeAll+0x118>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d10a      	bne.n	80035b4 <xTaskResumeAll+0x2c>
	__asm volatile
 800359e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035a2:	f383 8811 	msr	BASEPRI, r3
 80035a6:	f3bf 8f6f 	isb	sy
 80035aa:	f3bf 8f4f 	dsb	sy
 80035ae:	603b      	str	r3, [r7, #0]
}
 80035b0:	bf00      	nop
 80035b2:	e7fe      	b.n	80035b2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80035b4:	f001 f916 	bl	80047e4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80035b8:	4b39      	ldr	r3, [pc, #228]	; (80036a0 <xTaskResumeAll+0x118>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	3b01      	subs	r3, #1
 80035be:	4a38      	ldr	r2, [pc, #224]	; (80036a0 <xTaskResumeAll+0x118>)
 80035c0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80035c2:	4b37      	ldr	r3, [pc, #220]	; (80036a0 <xTaskResumeAll+0x118>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d162      	bne.n	8003690 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80035ca:	4b36      	ldr	r3, [pc, #216]	; (80036a4 <xTaskResumeAll+0x11c>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d05e      	beq.n	8003690 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80035d2:	e02f      	b.n	8003634 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80035d4:	4b34      	ldr	r3, [pc, #208]	; (80036a8 <xTaskResumeAll+0x120>)
 80035d6:	68db      	ldr	r3, [r3, #12]
 80035d8:	68db      	ldr	r3, [r3, #12]
 80035da:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	3318      	adds	r3, #24
 80035e0:	4618      	mov	r0, r3
 80035e2:	f7ff f871 	bl	80026c8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	3304      	adds	r3, #4
 80035ea:	4618      	mov	r0, r3
 80035ec:	f7ff f86c 	bl	80026c8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035f4:	4b2d      	ldr	r3, [pc, #180]	; (80036ac <xTaskResumeAll+0x124>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	429a      	cmp	r2, r3
 80035fa:	d903      	bls.n	8003604 <xTaskResumeAll+0x7c>
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003600:	4a2a      	ldr	r2, [pc, #168]	; (80036ac <xTaskResumeAll+0x124>)
 8003602:	6013      	str	r3, [r2, #0]
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003608:	4613      	mov	r3, r2
 800360a:	009b      	lsls	r3, r3, #2
 800360c:	4413      	add	r3, r2
 800360e:	009b      	lsls	r3, r3, #2
 8003610:	4a27      	ldr	r2, [pc, #156]	; (80036b0 <xTaskResumeAll+0x128>)
 8003612:	441a      	add	r2, r3
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	3304      	adds	r3, #4
 8003618:	4619      	mov	r1, r3
 800361a:	4610      	mov	r0, r2
 800361c:	f7fe fff7 	bl	800260e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003624:	4b23      	ldr	r3, [pc, #140]	; (80036b4 <xTaskResumeAll+0x12c>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800362a:	429a      	cmp	r2, r3
 800362c:	d302      	bcc.n	8003634 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800362e:	4b22      	ldr	r3, [pc, #136]	; (80036b8 <xTaskResumeAll+0x130>)
 8003630:	2201      	movs	r2, #1
 8003632:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003634:	4b1c      	ldr	r3, [pc, #112]	; (80036a8 <xTaskResumeAll+0x120>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d1cb      	bne.n	80035d4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d001      	beq.n	8003646 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003642:	f000 fb55 	bl	8003cf0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003646:	4b1d      	ldr	r3, [pc, #116]	; (80036bc <xTaskResumeAll+0x134>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d010      	beq.n	8003674 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003652:	f000 f847 	bl	80036e4 <xTaskIncrementTick>
 8003656:	4603      	mov	r3, r0
 8003658:	2b00      	cmp	r3, #0
 800365a:	d002      	beq.n	8003662 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800365c:	4b16      	ldr	r3, [pc, #88]	; (80036b8 <xTaskResumeAll+0x130>)
 800365e:	2201      	movs	r2, #1
 8003660:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	3b01      	subs	r3, #1
 8003666:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d1f1      	bne.n	8003652 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800366e:	4b13      	ldr	r3, [pc, #76]	; (80036bc <xTaskResumeAll+0x134>)
 8003670:	2200      	movs	r2, #0
 8003672:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003674:	4b10      	ldr	r3, [pc, #64]	; (80036b8 <xTaskResumeAll+0x130>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d009      	beq.n	8003690 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800367c:	2301      	movs	r3, #1
 800367e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003680:	4b0f      	ldr	r3, [pc, #60]	; (80036c0 <xTaskResumeAll+0x138>)
 8003682:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003686:	601a      	str	r2, [r3, #0]
 8003688:	f3bf 8f4f 	dsb	sy
 800368c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003690:	f001 f8d8 	bl	8004844 <vPortExitCritical>

	return xAlreadyYielded;
 8003694:	68bb      	ldr	r3, [r7, #8]
}
 8003696:	4618      	mov	r0, r3
 8003698:	3710      	adds	r7, #16
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}
 800369e:	bf00      	nop
 80036a0:	20000c7c 	.word	0x20000c7c
 80036a4:	20000c54 	.word	0x20000c54
 80036a8:	20000c14 	.word	0x20000c14
 80036ac:	20000c5c 	.word	0x20000c5c
 80036b0:	20000784 	.word	0x20000784
 80036b4:	20000780 	.word	0x20000780
 80036b8:	20000c68 	.word	0x20000c68
 80036bc:	20000c64 	.word	0x20000c64
 80036c0:	e000ed04 	.word	0xe000ed04

080036c4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80036c4:	b480      	push	{r7}
 80036c6:	b083      	sub	sp, #12
 80036c8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80036ca:	4b05      	ldr	r3, [pc, #20]	; (80036e0 <xTaskGetTickCount+0x1c>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80036d0:	687b      	ldr	r3, [r7, #4]
}
 80036d2:	4618      	mov	r0, r3
 80036d4:	370c      	adds	r7, #12
 80036d6:	46bd      	mov	sp, r7
 80036d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036dc:	4770      	bx	lr
 80036de:	bf00      	nop
 80036e0:	20000c58 	.word	0x20000c58

080036e4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b086      	sub	sp, #24
 80036e8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80036ea:	2300      	movs	r3, #0
 80036ec:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80036ee:	4b4f      	ldr	r3, [pc, #316]	; (800382c <xTaskIncrementTick+0x148>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	f040 808f 	bne.w	8003816 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80036f8:	4b4d      	ldr	r3, [pc, #308]	; (8003830 <xTaskIncrementTick+0x14c>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	3301      	adds	r3, #1
 80036fe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003700:	4a4b      	ldr	r2, [pc, #300]	; (8003830 <xTaskIncrementTick+0x14c>)
 8003702:	693b      	ldr	r3, [r7, #16]
 8003704:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d120      	bne.n	800374e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800370c:	4b49      	ldr	r3, [pc, #292]	; (8003834 <xTaskIncrementTick+0x150>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d00a      	beq.n	800372c <xTaskIncrementTick+0x48>
	__asm volatile
 8003716:	f04f 0350 	mov.w	r3, #80	; 0x50
 800371a:	f383 8811 	msr	BASEPRI, r3
 800371e:	f3bf 8f6f 	isb	sy
 8003722:	f3bf 8f4f 	dsb	sy
 8003726:	603b      	str	r3, [r7, #0]
}
 8003728:	bf00      	nop
 800372a:	e7fe      	b.n	800372a <xTaskIncrementTick+0x46>
 800372c:	4b41      	ldr	r3, [pc, #260]	; (8003834 <xTaskIncrementTick+0x150>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	60fb      	str	r3, [r7, #12]
 8003732:	4b41      	ldr	r3, [pc, #260]	; (8003838 <xTaskIncrementTick+0x154>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a3f      	ldr	r2, [pc, #252]	; (8003834 <xTaskIncrementTick+0x150>)
 8003738:	6013      	str	r3, [r2, #0]
 800373a:	4a3f      	ldr	r2, [pc, #252]	; (8003838 <xTaskIncrementTick+0x154>)
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	6013      	str	r3, [r2, #0]
 8003740:	4b3e      	ldr	r3, [pc, #248]	; (800383c <xTaskIncrementTick+0x158>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	3301      	adds	r3, #1
 8003746:	4a3d      	ldr	r2, [pc, #244]	; (800383c <xTaskIncrementTick+0x158>)
 8003748:	6013      	str	r3, [r2, #0]
 800374a:	f000 fad1 	bl	8003cf0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800374e:	4b3c      	ldr	r3, [pc, #240]	; (8003840 <xTaskIncrementTick+0x15c>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	693a      	ldr	r2, [r7, #16]
 8003754:	429a      	cmp	r2, r3
 8003756:	d349      	bcc.n	80037ec <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003758:	4b36      	ldr	r3, [pc, #216]	; (8003834 <xTaskIncrementTick+0x150>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d104      	bne.n	800376c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003762:	4b37      	ldr	r3, [pc, #220]	; (8003840 <xTaskIncrementTick+0x15c>)
 8003764:	f04f 32ff 	mov.w	r2, #4294967295
 8003768:	601a      	str	r2, [r3, #0]
					break;
 800376a:	e03f      	b.n	80037ec <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800376c:	4b31      	ldr	r3, [pc, #196]	; (8003834 <xTaskIncrementTick+0x150>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	68db      	ldr	r3, [r3, #12]
 8003772:	68db      	ldr	r3, [r3, #12]
 8003774:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003776:	68bb      	ldr	r3, [r7, #8]
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800377c:	693a      	ldr	r2, [r7, #16]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	429a      	cmp	r2, r3
 8003782:	d203      	bcs.n	800378c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003784:	4a2e      	ldr	r2, [pc, #184]	; (8003840 <xTaskIncrementTick+0x15c>)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800378a:	e02f      	b.n	80037ec <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	3304      	adds	r3, #4
 8003790:	4618      	mov	r0, r3
 8003792:	f7fe ff99 	bl	80026c8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800379a:	2b00      	cmp	r3, #0
 800379c:	d004      	beq.n	80037a8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	3318      	adds	r3, #24
 80037a2:	4618      	mov	r0, r3
 80037a4:	f7fe ff90 	bl	80026c8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037ac:	4b25      	ldr	r3, [pc, #148]	; (8003844 <xTaskIncrementTick+0x160>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	429a      	cmp	r2, r3
 80037b2:	d903      	bls.n	80037bc <xTaskIncrementTick+0xd8>
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037b8:	4a22      	ldr	r2, [pc, #136]	; (8003844 <xTaskIncrementTick+0x160>)
 80037ba:	6013      	str	r3, [r2, #0]
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037c0:	4613      	mov	r3, r2
 80037c2:	009b      	lsls	r3, r3, #2
 80037c4:	4413      	add	r3, r2
 80037c6:	009b      	lsls	r3, r3, #2
 80037c8:	4a1f      	ldr	r2, [pc, #124]	; (8003848 <xTaskIncrementTick+0x164>)
 80037ca:	441a      	add	r2, r3
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	3304      	adds	r3, #4
 80037d0:	4619      	mov	r1, r3
 80037d2:	4610      	mov	r0, r2
 80037d4:	f7fe ff1b 	bl	800260e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037dc:	4b1b      	ldr	r3, [pc, #108]	; (800384c <xTaskIncrementTick+0x168>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037e2:	429a      	cmp	r2, r3
 80037e4:	d3b8      	bcc.n	8003758 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80037e6:	2301      	movs	r3, #1
 80037e8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80037ea:	e7b5      	b.n	8003758 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80037ec:	4b17      	ldr	r3, [pc, #92]	; (800384c <xTaskIncrementTick+0x168>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037f2:	4915      	ldr	r1, [pc, #84]	; (8003848 <xTaskIncrementTick+0x164>)
 80037f4:	4613      	mov	r3, r2
 80037f6:	009b      	lsls	r3, r3, #2
 80037f8:	4413      	add	r3, r2
 80037fa:	009b      	lsls	r3, r3, #2
 80037fc:	440b      	add	r3, r1
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	2b01      	cmp	r3, #1
 8003802:	d901      	bls.n	8003808 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8003804:	2301      	movs	r3, #1
 8003806:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003808:	4b11      	ldr	r3, [pc, #68]	; (8003850 <xTaskIncrementTick+0x16c>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d007      	beq.n	8003820 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8003810:	2301      	movs	r3, #1
 8003812:	617b      	str	r3, [r7, #20]
 8003814:	e004      	b.n	8003820 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003816:	4b0f      	ldr	r3, [pc, #60]	; (8003854 <xTaskIncrementTick+0x170>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	3301      	adds	r3, #1
 800381c:	4a0d      	ldr	r2, [pc, #52]	; (8003854 <xTaskIncrementTick+0x170>)
 800381e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003820:	697b      	ldr	r3, [r7, #20]
}
 8003822:	4618      	mov	r0, r3
 8003824:	3718      	adds	r7, #24
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}
 800382a:	bf00      	nop
 800382c:	20000c7c 	.word	0x20000c7c
 8003830:	20000c58 	.word	0x20000c58
 8003834:	20000c0c 	.word	0x20000c0c
 8003838:	20000c10 	.word	0x20000c10
 800383c:	20000c6c 	.word	0x20000c6c
 8003840:	20000c74 	.word	0x20000c74
 8003844:	20000c5c 	.word	0x20000c5c
 8003848:	20000784 	.word	0x20000784
 800384c:	20000780 	.word	0x20000780
 8003850:	20000c68 	.word	0x20000c68
 8003854:	20000c64 	.word	0x20000c64

08003858 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003858:	b480      	push	{r7}
 800385a:	b085      	sub	sp, #20
 800385c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800385e:	4b28      	ldr	r3, [pc, #160]	; (8003900 <vTaskSwitchContext+0xa8>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d003      	beq.n	800386e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003866:	4b27      	ldr	r3, [pc, #156]	; (8003904 <vTaskSwitchContext+0xac>)
 8003868:	2201      	movs	r2, #1
 800386a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800386c:	e041      	b.n	80038f2 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800386e:	4b25      	ldr	r3, [pc, #148]	; (8003904 <vTaskSwitchContext+0xac>)
 8003870:	2200      	movs	r2, #0
 8003872:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003874:	4b24      	ldr	r3, [pc, #144]	; (8003908 <vTaskSwitchContext+0xb0>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	60fb      	str	r3, [r7, #12]
 800387a:	e010      	b.n	800389e <vTaskSwitchContext+0x46>
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d10a      	bne.n	8003898 <vTaskSwitchContext+0x40>
	__asm volatile
 8003882:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003886:	f383 8811 	msr	BASEPRI, r3
 800388a:	f3bf 8f6f 	isb	sy
 800388e:	f3bf 8f4f 	dsb	sy
 8003892:	607b      	str	r3, [r7, #4]
}
 8003894:	bf00      	nop
 8003896:	e7fe      	b.n	8003896 <vTaskSwitchContext+0x3e>
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	3b01      	subs	r3, #1
 800389c:	60fb      	str	r3, [r7, #12]
 800389e:	491b      	ldr	r1, [pc, #108]	; (800390c <vTaskSwitchContext+0xb4>)
 80038a0:	68fa      	ldr	r2, [r7, #12]
 80038a2:	4613      	mov	r3, r2
 80038a4:	009b      	lsls	r3, r3, #2
 80038a6:	4413      	add	r3, r2
 80038a8:	009b      	lsls	r3, r3, #2
 80038aa:	440b      	add	r3, r1
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d0e4      	beq.n	800387c <vTaskSwitchContext+0x24>
 80038b2:	68fa      	ldr	r2, [r7, #12]
 80038b4:	4613      	mov	r3, r2
 80038b6:	009b      	lsls	r3, r3, #2
 80038b8:	4413      	add	r3, r2
 80038ba:	009b      	lsls	r3, r3, #2
 80038bc:	4a13      	ldr	r2, [pc, #76]	; (800390c <vTaskSwitchContext+0xb4>)
 80038be:	4413      	add	r3, r2
 80038c0:	60bb      	str	r3, [r7, #8]
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	685a      	ldr	r2, [r3, #4]
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	605a      	str	r2, [r3, #4]
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	685a      	ldr	r2, [r3, #4]
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	3308      	adds	r3, #8
 80038d4:	429a      	cmp	r2, r3
 80038d6:	d104      	bne.n	80038e2 <vTaskSwitchContext+0x8a>
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	685a      	ldr	r2, [r3, #4]
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	605a      	str	r2, [r3, #4]
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	68db      	ldr	r3, [r3, #12]
 80038e8:	4a09      	ldr	r2, [pc, #36]	; (8003910 <vTaskSwitchContext+0xb8>)
 80038ea:	6013      	str	r3, [r2, #0]
 80038ec:	4a06      	ldr	r2, [pc, #24]	; (8003908 <vTaskSwitchContext+0xb0>)
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	6013      	str	r3, [r2, #0]
}
 80038f2:	bf00      	nop
 80038f4:	3714      	adds	r7, #20
 80038f6:	46bd      	mov	sp, r7
 80038f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fc:	4770      	bx	lr
 80038fe:	bf00      	nop
 8003900:	20000c7c 	.word	0x20000c7c
 8003904:	20000c68 	.word	0x20000c68
 8003908:	20000c5c 	.word	0x20000c5c
 800390c:	20000784 	.word	0x20000784
 8003910:	20000780 	.word	0x20000780

08003914 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b084      	sub	sp, #16
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
 800391c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d10a      	bne.n	800393a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003924:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003928:	f383 8811 	msr	BASEPRI, r3
 800392c:	f3bf 8f6f 	isb	sy
 8003930:	f3bf 8f4f 	dsb	sy
 8003934:	60fb      	str	r3, [r7, #12]
}
 8003936:	bf00      	nop
 8003938:	e7fe      	b.n	8003938 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800393a:	4b07      	ldr	r3, [pc, #28]	; (8003958 <vTaskPlaceOnEventList+0x44>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	3318      	adds	r3, #24
 8003940:	4619      	mov	r1, r3
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	f7fe fe87 	bl	8002656 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003948:	2101      	movs	r1, #1
 800394a:	6838      	ldr	r0, [r7, #0]
 800394c:	f000 fa7c 	bl	8003e48 <prvAddCurrentTaskToDelayedList>
}
 8003950:	bf00      	nop
 8003952:	3710      	adds	r7, #16
 8003954:	46bd      	mov	sp, r7
 8003956:	bd80      	pop	{r7, pc}
 8003958:	20000780 	.word	0x20000780

0800395c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800395c:	b580      	push	{r7, lr}
 800395e:	b086      	sub	sp, #24
 8003960:	af00      	add	r7, sp, #0
 8003962:	60f8      	str	r0, [r7, #12]
 8003964:	60b9      	str	r1, [r7, #8]
 8003966:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d10a      	bne.n	8003984 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800396e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003972:	f383 8811 	msr	BASEPRI, r3
 8003976:	f3bf 8f6f 	isb	sy
 800397a:	f3bf 8f4f 	dsb	sy
 800397e:	617b      	str	r3, [r7, #20]
}
 8003980:	bf00      	nop
 8003982:	e7fe      	b.n	8003982 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003984:	4b0a      	ldr	r3, [pc, #40]	; (80039b0 <vTaskPlaceOnEventListRestricted+0x54>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	3318      	adds	r3, #24
 800398a:	4619      	mov	r1, r3
 800398c:	68f8      	ldr	r0, [r7, #12]
 800398e:	f7fe fe3e 	bl	800260e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d002      	beq.n	800399e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003998:	f04f 33ff 	mov.w	r3, #4294967295
 800399c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800399e:	6879      	ldr	r1, [r7, #4]
 80039a0:	68b8      	ldr	r0, [r7, #8]
 80039a2:	f000 fa51 	bl	8003e48 <prvAddCurrentTaskToDelayedList>
	}
 80039a6:	bf00      	nop
 80039a8:	3718      	adds	r7, #24
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}
 80039ae:	bf00      	nop
 80039b0:	20000780 	.word	0x20000780

080039b4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b086      	sub	sp, #24
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	68db      	ldr	r3, [r3, #12]
 80039c0:	68db      	ldr	r3, [r3, #12]
 80039c2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d10a      	bne.n	80039e0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80039ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039ce:	f383 8811 	msr	BASEPRI, r3
 80039d2:	f3bf 8f6f 	isb	sy
 80039d6:	f3bf 8f4f 	dsb	sy
 80039da:	60fb      	str	r3, [r7, #12]
}
 80039dc:	bf00      	nop
 80039de:	e7fe      	b.n	80039de <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80039e0:	693b      	ldr	r3, [r7, #16]
 80039e2:	3318      	adds	r3, #24
 80039e4:	4618      	mov	r0, r3
 80039e6:	f7fe fe6f 	bl	80026c8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80039ea:	4b1e      	ldr	r3, [pc, #120]	; (8003a64 <xTaskRemoveFromEventList+0xb0>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d11d      	bne.n	8003a2e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80039f2:	693b      	ldr	r3, [r7, #16]
 80039f4:	3304      	adds	r3, #4
 80039f6:	4618      	mov	r0, r3
 80039f8:	f7fe fe66 	bl	80026c8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80039fc:	693b      	ldr	r3, [r7, #16]
 80039fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a00:	4b19      	ldr	r3, [pc, #100]	; (8003a68 <xTaskRemoveFromEventList+0xb4>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	429a      	cmp	r2, r3
 8003a06:	d903      	bls.n	8003a10 <xTaskRemoveFromEventList+0x5c>
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a0c:	4a16      	ldr	r2, [pc, #88]	; (8003a68 <xTaskRemoveFromEventList+0xb4>)
 8003a0e:	6013      	str	r3, [r2, #0]
 8003a10:	693b      	ldr	r3, [r7, #16]
 8003a12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a14:	4613      	mov	r3, r2
 8003a16:	009b      	lsls	r3, r3, #2
 8003a18:	4413      	add	r3, r2
 8003a1a:	009b      	lsls	r3, r3, #2
 8003a1c:	4a13      	ldr	r2, [pc, #76]	; (8003a6c <xTaskRemoveFromEventList+0xb8>)
 8003a1e:	441a      	add	r2, r3
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	3304      	adds	r3, #4
 8003a24:	4619      	mov	r1, r3
 8003a26:	4610      	mov	r0, r2
 8003a28:	f7fe fdf1 	bl	800260e <vListInsertEnd>
 8003a2c:	e005      	b.n	8003a3a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	3318      	adds	r3, #24
 8003a32:	4619      	mov	r1, r3
 8003a34:	480e      	ldr	r0, [pc, #56]	; (8003a70 <xTaskRemoveFromEventList+0xbc>)
 8003a36:	f7fe fdea 	bl	800260e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a3e:	4b0d      	ldr	r3, [pc, #52]	; (8003a74 <xTaskRemoveFromEventList+0xc0>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a44:	429a      	cmp	r2, r3
 8003a46:	d905      	bls.n	8003a54 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003a4c:	4b0a      	ldr	r3, [pc, #40]	; (8003a78 <xTaskRemoveFromEventList+0xc4>)
 8003a4e:	2201      	movs	r2, #1
 8003a50:	601a      	str	r2, [r3, #0]
 8003a52:	e001      	b.n	8003a58 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8003a54:	2300      	movs	r3, #0
 8003a56:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003a58:	697b      	ldr	r3, [r7, #20]
}
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	3718      	adds	r7, #24
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}
 8003a62:	bf00      	nop
 8003a64:	20000c7c 	.word	0x20000c7c
 8003a68:	20000c5c 	.word	0x20000c5c
 8003a6c:	20000784 	.word	0x20000784
 8003a70:	20000c14 	.word	0x20000c14
 8003a74:	20000780 	.word	0x20000780
 8003a78:	20000c68 	.word	0x20000c68

08003a7c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b083      	sub	sp, #12
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003a84:	4b06      	ldr	r3, [pc, #24]	; (8003aa0 <vTaskInternalSetTimeOutState+0x24>)
 8003a86:	681a      	ldr	r2, [r3, #0]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003a8c:	4b05      	ldr	r3, [pc, #20]	; (8003aa4 <vTaskInternalSetTimeOutState+0x28>)
 8003a8e:	681a      	ldr	r2, [r3, #0]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	605a      	str	r2, [r3, #4]
}
 8003a94:	bf00      	nop
 8003a96:	370c      	adds	r7, #12
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9e:	4770      	bx	lr
 8003aa0:	20000c6c 	.word	0x20000c6c
 8003aa4:	20000c58 	.word	0x20000c58

08003aa8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b088      	sub	sp, #32
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
 8003ab0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d10a      	bne.n	8003ace <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003ab8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003abc:	f383 8811 	msr	BASEPRI, r3
 8003ac0:	f3bf 8f6f 	isb	sy
 8003ac4:	f3bf 8f4f 	dsb	sy
 8003ac8:	613b      	str	r3, [r7, #16]
}
 8003aca:	bf00      	nop
 8003acc:	e7fe      	b.n	8003acc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d10a      	bne.n	8003aea <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003ad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ad8:	f383 8811 	msr	BASEPRI, r3
 8003adc:	f3bf 8f6f 	isb	sy
 8003ae0:	f3bf 8f4f 	dsb	sy
 8003ae4:	60fb      	str	r3, [r7, #12]
}
 8003ae6:	bf00      	nop
 8003ae8:	e7fe      	b.n	8003ae8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003aea:	f000 fe7b 	bl	80047e4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003aee:	4b1d      	ldr	r3, [pc, #116]	; (8003b64 <xTaskCheckForTimeOut+0xbc>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	69ba      	ldr	r2, [r7, #24]
 8003afa:	1ad3      	subs	r3, r2, r3
 8003afc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b06:	d102      	bne.n	8003b0e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	61fb      	str	r3, [r7, #28]
 8003b0c:	e023      	b.n	8003b56 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681a      	ldr	r2, [r3, #0]
 8003b12:	4b15      	ldr	r3, [pc, #84]	; (8003b68 <xTaskCheckForTimeOut+0xc0>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	429a      	cmp	r2, r3
 8003b18:	d007      	beq.n	8003b2a <xTaskCheckForTimeOut+0x82>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	69ba      	ldr	r2, [r7, #24]
 8003b20:	429a      	cmp	r2, r3
 8003b22:	d302      	bcc.n	8003b2a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003b24:	2301      	movs	r3, #1
 8003b26:	61fb      	str	r3, [r7, #28]
 8003b28:	e015      	b.n	8003b56 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	697a      	ldr	r2, [r7, #20]
 8003b30:	429a      	cmp	r2, r3
 8003b32:	d20b      	bcs.n	8003b4c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	681a      	ldr	r2, [r3, #0]
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	1ad2      	subs	r2, r2, r3
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003b40:	6878      	ldr	r0, [r7, #4]
 8003b42:	f7ff ff9b 	bl	8003a7c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003b46:	2300      	movs	r3, #0
 8003b48:	61fb      	str	r3, [r7, #28]
 8003b4a:	e004      	b.n	8003b56 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003b52:	2301      	movs	r3, #1
 8003b54:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003b56:	f000 fe75 	bl	8004844 <vPortExitCritical>

	return xReturn;
 8003b5a:	69fb      	ldr	r3, [r7, #28]
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	3720      	adds	r7, #32
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd80      	pop	{r7, pc}
 8003b64:	20000c58 	.word	0x20000c58
 8003b68:	20000c6c 	.word	0x20000c6c

08003b6c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003b70:	4b03      	ldr	r3, [pc, #12]	; (8003b80 <vTaskMissedYield+0x14>)
 8003b72:	2201      	movs	r2, #1
 8003b74:	601a      	str	r2, [r3, #0]
}
 8003b76:	bf00      	nop
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7e:	4770      	bx	lr
 8003b80:	20000c68 	.word	0x20000c68

08003b84 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b082      	sub	sp, #8
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003b8c:	f000 f852 	bl	8003c34 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003b90:	4b06      	ldr	r3, [pc, #24]	; (8003bac <prvIdleTask+0x28>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	2b01      	cmp	r3, #1
 8003b96:	d9f9      	bls.n	8003b8c <prvIdleTask+0x8>
			{
				taskYIELD();
 8003b98:	4b05      	ldr	r3, [pc, #20]	; (8003bb0 <prvIdleTask+0x2c>)
 8003b9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b9e:	601a      	str	r2, [r3, #0]
 8003ba0:	f3bf 8f4f 	dsb	sy
 8003ba4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003ba8:	e7f0      	b.n	8003b8c <prvIdleTask+0x8>
 8003baa:	bf00      	nop
 8003bac:	20000784 	.word	0x20000784
 8003bb0:	e000ed04 	.word	0xe000ed04

08003bb4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b082      	sub	sp, #8
 8003bb8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003bba:	2300      	movs	r3, #0
 8003bbc:	607b      	str	r3, [r7, #4]
 8003bbe:	e00c      	b.n	8003bda <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003bc0:	687a      	ldr	r2, [r7, #4]
 8003bc2:	4613      	mov	r3, r2
 8003bc4:	009b      	lsls	r3, r3, #2
 8003bc6:	4413      	add	r3, r2
 8003bc8:	009b      	lsls	r3, r3, #2
 8003bca:	4a12      	ldr	r2, [pc, #72]	; (8003c14 <prvInitialiseTaskLists+0x60>)
 8003bcc:	4413      	add	r3, r2
 8003bce:	4618      	mov	r0, r3
 8003bd0:	f7fe fcf0 	bl	80025b4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	3301      	adds	r3, #1
 8003bd8:	607b      	str	r3, [r7, #4]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2b37      	cmp	r3, #55	; 0x37
 8003bde:	d9ef      	bls.n	8003bc0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003be0:	480d      	ldr	r0, [pc, #52]	; (8003c18 <prvInitialiseTaskLists+0x64>)
 8003be2:	f7fe fce7 	bl	80025b4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003be6:	480d      	ldr	r0, [pc, #52]	; (8003c1c <prvInitialiseTaskLists+0x68>)
 8003be8:	f7fe fce4 	bl	80025b4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003bec:	480c      	ldr	r0, [pc, #48]	; (8003c20 <prvInitialiseTaskLists+0x6c>)
 8003bee:	f7fe fce1 	bl	80025b4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003bf2:	480c      	ldr	r0, [pc, #48]	; (8003c24 <prvInitialiseTaskLists+0x70>)
 8003bf4:	f7fe fcde 	bl	80025b4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003bf8:	480b      	ldr	r0, [pc, #44]	; (8003c28 <prvInitialiseTaskLists+0x74>)
 8003bfa:	f7fe fcdb 	bl	80025b4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003bfe:	4b0b      	ldr	r3, [pc, #44]	; (8003c2c <prvInitialiseTaskLists+0x78>)
 8003c00:	4a05      	ldr	r2, [pc, #20]	; (8003c18 <prvInitialiseTaskLists+0x64>)
 8003c02:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003c04:	4b0a      	ldr	r3, [pc, #40]	; (8003c30 <prvInitialiseTaskLists+0x7c>)
 8003c06:	4a05      	ldr	r2, [pc, #20]	; (8003c1c <prvInitialiseTaskLists+0x68>)
 8003c08:	601a      	str	r2, [r3, #0]
}
 8003c0a:	bf00      	nop
 8003c0c:	3708      	adds	r7, #8
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd80      	pop	{r7, pc}
 8003c12:	bf00      	nop
 8003c14:	20000784 	.word	0x20000784
 8003c18:	20000be4 	.word	0x20000be4
 8003c1c:	20000bf8 	.word	0x20000bf8
 8003c20:	20000c14 	.word	0x20000c14
 8003c24:	20000c28 	.word	0x20000c28
 8003c28:	20000c40 	.word	0x20000c40
 8003c2c:	20000c0c 	.word	0x20000c0c
 8003c30:	20000c10 	.word	0x20000c10

08003c34 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b082      	sub	sp, #8
 8003c38:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003c3a:	e019      	b.n	8003c70 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003c3c:	f000 fdd2 	bl	80047e4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c40:	4b10      	ldr	r3, [pc, #64]	; (8003c84 <prvCheckTasksWaitingTermination+0x50>)
 8003c42:	68db      	ldr	r3, [r3, #12]
 8003c44:	68db      	ldr	r3, [r3, #12]
 8003c46:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	3304      	adds	r3, #4
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	f7fe fd3b 	bl	80026c8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003c52:	4b0d      	ldr	r3, [pc, #52]	; (8003c88 <prvCheckTasksWaitingTermination+0x54>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	3b01      	subs	r3, #1
 8003c58:	4a0b      	ldr	r2, [pc, #44]	; (8003c88 <prvCheckTasksWaitingTermination+0x54>)
 8003c5a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003c5c:	4b0b      	ldr	r3, [pc, #44]	; (8003c8c <prvCheckTasksWaitingTermination+0x58>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	3b01      	subs	r3, #1
 8003c62:	4a0a      	ldr	r2, [pc, #40]	; (8003c8c <prvCheckTasksWaitingTermination+0x58>)
 8003c64:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003c66:	f000 fded 	bl	8004844 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003c6a:	6878      	ldr	r0, [r7, #4]
 8003c6c:	f000 f810 	bl	8003c90 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003c70:	4b06      	ldr	r3, [pc, #24]	; (8003c8c <prvCheckTasksWaitingTermination+0x58>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d1e1      	bne.n	8003c3c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003c78:	bf00      	nop
 8003c7a:	bf00      	nop
 8003c7c:	3708      	adds	r7, #8
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}
 8003c82:	bf00      	nop
 8003c84:	20000c28 	.word	0x20000c28
 8003c88:	20000c54 	.word	0x20000c54
 8003c8c:	20000c3c 	.word	0x20000c3c

08003c90 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b084      	sub	sp, #16
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d108      	bne.n	8003cb4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	f000 ff8a 	bl	8004bc0 <vPortFree>
				vPortFree( pxTCB );
 8003cac:	6878      	ldr	r0, [r7, #4]
 8003cae:	f000 ff87 	bl	8004bc0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003cb2:	e018      	b.n	8003ce6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003cba:	2b01      	cmp	r3, #1
 8003cbc:	d103      	bne.n	8003cc6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003cbe:	6878      	ldr	r0, [r7, #4]
 8003cc0:	f000 ff7e 	bl	8004bc0 <vPortFree>
	}
 8003cc4:	e00f      	b.n	8003ce6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003ccc:	2b02      	cmp	r3, #2
 8003cce:	d00a      	beq.n	8003ce6 <prvDeleteTCB+0x56>
	__asm volatile
 8003cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cd4:	f383 8811 	msr	BASEPRI, r3
 8003cd8:	f3bf 8f6f 	isb	sy
 8003cdc:	f3bf 8f4f 	dsb	sy
 8003ce0:	60fb      	str	r3, [r7, #12]
}
 8003ce2:	bf00      	nop
 8003ce4:	e7fe      	b.n	8003ce4 <prvDeleteTCB+0x54>
	}
 8003ce6:	bf00      	nop
 8003ce8:	3710      	adds	r7, #16
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}
	...

08003cf0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b083      	sub	sp, #12
 8003cf4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003cf6:	4b0c      	ldr	r3, [pc, #48]	; (8003d28 <prvResetNextTaskUnblockTime+0x38>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d104      	bne.n	8003d0a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003d00:	4b0a      	ldr	r3, [pc, #40]	; (8003d2c <prvResetNextTaskUnblockTime+0x3c>)
 8003d02:	f04f 32ff 	mov.w	r2, #4294967295
 8003d06:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003d08:	e008      	b.n	8003d1c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d0a:	4b07      	ldr	r3, [pc, #28]	; (8003d28 <prvResetNextTaskUnblockTime+0x38>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	68db      	ldr	r3, [r3, #12]
 8003d10:	68db      	ldr	r3, [r3, #12]
 8003d12:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	4a04      	ldr	r2, [pc, #16]	; (8003d2c <prvResetNextTaskUnblockTime+0x3c>)
 8003d1a:	6013      	str	r3, [r2, #0]
}
 8003d1c:	bf00      	nop
 8003d1e:	370c      	adds	r7, #12
 8003d20:	46bd      	mov	sp, r7
 8003d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d26:	4770      	bx	lr
 8003d28:	20000c0c 	.word	0x20000c0c
 8003d2c:	20000c74 	.word	0x20000c74

08003d30 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003d30:	b480      	push	{r7}
 8003d32:	b083      	sub	sp, #12
 8003d34:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003d36:	4b0b      	ldr	r3, [pc, #44]	; (8003d64 <xTaskGetSchedulerState+0x34>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d102      	bne.n	8003d44 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	607b      	str	r3, [r7, #4]
 8003d42:	e008      	b.n	8003d56 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d44:	4b08      	ldr	r3, [pc, #32]	; (8003d68 <xTaskGetSchedulerState+0x38>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d102      	bne.n	8003d52 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003d4c:	2302      	movs	r3, #2
 8003d4e:	607b      	str	r3, [r7, #4]
 8003d50:	e001      	b.n	8003d56 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003d52:	2300      	movs	r3, #0
 8003d54:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003d56:	687b      	ldr	r3, [r7, #4]
	}
 8003d58:	4618      	mov	r0, r3
 8003d5a:	370c      	adds	r7, #12
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d62:	4770      	bx	lr
 8003d64:	20000c60 	.word	0x20000c60
 8003d68:	20000c7c 	.word	0x20000c7c

08003d6c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b086      	sub	sp, #24
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003d78:	2300      	movs	r3, #0
 8003d7a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d056      	beq.n	8003e30 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003d82:	4b2e      	ldr	r3, [pc, #184]	; (8003e3c <xTaskPriorityDisinherit+0xd0>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	693a      	ldr	r2, [r7, #16]
 8003d88:	429a      	cmp	r2, r3
 8003d8a:	d00a      	beq.n	8003da2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8003d8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d90:	f383 8811 	msr	BASEPRI, r3
 8003d94:	f3bf 8f6f 	isb	sy
 8003d98:	f3bf 8f4f 	dsb	sy
 8003d9c:	60fb      	str	r3, [r7, #12]
}
 8003d9e:	bf00      	nop
 8003da0:	e7fe      	b.n	8003da0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d10a      	bne.n	8003dc0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8003daa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dae:	f383 8811 	msr	BASEPRI, r3
 8003db2:	f3bf 8f6f 	isb	sy
 8003db6:	f3bf 8f4f 	dsb	sy
 8003dba:	60bb      	str	r3, [r7, #8]
}
 8003dbc:	bf00      	nop
 8003dbe:	e7fe      	b.n	8003dbe <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8003dc0:	693b      	ldr	r3, [r7, #16]
 8003dc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dc4:	1e5a      	subs	r2, r3, #1
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dd2:	429a      	cmp	r2, r3
 8003dd4:	d02c      	beq.n	8003e30 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d128      	bne.n	8003e30 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	3304      	adds	r3, #4
 8003de2:	4618      	mov	r0, r3
 8003de4:	f7fe fc70 	bl	80026c8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003dec:	693b      	ldr	r3, [r7, #16]
 8003dee:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003df0:	693b      	ldr	r3, [r7, #16]
 8003df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003df4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003dfc:	693b      	ldr	r3, [r7, #16]
 8003dfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e00:	4b0f      	ldr	r3, [pc, #60]	; (8003e40 <xTaskPriorityDisinherit+0xd4>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	429a      	cmp	r2, r3
 8003e06:	d903      	bls.n	8003e10 <xTaskPriorityDisinherit+0xa4>
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e0c:	4a0c      	ldr	r2, [pc, #48]	; (8003e40 <xTaskPriorityDisinherit+0xd4>)
 8003e0e:	6013      	str	r3, [r2, #0]
 8003e10:	693b      	ldr	r3, [r7, #16]
 8003e12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e14:	4613      	mov	r3, r2
 8003e16:	009b      	lsls	r3, r3, #2
 8003e18:	4413      	add	r3, r2
 8003e1a:	009b      	lsls	r3, r3, #2
 8003e1c:	4a09      	ldr	r2, [pc, #36]	; (8003e44 <xTaskPriorityDisinherit+0xd8>)
 8003e1e:	441a      	add	r2, r3
 8003e20:	693b      	ldr	r3, [r7, #16]
 8003e22:	3304      	adds	r3, #4
 8003e24:	4619      	mov	r1, r3
 8003e26:	4610      	mov	r0, r2
 8003e28:	f7fe fbf1 	bl	800260e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003e30:	697b      	ldr	r3, [r7, #20]
	}
 8003e32:	4618      	mov	r0, r3
 8003e34:	3718      	adds	r7, #24
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bd80      	pop	{r7, pc}
 8003e3a:	bf00      	nop
 8003e3c:	20000780 	.word	0x20000780
 8003e40:	20000c5c 	.word	0x20000c5c
 8003e44:	20000784 	.word	0x20000784

08003e48 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b084      	sub	sp, #16
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
 8003e50:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003e52:	4b21      	ldr	r3, [pc, #132]	; (8003ed8 <prvAddCurrentTaskToDelayedList+0x90>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003e58:	4b20      	ldr	r3, [pc, #128]	; (8003edc <prvAddCurrentTaskToDelayedList+0x94>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	3304      	adds	r3, #4
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f7fe fc32 	bl	80026c8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e6a:	d10a      	bne.n	8003e82 <prvAddCurrentTaskToDelayedList+0x3a>
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d007      	beq.n	8003e82 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003e72:	4b1a      	ldr	r3, [pc, #104]	; (8003edc <prvAddCurrentTaskToDelayedList+0x94>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	3304      	adds	r3, #4
 8003e78:	4619      	mov	r1, r3
 8003e7a:	4819      	ldr	r0, [pc, #100]	; (8003ee0 <prvAddCurrentTaskToDelayedList+0x98>)
 8003e7c:	f7fe fbc7 	bl	800260e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003e80:	e026      	b.n	8003ed0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003e82:	68fa      	ldr	r2, [r7, #12]
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	4413      	add	r3, r2
 8003e88:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003e8a:	4b14      	ldr	r3, [pc, #80]	; (8003edc <prvAddCurrentTaskToDelayedList+0x94>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	68ba      	ldr	r2, [r7, #8]
 8003e90:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003e92:	68ba      	ldr	r2, [r7, #8]
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	429a      	cmp	r2, r3
 8003e98:	d209      	bcs.n	8003eae <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003e9a:	4b12      	ldr	r3, [pc, #72]	; (8003ee4 <prvAddCurrentTaskToDelayedList+0x9c>)
 8003e9c:	681a      	ldr	r2, [r3, #0]
 8003e9e:	4b0f      	ldr	r3, [pc, #60]	; (8003edc <prvAddCurrentTaskToDelayedList+0x94>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	3304      	adds	r3, #4
 8003ea4:	4619      	mov	r1, r3
 8003ea6:	4610      	mov	r0, r2
 8003ea8:	f7fe fbd5 	bl	8002656 <vListInsert>
}
 8003eac:	e010      	b.n	8003ed0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003eae:	4b0e      	ldr	r3, [pc, #56]	; (8003ee8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8003eb0:	681a      	ldr	r2, [r3, #0]
 8003eb2:	4b0a      	ldr	r3, [pc, #40]	; (8003edc <prvAddCurrentTaskToDelayedList+0x94>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	3304      	adds	r3, #4
 8003eb8:	4619      	mov	r1, r3
 8003eba:	4610      	mov	r0, r2
 8003ebc:	f7fe fbcb 	bl	8002656 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003ec0:	4b0a      	ldr	r3, [pc, #40]	; (8003eec <prvAddCurrentTaskToDelayedList+0xa4>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	68ba      	ldr	r2, [r7, #8]
 8003ec6:	429a      	cmp	r2, r3
 8003ec8:	d202      	bcs.n	8003ed0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003eca:	4a08      	ldr	r2, [pc, #32]	; (8003eec <prvAddCurrentTaskToDelayedList+0xa4>)
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	6013      	str	r3, [r2, #0]
}
 8003ed0:	bf00      	nop
 8003ed2:	3710      	adds	r7, #16
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bd80      	pop	{r7, pc}
 8003ed8:	20000c58 	.word	0x20000c58
 8003edc:	20000780 	.word	0x20000780
 8003ee0:	20000c40 	.word	0x20000c40
 8003ee4:	20000c10 	.word	0x20000c10
 8003ee8:	20000c0c 	.word	0x20000c0c
 8003eec:	20000c74 	.word	0x20000c74

08003ef0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b08a      	sub	sp, #40	; 0x28
 8003ef4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003efa:	f000 fb07 	bl	800450c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003efe:	4b1c      	ldr	r3, [pc, #112]	; (8003f70 <xTimerCreateTimerTask+0x80>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d021      	beq.n	8003f4a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003f06:	2300      	movs	r3, #0
 8003f08:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003f0e:	1d3a      	adds	r2, r7, #4
 8003f10:	f107 0108 	add.w	r1, r7, #8
 8003f14:	f107 030c 	add.w	r3, r7, #12
 8003f18:	4618      	mov	r0, r3
 8003f1a:	f7fe fb31 	bl	8002580 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003f1e:	6879      	ldr	r1, [r7, #4]
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	68fa      	ldr	r2, [r7, #12]
 8003f24:	9202      	str	r2, [sp, #8]
 8003f26:	9301      	str	r3, [sp, #4]
 8003f28:	2302      	movs	r3, #2
 8003f2a:	9300      	str	r3, [sp, #0]
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	460a      	mov	r2, r1
 8003f30:	4910      	ldr	r1, [pc, #64]	; (8003f74 <xTimerCreateTimerTask+0x84>)
 8003f32:	4811      	ldr	r0, [pc, #68]	; (8003f78 <xTimerCreateTimerTask+0x88>)
 8003f34:	f7ff f8de 	bl	80030f4 <xTaskCreateStatic>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	4a10      	ldr	r2, [pc, #64]	; (8003f7c <xTimerCreateTimerTask+0x8c>)
 8003f3c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8003f3e:	4b0f      	ldr	r3, [pc, #60]	; (8003f7c <xTimerCreateTimerTask+0x8c>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d001      	beq.n	8003f4a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8003f46:	2301      	movs	r3, #1
 8003f48:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d10a      	bne.n	8003f66 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8003f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f54:	f383 8811 	msr	BASEPRI, r3
 8003f58:	f3bf 8f6f 	isb	sy
 8003f5c:	f3bf 8f4f 	dsb	sy
 8003f60:	613b      	str	r3, [r7, #16]
}
 8003f62:	bf00      	nop
 8003f64:	e7fe      	b.n	8003f64 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8003f66:	697b      	ldr	r3, [r7, #20]
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	3718      	adds	r7, #24
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}
 8003f70:	20000cb0 	.word	0x20000cb0
 8003f74:	08004eb0 	.word	0x08004eb0
 8003f78:	080040b5 	.word	0x080040b5
 8003f7c:	20000cb4 	.word	0x20000cb4

08003f80 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b08a      	sub	sp, #40	; 0x28
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	60f8      	str	r0, [r7, #12]
 8003f88:	60b9      	str	r1, [r7, #8]
 8003f8a:	607a      	str	r2, [r7, #4]
 8003f8c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8003f8e:	2300      	movs	r3, #0
 8003f90:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d10a      	bne.n	8003fae <xTimerGenericCommand+0x2e>
	__asm volatile
 8003f98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f9c:	f383 8811 	msr	BASEPRI, r3
 8003fa0:	f3bf 8f6f 	isb	sy
 8003fa4:	f3bf 8f4f 	dsb	sy
 8003fa8:	623b      	str	r3, [r7, #32]
}
 8003faa:	bf00      	nop
 8003fac:	e7fe      	b.n	8003fac <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003fae:	4b1a      	ldr	r3, [pc, #104]	; (8004018 <xTimerGenericCommand+0x98>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d02a      	beq.n	800400c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003fb6:	68bb      	ldr	r3, [r7, #8]
 8003fb8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	2b05      	cmp	r3, #5
 8003fc6:	dc18      	bgt.n	8003ffa <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003fc8:	f7ff feb2 	bl	8003d30 <xTaskGetSchedulerState>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	2b02      	cmp	r3, #2
 8003fd0:	d109      	bne.n	8003fe6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003fd2:	4b11      	ldr	r3, [pc, #68]	; (8004018 <xTimerGenericCommand+0x98>)
 8003fd4:	6818      	ldr	r0, [r3, #0]
 8003fd6:	f107 0110 	add.w	r1, r7, #16
 8003fda:	2300      	movs	r3, #0
 8003fdc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003fde:	f7fe fca1 	bl	8002924 <xQueueGenericSend>
 8003fe2:	6278      	str	r0, [r7, #36]	; 0x24
 8003fe4:	e012      	b.n	800400c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003fe6:	4b0c      	ldr	r3, [pc, #48]	; (8004018 <xTimerGenericCommand+0x98>)
 8003fe8:	6818      	ldr	r0, [r3, #0]
 8003fea:	f107 0110 	add.w	r1, r7, #16
 8003fee:	2300      	movs	r3, #0
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	f7fe fc97 	bl	8002924 <xQueueGenericSend>
 8003ff6:	6278      	str	r0, [r7, #36]	; 0x24
 8003ff8:	e008      	b.n	800400c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003ffa:	4b07      	ldr	r3, [pc, #28]	; (8004018 <xTimerGenericCommand+0x98>)
 8003ffc:	6818      	ldr	r0, [r3, #0]
 8003ffe:	f107 0110 	add.w	r1, r7, #16
 8004002:	2300      	movs	r3, #0
 8004004:	683a      	ldr	r2, [r7, #0]
 8004006:	f7fe fd8b 	bl	8002b20 <xQueueGenericSendFromISR>
 800400a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800400c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800400e:	4618      	mov	r0, r3
 8004010:	3728      	adds	r7, #40	; 0x28
 8004012:	46bd      	mov	sp, r7
 8004014:	bd80      	pop	{r7, pc}
 8004016:	bf00      	nop
 8004018:	20000cb0 	.word	0x20000cb0

0800401c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b088      	sub	sp, #32
 8004020:	af02      	add	r7, sp, #8
 8004022:	6078      	str	r0, [r7, #4]
 8004024:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004026:	4b22      	ldr	r3, [pc, #136]	; (80040b0 <prvProcessExpiredTimer+0x94>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	68db      	ldr	r3, [r3, #12]
 800402c:	68db      	ldr	r3, [r3, #12]
 800402e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004030:	697b      	ldr	r3, [r7, #20]
 8004032:	3304      	adds	r3, #4
 8004034:	4618      	mov	r0, r3
 8004036:	f7fe fb47 	bl	80026c8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004040:	f003 0304 	and.w	r3, r3, #4
 8004044:	2b00      	cmp	r3, #0
 8004046:	d022      	beq.n	800408e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004048:	697b      	ldr	r3, [r7, #20]
 800404a:	699a      	ldr	r2, [r3, #24]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	18d1      	adds	r1, r2, r3
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	683a      	ldr	r2, [r7, #0]
 8004054:	6978      	ldr	r0, [r7, #20]
 8004056:	f000 f8d1 	bl	80041fc <prvInsertTimerInActiveList>
 800405a:	4603      	mov	r3, r0
 800405c:	2b00      	cmp	r3, #0
 800405e:	d01f      	beq.n	80040a0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004060:	2300      	movs	r3, #0
 8004062:	9300      	str	r3, [sp, #0]
 8004064:	2300      	movs	r3, #0
 8004066:	687a      	ldr	r2, [r7, #4]
 8004068:	2100      	movs	r1, #0
 800406a:	6978      	ldr	r0, [r7, #20]
 800406c:	f7ff ff88 	bl	8003f80 <xTimerGenericCommand>
 8004070:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d113      	bne.n	80040a0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8004078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800407c:	f383 8811 	msr	BASEPRI, r3
 8004080:	f3bf 8f6f 	isb	sy
 8004084:	f3bf 8f4f 	dsb	sy
 8004088:	60fb      	str	r3, [r7, #12]
}
 800408a:	bf00      	nop
 800408c:	e7fe      	b.n	800408c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004094:	f023 0301 	bic.w	r3, r3, #1
 8004098:	b2da      	uxtb	r2, r3
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80040a0:	697b      	ldr	r3, [r7, #20]
 80040a2:	6a1b      	ldr	r3, [r3, #32]
 80040a4:	6978      	ldr	r0, [r7, #20]
 80040a6:	4798      	blx	r3
}
 80040a8:	bf00      	nop
 80040aa:	3718      	adds	r7, #24
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bd80      	pop	{r7, pc}
 80040b0:	20000ca8 	.word	0x20000ca8

080040b4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b084      	sub	sp, #16
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80040bc:	f107 0308 	add.w	r3, r7, #8
 80040c0:	4618      	mov	r0, r3
 80040c2:	f000 f857 	bl	8004174 <prvGetNextExpireTime>
 80040c6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	4619      	mov	r1, r3
 80040cc:	68f8      	ldr	r0, [r7, #12]
 80040ce:	f000 f803 	bl	80040d8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80040d2:	f000 f8d5 	bl	8004280 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80040d6:	e7f1      	b.n	80040bc <prvTimerTask+0x8>

080040d8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b084      	sub	sp, #16
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
 80040e0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80040e2:	f7ff fa43 	bl	800356c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80040e6:	f107 0308 	add.w	r3, r7, #8
 80040ea:	4618      	mov	r0, r3
 80040ec:	f000 f866 	bl	80041bc <prvSampleTimeNow>
 80040f0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80040f2:	68bb      	ldr	r3, [r7, #8]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d130      	bne.n	800415a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d10a      	bne.n	8004114 <prvProcessTimerOrBlockTask+0x3c>
 80040fe:	687a      	ldr	r2, [r7, #4]
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	429a      	cmp	r2, r3
 8004104:	d806      	bhi.n	8004114 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004106:	f7ff fa3f 	bl	8003588 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800410a:	68f9      	ldr	r1, [r7, #12]
 800410c:	6878      	ldr	r0, [r7, #4]
 800410e:	f7ff ff85 	bl	800401c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004112:	e024      	b.n	800415e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d008      	beq.n	800412c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800411a:	4b13      	ldr	r3, [pc, #76]	; (8004168 <prvProcessTimerOrBlockTask+0x90>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d101      	bne.n	8004128 <prvProcessTimerOrBlockTask+0x50>
 8004124:	2301      	movs	r3, #1
 8004126:	e000      	b.n	800412a <prvProcessTimerOrBlockTask+0x52>
 8004128:	2300      	movs	r3, #0
 800412a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800412c:	4b0f      	ldr	r3, [pc, #60]	; (800416c <prvProcessTimerOrBlockTask+0x94>)
 800412e:	6818      	ldr	r0, [r3, #0]
 8004130:	687a      	ldr	r2, [r7, #4]
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	1ad3      	subs	r3, r2, r3
 8004136:	683a      	ldr	r2, [r7, #0]
 8004138:	4619      	mov	r1, r3
 800413a:	f7fe ffa7 	bl	800308c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800413e:	f7ff fa23 	bl	8003588 <xTaskResumeAll>
 8004142:	4603      	mov	r3, r0
 8004144:	2b00      	cmp	r3, #0
 8004146:	d10a      	bne.n	800415e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004148:	4b09      	ldr	r3, [pc, #36]	; (8004170 <prvProcessTimerOrBlockTask+0x98>)
 800414a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800414e:	601a      	str	r2, [r3, #0]
 8004150:	f3bf 8f4f 	dsb	sy
 8004154:	f3bf 8f6f 	isb	sy
}
 8004158:	e001      	b.n	800415e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800415a:	f7ff fa15 	bl	8003588 <xTaskResumeAll>
}
 800415e:	bf00      	nop
 8004160:	3710      	adds	r7, #16
 8004162:	46bd      	mov	sp, r7
 8004164:	bd80      	pop	{r7, pc}
 8004166:	bf00      	nop
 8004168:	20000cac 	.word	0x20000cac
 800416c:	20000cb0 	.word	0x20000cb0
 8004170:	e000ed04 	.word	0xe000ed04

08004174 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004174:	b480      	push	{r7}
 8004176:	b085      	sub	sp, #20
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800417c:	4b0e      	ldr	r3, [pc, #56]	; (80041b8 <prvGetNextExpireTime+0x44>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d101      	bne.n	800418a <prvGetNextExpireTime+0x16>
 8004186:	2201      	movs	r2, #1
 8004188:	e000      	b.n	800418c <prvGetNextExpireTime+0x18>
 800418a:	2200      	movs	r2, #0
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d105      	bne.n	80041a4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004198:	4b07      	ldr	r3, [pc, #28]	; (80041b8 <prvGetNextExpireTime+0x44>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	68db      	ldr	r3, [r3, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	60fb      	str	r3, [r7, #12]
 80041a2:	e001      	b.n	80041a8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80041a4:	2300      	movs	r3, #0
 80041a6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80041a8:	68fb      	ldr	r3, [r7, #12]
}
 80041aa:	4618      	mov	r0, r3
 80041ac:	3714      	adds	r7, #20
 80041ae:	46bd      	mov	sp, r7
 80041b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b4:	4770      	bx	lr
 80041b6:	bf00      	nop
 80041b8:	20000ca8 	.word	0x20000ca8

080041bc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b084      	sub	sp, #16
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80041c4:	f7ff fa7e 	bl	80036c4 <xTaskGetTickCount>
 80041c8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80041ca:	4b0b      	ldr	r3, [pc, #44]	; (80041f8 <prvSampleTimeNow+0x3c>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	68fa      	ldr	r2, [r7, #12]
 80041d0:	429a      	cmp	r2, r3
 80041d2:	d205      	bcs.n	80041e0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80041d4:	f000 f936 	bl	8004444 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2201      	movs	r2, #1
 80041dc:	601a      	str	r2, [r3, #0]
 80041de:	e002      	b.n	80041e6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2200      	movs	r2, #0
 80041e4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80041e6:	4a04      	ldr	r2, [pc, #16]	; (80041f8 <prvSampleTimeNow+0x3c>)
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80041ec:	68fb      	ldr	r3, [r7, #12]
}
 80041ee:	4618      	mov	r0, r3
 80041f0:	3710      	adds	r7, #16
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bd80      	pop	{r7, pc}
 80041f6:	bf00      	nop
 80041f8:	20000cb8 	.word	0x20000cb8

080041fc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b086      	sub	sp, #24
 8004200:	af00      	add	r7, sp, #0
 8004202:	60f8      	str	r0, [r7, #12]
 8004204:	60b9      	str	r1, [r7, #8]
 8004206:	607a      	str	r2, [r7, #4]
 8004208:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800420a:	2300      	movs	r3, #0
 800420c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	68ba      	ldr	r2, [r7, #8]
 8004212:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	68fa      	ldr	r2, [r7, #12]
 8004218:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800421a:	68ba      	ldr	r2, [r7, #8]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	429a      	cmp	r2, r3
 8004220:	d812      	bhi.n	8004248 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004222:	687a      	ldr	r2, [r7, #4]
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	1ad2      	subs	r2, r2, r3
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	699b      	ldr	r3, [r3, #24]
 800422c:	429a      	cmp	r2, r3
 800422e:	d302      	bcc.n	8004236 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004230:	2301      	movs	r3, #1
 8004232:	617b      	str	r3, [r7, #20]
 8004234:	e01b      	b.n	800426e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004236:	4b10      	ldr	r3, [pc, #64]	; (8004278 <prvInsertTimerInActiveList+0x7c>)
 8004238:	681a      	ldr	r2, [r3, #0]
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	3304      	adds	r3, #4
 800423e:	4619      	mov	r1, r3
 8004240:	4610      	mov	r0, r2
 8004242:	f7fe fa08 	bl	8002656 <vListInsert>
 8004246:	e012      	b.n	800426e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004248:	687a      	ldr	r2, [r7, #4]
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	429a      	cmp	r2, r3
 800424e:	d206      	bcs.n	800425e <prvInsertTimerInActiveList+0x62>
 8004250:	68ba      	ldr	r2, [r7, #8]
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	429a      	cmp	r2, r3
 8004256:	d302      	bcc.n	800425e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004258:	2301      	movs	r3, #1
 800425a:	617b      	str	r3, [r7, #20]
 800425c:	e007      	b.n	800426e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800425e:	4b07      	ldr	r3, [pc, #28]	; (800427c <prvInsertTimerInActiveList+0x80>)
 8004260:	681a      	ldr	r2, [r3, #0]
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	3304      	adds	r3, #4
 8004266:	4619      	mov	r1, r3
 8004268:	4610      	mov	r0, r2
 800426a:	f7fe f9f4 	bl	8002656 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800426e:	697b      	ldr	r3, [r7, #20]
}
 8004270:	4618      	mov	r0, r3
 8004272:	3718      	adds	r7, #24
 8004274:	46bd      	mov	sp, r7
 8004276:	bd80      	pop	{r7, pc}
 8004278:	20000cac 	.word	0x20000cac
 800427c:	20000ca8 	.word	0x20000ca8

08004280 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b08e      	sub	sp, #56	; 0x38
 8004284:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004286:	e0ca      	b.n	800441e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2b00      	cmp	r3, #0
 800428c:	da18      	bge.n	80042c0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800428e:	1d3b      	adds	r3, r7, #4
 8004290:	3304      	adds	r3, #4
 8004292:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004296:	2b00      	cmp	r3, #0
 8004298:	d10a      	bne.n	80042b0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800429a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800429e:	f383 8811 	msr	BASEPRI, r3
 80042a2:	f3bf 8f6f 	isb	sy
 80042a6:	f3bf 8f4f 	dsb	sy
 80042aa:	61fb      	str	r3, [r7, #28]
}
 80042ac:	bf00      	nop
 80042ae:	e7fe      	b.n	80042ae <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80042b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80042b6:	6850      	ldr	r0, [r2, #4]
 80042b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80042ba:	6892      	ldr	r2, [r2, #8]
 80042bc:	4611      	mov	r1, r2
 80042be:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	f2c0 80ab 	blt.w	800441e <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80042cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042ce:	695b      	ldr	r3, [r3, #20]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d004      	beq.n	80042de <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80042d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042d6:	3304      	adds	r3, #4
 80042d8:	4618      	mov	r0, r3
 80042da:	f7fe f9f5 	bl	80026c8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80042de:	463b      	mov	r3, r7
 80042e0:	4618      	mov	r0, r3
 80042e2:	f7ff ff6b 	bl	80041bc <prvSampleTimeNow>
 80042e6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2b09      	cmp	r3, #9
 80042ec:	f200 8096 	bhi.w	800441c <prvProcessReceivedCommands+0x19c>
 80042f0:	a201      	add	r2, pc, #4	; (adr r2, 80042f8 <prvProcessReceivedCommands+0x78>)
 80042f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042f6:	bf00      	nop
 80042f8:	08004321 	.word	0x08004321
 80042fc:	08004321 	.word	0x08004321
 8004300:	08004321 	.word	0x08004321
 8004304:	08004395 	.word	0x08004395
 8004308:	080043a9 	.word	0x080043a9
 800430c:	080043f3 	.word	0x080043f3
 8004310:	08004321 	.word	0x08004321
 8004314:	08004321 	.word	0x08004321
 8004318:	08004395 	.word	0x08004395
 800431c:	080043a9 	.word	0x080043a9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004322:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004326:	f043 0301 	orr.w	r3, r3, #1
 800432a:	b2da      	uxtb	r2, r3
 800432c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800432e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004332:	68ba      	ldr	r2, [r7, #8]
 8004334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004336:	699b      	ldr	r3, [r3, #24]
 8004338:	18d1      	adds	r1, r2, r3
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800433e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004340:	f7ff ff5c 	bl	80041fc <prvInsertTimerInActiveList>
 8004344:	4603      	mov	r3, r0
 8004346:	2b00      	cmp	r3, #0
 8004348:	d069      	beq.n	800441e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800434a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800434c:	6a1b      	ldr	r3, [r3, #32]
 800434e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004350:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004354:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004358:	f003 0304 	and.w	r3, r3, #4
 800435c:	2b00      	cmp	r3, #0
 800435e:	d05e      	beq.n	800441e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004360:	68ba      	ldr	r2, [r7, #8]
 8004362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004364:	699b      	ldr	r3, [r3, #24]
 8004366:	441a      	add	r2, r3
 8004368:	2300      	movs	r3, #0
 800436a:	9300      	str	r3, [sp, #0]
 800436c:	2300      	movs	r3, #0
 800436e:	2100      	movs	r1, #0
 8004370:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004372:	f7ff fe05 	bl	8003f80 <xTimerGenericCommand>
 8004376:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004378:	6a3b      	ldr	r3, [r7, #32]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d14f      	bne.n	800441e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800437e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004382:	f383 8811 	msr	BASEPRI, r3
 8004386:	f3bf 8f6f 	isb	sy
 800438a:	f3bf 8f4f 	dsb	sy
 800438e:	61bb      	str	r3, [r7, #24]
}
 8004390:	bf00      	nop
 8004392:	e7fe      	b.n	8004392 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004396:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800439a:	f023 0301 	bic.w	r3, r3, #1
 800439e:	b2da      	uxtb	r2, r3
 80043a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80043a6:	e03a      	b.n	800441e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80043a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80043ae:	f043 0301 	orr.w	r3, r3, #1
 80043b2:	b2da      	uxtb	r2, r3
 80043b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80043ba:	68ba      	ldr	r2, [r7, #8]
 80043bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043be:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80043c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043c2:	699b      	ldr	r3, [r3, #24]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d10a      	bne.n	80043de <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80043c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043cc:	f383 8811 	msr	BASEPRI, r3
 80043d0:	f3bf 8f6f 	isb	sy
 80043d4:	f3bf 8f4f 	dsb	sy
 80043d8:	617b      	str	r3, [r7, #20]
}
 80043da:	bf00      	nop
 80043dc:	e7fe      	b.n	80043dc <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80043de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043e0:	699a      	ldr	r2, [r3, #24]
 80043e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e4:	18d1      	adds	r1, r2, r3
 80043e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80043ec:	f7ff ff06 	bl	80041fc <prvInsertTimerInActiveList>
					break;
 80043f0:	e015      	b.n	800441e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80043f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80043f8:	f003 0302 	and.w	r3, r3, #2
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d103      	bne.n	8004408 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8004400:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004402:	f000 fbdd 	bl	8004bc0 <vPortFree>
 8004406:	e00a      	b.n	800441e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800440a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800440e:	f023 0301 	bic.w	r3, r3, #1
 8004412:	b2da      	uxtb	r2, r3
 8004414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004416:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800441a:	e000      	b.n	800441e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800441c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800441e:	4b08      	ldr	r3, [pc, #32]	; (8004440 <prvProcessReceivedCommands+0x1c0>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	1d39      	adds	r1, r7, #4
 8004424:	2200      	movs	r2, #0
 8004426:	4618      	mov	r0, r3
 8004428:	f7fe fc16 	bl	8002c58 <xQueueReceive>
 800442c:	4603      	mov	r3, r0
 800442e:	2b00      	cmp	r3, #0
 8004430:	f47f af2a 	bne.w	8004288 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8004434:	bf00      	nop
 8004436:	bf00      	nop
 8004438:	3730      	adds	r7, #48	; 0x30
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}
 800443e:	bf00      	nop
 8004440:	20000cb0 	.word	0x20000cb0

08004444 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b088      	sub	sp, #32
 8004448:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800444a:	e048      	b.n	80044de <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800444c:	4b2d      	ldr	r3, [pc, #180]	; (8004504 <prvSwitchTimerLists+0xc0>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	68db      	ldr	r3, [r3, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004456:	4b2b      	ldr	r3, [pc, #172]	; (8004504 <prvSwitchTimerLists+0xc0>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	68db      	ldr	r3, [r3, #12]
 800445c:	68db      	ldr	r3, [r3, #12]
 800445e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	3304      	adds	r3, #4
 8004464:	4618      	mov	r0, r3
 8004466:	f7fe f92f 	bl	80026c8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	6a1b      	ldr	r3, [r3, #32]
 800446e:	68f8      	ldr	r0, [r7, #12]
 8004470:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004478:	f003 0304 	and.w	r3, r3, #4
 800447c:	2b00      	cmp	r3, #0
 800447e:	d02e      	beq.n	80044de <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	699b      	ldr	r3, [r3, #24]
 8004484:	693a      	ldr	r2, [r7, #16]
 8004486:	4413      	add	r3, r2
 8004488:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800448a:	68ba      	ldr	r2, [r7, #8]
 800448c:	693b      	ldr	r3, [r7, #16]
 800448e:	429a      	cmp	r2, r3
 8004490:	d90e      	bls.n	80044b0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	68ba      	ldr	r2, [r7, #8]
 8004496:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	68fa      	ldr	r2, [r7, #12]
 800449c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800449e:	4b19      	ldr	r3, [pc, #100]	; (8004504 <prvSwitchTimerLists+0xc0>)
 80044a0:	681a      	ldr	r2, [r3, #0]
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	3304      	adds	r3, #4
 80044a6:	4619      	mov	r1, r3
 80044a8:	4610      	mov	r0, r2
 80044aa:	f7fe f8d4 	bl	8002656 <vListInsert>
 80044ae:	e016      	b.n	80044de <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80044b0:	2300      	movs	r3, #0
 80044b2:	9300      	str	r3, [sp, #0]
 80044b4:	2300      	movs	r3, #0
 80044b6:	693a      	ldr	r2, [r7, #16]
 80044b8:	2100      	movs	r1, #0
 80044ba:	68f8      	ldr	r0, [r7, #12]
 80044bc:	f7ff fd60 	bl	8003f80 <xTimerGenericCommand>
 80044c0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d10a      	bne.n	80044de <prvSwitchTimerLists+0x9a>
	__asm volatile
 80044c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044cc:	f383 8811 	msr	BASEPRI, r3
 80044d0:	f3bf 8f6f 	isb	sy
 80044d4:	f3bf 8f4f 	dsb	sy
 80044d8:	603b      	str	r3, [r7, #0]
}
 80044da:	bf00      	nop
 80044dc:	e7fe      	b.n	80044dc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80044de:	4b09      	ldr	r3, [pc, #36]	; (8004504 <prvSwitchTimerLists+0xc0>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d1b1      	bne.n	800444c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80044e8:	4b06      	ldr	r3, [pc, #24]	; (8004504 <prvSwitchTimerLists+0xc0>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80044ee:	4b06      	ldr	r3, [pc, #24]	; (8004508 <prvSwitchTimerLists+0xc4>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a04      	ldr	r2, [pc, #16]	; (8004504 <prvSwitchTimerLists+0xc0>)
 80044f4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80044f6:	4a04      	ldr	r2, [pc, #16]	; (8004508 <prvSwitchTimerLists+0xc4>)
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	6013      	str	r3, [r2, #0]
}
 80044fc:	bf00      	nop
 80044fe:	3718      	adds	r7, #24
 8004500:	46bd      	mov	sp, r7
 8004502:	bd80      	pop	{r7, pc}
 8004504:	20000ca8 	.word	0x20000ca8
 8004508:	20000cac 	.word	0x20000cac

0800450c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b082      	sub	sp, #8
 8004510:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004512:	f000 f967 	bl	80047e4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004516:	4b15      	ldr	r3, [pc, #84]	; (800456c <prvCheckForValidListAndQueue+0x60>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d120      	bne.n	8004560 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800451e:	4814      	ldr	r0, [pc, #80]	; (8004570 <prvCheckForValidListAndQueue+0x64>)
 8004520:	f7fe f848 	bl	80025b4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004524:	4813      	ldr	r0, [pc, #76]	; (8004574 <prvCheckForValidListAndQueue+0x68>)
 8004526:	f7fe f845 	bl	80025b4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800452a:	4b13      	ldr	r3, [pc, #76]	; (8004578 <prvCheckForValidListAndQueue+0x6c>)
 800452c:	4a10      	ldr	r2, [pc, #64]	; (8004570 <prvCheckForValidListAndQueue+0x64>)
 800452e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004530:	4b12      	ldr	r3, [pc, #72]	; (800457c <prvCheckForValidListAndQueue+0x70>)
 8004532:	4a10      	ldr	r2, [pc, #64]	; (8004574 <prvCheckForValidListAndQueue+0x68>)
 8004534:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004536:	2300      	movs	r3, #0
 8004538:	9300      	str	r3, [sp, #0]
 800453a:	4b11      	ldr	r3, [pc, #68]	; (8004580 <prvCheckForValidListAndQueue+0x74>)
 800453c:	4a11      	ldr	r2, [pc, #68]	; (8004584 <prvCheckForValidListAndQueue+0x78>)
 800453e:	2110      	movs	r1, #16
 8004540:	200a      	movs	r0, #10
 8004542:	f7fe f953 	bl	80027ec <xQueueGenericCreateStatic>
 8004546:	4603      	mov	r3, r0
 8004548:	4a08      	ldr	r2, [pc, #32]	; (800456c <prvCheckForValidListAndQueue+0x60>)
 800454a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800454c:	4b07      	ldr	r3, [pc, #28]	; (800456c <prvCheckForValidListAndQueue+0x60>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d005      	beq.n	8004560 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004554:	4b05      	ldr	r3, [pc, #20]	; (800456c <prvCheckForValidListAndQueue+0x60>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	490b      	ldr	r1, [pc, #44]	; (8004588 <prvCheckForValidListAndQueue+0x7c>)
 800455a:	4618      	mov	r0, r3
 800455c:	f7fe fd6c 	bl	8003038 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004560:	f000 f970 	bl	8004844 <vPortExitCritical>
}
 8004564:	bf00      	nop
 8004566:	46bd      	mov	sp, r7
 8004568:	bd80      	pop	{r7, pc}
 800456a:	bf00      	nop
 800456c:	20000cb0 	.word	0x20000cb0
 8004570:	20000c80 	.word	0x20000c80
 8004574:	20000c94 	.word	0x20000c94
 8004578:	20000ca8 	.word	0x20000ca8
 800457c:	20000cac 	.word	0x20000cac
 8004580:	20000d5c 	.word	0x20000d5c
 8004584:	20000cbc 	.word	0x20000cbc
 8004588:	08004eb8 	.word	0x08004eb8

0800458c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800458c:	b480      	push	{r7}
 800458e:	b085      	sub	sp, #20
 8004590:	af00      	add	r7, sp, #0
 8004592:	60f8      	str	r0, [r7, #12]
 8004594:	60b9      	str	r1, [r7, #8]
 8004596:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	3b04      	subs	r3, #4
 800459c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80045a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	3b04      	subs	r3, #4
 80045aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	f023 0201 	bic.w	r2, r3, #1
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	3b04      	subs	r3, #4
 80045ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80045bc:	4a0c      	ldr	r2, [pc, #48]	; (80045f0 <pxPortInitialiseStack+0x64>)
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	3b14      	subs	r3, #20
 80045c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80045c8:	687a      	ldr	r2, [r7, #4]
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	3b04      	subs	r3, #4
 80045d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	f06f 0202 	mvn.w	r2, #2
 80045da:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	3b20      	subs	r3, #32
 80045e0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80045e2:	68fb      	ldr	r3, [r7, #12]
}
 80045e4:	4618      	mov	r0, r3
 80045e6:	3714      	adds	r7, #20
 80045e8:	46bd      	mov	sp, r7
 80045ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ee:	4770      	bx	lr
 80045f0:	080045f5 	.word	0x080045f5

080045f4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80045f4:	b480      	push	{r7}
 80045f6:	b085      	sub	sp, #20
 80045f8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80045fa:	2300      	movs	r3, #0
 80045fc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80045fe:	4b12      	ldr	r3, [pc, #72]	; (8004648 <prvTaskExitError+0x54>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004606:	d00a      	beq.n	800461e <prvTaskExitError+0x2a>
	__asm volatile
 8004608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800460c:	f383 8811 	msr	BASEPRI, r3
 8004610:	f3bf 8f6f 	isb	sy
 8004614:	f3bf 8f4f 	dsb	sy
 8004618:	60fb      	str	r3, [r7, #12]
}
 800461a:	bf00      	nop
 800461c:	e7fe      	b.n	800461c <prvTaskExitError+0x28>
	__asm volatile
 800461e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004622:	f383 8811 	msr	BASEPRI, r3
 8004626:	f3bf 8f6f 	isb	sy
 800462a:	f3bf 8f4f 	dsb	sy
 800462e:	60bb      	str	r3, [r7, #8]
}
 8004630:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004632:	bf00      	nop
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d0fc      	beq.n	8004634 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800463a:	bf00      	nop
 800463c:	bf00      	nop
 800463e:	3714      	adds	r7, #20
 8004640:	46bd      	mov	sp, r7
 8004642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004646:	4770      	bx	lr
 8004648:	2000000c 	.word	0x2000000c
 800464c:	00000000 	.word	0x00000000

08004650 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004650:	4b07      	ldr	r3, [pc, #28]	; (8004670 <pxCurrentTCBConst2>)
 8004652:	6819      	ldr	r1, [r3, #0]
 8004654:	6808      	ldr	r0, [r1, #0]
 8004656:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800465a:	f380 8809 	msr	PSP, r0
 800465e:	f3bf 8f6f 	isb	sy
 8004662:	f04f 0000 	mov.w	r0, #0
 8004666:	f380 8811 	msr	BASEPRI, r0
 800466a:	4770      	bx	lr
 800466c:	f3af 8000 	nop.w

08004670 <pxCurrentTCBConst2>:
 8004670:	20000780 	.word	0x20000780
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004674:	bf00      	nop
 8004676:	bf00      	nop

08004678 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004678:	4808      	ldr	r0, [pc, #32]	; (800469c <prvPortStartFirstTask+0x24>)
 800467a:	6800      	ldr	r0, [r0, #0]
 800467c:	6800      	ldr	r0, [r0, #0]
 800467e:	f380 8808 	msr	MSP, r0
 8004682:	f04f 0000 	mov.w	r0, #0
 8004686:	f380 8814 	msr	CONTROL, r0
 800468a:	b662      	cpsie	i
 800468c:	b661      	cpsie	f
 800468e:	f3bf 8f4f 	dsb	sy
 8004692:	f3bf 8f6f 	isb	sy
 8004696:	df00      	svc	0
 8004698:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800469a:	bf00      	nop
 800469c:	e000ed08 	.word	0xe000ed08

080046a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b086      	sub	sp, #24
 80046a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80046a6:	4b46      	ldr	r3, [pc, #280]	; (80047c0 <xPortStartScheduler+0x120>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a46      	ldr	r2, [pc, #280]	; (80047c4 <xPortStartScheduler+0x124>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d10a      	bne.n	80046c6 <xPortStartScheduler+0x26>
	__asm volatile
 80046b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046b4:	f383 8811 	msr	BASEPRI, r3
 80046b8:	f3bf 8f6f 	isb	sy
 80046bc:	f3bf 8f4f 	dsb	sy
 80046c0:	613b      	str	r3, [r7, #16]
}
 80046c2:	bf00      	nop
 80046c4:	e7fe      	b.n	80046c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80046c6:	4b3e      	ldr	r3, [pc, #248]	; (80047c0 <xPortStartScheduler+0x120>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4a3f      	ldr	r2, [pc, #252]	; (80047c8 <xPortStartScheduler+0x128>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d10a      	bne.n	80046e6 <xPortStartScheduler+0x46>
	__asm volatile
 80046d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046d4:	f383 8811 	msr	BASEPRI, r3
 80046d8:	f3bf 8f6f 	isb	sy
 80046dc:	f3bf 8f4f 	dsb	sy
 80046e0:	60fb      	str	r3, [r7, #12]
}
 80046e2:	bf00      	nop
 80046e4:	e7fe      	b.n	80046e4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80046e6:	4b39      	ldr	r3, [pc, #228]	; (80047cc <xPortStartScheduler+0x12c>)
 80046e8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	781b      	ldrb	r3, [r3, #0]
 80046ee:	b2db      	uxtb	r3, r3
 80046f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	22ff      	movs	r2, #255	; 0xff
 80046f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	781b      	ldrb	r3, [r3, #0]
 80046fc:	b2db      	uxtb	r3, r3
 80046fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004700:	78fb      	ldrb	r3, [r7, #3]
 8004702:	b2db      	uxtb	r3, r3
 8004704:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004708:	b2da      	uxtb	r2, r3
 800470a:	4b31      	ldr	r3, [pc, #196]	; (80047d0 <xPortStartScheduler+0x130>)
 800470c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800470e:	4b31      	ldr	r3, [pc, #196]	; (80047d4 <xPortStartScheduler+0x134>)
 8004710:	2207      	movs	r2, #7
 8004712:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004714:	e009      	b.n	800472a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004716:	4b2f      	ldr	r3, [pc, #188]	; (80047d4 <xPortStartScheduler+0x134>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	3b01      	subs	r3, #1
 800471c:	4a2d      	ldr	r2, [pc, #180]	; (80047d4 <xPortStartScheduler+0x134>)
 800471e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004720:	78fb      	ldrb	r3, [r7, #3]
 8004722:	b2db      	uxtb	r3, r3
 8004724:	005b      	lsls	r3, r3, #1
 8004726:	b2db      	uxtb	r3, r3
 8004728:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800472a:	78fb      	ldrb	r3, [r7, #3]
 800472c:	b2db      	uxtb	r3, r3
 800472e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004732:	2b80      	cmp	r3, #128	; 0x80
 8004734:	d0ef      	beq.n	8004716 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004736:	4b27      	ldr	r3, [pc, #156]	; (80047d4 <xPortStartScheduler+0x134>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f1c3 0307 	rsb	r3, r3, #7
 800473e:	2b04      	cmp	r3, #4
 8004740:	d00a      	beq.n	8004758 <xPortStartScheduler+0xb8>
	__asm volatile
 8004742:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004746:	f383 8811 	msr	BASEPRI, r3
 800474a:	f3bf 8f6f 	isb	sy
 800474e:	f3bf 8f4f 	dsb	sy
 8004752:	60bb      	str	r3, [r7, #8]
}
 8004754:	bf00      	nop
 8004756:	e7fe      	b.n	8004756 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004758:	4b1e      	ldr	r3, [pc, #120]	; (80047d4 <xPortStartScheduler+0x134>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	021b      	lsls	r3, r3, #8
 800475e:	4a1d      	ldr	r2, [pc, #116]	; (80047d4 <xPortStartScheduler+0x134>)
 8004760:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004762:	4b1c      	ldr	r3, [pc, #112]	; (80047d4 <xPortStartScheduler+0x134>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800476a:	4a1a      	ldr	r2, [pc, #104]	; (80047d4 <xPortStartScheduler+0x134>)
 800476c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	b2da      	uxtb	r2, r3
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004776:	4b18      	ldr	r3, [pc, #96]	; (80047d8 <xPortStartScheduler+0x138>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a17      	ldr	r2, [pc, #92]	; (80047d8 <xPortStartScheduler+0x138>)
 800477c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004780:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004782:	4b15      	ldr	r3, [pc, #84]	; (80047d8 <xPortStartScheduler+0x138>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4a14      	ldr	r2, [pc, #80]	; (80047d8 <xPortStartScheduler+0x138>)
 8004788:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800478c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800478e:	f000 f8dd 	bl	800494c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004792:	4b12      	ldr	r3, [pc, #72]	; (80047dc <xPortStartScheduler+0x13c>)
 8004794:	2200      	movs	r2, #0
 8004796:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004798:	f000 f8fc 	bl	8004994 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800479c:	4b10      	ldr	r3, [pc, #64]	; (80047e0 <xPortStartScheduler+0x140>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a0f      	ldr	r2, [pc, #60]	; (80047e0 <xPortStartScheduler+0x140>)
 80047a2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80047a6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80047a8:	f7ff ff66 	bl	8004678 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80047ac:	f7ff f854 	bl	8003858 <vTaskSwitchContext>
	prvTaskExitError();
 80047b0:	f7ff ff20 	bl	80045f4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80047b4:	2300      	movs	r3, #0
}
 80047b6:	4618      	mov	r0, r3
 80047b8:	3718      	adds	r7, #24
 80047ba:	46bd      	mov	sp, r7
 80047bc:	bd80      	pop	{r7, pc}
 80047be:	bf00      	nop
 80047c0:	e000ed00 	.word	0xe000ed00
 80047c4:	410fc271 	.word	0x410fc271
 80047c8:	410fc270 	.word	0x410fc270
 80047cc:	e000e400 	.word	0xe000e400
 80047d0:	20000dac 	.word	0x20000dac
 80047d4:	20000db0 	.word	0x20000db0
 80047d8:	e000ed20 	.word	0xe000ed20
 80047dc:	2000000c 	.word	0x2000000c
 80047e0:	e000ef34 	.word	0xe000ef34

080047e4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80047e4:	b480      	push	{r7}
 80047e6:	b083      	sub	sp, #12
 80047e8:	af00      	add	r7, sp, #0
	__asm volatile
 80047ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047ee:	f383 8811 	msr	BASEPRI, r3
 80047f2:	f3bf 8f6f 	isb	sy
 80047f6:	f3bf 8f4f 	dsb	sy
 80047fa:	607b      	str	r3, [r7, #4]
}
 80047fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80047fe:	4b0f      	ldr	r3, [pc, #60]	; (800483c <vPortEnterCritical+0x58>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	3301      	adds	r3, #1
 8004804:	4a0d      	ldr	r2, [pc, #52]	; (800483c <vPortEnterCritical+0x58>)
 8004806:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004808:	4b0c      	ldr	r3, [pc, #48]	; (800483c <vPortEnterCritical+0x58>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	2b01      	cmp	r3, #1
 800480e:	d10f      	bne.n	8004830 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004810:	4b0b      	ldr	r3, [pc, #44]	; (8004840 <vPortEnterCritical+0x5c>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	b2db      	uxtb	r3, r3
 8004816:	2b00      	cmp	r3, #0
 8004818:	d00a      	beq.n	8004830 <vPortEnterCritical+0x4c>
	__asm volatile
 800481a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800481e:	f383 8811 	msr	BASEPRI, r3
 8004822:	f3bf 8f6f 	isb	sy
 8004826:	f3bf 8f4f 	dsb	sy
 800482a:	603b      	str	r3, [r7, #0]
}
 800482c:	bf00      	nop
 800482e:	e7fe      	b.n	800482e <vPortEnterCritical+0x4a>
	}
}
 8004830:	bf00      	nop
 8004832:	370c      	adds	r7, #12
 8004834:	46bd      	mov	sp, r7
 8004836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483a:	4770      	bx	lr
 800483c:	2000000c 	.word	0x2000000c
 8004840:	e000ed04 	.word	0xe000ed04

08004844 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004844:	b480      	push	{r7}
 8004846:	b083      	sub	sp, #12
 8004848:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800484a:	4b12      	ldr	r3, [pc, #72]	; (8004894 <vPortExitCritical+0x50>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d10a      	bne.n	8004868 <vPortExitCritical+0x24>
	__asm volatile
 8004852:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004856:	f383 8811 	msr	BASEPRI, r3
 800485a:	f3bf 8f6f 	isb	sy
 800485e:	f3bf 8f4f 	dsb	sy
 8004862:	607b      	str	r3, [r7, #4]
}
 8004864:	bf00      	nop
 8004866:	e7fe      	b.n	8004866 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004868:	4b0a      	ldr	r3, [pc, #40]	; (8004894 <vPortExitCritical+0x50>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	3b01      	subs	r3, #1
 800486e:	4a09      	ldr	r2, [pc, #36]	; (8004894 <vPortExitCritical+0x50>)
 8004870:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004872:	4b08      	ldr	r3, [pc, #32]	; (8004894 <vPortExitCritical+0x50>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d105      	bne.n	8004886 <vPortExitCritical+0x42>
 800487a:	2300      	movs	r3, #0
 800487c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	f383 8811 	msr	BASEPRI, r3
}
 8004884:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004886:	bf00      	nop
 8004888:	370c      	adds	r7, #12
 800488a:	46bd      	mov	sp, r7
 800488c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004890:	4770      	bx	lr
 8004892:	bf00      	nop
 8004894:	2000000c 	.word	0x2000000c
	...

080048a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80048a0:	f3ef 8009 	mrs	r0, PSP
 80048a4:	f3bf 8f6f 	isb	sy
 80048a8:	4b15      	ldr	r3, [pc, #84]	; (8004900 <pxCurrentTCBConst>)
 80048aa:	681a      	ldr	r2, [r3, #0]
 80048ac:	f01e 0f10 	tst.w	lr, #16
 80048b0:	bf08      	it	eq
 80048b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80048b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048ba:	6010      	str	r0, [r2, #0]
 80048bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80048c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80048c4:	f380 8811 	msr	BASEPRI, r0
 80048c8:	f3bf 8f4f 	dsb	sy
 80048cc:	f3bf 8f6f 	isb	sy
 80048d0:	f7fe ffc2 	bl	8003858 <vTaskSwitchContext>
 80048d4:	f04f 0000 	mov.w	r0, #0
 80048d8:	f380 8811 	msr	BASEPRI, r0
 80048dc:	bc09      	pop	{r0, r3}
 80048de:	6819      	ldr	r1, [r3, #0]
 80048e0:	6808      	ldr	r0, [r1, #0]
 80048e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048e6:	f01e 0f10 	tst.w	lr, #16
 80048ea:	bf08      	it	eq
 80048ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80048f0:	f380 8809 	msr	PSP, r0
 80048f4:	f3bf 8f6f 	isb	sy
 80048f8:	4770      	bx	lr
 80048fa:	bf00      	nop
 80048fc:	f3af 8000 	nop.w

08004900 <pxCurrentTCBConst>:
 8004900:	20000780 	.word	0x20000780
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004904:	bf00      	nop
 8004906:	bf00      	nop

08004908 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b082      	sub	sp, #8
 800490c:	af00      	add	r7, sp, #0
	__asm volatile
 800490e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004912:	f383 8811 	msr	BASEPRI, r3
 8004916:	f3bf 8f6f 	isb	sy
 800491a:	f3bf 8f4f 	dsb	sy
 800491e:	607b      	str	r3, [r7, #4]
}
 8004920:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004922:	f7fe fedf 	bl	80036e4 <xTaskIncrementTick>
 8004926:	4603      	mov	r3, r0
 8004928:	2b00      	cmp	r3, #0
 800492a:	d003      	beq.n	8004934 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800492c:	4b06      	ldr	r3, [pc, #24]	; (8004948 <xPortSysTickHandler+0x40>)
 800492e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004932:	601a      	str	r2, [r3, #0]
 8004934:	2300      	movs	r3, #0
 8004936:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	f383 8811 	msr	BASEPRI, r3
}
 800493e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004940:	bf00      	nop
 8004942:	3708      	adds	r7, #8
 8004944:	46bd      	mov	sp, r7
 8004946:	bd80      	pop	{r7, pc}
 8004948:	e000ed04 	.word	0xe000ed04

0800494c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800494c:	b480      	push	{r7}
 800494e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004950:	4b0b      	ldr	r3, [pc, #44]	; (8004980 <vPortSetupTimerInterrupt+0x34>)
 8004952:	2200      	movs	r2, #0
 8004954:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004956:	4b0b      	ldr	r3, [pc, #44]	; (8004984 <vPortSetupTimerInterrupt+0x38>)
 8004958:	2200      	movs	r2, #0
 800495a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800495c:	4b0a      	ldr	r3, [pc, #40]	; (8004988 <vPortSetupTimerInterrupt+0x3c>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a0a      	ldr	r2, [pc, #40]	; (800498c <vPortSetupTimerInterrupt+0x40>)
 8004962:	fba2 2303 	umull	r2, r3, r2, r3
 8004966:	099b      	lsrs	r3, r3, #6
 8004968:	4a09      	ldr	r2, [pc, #36]	; (8004990 <vPortSetupTimerInterrupt+0x44>)
 800496a:	3b01      	subs	r3, #1
 800496c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800496e:	4b04      	ldr	r3, [pc, #16]	; (8004980 <vPortSetupTimerInterrupt+0x34>)
 8004970:	2207      	movs	r2, #7
 8004972:	601a      	str	r2, [r3, #0]
}
 8004974:	bf00      	nop
 8004976:	46bd      	mov	sp, r7
 8004978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497c:	4770      	bx	lr
 800497e:	bf00      	nop
 8004980:	e000e010 	.word	0xe000e010
 8004984:	e000e018 	.word	0xe000e018
 8004988:	20000000 	.word	0x20000000
 800498c:	10624dd3 	.word	0x10624dd3
 8004990:	e000e014 	.word	0xe000e014

08004994 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004994:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80049a4 <vPortEnableVFP+0x10>
 8004998:	6801      	ldr	r1, [r0, #0]
 800499a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800499e:	6001      	str	r1, [r0, #0]
 80049a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80049a2:	bf00      	nop
 80049a4:	e000ed88 	.word	0xe000ed88

080049a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80049a8:	b480      	push	{r7}
 80049aa:	b085      	sub	sp, #20
 80049ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80049ae:	f3ef 8305 	mrs	r3, IPSR
 80049b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	2b0f      	cmp	r3, #15
 80049b8:	d914      	bls.n	80049e4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80049ba:	4a17      	ldr	r2, [pc, #92]	; (8004a18 <vPortValidateInterruptPriority+0x70>)
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	4413      	add	r3, r2
 80049c0:	781b      	ldrb	r3, [r3, #0]
 80049c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80049c4:	4b15      	ldr	r3, [pc, #84]	; (8004a1c <vPortValidateInterruptPriority+0x74>)
 80049c6:	781b      	ldrb	r3, [r3, #0]
 80049c8:	7afa      	ldrb	r2, [r7, #11]
 80049ca:	429a      	cmp	r2, r3
 80049cc:	d20a      	bcs.n	80049e4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80049ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049d2:	f383 8811 	msr	BASEPRI, r3
 80049d6:	f3bf 8f6f 	isb	sy
 80049da:	f3bf 8f4f 	dsb	sy
 80049de:	607b      	str	r3, [r7, #4]
}
 80049e0:	bf00      	nop
 80049e2:	e7fe      	b.n	80049e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80049e4:	4b0e      	ldr	r3, [pc, #56]	; (8004a20 <vPortValidateInterruptPriority+0x78>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80049ec:	4b0d      	ldr	r3, [pc, #52]	; (8004a24 <vPortValidateInterruptPriority+0x7c>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	429a      	cmp	r2, r3
 80049f2:	d90a      	bls.n	8004a0a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80049f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049f8:	f383 8811 	msr	BASEPRI, r3
 80049fc:	f3bf 8f6f 	isb	sy
 8004a00:	f3bf 8f4f 	dsb	sy
 8004a04:	603b      	str	r3, [r7, #0]
}
 8004a06:	bf00      	nop
 8004a08:	e7fe      	b.n	8004a08 <vPortValidateInterruptPriority+0x60>
	}
 8004a0a:	bf00      	nop
 8004a0c:	3714      	adds	r7, #20
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a14:	4770      	bx	lr
 8004a16:	bf00      	nop
 8004a18:	e000e3f0 	.word	0xe000e3f0
 8004a1c:	20000dac 	.word	0x20000dac
 8004a20:	e000ed0c 	.word	0xe000ed0c
 8004a24:	20000db0 	.word	0x20000db0

08004a28 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b08a      	sub	sp, #40	; 0x28
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004a30:	2300      	movs	r3, #0
 8004a32:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004a34:	f7fe fd9a 	bl	800356c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004a38:	4b5b      	ldr	r3, [pc, #364]	; (8004ba8 <pvPortMalloc+0x180>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d101      	bne.n	8004a44 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004a40:	f000 f920 	bl	8004c84 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004a44:	4b59      	ldr	r3, [pc, #356]	; (8004bac <pvPortMalloc+0x184>)
 8004a46:	681a      	ldr	r2, [r3, #0]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	4013      	ands	r3, r2
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	f040 8093 	bne.w	8004b78 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d01d      	beq.n	8004a94 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004a58:	2208      	movs	r2, #8
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	4413      	add	r3, r2
 8004a5e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	f003 0307 	and.w	r3, r3, #7
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d014      	beq.n	8004a94 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	f023 0307 	bic.w	r3, r3, #7
 8004a70:	3308      	adds	r3, #8
 8004a72:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	f003 0307 	and.w	r3, r3, #7
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d00a      	beq.n	8004a94 <pvPortMalloc+0x6c>
	__asm volatile
 8004a7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a82:	f383 8811 	msr	BASEPRI, r3
 8004a86:	f3bf 8f6f 	isb	sy
 8004a8a:	f3bf 8f4f 	dsb	sy
 8004a8e:	617b      	str	r3, [r7, #20]
}
 8004a90:	bf00      	nop
 8004a92:	e7fe      	b.n	8004a92 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d06e      	beq.n	8004b78 <pvPortMalloc+0x150>
 8004a9a:	4b45      	ldr	r3, [pc, #276]	; (8004bb0 <pvPortMalloc+0x188>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	687a      	ldr	r2, [r7, #4]
 8004aa0:	429a      	cmp	r2, r3
 8004aa2:	d869      	bhi.n	8004b78 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004aa4:	4b43      	ldr	r3, [pc, #268]	; (8004bb4 <pvPortMalloc+0x18c>)
 8004aa6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004aa8:	4b42      	ldr	r3, [pc, #264]	; (8004bb4 <pvPortMalloc+0x18c>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004aae:	e004      	b.n	8004aba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	687a      	ldr	r2, [r7, #4]
 8004ac0:	429a      	cmp	r2, r3
 8004ac2:	d903      	bls.n	8004acc <pvPortMalloc+0xa4>
 8004ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d1f1      	bne.n	8004ab0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004acc:	4b36      	ldr	r3, [pc, #216]	; (8004ba8 <pvPortMalloc+0x180>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ad2:	429a      	cmp	r2, r3
 8004ad4:	d050      	beq.n	8004b78 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004ad6:	6a3b      	ldr	r3, [r7, #32]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	2208      	movs	r2, #8
 8004adc:	4413      	add	r3, r2
 8004ade:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae2:	681a      	ldr	r2, [r3, #0]
 8004ae4:	6a3b      	ldr	r3, [r7, #32]
 8004ae6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aea:	685a      	ldr	r2, [r3, #4]
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	1ad2      	subs	r2, r2, r3
 8004af0:	2308      	movs	r3, #8
 8004af2:	005b      	lsls	r3, r3, #1
 8004af4:	429a      	cmp	r2, r3
 8004af6:	d91f      	bls.n	8004b38 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004af8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	4413      	add	r3, r2
 8004afe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004b00:	69bb      	ldr	r3, [r7, #24]
 8004b02:	f003 0307 	and.w	r3, r3, #7
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d00a      	beq.n	8004b20 <pvPortMalloc+0xf8>
	__asm volatile
 8004b0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b0e:	f383 8811 	msr	BASEPRI, r3
 8004b12:	f3bf 8f6f 	isb	sy
 8004b16:	f3bf 8f4f 	dsb	sy
 8004b1a:	613b      	str	r3, [r7, #16]
}
 8004b1c:	bf00      	nop
 8004b1e:	e7fe      	b.n	8004b1e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b22:	685a      	ldr	r2, [r3, #4]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	1ad2      	subs	r2, r2, r3
 8004b28:	69bb      	ldr	r3, [r7, #24]
 8004b2a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b2e:	687a      	ldr	r2, [r7, #4]
 8004b30:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004b32:	69b8      	ldr	r0, [r7, #24]
 8004b34:	f000 f908 	bl	8004d48 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004b38:	4b1d      	ldr	r3, [pc, #116]	; (8004bb0 <pvPortMalloc+0x188>)
 8004b3a:	681a      	ldr	r2, [r3, #0]
 8004b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	1ad3      	subs	r3, r2, r3
 8004b42:	4a1b      	ldr	r2, [pc, #108]	; (8004bb0 <pvPortMalloc+0x188>)
 8004b44:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004b46:	4b1a      	ldr	r3, [pc, #104]	; (8004bb0 <pvPortMalloc+0x188>)
 8004b48:	681a      	ldr	r2, [r3, #0]
 8004b4a:	4b1b      	ldr	r3, [pc, #108]	; (8004bb8 <pvPortMalloc+0x190>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	429a      	cmp	r2, r3
 8004b50:	d203      	bcs.n	8004b5a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004b52:	4b17      	ldr	r3, [pc, #92]	; (8004bb0 <pvPortMalloc+0x188>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4a18      	ldr	r2, [pc, #96]	; (8004bb8 <pvPortMalloc+0x190>)
 8004b58:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b5c:	685a      	ldr	r2, [r3, #4]
 8004b5e:	4b13      	ldr	r3, [pc, #76]	; (8004bac <pvPortMalloc+0x184>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	431a      	orrs	r2, r3
 8004b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b66:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004b6e:	4b13      	ldr	r3, [pc, #76]	; (8004bbc <pvPortMalloc+0x194>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	3301      	adds	r3, #1
 8004b74:	4a11      	ldr	r2, [pc, #68]	; (8004bbc <pvPortMalloc+0x194>)
 8004b76:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004b78:	f7fe fd06 	bl	8003588 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004b7c:	69fb      	ldr	r3, [r7, #28]
 8004b7e:	f003 0307 	and.w	r3, r3, #7
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d00a      	beq.n	8004b9c <pvPortMalloc+0x174>
	__asm volatile
 8004b86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b8a:	f383 8811 	msr	BASEPRI, r3
 8004b8e:	f3bf 8f6f 	isb	sy
 8004b92:	f3bf 8f4f 	dsb	sy
 8004b96:	60fb      	str	r3, [r7, #12]
}
 8004b98:	bf00      	nop
 8004b9a:	e7fe      	b.n	8004b9a <pvPortMalloc+0x172>
	return pvReturn;
 8004b9c:	69fb      	ldr	r3, [r7, #28]
}
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	3728      	adds	r7, #40	; 0x28
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bd80      	pop	{r7, pc}
 8004ba6:	bf00      	nop
 8004ba8:	200049bc 	.word	0x200049bc
 8004bac:	200049d0 	.word	0x200049d0
 8004bb0:	200049c0 	.word	0x200049c0
 8004bb4:	200049b4 	.word	0x200049b4
 8004bb8:	200049c4 	.word	0x200049c4
 8004bbc:	200049c8 	.word	0x200049c8

08004bc0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b086      	sub	sp, #24
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d04d      	beq.n	8004c6e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004bd2:	2308      	movs	r3, #8
 8004bd4:	425b      	negs	r3, r3
 8004bd6:	697a      	ldr	r2, [r7, #20]
 8004bd8:	4413      	add	r3, r2
 8004bda:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004bdc:	697b      	ldr	r3, [r7, #20]
 8004bde:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004be0:	693b      	ldr	r3, [r7, #16]
 8004be2:	685a      	ldr	r2, [r3, #4]
 8004be4:	4b24      	ldr	r3, [pc, #144]	; (8004c78 <vPortFree+0xb8>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4013      	ands	r3, r2
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d10a      	bne.n	8004c04 <vPortFree+0x44>
	__asm volatile
 8004bee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bf2:	f383 8811 	msr	BASEPRI, r3
 8004bf6:	f3bf 8f6f 	isb	sy
 8004bfa:	f3bf 8f4f 	dsb	sy
 8004bfe:	60fb      	str	r3, [r7, #12]
}
 8004c00:	bf00      	nop
 8004c02:	e7fe      	b.n	8004c02 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004c04:	693b      	ldr	r3, [r7, #16]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d00a      	beq.n	8004c22 <vPortFree+0x62>
	__asm volatile
 8004c0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c10:	f383 8811 	msr	BASEPRI, r3
 8004c14:	f3bf 8f6f 	isb	sy
 8004c18:	f3bf 8f4f 	dsb	sy
 8004c1c:	60bb      	str	r3, [r7, #8]
}
 8004c1e:	bf00      	nop
 8004c20:	e7fe      	b.n	8004c20 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	685a      	ldr	r2, [r3, #4]
 8004c26:	4b14      	ldr	r3, [pc, #80]	; (8004c78 <vPortFree+0xb8>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4013      	ands	r3, r2
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d01e      	beq.n	8004c6e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004c30:	693b      	ldr	r3, [r7, #16]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d11a      	bne.n	8004c6e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004c38:	693b      	ldr	r3, [r7, #16]
 8004c3a:	685a      	ldr	r2, [r3, #4]
 8004c3c:	4b0e      	ldr	r3, [pc, #56]	; (8004c78 <vPortFree+0xb8>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	43db      	mvns	r3, r3
 8004c42:	401a      	ands	r2, r3
 8004c44:	693b      	ldr	r3, [r7, #16]
 8004c46:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004c48:	f7fe fc90 	bl	800356c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004c4c:	693b      	ldr	r3, [r7, #16]
 8004c4e:	685a      	ldr	r2, [r3, #4]
 8004c50:	4b0a      	ldr	r3, [pc, #40]	; (8004c7c <vPortFree+0xbc>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4413      	add	r3, r2
 8004c56:	4a09      	ldr	r2, [pc, #36]	; (8004c7c <vPortFree+0xbc>)
 8004c58:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004c5a:	6938      	ldr	r0, [r7, #16]
 8004c5c:	f000 f874 	bl	8004d48 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004c60:	4b07      	ldr	r3, [pc, #28]	; (8004c80 <vPortFree+0xc0>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	3301      	adds	r3, #1
 8004c66:	4a06      	ldr	r2, [pc, #24]	; (8004c80 <vPortFree+0xc0>)
 8004c68:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004c6a:	f7fe fc8d 	bl	8003588 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004c6e:	bf00      	nop
 8004c70:	3718      	adds	r7, #24
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bd80      	pop	{r7, pc}
 8004c76:	bf00      	nop
 8004c78:	200049d0 	.word	0x200049d0
 8004c7c:	200049c0 	.word	0x200049c0
 8004c80:	200049cc 	.word	0x200049cc

08004c84 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004c84:	b480      	push	{r7}
 8004c86:	b085      	sub	sp, #20
 8004c88:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004c8a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8004c8e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004c90:	4b27      	ldr	r3, [pc, #156]	; (8004d30 <prvHeapInit+0xac>)
 8004c92:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	f003 0307 	and.w	r3, r3, #7
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d00c      	beq.n	8004cb8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	3307      	adds	r3, #7
 8004ca2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	f023 0307 	bic.w	r3, r3, #7
 8004caa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004cac:	68ba      	ldr	r2, [r7, #8]
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	1ad3      	subs	r3, r2, r3
 8004cb2:	4a1f      	ldr	r2, [pc, #124]	; (8004d30 <prvHeapInit+0xac>)
 8004cb4:	4413      	add	r3, r2
 8004cb6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004cbc:	4a1d      	ldr	r2, [pc, #116]	; (8004d34 <prvHeapInit+0xb0>)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004cc2:	4b1c      	ldr	r3, [pc, #112]	; (8004d34 <prvHeapInit+0xb0>)
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	68ba      	ldr	r2, [r7, #8]
 8004ccc:	4413      	add	r3, r2
 8004cce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004cd0:	2208      	movs	r2, #8
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	1a9b      	subs	r3, r3, r2
 8004cd6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	f023 0307 	bic.w	r3, r3, #7
 8004cde:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	4a15      	ldr	r2, [pc, #84]	; (8004d38 <prvHeapInit+0xb4>)
 8004ce4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004ce6:	4b14      	ldr	r3, [pc, #80]	; (8004d38 <prvHeapInit+0xb4>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	2200      	movs	r2, #0
 8004cec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004cee:	4b12      	ldr	r3, [pc, #72]	; (8004d38 <prvHeapInit+0xb4>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	68fa      	ldr	r2, [r7, #12]
 8004cfe:	1ad2      	subs	r2, r2, r3
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004d04:	4b0c      	ldr	r3, [pc, #48]	; (8004d38 <prvHeapInit+0xb4>)
 8004d06:	681a      	ldr	r2, [r3, #0]
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	4a0a      	ldr	r2, [pc, #40]	; (8004d3c <prvHeapInit+0xb8>)
 8004d12:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	4a09      	ldr	r2, [pc, #36]	; (8004d40 <prvHeapInit+0xbc>)
 8004d1a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004d1c:	4b09      	ldr	r3, [pc, #36]	; (8004d44 <prvHeapInit+0xc0>)
 8004d1e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004d22:	601a      	str	r2, [r3, #0]
}
 8004d24:	bf00      	nop
 8004d26:	3714      	adds	r7, #20
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2e:	4770      	bx	lr
 8004d30:	20000db4 	.word	0x20000db4
 8004d34:	200049b4 	.word	0x200049b4
 8004d38:	200049bc 	.word	0x200049bc
 8004d3c:	200049c4 	.word	0x200049c4
 8004d40:	200049c0 	.word	0x200049c0
 8004d44:	200049d0 	.word	0x200049d0

08004d48 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b085      	sub	sp, #20
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004d50:	4b28      	ldr	r3, [pc, #160]	; (8004df4 <prvInsertBlockIntoFreeList+0xac>)
 8004d52:	60fb      	str	r3, [r7, #12]
 8004d54:	e002      	b.n	8004d5c <prvInsertBlockIntoFreeList+0x14>
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	60fb      	str	r3, [r7, #12]
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	687a      	ldr	r2, [r7, #4]
 8004d62:	429a      	cmp	r2, r3
 8004d64:	d8f7      	bhi.n	8004d56 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	68ba      	ldr	r2, [r7, #8]
 8004d70:	4413      	add	r3, r2
 8004d72:	687a      	ldr	r2, [r7, #4]
 8004d74:	429a      	cmp	r2, r3
 8004d76:	d108      	bne.n	8004d8a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	685a      	ldr	r2, [r3, #4]
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	441a      	add	r2, r3
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	68ba      	ldr	r2, [r7, #8]
 8004d94:	441a      	add	r2, r3
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	429a      	cmp	r2, r3
 8004d9c:	d118      	bne.n	8004dd0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681a      	ldr	r2, [r3, #0]
 8004da2:	4b15      	ldr	r3, [pc, #84]	; (8004df8 <prvInsertBlockIntoFreeList+0xb0>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	429a      	cmp	r2, r3
 8004da8:	d00d      	beq.n	8004dc6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	685a      	ldr	r2, [r3, #4]
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	685b      	ldr	r3, [r3, #4]
 8004db4:	441a      	add	r2, r3
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	681a      	ldr	r2, [r3, #0]
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	601a      	str	r2, [r3, #0]
 8004dc4:	e008      	b.n	8004dd8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004dc6:	4b0c      	ldr	r3, [pc, #48]	; (8004df8 <prvInsertBlockIntoFreeList+0xb0>)
 8004dc8:	681a      	ldr	r2, [r3, #0]
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	601a      	str	r2, [r3, #0]
 8004dce:	e003      	b.n	8004dd8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681a      	ldr	r2, [r3, #0]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004dd8:	68fa      	ldr	r2, [r7, #12]
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	429a      	cmp	r2, r3
 8004dde:	d002      	beq.n	8004de6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	687a      	ldr	r2, [r7, #4]
 8004de4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004de6:	bf00      	nop
 8004de8:	3714      	adds	r7, #20
 8004dea:	46bd      	mov	sp, r7
 8004dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df0:	4770      	bx	lr
 8004df2:	bf00      	nop
 8004df4:	200049b4 	.word	0x200049b4
 8004df8:	200049bc 	.word	0x200049bc

08004dfc <memset>:
 8004dfc:	4402      	add	r2, r0
 8004dfe:	4603      	mov	r3, r0
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d100      	bne.n	8004e06 <memset+0xa>
 8004e04:	4770      	bx	lr
 8004e06:	f803 1b01 	strb.w	r1, [r3], #1
 8004e0a:	e7f9      	b.n	8004e00 <memset+0x4>

08004e0c <__libc_init_array>:
 8004e0c:	b570      	push	{r4, r5, r6, lr}
 8004e0e:	4d0d      	ldr	r5, [pc, #52]	; (8004e44 <__libc_init_array+0x38>)
 8004e10:	4c0d      	ldr	r4, [pc, #52]	; (8004e48 <__libc_init_array+0x3c>)
 8004e12:	1b64      	subs	r4, r4, r5
 8004e14:	10a4      	asrs	r4, r4, #2
 8004e16:	2600      	movs	r6, #0
 8004e18:	42a6      	cmp	r6, r4
 8004e1a:	d109      	bne.n	8004e30 <__libc_init_array+0x24>
 8004e1c:	4d0b      	ldr	r5, [pc, #44]	; (8004e4c <__libc_init_array+0x40>)
 8004e1e:	4c0c      	ldr	r4, [pc, #48]	; (8004e50 <__libc_init_array+0x44>)
 8004e20:	f000 f826 	bl	8004e70 <_init>
 8004e24:	1b64      	subs	r4, r4, r5
 8004e26:	10a4      	asrs	r4, r4, #2
 8004e28:	2600      	movs	r6, #0
 8004e2a:	42a6      	cmp	r6, r4
 8004e2c:	d105      	bne.n	8004e3a <__libc_init_array+0x2e>
 8004e2e:	bd70      	pop	{r4, r5, r6, pc}
 8004e30:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e34:	4798      	blx	r3
 8004e36:	3601      	adds	r6, #1
 8004e38:	e7ee      	b.n	8004e18 <__libc_init_array+0xc>
 8004e3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e3e:	4798      	blx	r3
 8004e40:	3601      	adds	r6, #1
 8004e42:	e7f2      	b.n	8004e2a <__libc_init_array+0x1e>
 8004e44:	08004f20 	.word	0x08004f20
 8004e48:	08004f20 	.word	0x08004f20
 8004e4c:	08004f20 	.word	0x08004f20
 8004e50:	08004f24 	.word	0x08004f24

08004e54 <memcpy>:
 8004e54:	440a      	add	r2, r1
 8004e56:	4291      	cmp	r1, r2
 8004e58:	f100 33ff 	add.w	r3, r0, #4294967295
 8004e5c:	d100      	bne.n	8004e60 <memcpy+0xc>
 8004e5e:	4770      	bx	lr
 8004e60:	b510      	push	{r4, lr}
 8004e62:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004e66:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004e6a:	4291      	cmp	r1, r2
 8004e6c:	d1f9      	bne.n	8004e62 <memcpy+0xe>
 8004e6e:	bd10      	pop	{r4, pc}

08004e70 <_init>:
 8004e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e72:	bf00      	nop
 8004e74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e76:	bc08      	pop	{r3}
 8004e78:	469e      	mov	lr, r3
 8004e7a:	4770      	bx	lr

08004e7c <_fini>:
 8004e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e7e:	bf00      	nop
 8004e80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e82:	bc08      	pop	{r3}
 8004e84:	469e      	mov	lr, r3
 8004e86:	4770      	bx	lr
