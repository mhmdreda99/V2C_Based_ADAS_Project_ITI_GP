
023_timer_.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000448c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  0800462c  0800462c  0001462c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080046ec  080046ec  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080046ec  080046ec  000146ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080046f4  080046f4  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080046f4  080046f4  000146f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080046f8  080046f8  000146f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080046fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004130  20000010  0800470c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004140  0800470c  00024140  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000fe6f  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000289d  00000000  00000000  0002fef2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001068  00000000  00000000  00032790  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ca6  00000000  00000000  000337f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017031  00000000  00000000  0003449e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001130a  00000000  00000000  0004b4cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000947a3  00000000  00000000  0005c7d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004400  00000000  00000000  000f0f7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000f537c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000010 	.word	0x20000010
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004614 	.word	0x08004614

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000014 	.word	0x20000014
 80001dc:	08004614 	.word	0x08004614

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b970 	b.w	80004d8 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	460d      	mov	r5, r1
 8000218:	4604      	mov	r4, r0
 800021a:	460f      	mov	r7, r1
 800021c:	2b00      	cmp	r3, #0
 800021e:	d14a      	bne.n	80002b6 <__udivmoddi4+0xa6>
 8000220:	428a      	cmp	r2, r1
 8000222:	4694      	mov	ip, r2
 8000224:	d965      	bls.n	80002f2 <__udivmoddi4+0xe2>
 8000226:	fab2 f382 	clz	r3, r2
 800022a:	b143      	cbz	r3, 800023e <__udivmoddi4+0x2e>
 800022c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000230:	f1c3 0220 	rsb	r2, r3, #32
 8000234:	409f      	lsls	r7, r3
 8000236:	fa20 f202 	lsr.w	r2, r0, r2
 800023a:	4317      	orrs	r7, r2
 800023c:	409c      	lsls	r4, r3
 800023e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000242:	fa1f f58c 	uxth.w	r5, ip
 8000246:	fbb7 f1fe 	udiv	r1, r7, lr
 800024a:	0c22      	lsrs	r2, r4, #16
 800024c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000250:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000254:	fb01 f005 	mul.w	r0, r1, r5
 8000258:	4290      	cmp	r0, r2
 800025a:	d90a      	bls.n	8000272 <__udivmoddi4+0x62>
 800025c:	eb1c 0202 	adds.w	r2, ip, r2
 8000260:	f101 37ff 	add.w	r7, r1, #4294967295
 8000264:	f080 811c 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000268:	4290      	cmp	r0, r2
 800026a:	f240 8119 	bls.w	80004a0 <__udivmoddi4+0x290>
 800026e:	3902      	subs	r1, #2
 8000270:	4462      	add	r2, ip
 8000272:	1a12      	subs	r2, r2, r0
 8000274:	b2a4      	uxth	r4, r4
 8000276:	fbb2 f0fe 	udiv	r0, r2, lr
 800027a:	fb0e 2210 	mls	r2, lr, r0, r2
 800027e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000282:	fb00 f505 	mul.w	r5, r0, r5
 8000286:	42a5      	cmp	r5, r4
 8000288:	d90a      	bls.n	80002a0 <__udivmoddi4+0x90>
 800028a:	eb1c 0404 	adds.w	r4, ip, r4
 800028e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000292:	f080 8107 	bcs.w	80004a4 <__udivmoddi4+0x294>
 8000296:	42a5      	cmp	r5, r4
 8000298:	f240 8104 	bls.w	80004a4 <__udivmoddi4+0x294>
 800029c:	4464      	add	r4, ip
 800029e:	3802      	subs	r0, #2
 80002a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002a4:	1b64      	subs	r4, r4, r5
 80002a6:	2100      	movs	r1, #0
 80002a8:	b11e      	cbz	r6, 80002b2 <__udivmoddi4+0xa2>
 80002aa:	40dc      	lsrs	r4, r3
 80002ac:	2300      	movs	r3, #0
 80002ae:	e9c6 4300 	strd	r4, r3, [r6]
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d908      	bls.n	80002cc <__udivmoddi4+0xbc>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80ed 	beq.w	800049a <__udivmoddi4+0x28a>
 80002c0:	2100      	movs	r1, #0
 80002c2:	e9c6 0500 	strd	r0, r5, [r6]
 80002c6:	4608      	mov	r0, r1
 80002c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002cc:	fab3 f183 	clz	r1, r3
 80002d0:	2900      	cmp	r1, #0
 80002d2:	d149      	bne.n	8000368 <__udivmoddi4+0x158>
 80002d4:	42ab      	cmp	r3, r5
 80002d6:	d302      	bcc.n	80002de <__udivmoddi4+0xce>
 80002d8:	4282      	cmp	r2, r0
 80002da:	f200 80f8 	bhi.w	80004ce <__udivmoddi4+0x2be>
 80002de:	1a84      	subs	r4, r0, r2
 80002e0:	eb65 0203 	sbc.w	r2, r5, r3
 80002e4:	2001      	movs	r0, #1
 80002e6:	4617      	mov	r7, r2
 80002e8:	2e00      	cmp	r6, #0
 80002ea:	d0e2      	beq.n	80002b2 <__udivmoddi4+0xa2>
 80002ec:	e9c6 4700 	strd	r4, r7, [r6]
 80002f0:	e7df      	b.n	80002b2 <__udivmoddi4+0xa2>
 80002f2:	b902      	cbnz	r2, 80002f6 <__udivmoddi4+0xe6>
 80002f4:	deff      	udf	#255	; 0xff
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x210>
 8000300:	1a8a      	subs	r2, r1, r2
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2101      	movs	r1, #1
 800030c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000310:	fb07 2015 	mls	r0, r7, r5, r2
 8000314:	0c22      	lsrs	r2, r4, #16
 8000316:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800031a:	fb0e f005 	mul.w	r0, lr, r5
 800031e:	4290      	cmp	r0, r2
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x124>
 8000322:	eb1c 0202 	adds.w	r2, ip, r2
 8000326:	f105 38ff 	add.w	r8, r5, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4290      	cmp	r0, r2
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2b8>
 8000332:	4645      	mov	r5, r8
 8000334:	1a12      	subs	r2, r2, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb2 f0f7 	udiv	r0, r2, r7
 800033c:	fb07 2210 	mls	r2, r7, r0, r2
 8000340:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x14e>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 32ff 	add.w	r2, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x14c>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2c2>
 800035c:	4610      	mov	r0, r2
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000366:	e79f      	b.n	80002a8 <__udivmoddi4+0x98>
 8000368:	f1c1 0720 	rsb	r7, r1, #32
 800036c:	408b      	lsls	r3, r1
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa05 f401 	lsl.w	r4, r5, r1
 800037a:	fa20 f307 	lsr.w	r3, r0, r7
 800037e:	40fd      	lsrs	r5, r7
 8000380:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000384:	4323      	orrs	r3, r4
 8000386:	fbb5 f8f9 	udiv	r8, r5, r9
 800038a:	fa1f fe8c 	uxth.w	lr, ip
 800038e:	fb09 5518 	mls	r5, r9, r8, r5
 8000392:	0c1c      	lsrs	r4, r3, #16
 8000394:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000398:	fb08 f50e 	mul.w	r5, r8, lr
 800039c:	42a5      	cmp	r5, r4
 800039e:	fa02 f201 	lsl.w	r2, r2, r1
 80003a2:	fa00 f001 	lsl.w	r0, r0, r1
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2b4>
 80003b4:	42a5      	cmp	r5, r4
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2b4>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4464      	add	r4, ip
 80003c0:	1b64      	subs	r4, r4, r5
 80003c2:	b29d      	uxth	r5, r3
 80003c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c8:	fb09 4413 	mls	r4, r9, r3, r4
 80003cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f103 35ff 	add.w	r5, r3, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2ac>
 80003e2:	45a6      	cmp	lr, r4
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2ac>
 80003e6:	3b02      	subs	r3, #2
 80003e8:	4464      	add	r4, ip
 80003ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003ee:	fba3 9502 	umull	r9, r5, r3, r2
 80003f2:	eba4 040e 	sub.w	r4, r4, lr
 80003f6:	42ac      	cmp	r4, r5
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46ae      	mov	lr, r5
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x29c>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x298>
 8000400:	b156      	cbz	r6, 8000418 <__udivmoddi4+0x208>
 8000402:	ebb0 0208 	subs.w	r2, r0, r8
 8000406:	eb64 040e 	sbc.w	r4, r4, lr
 800040a:	fa04 f707 	lsl.w	r7, r4, r7
 800040e:	40ca      	lsrs	r2, r1
 8000410:	40cc      	lsrs	r4, r1
 8000412:	4317      	orrs	r7, r2
 8000414:	e9c6 7400 	strd	r7, r4, [r6]
 8000418:	4618      	mov	r0, r3
 800041a:	2100      	movs	r1, #0
 800041c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000420:	f1c3 0120 	rsb	r1, r3, #32
 8000424:	fa02 fc03 	lsl.w	ip, r2, r3
 8000428:	fa20 f201 	lsr.w	r2, r0, r1
 800042c:	fa25 f101 	lsr.w	r1, r5, r1
 8000430:	409d      	lsls	r5, r3
 8000432:	432a      	orrs	r2, r5
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000440:	fb07 1510 	mls	r5, r7, r0, r1
 8000444:	0c11      	lsrs	r1, r2, #16
 8000446:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800044a:	fb00 f50e 	mul.w	r5, r0, lr
 800044e:	428d      	cmp	r5, r1
 8000450:	fa04 f403 	lsl.w	r4, r4, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x258>
 8000456:	eb1c 0101 	adds.w	r1, ip, r1
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000460:	428d      	cmp	r5, r1
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000464:	3802      	subs	r0, #2
 8000466:	4461      	add	r1, ip
 8000468:	1b49      	subs	r1, r1, r5
 800046a:	b292      	uxth	r2, r2
 800046c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000470:	fb07 1115 	mls	r1, r7, r5, r1
 8000474:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000478:	fb05 f10e 	mul.w	r1, r5, lr
 800047c:	4291      	cmp	r1, r2
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x282>
 8000480:	eb1c 0202 	adds.w	r2, ip, r2
 8000484:	f105 38ff 	add.w	r8, r5, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2a8>
 800048a:	4291      	cmp	r1, r2
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2a8>
 800048e:	3d02      	subs	r5, #2
 8000490:	4462      	add	r2, ip
 8000492:	1a52      	subs	r2, r2, r1
 8000494:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0xfc>
 800049a:	4631      	mov	r1, r6
 800049c:	4630      	mov	r0, r6
 800049e:	e708      	b.n	80002b2 <__udivmoddi4+0xa2>
 80004a0:	4639      	mov	r1, r7
 80004a2:	e6e6      	b.n	8000272 <__udivmoddi4+0x62>
 80004a4:	4610      	mov	r0, r2
 80004a6:	e6fb      	b.n	80002a0 <__udivmoddi4+0x90>
 80004a8:	4548      	cmp	r0, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004b4:	3b01      	subs	r3, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b8:	4645      	mov	r5, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x282>
 80004bc:	462b      	mov	r3, r5
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1da>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x258>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c8:	3d02      	subs	r5, #2
 80004ca:	4462      	add	r2, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x124>
 80004ce:	4608      	mov	r0, r1
 80004d0:	e70a      	b.n	80002e8 <__udivmoddi4+0xd8>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x14e>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004dc:	b480      	push	{r7}
 80004de:	b085      	sub	sp, #20
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	60f8      	str	r0, [r7, #12]
 80004e4:	60b9      	str	r1, [r7, #8]
 80004e6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004e8:	68fb      	ldr	r3, [r7, #12]
 80004ea:	4a07      	ldr	r2, [pc, #28]	; (8000508 <vApplicationGetIdleTaskMemory+0x2c>)
 80004ec:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004ee:	68bb      	ldr	r3, [r7, #8]
 80004f0:	4a06      	ldr	r2, [pc, #24]	; (800050c <vApplicationGetIdleTaskMemory+0x30>)
 80004f2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	2280      	movs	r2, #128	; 0x80
 80004f8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004fa:	bf00      	nop
 80004fc:	3714      	adds	r7, #20
 80004fe:	46bd      	mov	sp, r7
 8000500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop
 8000508:	2000002c 	.word	0x2000002c
 800050c:	20000080 	.word	0x20000080

08000510 <HAL_TIM_IC_CaptureCallback>:
#define SECOND_DELAY_U2    			110


//ISR for timer ICU
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b082      	sub	sp, #8
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
	// checking on timer ICU interrupt source if TIM2 or TIM 5
	if (htim->Instance == TIM2)
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000520:	d163      	bne.n	80005ea <HAL_TIM_IC_CaptureCallback+0xda>
	{
		// Check if the callback is triggered by the correct timer (TIMx)
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	7f1b      	ldrb	r3, [r3, #28]
 8000526:	2b01      	cmp	r3, #1
 8000528:	d15f      	bne.n	80005ea <HAL_TIM_IC_CaptureCallback+0xda>
		{
			if (flag_timer2==0)
 800052a:	4b6a      	ldr	r3, [pc, #424]	; (80006d4 <HAL_TIM_IC_CaptureCallback+0x1c4>)
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	2b00      	cmp	r3, #0
 8000530:	d10d      	bne.n	800054e <HAL_TIM_IC_CaptureCallback+0x3e>
			{
				t1_timer2=HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000532:	2100      	movs	r1, #0
 8000534:	6878      	ldr	r0, [r7, #4]
 8000536:	f002 fab1 	bl	8002a9c <HAL_TIM_ReadCapturedValue>
 800053a:	4603      	mov	r3, r0
 800053c:	461a      	mov	r2, r3
 800053e:	4b66      	ldr	r3, [pc, #408]	; (80006d8 <HAL_TIM_IC_CaptureCallback+0x1c8>)
 8000540:	601a      	str	r2, [r3, #0]

				flag_timer2++;
 8000542:	4b64      	ldr	r3, [pc, #400]	; (80006d4 <HAL_TIM_IC_CaptureCallback+0x1c4>)
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	3301      	adds	r3, #1
 8000548:	4a62      	ldr	r2, [pc, #392]	; (80006d4 <HAL_TIM_IC_CaptureCallback+0x1c4>)
 800054a:	6013      	str	r3, [r2, #0]
 800054c:	e04d      	b.n	80005ea <HAL_TIM_IC_CaptureCallback+0xda>
			}
			else if(flag_timer2==1)
 800054e:	4b61      	ldr	r3, [pc, #388]	; (80006d4 <HAL_TIM_IC_CaptureCallback+0x1c4>)
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	2b01      	cmp	r3, #1
 8000554:	d149      	bne.n	80005ea <HAL_TIM_IC_CaptureCallback+0xda>
			{
				t2_timer2=HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000556:	2100      	movs	r1, #0
 8000558:	6878      	ldr	r0, [r7, #4]
 800055a:	f002 fa9f 	bl	8002a9c <HAL_TIM_ReadCapturedValue>
 800055e:	4603      	mov	r3, r0
 8000560:	461a      	mov	r2, r3
 8000562:	4b5e      	ldr	r3, [pc, #376]	; (80006dc <HAL_TIM_IC_CaptureCallback+0x1cc>)
 8000564:	601a      	str	r2, [r3, #0]
				if(t2_timer2>t1_timer2)
 8000566:	4b5d      	ldr	r3, [pc, #372]	; (80006dc <HAL_TIM_IC_CaptureCallback+0x1cc>)
 8000568:	681a      	ldr	r2, [r3, #0]
 800056a:	4b5b      	ldr	r3, [pc, #364]	; (80006d8 <HAL_TIM_IC_CaptureCallback+0x1c8>)
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	429a      	cmp	r2, r3
 8000570:	dd07      	ble.n	8000582 <HAL_TIM_IC_CaptureCallback+0x72>
				{
					time_timer2=t2_timer2-t1_timer2;
 8000572:	4b5a      	ldr	r3, [pc, #360]	; (80006dc <HAL_TIM_IC_CaptureCallback+0x1cc>)
 8000574:	681a      	ldr	r2, [r3, #0]
 8000576:	4b58      	ldr	r3, [pc, #352]	; (80006d8 <HAL_TIM_IC_CaptureCallback+0x1c8>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	1ad3      	subs	r3, r2, r3
 800057c:	4a58      	ldr	r2, [pc, #352]	; (80006e0 <HAL_TIM_IC_CaptureCallback+0x1d0>)
 800057e:	6013      	str	r3, [r2, #0]
 8000580:	e010      	b.n	80005a4 <HAL_TIM_IC_CaptureCallback+0x94>
				}
				else if(t1_timer2>t2_timer2)
 8000582:	4b55      	ldr	r3, [pc, #340]	; (80006d8 <HAL_TIM_IC_CaptureCallback+0x1c8>)
 8000584:	681a      	ldr	r2, [r3, #0]
 8000586:	4b55      	ldr	r3, [pc, #340]	; (80006dc <HAL_TIM_IC_CaptureCallback+0x1cc>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	429a      	cmp	r2, r3
 800058c:	dd0a      	ble.n	80005a4 <HAL_TIM_IC_CaptureCallback+0x94>
				{
					time_timer2 = ((0xffff-t1_timer2)+t2_timer2)+1;
 800058e:	4b52      	ldr	r3, [pc, #328]	; (80006d8 <HAL_TIM_IC_CaptureCallback+0x1c8>)
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8000596:	33ff      	adds	r3, #255	; 0xff
 8000598:	4a50      	ldr	r2, [pc, #320]	; (80006dc <HAL_TIM_IC_CaptureCallback+0x1cc>)
 800059a:	6812      	ldr	r2, [r2, #0]
 800059c:	4413      	add	r3, r2
 800059e:	3301      	adds	r3, #1
 80005a0:	4a4f      	ldr	r2, [pc, #316]	; (80006e0 <HAL_TIM_IC_CaptureCallback+0x1d0>)
 80005a2:	6013      	str	r3, [r2, #0]
				}
				distance_u1=(((int)time_timer2*340*100)/((int)2*1000000))+1;
 80005a4:	4b4e      	ldr	r3, [pc, #312]	; (80006e0 <HAL_TIM_IC_CaptureCallback+0x1d0>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	f248 42d0 	movw	r2, #34000	; 0x84d0
 80005ac:	fb02 f303 	mul.w	r3, r2, r3
 80005b0:	4a4c      	ldr	r2, [pc, #304]	; (80006e4 <HAL_TIM_IC_CaptureCallback+0x1d4>)
 80005b2:	fb82 1203 	smull	r1, r2, r2, r3
 80005b6:	14d2      	asrs	r2, r2, #19
 80005b8:	17db      	asrs	r3, r3, #31
 80005ba:	1ad3      	subs	r3, r2, r3
 80005bc:	3301      	adds	r3, #1
 80005be:	4a4a      	ldr	r2, [pc, #296]	; (80006e8 <HAL_TIM_IC_CaptureCallback+0x1d8>)
 80005c0:	6013      	str	r3, [r2, #0]

				// Ensure that the distance is within the range (0 to 50 cm)
				if (distance_u1 > 500)
 80005c2:	4b49      	ldr	r3, [pc, #292]	; (80006e8 <HAL_TIM_IC_CaptureCallback+0x1d8>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80005ca:	dd04      	ble.n	80005d6 <HAL_TIM_IC_CaptureCallback+0xc6>
				{
					distance_u1 = 500;
 80005cc:	4b46      	ldr	r3, [pc, #280]	; (80006e8 <HAL_TIM_IC_CaptureCallback+0x1d8>)
 80005ce:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80005d2:	601a      	str	r2, [r3, #0]
 80005d4:	e006      	b.n	80005e4 <HAL_TIM_IC_CaptureCallback+0xd4>
				}
				else if (distance_u1<0)
 80005d6:	4b44      	ldr	r3, [pc, #272]	; (80006e8 <HAL_TIM_IC_CaptureCallback+0x1d8>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	2b00      	cmp	r3, #0
 80005dc:	da02      	bge.n	80005e4 <HAL_TIM_IC_CaptureCallback+0xd4>
				{
					distance_u1=0;
 80005de:	4b42      	ldr	r3, [pc, #264]	; (80006e8 <HAL_TIM_IC_CaptureCallback+0x1d8>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	601a      	str	r2, [r3, #0]
				}
				flag_timer2=0;
 80005e4:	4b3b      	ldr	r3, [pc, #236]	; (80006d4 <HAL_TIM_IC_CaptureCallback+0x1c4>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	601a      	str	r2, [r3, #0]
			}

		}
	}

	if (htim->Instance == TIM5)
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	4a3f      	ldr	r2, [pc, #252]	; (80006ec <HAL_TIM_IC_CaptureCallback+0x1dc>)
 80005f0:	4293      	cmp	r3, r2
 80005f2:	d16b      	bne.n	80006cc <HAL_TIM_IC_CaptureCallback+0x1bc>
	{
		// Check if the callback is triggered by the correct timer (TIMx)
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4)
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	7f1b      	ldrb	r3, [r3, #28]
 80005f8:	2b08      	cmp	r3, #8
 80005fa:	d167      	bne.n	80006cc <HAL_TIM_IC_CaptureCallback+0x1bc>
		{
			if (flag_timer5==0)
 80005fc:	4b3c      	ldr	r3, [pc, #240]	; (80006f0 <HAL_TIM_IC_CaptureCallback+0x1e0>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	2b00      	cmp	r3, #0
 8000602:	d10d      	bne.n	8000620 <HAL_TIM_IC_CaptureCallback+0x110>
			{
				t1_timer5=HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_4);
 8000604:	210c      	movs	r1, #12
 8000606:	6878      	ldr	r0, [r7, #4]
 8000608:	f002 fa48 	bl	8002a9c <HAL_TIM_ReadCapturedValue>
 800060c:	4603      	mov	r3, r0
 800060e:	461a      	mov	r2, r3
 8000610:	4b38      	ldr	r3, [pc, #224]	; (80006f4 <HAL_TIM_IC_CaptureCallback+0x1e4>)
 8000612:	601a      	str	r2, [r3, #0]

				flag_timer5++;
 8000614:	4b36      	ldr	r3, [pc, #216]	; (80006f0 <HAL_TIM_IC_CaptureCallback+0x1e0>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	3301      	adds	r3, #1
 800061a:	4a35      	ldr	r2, [pc, #212]	; (80006f0 <HAL_TIM_IC_CaptureCallback+0x1e0>)
 800061c:	6013      	str	r3, [r2, #0]
				HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1); // enable timer5
			}

		}
	}
}
 800061e:	e055      	b.n	80006cc <HAL_TIM_IC_CaptureCallback+0x1bc>
			else if(flag_timer5==1)
 8000620:	4b33      	ldr	r3, [pc, #204]	; (80006f0 <HAL_TIM_IC_CaptureCallback+0x1e0>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	2b01      	cmp	r3, #1
 8000626:	d151      	bne.n	80006cc <HAL_TIM_IC_CaptureCallback+0x1bc>
				t2_timer5=HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_4);
 8000628:	210c      	movs	r1, #12
 800062a:	6878      	ldr	r0, [r7, #4]
 800062c:	f002 fa36 	bl	8002a9c <HAL_TIM_ReadCapturedValue>
 8000630:	4603      	mov	r3, r0
 8000632:	461a      	mov	r2, r3
 8000634:	4b30      	ldr	r3, [pc, #192]	; (80006f8 <HAL_TIM_IC_CaptureCallback+0x1e8>)
 8000636:	601a      	str	r2, [r3, #0]
				if(t2_timer5>t1_timer5)
 8000638:	4b2f      	ldr	r3, [pc, #188]	; (80006f8 <HAL_TIM_IC_CaptureCallback+0x1e8>)
 800063a:	681a      	ldr	r2, [r3, #0]
 800063c:	4b2d      	ldr	r3, [pc, #180]	; (80006f4 <HAL_TIM_IC_CaptureCallback+0x1e4>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	429a      	cmp	r2, r3
 8000642:	dd07      	ble.n	8000654 <HAL_TIM_IC_CaptureCallback+0x144>
					time_timer5=t2_timer5-t1_timer5;
 8000644:	4b2c      	ldr	r3, [pc, #176]	; (80006f8 <HAL_TIM_IC_CaptureCallback+0x1e8>)
 8000646:	681a      	ldr	r2, [r3, #0]
 8000648:	4b2a      	ldr	r3, [pc, #168]	; (80006f4 <HAL_TIM_IC_CaptureCallback+0x1e4>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	1ad3      	subs	r3, r2, r3
 800064e:	4a2b      	ldr	r2, [pc, #172]	; (80006fc <HAL_TIM_IC_CaptureCallback+0x1ec>)
 8000650:	6013      	str	r3, [r2, #0]
 8000652:	e010      	b.n	8000676 <HAL_TIM_IC_CaptureCallback+0x166>
				else if(t1_timer5>t2_timer5)
 8000654:	4b27      	ldr	r3, [pc, #156]	; (80006f4 <HAL_TIM_IC_CaptureCallback+0x1e4>)
 8000656:	681a      	ldr	r2, [r3, #0]
 8000658:	4b27      	ldr	r3, [pc, #156]	; (80006f8 <HAL_TIM_IC_CaptureCallback+0x1e8>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	429a      	cmp	r2, r3
 800065e:	dd0a      	ble.n	8000676 <HAL_TIM_IC_CaptureCallback+0x166>
					time_timer5 = ((0xffff-t1_timer5)+t2_timer5)+1;
 8000660:	4b24      	ldr	r3, [pc, #144]	; (80006f4 <HAL_TIM_IC_CaptureCallback+0x1e4>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8000668:	33ff      	adds	r3, #255	; 0xff
 800066a:	4a23      	ldr	r2, [pc, #140]	; (80006f8 <HAL_TIM_IC_CaptureCallback+0x1e8>)
 800066c:	6812      	ldr	r2, [r2, #0]
 800066e:	4413      	add	r3, r2
 8000670:	3301      	adds	r3, #1
 8000672:	4a22      	ldr	r2, [pc, #136]	; (80006fc <HAL_TIM_IC_CaptureCallback+0x1ec>)
 8000674:	6013      	str	r3, [r2, #0]
				distance_u2=(((int)time_timer5*340*100)/((int)2*1000000))+1;
 8000676:	4b21      	ldr	r3, [pc, #132]	; (80006fc <HAL_TIM_IC_CaptureCallback+0x1ec>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	f248 42d0 	movw	r2, #34000	; 0x84d0
 800067e:	fb02 f303 	mul.w	r3, r2, r3
 8000682:	4a18      	ldr	r2, [pc, #96]	; (80006e4 <HAL_TIM_IC_CaptureCallback+0x1d4>)
 8000684:	fb82 1203 	smull	r1, r2, r2, r3
 8000688:	14d2      	asrs	r2, r2, #19
 800068a:	17db      	asrs	r3, r3, #31
 800068c:	1ad3      	subs	r3, r2, r3
 800068e:	3301      	adds	r3, #1
 8000690:	4a1b      	ldr	r2, [pc, #108]	; (8000700 <HAL_TIM_IC_CaptureCallback+0x1f0>)
 8000692:	6013      	str	r3, [r2, #0]
				if (distance_u2 > 500)
 8000694:	4b1a      	ldr	r3, [pc, #104]	; (8000700 <HAL_TIM_IC_CaptureCallback+0x1f0>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800069c:	dd04      	ble.n	80006a8 <HAL_TIM_IC_CaptureCallback+0x198>
					distance_u2 = 500;
 800069e:	4b18      	ldr	r3, [pc, #96]	; (8000700 <HAL_TIM_IC_CaptureCallback+0x1f0>)
 80006a0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80006a4:	601a      	str	r2, [r3, #0]
 80006a6:	e006      	b.n	80006b6 <HAL_TIM_IC_CaptureCallback+0x1a6>
				else if (distance_u2<0)
 80006a8:	4b15      	ldr	r3, [pc, #84]	; (8000700 <HAL_TIM_IC_CaptureCallback+0x1f0>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	da02      	bge.n	80006b6 <HAL_TIM_IC_CaptureCallback+0x1a6>
					distance_u2=0;
 80006b0:	4b13      	ldr	r3, [pc, #76]	; (8000700 <HAL_TIM_IC_CaptureCallback+0x1f0>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	601a      	str	r2, [r3, #0]
				flag_timer5=0;
 80006b6:	4b0e      	ldr	r3, [pc, #56]	; (80006f0 <HAL_TIM_IC_CaptureCallback+0x1e0>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	601a      	str	r2, [r3, #0]
				HAL_TIM_IC_Stop_IT(&htim5, TIM_CHANNEL_4); //disable timer 2
 80006bc:	210c      	movs	r1, #12
 80006be:	4811      	ldr	r0, [pc, #68]	; (8000704 <HAL_TIM_IC_CaptureCallback+0x1f4>)
 80006c0:	f001 fed2 	bl	8002468 <HAL_TIM_IC_Stop_IT>
				HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1); // enable timer5
 80006c4:	2100      	movs	r1, #0
 80006c6:	4810      	ldr	r0, [pc, #64]	; (8000708 <HAL_TIM_IC_CaptureCallback+0x1f8>)
 80006c8:	f001 fdb4 	bl	8002234 <HAL_TIM_IC_Start_IT>
}
 80006cc:	bf00      	nop
 80006ce:	3708      	adds	r7, #8
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	20000380 	.word	0x20000380
 80006d8:	20000384 	.word	0x20000384
 80006dc:	20000388 	.word	0x20000388
 80006e0:	2000038c 	.word	0x2000038c
 80006e4:	431bde83 	.word	0x431bde83
 80006e8:	20000378 	.word	0x20000378
 80006ec:	40000c00 	.word	0x40000c00
 80006f0:	20000390 	.word	0x20000390
 80006f4:	20000394 	.word	0x20000394
 80006f8:	20000398 	.word	0x20000398
 80006fc:	2000039c 	.word	0x2000039c
 8000700:	2000037c 	.word	0x2000037c
 8000704:	20000320 	.word	0x20000320
 8000708:	200002d8 	.word	0x200002d8

0800070c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 800070c:	b5b0      	push	{r4, r5, r7, lr}
 800070e:	b09c      	sub	sp, #112	; 0x70
 8000710:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000712:	f000 fcc3 	bl	800109c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000716:	f000 f869 	bl	80007ec <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800071a:	f000 f9df 	bl	8000adc <MX_GPIO_Init>
	MX_TIM2_Init();
 800071e:	f000 f8fd 	bl	800091c <MX_TIM2_Init>
	MX_TIM5_Init();
 8000722:	f000 f96b 	bl	80009fc <MX_TIM5_Init>
	MX_SPI1_Init();
 8000726:	f000 f8c3 	bl	80008b0 <MX_SPI1_Init>
	/* USER CODE BEGIN 2 */
	EnableUltrasonic_1_TimerInterrutp();
 800072a:	f000 fa2f 	bl	8000b8c <EnableUltrasonic_1_TimerInterrutp>
	EnableUltrasonic_2_TimerInterrutp();
 800072e:	f000 fa39 	bl	8000ba4 <EnableUltrasonic_2_TimerInterrutp>
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* definition and creation of UltrasonicTask */
	osThreadDef(UltrasonicTask, UltrasonicTask_init, osPriorityNormal, 0, 128);
 8000732:	4b26      	ldr	r3, [pc, #152]	; (80007cc <main+0xc0>)
 8000734:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8000738:	461d      	mov	r5, r3
 800073a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800073c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800073e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000742:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	UltrasonicTaskHandle = osThreadCreate(osThread(UltrasonicTask), NULL);
 8000746:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800074a:	2100      	movs	r1, #0
 800074c:	4618      	mov	r0, r3
 800074e:	f002 fd06 	bl	800315e <osThreadCreate>
 8000752:	4603      	mov	r3, r0
 8000754:	4a1e      	ldr	r2, [pc, #120]	; (80007d0 <main+0xc4>)
 8000756:	6013      	str	r3, [r2, #0]

	/* definition and creation of Task2 */
	osThreadDef(Task2, Task2_init, osPriorityNormal, 0, 128);
 8000758:	4b1e      	ldr	r3, [pc, #120]	; (80007d4 <main+0xc8>)
 800075a:	f107 0438 	add.w	r4, r7, #56	; 0x38
 800075e:	461d      	mov	r5, r3
 8000760:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000762:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000764:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000768:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	Task2Handle = osThreadCreate(osThread(Task2), NULL);
 800076c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000770:	2100      	movs	r1, #0
 8000772:	4618      	mov	r0, r3
 8000774:	f002 fcf3 	bl	800315e <osThreadCreate>
 8000778:	4603      	mov	r3, r0
 800077a:	4a17      	ldr	r2, [pc, #92]	; (80007d8 <main+0xcc>)
 800077c:	6013      	str	r3, [r2, #0]

	/* definition and creation of UItraSonic */
	osThreadDef(UItraSonic, UltraSonic2, osPriorityIdle, 0, 128);
 800077e:	4b17      	ldr	r3, [pc, #92]	; (80007dc <main+0xd0>)
 8000780:	f107 041c 	add.w	r4, r7, #28
 8000784:	461d      	mov	r5, r3
 8000786:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000788:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800078a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800078e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	UItraSonicHandle = osThreadCreate(osThread(UItraSonic), NULL);
 8000792:	f107 031c 	add.w	r3, r7, #28
 8000796:	2100      	movs	r1, #0
 8000798:	4618      	mov	r0, r3
 800079a:	f002 fce0 	bl	800315e <osThreadCreate>
 800079e:	4603      	mov	r3, r0
 80007a0:	4a0f      	ldr	r2, [pc, #60]	; (80007e0 <main+0xd4>)
 80007a2:	6013      	str	r3, [r2, #0]

	/* definition and creation of myTask04 */
	osThreadDef(myTask04, StartTask04, osPriorityIdle, 0, 128);
 80007a4:	4b0f      	ldr	r3, [pc, #60]	; (80007e4 <main+0xd8>)
 80007a6:	463c      	mov	r4, r7
 80007a8:	461d      	mov	r5, r3
 80007aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007ae:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80007b2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	myTask04Handle = osThreadCreate(osThread(myTask04), NULL);
 80007b6:	463b      	mov	r3, r7
 80007b8:	2100      	movs	r1, #0
 80007ba:	4618      	mov	r0, r3
 80007bc:	f002 fccf 	bl	800315e <osThreadCreate>
 80007c0:	4603      	mov	r3, r0
 80007c2:	4a09      	ldr	r2, [pc, #36]	; (80007e8 <main+0xdc>)
 80007c4:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

	/* Start scheduler */
	osKernelStart();
 80007c6:	f002 fcc3 	bl	8003150 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 80007ca:	e7fe      	b.n	80007ca <main+0xbe>
 80007cc:	0800463c 	.word	0x0800463c
 80007d0:	20000368 	.word	0x20000368
 80007d4:	08004660 	.word	0x08004660
 80007d8:	2000036c 	.word	0x2000036c
 80007dc:	08004688 	.word	0x08004688
 80007e0:	20000370 	.word	0x20000370
 80007e4:	080046b0 	.word	0x080046b0
 80007e8:	20000374 	.word	0x20000374

080007ec <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b094      	sub	sp, #80	; 0x50
 80007f0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007f2:	f107 0320 	add.w	r3, r7, #32
 80007f6:	2230      	movs	r2, #48	; 0x30
 80007f8:	2100      	movs	r1, #0
 80007fa:	4618      	mov	r0, r3
 80007fc:	f003 fede 	bl	80045bc <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000800:	f107 030c 	add.w	r3, r7, #12
 8000804:	2200      	movs	r2, #0
 8000806:	601a      	str	r2, [r3, #0]
 8000808:	605a      	str	r2, [r3, #4]
 800080a:	609a      	str	r2, [r3, #8]
 800080c:	60da      	str	r2, [r3, #12]
 800080e:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000810:	2300      	movs	r3, #0
 8000812:	60bb      	str	r3, [r7, #8]
 8000814:	4b24      	ldr	r3, [pc, #144]	; (80008a8 <SystemClock_Config+0xbc>)
 8000816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000818:	4a23      	ldr	r2, [pc, #140]	; (80008a8 <SystemClock_Config+0xbc>)
 800081a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800081e:	6413      	str	r3, [r2, #64]	; 0x40
 8000820:	4b21      	ldr	r3, [pc, #132]	; (80008a8 <SystemClock_Config+0xbc>)
 8000822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000824:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000828:	60bb      	str	r3, [r7, #8]
 800082a:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800082c:	2300      	movs	r3, #0
 800082e:	607b      	str	r3, [r7, #4]
 8000830:	4b1e      	ldr	r3, [pc, #120]	; (80008ac <SystemClock_Config+0xc0>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000838:	4a1c      	ldr	r2, [pc, #112]	; (80008ac <SystemClock_Config+0xc0>)
 800083a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800083e:	6013      	str	r3, [r2, #0]
 8000840:	4b1a      	ldr	r3, [pc, #104]	; (80008ac <SystemClock_Config+0xc0>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000848:	607b      	str	r3, [r7, #4]
 800084a:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800084c:	230a      	movs	r3, #10
 800084e:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000850:	2301      	movs	r3, #1
 8000852:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000854:	2310      	movs	r3, #16
 8000856:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000858:	2301      	movs	r3, #1
 800085a:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800085c:	2300      	movs	r3, #0
 800085e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000860:	f107 0320 	add.w	r3, r7, #32
 8000864:	4618      	mov	r0, r3
 8000866:	f000 fedb 	bl	8001620 <HAL_RCC_OscConfig>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <SystemClock_Config+0x88>
	{
		Error_Handler();
 8000870:	f000 fa2e 	bl	8000cd0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000874:	230f      	movs	r3, #15
 8000876:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000878:	2300      	movs	r3, #0
 800087a:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 800087c:	2380      	movs	r3, #128	; 0x80
 800087e:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000880:	2300      	movs	r3, #0
 8000882:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000884:	2300      	movs	r3, #0
 8000886:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000888:	f107 030c 	add.w	r3, r7, #12
 800088c:	2100      	movs	r1, #0
 800088e:	4618      	mov	r0, r3
 8000890:	f001 f93e 	bl	8001b10 <HAL_RCC_ClockConfig>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <SystemClock_Config+0xb2>
	{
		Error_Handler();
 800089a:	f000 fa19 	bl	8000cd0 <Error_Handler>
	}
}
 800089e:	bf00      	nop
 80008a0:	3750      	adds	r7, #80	; 0x50
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	40023800 	.word	0x40023800
 80008ac:	40007000 	.word	0x40007000

080008b0 <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 80008b4:	4b17      	ldr	r3, [pc, #92]	; (8000914 <MX_SPI1_Init+0x64>)
 80008b6:	4a18      	ldr	r2, [pc, #96]	; (8000918 <MX_SPI1_Init+0x68>)
 80008b8:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 80008ba:	4b16      	ldr	r3, [pc, #88]	; (8000914 <MX_SPI1_Init+0x64>)
 80008bc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80008c0:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80008c2:	4b14      	ldr	r3, [pc, #80]	; (8000914 <MX_SPI1_Init+0x64>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80008c8:	4b12      	ldr	r3, [pc, #72]	; (8000914 <MX_SPI1_Init+0x64>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008ce:	4b11      	ldr	r3, [pc, #68]	; (8000914 <MX_SPI1_Init+0x64>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008d4:	4b0f      	ldr	r3, [pc, #60]	; (8000914 <MX_SPI1_Init+0x64>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 80008da:	4b0e      	ldr	r3, [pc, #56]	; (8000914 <MX_SPI1_Init+0x64>)
 80008dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008e0:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80008e2:	4b0c      	ldr	r3, [pc, #48]	; (8000914 <MX_SPI1_Init+0x64>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008e8:	4b0a      	ldr	r3, [pc, #40]	; (8000914 <MX_SPI1_Init+0x64>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80008ee:	4b09      	ldr	r3, [pc, #36]	; (8000914 <MX_SPI1_Init+0x64>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008f4:	4b07      	ldr	r3, [pc, #28]	; (8000914 <MX_SPI1_Init+0x64>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 80008fa:	4b06      	ldr	r3, [pc, #24]	; (8000914 <MX_SPI1_Init+0x64>)
 80008fc:	220a      	movs	r2, #10
 80008fe:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000900:	4804      	ldr	r0, [pc, #16]	; (8000914 <MX_SPI1_Init+0x64>)
 8000902:	f001 fb03 	bl	8001f0c <HAL_SPI_Init>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d001      	beq.n	8000910 <MX_SPI1_Init+0x60>
	{
		Error_Handler();
 800090c:	f000 f9e0 	bl	8000cd0 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8000910:	bf00      	nop
 8000912:	bd80      	pop	{r7, pc}
 8000914:	20000280 	.word	0x20000280
 8000918:	40013000 	.word	0x40013000

0800091c <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b08a      	sub	sp, #40	; 0x28
 8000920:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000922:	f107 0318 	add.w	r3, r7, #24
 8000926:	2200      	movs	r2, #0
 8000928:	601a      	str	r2, [r3, #0]
 800092a:	605a      	str	r2, [r3, #4]
 800092c:	609a      	str	r2, [r3, #8]
 800092e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000930:	f107 0310 	add.w	r3, r7, #16
 8000934:	2200      	movs	r2, #0
 8000936:	601a      	str	r2, [r3, #0]
 8000938:	605a      	str	r2, [r3, #4]
	TIM_IC_InitTypeDef sConfigIC = {0};
 800093a:	463b      	mov	r3, r7
 800093c:	2200      	movs	r2, #0
 800093e:	601a      	str	r2, [r3, #0]
 8000940:	605a      	str	r2, [r3, #4]
 8000942:	609a      	str	r2, [r3, #8]
 8000944:	60da      	str	r2, [r3, #12]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8000946:	4b2c      	ldr	r3, [pc, #176]	; (80009f8 <MX_TIM2_Init+0xdc>)
 8000948:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800094c:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 15;
 800094e:	4b2a      	ldr	r3, [pc, #168]	; (80009f8 <MX_TIM2_Init+0xdc>)
 8000950:	220f      	movs	r2, #15
 8000952:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000954:	4b28      	ldr	r3, [pc, #160]	; (80009f8 <MX_TIM2_Init+0xdc>)
 8000956:	2200      	movs	r2, #0
 8000958:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 65535;
 800095a:	4b27      	ldr	r3, [pc, #156]	; (80009f8 <MX_TIM2_Init+0xdc>)
 800095c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000960:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000962:	4b25      	ldr	r3, [pc, #148]	; (80009f8 <MX_TIM2_Init+0xdc>)
 8000964:	2200      	movs	r2, #0
 8000966:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000968:	4b23      	ldr	r3, [pc, #140]	; (80009f8 <MX_TIM2_Init+0xdc>)
 800096a:	2200      	movs	r2, #0
 800096c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800096e:	4822      	ldr	r0, [pc, #136]	; (80009f8 <MX_TIM2_Init+0xdc>)
 8000970:	f001 fb55 	bl	800201e <HAL_TIM_Base_Init>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <MX_TIM2_Init+0x62>
	{
		Error_Handler();
 800097a:	f000 f9a9 	bl	8000cd0 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800097e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000982:	61bb      	str	r3, [r7, #24]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000984:	f107 0318 	add.w	r3, r7, #24
 8000988:	4619      	mov	r1, r3
 800098a:	481b      	ldr	r0, [pc, #108]	; (80009f8 <MX_TIM2_Init+0xdc>)
 800098c:	f001 ffbe 	bl	800290c <HAL_TIM_ConfigClockSource>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <MX_TIM2_Init+0x7e>
	{
		Error_Handler();
 8000996:	f000 f99b 	bl	8000cd0 <Error_Handler>
	}
	if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800099a:	4817      	ldr	r0, [pc, #92]	; (80009f8 <MX_TIM2_Init+0xdc>)
 800099c:	f001 fbf0 	bl	8002180 <HAL_TIM_IC_Init>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <MX_TIM2_Init+0x8e>
	{
		Error_Handler();
 80009a6:	f000 f993 	bl	8000cd0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009aa:	2300      	movs	r3, #0
 80009ac:	613b      	str	r3, [r7, #16]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009ae:	2300      	movs	r3, #0
 80009b0:	617b      	str	r3, [r7, #20]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80009b2:	f107 0310 	add.w	r3, r7, #16
 80009b6:	4619      	mov	r1, r3
 80009b8:	480f      	ldr	r0, [pc, #60]	; (80009f8 <MX_TIM2_Init+0xdc>)
 80009ba:	f002 fb2f 	bl	800301c <HAL_TIMEx_MasterConfigSynchronization>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d001      	beq.n	80009c8 <MX_TIM2_Init+0xac>
	{
		Error_Handler();
 80009c4:	f000 f984 	bl	8000cd0 <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 80009c8:	230a      	movs	r3, #10
 80009ca:	603b      	str	r3, [r7, #0]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80009cc:	2301      	movs	r3, #1
 80009ce:	607b      	str	r3, [r7, #4]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80009d0:	2300      	movs	r3, #0
 80009d2:	60bb      	str	r3, [r7, #8]
	sConfigIC.ICFilter = 0;
 80009d4:	2300      	movs	r3, #0
 80009d6:	60fb      	str	r3, [r7, #12]
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80009d8:	463b      	mov	r3, r7
 80009da:	2200      	movs	r2, #0
 80009dc:	4619      	mov	r1, r3
 80009de:	4806      	ldr	r0, [pc, #24]	; (80009f8 <MX_TIM2_Init+0xdc>)
 80009e0:	f001 fef8 	bl	80027d4 <HAL_TIM_IC_ConfigChannel>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <MX_TIM2_Init+0xd2>
	{
		Error_Handler();
 80009ea:	f000 f971 	bl	8000cd0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 80009ee:	bf00      	nop
 80009f0:	3728      	adds	r7, #40	; 0x28
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	200002d8 	.word	0x200002d8

080009fc <MX_TIM5_Init>:
 * @brief TIM5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM5_Init(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b08a      	sub	sp, #40	; 0x28
 8000a00:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM5_Init 0 */

	/* USER CODE END TIM5_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a02:	f107 0318 	add.w	r3, r7, #24
 8000a06:	2200      	movs	r2, #0
 8000a08:	601a      	str	r2, [r3, #0]
 8000a0a:	605a      	str	r2, [r3, #4]
 8000a0c:	609a      	str	r2, [r3, #8]
 8000a0e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a10:	f107 0310 	add.w	r3, r7, #16
 8000a14:	2200      	movs	r2, #0
 8000a16:	601a      	str	r2, [r3, #0]
 8000a18:	605a      	str	r2, [r3, #4]
	TIM_IC_InitTypeDef sConfigIC = {0};
 8000a1a:	463b      	mov	r3, r7
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	601a      	str	r2, [r3, #0]
 8000a20:	605a      	str	r2, [r3, #4]
 8000a22:	609a      	str	r2, [r3, #8]
 8000a24:	60da      	str	r2, [r3, #12]

	/* USER CODE BEGIN TIM5_Init 1 */

	/* USER CODE END TIM5_Init 1 */
	htim5.Instance = TIM5;
 8000a26:	4b2b      	ldr	r3, [pc, #172]	; (8000ad4 <MX_TIM5_Init+0xd8>)
 8000a28:	4a2b      	ldr	r2, [pc, #172]	; (8000ad8 <MX_TIM5_Init+0xdc>)
 8000a2a:	601a      	str	r2, [r3, #0]
	htim5.Init.Prescaler = 15;
 8000a2c:	4b29      	ldr	r3, [pc, #164]	; (8000ad4 <MX_TIM5_Init+0xd8>)
 8000a2e:	220f      	movs	r2, #15
 8000a30:	605a      	str	r2, [r3, #4]
	htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a32:	4b28      	ldr	r3, [pc, #160]	; (8000ad4 <MX_TIM5_Init+0xd8>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	609a      	str	r2, [r3, #8]
	htim5.Init.Period = 65535;
 8000a38:	4b26      	ldr	r3, [pc, #152]	; (8000ad4 <MX_TIM5_Init+0xd8>)
 8000a3a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a3e:	60da      	str	r2, [r3, #12]
	htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a40:	4b24      	ldr	r3, [pc, #144]	; (8000ad4 <MX_TIM5_Init+0xd8>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	611a      	str	r2, [r3, #16]
	htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a46:	4b23      	ldr	r3, [pc, #140]	; (8000ad4 <MX_TIM5_Init+0xd8>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000a4c:	4821      	ldr	r0, [pc, #132]	; (8000ad4 <MX_TIM5_Init+0xd8>)
 8000a4e:	f001 fae6 	bl	800201e <HAL_TIM_Base_Init>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d001      	beq.n	8000a5c <MX_TIM5_Init+0x60>
	{
		Error_Handler();
 8000a58:	f000 f93a 	bl	8000cd0 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a60:	61bb      	str	r3, [r7, #24]
	if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000a62:	f107 0318 	add.w	r3, r7, #24
 8000a66:	4619      	mov	r1, r3
 8000a68:	481a      	ldr	r0, [pc, #104]	; (8000ad4 <MX_TIM5_Init+0xd8>)
 8000a6a:	f001 ff4f 	bl	800290c <HAL_TIM_ConfigClockSource>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <MX_TIM5_Init+0x7c>
	{
		Error_Handler();
 8000a74:	f000 f92c 	bl	8000cd0 <Error_Handler>
	}
	if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 8000a78:	4816      	ldr	r0, [pc, #88]	; (8000ad4 <MX_TIM5_Init+0xd8>)
 8000a7a:	f001 fb81 	bl	8002180 <HAL_TIM_IC_Init>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d001      	beq.n	8000a88 <MX_TIM5_Init+0x8c>
	{
		Error_Handler();
 8000a84:	f000 f924 	bl	8000cd0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	613b      	str	r3, [r7, #16]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	617b      	str	r3, [r7, #20]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000a90:	f107 0310 	add.w	r3, r7, #16
 8000a94:	4619      	mov	r1, r3
 8000a96:	480f      	ldr	r0, [pc, #60]	; (8000ad4 <MX_TIM5_Init+0xd8>)
 8000a98:	f002 fac0 	bl	800301c <HAL_TIMEx_MasterConfigSynchronization>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <MX_TIM5_Init+0xaa>
	{
		Error_Handler();
 8000aa2:	f000 f915 	bl	8000cd0 <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8000aa6:	230a      	movs	r3, #10
 8000aa8:	603b      	str	r3, [r7, #0]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000aaa:	2301      	movs	r3, #1
 8000aac:	607b      	str	r3, [r7, #4]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	60bb      	str	r3, [r7, #8]
	sConfigIC.ICFilter = 0;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	60fb      	str	r3, [r7, #12]
	if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8000ab6:	463b      	mov	r3, r7
 8000ab8:	220c      	movs	r2, #12
 8000aba:	4619      	mov	r1, r3
 8000abc:	4805      	ldr	r0, [pc, #20]	; (8000ad4 <MX_TIM5_Init+0xd8>)
 8000abe:	f001 fe89 	bl	80027d4 <HAL_TIM_IC_ConfigChannel>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <MX_TIM5_Init+0xd0>
	{
		Error_Handler();
 8000ac8:	f000 f902 	bl	8000cd0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM5_Init 2 */

	/* USER CODE END TIM5_Init 2 */

}
 8000acc:	bf00      	nop
 8000ace:	3728      	adds	r7, #40	; 0x28
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	20000320 	.word	0x20000320
 8000ad8:	40000c00 	.word	0x40000c00

08000adc <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b088      	sub	sp, #32
 8000ae0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae2:	f107 030c 	add.w	r3, r7, #12
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	601a      	str	r2, [r3, #0]
 8000aea:	605a      	str	r2, [r3, #4]
 8000aec:	609a      	str	r2, [r3, #8]
 8000aee:	60da      	str	r2, [r3, #12]
 8000af0:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000af2:	2300      	movs	r3, #0
 8000af4:	60bb      	str	r3, [r7, #8]
 8000af6:	4b22      	ldr	r3, [pc, #136]	; (8000b80 <MX_GPIO_Init+0xa4>)
 8000af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afa:	4a21      	ldr	r2, [pc, #132]	; (8000b80 <MX_GPIO_Init+0xa4>)
 8000afc:	f043 0301 	orr.w	r3, r3, #1
 8000b00:	6313      	str	r3, [r2, #48]	; 0x30
 8000b02:	4b1f      	ldr	r3, [pc, #124]	; (8000b80 <MX_GPIO_Init+0xa4>)
 8000b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b06:	f003 0301 	and.w	r3, r3, #1
 8000b0a:	60bb      	str	r3, [r7, #8]
 8000b0c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000b0e:	2300      	movs	r3, #0
 8000b10:	607b      	str	r3, [r7, #4]
 8000b12:	4b1b      	ldr	r3, [pc, #108]	; (8000b80 <MX_GPIO_Init+0xa4>)
 8000b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b16:	4a1a      	ldr	r2, [pc, #104]	; (8000b80 <MX_GPIO_Init+0xa4>)
 8000b18:	f043 0302 	orr.w	r3, r3, #2
 8000b1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b1e:	4b18      	ldr	r3, [pc, #96]	; (8000b80 <MX_GPIO_Init+0xa4>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b22:	f003 0302 	and.w	r3, r3, #2
 8000b26:	607b      	str	r3, [r7, #4]
 8000b28:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4, GPIO_PIN_RESET);
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	2116      	movs	r1, #22
 8000b2e:	4815      	ldr	r0, [pc, #84]	; (8000b84 <MX_GPIO_Init+0xa8>)
 8000b30:	f000 fd5c 	bl	80015ec <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 8000b34:	2200      	movs	r2, #0
 8000b36:	2107      	movs	r1, #7
 8000b38:	4813      	ldr	r0, [pc, #76]	; (8000b88 <MX_GPIO_Init+0xac>)
 8000b3a:	f000 fd57 	bl	80015ec <HAL_GPIO_WritePin>

	/*Configure GPIO pins : PA1 PA2 PA4 */
	GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4;
 8000b3e:	2316      	movs	r3, #22
 8000b40:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b42:	2301      	movs	r3, #1
 8000b44:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b46:	2300      	movs	r3, #0
 8000b48:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b4e:	f107 030c 	add.w	r3, r7, #12
 8000b52:	4619      	mov	r1, r3
 8000b54:	480b      	ldr	r0, [pc, #44]	; (8000b84 <MX_GPIO_Init+0xa8>)
 8000b56:	f000 fbc5 	bl	80012e4 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB0 PB1 PB2 */
	GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000b5a:	2307      	movs	r3, #7
 8000b5c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b5e:	2301      	movs	r3, #1
 8000b60:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b62:	2300      	movs	r3, #0
 8000b64:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b66:	2300      	movs	r3, #0
 8000b68:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b6a:	f107 030c 	add.w	r3, r7, #12
 8000b6e:	4619      	mov	r1, r3
 8000b70:	4805      	ldr	r0, [pc, #20]	; (8000b88 <MX_GPIO_Init+0xac>)
 8000b72:	f000 fbb7 	bl	80012e4 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000b76:	bf00      	nop
 8000b78:	3720      	adds	r7, #32
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	40023800 	.word	0x40023800
 8000b84:	40020000 	.word	0x40020000
 8000b88:	40020400 	.word	0x40020400

08000b8c <EnableUltrasonic_1_TimerInterrutp>:

/* USER CODE BEGIN 4 */
void EnableUltrasonic_1_TimerInterrutp (void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8000b90:	b662      	cpsie	i
}
 8000b92:	bf00      	nop
	__enable_irq(); // enable global interrupt
	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1); // enable timer2
 8000b94:	2100      	movs	r1, #0
 8000b96:	4802      	ldr	r0, [pc, #8]	; (8000ba0 <EnableUltrasonic_1_TimerInterrutp+0x14>)
 8000b98:	f001 fb4c 	bl	8002234 <HAL_TIM_IC_Start_IT>
}
 8000b9c:	bf00      	nop
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	200002d8 	.word	0x200002d8

08000ba4 <EnableUltrasonic_2_TimerInterrutp>:
void EnableUltrasonic_2_TimerInterrutp (void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsie i" : : : "memory");
 8000ba8:	b662      	cpsie	i
}
 8000baa:	bf00      	nop
	__enable_irq(); // enable global interrupt
	HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_4); // enable timer2
 8000bac:	210c      	movs	r1, #12
 8000bae:	4802      	ldr	r0, [pc, #8]	; (8000bb8 <EnableUltrasonic_2_TimerInterrutp+0x14>)
 8000bb0:	f001 fb40 	bl	8002234 <HAL_TIM_IC_Start_IT>
}
 8000bb4:	bf00      	nop
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	20000320 	.word	0x20000320

08000bbc <UltrasonicTask_init>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_UltrasonicTask_init */
void UltrasonicTask_init(void const * argument)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b084      	sub	sp, #16
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
	/* Infinite loop */
	while(1)
	{
		// Trigger ultrasonic sensor
		//enable trigger for ultrasonic_1
		HAL_GPIO_WritePin(TRIG_PORT_U1, TRIG_PIN_U1,GPIO_PIN_SET);
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	2102      	movs	r1, #2
 8000bc8:	480a      	ldr	r0, [pc, #40]	; (8000bf4 <UltrasonicTask_init+0x38>)
 8000bca:	f000 fd0f 	bl	80015ec <HAL_GPIO_WritePin>
		for( int i=0;i<80;i++); //delay for 10 us //put no ass operation
 8000bce:	2300      	movs	r3, #0
 8000bd0:	60fb      	str	r3, [r7, #12]
 8000bd2:	e002      	b.n	8000bda <UltrasonicTask_init+0x1e>
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	3301      	adds	r3, #1
 8000bd8:	60fb      	str	r3, [r7, #12]
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	2b4f      	cmp	r3, #79	; 0x4f
 8000bde:	ddf9      	ble.n	8000bd4 <UltrasonicTask_init+0x18>
		HAL_GPIO_WritePin(TRIG_PORT_U1, TRIG_PIN_U1,GPIO_PIN_RESET);
 8000be0:	2200      	movs	r2, #0
 8000be2:	2102      	movs	r1, #2
 8000be4:	4803      	ldr	r0, [pc, #12]	; (8000bf4 <UltrasonicTask_init+0x38>)
 8000be6:	f000 fd01 	bl	80015ec <HAL_GPIO_WritePin>
		osDelay(120);
 8000bea:	2078      	movs	r0, #120	; 0x78
 8000bec:	f002 fb03 	bl	80031f6 <osDelay>
		HAL_GPIO_WritePin(TRIG_PORT_U1, TRIG_PIN_U1,GPIO_PIN_SET);
 8000bf0:	e7e8      	b.n	8000bc4 <UltrasonicTask_init+0x8>
 8000bf2:	bf00      	nop
 8000bf4:	40020000 	.word	0x40020000

08000bf8 <Task2_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Task2_init */
void Task2_init(void const * argument)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Task2_init */
	vTaskDelay(FIRST_DELAY_U1); // first delay : time between trigger and getting read
 8000c00:	2032      	movs	r0, #50	; 0x32
 8000c02:	f002 fd53 	bl	80036ac <vTaskDelay>
	for(;;)
	{
		// Check if an object is near

		// if there is something near ultrasonic1 the led will be on
		if(distance_u1<NEAR_OBJECT_THRESHOLD)
 8000c06:	4b09      	ldr	r3, [pc, #36]	; (8000c2c <Task2_init+0x34>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	2b13      	cmp	r3, #19
 8000c0c:	dc05      	bgt.n	8000c1a <Task2_init+0x22>
		{
			HAL_GPIO_WritePin(LED_PORT_U1, LED_PIN_U1,GPIO_PIN_SET);
 8000c0e:	2201      	movs	r2, #1
 8000c10:	2104      	movs	r1, #4
 8000c12:	4807      	ldr	r0, [pc, #28]	; (8000c30 <Task2_init+0x38>)
 8000c14:	f000 fcea 	bl	80015ec <HAL_GPIO_WritePin>
 8000c18:	e004      	b.n	8000c24 <Task2_init+0x2c>
		}
		else
		{
			HAL_GPIO_WritePin(LED_PORT_U1, LED_PIN_U1,GPIO_PIN_RESET);
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	2104      	movs	r1, #4
 8000c1e:	4804      	ldr	r0, [pc, #16]	; (8000c30 <Task2_init+0x38>)
 8000c20:	f000 fce4 	bl	80015ec <HAL_GPIO_WritePin>
		//	else
		//	{
		//		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,GPIO_PIN_RESET);
		//	}

		osDelay(60);// > 60 ms
 8000c24:	203c      	movs	r0, #60	; 0x3c
 8000c26:	f002 fae6 	bl	80031f6 <osDelay>
		if(distance_u1<NEAR_OBJECT_THRESHOLD)
 8000c2a:	e7ec      	b.n	8000c06 <Task2_init+0xe>
 8000c2c:	20000378 	.word	0x20000378
 8000c30:	40020000 	.word	0x40020000

08000c34 <UltraSonic2>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_UltraSonic2 */
void UltraSonic2(void const * argument)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b084      	sub	sp, #16
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN UltraSonic2 */
	vTaskDelay(FIRST_DELAY_U2); // Time between two UltraSonic
 8000c3c:	203c      	movs	r0, #60	; 0x3c
 8000c3e:	f002 fd35 	bl	80036ac <vTaskDelay>
	/* Infinite loop */
	while(1)
	{
		// Trigger ultrasonic sensor
		//enable trigger for ultrasonic_2
		HAL_GPIO_WritePin(TRIG_PORT_U2, TRIG_PIN_U2,GPIO_PIN_SET);
 8000c42:	2201      	movs	r2, #1
 8000c44:	2110      	movs	r1, #16
 8000c46:	480a      	ldr	r0, [pc, #40]	; (8000c70 <UltraSonic2+0x3c>)
 8000c48:	f000 fcd0 	bl	80015ec <HAL_GPIO_WritePin>
		for( int i=0;i<80;i++); //delay for 10 us //put no ass operation
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	60fb      	str	r3, [r7, #12]
 8000c50:	e002      	b.n	8000c58 <UltraSonic2+0x24>
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	3301      	adds	r3, #1
 8000c56:	60fb      	str	r3, [r7, #12]
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	2b4f      	cmp	r3, #79	; 0x4f
 8000c5c:	ddf9      	ble.n	8000c52 <UltraSonic2+0x1e>
		HAL_GPIO_WritePin(TRIG_PORT_U2, TRIG_PIN_U2,GPIO_PIN_RESET);
 8000c5e:	2200      	movs	r2, #0
 8000c60:	2110      	movs	r1, #16
 8000c62:	4803      	ldr	r0, [pc, #12]	; (8000c70 <UltraSonic2+0x3c>)
 8000c64:	f000 fcc2 	bl	80015ec <HAL_GPIO_WritePin>
		osDelay(120);
 8000c68:	2078      	movs	r0, #120	; 0x78
 8000c6a:	f002 fac4 	bl	80031f6 <osDelay>
		HAL_GPIO_WritePin(TRIG_PORT_U2, TRIG_PIN_U2,GPIO_PIN_SET);
 8000c6e:	e7e8      	b.n	8000c42 <UltraSonic2+0xe>
 8000c70:	40020000 	.word	0x40020000

08000c74 <StartTask04>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask04 */
void StartTask04(void const * argument)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartTask04 */
	vTaskDelay(SECOND_DELAY_U2); // first delay : time between trigger and getting read
 8000c7c:	206e      	movs	r0, #110	; 0x6e
 8000c7e:	f002 fd15 	bl	80036ac <vTaskDelay>
	/* Infinite loop */
	while(1)
	{
		//if there is something near ultrasonic2 the led will be on
		if(distance_u2<NEAR_OBJECT_THRESHOLD)
 8000c82:	4b08      	ldr	r3, [pc, #32]	; (8000ca4 <StartTask04+0x30>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	2b13      	cmp	r3, #19
 8000c88:	dc05      	bgt.n	8000c96 <StartTask04+0x22>
		{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,GPIO_PIN_SET);
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	2101      	movs	r1, #1
 8000c8e:	4806      	ldr	r0, [pc, #24]	; (8000ca8 <StartTask04+0x34>)
 8000c90:	f000 fcac 	bl	80015ec <HAL_GPIO_WritePin>
 8000c94:	e7f5      	b.n	8000c82 <StartTask04+0xe>
		}
		else
		{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,GPIO_PIN_RESET);
 8000c96:	2200      	movs	r2, #0
 8000c98:	2101      	movs	r1, #1
 8000c9a:	4803      	ldr	r0, [pc, #12]	; (8000ca8 <StartTask04+0x34>)
 8000c9c:	f000 fca6 	bl	80015ec <HAL_GPIO_WritePin>
		if(distance_u2<NEAR_OBJECT_THRESHOLD)
 8000ca0:	e7ef      	b.n	8000c82 <StartTask04+0xe>
 8000ca2:	bf00      	nop
 8000ca4:	2000037c 	.word	0x2000037c
 8000ca8:	40020400 	.word	0x40020400

08000cac <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM1) {
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a04      	ldr	r2, [pc, #16]	; (8000ccc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000cba:	4293      	cmp	r3, r2
 8000cbc:	d101      	bne.n	8000cc2 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8000cbe:	f000 fa0f 	bl	80010e0 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8000cc2:	bf00      	nop
 8000cc4:	3708      	adds	r7, #8
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	40010000 	.word	0x40010000

08000cd0 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cd4:	b672      	cpsid	i
}
 8000cd6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000cd8:	e7fe      	b.n	8000cd8 <Error_Handler+0x8>
	...

08000cdc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b082      	sub	sp, #8
 8000ce0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	607b      	str	r3, [r7, #4]
 8000ce6:	4b12      	ldr	r3, [pc, #72]	; (8000d30 <HAL_MspInit+0x54>)
 8000ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cea:	4a11      	ldr	r2, [pc, #68]	; (8000d30 <HAL_MspInit+0x54>)
 8000cec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cf0:	6453      	str	r3, [r2, #68]	; 0x44
 8000cf2:	4b0f      	ldr	r3, [pc, #60]	; (8000d30 <HAL_MspInit+0x54>)
 8000cf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cf6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cfa:	607b      	str	r3, [r7, #4]
 8000cfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cfe:	2300      	movs	r3, #0
 8000d00:	603b      	str	r3, [r7, #0]
 8000d02:	4b0b      	ldr	r3, [pc, #44]	; (8000d30 <HAL_MspInit+0x54>)
 8000d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d06:	4a0a      	ldr	r2, [pc, #40]	; (8000d30 <HAL_MspInit+0x54>)
 8000d08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d0c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d0e:	4b08      	ldr	r3, [pc, #32]	; (8000d30 <HAL_MspInit+0x54>)
 8000d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d16:	603b      	str	r3, [r7, #0]
 8000d18:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	210f      	movs	r1, #15
 8000d1e:	f06f 0001 	mvn.w	r0, #1
 8000d22:	f000 fab5 	bl	8001290 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d26:	bf00      	nop
 8000d28:	3708      	adds	r7, #8
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	40023800 	.word	0x40023800

08000d34 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b08a      	sub	sp, #40	; 0x28
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d3c:	f107 0314 	add.w	r3, r7, #20
 8000d40:	2200      	movs	r2, #0
 8000d42:	601a      	str	r2, [r3, #0]
 8000d44:	605a      	str	r2, [r3, #4]
 8000d46:	609a      	str	r2, [r3, #8]
 8000d48:	60da      	str	r2, [r3, #12]
 8000d4a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	4a19      	ldr	r2, [pc, #100]	; (8000db8 <HAL_SPI_MspInit+0x84>)
 8000d52:	4293      	cmp	r3, r2
 8000d54:	d12b      	bne.n	8000dae <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d56:	2300      	movs	r3, #0
 8000d58:	613b      	str	r3, [r7, #16]
 8000d5a:	4b18      	ldr	r3, [pc, #96]	; (8000dbc <HAL_SPI_MspInit+0x88>)
 8000d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d5e:	4a17      	ldr	r2, [pc, #92]	; (8000dbc <HAL_SPI_MspInit+0x88>)
 8000d60:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d64:	6453      	str	r3, [r2, #68]	; 0x44
 8000d66:	4b15      	ldr	r3, [pc, #84]	; (8000dbc <HAL_SPI_MspInit+0x88>)
 8000d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d6a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d6e:	613b      	str	r3, [r7, #16]
 8000d70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d72:	2300      	movs	r3, #0
 8000d74:	60fb      	str	r3, [r7, #12]
 8000d76:	4b11      	ldr	r3, [pc, #68]	; (8000dbc <HAL_SPI_MspInit+0x88>)
 8000d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7a:	4a10      	ldr	r2, [pc, #64]	; (8000dbc <HAL_SPI_MspInit+0x88>)
 8000d7c:	f043 0301 	orr.w	r3, r3, #1
 8000d80:	6313      	str	r3, [r2, #48]	; 0x30
 8000d82:	4b0e      	ldr	r3, [pc, #56]	; (8000dbc <HAL_SPI_MspInit+0x88>)
 8000d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d86:	f003 0301 	and.w	r3, r3, #1
 8000d8a:	60fb      	str	r3, [r7, #12]
 8000d8c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000d8e:	23e0      	movs	r3, #224	; 0xe0
 8000d90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d92:	2302      	movs	r3, #2
 8000d94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d96:	2300      	movs	r3, #0
 8000d98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d9a:	2303      	movs	r3, #3
 8000d9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d9e:	2305      	movs	r3, #5
 8000da0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000da2:	f107 0314 	add.w	r3, r7, #20
 8000da6:	4619      	mov	r1, r3
 8000da8:	4805      	ldr	r0, [pc, #20]	; (8000dc0 <HAL_SPI_MspInit+0x8c>)
 8000daa:	f000 fa9b 	bl	80012e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000dae:	bf00      	nop
 8000db0:	3728      	adds	r7, #40	; 0x28
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	40013000 	.word	0x40013000
 8000dbc:	40023800 	.word	0x40023800
 8000dc0:	40020000 	.word	0x40020000

08000dc4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b08c      	sub	sp, #48	; 0x30
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dcc:	f107 031c 	add.w	r3, r7, #28
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	601a      	str	r2, [r3, #0]
 8000dd4:	605a      	str	r2, [r3, #4]
 8000dd6:	609a      	str	r2, [r3, #8]
 8000dd8:	60da      	str	r2, [r3, #12]
 8000dda:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000de4:	d134      	bne.n	8000e50 <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000de6:	2300      	movs	r3, #0
 8000de8:	61bb      	str	r3, [r7, #24]
 8000dea:	4b38      	ldr	r3, [pc, #224]	; (8000ecc <HAL_TIM_Base_MspInit+0x108>)
 8000dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dee:	4a37      	ldr	r2, [pc, #220]	; (8000ecc <HAL_TIM_Base_MspInit+0x108>)
 8000df0:	f043 0301 	orr.w	r3, r3, #1
 8000df4:	6413      	str	r3, [r2, #64]	; 0x40
 8000df6:	4b35      	ldr	r3, [pc, #212]	; (8000ecc <HAL_TIM_Base_MspInit+0x108>)
 8000df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dfa:	f003 0301 	and.w	r3, r3, #1
 8000dfe:	61bb      	str	r3, [r7, #24]
 8000e00:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e02:	2300      	movs	r3, #0
 8000e04:	617b      	str	r3, [r7, #20]
 8000e06:	4b31      	ldr	r3, [pc, #196]	; (8000ecc <HAL_TIM_Base_MspInit+0x108>)
 8000e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0a:	4a30      	ldr	r2, [pc, #192]	; (8000ecc <HAL_TIM_Base_MspInit+0x108>)
 8000e0c:	f043 0301 	orr.w	r3, r3, #1
 8000e10:	6313      	str	r3, [r2, #48]	; 0x30
 8000e12:	4b2e      	ldr	r3, [pc, #184]	; (8000ecc <HAL_TIM_Base_MspInit+0x108>)
 8000e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e16:	f003 0301 	and.w	r3, r3, #1
 8000e1a:	617b      	str	r3, [r7, #20]
 8000e1c:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000e1e:	2301      	movs	r3, #1
 8000e20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e22:	2302      	movs	r3, #2
 8000e24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e26:	2300      	movs	r3, #0
 8000e28:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000e2e:	2301      	movs	r3, #1
 8000e30:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e32:	f107 031c 	add.w	r3, r7, #28
 8000e36:	4619      	mov	r1, r3
 8000e38:	4825      	ldr	r0, [pc, #148]	; (8000ed0 <HAL_TIM_Base_MspInit+0x10c>)
 8000e3a:	f000 fa53 	bl	80012e4 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8000e3e:	2200      	movs	r2, #0
 8000e40:	2105      	movs	r1, #5
 8000e42:	201c      	movs	r0, #28
 8000e44:	f000 fa24 	bl	8001290 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000e48:	201c      	movs	r0, #28
 8000e4a:	f000 fa3d 	bl	80012c8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8000e4e:	e038      	b.n	8000ec2 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM5)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4a1f      	ldr	r2, [pc, #124]	; (8000ed4 <HAL_TIM_Base_MspInit+0x110>)
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d133      	bne.n	8000ec2 <HAL_TIM_Base_MspInit+0xfe>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	613b      	str	r3, [r7, #16]
 8000e5e:	4b1b      	ldr	r3, [pc, #108]	; (8000ecc <HAL_TIM_Base_MspInit+0x108>)
 8000e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e62:	4a1a      	ldr	r2, [pc, #104]	; (8000ecc <HAL_TIM_Base_MspInit+0x108>)
 8000e64:	f043 0308 	orr.w	r3, r3, #8
 8000e68:	6413      	str	r3, [r2, #64]	; 0x40
 8000e6a:	4b18      	ldr	r3, [pc, #96]	; (8000ecc <HAL_TIM_Base_MspInit+0x108>)
 8000e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e6e:	f003 0308 	and.w	r3, r3, #8
 8000e72:	613b      	str	r3, [r7, #16]
 8000e74:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e76:	2300      	movs	r3, #0
 8000e78:	60fb      	str	r3, [r7, #12]
 8000e7a:	4b14      	ldr	r3, [pc, #80]	; (8000ecc <HAL_TIM_Base_MspInit+0x108>)
 8000e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7e:	4a13      	ldr	r2, [pc, #76]	; (8000ecc <HAL_TIM_Base_MspInit+0x108>)
 8000e80:	f043 0301 	orr.w	r3, r3, #1
 8000e84:	6313      	str	r3, [r2, #48]	; 0x30
 8000e86:	4b11      	ldr	r3, [pc, #68]	; (8000ecc <HAL_TIM_Base_MspInit+0x108>)
 8000e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8a:	f003 0301 	and.w	r3, r3, #1
 8000e8e:	60fb      	str	r3, [r7, #12]
 8000e90:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000e92:	2308      	movs	r3, #8
 8000e94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e96:	2302      	movs	r3, #2
 8000e98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8000ea2:	2302      	movs	r3, #2
 8000ea4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ea6:	f107 031c 	add.w	r3, r7, #28
 8000eaa:	4619      	mov	r1, r3
 8000eac:	4808      	ldr	r0, [pc, #32]	; (8000ed0 <HAL_TIM_Base_MspInit+0x10c>)
 8000eae:	f000 fa19 	bl	80012e4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	2105      	movs	r1, #5
 8000eb6:	2032      	movs	r0, #50	; 0x32
 8000eb8:	f000 f9ea 	bl	8001290 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8000ebc:	2032      	movs	r0, #50	; 0x32
 8000ebe:	f000 fa03 	bl	80012c8 <HAL_NVIC_EnableIRQ>
}
 8000ec2:	bf00      	nop
 8000ec4:	3730      	adds	r7, #48	; 0x30
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	40023800 	.word	0x40023800
 8000ed0:	40020000 	.word	0x40020000
 8000ed4:	40000c00 	.word	0x40000c00

08000ed8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b08c      	sub	sp, #48	; 0x30
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000ee8:	2300      	movs	r3, #0
 8000eea:	60bb      	str	r3, [r7, #8]
 8000eec:	4b2e      	ldr	r3, [pc, #184]	; (8000fa8 <HAL_InitTick+0xd0>)
 8000eee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ef0:	4a2d      	ldr	r2, [pc, #180]	; (8000fa8 <HAL_InitTick+0xd0>)
 8000ef2:	f043 0301 	orr.w	r3, r3, #1
 8000ef6:	6453      	str	r3, [r2, #68]	; 0x44
 8000ef8:	4b2b      	ldr	r3, [pc, #172]	; (8000fa8 <HAL_InitTick+0xd0>)
 8000efa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000efc:	f003 0301 	and.w	r3, r3, #1
 8000f00:	60bb      	str	r3, [r7, #8]
 8000f02:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000f04:	f107 020c 	add.w	r2, r7, #12
 8000f08:	f107 0310 	add.w	r3, r7, #16
 8000f0c:	4611      	mov	r1, r2
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f000 ffca 	bl	8001ea8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000f14:	f000 ffb4 	bl	8001e80 <HAL_RCC_GetPCLK2Freq>
 8000f18:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f1c:	4a23      	ldr	r2, [pc, #140]	; (8000fac <HAL_InitTick+0xd4>)
 8000f1e:	fba2 2303 	umull	r2, r3, r2, r3
 8000f22:	0c9b      	lsrs	r3, r3, #18
 8000f24:	3b01      	subs	r3, #1
 8000f26:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000f28:	4b21      	ldr	r3, [pc, #132]	; (8000fb0 <HAL_InitTick+0xd8>)
 8000f2a:	4a22      	ldr	r2, [pc, #136]	; (8000fb4 <HAL_InitTick+0xdc>)
 8000f2c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000f2e:	4b20      	ldr	r3, [pc, #128]	; (8000fb0 <HAL_InitTick+0xd8>)
 8000f30:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000f34:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000f36:	4a1e      	ldr	r2, [pc, #120]	; (8000fb0 <HAL_InitTick+0xd8>)
 8000f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f3a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000f3c:	4b1c      	ldr	r3, [pc, #112]	; (8000fb0 <HAL_InitTick+0xd8>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f42:	4b1b      	ldr	r3, [pc, #108]	; (8000fb0 <HAL_InitTick+0xd8>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f48:	4b19      	ldr	r3, [pc, #100]	; (8000fb0 <HAL_InitTick+0xd8>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000f4e:	4818      	ldr	r0, [pc, #96]	; (8000fb0 <HAL_InitTick+0xd8>)
 8000f50:	f001 f865 	bl	800201e <HAL_TIM_Base_Init>
 8000f54:	4603      	mov	r3, r0
 8000f56:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000f5a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d11b      	bne.n	8000f9a <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000f62:	4813      	ldr	r0, [pc, #76]	; (8000fb0 <HAL_InitTick+0xd8>)
 8000f64:	f001 f8aa 	bl	80020bc <HAL_TIM_Base_Start_IT>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000f6e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d111      	bne.n	8000f9a <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000f76:	2019      	movs	r0, #25
 8000f78:	f000 f9a6 	bl	80012c8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	2b0f      	cmp	r3, #15
 8000f80:	d808      	bhi.n	8000f94 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000f82:	2200      	movs	r2, #0
 8000f84:	6879      	ldr	r1, [r7, #4]
 8000f86:	2019      	movs	r0, #25
 8000f88:	f000 f982 	bl	8001290 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f8c:	4a0a      	ldr	r2, [pc, #40]	; (8000fb8 <HAL_InitTick+0xe0>)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	6013      	str	r3, [r2, #0]
 8000f92:	e002      	b.n	8000f9a <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000f94:	2301      	movs	r3, #1
 8000f96:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000f9a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	3730      	adds	r7, #48	; 0x30
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	40023800 	.word	0x40023800
 8000fac:	431bde83 	.word	0x431bde83
 8000fb0:	200003a0 	.word	0x200003a0
 8000fb4:	40010000 	.word	0x40010000
 8000fb8:	20000004 	.word	0x20000004

08000fbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fc0:	e7fe      	b.n	8000fc0 <NMI_Handler+0x4>

08000fc2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fc2:	b480      	push	{r7}
 8000fc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fc6:	e7fe      	b.n	8000fc6 <HardFault_Handler+0x4>

08000fc8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fcc:	e7fe      	b.n	8000fcc <MemManage_Handler+0x4>

08000fce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fce:	b480      	push	{r7}
 8000fd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fd2:	e7fe      	b.n	8000fd2 <BusFault_Handler+0x4>

08000fd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fd8:	e7fe      	b.n	8000fd8 <UsageFault_Handler+0x4>

08000fda <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fda:	b480      	push	{r7}
 8000fdc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fde:	bf00      	nop
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe6:	4770      	bx	lr

08000fe8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000fec:	4802      	ldr	r0, [pc, #8]	; (8000ff8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000fee:	f001 fae9 	bl	80025c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000ff2:	bf00      	nop
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	200003a0 	.word	0x200003a0

08000ffc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001000:	4802      	ldr	r0, [pc, #8]	; (800100c <TIM2_IRQHandler+0x10>)
 8001002:	f001 fadf 	bl	80025c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001006:	bf00      	nop
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	200002d8 	.word	0x200002d8

08001010 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001014:	4802      	ldr	r0, [pc, #8]	; (8001020 <TIM5_IRQHandler+0x10>)
 8001016:	f001 fad5 	bl	80025c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800101a:	bf00      	nop
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	20000320 	.word	0x20000320

08001024 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001028:	4b06      	ldr	r3, [pc, #24]	; (8001044 <SystemInit+0x20>)
 800102a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800102e:	4a05      	ldr	r2, [pc, #20]	; (8001044 <SystemInit+0x20>)
 8001030:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001034:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001038:	bf00      	nop
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop
 8001044:	e000ed00 	.word	0xe000ed00

08001048 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001048:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001080 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800104c:	480d      	ldr	r0, [pc, #52]	; (8001084 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800104e:	490e      	ldr	r1, [pc, #56]	; (8001088 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001050:	4a0e      	ldr	r2, [pc, #56]	; (800108c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001052:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001054:	e002      	b.n	800105c <LoopCopyDataInit>

08001056 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001056:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001058:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800105a:	3304      	adds	r3, #4

0800105c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800105c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800105e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001060:	d3f9      	bcc.n	8001056 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001062:	4a0b      	ldr	r2, [pc, #44]	; (8001090 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001064:	4c0b      	ldr	r4, [pc, #44]	; (8001094 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001066:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001068:	e001      	b.n	800106e <LoopFillZerobss>

0800106a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800106a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800106c:	3204      	adds	r2, #4

0800106e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800106e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001070:	d3fb      	bcc.n	800106a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001072:	f7ff ffd7 	bl	8001024 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001076:	f003 faa9 	bl	80045cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800107a:	f7ff fb47 	bl	800070c <main>
  bx  lr    
 800107e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001080:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001084:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001088:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 800108c:	080046fc 	.word	0x080046fc
  ldr r2, =_sbss
 8001090:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001094:	20004140 	.word	0x20004140

08001098 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001098:	e7fe      	b.n	8001098 <ADC_IRQHandler>
	...

0800109c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010a0:	4b0e      	ldr	r3, [pc, #56]	; (80010dc <HAL_Init+0x40>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a0d      	ldr	r2, [pc, #52]	; (80010dc <HAL_Init+0x40>)
 80010a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010ac:	4b0b      	ldr	r3, [pc, #44]	; (80010dc <HAL_Init+0x40>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a0a      	ldr	r2, [pc, #40]	; (80010dc <HAL_Init+0x40>)
 80010b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010b8:	4b08      	ldr	r3, [pc, #32]	; (80010dc <HAL_Init+0x40>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a07      	ldr	r2, [pc, #28]	; (80010dc <HAL_Init+0x40>)
 80010be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010c4:	2003      	movs	r0, #3
 80010c6:	f000 f8d8 	bl	800127a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010ca:	200f      	movs	r0, #15
 80010cc:	f7ff ff04 	bl	8000ed8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010d0:	f7ff fe04 	bl	8000cdc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010d4:	2300      	movs	r3, #0
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	40023c00 	.word	0x40023c00

080010e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010e4:	4b06      	ldr	r3, [pc, #24]	; (8001100 <HAL_IncTick+0x20>)
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	461a      	mov	r2, r3
 80010ea:	4b06      	ldr	r3, [pc, #24]	; (8001104 <HAL_IncTick+0x24>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	4413      	add	r3, r2
 80010f0:	4a04      	ldr	r2, [pc, #16]	; (8001104 <HAL_IncTick+0x24>)
 80010f2:	6013      	str	r3, [r2, #0]
}
 80010f4:	bf00      	nop
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr
 80010fe:	bf00      	nop
 8001100:	20000008 	.word	0x20000008
 8001104:	200003e8 	.word	0x200003e8

08001108 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  return uwTick;
 800110c:	4b03      	ldr	r3, [pc, #12]	; (800111c <HAL_GetTick+0x14>)
 800110e:	681b      	ldr	r3, [r3, #0]
}
 8001110:	4618      	mov	r0, r3
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr
 800111a:	bf00      	nop
 800111c:	200003e8 	.word	0x200003e8

08001120 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001120:	b480      	push	{r7}
 8001122:	b085      	sub	sp, #20
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	f003 0307 	and.w	r3, r3, #7
 800112e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001130:	4b0c      	ldr	r3, [pc, #48]	; (8001164 <__NVIC_SetPriorityGrouping+0x44>)
 8001132:	68db      	ldr	r3, [r3, #12]
 8001134:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001136:	68ba      	ldr	r2, [r7, #8]
 8001138:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800113c:	4013      	ands	r3, r2
 800113e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001144:	68bb      	ldr	r3, [r7, #8]
 8001146:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001148:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800114c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001150:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001152:	4a04      	ldr	r2, [pc, #16]	; (8001164 <__NVIC_SetPriorityGrouping+0x44>)
 8001154:	68bb      	ldr	r3, [r7, #8]
 8001156:	60d3      	str	r3, [r2, #12]
}
 8001158:	bf00      	nop
 800115a:	3714      	adds	r7, #20
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr
 8001164:	e000ed00 	.word	0xe000ed00

08001168 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800116c:	4b04      	ldr	r3, [pc, #16]	; (8001180 <__NVIC_GetPriorityGrouping+0x18>)
 800116e:	68db      	ldr	r3, [r3, #12]
 8001170:	0a1b      	lsrs	r3, r3, #8
 8001172:	f003 0307 	and.w	r3, r3, #7
}
 8001176:	4618      	mov	r0, r3
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr
 8001180:	e000ed00 	.word	0xe000ed00

08001184 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001184:	b480      	push	{r7}
 8001186:	b083      	sub	sp, #12
 8001188:	af00      	add	r7, sp, #0
 800118a:	4603      	mov	r3, r0
 800118c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800118e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001192:	2b00      	cmp	r3, #0
 8001194:	db0b      	blt.n	80011ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001196:	79fb      	ldrb	r3, [r7, #7]
 8001198:	f003 021f 	and.w	r2, r3, #31
 800119c:	4907      	ldr	r1, [pc, #28]	; (80011bc <__NVIC_EnableIRQ+0x38>)
 800119e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a2:	095b      	lsrs	r3, r3, #5
 80011a4:	2001      	movs	r0, #1
 80011a6:	fa00 f202 	lsl.w	r2, r0, r2
 80011aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011ae:	bf00      	nop
 80011b0:	370c      	adds	r7, #12
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr
 80011ba:	bf00      	nop
 80011bc:	e000e100 	.word	0xe000e100

080011c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	4603      	mov	r3, r0
 80011c8:	6039      	str	r1, [r7, #0]
 80011ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	db0a      	blt.n	80011ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	b2da      	uxtb	r2, r3
 80011d8:	490c      	ldr	r1, [pc, #48]	; (800120c <__NVIC_SetPriority+0x4c>)
 80011da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011de:	0112      	lsls	r2, r2, #4
 80011e0:	b2d2      	uxtb	r2, r2
 80011e2:	440b      	add	r3, r1
 80011e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011e8:	e00a      	b.n	8001200 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	b2da      	uxtb	r2, r3
 80011ee:	4908      	ldr	r1, [pc, #32]	; (8001210 <__NVIC_SetPriority+0x50>)
 80011f0:	79fb      	ldrb	r3, [r7, #7]
 80011f2:	f003 030f 	and.w	r3, r3, #15
 80011f6:	3b04      	subs	r3, #4
 80011f8:	0112      	lsls	r2, r2, #4
 80011fa:	b2d2      	uxtb	r2, r2
 80011fc:	440b      	add	r3, r1
 80011fe:	761a      	strb	r2, [r3, #24]
}
 8001200:	bf00      	nop
 8001202:	370c      	adds	r7, #12
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr
 800120c:	e000e100 	.word	0xe000e100
 8001210:	e000ed00 	.word	0xe000ed00

08001214 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001214:	b480      	push	{r7}
 8001216:	b089      	sub	sp, #36	; 0x24
 8001218:	af00      	add	r7, sp, #0
 800121a:	60f8      	str	r0, [r7, #12]
 800121c:	60b9      	str	r1, [r7, #8]
 800121e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	f003 0307 	and.w	r3, r3, #7
 8001226:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001228:	69fb      	ldr	r3, [r7, #28]
 800122a:	f1c3 0307 	rsb	r3, r3, #7
 800122e:	2b04      	cmp	r3, #4
 8001230:	bf28      	it	cs
 8001232:	2304      	movcs	r3, #4
 8001234:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001236:	69fb      	ldr	r3, [r7, #28]
 8001238:	3304      	adds	r3, #4
 800123a:	2b06      	cmp	r3, #6
 800123c:	d902      	bls.n	8001244 <NVIC_EncodePriority+0x30>
 800123e:	69fb      	ldr	r3, [r7, #28]
 8001240:	3b03      	subs	r3, #3
 8001242:	e000      	b.n	8001246 <NVIC_EncodePriority+0x32>
 8001244:	2300      	movs	r3, #0
 8001246:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001248:	f04f 32ff 	mov.w	r2, #4294967295
 800124c:	69bb      	ldr	r3, [r7, #24]
 800124e:	fa02 f303 	lsl.w	r3, r2, r3
 8001252:	43da      	mvns	r2, r3
 8001254:	68bb      	ldr	r3, [r7, #8]
 8001256:	401a      	ands	r2, r3
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800125c:	f04f 31ff 	mov.w	r1, #4294967295
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	fa01 f303 	lsl.w	r3, r1, r3
 8001266:	43d9      	mvns	r1, r3
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800126c:	4313      	orrs	r3, r2
         );
}
 800126e:	4618      	mov	r0, r3
 8001270:	3724      	adds	r7, #36	; 0x24
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr

0800127a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800127a:	b580      	push	{r7, lr}
 800127c:	b082      	sub	sp, #8
 800127e:	af00      	add	r7, sp, #0
 8001280:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001282:	6878      	ldr	r0, [r7, #4]
 8001284:	f7ff ff4c 	bl	8001120 <__NVIC_SetPriorityGrouping>
}
 8001288:	bf00      	nop
 800128a:	3708      	adds	r7, #8
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}

08001290 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001290:	b580      	push	{r7, lr}
 8001292:	b086      	sub	sp, #24
 8001294:	af00      	add	r7, sp, #0
 8001296:	4603      	mov	r3, r0
 8001298:	60b9      	str	r1, [r7, #8]
 800129a:	607a      	str	r2, [r7, #4]
 800129c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800129e:	2300      	movs	r3, #0
 80012a0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012a2:	f7ff ff61 	bl	8001168 <__NVIC_GetPriorityGrouping>
 80012a6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012a8:	687a      	ldr	r2, [r7, #4]
 80012aa:	68b9      	ldr	r1, [r7, #8]
 80012ac:	6978      	ldr	r0, [r7, #20]
 80012ae:	f7ff ffb1 	bl	8001214 <NVIC_EncodePriority>
 80012b2:	4602      	mov	r2, r0
 80012b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012b8:	4611      	mov	r1, r2
 80012ba:	4618      	mov	r0, r3
 80012bc:	f7ff ff80 	bl	80011c0 <__NVIC_SetPriority>
}
 80012c0:	bf00      	nop
 80012c2:	3718      	adds	r7, #24
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}

080012c8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	4603      	mov	r3, r0
 80012d0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d6:	4618      	mov	r0, r3
 80012d8:	f7ff ff54 	bl	8001184 <__NVIC_EnableIRQ>
}
 80012dc:	bf00      	nop
 80012de:	3708      	adds	r7, #8
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}

080012e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b089      	sub	sp, #36	; 0x24
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
 80012ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80012ee:	2300      	movs	r3, #0
 80012f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80012f2:	2300      	movs	r3, #0
 80012f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80012f6:	2300      	movs	r3, #0
 80012f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012fa:	2300      	movs	r3, #0
 80012fc:	61fb      	str	r3, [r7, #28]
 80012fe:	e159      	b.n	80015b4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001300:	2201      	movs	r2, #1
 8001302:	69fb      	ldr	r3, [r7, #28]
 8001304:	fa02 f303 	lsl.w	r3, r2, r3
 8001308:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	697a      	ldr	r2, [r7, #20]
 8001310:	4013      	ands	r3, r2
 8001312:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001314:	693a      	ldr	r2, [r7, #16]
 8001316:	697b      	ldr	r3, [r7, #20]
 8001318:	429a      	cmp	r2, r3
 800131a:	f040 8148 	bne.w	80015ae <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	f003 0303 	and.w	r3, r3, #3
 8001326:	2b01      	cmp	r3, #1
 8001328:	d005      	beq.n	8001336 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001332:	2b02      	cmp	r3, #2
 8001334:	d130      	bne.n	8001398 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	689b      	ldr	r3, [r3, #8]
 800133a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800133c:	69fb      	ldr	r3, [r7, #28]
 800133e:	005b      	lsls	r3, r3, #1
 8001340:	2203      	movs	r2, #3
 8001342:	fa02 f303 	lsl.w	r3, r2, r3
 8001346:	43db      	mvns	r3, r3
 8001348:	69ba      	ldr	r2, [r7, #24]
 800134a:	4013      	ands	r3, r2
 800134c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	68da      	ldr	r2, [r3, #12]
 8001352:	69fb      	ldr	r3, [r7, #28]
 8001354:	005b      	lsls	r3, r3, #1
 8001356:	fa02 f303 	lsl.w	r3, r2, r3
 800135a:	69ba      	ldr	r2, [r7, #24]
 800135c:	4313      	orrs	r3, r2
 800135e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	69ba      	ldr	r2, [r7, #24]
 8001364:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800136c:	2201      	movs	r2, #1
 800136e:	69fb      	ldr	r3, [r7, #28]
 8001370:	fa02 f303 	lsl.w	r3, r2, r3
 8001374:	43db      	mvns	r3, r3
 8001376:	69ba      	ldr	r2, [r7, #24]
 8001378:	4013      	ands	r3, r2
 800137a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	091b      	lsrs	r3, r3, #4
 8001382:	f003 0201 	and.w	r2, r3, #1
 8001386:	69fb      	ldr	r3, [r7, #28]
 8001388:	fa02 f303 	lsl.w	r3, r2, r3
 800138c:	69ba      	ldr	r2, [r7, #24]
 800138e:	4313      	orrs	r3, r2
 8001390:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	69ba      	ldr	r2, [r7, #24]
 8001396:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	f003 0303 	and.w	r3, r3, #3
 80013a0:	2b03      	cmp	r3, #3
 80013a2:	d017      	beq.n	80013d4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	68db      	ldr	r3, [r3, #12]
 80013a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80013aa:	69fb      	ldr	r3, [r7, #28]
 80013ac:	005b      	lsls	r3, r3, #1
 80013ae:	2203      	movs	r2, #3
 80013b0:	fa02 f303 	lsl.w	r3, r2, r3
 80013b4:	43db      	mvns	r3, r3
 80013b6:	69ba      	ldr	r2, [r7, #24]
 80013b8:	4013      	ands	r3, r2
 80013ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	689a      	ldr	r2, [r3, #8]
 80013c0:	69fb      	ldr	r3, [r7, #28]
 80013c2:	005b      	lsls	r3, r3, #1
 80013c4:	fa02 f303 	lsl.w	r3, r2, r3
 80013c8:	69ba      	ldr	r2, [r7, #24]
 80013ca:	4313      	orrs	r3, r2
 80013cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	69ba      	ldr	r2, [r7, #24]
 80013d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	f003 0303 	and.w	r3, r3, #3
 80013dc:	2b02      	cmp	r3, #2
 80013de:	d123      	bne.n	8001428 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013e0:	69fb      	ldr	r3, [r7, #28]
 80013e2:	08da      	lsrs	r2, r3, #3
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	3208      	adds	r2, #8
 80013e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80013ee:	69fb      	ldr	r3, [r7, #28]
 80013f0:	f003 0307 	and.w	r3, r3, #7
 80013f4:	009b      	lsls	r3, r3, #2
 80013f6:	220f      	movs	r2, #15
 80013f8:	fa02 f303 	lsl.w	r3, r2, r3
 80013fc:	43db      	mvns	r3, r3
 80013fe:	69ba      	ldr	r2, [r7, #24]
 8001400:	4013      	ands	r3, r2
 8001402:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	691a      	ldr	r2, [r3, #16]
 8001408:	69fb      	ldr	r3, [r7, #28]
 800140a:	f003 0307 	and.w	r3, r3, #7
 800140e:	009b      	lsls	r3, r3, #2
 8001410:	fa02 f303 	lsl.w	r3, r2, r3
 8001414:	69ba      	ldr	r2, [r7, #24]
 8001416:	4313      	orrs	r3, r2
 8001418:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800141a:	69fb      	ldr	r3, [r7, #28]
 800141c:	08da      	lsrs	r2, r3, #3
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	3208      	adds	r2, #8
 8001422:	69b9      	ldr	r1, [r7, #24]
 8001424:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800142e:	69fb      	ldr	r3, [r7, #28]
 8001430:	005b      	lsls	r3, r3, #1
 8001432:	2203      	movs	r2, #3
 8001434:	fa02 f303 	lsl.w	r3, r2, r3
 8001438:	43db      	mvns	r3, r3
 800143a:	69ba      	ldr	r2, [r7, #24]
 800143c:	4013      	ands	r3, r2
 800143e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	f003 0203 	and.w	r2, r3, #3
 8001448:	69fb      	ldr	r3, [r7, #28]
 800144a:	005b      	lsls	r3, r3, #1
 800144c:	fa02 f303 	lsl.w	r3, r2, r3
 8001450:	69ba      	ldr	r2, [r7, #24]
 8001452:	4313      	orrs	r3, r2
 8001454:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	69ba      	ldr	r2, [r7, #24]
 800145a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001464:	2b00      	cmp	r3, #0
 8001466:	f000 80a2 	beq.w	80015ae <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800146a:	2300      	movs	r3, #0
 800146c:	60fb      	str	r3, [r7, #12]
 800146e:	4b57      	ldr	r3, [pc, #348]	; (80015cc <HAL_GPIO_Init+0x2e8>)
 8001470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001472:	4a56      	ldr	r2, [pc, #344]	; (80015cc <HAL_GPIO_Init+0x2e8>)
 8001474:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001478:	6453      	str	r3, [r2, #68]	; 0x44
 800147a:	4b54      	ldr	r3, [pc, #336]	; (80015cc <HAL_GPIO_Init+0x2e8>)
 800147c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800147e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001482:	60fb      	str	r3, [r7, #12]
 8001484:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001486:	4a52      	ldr	r2, [pc, #328]	; (80015d0 <HAL_GPIO_Init+0x2ec>)
 8001488:	69fb      	ldr	r3, [r7, #28]
 800148a:	089b      	lsrs	r3, r3, #2
 800148c:	3302      	adds	r3, #2
 800148e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001492:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001494:	69fb      	ldr	r3, [r7, #28]
 8001496:	f003 0303 	and.w	r3, r3, #3
 800149a:	009b      	lsls	r3, r3, #2
 800149c:	220f      	movs	r2, #15
 800149e:	fa02 f303 	lsl.w	r3, r2, r3
 80014a2:	43db      	mvns	r3, r3
 80014a4:	69ba      	ldr	r2, [r7, #24]
 80014a6:	4013      	ands	r3, r2
 80014a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	4a49      	ldr	r2, [pc, #292]	; (80015d4 <HAL_GPIO_Init+0x2f0>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d019      	beq.n	80014e6 <HAL_GPIO_Init+0x202>
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	4a48      	ldr	r2, [pc, #288]	; (80015d8 <HAL_GPIO_Init+0x2f4>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d013      	beq.n	80014e2 <HAL_GPIO_Init+0x1fe>
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	4a47      	ldr	r2, [pc, #284]	; (80015dc <HAL_GPIO_Init+0x2f8>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d00d      	beq.n	80014de <HAL_GPIO_Init+0x1fa>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	4a46      	ldr	r2, [pc, #280]	; (80015e0 <HAL_GPIO_Init+0x2fc>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d007      	beq.n	80014da <HAL_GPIO_Init+0x1f6>
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	4a45      	ldr	r2, [pc, #276]	; (80015e4 <HAL_GPIO_Init+0x300>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d101      	bne.n	80014d6 <HAL_GPIO_Init+0x1f2>
 80014d2:	2304      	movs	r3, #4
 80014d4:	e008      	b.n	80014e8 <HAL_GPIO_Init+0x204>
 80014d6:	2307      	movs	r3, #7
 80014d8:	e006      	b.n	80014e8 <HAL_GPIO_Init+0x204>
 80014da:	2303      	movs	r3, #3
 80014dc:	e004      	b.n	80014e8 <HAL_GPIO_Init+0x204>
 80014de:	2302      	movs	r3, #2
 80014e0:	e002      	b.n	80014e8 <HAL_GPIO_Init+0x204>
 80014e2:	2301      	movs	r3, #1
 80014e4:	e000      	b.n	80014e8 <HAL_GPIO_Init+0x204>
 80014e6:	2300      	movs	r3, #0
 80014e8:	69fa      	ldr	r2, [r7, #28]
 80014ea:	f002 0203 	and.w	r2, r2, #3
 80014ee:	0092      	lsls	r2, r2, #2
 80014f0:	4093      	lsls	r3, r2
 80014f2:	69ba      	ldr	r2, [r7, #24]
 80014f4:	4313      	orrs	r3, r2
 80014f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014f8:	4935      	ldr	r1, [pc, #212]	; (80015d0 <HAL_GPIO_Init+0x2ec>)
 80014fa:	69fb      	ldr	r3, [r7, #28]
 80014fc:	089b      	lsrs	r3, r3, #2
 80014fe:	3302      	adds	r3, #2
 8001500:	69ba      	ldr	r2, [r7, #24]
 8001502:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001506:	4b38      	ldr	r3, [pc, #224]	; (80015e8 <HAL_GPIO_Init+0x304>)
 8001508:	689b      	ldr	r3, [r3, #8]
 800150a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800150c:	693b      	ldr	r3, [r7, #16]
 800150e:	43db      	mvns	r3, r3
 8001510:	69ba      	ldr	r2, [r7, #24]
 8001512:	4013      	ands	r3, r2
 8001514:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800151e:	2b00      	cmp	r3, #0
 8001520:	d003      	beq.n	800152a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001522:	69ba      	ldr	r2, [r7, #24]
 8001524:	693b      	ldr	r3, [r7, #16]
 8001526:	4313      	orrs	r3, r2
 8001528:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800152a:	4a2f      	ldr	r2, [pc, #188]	; (80015e8 <HAL_GPIO_Init+0x304>)
 800152c:	69bb      	ldr	r3, [r7, #24]
 800152e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001530:	4b2d      	ldr	r3, [pc, #180]	; (80015e8 <HAL_GPIO_Init+0x304>)
 8001532:	68db      	ldr	r3, [r3, #12]
 8001534:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001536:	693b      	ldr	r3, [r7, #16]
 8001538:	43db      	mvns	r3, r3
 800153a:	69ba      	ldr	r2, [r7, #24]
 800153c:	4013      	ands	r3, r2
 800153e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001548:	2b00      	cmp	r3, #0
 800154a:	d003      	beq.n	8001554 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800154c:	69ba      	ldr	r2, [r7, #24]
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	4313      	orrs	r3, r2
 8001552:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001554:	4a24      	ldr	r2, [pc, #144]	; (80015e8 <HAL_GPIO_Init+0x304>)
 8001556:	69bb      	ldr	r3, [r7, #24]
 8001558:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800155a:	4b23      	ldr	r3, [pc, #140]	; (80015e8 <HAL_GPIO_Init+0x304>)
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001560:	693b      	ldr	r3, [r7, #16]
 8001562:	43db      	mvns	r3, r3
 8001564:	69ba      	ldr	r2, [r7, #24]
 8001566:	4013      	ands	r3, r2
 8001568:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001572:	2b00      	cmp	r3, #0
 8001574:	d003      	beq.n	800157e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001576:	69ba      	ldr	r2, [r7, #24]
 8001578:	693b      	ldr	r3, [r7, #16]
 800157a:	4313      	orrs	r3, r2
 800157c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800157e:	4a1a      	ldr	r2, [pc, #104]	; (80015e8 <HAL_GPIO_Init+0x304>)
 8001580:	69bb      	ldr	r3, [r7, #24]
 8001582:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001584:	4b18      	ldr	r3, [pc, #96]	; (80015e8 <HAL_GPIO_Init+0x304>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800158a:	693b      	ldr	r3, [r7, #16]
 800158c:	43db      	mvns	r3, r3
 800158e:	69ba      	ldr	r2, [r7, #24]
 8001590:	4013      	ands	r3, r2
 8001592:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800159c:	2b00      	cmp	r3, #0
 800159e:	d003      	beq.n	80015a8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80015a0:	69ba      	ldr	r2, [r7, #24]
 80015a2:	693b      	ldr	r3, [r7, #16]
 80015a4:	4313      	orrs	r3, r2
 80015a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80015a8:	4a0f      	ldr	r2, [pc, #60]	; (80015e8 <HAL_GPIO_Init+0x304>)
 80015aa:	69bb      	ldr	r3, [r7, #24]
 80015ac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015ae:	69fb      	ldr	r3, [r7, #28]
 80015b0:	3301      	adds	r3, #1
 80015b2:	61fb      	str	r3, [r7, #28]
 80015b4:	69fb      	ldr	r3, [r7, #28]
 80015b6:	2b0f      	cmp	r3, #15
 80015b8:	f67f aea2 	bls.w	8001300 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80015bc:	bf00      	nop
 80015be:	bf00      	nop
 80015c0:	3724      	adds	r7, #36	; 0x24
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr
 80015ca:	bf00      	nop
 80015cc:	40023800 	.word	0x40023800
 80015d0:	40013800 	.word	0x40013800
 80015d4:	40020000 	.word	0x40020000
 80015d8:	40020400 	.word	0x40020400
 80015dc:	40020800 	.word	0x40020800
 80015e0:	40020c00 	.word	0x40020c00
 80015e4:	40021000 	.word	0x40021000
 80015e8:	40013c00 	.word	0x40013c00

080015ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b083      	sub	sp, #12
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
 80015f4:	460b      	mov	r3, r1
 80015f6:	807b      	strh	r3, [r7, #2]
 80015f8:	4613      	mov	r3, r2
 80015fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015fc:	787b      	ldrb	r3, [r7, #1]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d003      	beq.n	800160a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001602:	887a      	ldrh	r2, [r7, #2]
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001608:	e003      	b.n	8001612 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800160a:	887b      	ldrh	r3, [r7, #2]
 800160c:	041a      	lsls	r2, r3, #16
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	619a      	str	r2, [r3, #24]
}
 8001612:	bf00      	nop
 8001614:	370c      	adds	r7, #12
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr
	...

08001620 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b086      	sub	sp, #24
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d101      	bne.n	8001632 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800162e:	2301      	movs	r3, #1
 8001630:	e267      	b.n	8001b02 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f003 0301 	and.w	r3, r3, #1
 800163a:	2b00      	cmp	r3, #0
 800163c:	d075      	beq.n	800172a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800163e:	4b88      	ldr	r3, [pc, #544]	; (8001860 <HAL_RCC_OscConfig+0x240>)
 8001640:	689b      	ldr	r3, [r3, #8]
 8001642:	f003 030c 	and.w	r3, r3, #12
 8001646:	2b04      	cmp	r3, #4
 8001648:	d00c      	beq.n	8001664 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800164a:	4b85      	ldr	r3, [pc, #532]	; (8001860 <HAL_RCC_OscConfig+0x240>)
 800164c:	689b      	ldr	r3, [r3, #8]
 800164e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001652:	2b08      	cmp	r3, #8
 8001654:	d112      	bne.n	800167c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001656:	4b82      	ldr	r3, [pc, #520]	; (8001860 <HAL_RCC_OscConfig+0x240>)
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800165e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001662:	d10b      	bne.n	800167c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001664:	4b7e      	ldr	r3, [pc, #504]	; (8001860 <HAL_RCC_OscConfig+0x240>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800166c:	2b00      	cmp	r3, #0
 800166e:	d05b      	beq.n	8001728 <HAL_RCC_OscConfig+0x108>
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d157      	bne.n	8001728 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001678:	2301      	movs	r3, #1
 800167a:	e242      	b.n	8001b02 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001684:	d106      	bne.n	8001694 <HAL_RCC_OscConfig+0x74>
 8001686:	4b76      	ldr	r3, [pc, #472]	; (8001860 <HAL_RCC_OscConfig+0x240>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4a75      	ldr	r2, [pc, #468]	; (8001860 <HAL_RCC_OscConfig+0x240>)
 800168c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001690:	6013      	str	r3, [r2, #0]
 8001692:	e01d      	b.n	80016d0 <HAL_RCC_OscConfig+0xb0>
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800169c:	d10c      	bne.n	80016b8 <HAL_RCC_OscConfig+0x98>
 800169e:	4b70      	ldr	r3, [pc, #448]	; (8001860 <HAL_RCC_OscConfig+0x240>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4a6f      	ldr	r2, [pc, #444]	; (8001860 <HAL_RCC_OscConfig+0x240>)
 80016a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016a8:	6013      	str	r3, [r2, #0]
 80016aa:	4b6d      	ldr	r3, [pc, #436]	; (8001860 <HAL_RCC_OscConfig+0x240>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4a6c      	ldr	r2, [pc, #432]	; (8001860 <HAL_RCC_OscConfig+0x240>)
 80016b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016b4:	6013      	str	r3, [r2, #0]
 80016b6:	e00b      	b.n	80016d0 <HAL_RCC_OscConfig+0xb0>
 80016b8:	4b69      	ldr	r3, [pc, #420]	; (8001860 <HAL_RCC_OscConfig+0x240>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a68      	ldr	r2, [pc, #416]	; (8001860 <HAL_RCC_OscConfig+0x240>)
 80016be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016c2:	6013      	str	r3, [r2, #0]
 80016c4:	4b66      	ldr	r3, [pc, #408]	; (8001860 <HAL_RCC_OscConfig+0x240>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a65      	ldr	r2, [pc, #404]	; (8001860 <HAL_RCC_OscConfig+0x240>)
 80016ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d013      	beq.n	8001700 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016d8:	f7ff fd16 	bl	8001108 <HAL_GetTick>
 80016dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016de:	e008      	b.n	80016f2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016e0:	f7ff fd12 	bl	8001108 <HAL_GetTick>
 80016e4:	4602      	mov	r2, r0
 80016e6:	693b      	ldr	r3, [r7, #16]
 80016e8:	1ad3      	subs	r3, r2, r3
 80016ea:	2b64      	cmp	r3, #100	; 0x64
 80016ec:	d901      	bls.n	80016f2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80016ee:	2303      	movs	r3, #3
 80016f0:	e207      	b.n	8001b02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016f2:	4b5b      	ldr	r3, [pc, #364]	; (8001860 <HAL_RCC_OscConfig+0x240>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d0f0      	beq.n	80016e0 <HAL_RCC_OscConfig+0xc0>
 80016fe:	e014      	b.n	800172a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001700:	f7ff fd02 	bl	8001108 <HAL_GetTick>
 8001704:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001706:	e008      	b.n	800171a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001708:	f7ff fcfe 	bl	8001108 <HAL_GetTick>
 800170c:	4602      	mov	r2, r0
 800170e:	693b      	ldr	r3, [r7, #16]
 8001710:	1ad3      	subs	r3, r2, r3
 8001712:	2b64      	cmp	r3, #100	; 0x64
 8001714:	d901      	bls.n	800171a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001716:	2303      	movs	r3, #3
 8001718:	e1f3      	b.n	8001b02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800171a:	4b51      	ldr	r3, [pc, #324]	; (8001860 <HAL_RCC_OscConfig+0x240>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001722:	2b00      	cmp	r3, #0
 8001724:	d1f0      	bne.n	8001708 <HAL_RCC_OscConfig+0xe8>
 8001726:	e000      	b.n	800172a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001728:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f003 0302 	and.w	r3, r3, #2
 8001732:	2b00      	cmp	r3, #0
 8001734:	d063      	beq.n	80017fe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001736:	4b4a      	ldr	r3, [pc, #296]	; (8001860 <HAL_RCC_OscConfig+0x240>)
 8001738:	689b      	ldr	r3, [r3, #8]
 800173a:	f003 030c 	and.w	r3, r3, #12
 800173e:	2b00      	cmp	r3, #0
 8001740:	d00b      	beq.n	800175a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001742:	4b47      	ldr	r3, [pc, #284]	; (8001860 <HAL_RCC_OscConfig+0x240>)
 8001744:	689b      	ldr	r3, [r3, #8]
 8001746:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800174a:	2b08      	cmp	r3, #8
 800174c:	d11c      	bne.n	8001788 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800174e:	4b44      	ldr	r3, [pc, #272]	; (8001860 <HAL_RCC_OscConfig+0x240>)
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001756:	2b00      	cmp	r3, #0
 8001758:	d116      	bne.n	8001788 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800175a:	4b41      	ldr	r3, [pc, #260]	; (8001860 <HAL_RCC_OscConfig+0x240>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f003 0302 	and.w	r3, r3, #2
 8001762:	2b00      	cmp	r3, #0
 8001764:	d005      	beq.n	8001772 <HAL_RCC_OscConfig+0x152>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	68db      	ldr	r3, [r3, #12]
 800176a:	2b01      	cmp	r3, #1
 800176c:	d001      	beq.n	8001772 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800176e:	2301      	movs	r3, #1
 8001770:	e1c7      	b.n	8001b02 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001772:	4b3b      	ldr	r3, [pc, #236]	; (8001860 <HAL_RCC_OscConfig+0x240>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	691b      	ldr	r3, [r3, #16]
 800177e:	00db      	lsls	r3, r3, #3
 8001780:	4937      	ldr	r1, [pc, #220]	; (8001860 <HAL_RCC_OscConfig+0x240>)
 8001782:	4313      	orrs	r3, r2
 8001784:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001786:	e03a      	b.n	80017fe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	68db      	ldr	r3, [r3, #12]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d020      	beq.n	80017d2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001790:	4b34      	ldr	r3, [pc, #208]	; (8001864 <HAL_RCC_OscConfig+0x244>)
 8001792:	2201      	movs	r2, #1
 8001794:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001796:	f7ff fcb7 	bl	8001108 <HAL_GetTick>
 800179a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800179c:	e008      	b.n	80017b0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800179e:	f7ff fcb3 	bl	8001108 <HAL_GetTick>
 80017a2:	4602      	mov	r2, r0
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	1ad3      	subs	r3, r2, r3
 80017a8:	2b02      	cmp	r3, #2
 80017aa:	d901      	bls.n	80017b0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80017ac:	2303      	movs	r3, #3
 80017ae:	e1a8      	b.n	8001b02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017b0:	4b2b      	ldr	r3, [pc, #172]	; (8001860 <HAL_RCC_OscConfig+0x240>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f003 0302 	and.w	r3, r3, #2
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d0f0      	beq.n	800179e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017bc:	4b28      	ldr	r3, [pc, #160]	; (8001860 <HAL_RCC_OscConfig+0x240>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	691b      	ldr	r3, [r3, #16]
 80017c8:	00db      	lsls	r3, r3, #3
 80017ca:	4925      	ldr	r1, [pc, #148]	; (8001860 <HAL_RCC_OscConfig+0x240>)
 80017cc:	4313      	orrs	r3, r2
 80017ce:	600b      	str	r3, [r1, #0]
 80017d0:	e015      	b.n	80017fe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017d2:	4b24      	ldr	r3, [pc, #144]	; (8001864 <HAL_RCC_OscConfig+0x244>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017d8:	f7ff fc96 	bl	8001108 <HAL_GetTick>
 80017dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017de:	e008      	b.n	80017f2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017e0:	f7ff fc92 	bl	8001108 <HAL_GetTick>
 80017e4:	4602      	mov	r2, r0
 80017e6:	693b      	ldr	r3, [r7, #16]
 80017e8:	1ad3      	subs	r3, r2, r3
 80017ea:	2b02      	cmp	r3, #2
 80017ec:	d901      	bls.n	80017f2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80017ee:	2303      	movs	r3, #3
 80017f0:	e187      	b.n	8001b02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017f2:	4b1b      	ldr	r3, [pc, #108]	; (8001860 <HAL_RCC_OscConfig+0x240>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f003 0302 	and.w	r3, r3, #2
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d1f0      	bne.n	80017e0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 0308 	and.w	r3, r3, #8
 8001806:	2b00      	cmp	r3, #0
 8001808:	d036      	beq.n	8001878 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	695b      	ldr	r3, [r3, #20]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d016      	beq.n	8001840 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001812:	4b15      	ldr	r3, [pc, #84]	; (8001868 <HAL_RCC_OscConfig+0x248>)
 8001814:	2201      	movs	r2, #1
 8001816:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001818:	f7ff fc76 	bl	8001108 <HAL_GetTick>
 800181c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800181e:	e008      	b.n	8001832 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001820:	f7ff fc72 	bl	8001108 <HAL_GetTick>
 8001824:	4602      	mov	r2, r0
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	2b02      	cmp	r3, #2
 800182c:	d901      	bls.n	8001832 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800182e:	2303      	movs	r3, #3
 8001830:	e167      	b.n	8001b02 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001832:	4b0b      	ldr	r3, [pc, #44]	; (8001860 <HAL_RCC_OscConfig+0x240>)
 8001834:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001836:	f003 0302 	and.w	r3, r3, #2
 800183a:	2b00      	cmp	r3, #0
 800183c:	d0f0      	beq.n	8001820 <HAL_RCC_OscConfig+0x200>
 800183e:	e01b      	b.n	8001878 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001840:	4b09      	ldr	r3, [pc, #36]	; (8001868 <HAL_RCC_OscConfig+0x248>)
 8001842:	2200      	movs	r2, #0
 8001844:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001846:	f7ff fc5f 	bl	8001108 <HAL_GetTick>
 800184a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800184c:	e00e      	b.n	800186c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800184e:	f7ff fc5b 	bl	8001108 <HAL_GetTick>
 8001852:	4602      	mov	r2, r0
 8001854:	693b      	ldr	r3, [r7, #16]
 8001856:	1ad3      	subs	r3, r2, r3
 8001858:	2b02      	cmp	r3, #2
 800185a:	d907      	bls.n	800186c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800185c:	2303      	movs	r3, #3
 800185e:	e150      	b.n	8001b02 <HAL_RCC_OscConfig+0x4e2>
 8001860:	40023800 	.word	0x40023800
 8001864:	42470000 	.word	0x42470000
 8001868:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800186c:	4b88      	ldr	r3, [pc, #544]	; (8001a90 <HAL_RCC_OscConfig+0x470>)
 800186e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001870:	f003 0302 	and.w	r3, r3, #2
 8001874:	2b00      	cmp	r3, #0
 8001876:	d1ea      	bne.n	800184e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f003 0304 	and.w	r3, r3, #4
 8001880:	2b00      	cmp	r3, #0
 8001882:	f000 8097 	beq.w	80019b4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001886:	2300      	movs	r3, #0
 8001888:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800188a:	4b81      	ldr	r3, [pc, #516]	; (8001a90 <HAL_RCC_OscConfig+0x470>)
 800188c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800188e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001892:	2b00      	cmp	r3, #0
 8001894:	d10f      	bne.n	80018b6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001896:	2300      	movs	r3, #0
 8001898:	60bb      	str	r3, [r7, #8]
 800189a:	4b7d      	ldr	r3, [pc, #500]	; (8001a90 <HAL_RCC_OscConfig+0x470>)
 800189c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189e:	4a7c      	ldr	r2, [pc, #496]	; (8001a90 <HAL_RCC_OscConfig+0x470>)
 80018a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018a4:	6413      	str	r3, [r2, #64]	; 0x40
 80018a6:	4b7a      	ldr	r3, [pc, #488]	; (8001a90 <HAL_RCC_OscConfig+0x470>)
 80018a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ae:	60bb      	str	r3, [r7, #8]
 80018b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018b2:	2301      	movs	r3, #1
 80018b4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018b6:	4b77      	ldr	r3, [pc, #476]	; (8001a94 <HAL_RCC_OscConfig+0x474>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d118      	bne.n	80018f4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018c2:	4b74      	ldr	r3, [pc, #464]	; (8001a94 <HAL_RCC_OscConfig+0x474>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4a73      	ldr	r2, [pc, #460]	; (8001a94 <HAL_RCC_OscConfig+0x474>)
 80018c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018ce:	f7ff fc1b 	bl	8001108 <HAL_GetTick>
 80018d2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018d4:	e008      	b.n	80018e8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018d6:	f7ff fc17 	bl	8001108 <HAL_GetTick>
 80018da:	4602      	mov	r2, r0
 80018dc:	693b      	ldr	r3, [r7, #16]
 80018de:	1ad3      	subs	r3, r2, r3
 80018e0:	2b02      	cmp	r3, #2
 80018e2:	d901      	bls.n	80018e8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80018e4:	2303      	movs	r3, #3
 80018e6:	e10c      	b.n	8001b02 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018e8:	4b6a      	ldr	r3, [pc, #424]	; (8001a94 <HAL_RCC_OscConfig+0x474>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d0f0      	beq.n	80018d6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	2b01      	cmp	r3, #1
 80018fa:	d106      	bne.n	800190a <HAL_RCC_OscConfig+0x2ea>
 80018fc:	4b64      	ldr	r3, [pc, #400]	; (8001a90 <HAL_RCC_OscConfig+0x470>)
 80018fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001900:	4a63      	ldr	r2, [pc, #396]	; (8001a90 <HAL_RCC_OscConfig+0x470>)
 8001902:	f043 0301 	orr.w	r3, r3, #1
 8001906:	6713      	str	r3, [r2, #112]	; 0x70
 8001908:	e01c      	b.n	8001944 <HAL_RCC_OscConfig+0x324>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	689b      	ldr	r3, [r3, #8]
 800190e:	2b05      	cmp	r3, #5
 8001910:	d10c      	bne.n	800192c <HAL_RCC_OscConfig+0x30c>
 8001912:	4b5f      	ldr	r3, [pc, #380]	; (8001a90 <HAL_RCC_OscConfig+0x470>)
 8001914:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001916:	4a5e      	ldr	r2, [pc, #376]	; (8001a90 <HAL_RCC_OscConfig+0x470>)
 8001918:	f043 0304 	orr.w	r3, r3, #4
 800191c:	6713      	str	r3, [r2, #112]	; 0x70
 800191e:	4b5c      	ldr	r3, [pc, #368]	; (8001a90 <HAL_RCC_OscConfig+0x470>)
 8001920:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001922:	4a5b      	ldr	r2, [pc, #364]	; (8001a90 <HAL_RCC_OscConfig+0x470>)
 8001924:	f043 0301 	orr.w	r3, r3, #1
 8001928:	6713      	str	r3, [r2, #112]	; 0x70
 800192a:	e00b      	b.n	8001944 <HAL_RCC_OscConfig+0x324>
 800192c:	4b58      	ldr	r3, [pc, #352]	; (8001a90 <HAL_RCC_OscConfig+0x470>)
 800192e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001930:	4a57      	ldr	r2, [pc, #348]	; (8001a90 <HAL_RCC_OscConfig+0x470>)
 8001932:	f023 0301 	bic.w	r3, r3, #1
 8001936:	6713      	str	r3, [r2, #112]	; 0x70
 8001938:	4b55      	ldr	r3, [pc, #340]	; (8001a90 <HAL_RCC_OscConfig+0x470>)
 800193a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800193c:	4a54      	ldr	r2, [pc, #336]	; (8001a90 <HAL_RCC_OscConfig+0x470>)
 800193e:	f023 0304 	bic.w	r3, r3, #4
 8001942:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	689b      	ldr	r3, [r3, #8]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d015      	beq.n	8001978 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800194c:	f7ff fbdc 	bl	8001108 <HAL_GetTick>
 8001950:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001952:	e00a      	b.n	800196a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001954:	f7ff fbd8 	bl	8001108 <HAL_GetTick>
 8001958:	4602      	mov	r2, r0
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	1ad3      	subs	r3, r2, r3
 800195e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001962:	4293      	cmp	r3, r2
 8001964:	d901      	bls.n	800196a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001966:	2303      	movs	r3, #3
 8001968:	e0cb      	b.n	8001b02 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800196a:	4b49      	ldr	r3, [pc, #292]	; (8001a90 <HAL_RCC_OscConfig+0x470>)
 800196c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800196e:	f003 0302 	and.w	r3, r3, #2
 8001972:	2b00      	cmp	r3, #0
 8001974:	d0ee      	beq.n	8001954 <HAL_RCC_OscConfig+0x334>
 8001976:	e014      	b.n	80019a2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001978:	f7ff fbc6 	bl	8001108 <HAL_GetTick>
 800197c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800197e:	e00a      	b.n	8001996 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001980:	f7ff fbc2 	bl	8001108 <HAL_GetTick>
 8001984:	4602      	mov	r2, r0
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	1ad3      	subs	r3, r2, r3
 800198a:	f241 3288 	movw	r2, #5000	; 0x1388
 800198e:	4293      	cmp	r3, r2
 8001990:	d901      	bls.n	8001996 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001992:	2303      	movs	r3, #3
 8001994:	e0b5      	b.n	8001b02 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001996:	4b3e      	ldr	r3, [pc, #248]	; (8001a90 <HAL_RCC_OscConfig+0x470>)
 8001998:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800199a:	f003 0302 	and.w	r3, r3, #2
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d1ee      	bne.n	8001980 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80019a2:	7dfb      	ldrb	r3, [r7, #23]
 80019a4:	2b01      	cmp	r3, #1
 80019a6:	d105      	bne.n	80019b4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019a8:	4b39      	ldr	r3, [pc, #228]	; (8001a90 <HAL_RCC_OscConfig+0x470>)
 80019aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ac:	4a38      	ldr	r2, [pc, #224]	; (8001a90 <HAL_RCC_OscConfig+0x470>)
 80019ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019b2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	699b      	ldr	r3, [r3, #24]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	f000 80a1 	beq.w	8001b00 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80019be:	4b34      	ldr	r3, [pc, #208]	; (8001a90 <HAL_RCC_OscConfig+0x470>)
 80019c0:	689b      	ldr	r3, [r3, #8]
 80019c2:	f003 030c 	and.w	r3, r3, #12
 80019c6:	2b08      	cmp	r3, #8
 80019c8:	d05c      	beq.n	8001a84 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	699b      	ldr	r3, [r3, #24]
 80019ce:	2b02      	cmp	r3, #2
 80019d0:	d141      	bne.n	8001a56 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019d2:	4b31      	ldr	r3, [pc, #196]	; (8001a98 <HAL_RCC_OscConfig+0x478>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019d8:	f7ff fb96 	bl	8001108 <HAL_GetTick>
 80019dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019de:	e008      	b.n	80019f2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019e0:	f7ff fb92 	bl	8001108 <HAL_GetTick>
 80019e4:	4602      	mov	r2, r0
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	1ad3      	subs	r3, r2, r3
 80019ea:	2b02      	cmp	r3, #2
 80019ec:	d901      	bls.n	80019f2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80019ee:	2303      	movs	r3, #3
 80019f0:	e087      	b.n	8001b02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019f2:	4b27      	ldr	r3, [pc, #156]	; (8001a90 <HAL_RCC_OscConfig+0x470>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d1f0      	bne.n	80019e0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	69da      	ldr	r2, [r3, #28]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6a1b      	ldr	r3, [r3, #32]
 8001a06:	431a      	orrs	r2, r3
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a0c:	019b      	lsls	r3, r3, #6
 8001a0e:	431a      	orrs	r2, r3
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a14:	085b      	lsrs	r3, r3, #1
 8001a16:	3b01      	subs	r3, #1
 8001a18:	041b      	lsls	r3, r3, #16
 8001a1a:	431a      	orrs	r2, r3
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a20:	061b      	lsls	r3, r3, #24
 8001a22:	491b      	ldr	r1, [pc, #108]	; (8001a90 <HAL_RCC_OscConfig+0x470>)
 8001a24:	4313      	orrs	r3, r2
 8001a26:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a28:	4b1b      	ldr	r3, [pc, #108]	; (8001a98 <HAL_RCC_OscConfig+0x478>)
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a2e:	f7ff fb6b 	bl	8001108 <HAL_GetTick>
 8001a32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a34:	e008      	b.n	8001a48 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a36:	f7ff fb67 	bl	8001108 <HAL_GetTick>
 8001a3a:	4602      	mov	r2, r0
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	1ad3      	subs	r3, r2, r3
 8001a40:	2b02      	cmp	r3, #2
 8001a42:	d901      	bls.n	8001a48 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001a44:	2303      	movs	r3, #3
 8001a46:	e05c      	b.n	8001b02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a48:	4b11      	ldr	r3, [pc, #68]	; (8001a90 <HAL_RCC_OscConfig+0x470>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d0f0      	beq.n	8001a36 <HAL_RCC_OscConfig+0x416>
 8001a54:	e054      	b.n	8001b00 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a56:	4b10      	ldr	r3, [pc, #64]	; (8001a98 <HAL_RCC_OscConfig+0x478>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a5c:	f7ff fb54 	bl	8001108 <HAL_GetTick>
 8001a60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a62:	e008      	b.n	8001a76 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a64:	f7ff fb50 	bl	8001108 <HAL_GetTick>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	2b02      	cmp	r3, #2
 8001a70:	d901      	bls.n	8001a76 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001a72:	2303      	movs	r3, #3
 8001a74:	e045      	b.n	8001b02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a76:	4b06      	ldr	r3, [pc, #24]	; (8001a90 <HAL_RCC_OscConfig+0x470>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d1f0      	bne.n	8001a64 <HAL_RCC_OscConfig+0x444>
 8001a82:	e03d      	b.n	8001b00 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	699b      	ldr	r3, [r3, #24]
 8001a88:	2b01      	cmp	r3, #1
 8001a8a:	d107      	bne.n	8001a9c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	e038      	b.n	8001b02 <HAL_RCC_OscConfig+0x4e2>
 8001a90:	40023800 	.word	0x40023800
 8001a94:	40007000 	.word	0x40007000
 8001a98:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001a9c:	4b1b      	ldr	r3, [pc, #108]	; (8001b0c <HAL_RCC_OscConfig+0x4ec>)
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	699b      	ldr	r3, [r3, #24]
 8001aa6:	2b01      	cmp	r3, #1
 8001aa8:	d028      	beq.n	8001afc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	d121      	bne.n	8001afc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ac2:	429a      	cmp	r2, r3
 8001ac4:	d11a      	bne.n	8001afc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ac6:	68fa      	ldr	r2, [r7, #12]
 8001ac8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001acc:	4013      	ands	r3, r2
 8001ace:	687a      	ldr	r2, [r7, #4]
 8001ad0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001ad2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d111      	bne.n	8001afc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ae2:	085b      	lsrs	r3, r3, #1
 8001ae4:	3b01      	subs	r3, #1
 8001ae6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	d107      	bne.n	8001afc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001af6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001af8:	429a      	cmp	r2, r3
 8001afa:	d001      	beq.n	8001b00 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001afc:	2301      	movs	r3, #1
 8001afe:	e000      	b.n	8001b02 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001b00:	2300      	movs	r3, #0
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3718      	adds	r7, #24
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	40023800 	.word	0x40023800

08001b10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b084      	sub	sp, #16
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
 8001b18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d101      	bne.n	8001b24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b20:	2301      	movs	r3, #1
 8001b22:	e0cc      	b.n	8001cbe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b24:	4b68      	ldr	r3, [pc, #416]	; (8001cc8 <HAL_RCC_ClockConfig+0x1b8>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f003 0307 	and.w	r3, r3, #7
 8001b2c:	683a      	ldr	r2, [r7, #0]
 8001b2e:	429a      	cmp	r2, r3
 8001b30:	d90c      	bls.n	8001b4c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b32:	4b65      	ldr	r3, [pc, #404]	; (8001cc8 <HAL_RCC_ClockConfig+0x1b8>)
 8001b34:	683a      	ldr	r2, [r7, #0]
 8001b36:	b2d2      	uxtb	r2, r2
 8001b38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b3a:	4b63      	ldr	r3, [pc, #396]	; (8001cc8 <HAL_RCC_ClockConfig+0x1b8>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f003 0307 	and.w	r3, r3, #7
 8001b42:	683a      	ldr	r2, [r7, #0]
 8001b44:	429a      	cmp	r2, r3
 8001b46:	d001      	beq.n	8001b4c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	e0b8      	b.n	8001cbe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f003 0302 	and.w	r3, r3, #2
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d020      	beq.n	8001b9a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f003 0304 	and.w	r3, r3, #4
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d005      	beq.n	8001b70 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b64:	4b59      	ldr	r3, [pc, #356]	; (8001ccc <HAL_RCC_ClockConfig+0x1bc>)
 8001b66:	689b      	ldr	r3, [r3, #8]
 8001b68:	4a58      	ldr	r2, [pc, #352]	; (8001ccc <HAL_RCC_ClockConfig+0x1bc>)
 8001b6a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001b6e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f003 0308 	and.w	r3, r3, #8
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d005      	beq.n	8001b88 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b7c:	4b53      	ldr	r3, [pc, #332]	; (8001ccc <HAL_RCC_ClockConfig+0x1bc>)
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	4a52      	ldr	r2, [pc, #328]	; (8001ccc <HAL_RCC_ClockConfig+0x1bc>)
 8001b82:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001b86:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b88:	4b50      	ldr	r3, [pc, #320]	; (8001ccc <HAL_RCC_ClockConfig+0x1bc>)
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	689b      	ldr	r3, [r3, #8]
 8001b94:	494d      	ldr	r1, [pc, #308]	; (8001ccc <HAL_RCC_ClockConfig+0x1bc>)
 8001b96:	4313      	orrs	r3, r2
 8001b98:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f003 0301 	and.w	r3, r3, #1
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d044      	beq.n	8001c30 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	2b01      	cmp	r3, #1
 8001bac:	d107      	bne.n	8001bbe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bae:	4b47      	ldr	r3, [pc, #284]	; (8001ccc <HAL_RCC_ClockConfig+0x1bc>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d119      	bne.n	8001bee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e07f      	b.n	8001cbe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	2b02      	cmp	r3, #2
 8001bc4:	d003      	beq.n	8001bce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001bca:	2b03      	cmp	r3, #3
 8001bcc:	d107      	bne.n	8001bde <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bce:	4b3f      	ldr	r3, [pc, #252]	; (8001ccc <HAL_RCC_ClockConfig+0x1bc>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d109      	bne.n	8001bee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e06f      	b.n	8001cbe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bde:	4b3b      	ldr	r3, [pc, #236]	; (8001ccc <HAL_RCC_ClockConfig+0x1bc>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f003 0302 	and.w	r3, r3, #2
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d101      	bne.n	8001bee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
 8001bec:	e067      	b.n	8001cbe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001bee:	4b37      	ldr	r3, [pc, #220]	; (8001ccc <HAL_RCC_ClockConfig+0x1bc>)
 8001bf0:	689b      	ldr	r3, [r3, #8]
 8001bf2:	f023 0203 	bic.w	r2, r3, #3
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	4934      	ldr	r1, [pc, #208]	; (8001ccc <HAL_RCC_ClockConfig+0x1bc>)
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c00:	f7ff fa82 	bl	8001108 <HAL_GetTick>
 8001c04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c06:	e00a      	b.n	8001c1e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c08:	f7ff fa7e 	bl	8001108 <HAL_GetTick>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	1ad3      	subs	r3, r2, r3
 8001c12:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d901      	bls.n	8001c1e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c1a:	2303      	movs	r3, #3
 8001c1c:	e04f      	b.n	8001cbe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c1e:	4b2b      	ldr	r3, [pc, #172]	; (8001ccc <HAL_RCC_ClockConfig+0x1bc>)
 8001c20:	689b      	ldr	r3, [r3, #8]
 8001c22:	f003 020c 	and.w	r2, r3, #12
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	009b      	lsls	r3, r3, #2
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	d1eb      	bne.n	8001c08 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c30:	4b25      	ldr	r3, [pc, #148]	; (8001cc8 <HAL_RCC_ClockConfig+0x1b8>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f003 0307 	and.w	r3, r3, #7
 8001c38:	683a      	ldr	r2, [r7, #0]
 8001c3a:	429a      	cmp	r2, r3
 8001c3c:	d20c      	bcs.n	8001c58 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c3e:	4b22      	ldr	r3, [pc, #136]	; (8001cc8 <HAL_RCC_ClockConfig+0x1b8>)
 8001c40:	683a      	ldr	r2, [r7, #0]
 8001c42:	b2d2      	uxtb	r2, r2
 8001c44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c46:	4b20      	ldr	r3, [pc, #128]	; (8001cc8 <HAL_RCC_ClockConfig+0x1b8>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f003 0307 	and.w	r3, r3, #7
 8001c4e:	683a      	ldr	r2, [r7, #0]
 8001c50:	429a      	cmp	r2, r3
 8001c52:	d001      	beq.n	8001c58 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001c54:	2301      	movs	r3, #1
 8001c56:	e032      	b.n	8001cbe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f003 0304 	and.w	r3, r3, #4
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d008      	beq.n	8001c76 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c64:	4b19      	ldr	r3, [pc, #100]	; (8001ccc <HAL_RCC_ClockConfig+0x1bc>)
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	68db      	ldr	r3, [r3, #12]
 8001c70:	4916      	ldr	r1, [pc, #88]	; (8001ccc <HAL_RCC_ClockConfig+0x1bc>)
 8001c72:	4313      	orrs	r3, r2
 8001c74:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f003 0308 	and.w	r3, r3, #8
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d009      	beq.n	8001c96 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c82:	4b12      	ldr	r3, [pc, #72]	; (8001ccc <HAL_RCC_ClockConfig+0x1bc>)
 8001c84:	689b      	ldr	r3, [r3, #8]
 8001c86:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	691b      	ldr	r3, [r3, #16]
 8001c8e:	00db      	lsls	r3, r3, #3
 8001c90:	490e      	ldr	r1, [pc, #56]	; (8001ccc <HAL_RCC_ClockConfig+0x1bc>)
 8001c92:	4313      	orrs	r3, r2
 8001c94:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001c96:	f000 f821 	bl	8001cdc <HAL_RCC_GetSysClockFreq>
 8001c9a:	4602      	mov	r2, r0
 8001c9c:	4b0b      	ldr	r3, [pc, #44]	; (8001ccc <HAL_RCC_ClockConfig+0x1bc>)
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	091b      	lsrs	r3, r3, #4
 8001ca2:	f003 030f 	and.w	r3, r3, #15
 8001ca6:	490a      	ldr	r1, [pc, #40]	; (8001cd0 <HAL_RCC_ClockConfig+0x1c0>)
 8001ca8:	5ccb      	ldrb	r3, [r1, r3]
 8001caa:	fa22 f303 	lsr.w	r3, r2, r3
 8001cae:	4a09      	ldr	r2, [pc, #36]	; (8001cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8001cb0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001cb2:	4b09      	ldr	r3, [pc, #36]	; (8001cd8 <HAL_RCC_ClockConfig+0x1c8>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f7ff f90e 	bl	8000ed8 <HAL_InitTick>

  return HAL_OK;
 8001cbc:	2300      	movs	r3, #0
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	3710      	adds	r7, #16
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	40023c00 	.word	0x40023c00
 8001ccc:	40023800 	.word	0x40023800
 8001cd0:	080046d4 	.word	0x080046d4
 8001cd4:	20000000 	.word	0x20000000
 8001cd8:	20000004 	.word	0x20000004

08001cdc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cdc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ce0:	b090      	sub	sp, #64	; 0x40
 8001ce2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	637b      	str	r3, [r7, #52]	; 0x34
 8001ce8:	2300      	movs	r3, #0
 8001cea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001cec:	2300      	movs	r3, #0
 8001cee:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001cf4:	4b59      	ldr	r3, [pc, #356]	; (8001e5c <HAL_RCC_GetSysClockFreq+0x180>)
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	f003 030c 	and.w	r3, r3, #12
 8001cfc:	2b08      	cmp	r3, #8
 8001cfe:	d00d      	beq.n	8001d1c <HAL_RCC_GetSysClockFreq+0x40>
 8001d00:	2b08      	cmp	r3, #8
 8001d02:	f200 80a1 	bhi.w	8001e48 <HAL_RCC_GetSysClockFreq+0x16c>
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d002      	beq.n	8001d10 <HAL_RCC_GetSysClockFreq+0x34>
 8001d0a:	2b04      	cmp	r3, #4
 8001d0c:	d003      	beq.n	8001d16 <HAL_RCC_GetSysClockFreq+0x3a>
 8001d0e:	e09b      	b.n	8001e48 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001d10:	4b53      	ldr	r3, [pc, #332]	; (8001e60 <HAL_RCC_GetSysClockFreq+0x184>)
 8001d12:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001d14:	e09b      	b.n	8001e4e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001d16:	4b53      	ldr	r3, [pc, #332]	; (8001e64 <HAL_RCC_GetSysClockFreq+0x188>)
 8001d18:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001d1a:	e098      	b.n	8001e4e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d1c:	4b4f      	ldr	r3, [pc, #316]	; (8001e5c <HAL_RCC_GetSysClockFreq+0x180>)
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001d24:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d26:	4b4d      	ldr	r3, [pc, #308]	; (8001e5c <HAL_RCC_GetSysClockFreq+0x180>)
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d028      	beq.n	8001d84 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d32:	4b4a      	ldr	r3, [pc, #296]	; (8001e5c <HAL_RCC_GetSysClockFreq+0x180>)
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	099b      	lsrs	r3, r3, #6
 8001d38:	2200      	movs	r2, #0
 8001d3a:	623b      	str	r3, [r7, #32]
 8001d3c:	627a      	str	r2, [r7, #36]	; 0x24
 8001d3e:	6a3b      	ldr	r3, [r7, #32]
 8001d40:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001d44:	2100      	movs	r1, #0
 8001d46:	4b47      	ldr	r3, [pc, #284]	; (8001e64 <HAL_RCC_GetSysClockFreq+0x188>)
 8001d48:	fb03 f201 	mul.w	r2, r3, r1
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	fb00 f303 	mul.w	r3, r0, r3
 8001d52:	4413      	add	r3, r2
 8001d54:	4a43      	ldr	r2, [pc, #268]	; (8001e64 <HAL_RCC_GetSysClockFreq+0x188>)
 8001d56:	fba0 1202 	umull	r1, r2, r0, r2
 8001d5a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001d5c:	460a      	mov	r2, r1
 8001d5e:	62ba      	str	r2, [r7, #40]	; 0x28
 8001d60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d62:	4413      	add	r3, r2
 8001d64:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d68:	2200      	movs	r2, #0
 8001d6a:	61bb      	str	r3, [r7, #24]
 8001d6c:	61fa      	str	r2, [r7, #28]
 8001d6e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d72:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001d76:	f7fe fa33 	bl	80001e0 <__aeabi_uldivmod>
 8001d7a:	4602      	mov	r2, r0
 8001d7c:	460b      	mov	r3, r1
 8001d7e:	4613      	mov	r3, r2
 8001d80:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001d82:	e053      	b.n	8001e2c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d84:	4b35      	ldr	r3, [pc, #212]	; (8001e5c <HAL_RCC_GetSysClockFreq+0x180>)
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	099b      	lsrs	r3, r3, #6
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	613b      	str	r3, [r7, #16]
 8001d8e:	617a      	str	r2, [r7, #20]
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001d96:	f04f 0b00 	mov.w	fp, #0
 8001d9a:	4652      	mov	r2, sl
 8001d9c:	465b      	mov	r3, fp
 8001d9e:	f04f 0000 	mov.w	r0, #0
 8001da2:	f04f 0100 	mov.w	r1, #0
 8001da6:	0159      	lsls	r1, r3, #5
 8001da8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001dac:	0150      	lsls	r0, r2, #5
 8001dae:	4602      	mov	r2, r0
 8001db0:	460b      	mov	r3, r1
 8001db2:	ebb2 080a 	subs.w	r8, r2, sl
 8001db6:	eb63 090b 	sbc.w	r9, r3, fp
 8001dba:	f04f 0200 	mov.w	r2, #0
 8001dbe:	f04f 0300 	mov.w	r3, #0
 8001dc2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001dc6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001dca:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001dce:	ebb2 0408 	subs.w	r4, r2, r8
 8001dd2:	eb63 0509 	sbc.w	r5, r3, r9
 8001dd6:	f04f 0200 	mov.w	r2, #0
 8001dda:	f04f 0300 	mov.w	r3, #0
 8001dde:	00eb      	lsls	r3, r5, #3
 8001de0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001de4:	00e2      	lsls	r2, r4, #3
 8001de6:	4614      	mov	r4, r2
 8001de8:	461d      	mov	r5, r3
 8001dea:	eb14 030a 	adds.w	r3, r4, sl
 8001dee:	603b      	str	r3, [r7, #0]
 8001df0:	eb45 030b 	adc.w	r3, r5, fp
 8001df4:	607b      	str	r3, [r7, #4]
 8001df6:	f04f 0200 	mov.w	r2, #0
 8001dfa:	f04f 0300 	mov.w	r3, #0
 8001dfe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001e02:	4629      	mov	r1, r5
 8001e04:	028b      	lsls	r3, r1, #10
 8001e06:	4621      	mov	r1, r4
 8001e08:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001e0c:	4621      	mov	r1, r4
 8001e0e:	028a      	lsls	r2, r1, #10
 8001e10:	4610      	mov	r0, r2
 8001e12:	4619      	mov	r1, r3
 8001e14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e16:	2200      	movs	r2, #0
 8001e18:	60bb      	str	r3, [r7, #8]
 8001e1a:	60fa      	str	r2, [r7, #12]
 8001e1c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001e20:	f7fe f9de 	bl	80001e0 <__aeabi_uldivmod>
 8001e24:	4602      	mov	r2, r0
 8001e26:	460b      	mov	r3, r1
 8001e28:	4613      	mov	r3, r2
 8001e2a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001e2c:	4b0b      	ldr	r3, [pc, #44]	; (8001e5c <HAL_RCC_GetSysClockFreq+0x180>)
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	0c1b      	lsrs	r3, r3, #16
 8001e32:	f003 0303 	and.w	r3, r3, #3
 8001e36:	3301      	adds	r3, #1
 8001e38:	005b      	lsls	r3, r3, #1
 8001e3a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001e3c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001e3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e40:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e44:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001e46:	e002      	b.n	8001e4e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001e48:	4b05      	ldr	r3, [pc, #20]	; (8001e60 <HAL_RCC_GetSysClockFreq+0x184>)
 8001e4a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001e4c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	3740      	adds	r7, #64	; 0x40
 8001e54:	46bd      	mov	sp, r7
 8001e56:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e5a:	bf00      	nop
 8001e5c:	40023800 	.word	0x40023800
 8001e60:	00f42400 	.word	0x00f42400
 8001e64:	017d7840 	.word	0x017d7840

08001e68 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e6c:	4b03      	ldr	r3, [pc, #12]	; (8001e7c <HAL_RCC_GetHCLKFreq+0x14>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr
 8001e7a:	bf00      	nop
 8001e7c:	20000000 	.word	0x20000000

08001e80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001e84:	f7ff fff0 	bl	8001e68 <HAL_RCC_GetHCLKFreq>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	4b05      	ldr	r3, [pc, #20]	; (8001ea0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	0b5b      	lsrs	r3, r3, #13
 8001e90:	f003 0307 	and.w	r3, r3, #7
 8001e94:	4903      	ldr	r1, [pc, #12]	; (8001ea4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e96:	5ccb      	ldrb	r3, [r1, r3]
 8001e98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	40023800 	.word	0x40023800
 8001ea4:	080046e4 	.word	0x080046e4

08001ea8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b083      	sub	sp, #12
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
 8001eb0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	220f      	movs	r2, #15
 8001eb6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001eb8:	4b12      	ldr	r3, [pc, #72]	; (8001f04 <HAL_RCC_GetClockConfig+0x5c>)
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	f003 0203 	and.w	r2, r3, #3
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001ec4:	4b0f      	ldr	r3, [pc, #60]	; (8001f04 <HAL_RCC_GetClockConfig+0x5c>)
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001ed0:	4b0c      	ldr	r3, [pc, #48]	; (8001f04 <HAL_RCC_GetClockConfig+0x5c>)
 8001ed2:	689b      	ldr	r3, [r3, #8]
 8001ed4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001edc:	4b09      	ldr	r3, [pc, #36]	; (8001f04 <HAL_RCC_GetClockConfig+0x5c>)
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	08db      	lsrs	r3, r3, #3
 8001ee2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001eea:	4b07      	ldr	r3, [pc, #28]	; (8001f08 <HAL_RCC_GetClockConfig+0x60>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f003 0207 	and.w	r2, r3, #7
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	601a      	str	r2, [r3, #0]
}
 8001ef6:	bf00      	nop
 8001ef8:	370c      	adds	r7, #12
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr
 8001f02:	bf00      	nop
 8001f04:	40023800 	.word	0x40023800
 8001f08:	40023c00 	.word	0x40023c00

08001f0c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b082      	sub	sp, #8
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d101      	bne.n	8001f1e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e07b      	b.n	8002016 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d108      	bne.n	8001f38 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001f2e:	d009      	beq.n	8001f44 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2200      	movs	r2, #0
 8001f34:	61da      	str	r2, [r3, #28]
 8001f36:	e005      	b.n	8001f44 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2200      	movs	r2, #0
 8001f42:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2200      	movs	r2, #0
 8001f48:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001f50:	b2db      	uxtb	r3, r3
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d106      	bne.n	8001f64 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001f5e:	6878      	ldr	r0, [r7, #4]
 8001f60:	f7fe fee8 	bl	8000d34 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2202      	movs	r2, #2
 8001f68:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	681a      	ldr	r2, [r3, #0]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001f7a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	689b      	ldr	r3, [r3, #8]
 8001f88:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001f8c:	431a      	orrs	r2, r3
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	68db      	ldr	r3, [r3, #12]
 8001f92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f96:	431a      	orrs	r2, r3
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	691b      	ldr	r3, [r3, #16]
 8001f9c:	f003 0302 	and.w	r3, r3, #2
 8001fa0:	431a      	orrs	r2, r3
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	695b      	ldr	r3, [r3, #20]
 8001fa6:	f003 0301 	and.w	r3, r3, #1
 8001faa:	431a      	orrs	r2, r3
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	699b      	ldr	r3, [r3, #24]
 8001fb0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001fb4:	431a      	orrs	r2, r3
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	69db      	ldr	r3, [r3, #28]
 8001fba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001fbe:	431a      	orrs	r2, r3
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6a1b      	ldr	r3, [r3, #32]
 8001fc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fc8:	ea42 0103 	orr.w	r1, r2, r3
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fd0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	430a      	orrs	r2, r1
 8001fda:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	699b      	ldr	r3, [r3, #24]
 8001fe0:	0c1b      	lsrs	r3, r3, #16
 8001fe2:	f003 0104 	and.w	r1, r3, #4
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fea:	f003 0210 	and.w	r2, r3, #16
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	430a      	orrs	r2, r1
 8001ff4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	69da      	ldr	r2, [r3, #28]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002004:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2200      	movs	r2, #0
 800200a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2201      	movs	r2, #1
 8002010:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002014:	2300      	movs	r3, #0
}
 8002016:	4618      	mov	r0, r3
 8002018:	3708      	adds	r7, #8
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}

0800201e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800201e:	b580      	push	{r7, lr}
 8002020:	b082      	sub	sp, #8
 8002022:	af00      	add	r7, sp, #0
 8002024:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d101      	bne.n	8002030 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800202c:	2301      	movs	r3, #1
 800202e:	e041      	b.n	80020b4 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002036:	b2db      	uxtb	r3, r3
 8002038:	2b00      	cmp	r3, #0
 800203a:	d106      	bne.n	800204a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2200      	movs	r2, #0
 8002040:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002044:	6878      	ldr	r0, [r7, #4]
 8002046:	f7fe febd 	bl	8000dc4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2202      	movs	r2, #2
 800204e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681a      	ldr	r2, [r3, #0]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	3304      	adds	r3, #4
 800205a:	4619      	mov	r1, r3
 800205c:	4610      	mov	r0, r2
 800205e:	f000 fd7f 	bl	8002b60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2201      	movs	r2, #1
 8002066:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2201      	movs	r2, #1
 800206e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2201      	movs	r2, #1
 8002076:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2201      	movs	r2, #1
 800207e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2201      	movs	r2, #1
 8002086:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2201      	movs	r2, #1
 800208e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2201      	movs	r2, #1
 8002096:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2201      	movs	r2, #1
 800209e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2201      	movs	r2, #1
 80020a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2201      	movs	r2, #1
 80020ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80020b2:	2300      	movs	r3, #0
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	3708      	adds	r7, #8
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}

080020bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80020bc:	b480      	push	{r7}
 80020be:	b085      	sub	sp, #20
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020ca:	b2db      	uxtb	r3, r3
 80020cc:	2b01      	cmp	r3, #1
 80020ce:	d001      	beq.n	80020d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80020d0:	2301      	movs	r3, #1
 80020d2:	e044      	b.n	800215e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2202      	movs	r2, #2
 80020d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	68da      	ldr	r2, [r3, #12]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f042 0201 	orr.w	r2, r2, #1
 80020ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a1e      	ldr	r2, [pc, #120]	; (800216c <HAL_TIM_Base_Start_IT+0xb0>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d018      	beq.n	8002128 <HAL_TIM_Base_Start_IT+0x6c>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020fe:	d013      	beq.n	8002128 <HAL_TIM_Base_Start_IT+0x6c>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a1a      	ldr	r2, [pc, #104]	; (8002170 <HAL_TIM_Base_Start_IT+0xb4>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d00e      	beq.n	8002128 <HAL_TIM_Base_Start_IT+0x6c>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a19      	ldr	r2, [pc, #100]	; (8002174 <HAL_TIM_Base_Start_IT+0xb8>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d009      	beq.n	8002128 <HAL_TIM_Base_Start_IT+0x6c>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a17      	ldr	r2, [pc, #92]	; (8002178 <HAL_TIM_Base_Start_IT+0xbc>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d004      	beq.n	8002128 <HAL_TIM_Base_Start_IT+0x6c>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a16      	ldr	r2, [pc, #88]	; (800217c <HAL_TIM_Base_Start_IT+0xc0>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d111      	bne.n	800214c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	689b      	ldr	r3, [r3, #8]
 800212e:	f003 0307 	and.w	r3, r3, #7
 8002132:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	2b06      	cmp	r3, #6
 8002138:	d010      	beq.n	800215c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	681a      	ldr	r2, [r3, #0]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f042 0201 	orr.w	r2, r2, #1
 8002148:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800214a:	e007      	b.n	800215c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	681a      	ldr	r2, [r3, #0]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f042 0201 	orr.w	r2, r2, #1
 800215a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800215c:	2300      	movs	r3, #0
}
 800215e:	4618      	mov	r0, r3
 8002160:	3714      	adds	r7, #20
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr
 800216a:	bf00      	nop
 800216c:	40010000 	.word	0x40010000
 8002170:	40000400 	.word	0x40000400
 8002174:	40000800 	.word	0x40000800
 8002178:	40000c00 	.word	0x40000c00
 800217c:	40014000 	.word	0x40014000

08002180 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b082      	sub	sp, #8
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d101      	bne.n	8002192 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	e041      	b.n	8002216 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002198:	b2db      	uxtb	r3, r3
 800219a:	2b00      	cmp	r3, #0
 800219c:	d106      	bne.n	80021ac <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2200      	movs	r2, #0
 80021a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80021a6:	6878      	ldr	r0, [r7, #4]
 80021a8:	f000 f839 	bl	800221e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2202      	movs	r2, #2
 80021b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	3304      	adds	r3, #4
 80021bc:	4619      	mov	r1, r3
 80021be:	4610      	mov	r0, r2
 80021c0:	f000 fcce 	bl	8002b60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2201      	movs	r2, #1
 80021c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2201      	movs	r2, #1
 80021d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2201      	movs	r2, #1
 80021d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2201      	movs	r2, #1
 80021e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2201      	movs	r2, #1
 80021e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2201      	movs	r2, #1
 80021f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2201      	movs	r2, #1
 80021f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2201      	movs	r2, #1
 8002200:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2201      	movs	r2, #1
 8002208:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2201      	movs	r2, #1
 8002210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002214:	2300      	movs	r3, #0
}
 8002216:	4618      	mov	r0, r3
 8002218:	3708      	adds	r7, #8
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}

0800221e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800221e:	b480      	push	{r7}
 8002220:	b083      	sub	sp, #12
 8002222:	af00      	add	r7, sp, #0
 8002224:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8002226:	bf00      	nop
 8002228:	370c      	adds	r7, #12
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr
	...

08002234 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b084      	sub	sp, #16
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
 800223c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800223e:	2300      	movs	r3, #0
 8002240:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d104      	bne.n	8002252 <HAL_TIM_IC_Start_IT+0x1e>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800224e:	b2db      	uxtb	r3, r3
 8002250:	e013      	b.n	800227a <HAL_TIM_IC_Start_IT+0x46>
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	2b04      	cmp	r3, #4
 8002256:	d104      	bne.n	8002262 <HAL_TIM_IC_Start_IT+0x2e>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800225e:	b2db      	uxtb	r3, r3
 8002260:	e00b      	b.n	800227a <HAL_TIM_IC_Start_IT+0x46>
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	2b08      	cmp	r3, #8
 8002266:	d104      	bne.n	8002272 <HAL_TIM_IC_Start_IT+0x3e>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800226e:	b2db      	uxtb	r3, r3
 8002270:	e003      	b.n	800227a <HAL_TIM_IC_Start_IT+0x46>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002278:	b2db      	uxtb	r3, r3
 800227a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d104      	bne.n	800228c <HAL_TIM_IC_Start_IT+0x58>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002288:	b2db      	uxtb	r3, r3
 800228a:	e013      	b.n	80022b4 <HAL_TIM_IC_Start_IT+0x80>
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	2b04      	cmp	r3, #4
 8002290:	d104      	bne.n	800229c <HAL_TIM_IC_Start_IT+0x68>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002298:	b2db      	uxtb	r3, r3
 800229a:	e00b      	b.n	80022b4 <HAL_TIM_IC_Start_IT+0x80>
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	2b08      	cmp	r3, #8
 80022a0:	d104      	bne.n	80022ac <HAL_TIM_IC_Start_IT+0x78>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80022a8:	b2db      	uxtb	r3, r3
 80022aa:	e003      	b.n	80022b4 <HAL_TIM_IC_Start_IT+0x80>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80022b2:	b2db      	uxtb	r3, r3
 80022b4:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80022b6:	7bbb      	ldrb	r3, [r7, #14]
 80022b8:	2b01      	cmp	r3, #1
 80022ba:	d102      	bne.n	80022c2 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80022bc:	7b7b      	ldrb	r3, [r7, #13]
 80022be:	2b01      	cmp	r3, #1
 80022c0:	d001      	beq.n	80022c6 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	e0c2      	b.n	800244c <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d104      	bne.n	80022d6 <HAL_TIM_IC_Start_IT+0xa2>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2202      	movs	r2, #2
 80022d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80022d4:	e013      	b.n	80022fe <HAL_TIM_IC_Start_IT+0xca>
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	2b04      	cmp	r3, #4
 80022da:	d104      	bne.n	80022e6 <HAL_TIM_IC_Start_IT+0xb2>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2202      	movs	r2, #2
 80022e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80022e4:	e00b      	b.n	80022fe <HAL_TIM_IC_Start_IT+0xca>
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	2b08      	cmp	r3, #8
 80022ea:	d104      	bne.n	80022f6 <HAL_TIM_IC_Start_IT+0xc2>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2202      	movs	r2, #2
 80022f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80022f4:	e003      	b.n	80022fe <HAL_TIM_IC_Start_IT+0xca>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2202      	movs	r2, #2
 80022fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d104      	bne.n	800230e <HAL_TIM_IC_Start_IT+0xda>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2202      	movs	r2, #2
 8002308:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800230c:	e013      	b.n	8002336 <HAL_TIM_IC_Start_IT+0x102>
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	2b04      	cmp	r3, #4
 8002312:	d104      	bne.n	800231e <HAL_TIM_IC_Start_IT+0xea>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2202      	movs	r2, #2
 8002318:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800231c:	e00b      	b.n	8002336 <HAL_TIM_IC_Start_IT+0x102>
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	2b08      	cmp	r3, #8
 8002322:	d104      	bne.n	800232e <HAL_TIM_IC_Start_IT+0xfa>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2202      	movs	r2, #2
 8002328:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800232c:	e003      	b.n	8002336 <HAL_TIM_IC_Start_IT+0x102>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2202      	movs	r2, #2
 8002332:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	2b0c      	cmp	r3, #12
 800233a:	d841      	bhi.n	80023c0 <HAL_TIM_IC_Start_IT+0x18c>
 800233c:	a201      	add	r2, pc, #4	; (adr r2, 8002344 <HAL_TIM_IC_Start_IT+0x110>)
 800233e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002342:	bf00      	nop
 8002344:	08002379 	.word	0x08002379
 8002348:	080023c1 	.word	0x080023c1
 800234c:	080023c1 	.word	0x080023c1
 8002350:	080023c1 	.word	0x080023c1
 8002354:	0800238b 	.word	0x0800238b
 8002358:	080023c1 	.word	0x080023c1
 800235c:	080023c1 	.word	0x080023c1
 8002360:	080023c1 	.word	0x080023c1
 8002364:	0800239d 	.word	0x0800239d
 8002368:	080023c1 	.word	0x080023c1
 800236c:	080023c1 	.word	0x080023c1
 8002370:	080023c1 	.word	0x080023c1
 8002374:	080023af 	.word	0x080023af
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	68da      	ldr	r2, [r3, #12]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f042 0202 	orr.w	r2, r2, #2
 8002386:	60da      	str	r2, [r3, #12]
      break;
 8002388:	e01d      	b.n	80023c6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	68da      	ldr	r2, [r3, #12]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f042 0204 	orr.w	r2, r2, #4
 8002398:	60da      	str	r2, [r3, #12]
      break;
 800239a:	e014      	b.n	80023c6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	68da      	ldr	r2, [r3, #12]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f042 0208 	orr.w	r2, r2, #8
 80023aa:	60da      	str	r2, [r3, #12]
      break;
 80023ac:	e00b      	b.n	80023c6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	68da      	ldr	r2, [r3, #12]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f042 0210 	orr.w	r2, r2, #16
 80023bc:	60da      	str	r2, [r3, #12]
      break;
 80023be:	e002      	b.n	80023c6 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80023c0:	2301      	movs	r3, #1
 80023c2:	73fb      	strb	r3, [r7, #15]
      break;
 80023c4:	bf00      	nop
  }

  if (status == HAL_OK)
 80023c6:	7bfb      	ldrb	r3, [r7, #15]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d13e      	bne.n	800244a <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	2201      	movs	r2, #1
 80023d2:	6839      	ldr	r1, [r7, #0]
 80023d4:	4618      	mov	r0, r3
 80023d6:	f000 fdfb 	bl	8002fd0 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a1d      	ldr	r2, [pc, #116]	; (8002454 <HAL_TIM_IC_Start_IT+0x220>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d018      	beq.n	8002416 <HAL_TIM_IC_Start_IT+0x1e2>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023ec:	d013      	beq.n	8002416 <HAL_TIM_IC_Start_IT+0x1e2>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a19      	ldr	r2, [pc, #100]	; (8002458 <HAL_TIM_IC_Start_IT+0x224>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d00e      	beq.n	8002416 <HAL_TIM_IC_Start_IT+0x1e2>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a17      	ldr	r2, [pc, #92]	; (800245c <HAL_TIM_IC_Start_IT+0x228>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d009      	beq.n	8002416 <HAL_TIM_IC_Start_IT+0x1e2>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a16      	ldr	r2, [pc, #88]	; (8002460 <HAL_TIM_IC_Start_IT+0x22c>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d004      	beq.n	8002416 <HAL_TIM_IC_Start_IT+0x1e2>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a14      	ldr	r2, [pc, #80]	; (8002464 <HAL_TIM_IC_Start_IT+0x230>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d111      	bne.n	800243a <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	f003 0307 	and.w	r3, r3, #7
 8002420:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	2b06      	cmp	r3, #6
 8002426:	d010      	beq.n	800244a <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f042 0201 	orr.w	r2, r2, #1
 8002436:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002438:	e007      	b.n	800244a <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f042 0201 	orr.w	r2, r2, #1
 8002448:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800244a:	7bfb      	ldrb	r3, [r7, #15]
}
 800244c:	4618      	mov	r0, r3
 800244e:	3710      	adds	r7, #16
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}
 8002454:	40010000 	.word	0x40010000
 8002458:	40000400 	.word	0x40000400
 800245c:	40000800 	.word	0x40000800
 8002460:	40000c00 	.word	0x40000c00
 8002464:	40014000 	.word	0x40014000

08002468 <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b084      	sub	sp, #16
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
 8002470:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002472:	2300      	movs	r3, #0
 8002474:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	2b0c      	cmp	r3, #12
 800247a:	d841      	bhi.n	8002500 <HAL_TIM_IC_Stop_IT+0x98>
 800247c:	a201      	add	r2, pc, #4	; (adr r2, 8002484 <HAL_TIM_IC_Stop_IT+0x1c>)
 800247e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002482:	bf00      	nop
 8002484:	080024b9 	.word	0x080024b9
 8002488:	08002501 	.word	0x08002501
 800248c:	08002501 	.word	0x08002501
 8002490:	08002501 	.word	0x08002501
 8002494:	080024cb 	.word	0x080024cb
 8002498:	08002501 	.word	0x08002501
 800249c:	08002501 	.word	0x08002501
 80024a0:	08002501 	.word	0x08002501
 80024a4:	080024dd 	.word	0x080024dd
 80024a8:	08002501 	.word	0x08002501
 80024ac:	08002501 	.word	0x08002501
 80024b0:	08002501 	.word	0x08002501
 80024b4:	080024ef 	.word	0x080024ef
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	68da      	ldr	r2, [r3, #12]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f022 0202 	bic.w	r2, r2, #2
 80024c6:	60da      	str	r2, [r3, #12]
      break;
 80024c8:	e01d      	b.n	8002506 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	68da      	ldr	r2, [r3, #12]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f022 0204 	bic.w	r2, r2, #4
 80024d8:	60da      	str	r2, [r3, #12]
      break;
 80024da:	e014      	b.n	8002506 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	68da      	ldr	r2, [r3, #12]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f022 0208 	bic.w	r2, r2, #8
 80024ea:	60da      	str	r2, [r3, #12]
      break;
 80024ec:	e00b      	b.n	8002506 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	68da      	ldr	r2, [r3, #12]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f022 0210 	bic.w	r2, r2, #16
 80024fc:	60da      	str	r2, [r3, #12]
      break;
 80024fe:	e002      	b.n	8002506 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8002500:	2301      	movs	r3, #1
 8002502:	73fb      	strb	r3, [r7, #15]
      break;
 8002504:	bf00      	nop
  }

  if (status == HAL_OK)
 8002506:	7bfb      	ldrb	r3, [r7, #15]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d156      	bne.n	80025ba <HAL_TIM_IC_Stop_IT+0x152>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	2200      	movs	r2, #0
 8002512:	6839      	ldr	r1, [r7, #0]
 8002514:	4618      	mov	r0, r3
 8002516:	f000 fd5b 	bl	8002fd0 <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	6a1a      	ldr	r2, [r3, #32]
 8002520:	f241 1311 	movw	r3, #4369	; 0x1111
 8002524:	4013      	ands	r3, r2
 8002526:	2b00      	cmp	r3, #0
 8002528:	d10f      	bne.n	800254a <HAL_TIM_IC_Stop_IT+0xe2>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	6a1a      	ldr	r2, [r3, #32]
 8002530:	f240 4344 	movw	r3, #1092	; 0x444
 8002534:	4013      	ands	r3, r2
 8002536:	2b00      	cmp	r3, #0
 8002538:	d107      	bne.n	800254a <HAL_TIM_IC_Stop_IT+0xe2>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	681a      	ldr	r2, [r3, #0]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f022 0201 	bic.w	r2, r2, #1
 8002548:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d104      	bne.n	800255a <HAL_TIM_IC_Stop_IT+0xf2>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2201      	movs	r2, #1
 8002554:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002558:	e013      	b.n	8002582 <HAL_TIM_IC_Stop_IT+0x11a>
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	2b04      	cmp	r3, #4
 800255e:	d104      	bne.n	800256a <HAL_TIM_IC_Stop_IT+0x102>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2201      	movs	r2, #1
 8002564:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002568:	e00b      	b.n	8002582 <HAL_TIM_IC_Stop_IT+0x11a>
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	2b08      	cmp	r3, #8
 800256e:	d104      	bne.n	800257a <HAL_TIM_IC_Stop_IT+0x112>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2201      	movs	r2, #1
 8002574:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002578:	e003      	b.n	8002582 <HAL_TIM_IC_Stop_IT+0x11a>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2201      	movs	r2, #1
 800257e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d104      	bne.n	8002592 <HAL_TIM_IC_Stop_IT+0x12a>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2201      	movs	r2, #1
 800258c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002590:	e013      	b.n	80025ba <HAL_TIM_IC_Stop_IT+0x152>
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	2b04      	cmp	r3, #4
 8002596:	d104      	bne.n	80025a2 <HAL_TIM_IC_Stop_IT+0x13a>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2201      	movs	r2, #1
 800259c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80025a0:	e00b      	b.n	80025ba <HAL_TIM_IC_Stop_IT+0x152>
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	2b08      	cmp	r3, #8
 80025a6:	d104      	bne.n	80025b2 <HAL_TIM_IC_Stop_IT+0x14a>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2201      	movs	r2, #1
 80025ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80025b0:	e003      	b.n	80025ba <HAL_TIM_IC_Stop_IT+0x152>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2201      	movs	r2, #1
 80025b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }

  /* Return function status */
  return status;
 80025ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80025bc:	4618      	mov	r0, r3
 80025be:	3710      	adds	r7, #16
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}

080025c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b082      	sub	sp, #8
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	691b      	ldr	r3, [r3, #16]
 80025d2:	f003 0302 	and.w	r3, r3, #2
 80025d6:	2b02      	cmp	r3, #2
 80025d8:	d122      	bne.n	8002620 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	68db      	ldr	r3, [r3, #12]
 80025e0:	f003 0302 	and.w	r3, r3, #2
 80025e4:	2b02      	cmp	r3, #2
 80025e6:	d11b      	bne.n	8002620 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f06f 0202 	mvn.w	r2, #2
 80025f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2201      	movs	r2, #1
 80025f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	699b      	ldr	r3, [r3, #24]
 80025fe:	f003 0303 	and.w	r3, r3, #3
 8002602:	2b00      	cmp	r3, #0
 8002604:	d003      	beq.n	800260e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	f7fd ff82 	bl	8000510 <HAL_TIM_IC_CaptureCallback>
 800260c:	e005      	b.n	800261a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800260e:	6878      	ldr	r0, [r7, #4]
 8002610:	f000 fa88 	bl	8002b24 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002614:	6878      	ldr	r0, [r7, #4]
 8002616:	f000 fa8f 	bl	8002b38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2200      	movs	r2, #0
 800261e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	691b      	ldr	r3, [r3, #16]
 8002626:	f003 0304 	and.w	r3, r3, #4
 800262a:	2b04      	cmp	r3, #4
 800262c:	d122      	bne.n	8002674 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	68db      	ldr	r3, [r3, #12]
 8002634:	f003 0304 	and.w	r3, r3, #4
 8002638:	2b04      	cmp	r3, #4
 800263a:	d11b      	bne.n	8002674 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f06f 0204 	mvn.w	r2, #4
 8002644:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2202      	movs	r2, #2
 800264a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	699b      	ldr	r3, [r3, #24]
 8002652:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002656:	2b00      	cmp	r3, #0
 8002658:	d003      	beq.n	8002662 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800265a:	6878      	ldr	r0, [r7, #4]
 800265c:	f7fd ff58 	bl	8000510 <HAL_TIM_IC_CaptureCallback>
 8002660:	e005      	b.n	800266e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002662:	6878      	ldr	r0, [r7, #4]
 8002664:	f000 fa5e 	bl	8002b24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002668:	6878      	ldr	r0, [r7, #4]
 800266a:	f000 fa65 	bl	8002b38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2200      	movs	r2, #0
 8002672:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	691b      	ldr	r3, [r3, #16]
 800267a:	f003 0308 	and.w	r3, r3, #8
 800267e:	2b08      	cmp	r3, #8
 8002680:	d122      	bne.n	80026c8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	68db      	ldr	r3, [r3, #12]
 8002688:	f003 0308 	and.w	r3, r3, #8
 800268c:	2b08      	cmp	r3, #8
 800268e:	d11b      	bne.n	80026c8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f06f 0208 	mvn.w	r2, #8
 8002698:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2204      	movs	r2, #4
 800269e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	69db      	ldr	r3, [r3, #28]
 80026a6:	f003 0303 	and.w	r3, r3, #3
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d003      	beq.n	80026b6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026ae:	6878      	ldr	r0, [r7, #4]
 80026b0:	f7fd ff2e 	bl	8000510 <HAL_TIM_IC_CaptureCallback>
 80026b4:	e005      	b.n	80026c2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026b6:	6878      	ldr	r0, [r7, #4]
 80026b8:	f000 fa34 	bl	8002b24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026bc:	6878      	ldr	r0, [r7, #4]
 80026be:	f000 fa3b 	bl	8002b38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2200      	movs	r2, #0
 80026c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	691b      	ldr	r3, [r3, #16]
 80026ce:	f003 0310 	and.w	r3, r3, #16
 80026d2:	2b10      	cmp	r3, #16
 80026d4:	d122      	bne.n	800271c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	68db      	ldr	r3, [r3, #12]
 80026dc:	f003 0310 	and.w	r3, r3, #16
 80026e0:	2b10      	cmp	r3, #16
 80026e2:	d11b      	bne.n	800271c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f06f 0210 	mvn.w	r2, #16
 80026ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2208      	movs	r2, #8
 80026f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	69db      	ldr	r3, [r3, #28]
 80026fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d003      	beq.n	800270a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002702:	6878      	ldr	r0, [r7, #4]
 8002704:	f7fd ff04 	bl	8000510 <HAL_TIM_IC_CaptureCallback>
 8002708:	e005      	b.n	8002716 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800270a:	6878      	ldr	r0, [r7, #4]
 800270c:	f000 fa0a 	bl	8002b24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002710:	6878      	ldr	r0, [r7, #4]
 8002712:	f000 fa11 	bl	8002b38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2200      	movs	r2, #0
 800271a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	691b      	ldr	r3, [r3, #16]
 8002722:	f003 0301 	and.w	r3, r3, #1
 8002726:	2b01      	cmp	r3, #1
 8002728:	d10e      	bne.n	8002748 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	68db      	ldr	r3, [r3, #12]
 8002730:	f003 0301 	and.w	r3, r3, #1
 8002734:	2b01      	cmp	r3, #1
 8002736:	d107      	bne.n	8002748 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f06f 0201 	mvn.w	r2, #1
 8002740:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002742:	6878      	ldr	r0, [r7, #4]
 8002744:	f7fe fab2 	bl	8000cac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	691b      	ldr	r3, [r3, #16]
 800274e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002752:	2b80      	cmp	r3, #128	; 0x80
 8002754:	d10e      	bne.n	8002774 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	68db      	ldr	r3, [r3, #12]
 800275c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002760:	2b80      	cmp	r3, #128	; 0x80
 8002762:	d107      	bne.n	8002774 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800276c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800276e:	6878      	ldr	r0, [r7, #4]
 8002770:	f000 fccc 	bl	800310c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	691b      	ldr	r3, [r3, #16]
 800277a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800277e:	2b40      	cmp	r3, #64	; 0x40
 8002780:	d10e      	bne.n	80027a0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	68db      	ldr	r3, [r3, #12]
 8002788:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800278c:	2b40      	cmp	r3, #64	; 0x40
 800278e:	d107      	bne.n	80027a0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002798:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800279a:	6878      	ldr	r0, [r7, #4]
 800279c:	f000 f9d6 	bl	8002b4c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	691b      	ldr	r3, [r3, #16]
 80027a6:	f003 0320 	and.w	r3, r3, #32
 80027aa:	2b20      	cmp	r3, #32
 80027ac:	d10e      	bne.n	80027cc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	68db      	ldr	r3, [r3, #12]
 80027b4:	f003 0320 	and.w	r3, r3, #32
 80027b8:	2b20      	cmp	r3, #32
 80027ba:	d107      	bne.n	80027cc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f06f 0220 	mvn.w	r2, #32
 80027c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80027c6:	6878      	ldr	r0, [r7, #4]
 80027c8:	f000 fc96 	bl	80030f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80027cc:	bf00      	nop
 80027ce:	3708      	adds	r7, #8
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}

080027d4 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b086      	sub	sp, #24
 80027d8:	af00      	add	r7, sp, #0
 80027da:	60f8      	str	r0, [r7, #12]
 80027dc:	60b9      	str	r1, [r7, #8]
 80027de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027e0:	2300      	movs	r3, #0
 80027e2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027ea:	2b01      	cmp	r3, #1
 80027ec:	d101      	bne.n	80027f2 <HAL_TIM_IC_ConfigChannel+0x1e>
 80027ee:	2302      	movs	r3, #2
 80027f0:	e088      	b.n	8002904 <HAL_TIM_IC_ConfigChannel+0x130>
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	2201      	movs	r2, #1
 80027f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d11b      	bne.n	8002838 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	6818      	ldr	r0, [r3, #0]
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	6819      	ldr	r1, [r3, #0]
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	685a      	ldr	r2, [r3, #4]
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	68db      	ldr	r3, [r3, #12]
 8002810:	f000 fa26 	bl	8002c60 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	699a      	ldr	r2, [r3, #24]
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f022 020c 	bic.w	r2, r2, #12
 8002822:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	6999      	ldr	r1, [r3, #24]
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	689a      	ldr	r2, [r3, #8]
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	430a      	orrs	r2, r1
 8002834:	619a      	str	r2, [r3, #24]
 8002836:	e060      	b.n	80028fa <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2b04      	cmp	r3, #4
 800283c:	d11c      	bne.n	8002878 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	6818      	ldr	r0, [r3, #0]
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	6819      	ldr	r1, [r3, #0]
 8002846:	68bb      	ldr	r3, [r7, #8]
 8002848:	685a      	ldr	r2, [r3, #4]
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	68db      	ldr	r3, [r3, #12]
 800284e:	f000 fa9e 	bl	8002d8e <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	699a      	ldr	r2, [r3, #24]
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002860:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	6999      	ldr	r1, [r3, #24]
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	021a      	lsls	r2, r3, #8
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	430a      	orrs	r2, r1
 8002874:	619a      	str	r2, [r3, #24]
 8002876:	e040      	b.n	80028fa <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2b08      	cmp	r3, #8
 800287c:	d11b      	bne.n	80028b6 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	6818      	ldr	r0, [r3, #0]
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	6819      	ldr	r1, [r3, #0]
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	685a      	ldr	r2, [r3, #4]
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	68db      	ldr	r3, [r3, #12]
 800288e:	f000 faeb 	bl	8002e68 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	69da      	ldr	r2, [r3, #28]
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f022 020c 	bic.w	r2, r2, #12
 80028a0:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	69d9      	ldr	r1, [r3, #28]
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	689a      	ldr	r2, [r3, #8]
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	430a      	orrs	r2, r1
 80028b2:	61da      	str	r2, [r3, #28]
 80028b4:	e021      	b.n	80028fa <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2b0c      	cmp	r3, #12
 80028ba:	d11c      	bne.n	80028f6 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	6818      	ldr	r0, [r3, #0]
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	6819      	ldr	r1, [r3, #0]
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	685a      	ldr	r2, [r3, #4]
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	68db      	ldr	r3, [r3, #12]
 80028cc:	f000 fb08 	bl	8002ee0 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	69da      	ldr	r2, [r3, #28]
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80028de:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	69d9      	ldr	r1, [r3, #28]
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	021a      	lsls	r2, r3, #8
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	430a      	orrs	r2, r1
 80028f2:	61da      	str	r2, [r3, #28]
 80028f4:	e001      	b.n	80028fa <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	2200      	movs	r2, #0
 80028fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002902:	7dfb      	ldrb	r3, [r7, #23]
}
 8002904:	4618      	mov	r0, r3
 8002906:	3718      	adds	r7, #24
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}

0800290c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b084      	sub	sp, #16
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
 8002914:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002916:	2300      	movs	r3, #0
 8002918:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002920:	2b01      	cmp	r3, #1
 8002922:	d101      	bne.n	8002928 <HAL_TIM_ConfigClockSource+0x1c>
 8002924:	2302      	movs	r3, #2
 8002926:	e0b4      	b.n	8002a92 <HAL_TIM_ConfigClockSource+0x186>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2201      	movs	r2, #1
 800292c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2202      	movs	r2, #2
 8002934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002946:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800294e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	68ba      	ldr	r2, [r7, #8]
 8002956:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002960:	d03e      	beq.n	80029e0 <HAL_TIM_ConfigClockSource+0xd4>
 8002962:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002966:	f200 8087 	bhi.w	8002a78 <HAL_TIM_ConfigClockSource+0x16c>
 800296a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800296e:	f000 8086 	beq.w	8002a7e <HAL_TIM_ConfigClockSource+0x172>
 8002972:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002976:	d87f      	bhi.n	8002a78 <HAL_TIM_ConfigClockSource+0x16c>
 8002978:	2b70      	cmp	r3, #112	; 0x70
 800297a:	d01a      	beq.n	80029b2 <HAL_TIM_ConfigClockSource+0xa6>
 800297c:	2b70      	cmp	r3, #112	; 0x70
 800297e:	d87b      	bhi.n	8002a78 <HAL_TIM_ConfigClockSource+0x16c>
 8002980:	2b60      	cmp	r3, #96	; 0x60
 8002982:	d050      	beq.n	8002a26 <HAL_TIM_ConfigClockSource+0x11a>
 8002984:	2b60      	cmp	r3, #96	; 0x60
 8002986:	d877      	bhi.n	8002a78 <HAL_TIM_ConfigClockSource+0x16c>
 8002988:	2b50      	cmp	r3, #80	; 0x50
 800298a:	d03c      	beq.n	8002a06 <HAL_TIM_ConfigClockSource+0xfa>
 800298c:	2b50      	cmp	r3, #80	; 0x50
 800298e:	d873      	bhi.n	8002a78 <HAL_TIM_ConfigClockSource+0x16c>
 8002990:	2b40      	cmp	r3, #64	; 0x40
 8002992:	d058      	beq.n	8002a46 <HAL_TIM_ConfigClockSource+0x13a>
 8002994:	2b40      	cmp	r3, #64	; 0x40
 8002996:	d86f      	bhi.n	8002a78 <HAL_TIM_ConfigClockSource+0x16c>
 8002998:	2b30      	cmp	r3, #48	; 0x30
 800299a:	d064      	beq.n	8002a66 <HAL_TIM_ConfigClockSource+0x15a>
 800299c:	2b30      	cmp	r3, #48	; 0x30
 800299e:	d86b      	bhi.n	8002a78 <HAL_TIM_ConfigClockSource+0x16c>
 80029a0:	2b20      	cmp	r3, #32
 80029a2:	d060      	beq.n	8002a66 <HAL_TIM_ConfigClockSource+0x15a>
 80029a4:	2b20      	cmp	r3, #32
 80029a6:	d867      	bhi.n	8002a78 <HAL_TIM_ConfigClockSource+0x16c>
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d05c      	beq.n	8002a66 <HAL_TIM_ConfigClockSource+0x15a>
 80029ac:	2b10      	cmp	r3, #16
 80029ae:	d05a      	beq.n	8002a66 <HAL_TIM_ConfigClockSource+0x15a>
 80029b0:	e062      	b.n	8002a78 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6818      	ldr	r0, [r3, #0]
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	6899      	ldr	r1, [r3, #8]
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	685a      	ldr	r2, [r3, #4]
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	68db      	ldr	r3, [r3, #12]
 80029c2:	f000 fae5 	bl	8002f90 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80029d4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	68ba      	ldr	r2, [r7, #8]
 80029dc:	609a      	str	r2, [r3, #8]
      break;
 80029de:	e04f      	b.n	8002a80 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6818      	ldr	r0, [r3, #0]
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	6899      	ldr	r1, [r3, #8]
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	685a      	ldr	r2, [r3, #4]
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	68db      	ldr	r3, [r3, #12]
 80029f0:	f000 face 	bl	8002f90 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	689a      	ldr	r2, [r3, #8]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002a02:	609a      	str	r2, [r3, #8]
      break;
 8002a04:	e03c      	b.n	8002a80 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6818      	ldr	r0, [r3, #0]
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	6859      	ldr	r1, [r3, #4]
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	68db      	ldr	r3, [r3, #12]
 8002a12:	461a      	mov	r2, r3
 8002a14:	f000 f98c 	bl	8002d30 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	2150      	movs	r1, #80	; 0x50
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f000 fa9b 	bl	8002f5a <TIM_ITRx_SetConfig>
      break;
 8002a24:	e02c      	b.n	8002a80 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6818      	ldr	r0, [r3, #0]
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	6859      	ldr	r1, [r3, #4]
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	68db      	ldr	r3, [r3, #12]
 8002a32:	461a      	mov	r2, r3
 8002a34:	f000 f9e8 	bl	8002e08 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	2160      	movs	r1, #96	; 0x60
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f000 fa8b 	bl	8002f5a <TIM_ITRx_SetConfig>
      break;
 8002a44:	e01c      	b.n	8002a80 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6818      	ldr	r0, [r3, #0]
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	6859      	ldr	r1, [r3, #4]
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	68db      	ldr	r3, [r3, #12]
 8002a52:	461a      	mov	r2, r3
 8002a54:	f000 f96c 	bl	8002d30 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	2140      	movs	r1, #64	; 0x40
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f000 fa7b 	bl	8002f5a <TIM_ITRx_SetConfig>
      break;
 8002a64:	e00c      	b.n	8002a80 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681a      	ldr	r2, [r3, #0]
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4619      	mov	r1, r3
 8002a70:	4610      	mov	r0, r2
 8002a72:	f000 fa72 	bl	8002f5a <TIM_ITRx_SetConfig>
      break;
 8002a76:	e003      	b.n	8002a80 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	73fb      	strb	r3, [r7, #15]
      break;
 8002a7c:	e000      	b.n	8002a80 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002a7e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2201      	movs	r2, #1
 8002a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002a90:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	3710      	adds	r7, #16
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}
	...

08002a9c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b085      	sub	sp, #20
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
 8002aa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	2b0c      	cmp	r3, #12
 8002aae:	d831      	bhi.n	8002b14 <HAL_TIM_ReadCapturedValue+0x78>
 8002ab0:	a201      	add	r2, pc, #4	; (adr r2, 8002ab8 <HAL_TIM_ReadCapturedValue+0x1c>)
 8002ab2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ab6:	bf00      	nop
 8002ab8:	08002aed 	.word	0x08002aed
 8002abc:	08002b15 	.word	0x08002b15
 8002ac0:	08002b15 	.word	0x08002b15
 8002ac4:	08002b15 	.word	0x08002b15
 8002ac8:	08002af7 	.word	0x08002af7
 8002acc:	08002b15 	.word	0x08002b15
 8002ad0:	08002b15 	.word	0x08002b15
 8002ad4:	08002b15 	.word	0x08002b15
 8002ad8:	08002b01 	.word	0x08002b01
 8002adc:	08002b15 	.word	0x08002b15
 8002ae0:	08002b15 	.word	0x08002b15
 8002ae4:	08002b15 	.word	0x08002b15
 8002ae8:	08002b0b 	.word	0x08002b0b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002af2:	60fb      	str	r3, [r7, #12]

      break;
 8002af4:	e00f      	b.n	8002b16 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002afc:	60fb      	str	r3, [r7, #12]

      break;
 8002afe:	e00a      	b.n	8002b16 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b06:	60fb      	str	r3, [r7, #12]

      break;
 8002b08:	e005      	b.n	8002b16 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b10:	60fb      	str	r3, [r7, #12]

      break;
 8002b12:	e000      	b.n	8002b16 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8002b14:	bf00      	nop
  }

  return tmpreg;
 8002b16:	68fb      	ldr	r3, [r7, #12]
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	3714      	adds	r7, #20
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b22:	4770      	bx	lr

08002b24 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b083      	sub	sp, #12
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002b2c:	bf00      	nop
 8002b2e:	370c      	adds	r7, #12
 8002b30:	46bd      	mov	sp, r7
 8002b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b36:	4770      	bx	lr

08002b38 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b083      	sub	sp, #12
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002b40:	bf00      	nop
 8002b42:	370c      	adds	r7, #12
 8002b44:	46bd      	mov	sp, r7
 8002b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4a:	4770      	bx	lr

08002b4c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b083      	sub	sp, #12
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002b54:	bf00      	nop
 8002b56:	370c      	adds	r7, #12
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5e:	4770      	bx	lr

08002b60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b085      	sub	sp, #20
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
 8002b68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	4a34      	ldr	r2, [pc, #208]	; (8002c44 <TIM_Base_SetConfig+0xe4>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d00f      	beq.n	8002b98 <TIM_Base_SetConfig+0x38>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b7e:	d00b      	beq.n	8002b98 <TIM_Base_SetConfig+0x38>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	4a31      	ldr	r2, [pc, #196]	; (8002c48 <TIM_Base_SetConfig+0xe8>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d007      	beq.n	8002b98 <TIM_Base_SetConfig+0x38>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	4a30      	ldr	r2, [pc, #192]	; (8002c4c <TIM_Base_SetConfig+0xec>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d003      	beq.n	8002b98 <TIM_Base_SetConfig+0x38>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	4a2f      	ldr	r2, [pc, #188]	; (8002c50 <TIM_Base_SetConfig+0xf0>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d108      	bne.n	8002baa <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b9e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	68fa      	ldr	r2, [r7, #12]
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	4a25      	ldr	r2, [pc, #148]	; (8002c44 <TIM_Base_SetConfig+0xe4>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d01b      	beq.n	8002bea <TIM_Base_SetConfig+0x8a>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bb8:	d017      	beq.n	8002bea <TIM_Base_SetConfig+0x8a>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	4a22      	ldr	r2, [pc, #136]	; (8002c48 <TIM_Base_SetConfig+0xe8>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d013      	beq.n	8002bea <TIM_Base_SetConfig+0x8a>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	4a21      	ldr	r2, [pc, #132]	; (8002c4c <TIM_Base_SetConfig+0xec>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d00f      	beq.n	8002bea <TIM_Base_SetConfig+0x8a>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	4a20      	ldr	r2, [pc, #128]	; (8002c50 <TIM_Base_SetConfig+0xf0>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d00b      	beq.n	8002bea <TIM_Base_SetConfig+0x8a>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	4a1f      	ldr	r2, [pc, #124]	; (8002c54 <TIM_Base_SetConfig+0xf4>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d007      	beq.n	8002bea <TIM_Base_SetConfig+0x8a>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	4a1e      	ldr	r2, [pc, #120]	; (8002c58 <TIM_Base_SetConfig+0xf8>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d003      	beq.n	8002bea <TIM_Base_SetConfig+0x8a>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	4a1d      	ldr	r2, [pc, #116]	; (8002c5c <TIM_Base_SetConfig+0xfc>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d108      	bne.n	8002bfc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bf0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	68db      	ldr	r3, [r3, #12]
 8002bf6:	68fa      	ldr	r2, [r7, #12]
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	695b      	ldr	r3, [r3, #20]
 8002c06:	4313      	orrs	r3, r2
 8002c08:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	68fa      	ldr	r2, [r7, #12]
 8002c0e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	689a      	ldr	r2, [r3, #8]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	681a      	ldr	r2, [r3, #0]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	4a08      	ldr	r2, [pc, #32]	; (8002c44 <TIM_Base_SetConfig+0xe4>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d103      	bne.n	8002c30 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	691a      	ldr	r2, [r3, #16]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2201      	movs	r2, #1
 8002c34:	615a      	str	r2, [r3, #20]
}
 8002c36:	bf00      	nop
 8002c38:	3714      	adds	r7, #20
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c40:	4770      	bx	lr
 8002c42:	bf00      	nop
 8002c44:	40010000 	.word	0x40010000
 8002c48:	40000400 	.word	0x40000400
 8002c4c:	40000800 	.word	0x40000800
 8002c50:	40000c00 	.word	0x40000c00
 8002c54:	40014000 	.word	0x40014000
 8002c58:	40014400 	.word	0x40014400
 8002c5c:	40014800 	.word	0x40014800

08002c60 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b087      	sub	sp, #28
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	60f8      	str	r0, [r7, #12]
 8002c68:	60b9      	str	r1, [r7, #8]
 8002c6a:	607a      	str	r2, [r7, #4]
 8002c6c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	6a1b      	ldr	r3, [r3, #32]
 8002c72:	f023 0201 	bic.w	r2, r3, #1
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	699b      	ldr	r3, [r3, #24]
 8002c7e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	6a1b      	ldr	r3, [r3, #32]
 8002c84:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	4a24      	ldr	r2, [pc, #144]	; (8002d1c <TIM_TI1_SetConfig+0xbc>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d013      	beq.n	8002cb6 <TIM_TI1_SetConfig+0x56>
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c94:	d00f      	beq.n	8002cb6 <TIM_TI1_SetConfig+0x56>
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	4a21      	ldr	r2, [pc, #132]	; (8002d20 <TIM_TI1_SetConfig+0xc0>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d00b      	beq.n	8002cb6 <TIM_TI1_SetConfig+0x56>
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	4a20      	ldr	r2, [pc, #128]	; (8002d24 <TIM_TI1_SetConfig+0xc4>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d007      	beq.n	8002cb6 <TIM_TI1_SetConfig+0x56>
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	4a1f      	ldr	r2, [pc, #124]	; (8002d28 <TIM_TI1_SetConfig+0xc8>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d003      	beq.n	8002cb6 <TIM_TI1_SetConfig+0x56>
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	4a1e      	ldr	r2, [pc, #120]	; (8002d2c <TIM_TI1_SetConfig+0xcc>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d101      	bne.n	8002cba <TIM_TI1_SetConfig+0x5a>
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e000      	b.n	8002cbc <TIM_TI1_SetConfig+0x5c>
 8002cba:	2300      	movs	r3, #0
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d008      	beq.n	8002cd2 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	f023 0303 	bic.w	r3, r3, #3
 8002cc6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8002cc8:	697a      	ldr	r2, [r7, #20]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	617b      	str	r3, [r7, #20]
 8002cd0:	e003      	b.n	8002cda <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	f043 0301 	orr.w	r3, r3, #1
 8002cd8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002ce0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	011b      	lsls	r3, r3, #4
 8002ce6:	b2db      	uxtb	r3, r3
 8002ce8:	697a      	ldr	r2, [r7, #20]
 8002cea:	4313      	orrs	r3, r2
 8002cec:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	f023 030a 	bic.w	r3, r3, #10
 8002cf4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	f003 030a 	and.w	r3, r3, #10
 8002cfc:	693a      	ldr	r2, [r7, #16]
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	697a      	ldr	r2, [r7, #20]
 8002d06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	693a      	ldr	r2, [r7, #16]
 8002d0c:	621a      	str	r2, [r3, #32]
}
 8002d0e:	bf00      	nop
 8002d10:	371c      	adds	r7, #28
 8002d12:	46bd      	mov	sp, r7
 8002d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d18:	4770      	bx	lr
 8002d1a:	bf00      	nop
 8002d1c:	40010000 	.word	0x40010000
 8002d20:	40000400 	.word	0x40000400
 8002d24:	40000800 	.word	0x40000800
 8002d28:	40000c00 	.word	0x40000c00
 8002d2c:	40014000 	.word	0x40014000

08002d30 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b087      	sub	sp, #28
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	60f8      	str	r0, [r7, #12]
 8002d38:	60b9      	str	r1, [r7, #8]
 8002d3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	6a1b      	ldr	r3, [r3, #32]
 8002d40:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	6a1b      	ldr	r3, [r3, #32]
 8002d46:	f023 0201 	bic.w	r2, r3, #1
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	699b      	ldr	r3, [r3, #24]
 8002d52:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d5a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	011b      	lsls	r3, r3, #4
 8002d60:	693a      	ldr	r2, [r7, #16]
 8002d62:	4313      	orrs	r3, r2
 8002d64:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	f023 030a 	bic.w	r3, r3, #10
 8002d6c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002d6e:	697a      	ldr	r2, [r7, #20]
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	4313      	orrs	r3, r2
 8002d74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	693a      	ldr	r2, [r7, #16]
 8002d7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	697a      	ldr	r2, [r7, #20]
 8002d80:	621a      	str	r2, [r3, #32]
}
 8002d82:	bf00      	nop
 8002d84:	371c      	adds	r7, #28
 8002d86:	46bd      	mov	sp, r7
 8002d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8c:	4770      	bx	lr

08002d8e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002d8e:	b480      	push	{r7}
 8002d90:	b087      	sub	sp, #28
 8002d92:	af00      	add	r7, sp, #0
 8002d94:	60f8      	str	r0, [r7, #12]
 8002d96:	60b9      	str	r1, [r7, #8]
 8002d98:	607a      	str	r2, [r7, #4]
 8002d9a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	6a1b      	ldr	r3, [r3, #32]
 8002da0:	f023 0210 	bic.w	r2, r3, #16
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	699b      	ldr	r3, [r3, #24]
 8002dac:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	6a1b      	ldr	r3, [r3, #32]
 8002db2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8002db4:	697b      	ldr	r3, [r7, #20]
 8002db6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002dba:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	021b      	lsls	r3, r3, #8
 8002dc0:	697a      	ldr	r2, [r7, #20]
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002dcc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	031b      	lsls	r3, r3, #12
 8002dd2:	b29b      	uxth	r3, r3
 8002dd4:	697a      	ldr	r2, [r7, #20]
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002de0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	011b      	lsls	r3, r3, #4
 8002de6:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8002dea:	693a      	ldr	r2, [r7, #16]
 8002dec:	4313      	orrs	r3, r2
 8002dee:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	697a      	ldr	r2, [r7, #20]
 8002df4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	693a      	ldr	r2, [r7, #16]
 8002dfa:	621a      	str	r2, [r3, #32]
}
 8002dfc:	bf00      	nop
 8002dfe:	371c      	adds	r7, #28
 8002e00:	46bd      	mov	sp, r7
 8002e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e06:	4770      	bx	lr

08002e08 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b087      	sub	sp, #28
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	60f8      	str	r0, [r7, #12]
 8002e10:	60b9      	str	r1, [r7, #8]
 8002e12:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	6a1b      	ldr	r3, [r3, #32]
 8002e18:	f023 0210 	bic.w	r2, r3, #16
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	699b      	ldr	r3, [r3, #24]
 8002e24:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	6a1b      	ldr	r3, [r3, #32]
 8002e2a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002e32:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	031b      	lsls	r3, r3, #12
 8002e38:	697a      	ldr	r2, [r7, #20]
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002e44:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	011b      	lsls	r3, r3, #4
 8002e4a:	693a      	ldr	r2, [r7, #16]
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	697a      	ldr	r2, [r7, #20]
 8002e54:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	693a      	ldr	r2, [r7, #16]
 8002e5a:	621a      	str	r2, [r3, #32]
}
 8002e5c:	bf00      	nop
 8002e5e:	371c      	adds	r7, #28
 8002e60:	46bd      	mov	sp, r7
 8002e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e66:	4770      	bx	lr

08002e68 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b087      	sub	sp, #28
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	60f8      	str	r0, [r7, #12]
 8002e70:	60b9      	str	r1, [r7, #8]
 8002e72:	607a      	str	r2, [r7, #4]
 8002e74:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	6a1b      	ldr	r3, [r3, #32]
 8002e7a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	69db      	ldr	r3, [r3, #28]
 8002e86:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	6a1b      	ldr	r3, [r3, #32]
 8002e8c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	f023 0303 	bic.w	r3, r3, #3
 8002e94:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8002e96:	697a      	ldr	r2, [r7, #20]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002ea4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	011b      	lsls	r3, r3, #4
 8002eaa:	b2db      	uxtb	r3, r3
 8002eac:	697a      	ldr	r2, [r7, #20]
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8002eb8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	021b      	lsls	r3, r3, #8
 8002ebe:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8002ec2:	693a      	ldr	r2, [r7, #16]
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	697a      	ldr	r2, [r7, #20]
 8002ecc:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	693a      	ldr	r2, [r7, #16]
 8002ed2:	621a      	str	r2, [r3, #32]
}
 8002ed4:	bf00      	nop
 8002ed6:	371c      	adds	r7, #28
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ede:	4770      	bx	lr

08002ee0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b087      	sub	sp, #28
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	60f8      	str	r0, [r7, #12]
 8002ee8:	60b9      	str	r1, [r7, #8]
 8002eea:	607a      	str	r2, [r7, #4]
 8002eec:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	6a1b      	ldr	r3, [r3, #32]
 8002ef2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	69db      	ldr	r3, [r3, #28]
 8002efe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	6a1b      	ldr	r3, [r3, #32]
 8002f04:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f0c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	021b      	lsls	r3, r3, #8
 8002f12:	697a      	ldr	r2, [r7, #20]
 8002f14:	4313      	orrs	r3, r2
 8002f16:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002f1e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	031b      	lsls	r3, r3, #12
 8002f24:	b29b      	uxth	r3, r3
 8002f26:	697a      	ldr	r2, [r7, #20]
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8002f32:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	031b      	lsls	r3, r3, #12
 8002f38:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8002f3c:	693a      	ldr	r2, [r7, #16]
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	697a      	ldr	r2, [r7, #20]
 8002f46:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	693a      	ldr	r2, [r7, #16]
 8002f4c:	621a      	str	r2, [r3, #32]
}
 8002f4e:	bf00      	nop
 8002f50:	371c      	adds	r7, #28
 8002f52:	46bd      	mov	sp, r7
 8002f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f58:	4770      	bx	lr

08002f5a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002f5a:	b480      	push	{r7}
 8002f5c:	b085      	sub	sp, #20
 8002f5e:	af00      	add	r7, sp, #0
 8002f60:	6078      	str	r0, [r7, #4]
 8002f62:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	689b      	ldr	r3, [r3, #8]
 8002f68:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f70:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002f72:	683a      	ldr	r2, [r7, #0]
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	4313      	orrs	r3, r2
 8002f78:	f043 0307 	orr.w	r3, r3, #7
 8002f7c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	68fa      	ldr	r2, [r7, #12]
 8002f82:	609a      	str	r2, [r3, #8]
}
 8002f84:	bf00      	nop
 8002f86:	3714      	adds	r7, #20
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8e:	4770      	bx	lr

08002f90 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b087      	sub	sp, #28
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	60f8      	str	r0, [r7, #12]
 8002f98:	60b9      	str	r1, [r7, #8]
 8002f9a:	607a      	str	r2, [r7, #4]
 8002f9c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002faa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	021a      	lsls	r2, r3, #8
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	431a      	orrs	r2, r3
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	697a      	ldr	r2, [r7, #20]
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	697a      	ldr	r2, [r7, #20]
 8002fc2:	609a      	str	r2, [r3, #8]
}
 8002fc4:	bf00      	nop
 8002fc6:	371c      	adds	r7, #28
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fce:	4770      	bx	lr

08002fd0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b087      	sub	sp, #28
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	60f8      	str	r0, [r7, #12]
 8002fd8:	60b9      	str	r1, [r7, #8]
 8002fda:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	f003 031f 	and.w	r3, r3, #31
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	6a1a      	ldr	r2, [r3, #32]
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	43db      	mvns	r3, r3
 8002ff2:	401a      	ands	r2, r3
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	6a1a      	ldr	r2, [r3, #32]
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	f003 031f 	and.w	r3, r3, #31
 8003002:	6879      	ldr	r1, [r7, #4]
 8003004:	fa01 f303 	lsl.w	r3, r1, r3
 8003008:	431a      	orrs	r2, r3
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	621a      	str	r2, [r3, #32]
}
 800300e:	bf00      	nop
 8003010:	371c      	adds	r7, #28
 8003012:	46bd      	mov	sp, r7
 8003014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003018:	4770      	bx	lr
	...

0800301c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800301c:	b480      	push	{r7}
 800301e:	b085      	sub	sp, #20
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
 8003024:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800302c:	2b01      	cmp	r3, #1
 800302e:	d101      	bne.n	8003034 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003030:	2302      	movs	r3, #2
 8003032:	e050      	b.n	80030d6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2201      	movs	r2, #1
 8003038:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2202      	movs	r2, #2
 8003040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800305a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	68fa      	ldr	r2, [r7, #12]
 8003062:	4313      	orrs	r3, r2
 8003064:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	68fa      	ldr	r2, [r7, #12]
 800306c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a1c      	ldr	r2, [pc, #112]	; (80030e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d018      	beq.n	80030aa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003080:	d013      	beq.n	80030aa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a18      	ldr	r2, [pc, #96]	; (80030e8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d00e      	beq.n	80030aa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a16      	ldr	r2, [pc, #88]	; (80030ec <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d009      	beq.n	80030aa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a15      	ldr	r2, [pc, #84]	; (80030f0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d004      	beq.n	80030aa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a13      	ldr	r2, [pc, #76]	; (80030f4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d10c      	bne.n	80030c4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80030b0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	68ba      	ldr	r2, [r7, #8]
 80030b8:	4313      	orrs	r3, r2
 80030ba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	68ba      	ldr	r2, [r7, #8]
 80030c2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2201      	movs	r2, #1
 80030c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2200      	movs	r2, #0
 80030d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80030d4:	2300      	movs	r3, #0
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	3714      	adds	r7, #20
 80030da:	46bd      	mov	sp, r7
 80030dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e0:	4770      	bx	lr
 80030e2:	bf00      	nop
 80030e4:	40010000 	.word	0x40010000
 80030e8:	40000400 	.word	0x40000400
 80030ec:	40000800 	.word	0x40000800
 80030f0:	40000c00 	.word	0x40000c00
 80030f4:	40014000 	.word	0x40014000

080030f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b083      	sub	sp, #12
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003100:	bf00      	nop
 8003102:	370c      	adds	r7, #12
 8003104:	46bd      	mov	sp, r7
 8003106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310a:	4770      	bx	lr

0800310c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800310c:	b480      	push	{r7}
 800310e:	b083      	sub	sp, #12
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003114:	bf00      	nop
 8003116:	370c      	adds	r7, #12
 8003118:	46bd      	mov	sp, r7
 800311a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311e:	4770      	bx	lr

08003120 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003120:	b480      	push	{r7}
 8003122:	b085      	sub	sp, #20
 8003124:	af00      	add	r7, sp, #0
 8003126:	4603      	mov	r3, r0
 8003128:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800312a:	2300      	movs	r3, #0
 800312c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800312e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003132:	2b84      	cmp	r3, #132	; 0x84
 8003134:	d005      	beq.n	8003142 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003136:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	4413      	add	r3, r2
 800313e:	3303      	adds	r3, #3
 8003140:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003142:	68fb      	ldr	r3, [r7, #12]
}
 8003144:	4618      	mov	r0, r3
 8003146:	3714      	adds	r7, #20
 8003148:	46bd      	mov	sp, r7
 800314a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314e:	4770      	bx	lr

08003150 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003154:	f000 fade 	bl	8003714 <vTaskStartScheduler>
  
  return osOK;
 8003158:	2300      	movs	r3, #0
}
 800315a:	4618      	mov	r0, r3
 800315c:	bd80      	pop	{r7, pc}

0800315e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800315e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003160:	b089      	sub	sp, #36	; 0x24
 8003162:	af04      	add	r7, sp, #16
 8003164:	6078      	str	r0, [r7, #4]
 8003166:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	695b      	ldr	r3, [r3, #20]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d020      	beq.n	80031b2 <osThreadCreate+0x54>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	699b      	ldr	r3, [r3, #24]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d01c      	beq.n	80031b2 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	685c      	ldr	r4, [r3, #4]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	691e      	ldr	r6, [r3, #16]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800318a:	4618      	mov	r0, r3
 800318c:	f7ff ffc8 	bl	8003120 <makeFreeRtosPriority>
 8003190:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	695b      	ldr	r3, [r3, #20]
 8003196:	687a      	ldr	r2, [r7, #4]
 8003198:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800319a:	9202      	str	r2, [sp, #8]
 800319c:	9301      	str	r3, [sp, #4]
 800319e:	9100      	str	r1, [sp, #0]
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	4632      	mov	r2, r6
 80031a4:	4629      	mov	r1, r5
 80031a6:	4620      	mov	r0, r4
 80031a8:	f000 f8ed 	bl	8003386 <xTaskCreateStatic>
 80031ac:	4603      	mov	r3, r0
 80031ae:	60fb      	str	r3, [r7, #12]
 80031b0:	e01c      	b.n	80031ec <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	685c      	ldr	r4, [r3, #4]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80031be:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80031c6:	4618      	mov	r0, r3
 80031c8:	f7ff ffaa 	bl	8003120 <makeFreeRtosPriority>
 80031cc:	4602      	mov	r2, r0
 80031ce:	f107 030c 	add.w	r3, r7, #12
 80031d2:	9301      	str	r3, [sp, #4]
 80031d4:	9200      	str	r2, [sp, #0]
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	4632      	mov	r2, r6
 80031da:	4629      	mov	r1, r5
 80031dc:	4620      	mov	r0, r4
 80031de:	f000 f92f 	bl	8003440 <xTaskCreate>
 80031e2:	4603      	mov	r3, r0
 80031e4:	2b01      	cmp	r3, #1
 80031e6:	d001      	beq.n	80031ec <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80031e8:	2300      	movs	r3, #0
 80031ea:	e000      	b.n	80031ee <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80031ec:	68fb      	ldr	r3, [r7, #12]
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	3714      	adds	r7, #20
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080031f6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80031f6:	b580      	push	{r7, lr}
 80031f8:	b084      	sub	sp, #16
 80031fa:	af00      	add	r7, sp, #0
 80031fc:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d001      	beq.n	800320c <osDelay+0x16>
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	e000      	b.n	800320e <osDelay+0x18>
 800320c:	2301      	movs	r3, #1
 800320e:	4618      	mov	r0, r3
 8003210:	f000 fa4c 	bl	80036ac <vTaskDelay>
  
  return osOK;
 8003214:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003216:	4618      	mov	r0, r3
 8003218:	3710      	adds	r7, #16
 800321a:	46bd      	mov	sp, r7
 800321c:	bd80      	pop	{r7, pc}

0800321e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800321e:	b480      	push	{r7}
 8003220:	b083      	sub	sp, #12
 8003222:	af00      	add	r7, sp, #0
 8003224:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	f103 0208 	add.w	r2, r3, #8
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	f04f 32ff 	mov.w	r2, #4294967295
 8003236:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	f103 0208 	add.w	r2, r3, #8
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	f103 0208 	add.w	r2, r3, #8
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2200      	movs	r2, #0
 8003250:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003252:	bf00      	nop
 8003254:	370c      	adds	r7, #12
 8003256:	46bd      	mov	sp, r7
 8003258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325c:	4770      	bx	lr

0800325e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800325e:	b480      	push	{r7}
 8003260:	b083      	sub	sp, #12
 8003262:	af00      	add	r7, sp, #0
 8003264:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2200      	movs	r2, #0
 800326a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800326c:	bf00      	nop
 800326e:	370c      	adds	r7, #12
 8003270:	46bd      	mov	sp, r7
 8003272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003276:	4770      	bx	lr

08003278 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003278:	b480      	push	{r7}
 800327a:	b085      	sub	sp, #20
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
 8003280:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	68fa      	ldr	r2, [r7, #12]
 800328c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	689a      	ldr	r2, [r3, #8]
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	689b      	ldr	r3, [r3, #8]
 800329a:	683a      	ldr	r2, [r7, #0]
 800329c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	683a      	ldr	r2, [r7, #0]
 80032a2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	687a      	ldr	r2, [r7, #4]
 80032a8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	1c5a      	adds	r2, r3, #1
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	601a      	str	r2, [r3, #0]
}
 80032b4:	bf00      	nop
 80032b6:	3714      	adds	r7, #20
 80032b8:	46bd      	mov	sp, r7
 80032ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032be:	4770      	bx	lr

080032c0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80032c0:	b480      	push	{r7}
 80032c2:	b085      	sub	sp, #20
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
 80032c8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80032d0:	68bb      	ldr	r3, [r7, #8]
 80032d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032d6:	d103      	bne.n	80032e0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	691b      	ldr	r3, [r3, #16]
 80032dc:	60fb      	str	r3, [r7, #12]
 80032de:	e00c      	b.n	80032fa <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	3308      	adds	r3, #8
 80032e4:	60fb      	str	r3, [r7, #12]
 80032e6:	e002      	b.n	80032ee <vListInsert+0x2e>
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	60fb      	str	r3, [r7, #12]
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	68ba      	ldr	r2, [r7, #8]
 80032f6:	429a      	cmp	r2, r3
 80032f8:	d2f6      	bcs.n	80032e8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	685a      	ldr	r2, [r3, #4]
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	683a      	ldr	r2, [r7, #0]
 8003308:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	68fa      	ldr	r2, [r7, #12]
 800330e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	683a      	ldr	r2, [r7, #0]
 8003314:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	687a      	ldr	r2, [r7, #4]
 800331a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	1c5a      	adds	r2, r3, #1
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	601a      	str	r2, [r3, #0]
}
 8003326:	bf00      	nop
 8003328:	3714      	adds	r7, #20
 800332a:	46bd      	mov	sp, r7
 800332c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003330:	4770      	bx	lr

08003332 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003332:	b480      	push	{r7}
 8003334:	b085      	sub	sp, #20
 8003336:	af00      	add	r7, sp, #0
 8003338:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	691b      	ldr	r3, [r3, #16]
 800333e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	687a      	ldr	r2, [r7, #4]
 8003346:	6892      	ldr	r2, [r2, #8]
 8003348:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	687a      	ldr	r2, [r7, #4]
 8003350:	6852      	ldr	r2, [r2, #4]
 8003352:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	687a      	ldr	r2, [r7, #4]
 800335a:	429a      	cmp	r2, r3
 800335c:	d103      	bne.n	8003366 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	689a      	ldr	r2, [r3, #8]
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2200      	movs	r2, #0
 800336a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	1e5a      	subs	r2, r3, #1
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
}
 800337a:	4618      	mov	r0, r3
 800337c:	3714      	adds	r7, #20
 800337e:	46bd      	mov	sp, r7
 8003380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003384:	4770      	bx	lr

08003386 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003386:	b580      	push	{r7, lr}
 8003388:	b08e      	sub	sp, #56	; 0x38
 800338a:	af04      	add	r7, sp, #16
 800338c:	60f8      	str	r0, [r7, #12]
 800338e:	60b9      	str	r1, [r7, #8]
 8003390:	607a      	str	r2, [r7, #4]
 8003392:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003394:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003396:	2b00      	cmp	r3, #0
 8003398:	d10a      	bne.n	80033b0 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800339a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800339e:	f383 8811 	msr	BASEPRI, r3
 80033a2:	f3bf 8f6f 	isb	sy
 80033a6:	f3bf 8f4f 	dsb	sy
 80033aa:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80033ac:	bf00      	nop
 80033ae:	e7fe      	b.n	80033ae <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80033b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d10a      	bne.n	80033cc <xTaskCreateStatic+0x46>
	__asm volatile
 80033b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033ba:	f383 8811 	msr	BASEPRI, r3
 80033be:	f3bf 8f6f 	isb	sy
 80033c2:	f3bf 8f4f 	dsb	sy
 80033c6:	61fb      	str	r3, [r7, #28]
}
 80033c8:	bf00      	nop
 80033ca:	e7fe      	b.n	80033ca <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80033cc:	2354      	movs	r3, #84	; 0x54
 80033ce:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80033d0:	693b      	ldr	r3, [r7, #16]
 80033d2:	2b54      	cmp	r3, #84	; 0x54
 80033d4:	d00a      	beq.n	80033ec <xTaskCreateStatic+0x66>
	__asm volatile
 80033d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033da:	f383 8811 	msr	BASEPRI, r3
 80033de:	f3bf 8f6f 	isb	sy
 80033e2:	f3bf 8f4f 	dsb	sy
 80033e6:	61bb      	str	r3, [r7, #24]
}
 80033e8:	bf00      	nop
 80033ea:	e7fe      	b.n	80033ea <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80033ec:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80033ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d01e      	beq.n	8003432 <xTaskCreateStatic+0xac>
 80033f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d01b      	beq.n	8003432 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80033fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033fc:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80033fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003400:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003402:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003406:	2202      	movs	r2, #2
 8003408:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800340c:	2300      	movs	r3, #0
 800340e:	9303      	str	r3, [sp, #12]
 8003410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003412:	9302      	str	r3, [sp, #8]
 8003414:	f107 0314 	add.w	r3, r7, #20
 8003418:	9301      	str	r3, [sp, #4]
 800341a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800341c:	9300      	str	r3, [sp, #0]
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	687a      	ldr	r2, [r7, #4]
 8003422:	68b9      	ldr	r1, [r7, #8]
 8003424:	68f8      	ldr	r0, [r7, #12]
 8003426:	f000 f850 	bl	80034ca <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800342a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800342c:	f000 f8d4 	bl	80035d8 <prvAddNewTaskToReadyList>
 8003430:	e001      	b.n	8003436 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003432:	2300      	movs	r3, #0
 8003434:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003436:	697b      	ldr	r3, [r7, #20]
	}
 8003438:	4618      	mov	r0, r3
 800343a:	3728      	adds	r7, #40	; 0x28
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}

08003440 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003440:	b580      	push	{r7, lr}
 8003442:	b08c      	sub	sp, #48	; 0x30
 8003444:	af04      	add	r7, sp, #16
 8003446:	60f8      	str	r0, [r7, #12]
 8003448:	60b9      	str	r1, [r7, #8]
 800344a:	603b      	str	r3, [r7, #0]
 800344c:	4613      	mov	r3, r2
 800344e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003450:	88fb      	ldrh	r3, [r7, #6]
 8003452:	009b      	lsls	r3, r3, #2
 8003454:	4618      	mov	r0, r3
 8003456:	f000 fec7 	bl	80041e8 <pvPortMalloc>
 800345a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d00e      	beq.n	8003480 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003462:	2054      	movs	r0, #84	; 0x54
 8003464:	f000 fec0 	bl	80041e8 <pvPortMalloc>
 8003468:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800346a:	69fb      	ldr	r3, [r7, #28]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d003      	beq.n	8003478 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003470:	69fb      	ldr	r3, [r7, #28]
 8003472:	697a      	ldr	r2, [r7, #20]
 8003474:	631a      	str	r2, [r3, #48]	; 0x30
 8003476:	e005      	b.n	8003484 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003478:	6978      	ldr	r0, [r7, #20]
 800347a:	f000 ff81 	bl	8004380 <vPortFree>
 800347e:	e001      	b.n	8003484 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003480:	2300      	movs	r3, #0
 8003482:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003484:	69fb      	ldr	r3, [r7, #28]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d017      	beq.n	80034ba <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800348a:	69fb      	ldr	r3, [r7, #28]
 800348c:	2200      	movs	r2, #0
 800348e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003492:	88fa      	ldrh	r2, [r7, #6]
 8003494:	2300      	movs	r3, #0
 8003496:	9303      	str	r3, [sp, #12]
 8003498:	69fb      	ldr	r3, [r7, #28]
 800349a:	9302      	str	r3, [sp, #8]
 800349c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800349e:	9301      	str	r3, [sp, #4]
 80034a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034a2:	9300      	str	r3, [sp, #0]
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	68b9      	ldr	r1, [r7, #8]
 80034a8:	68f8      	ldr	r0, [r7, #12]
 80034aa:	f000 f80e 	bl	80034ca <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80034ae:	69f8      	ldr	r0, [r7, #28]
 80034b0:	f000 f892 	bl	80035d8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80034b4:	2301      	movs	r3, #1
 80034b6:	61bb      	str	r3, [r7, #24]
 80034b8:	e002      	b.n	80034c0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80034ba:	f04f 33ff 	mov.w	r3, #4294967295
 80034be:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80034c0:	69bb      	ldr	r3, [r7, #24]
	}
 80034c2:	4618      	mov	r0, r3
 80034c4:	3720      	adds	r7, #32
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}

080034ca <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80034ca:	b580      	push	{r7, lr}
 80034cc:	b088      	sub	sp, #32
 80034ce:	af00      	add	r7, sp, #0
 80034d0:	60f8      	str	r0, [r7, #12]
 80034d2:	60b9      	str	r1, [r7, #8]
 80034d4:	607a      	str	r2, [r7, #4]
 80034d6:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80034d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80034e2:	3b01      	subs	r3, #1
 80034e4:	009b      	lsls	r3, r3, #2
 80034e6:	4413      	add	r3, r2
 80034e8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80034ea:	69bb      	ldr	r3, [r7, #24]
 80034ec:	f023 0307 	bic.w	r3, r3, #7
 80034f0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80034f2:	69bb      	ldr	r3, [r7, #24]
 80034f4:	f003 0307 	and.w	r3, r3, #7
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d00a      	beq.n	8003512 <prvInitialiseNewTask+0x48>
	__asm volatile
 80034fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003500:	f383 8811 	msr	BASEPRI, r3
 8003504:	f3bf 8f6f 	isb	sy
 8003508:	f3bf 8f4f 	dsb	sy
 800350c:	617b      	str	r3, [r7, #20]
}
 800350e:	bf00      	nop
 8003510:	e7fe      	b.n	8003510 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003512:	68bb      	ldr	r3, [r7, #8]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d01f      	beq.n	8003558 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003518:	2300      	movs	r3, #0
 800351a:	61fb      	str	r3, [r7, #28]
 800351c:	e012      	b.n	8003544 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800351e:	68ba      	ldr	r2, [r7, #8]
 8003520:	69fb      	ldr	r3, [r7, #28]
 8003522:	4413      	add	r3, r2
 8003524:	7819      	ldrb	r1, [r3, #0]
 8003526:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003528:	69fb      	ldr	r3, [r7, #28]
 800352a:	4413      	add	r3, r2
 800352c:	3334      	adds	r3, #52	; 0x34
 800352e:	460a      	mov	r2, r1
 8003530:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003532:	68ba      	ldr	r2, [r7, #8]
 8003534:	69fb      	ldr	r3, [r7, #28]
 8003536:	4413      	add	r3, r2
 8003538:	781b      	ldrb	r3, [r3, #0]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d006      	beq.n	800354c <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800353e:	69fb      	ldr	r3, [r7, #28]
 8003540:	3301      	adds	r3, #1
 8003542:	61fb      	str	r3, [r7, #28]
 8003544:	69fb      	ldr	r3, [r7, #28]
 8003546:	2b0f      	cmp	r3, #15
 8003548:	d9e9      	bls.n	800351e <prvInitialiseNewTask+0x54>
 800354a:	e000      	b.n	800354e <prvInitialiseNewTask+0x84>
			{
				break;
 800354c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800354e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003550:	2200      	movs	r2, #0
 8003552:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003556:	e003      	b.n	8003560 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800355a:	2200      	movs	r2, #0
 800355c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003562:	2b06      	cmp	r3, #6
 8003564:	d901      	bls.n	800356a <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003566:	2306      	movs	r3, #6
 8003568:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800356a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800356c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800356e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003572:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003574:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003578:	2200      	movs	r2, #0
 800357a:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800357c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800357e:	3304      	adds	r3, #4
 8003580:	4618      	mov	r0, r3
 8003582:	f7ff fe6c 	bl	800325e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003588:	3318      	adds	r3, #24
 800358a:	4618      	mov	r0, r3
 800358c:	f7ff fe67 	bl	800325e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003592:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003594:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003598:	f1c3 0207 	rsb	r2, r3, #7
 800359c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800359e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80035a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035a4:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80035a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035a8:	2200      	movs	r2, #0
 80035aa:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80035ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035ae:	2200      	movs	r2, #0
 80035b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80035b4:	683a      	ldr	r2, [r7, #0]
 80035b6:	68f9      	ldr	r1, [r7, #12]
 80035b8:	69b8      	ldr	r0, [r7, #24]
 80035ba:	f000 fc05 	bl	8003dc8 <pxPortInitialiseStack>
 80035be:	4602      	mov	r2, r0
 80035c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035c2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80035c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d002      	beq.n	80035d0 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80035ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035ce:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80035d0:	bf00      	nop
 80035d2:	3720      	adds	r7, #32
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}

080035d8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b082      	sub	sp, #8
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80035e0:	f000 fd20 	bl	8004024 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80035e4:	4b2a      	ldr	r3, [pc, #168]	; (8003690 <prvAddNewTaskToReadyList+0xb8>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	3301      	adds	r3, #1
 80035ea:	4a29      	ldr	r2, [pc, #164]	; (8003690 <prvAddNewTaskToReadyList+0xb8>)
 80035ec:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80035ee:	4b29      	ldr	r3, [pc, #164]	; (8003694 <prvAddNewTaskToReadyList+0xbc>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d109      	bne.n	800360a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80035f6:	4a27      	ldr	r2, [pc, #156]	; (8003694 <prvAddNewTaskToReadyList+0xbc>)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80035fc:	4b24      	ldr	r3, [pc, #144]	; (8003690 <prvAddNewTaskToReadyList+0xb8>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	2b01      	cmp	r3, #1
 8003602:	d110      	bne.n	8003626 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003604:	f000 fabc 	bl	8003b80 <prvInitialiseTaskLists>
 8003608:	e00d      	b.n	8003626 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800360a:	4b23      	ldr	r3, [pc, #140]	; (8003698 <prvAddNewTaskToReadyList+0xc0>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d109      	bne.n	8003626 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003612:	4b20      	ldr	r3, [pc, #128]	; (8003694 <prvAddNewTaskToReadyList+0xbc>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800361c:	429a      	cmp	r2, r3
 800361e:	d802      	bhi.n	8003626 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003620:	4a1c      	ldr	r2, [pc, #112]	; (8003694 <prvAddNewTaskToReadyList+0xbc>)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003626:	4b1d      	ldr	r3, [pc, #116]	; (800369c <prvAddNewTaskToReadyList+0xc4>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	3301      	adds	r3, #1
 800362c:	4a1b      	ldr	r2, [pc, #108]	; (800369c <prvAddNewTaskToReadyList+0xc4>)
 800362e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003634:	2201      	movs	r2, #1
 8003636:	409a      	lsls	r2, r3
 8003638:	4b19      	ldr	r3, [pc, #100]	; (80036a0 <prvAddNewTaskToReadyList+0xc8>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4313      	orrs	r3, r2
 800363e:	4a18      	ldr	r2, [pc, #96]	; (80036a0 <prvAddNewTaskToReadyList+0xc8>)
 8003640:	6013      	str	r3, [r2, #0]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003646:	4613      	mov	r3, r2
 8003648:	009b      	lsls	r3, r3, #2
 800364a:	4413      	add	r3, r2
 800364c:	009b      	lsls	r3, r3, #2
 800364e:	4a15      	ldr	r2, [pc, #84]	; (80036a4 <prvAddNewTaskToReadyList+0xcc>)
 8003650:	441a      	add	r2, r3
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	3304      	adds	r3, #4
 8003656:	4619      	mov	r1, r3
 8003658:	4610      	mov	r0, r2
 800365a:	f7ff fe0d 	bl	8003278 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800365e:	f000 fd11 	bl	8004084 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003662:	4b0d      	ldr	r3, [pc, #52]	; (8003698 <prvAddNewTaskToReadyList+0xc0>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d00e      	beq.n	8003688 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800366a:	4b0a      	ldr	r3, [pc, #40]	; (8003694 <prvAddNewTaskToReadyList+0xbc>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003674:	429a      	cmp	r2, r3
 8003676:	d207      	bcs.n	8003688 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003678:	4b0b      	ldr	r3, [pc, #44]	; (80036a8 <prvAddNewTaskToReadyList+0xd0>)
 800367a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800367e:	601a      	str	r2, [r3, #0]
 8003680:	f3bf 8f4f 	dsb	sy
 8003684:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003688:	bf00      	nop
 800368a:	3708      	adds	r7, #8
 800368c:	46bd      	mov	sp, r7
 800368e:	bd80      	pop	{r7, pc}
 8003690:	200004ec 	.word	0x200004ec
 8003694:	200003ec 	.word	0x200003ec
 8003698:	200004f8 	.word	0x200004f8
 800369c:	20000508 	.word	0x20000508
 80036a0:	200004f4 	.word	0x200004f4
 80036a4:	200003f0 	.word	0x200003f0
 80036a8:	e000ed04 	.word	0xe000ed04

080036ac <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b084      	sub	sp, #16
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80036b4:	2300      	movs	r3, #0
 80036b6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d017      	beq.n	80036ee <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80036be:	4b13      	ldr	r3, [pc, #76]	; (800370c <vTaskDelay+0x60>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d00a      	beq.n	80036dc <vTaskDelay+0x30>
	__asm volatile
 80036c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036ca:	f383 8811 	msr	BASEPRI, r3
 80036ce:	f3bf 8f6f 	isb	sy
 80036d2:	f3bf 8f4f 	dsb	sy
 80036d6:	60bb      	str	r3, [r7, #8]
}
 80036d8:	bf00      	nop
 80036da:	e7fe      	b.n	80036da <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80036dc:	f000 f87a 	bl	80037d4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80036e0:	2100      	movs	r1, #0
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f000 fb0a 	bl	8003cfc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80036e8:	f000 f882 	bl	80037f0 <xTaskResumeAll>
 80036ec:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d107      	bne.n	8003704 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80036f4:	4b06      	ldr	r3, [pc, #24]	; (8003710 <vTaskDelay+0x64>)
 80036f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80036fa:	601a      	str	r2, [r3, #0]
 80036fc:	f3bf 8f4f 	dsb	sy
 8003700:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003704:	bf00      	nop
 8003706:	3710      	adds	r7, #16
 8003708:	46bd      	mov	sp, r7
 800370a:	bd80      	pop	{r7, pc}
 800370c:	20000514 	.word	0x20000514
 8003710:	e000ed04 	.word	0xe000ed04

08003714 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b08a      	sub	sp, #40	; 0x28
 8003718:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800371a:	2300      	movs	r3, #0
 800371c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800371e:	2300      	movs	r3, #0
 8003720:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003722:	463a      	mov	r2, r7
 8003724:	1d39      	adds	r1, r7, #4
 8003726:	f107 0308 	add.w	r3, r7, #8
 800372a:	4618      	mov	r0, r3
 800372c:	f7fc fed6 	bl	80004dc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003730:	6839      	ldr	r1, [r7, #0]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	68ba      	ldr	r2, [r7, #8]
 8003736:	9202      	str	r2, [sp, #8]
 8003738:	9301      	str	r3, [sp, #4]
 800373a:	2300      	movs	r3, #0
 800373c:	9300      	str	r3, [sp, #0]
 800373e:	2300      	movs	r3, #0
 8003740:	460a      	mov	r2, r1
 8003742:	491e      	ldr	r1, [pc, #120]	; (80037bc <vTaskStartScheduler+0xa8>)
 8003744:	481e      	ldr	r0, [pc, #120]	; (80037c0 <vTaskStartScheduler+0xac>)
 8003746:	f7ff fe1e 	bl	8003386 <xTaskCreateStatic>
 800374a:	4603      	mov	r3, r0
 800374c:	4a1d      	ldr	r2, [pc, #116]	; (80037c4 <vTaskStartScheduler+0xb0>)
 800374e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003750:	4b1c      	ldr	r3, [pc, #112]	; (80037c4 <vTaskStartScheduler+0xb0>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d002      	beq.n	800375e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003758:	2301      	movs	r3, #1
 800375a:	617b      	str	r3, [r7, #20]
 800375c:	e001      	b.n	8003762 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800375e:	2300      	movs	r3, #0
 8003760:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	2b01      	cmp	r3, #1
 8003766:	d116      	bne.n	8003796 <vTaskStartScheduler+0x82>
	__asm volatile
 8003768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800376c:	f383 8811 	msr	BASEPRI, r3
 8003770:	f3bf 8f6f 	isb	sy
 8003774:	f3bf 8f4f 	dsb	sy
 8003778:	613b      	str	r3, [r7, #16]
}
 800377a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800377c:	4b12      	ldr	r3, [pc, #72]	; (80037c8 <vTaskStartScheduler+0xb4>)
 800377e:	f04f 32ff 	mov.w	r2, #4294967295
 8003782:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003784:	4b11      	ldr	r3, [pc, #68]	; (80037cc <vTaskStartScheduler+0xb8>)
 8003786:	2201      	movs	r2, #1
 8003788:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800378a:	4b11      	ldr	r3, [pc, #68]	; (80037d0 <vTaskStartScheduler+0xbc>)
 800378c:	2200      	movs	r2, #0
 800378e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003790:	f000 fba6 	bl	8003ee0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003794:	e00e      	b.n	80037b4 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003796:	697b      	ldr	r3, [r7, #20]
 8003798:	f1b3 3fff 	cmp.w	r3, #4294967295
 800379c:	d10a      	bne.n	80037b4 <vTaskStartScheduler+0xa0>
	__asm volatile
 800379e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037a2:	f383 8811 	msr	BASEPRI, r3
 80037a6:	f3bf 8f6f 	isb	sy
 80037aa:	f3bf 8f4f 	dsb	sy
 80037ae:	60fb      	str	r3, [r7, #12]
}
 80037b0:	bf00      	nop
 80037b2:	e7fe      	b.n	80037b2 <vTaskStartScheduler+0x9e>
}
 80037b4:	bf00      	nop
 80037b6:	3718      	adds	r7, #24
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}
 80037bc:	080046cc 	.word	0x080046cc
 80037c0:	08003b51 	.word	0x08003b51
 80037c4:	20000510 	.word	0x20000510
 80037c8:	2000050c 	.word	0x2000050c
 80037cc:	200004f8 	.word	0x200004f8
 80037d0:	200004f0 	.word	0x200004f0

080037d4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80037d4:	b480      	push	{r7}
 80037d6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80037d8:	4b04      	ldr	r3, [pc, #16]	; (80037ec <vTaskSuspendAll+0x18>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	3301      	adds	r3, #1
 80037de:	4a03      	ldr	r2, [pc, #12]	; (80037ec <vTaskSuspendAll+0x18>)
 80037e0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80037e2:	bf00      	nop
 80037e4:	46bd      	mov	sp, r7
 80037e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ea:	4770      	bx	lr
 80037ec:	20000514 	.word	0x20000514

080037f0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b084      	sub	sp, #16
 80037f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80037f6:	2300      	movs	r3, #0
 80037f8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80037fa:	2300      	movs	r3, #0
 80037fc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80037fe:	4b41      	ldr	r3, [pc, #260]	; (8003904 <xTaskResumeAll+0x114>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d10a      	bne.n	800381c <xTaskResumeAll+0x2c>
	__asm volatile
 8003806:	f04f 0350 	mov.w	r3, #80	; 0x50
 800380a:	f383 8811 	msr	BASEPRI, r3
 800380e:	f3bf 8f6f 	isb	sy
 8003812:	f3bf 8f4f 	dsb	sy
 8003816:	603b      	str	r3, [r7, #0]
}
 8003818:	bf00      	nop
 800381a:	e7fe      	b.n	800381a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800381c:	f000 fc02 	bl	8004024 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003820:	4b38      	ldr	r3, [pc, #224]	; (8003904 <xTaskResumeAll+0x114>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	3b01      	subs	r3, #1
 8003826:	4a37      	ldr	r2, [pc, #220]	; (8003904 <xTaskResumeAll+0x114>)
 8003828:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800382a:	4b36      	ldr	r3, [pc, #216]	; (8003904 <xTaskResumeAll+0x114>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d161      	bne.n	80038f6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003832:	4b35      	ldr	r3, [pc, #212]	; (8003908 <xTaskResumeAll+0x118>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d05d      	beq.n	80038f6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800383a:	e02e      	b.n	800389a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800383c:	4b33      	ldr	r3, [pc, #204]	; (800390c <xTaskResumeAll+0x11c>)
 800383e:	68db      	ldr	r3, [r3, #12]
 8003840:	68db      	ldr	r3, [r3, #12]
 8003842:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	3318      	adds	r3, #24
 8003848:	4618      	mov	r0, r3
 800384a:	f7ff fd72 	bl	8003332 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	3304      	adds	r3, #4
 8003852:	4618      	mov	r0, r3
 8003854:	f7ff fd6d 	bl	8003332 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800385c:	2201      	movs	r2, #1
 800385e:	409a      	lsls	r2, r3
 8003860:	4b2b      	ldr	r3, [pc, #172]	; (8003910 <xTaskResumeAll+0x120>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4313      	orrs	r3, r2
 8003866:	4a2a      	ldr	r2, [pc, #168]	; (8003910 <xTaskResumeAll+0x120>)
 8003868:	6013      	str	r3, [r2, #0]
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800386e:	4613      	mov	r3, r2
 8003870:	009b      	lsls	r3, r3, #2
 8003872:	4413      	add	r3, r2
 8003874:	009b      	lsls	r3, r3, #2
 8003876:	4a27      	ldr	r2, [pc, #156]	; (8003914 <xTaskResumeAll+0x124>)
 8003878:	441a      	add	r2, r3
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	3304      	adds	r3, #4
 800387e:	4619      	mov	r1, r3
 8003880:	4610      	mov	r0, r2
 8003882:	f7ff fcf9 	bl	8003278 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800388a:	4b23      	ldr	r3, [pc, #140]	; (8003918 <xTaskResumeAll+0x128>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003890:	429a      	cmp	r2, r3
 8003892:	d302      	bcc.n	800389a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8003894:	4b21      	ldr	r3, [pc, #132]	; (800391c <xTaskResumeAll+0x12c>)
 8003896:	2201      	movs	r2, #1
 8003898:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800389a:	4b1c      	ldr	r3, [pc, #112]	; (800390c <xTaskResumeAll+0x11c>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d1cc      	bne.n	800383c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d001      	beq.n	80038ac <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80038a8:	f000 fa08 	bl	8003cbc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80038ac:	4b1c      	ldr	r3, [pc, #112]	; (8003920 <xTaskResumeAll+0x130>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d010      	beq.n	80038da <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80038b8:	f000 f836 	bl	8003928 <xTaskIncrementTick>
 80038bc:	4603      	mov	r3, r0
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d002      	beq.n	80038c8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80038c2:	4b16      	ldr	r3, [pc, #88]	; (800391c <xTaskResumeAll+0x12c>)
 80038c4:	2201      	movs	r2, #1
 80038c6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	3b01      	subs	r3, #1
 80038cc:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d1f1      	bne.n	80038b8 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80038d4:	4b12      	ldr	r3, [pc, #72]	; (8003920 <xTaskResumeAll+0x130>)
 80038d6:	2200      	movs	r2, #0
 80038d8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80038da:	4b10      	ldr	r3, [pc, #64]	; (800391c <xTaskResumeAll+0x12c>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d009      	beq.n	80038f6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80038e2:	2301      	movs	r3, #1
 80038e4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80038e6:	4b0f      	ldr	r3, [pc, #60]	; (8003924 <xTaskResumeAll+0x134>)
 80038e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038ec:	601a      	str	r2, [r3, #0]
 80038ee:	f3bf 8f4f 	dsb	sy
 80038f2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80038f6:	f000 fbc5 	bl	8004084 <vPortExitCritical>

	return xAlreadyYielded;
 80038fa:	68bb      	ldr	r3, [r7, #8]
}
 80038fc:	4618      	mov	r0, r3
 80038fe:	3710      	adds	r7, #16
 8003900:	46bd      	mov	sp, r7
 8003902:	bd80      	pop	{r7, pc}
 8003904:	20000514 	.word	0x20000514
 8003908:	200004ec 	.word	0x200004ec
 800390c:	200004ac 	.word	0x200004ac
 8003910:	200004f4 	.word	0x200004f4
 8003914:	200003f0 	.word	0x200003f0
 8003918:	200003ec 	.word	0x200003ec
 800391c:	20000500 	.word	0x20000500
 8003920:	200004fc 	.word	0x200004fc
 8003924:	e000ed04 	.word	0xe000ed04

08003928 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b086      	sub	sp, #24
 800392c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800392e:	2300      	movs	r3, #0
 8003930:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003932:	4b4e      	ldr	r3, [pc, #312]	; (8003a6c <xTaskIncrementTick+0x144>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	2b00      	cmp	r3, #0
 8003938:	f040 808e 	bne.w	8003a58 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800393c:	4b4c      	ldr	r3, [pc, #304]	; (8003a70 <xTaskIncrementTick+0x148>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	3301      	adds	r3, #1
 8003942:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003944:	4a4a      	ldr	r2, [pc, #296]	; (8003a70 <xTaskIncrementTick+0x148>)
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d120      	bne.n	8003992 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003950:	4b48      	ldr	r3, [pc, #288]	; (8003a74 <xTaskIncrementTick+0x14c>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d00a      	beq.n	8003970 <xTaskIncrementTick+0x48>
	__asm volatile
 800395a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800395e:	f383 8811 	msr	BASEPRI, r3
 8003962:	f3bf 8f6f 	isb	sy
 8003966:	f3bf 8f4f 	dsb	sy
 800396a:	603b      	str	r3, [r7, #0]
}
 800396c:	bf00      	nop
 800396e:	e7fe      	b.n	800396e <xTaskIncrementTick+0x46>
 8003970:	4b40      	ldr	r3, [pc, #256]	; (8003a74 <xTaskIncrementTick+0x14c>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	60fb      	str	r3, [r7, #12]
 8003976:	4b40      	ldr	r3, [pc, #256]	; (8003a78 <xTaskIncrementTick+0x150>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a3e      	ldr	r2, [pc, #248]	; (8003a74 <xTaskIncrementTick+0x14c>)
 800397c:	6013      	str	r3, [r2, #0]
 800397e:	4a3e      	ldr	r2, [pc, #248]	; (8003a78 <xTaskIncrementTick+0x150>)
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	6013      	str	r3, [r2, #0]
 8003984:	4b3d      	ldr	r3, [pc, #244]	; (8003a7c <xTaskIncrementTick+0x154>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	3301      	adds	r3, #1
 800398a:	4a3c      	ldr	r2, [pc, #240]	; (8003a7c <xTaskIncrementTick+0x154>)
 800398c:	6013      	str	r3, [r2, #0]
 800398e:	f000 f995 	bl	8003cbc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003992:	4b3b      	ldr	r3, [pc, #236]	; (8003a80 <xTaskIncrementTick+0x158>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	693a      	ldr	r2, [r7, #16]
 8003998:	429a      	cmp	r2, r3
 800399a:	d348      	bcc.n	8003a2e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800399c:	4b35      	ldr	r3, [pc, #212]	; (8003a74 <xTaskIncrementTick+0x14c>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d104      	bne.n	80039b0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80039a6:	4b36      	ldr	r3, [pc, #216]	; (8003a80 <xTaskIncrementTick+0x158>)
 80039a8:	f04f 32ff 	mov.w	r2, #4294967295
 80039ac:	601a      	str	r2, [r3, #0]
					break;
 80039ae:	e03e      	b.n	8003a2e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80039b0:	4b30      	ldr	r3, [pc, #192]	; (8003a74 <xTaskIncrementTick+0x14c>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	68db      	ldr	r3, [r3, #12]
 80039b6:	68db      	ldr	r3, [r3, #12]
 80039b8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80039c0:	693a      	ldr	r2, [r7, #16]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	429a      	cmp	r2, r3
 80039c6:	d203      	bcs.n	80039d0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80039c8:	4a2d      	ldr	r2, [pc, #180]	; (8003a80 <xTaskIncrementTick+0x158>)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80039ce:	e02e      	b.n	8003a2e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	3304      	adds	r3, #4
 80039d4:	4618      	mov	r0, r3
 80039d6:	f7ff fcac 	bl	8003332 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d004      	beq.n	80039ec <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	3318      	adds	r3, #24
 80039e6:	4618      	mov	r0, r3
 80039e8:	f7ff fca3 	bl	8003332 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039f0:	2201      	movs	r2, #1
 80039f2:	409a      	lsls	r2, r3
 80039f4:	4b23      	ldr	r3, [pc, #140]	; (8003a84 <xTaskIncrementTick+0x15c>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4313      	orrs	r3, r2
 80039fa:	4a22      	ldr	r2, [pc, #136]	; (8003a84 <xTaskIncrementTick+0x15c>)
 80039fc:	6013      	str	r3, [r2, #0]
 80039fe:	68bb      	ldr	r3, [r7, #8]
 8003a00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a02:	4613      	mov	r3, r2
 8003a04:	009b      	lsls	r3, r3, #2
 8003a06:	4413      	add	r3, r2
 8003a08:	009b      	lsls	r3, r3, #2
 8003a0a:	4a1f      	ldr	r2, [pc, #124]	; (8003a88 <xTaskIncrementTick+0x160>)
 8003a0c:	441a      	add	r2, r3
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	3304      	adds	r3, #4
 8003a12:	4619      	mov	r1, r3
 8003a14:	4610      	mov	r0, r2
 8003a16:	f7ff fc2f 	bl	8003278 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a1e:	4b1b      	ldr	r3, [pc, #108]	; (8003a8c <xTaskIncrementTick+0x164>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a24:	429a      	cmp	r2, r3
 8003a26:	d3b9      	bcc.n	800399c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003a2c:	e7b6      	b.n	800399c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003a2e:	4b17      	ldr	r3, [pc, #92]	; (8003a8c <xTaskIncrementTick+0x164>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a34:	4914      	ldr	r1, [pc, #80]	; (8003a88 <xTaskIncrementTick+0x160>)
 8003a36:	4613      	mov	r3, r2
 8003a38:	009b      	lsls	r3, r3, #2
 8003a3a:	4413      	add	r3, r2
 8003a3c:	009b      	lsls	r3, r3, #2
 8003a3e:	440b      	add	r3, r1
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	2b01      	cmp	r3, #1
 8003a44:	d901      	bls.n	8003a4a <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8003a46:	2301      	movs	r3, #1
 8003a48:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003a4a:	4b11      	ldr	r3, [pc, #68]	; (8003a90 <xTaskIncrementTick+0x168>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d007      	beq.n	8003a62 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8003a52:	2301      	movs	r3, #1
 8003a54:	617b      	str	r3, [r7, #20]
 8003a56:	e004      	b.n	8003a62 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003a58:	4b0e      	ldr	r3, [pc, #56]	; (8003a94 <xTaskIncrementTick+0x16c>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	3301      	adds	r3, #1
 8003a5e:	4a0d      	ldr	r2, [pc, #52]	; (8003a94 <xTaskIncrementTick+0x16c>)
 8003a60:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003a62:	697b      	ldr	r3, [r7, #20]
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	3718      	adds	r7, #24
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	bd80      	pop	{r7, pc}
 8003a6c:	20000514 	.word	0x20000514
 8003a70:	200004f0 	.word	0x200004f0
 8003a74:	200004a4 	.word	0x200004a4
 8003a78:	200004a8 	.word	0x200004a8
 8003a7c:	20000504 	.word	0x20000504
 8003a80:	2000050c 	.word	0x2000050c
 8003a84:	200004f4 	.word	0x200004f4
 8003a88:	200003f0 	.word	0x200003f0
 8003a8c:	200003ec 	.word	0x200003ec
 8003a90:	20000500 	.word	0x20000500
 8003a94:	200004fc 	.word	0x200004fc

08003a98 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b087      	sub	sp, #28
 8003a9c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003a9e:	4b27      	ldr	r3, [pc, #156]	; (8003b3c <vTaskSwitchContext+0xa4>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d003      	beq.n	8003aae <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003aa6:	4b26      	ldr	r3, [pc, #152]	; (8003b40 <vTaskSwitchContext+0xa8>)
 8003aa8:	2201      	movs	r2, #1
 8003aaa:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003aac:	e03f      	b.n	8003b2e <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8003aae:	4b24      	ldr	r3, [pc, #144]	; (8003b40 <vTaskSwitchContext+0xa8>)
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ab4:	4b23      	ldr	r3, [pc, #140]	; (8003b44 <vTaskSwitchContext+0xac>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	fab3 f383 	clz	r3, r3
 8003ac0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003ac2:	7afb      	ldrb	r3, [r7, #11]
 8003ac4:	f1c3 031f 	rsb	r3, r3, #31
 8003ac8:	617b      	str	r3, [r7, #20]
 8003aca:	491f      	ldr	r1, [pc, #124]	; (8003b48 <vTaskSwitchContext+0xb0>)
 8003acc:	697a      	ldr	r2, [r7, #20]
 8003ace:	4613      	mov	r3, r2
 8003ad0:	009b      	lsls	r3, r3, #2
 8003ad2:	4413      	add	r3, r2
 8003ad4:	009b      	lsls	r3, r3, #2
 8003ad6:	440b      	add	r3, r1
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d10a      	bne.n	8003af4 <vTaskSwitchContext+0x5c>
	__asm volatile
 8003ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ae2:	f383 8811 	msr	BASEPRI, r3
 8003ae6:	f3bf 8f6f 	isb	sy
 8003aea:	f3bf 8f4f 	dsb	sy
 8003aee:	607b      	str	r3, [r7, #4]
}
 8003af0:	bf00      	nop
 8003af2:	e7fe      	b.n	8003af2 <vTaskSwitchContext+0x5a>
 8003af4:	697a      	ldr	r2, [r7, #20]
 8003af6:	4613      	mov	r3, r2
 8003af8:	009b      	lsls	r3, r3, #2
 8003afa:	4413      	add	r3, r2
 8003afc:	009b      	lsls	r3, r3, #2
 8003afe:	4a12      	ldr	r2, [pc, #72]	; (8003b48 <vTaskSwitchContext+0xb0>)
 8003b00:	4413      	add	r3, r2
 8003b02:	613b      	str	r3, [r7, #16]
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	685a      	ldr	r2, [r3, #4]
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	605a      	str	r2, [r3, #4]
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	685a      	ldr	r2, [r3, #4]
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	3308      	adds	r3, #8
 8003b16:	429a      	cmp	r2, r3
 8003b18:	d104      	bne.n	8003b24 <vTaskSwitchContext+0x8c>
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	685a      	ldr	r2, [r3, #4]
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	605a      	str	r2, [r3, #4]
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	68db      	ldr	r3, [r3, #12]
 8003b2a:	4a08      	ldr	r2, [pc, #32]	; (8003b4c <vTaskSwitchContext+0xb4>)
 8003b2c:	6013      	str	r3, [r2, #0]
}
 8003b2e:	bf00      	nop
 8003b30:	371c      	adds	r7, #28
 8003b32:	46bd      	mov	sp, r7
 8003b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b38:	4770      	bx	lr
 8003b3a:	bf00      	nop
 8003b3c:	20000514 	.word	0x20000514
 8003b40:	20000500 	.word	0x20000500
 8003b44:	200004f4 	.word	0x200004f4
 8003b48:	200003f0 	.word	0x200003f0
 8003b4c:	200003ec 	.word	0x200003ec

08003b50 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b082      	sub	sp, #8
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003b58:	f000 f852 	bl	8003c00 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003b5c:	4b06      	ldr	r3, [pc, #24]	; (8003b78 <prvIdleTask+0x28>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	2b01      	cmp	r3, #1
 8003b62:	d9f9      	bls.n	8003b58 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003b64:	4b05      	ldr	r3, [pc, #20]	; (8003b7c <prvIdleTask+0x2c>)
 8003b66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b6a:	601a      	str	r2, [r3, #0]
 8003b6c:	f3bf 8f4f 	dsb	sy
 8003b70:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003b74:	e7f0      	b.n	8003b58 <prvIdleTask+0x8>
 8003b76:	bf00      	nop
 8003b78:	200003f0 	.word	0x200003f0
 8003b7c:	e000ed04 	.word	0xe000ed04

08003b80 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b082      	sub	sp, #8
 8003b84:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003b86:	2300      	movs	r3, #0
 8003b88:	607b      	str	r3, [r7, #4]
 8003b8a:	e00c      	b.n	8003ba6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003b8c:	687a      	ldr	r2, [r7, #4]
 8003b8e:	4613      	mov	r3, r2
 8003b90:	009b      	lsls	r3, r3, #2
 8003b92:	4413      	add	r3, r2
 8003b94:	009b      	lsls	r3, r3, #2
 8003b96:	4a12      	ldr	r2, [pc, #72]	; (8003be0 <prvInitialiseTaskLists+0x60>)
 8003b98:	4413      	add	r3, r2
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	f7ff fb3f 	bl	800321e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	3301      	adds	r3, #1
 8003ba4:	607b      	str	r3, [r7, #4]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2b06      	cmp	r3, #6
 8003baa:	d9ef      	bls.n	8003b8c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003bac:	480d      	ldr	r0, [pc, #52]	; (8003be4 <prvInitialiseTaskLists+0x64>)
 8003bae:	f7ff fb36 	bl	800321e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003bb2:	480d      	ldr	r0, [pc, #52]	; (8003be8 <prvInitialiseTaskLists+0x68>)
 8003bb4:	f7ff fb33 	bl	800321e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003bb8:	480c      	ldr	r0, [pc, #48]	; (8003bec <prvInitialiseTaskLists+0x6c>)
 8003bba:	f7ff fb30 	bl	800321e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003bbe:	480c      	ldr	r0, [pc, #48]	; (8003bf0 <prvInitialiseTaskLists+0x70>)
 8003bc0:	f7ff fb2d 	bl	800321e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003bc4:	480b      	ldr	r0, [pc, #44]	; (8003bf4 <prvInitialiseTaskLists+0x74>)
 8003bc6:	f7ff fb2a 	bl	800321e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003bca:	4b0b      	ldr	r3, [pc, #44]	; (8003bf8 <prvInitialiseTaskLists+0x78>)
 8003bcc:	4a05      	ldr	r2, [pc, #20]	; (8003be4 <prvInitialiseTaskLists+0x64>)
 8003bce:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003bd0:	4b0a      	ldr	r3, [pc, #40]	; (8003bfc <prvInitialiseTaskLists+0x7c>)
 8003bd2:	4a05      	ldr	r2, [pc, #20]	; (8003be8 <prvInitialiseTaskLists+0x68>)
 8003bd4:	601a      	str	r2, [r3, #0]
}
 8003bd6:	bf00      	nop
 8003bd8:	3708      	adds	r7, #8
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}
 8003bde:	bf00      	nop
 8003be0:	200003f0 	.word	0x200003f0
 8003be4:	2000047c 	.word	0x2000047c
 8003be8:	20000490 	.word	0x20000490
 8003bec:	200004ac 	.word	0x200004ac
 8003bf0:	200004c0 	.word	0x200004c0
 8003bf4:	200004d8 	.word	0x200004d8
 8003bf8:	200004a4 	.word	0x200004a4
 8003bfc:	200004a8 	.word	0x200004a8

08003c00 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b082      	sub	sp, #8
 8003c04:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003c06:	e019      	b.n	8003c3c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003c08:	f000 fa0c 	bl	8004024 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c0c:	4b10      	ldr	r3, [pc, #64]	; (8003c50 <prvCheckTasksWaitingTermination+0x50>)
 8003c0e:	68db      	ldr	r3, [r3, #12]
 8003c10:	68db      	ldr	r3, [r3, #12]
 8003c12:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	3304      	adds	r3, #4
 8003c18:	4618      	mov	r0, r3
 8003c1a:	f7ff fb8a 	bl	8003332 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003c1e:	4b0d      	ldr	r3, [pc, #52]	; (8003c54 <prvCheckTasksWaitingTermination+0x54>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	3b01      	subs	r3, #1
 8003c24:	4a0b      	ldr	r2, [pc, #44]	; (8003c54 <prvCheckTasksWaitingTermination+0x54>)
 8003c26:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003c28:	4b0b      	ldr	r3, [pc, #44]	; (8003c58 <prvCheckTasksWaitingTermination+0x58>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	3b01      	subs	r3, #1
 8003c2e:	4a0a      	ldr	r2, [pc, #40]	; (8003c58 <prvCheckTasksWaitingTermination+0x58>)
 8003c30:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003c32:	f000 fa27 	bl	8004084 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003c36:	6878      	ldr	r0, [r7, #4]
 8003c38:	f000 f810 	bl	8003c5c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003c3c:	4b06      	ldr	r3, [pc, #24]	; (8003c58 <prvCheckTasksWaitingTermination+0x58>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d1e1      	bne.n	8003c08 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003c44:	bf00      	nop
 8003c46:	bf00      	nop
 8003c48:	3708      	adds	r7, #8
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}
 8003c4e:	bf00      	nop
 8003c50:	200004c0 	.word	0x200004c0
 8003c54:	200004ec 	.word	0x200004ec
 8003c58:	200004d4 	.word	0x200004d4

08003c5c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b084      	sub	sp, #16
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d108      	bne.n	8003c80 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c72:	4618      	mov	r0, r3
 8003c74:	f000 fb84 	bl	8004380 <vPortFree>
				vPortFree( pxTCB );
 8003c78:	6878      	ldr	r0, [r7, #4]
 8003c7a:	f000 fb81 	bl	8004380 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003c7e:	e018      	b.n	8003cb2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003c86:	2b01      	cmp	r3, #1
 8003c88:	d103      	bne.n	8003c92 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003c8a:	6878      	ldr	r0, [r7, #4]
 8003c8c:	f000 fb78 	bl	8004380 <vPortFree>
	}
 8003c90:	e00f      	b.n	8003cb2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003c98:	2b02      	cmp	r3, #2
 8003c9a:	d00a      	beq.n	8003cb2 <prvDeleteTCB+0x56>
	__asm volatile
 8003c9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ca0:	f383 8811 	msr	BASEPRI, r3
 8003ca4:	f3bf 8f6f 	isb	sy
 8003ca8:	f3bf 8f4f 	dsb	sy
 8003cac:	60fb      	str	r3, [r7, #12]
}
 8003cae:	bf00      	nop
 8003cb0:	e7fe      	b.n	8003cb0 <prvDeleteTCB+0x54>
	}
 8003cb2:	bf00      	nop
 8003cb4:	3710      	adds	r7, #16
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}
	...

08003cbc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b083      	sub	sp, #12
 8003cc0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003cc2:	4b0c      	ldr	r3, [pc, #48]	; (8003cf4 <prvResetNextTaskUnblockTime+0x38>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d104      	bne.n	8003cd6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003ccc:	4b0a      	ldr	r3, [pc, #40]	; (8003cf8 <prvResetNextTaskUnblockTime+0x3c>)
 8003cce:	f04f 32ff 	mov.w	r2, #4294967295
 8003cd2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003cd4:	e008      	b.n	8003ce8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003cd6:	4b07      	ldr	r3, [pc, #28]	; (8003cf4 <prvResetNextTaskUnblockTime+0x38>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	68db      	ldr	r3, [r3, #12]
 8003cdc:	68db      	ldr	r3, [r3, #12]
 8003cde:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	4a04      	ldr	r2, [pc, #16]	; (8003cf8 <prvResetNextTaskUnblockTime+0x3c>)
 8003ce6:	6013      	str	r3, [r2, #0]
}
 8003ce8:	bf00      	nop
 8003cea:	370c      	adds	r7, #12
 8003cec:	46bd      	mov	sp, r7
 8003cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf2:	4770      	bx	lr
 8003cf4:	200004a4 	.word	0x200004a4
 8003cf8:	2000050c 	.word	0x2000050c

08003cfc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b084      	sub	sp, #16
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
 8003d04:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003d06:	4b29      	ldr	r3, [pc, #164]	; (8003dac <prvAddCurrentTaskToDelayedList+0xb0>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003d0c:	4b28      	ldr	r3, [pc, #160]	; (8003db0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	3304      	adds	r3, #4
 8003d12:	4618      	mov	r0, r3
 8003d14:	f7ff fb0d 	bl	8003332 <uxListRemove>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d10b      	bne.n	8003d36 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003d1e:	4b24      	ldr	r3, [pc, #144]	; (8003db0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d24:	2201      	movs	r2, #1
 8003d26:	fa02 f303 	lsl.w	r3, r2, r3
 8003d2a:	43da      	mvns	r2, r3
 8003d2c:	4b21      	ldr	r3, [pc, #132]	; (8003db4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4013      	ands	r3, r2
 8003d32:	4a20      	ldr	r2, [pc, #128]	; (8003db4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003d34:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d3c:	d10a      	bne.n	8003d54 <prvAddCurrentTaskToDelayedList+0x58>
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d007      	beq.n	8003d54 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003d44:	4b1a      	ldr	r3, [pc, #104]	; (8003db0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	3304      	adds	r3, #4
 8003d4a:	4619      	mov	r1, r3
 8003d4c:	481a      	ldr	r0, [pc, #104]	; (8003db8 <prvAddCurrentTaskToDelayedList+0xbc>)
 8003d4e:	f7ff fa93 	bl	8003278 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003d52:	e026      	b.n	8003da2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003d54:	68fa      	ldr	r2, [r7, #12]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	4413      	add	r3, r2
 8003d5a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003d5c:	4b14      	ldr	r3, [pc, #80]	; (8003db0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	68ba      	ldr	r2, [r7, #8]
 8003d62:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003d64:	68ba      	ldr	r2, [r7, #8]
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	429a      	cmp	r2, r3
 8003d6a:	d209      	bcs.n	8003d80 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003d6c:	4b13      	ldr	r3, [pc, #76]	; (8003dbc <prvAddCurrentTaskToDelayedList+0xc0>)
 8003d6e:	681a      	ldr	r2, [r3, #0]
 8003d70:	4b0f      	ldr	r3, [pc, #60]	; (8003db0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	3304      	adds	r3, #4
 8003d76:	4619      	mov	r1, r3
 8003d78:	4610      	mov	r0, r2
 8003d7a:	f7ff faa1 	bl	80032c0 <vListInsert>
}
 8003d7e:	e010      	b.n	8003da2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003d80:	4b0f      	ldr	r3, [pc, #60]	; (8003dc0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8003d82:	681a      	ldr	r2, [r3, #0]
 8003d84:	4b0a      	ldr	r3, [pc, #40]	; (8003db0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	3304      	adds	r3, #4
 8003d8a:	4619      	mov	r1, r3
 8003d8c:	4610      	mov	r0, r2
 8003d8e:	f7ff fa97 	bl	80032c0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003d92:	4b0c      	ldr	r3, [pc, #48]	; (8003dc4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	68ba      	ldr	r2, [r7, #8]
 8003d98:	429a      	cmp	r2, r3
 8003d9a:	d202      	bcs.n	8003da2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003d9c:	4a09      	ldr	r2, [pc, #36]	; (8003dc4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	6013      	str	r3, [r2, #0]
}
 8003da2:	bf00      	nop
 8003da4:	3710      	adds	r7, #16
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}
 8003daa:	bf00      	nop
 8003dac:	200004f0 	.word	0x200004f0
 8003db0:	200003ec 	.word	0x200003ec
 8003db4:	200004f4 	.word	0x200004f4
 8003db8:	200004d8 	.word	0x200004d8
 8003dbc:	200004a8 	.word	0x200004a8
 8003dc0:	200004a4 	.word	0x200004a4
 8003dc4:	2000050c 	.word	0x2000050c

08003dc8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003dc8:	b480      	push	{r7}
 8003dca:	b085      	sub	sp, #20
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	60f8      	str	r0, [r7, #12]
 8003dd0:	60b9      	str	r1, [r7, #8]
 8003dd2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	3b04      	subs	r3, #4
 8003dd8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003de0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	3b04      	subs	r3, #4
 8003de6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	f023 0201 	bic.w	r2, r3, #1
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	3b04      	subs	r3, #4
 8003df6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003df8:	4a0c      	ldr	r2, [pc, #48]	; (8003e2c <pxPortInitialiseStack+0x64>)
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	3b14      	subs	r3, #20
 8003e02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003e04:	687a      	ldr	r2, [r7, #4]
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	3b04      	subs	r3, #4
 8003e0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	f06f 0202 	mvn.w	r2, #2
 8003e16:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	3b20      	subs	r3, #32
 8003e1c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
}
 8003e20:	4618      	mov	r0, r3
 8003e22:	3714      	adds	r7, #20
 8003e24:	46bd      	mov	sp, r7
 8003e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2a:	4770      	bx	lr
 8003e2c:	08003e31 	.word	0x08003e31

08003e30 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003e30:	b480      	push	{r7}
 8003e32:	b085      	sub	sp, #20
 8003e34:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8003e36:	2300      	movs	r3, #0
 8003e38:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003e3a:	4b12      	ldr	r3, [pc, #72]	; (8003e84 <prvTaskExitError+0x54>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e42:	d00a      	beq.n	8003e5a <prvTaskExitError+0x2a>
	__asm volatile
 8003e44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e48:	f383 8811 	msr	BASEPRI, r3
 8003e4c:	f3bf 8f6f 	isb	sy
 8003e50:	f3bf 8f4f 	dsb	sy
 8003e54:	60fb      	str	r3, [r7, #12]
}
 8003e56:	bf00      	nop
 8003e58:	e7fe      	b.n	8003e58 <prvTaskExitError+0x28>
	__asm volatile
 8003e5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e5e:	f383 8811 	msr	BASEPRI, r3
 8003e62:	f3bf 8f6f 	isb	sy
 8003e66:	f3bf 8f4f 	dsb	sy
 8003e6a:	60bb      	str	r3, [r7, #8]
}
 8003e6c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003e6e:	bf00      	nop
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d0fc      	beq.n	8003e70 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003e76:	bf00      	nop
 8003e78:	bf00      	nop
 8003e7a:	3714      	adds	r7, #20
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e82:	4770      	bx	lr
 8003e84:	2000000c 	.word	0x2000000c
	...

08003e90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003e90:	4b07      	ldr	r3, [pc, #28]	; (8003eb0 <pxCurrentTCBConst2>)
 8003e92:	6819      	ldr	r1, [r3, #0]
 8003e94:	6808      	ldr	r0, [r1, #0]
 8003e96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e9a:	f380 8809 	msr	PSP, r0
 8003e9e:	f3bf 8f6f 	isb	sy
 8003ea2:	f04f 0000 	mov.w	r0, #0
 8003ea6:	f380 8811 	msr	BASEPRI, r0
 8003eaa:	4770      	bx	lr
 8003eac:	f3af 8000 	nop.w

08003eb0 <pxCurrentTCBConst2>:
 8003eb0:	200003ec 	.word	0x200003ec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003eb4:	bf00      	nop
 8003eb6:	bf00      	nop

08003eb8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003eb8:	4808      	ldr	r0, [pc, #32]	; (8003edc <prvPortStartFirstTask+0x24>)
 8003eba:	6800      	ldr	r0, [r0, #0]
 8003ebc:	6800      	ldr	r0, [r0, #0]
 8003ebe:	f380 8808 	msr	MSP, r0
 8003ec2:	f04f 0000 	mov.w	r0, #0
 8003ec6:	f380 8814 	msr	CONTROL, r0
 8003eca:	b662      	cpsie	i
 8003ecc:	b661      	cpsie	f
 8003ece:	f3bf 8f4f 	dsb	sy
 8003ed2:	f3bf 8f6f 	isb	sy
 8003ed6:	df00      	svc	0
 8003ed8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003eda:	bf00      	nop
 8003edc:	e000ed08 	.word	0xe000ed08

08003ee0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b086      	sub	sp, #24
 8003ee4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003ee6:	4b46      	ldr	r3, [pc, #280]	; (8004000 <xPortStartScheduler+0x120>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a46      	ldr	r2, [pc, #280]	; (8004004 <xPortStartScheduler+0x124>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d10a      	bne.n	8003f06 <xPortStartScheduler+0x26>
	__asm volatile
 8003ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ef4:	f383 8811 	msr	BASEPRI, r3
 8003ef8:	f3bf 8f6f 	isb	sy
 8003efc:	f3bf 8f4f 	dsb	sy
 8003f00:	613b      	str	r3, [r7, #16]
}
 8003f02:	bf00      	nop
 8003f04:	e7fe      	b.n	8003f04 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003f06:	4b3e      	ldr	r3, [pc, #248]	; (8004000 <xPortStartScheduler+0x120>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a3f      	ldr	r2, [pc, #252]	; (8004008 <xPortStartScheduler+0x128>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d10a      	bne.n	8003f26 <xPortStartScheduler+0x46>
	__asm volatile
 8003f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f14:	f383 8811 	msr	BASEPRI, r3
 8003f18:	f3bf 8f6f 	isb	sy
 8003f1c:	f3bf 8f4f 	dsb	sy
 8003f20:	60fb      	str	r3, [r7, #12]
}
 8003f22:	bf00      	nop
 8003f24:	e7fe      	b.n	8003f24 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003f26:	4b39      	ldr	r3, [pc, #228]	; (800400c <xPortStartScheduler+0x12c>)
 8003f28:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	781b      	ldrb	r3, [r3, #0]
 8003f2e:	b2db      	uxtb	r3, r3
 8003f30:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003f32:	697b      	ldr	r3, [r7, #20]
 8003f34:	22ff      	movs	r2, #255	; 0xff
 8003f36:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	781b      	ldrb	r3, [r3, #0]
 8003f3c:	b2db      	uxtb	r3, r3
 8003f3e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003f40:	78fb      	ldrb	r3, [r7, #3]
 8003f42:	b2db      	uxtb	r3, r3
 8003f44:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003f48:	b2da      	uxtb	r2, r3
 8003f4a:	4b31      	ldr	r3, [pc, #196]	; (8004010 <xPortStartScheduler+0x130>)
 8003f4c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003f4e:	4b31      	ldr	r3, [pc, #196]	; (8004014 <xPortStartScheduler+0x134>)
 8003f50:	2207      	movs	r2, #7
 8003f52:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003f54:	e009      	b.n	8003f6a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8003f56:	4b2f      	ldr	r3, [pc, #188]	; (8004014 <xPortStartScheduler+0x134>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	3b01      	subs	r3, #1
 8003f5c:	4a2d      	ldr	r2, [pc, #180]	; (8004014 <xPortStartScheduler+0x134>)
 8003f5e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003f60:	78fb      	ldrb	r3, [r7, #3]
 8003f62:	b2db      	uxtb	r3, r3
 8003f64:	005b      	lsls	r3, r3, #1
 8003f66:	b2db      	uxtb	r3, r3
 8003f68:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003f6a:	78fb      	ldrb	r3, [r7, #3]
 8003f6c:	b2db      	uxtb	r3, r3
 8003f6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f72:	2b80      	cmp	r3, #128	; 0x80
 8003f74:	d0ef      	beq.n	8003f56 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003f76:	4b27      	ldr	r3, [pc, #156]	; (8004014 <xPortStartScheduler+0x134>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f1c3 0307 	rsb	r3, r3, #7
 8003f7e:	2b04      	cmp	r3, #4
 8003f80:	d00a      	beq.n	8003f98 <xPortStartScheduler+0xb8>
	__asm volatile
 8003f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f86:	f383 8811 	msr	BASEPRI, r3
 8003f8a:	f3bf 8f6f 	isb	sy
 8003f8e:	f3bf 8f4f 	dsb	sy
 8003f92:	60bb      	str	r3, [r7, #8]
}
 8003f94:	bf00      	nop
 8003f96:	e7fe      	b.n	8003f96 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003f98:	4b1e      	ldr	r3, [pc, #120]	; (8004014 <xPortStartScheduler+0x134>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	021b      	lsls	r3, r3, #8
 8003f9e:	4a1d      	ldr	r2, [pc, #116]	; (8004014 <xPortStartScheduler+0x134>)
 8003fa0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003fa2:	4b1c      	ldr	r3, [pc, #112]	; (8004014 <xPortStartScheduler+0x134>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003faa:	4a1a      	ldr	r2, [pc, #104]	; (8004014 <xPortStartScheduler+0x134>)
 8003fac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	b2da      	uxtb	r2, r3
 8003fb2:	697b      	ldr	r3, [r7, #20]
 8003fb4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003fb6:	4b18      	ldr	r3, [pc, #96]	; (8004018 <xPortStartScheduler+0x138>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a17      	ldr	r2, [pc, #92]	; (8004018 <xPortStartScheduler+0x138>)
 8003fbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003fc0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003fc2:	4b15      	ldr	r3, [pc, #84]	; (8004018 <xPortStartScheduler+0x138>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a14      	ldr	r2, [pc, #80]	; (8004018 <xPortStartScheduler+0x138>)
 8003fc8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003fcc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003fce:	f000 f8dd 	bl	800418c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003fd2:	4b12      	ldr	r3, [pc, #72]	; (800401c <xPortStartScheduler+0x13c>)
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003fd8:	f000 f8fc 	bl	80041d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003fdc:	4b10      	ldr	r3, [pc, #64]	; (8004020 <xPortStartScheduler+0x140>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a0f      	ldr	r2, [pc, #60]	; (8004020 <xPortStartScheduler+0x140>)
 8003fe2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003fe6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003fe8:	f7ff ff66 	bl	8003eb8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003fec:	f7ff fd54 	bl	8003a98 <vTaskSwitchContext>
	prvTaskExitError();
 8003ff0:	f7ff ff1e 	bl	8003e30 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003ff4:	2300      	movs	r3, #0
}
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	3718      	adds	r7, #24
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bd80      	pop	{r7, pc}
 8003ffe:	bf00      	nop
 8004000:	e000ed00 	.word	0xe000ed00
 8004004:	410fc271 	.word	0x410fc271
 8004008:	410fc270 	.word	0x410fc270
 800400c:	e000e400 	.word	0xe000e400
 8004010:	20000518 	.word	0x20000518
 8004014:	2000051c 	.word	0x2000051c
 8004018:	e000ed20 	.word	0xe000ed20
 800401c:	2000000c 	.word	0x2000000c
 8004020:	e000ef34 	.word	0xe000ef34

08004024 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004024:	b480      	push	{r7}
 8004026:	b083      	sub	sp, #12
 8004028:	af00      	add	r7, sp, #0
	__asm volatile
 800402a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800402e:	f383 8811 	msr	BASEPRI, r3
 8004032:	f3bf 8f6f 	isb	sy
 8004036:	f3bf 8f4f 	dsb	sy
 800403a:	607b      	str	r3, [r7, #4]
}
 800403c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800403e:	4b0f      	ldr	r3, [pc, #60]	; (800407c <vPortEnterCritical+0x58>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	3301      	adds	r3, #1
 8004044:	4a0d      	ldr	r2, [pc, #52]	; (800407c <vPortEnterCritical+0x58>)
 8004046:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004048:	4b0c      	ldr	r3, [pc, #48]	; (800407c <vPortEnterCritical+0x58>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	2b01      	cmp	r3, #1
 800404e:	d10f      	bne.n	8004070 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004050:	4b0b      	ldr	r3, [pc, #44]	; (8004080 <vPortEnterCritical+0x5c>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	b2db      	uxtb	r3, r3
 8004056:	2b00      	cmp	r3, #0
 8004058:	d00a      	beq.n	8004070 <vPortEnterCritical+0x4c>
	__asm volatile
 800405a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800405e:	f383 8811 	msr	BASEPRI, r3
 8004062:	f3bf 8f6f 	isb	sy
 8004066:	f3bf 8f4f 	dsb	sy
 800406a:	603b      	str	r3, [r7, #0]
}
 800406c:	bf00      	nop
 800406e:	e7fe      	b.n	800406e <vPortEnterCritical+0x4a>
	}
}
 8004070:	bf00      	nop
 8004072:	370c      	adds	r7, #12
 8004074:	46bd      	mov	sp, r7
 8004076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407a:	4770      	bx	lr
 800407c:	2000000c 	.word	0x2000000c
 8004080:	e000ed04 	.word	0xe000ed04

08004084 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004084:	b480      	push	{r7}
 8004086:	b083      	sub	sp, #12
 8004088:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800408a:	4b12      	ldr	r3, [pc, #72]	; (80040d4 <vPortExitCritical+0x50>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d10a      	bne.n	80040a8 <vPortExitCritical+0x24>
	__asm volatile
 8004092:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004096:	f383 8811 	msr	BASEPRI, r3
 800409a:	f3bf 8f6f 	isb	sy
 800409e:	f3bf 8f4f 	dsb	sy
 80040a2:	607b      	str	r3, [r7, #4]
}
 80040a4:	bf00      	nop
 80040a6:	e7fe      	b.n	80040a6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80040a8:	4b0a      	ldr	r3, [pc, #40]	; (80040d4 <vPortExitCritical+0x50>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	3b01      	subs	r3, #1
 80040ae:	4a09      	ldr	r2, [pc, #36]	; (80040d4 <vPortExitCritical+0x50>)
 80040b0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80040b2:	4b08      	ldr	r3, [pc, #32]	; (80040d4 <vPortExitCritical+0x50>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d105      	bne.n	80040c6 <vPortExitCritical+0x42>
 80040ba:	2300      	movs	r3, #0
 80040bc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80040c4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80040c6:	bf00      	nop
 80040c8:	370c      	adds	r7, #12
 80040ca:	46bd      	mov	sp, r7
 80040cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d0:	4770      	bx	lr
 80040d2:	bf00      	nop
 80040d4:	2000000c 	.word	0x2000000c
	...

080040e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80040e0:	f3ef 8009 	mrs	r0, PSP
 80040e4:	f3bf 8f6f 	isb	sy
 80040e8:	4b15      	ldr	r3, [pc, #84]	; (8004140 <pxCurrentTCBConst>)
 80040ea:	681a      	ldr	r2, [r3, #0]
 80040ec:	f01e 0f10 	tst.w	lr, #16
 80040f0:	bf08      	it	eq
 80040f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80040f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040fa:	6010      	str	r0, [r2, #0]
 80040fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004100:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004104:	f380 8811 	msr	BASEPRI, r0
 8004108:	f3bf 8f4f 	dsb	sy
 800410c:	f3bf 8f6f 	isb	sy
 8004110:	f7ff fcc2 	bl	8003a98 <vTaskSwitchContext>
 8004114:	f04f 0000 	mov.w	r0, #0
 8004118:	f380 8811 	msr	BASEPRI, r0
 800411c:	bc09      	pop	{r0, r3}
 800411e:	6819      	ldr	r1, [r3, #0]
 8004120:	6808      	ldr	r0, [r1, #0]
 8004122:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004126:	f01e 0f10 	tst.w	lr, #16
 800412a:	bf08      	it	eq
 800412c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004130:	f380 8809 	msr	PSP, r0
 8004134:	f3bf 8f6f 	isb	sy
 8004138:	4770      	bx	lr
 800413a:	bf00      	nop
 800413c:	f3af 8000 	nop.w

08004140 <pxCurrentTCBConst>:
 8004140:	200003ec 	.word	0x200003ec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004144:	bf00      	nop
 8004146:	bf00      	nop

08004148 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b082      	sub	sp, #8
 800414c:	af00      	add	r7, sp, #0
	__asm volatile
 800414e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004152:	f383 8811 	msr	BASEPRI, r3
 8004156:	f3bf 8f6f 	isb	sy
 800415a:	f3bf 8f4f 	dsb	sy
 800415e:	607b      	str	r3, [r7, #4]
}
 8004160:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004162:	f7ff fbe1 	bl	8003928 <xTaskIncrementTick>
 8004166:	4603      	mov	r3, r0
 8004168:	2b00      	cmp	r3, #0
 800416a:	d003      	beq.n	8004174 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800416c:	4b06      	ldr	r3, [pc, #24]	; (8004188 <SysTick_Handler+0x40>)
 800416e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004172:	601a      	str	r2, [r3, #0]
 8004174:	2300      	movs	r3, #0
 8004176:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	f383 8811 	msr	BASEPRI, r3
}
 800417e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004180:	bf00      	nop
 8004182:	3708      	adds	r7, #8
 8004184:	46bd      	mov	sp, r7
 8004186:	bd80      	pop	{r7, pc}
 8004188:	e000ed04 	.word	0xe000ed04

0800418c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800418c:	b480      	push	{r7}
 800418e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004190:	4b0b      	ldr	r3, [pc, #44]	; (80041c0 <vPortSetupTimerInterrupt+0x34>)
 8004192:	2200      	movs	r2, #0
 8004194:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004196:	4b0b      	ldr	r3, [pc, #44]	; (80041c4 <vPortSetupTimerInterrupt+0x38>)
 8004198:	2200      	movs	r2, #0
 800419a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800419c:	4b0a      	ldr	r3, [pc, #40]	; (80041c8 <vPortSetupTimerInterrupt+0x3c>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a0a      	ldr	r2, [pc, #40]	; (80041cc <vPortSetupTimerInterrupt+0x40>)
 80041a2:	fba2 2303 	umull	r2, r3, r2, r3
 80041a6:	099b      	lsrs	r3, r3, #6
 80041a8:	4a09      	ldr	r2, [pc, #36]	; (80041d0 <vPortSetupTimerInterrupt+0x44>)
 80041aa:	3b01      	subs	r3, #1
 80041ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80041ae:	4b04      	ldr	r3, [pc, #16]	; (80041c0 <vPortSetupTimerInterrupt+0x34>)
 80041b0:	2207      	movs	r2, #7
 80041b2:	601a      	str	r2, [r3, #0]
}
 80041b4:	bf00      	nop
 80041b6:	46bd      	mov	sp, r7
 80041b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041bc:	4770      	bx	lr
 80041be:	bf00      	nop
 80041c0:	e000e010 	.word	0xe000e010
 80041c4:	e000e018 	.word	0xe000e018
 80041c8:	20000000 	.word	0x20000000
 80041cc:	10624dd3 	.word	0x10624dd3
 80041d0:	e000e014 	.word	0xe000e014

080041d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80041d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80041e4 <vPortEnableVFP+0x10>
 80041d8:	6801      	ldr	r1, [r0, #0]
 80041da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80041de:	6001      	str	r1, [r0, #0]
 80041e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80041e2:	bf00      	nop
 80041e4:	e000ed88 	.word	0xe000ed88

080041e8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b08a      	sub	sp, #40	; 0x28
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80041f0:	2300      	movs	r3, #0
 80041f2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80041f4:	f7ff faee 	bl	80037d4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80041f8:	4b5b      	ldr	r3, [pc, #364]	; (8004368 <pvPortMalloc+0x180>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d101      	bne.n	8004204 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004200:	f000 f920 	bl	8004444 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004204:	4b59      	ldr	r3, [pc, #356]	; (800436c <pvPortMalloc+0x184>)
 8004206:	681a      	ldr	r2, [r3, #0]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	4013      	ands	r3, r2
 800420c:	2b00      	cmp	r3, #0
 800420e:	f040 8093 	bne.w	8004338 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d01d      	beq.n	8004254 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004218:	2208      	movs	r2, #8
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	4413      	add	r3, r2
 800421e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	f003 0307 	and.w	r3, r3, #7
 8004226:	2b00      	cmp	r3, #0
 8004228:	d014      	beq.n	8004254 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	f023 0307 	bic.w	r3, r3, #7
 8004230:	3308      	adds	r3, #8
 8004232:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	f003 0307 	and.w	r3, r3, #7
 800423a:	2b00      	cmp	r3, #0
 800423c:	d00a      	beq.n	8004254 <pvPortMalloc+0x6c>
	__asm volatile
 800423e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004242:	f383 8811 	msr	BASEPRI, r3
 8004246:	f3bf 8f6f 	isb	sy
 800424a:	f3bf 8f4f 	dsb	sy
 800424e:	617b      	str	r3, [r7, #20]
}
 8004250:	bf00      	nop
 8004252:	e7fe      	b.n	8004252 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d06e      	beq.n	8004338 <pvPortMalloc+0x150>
 800425a:	4b45      	ldr	r3, [pc, #276]	; (8004370 <pvPortMalloc+0x188>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	687a      	ldr	r2, [r7, #4]
 8004260:	429a      	cmp	r2, r3
 8004262:	d869      	bhi.n	8004338 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004264:	4b43      	ldr	r3, [pc, #268]	; (8004374 <pvPortMalloc+0x18c>)
 8004266:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004268:	4b42      	ldr	r3, [pc, #264]	; (8004374 <pvPortMalloc+0x18c>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800426e:	e004      	b.n	800427a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004272:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800427a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	687a      	ldr	r2, [r7, #4]
 8004280:	429a      	cmp	r2, r3
 8004282:	d903      	bls.n	800428c <pvPortMalloc+0xa4>
 8004284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d1f1      	bne.n	8004270 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800428c:	4b36      	ldr	r3, [pc, #216]	; (8004368 <pvPortMalloc+0x180>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004292:	429a      	cmp	r2, r3
 8004294:	d050      	beq.n	8004338 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004296:	6a3b      	ldr	r3, [r7, #32]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	2208      	movs	r2, #8
 800429c:	4413      	add	r3, r2
 800429e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80042a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a2:	681a      	ldr	r2, [r3, #0]
 80042a4:	6a3b      	ldr	r3, [r7, #32]
 80042a6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80042a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042aa:	685a      	ldr	r2, [r3, #4]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	1ad2      	subs	r2, r2, r3
 80042b0:	2308      	movs	r3, #8
 80042b2:	005b      	lsls	r3, r3, #1
 80042b4:	429a      	cmp	r2, r3
 80042b6:	d91f      	bls.n	80042f8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80042b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	4413      	add	r3, r2
 80042be:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80042c0:	69bb      	ldr	r3, [r7, #24]
 80042c2:	f003 0307 	and.w	r3, r3, #7
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d00a      	beq.n	80042e0 <pvPortMalloc+0xf8>
	__asm volatile
 80042ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042ce:	f383 8811 	msr	BASEPRI, r3
 80042d2:	f3bf 8f6f 	isb	sy
 80042d6:	f3bf 8f4f 	dsb	sy
 80042da:	613b      	str	r3, [r7, #16]
}
 80042dc:	bf00      	nop
 80042de:	e7fe      	b.n	80042de <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80042e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e2:	685a      	ldr	r2, [r3, #4]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	1ad2      	subs	r2, r2, r3
 80042e8:	69bb      	ldr	r3, [r7, #24]
 80042ea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80042ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ee:	687a      	ldr	r2, [r7, #4]
 80042f0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80042f2:	69b8      	ldr	r0, [r7, #24]
 80042f4:	f000 f908 	bl	8004508 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80042f8:	4b1d      	ldr	r3, [pc, #116]	; (8004370 <pvPortMalloc+0x188>)
 80042fa:	681a      	ldr	r2, [r3, #0]
 80042fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	1ad3      	subs	r3, r2, r3
 8004302:	4a1b      	ldr	r2, [pc, #108]	; (8004370 <pvPortMalloc+0x188>)
 8004304:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004306:	4b1a      	ldr	r3, [pc, #104]	; (8004370 <pvPortMalloc+0x188>)
 8004308:	681a      	ldr	r2, [r3, #0]
 800430a:	4b1b      	ldr	r3, [pc, #108]	; (8004378 <pvPortMalloc+0x190>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	429a      	cmp	r2, r3
 8004310:	d203      	bcs.n	800431a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004312:	4b17      	ldr	r3, [pc, #92]	; (8004370 <pvPortMalloc+0x188>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a18      	ldr	r2, [pc, #96]	; (8004378 <pvPortMalloc+0x190>)
 8004318:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800431a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800431c:	685a      	ldr	r2, [r3, #4]
 800431e:	4b13      	ldr	r3, [pc, #76]	; (800436c <pvPortMalloc+0x184>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	431a      	orrs	r2, r3
 8004324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004326:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800432a:	2200      	movs	r2, #0
 800432c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800432e:	4b13      	ldr	r3, [pc, #76]	; (800437c <pvPortMalloc+0x194>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	3301      	adds	r3, #1
 8004334:	4a11      	ldr	r2, [pc, #68]	; (800437c <pvPortMalloc+0x194>)
 8004336:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004338:	f7ff fa5a 	bl	80037f0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800433c:	69fb      	ldr	r3, [r7, #28]
 800433e:	f003 0307 	and.w	r3, r3, #7
 8004342:	2b00      	cmp	r3, #0
 8004344:	d00a      	beq.n	800435c <pvPortMalloc+0x174>
	__asm volatile
 8004346:	f04f 0350 	mov.w	r3, #80	; 0x50
 800434a:	f383 8811 	msr	BASEPRI, r3
 800434e:	f3bf 8f6f 	isb	sy
 8004352:	f3bf 8f4f 	dsb	sy
 8004356:	60fb      	str	r3, [r7, #12]
}
 8004358:	bf00      	nop
 800435a:	e7fe      	b.n	800435a <pvPortMalloc+0x172>
	return pvReturn;
 800435c:	69fb      	ldr	r3, [r7, #28]
}
 800435e:	4618      	mov	r0, r3
 8004360:	3728      	adds	r7, #40	; 0x28
 8004362:	46bd      	mov	sp, r7
 8004364:	bd80      	pop	{r7, pc}
 8004366:	bf00      	nop
 8004368:	20004128 	.word	0x20004128
 800436c:	2000413c 	.word	0x2000413c
 8004370:	2000412c 	.word	0x2000412c
 8004374:	20004120 	.word	0x20004120
 8004378:	20004130 	.word	0x20004130
 800437c:	20004134 	.word	0x20004134

08004380 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b086      	sub	sp, #24
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d04d      	beq.n	800442e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004392:	2308      	movs	r3, #8
 8004394:	425b      	negs	r3, r3
 8004396:	697a      	ldr	r2, [r7, #20]
 8004398:	4413      	add	r3, r2
 800439a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800439c:	697b      	ldr	r3, [r7, #20]
 800439e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	685a      	ldr	r2, [r3, #4]
 80043a4:	4b24      	ldr	r3, [pc, #144]	; (8004438 <vPortFree+0xb8>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4013      	ands	r3, r2
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d10a      	bne.n	80043c4 <vPortFree+0x44>
	__asm volatile
 80043ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043b2:	f383 8811 	msr	BASEPRI, r3
 80043b6:	f3bf 8f6f 	isb	sy
 80043ba:	f3bf 8f4f 	dsb	sy
 80043be:	60fb      	str	r3, [r7, #12]
}
 80043c0:	bf00      	nop
 80043c2:	e7fe      	b.n	80043c2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80043c4:	693b      	ldr	r3, [r7, #16]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d00a      	beq.n	80043e2 <vPortFree+0x62>
	__asm volatile
 80043cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043d0:	f383 8811 	msr	BASEPRI, r3
 80043d4:	f3bf 8f6f 	isb	sy
 80043d8:	f3bf 8f4f 	dsb	sy
 80043dc:	60bb      	str	r3, [r7, #8]
}
 80043de:	bf00      	nop
 80043e0:	e7fe      	b.n	80043e0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80043e2:	693b      	ldr	r3, [r7, #16]
 80043e4:	685a      	ldr	r2, [r3, #4]
 80043e6:	4b14      	ldr	r3, [pc, #80]	; (8004438 <vPortFree+0xb8>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4013      	ands	r3, r2
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d01e      	beq.n	800442e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80043f0:	693b      	ldr	r3, [r7, #16]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d11a      	bne.n	800442e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80043f8:	693b      	ldr	r3, [r7, #16]
 80043fa:	685a      	ldr	r2, [r3, #4]
 80043fc:	4b0e      	ldr	r3, [pc, #56]	; (8004438 <vPortFree+0xb8>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	43db      	mvns	r3, r3
 8004402:	401a      	ands	r2, r3
 8004404:	693b      	ldr	r3, [r7, #16]
 8004406:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004408:	f7ff f9e4 	bl	80037d4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	685a      	ldr	r2, [r3, #4]
 8004410:	4b0a      	ldr	r3, [pc, #40]	; (800443c <vPortFree+0xbc>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4413      	add	r3, r2
 8004416:	4a09      	ldr	r2, [pc, #36]	; (800443c <vPortFree+0xbc>)
 8004418:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800441a:	6938      	ldr	r0, [r7, #16]
 800441c:	f000 f874 	bl	8004508 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004420:	4b07      	ldr	r3, [pc, #28]	; (8004440 <vPortFree+0xc0>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	3301      	adds	r3, #1
 8004426:	4a06      	ldr	r2, [pc, #24]	; (8004440 <vPortFree+0xc0>)
 8004428:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800442a:	f7ff f9e1 	bl	80037f0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800442e:	bf00      	nop
 8004430:	3718      	adds	r7, #24
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}
 8004436:	bf00      	nop
 8004438:	2000413c 	.word	0x2000413c
 800443c:	2000412c 	.word	0x2000412c
 8004440:	20004138 	.word	0x20004138

08004444 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004444:	b480      	push	{r7}
 8004446:	b085      	sub	sp, #20
 8004448:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800444a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800444e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004450:	4b27      	ldr	r3, [pc, #156]	; (80044f0 <prvHeapInit+0xac>)
 8004452:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	f003 0307 	and.w	r3, r3, #7
 800445a:	2b00      	cmp	r3, #0
 800445c:	d00c      	beq.n	8004478 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	3307      	adds	r3, #7
 8004462:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	f023 0307 	bic.w	r3, r3, #7
 800446a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800446c:	68ba      	ldr	r2, [r7, #8]
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	1ad3      	subs	r3, r2, r3
 8004472:	4a1f      	ldr	r2, [pc, #124]	; (80044f0 <prvHeapInit+0xac>)
 8004474:	4413      	add	r3, r2
 8004476:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800447c:	4a1d      	ldr	r2, [pc, #116]	; (80044f4 <prvHeapInit+0xb0>)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004482:	4b1c      	ldr	r3, [pc, #112]	; (80044f4 <prvHeapInit+0xb0>)
 8004484:	2200      	movs	r2, #0
 8004486:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	68ba      	ldr	r2, [r7, #8]
 800448c:	4413      	add	r3, r2
 800448e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004490:	2208      	movs	r2, #8
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	1a9b      	subs	r3, r3, r2
 8004496:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	f023 0307 	bic.w	r3, r3, #7
 800449e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	4a15      	ldr	r2, [pc, #84]	; (80044f8 <prvHeapInit+0xb4>)
 80044a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80044a6:	4b14      	ldr	r3, [pc, #80]	; (80044f8 <prvHeapInit+0xb4>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	2200      	movs	r2, #0
 80044ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80044ae:	4b12      	ldr	r3, [pc, #72]	; (80044f8 <prvHeapInit+0xb4>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	2200      	movs	r2, #0
 80044b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	68fa      	ldr	r2, [r7, #12]
 80044be:	1ad2      	subs	r2, r2, r3
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80044c4:	4b0c      	ldr	r3, [pc, #48]	; (80044f8 <prvHeapInit+0xb4>)
 80044c6:	681a      	ldr	r2, [r3, #0]
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	4a0a      	ldr	r2, [pc, #40]	; (80044fc <prvHeapInit+0xb8>)
 80044d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	4a09      	ldr	r2, [pc, #36]	; (8004500 <prvHeapInit+0xbc>)
 80044da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80044dc:	4b09      	ldr	r3, [pc, #36]	; (8004504 <prvHeapInit+0xc0>)
 80044de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80044e2:	601a      	str	r2, [r3, #0]
}
 80044e4:	bf00      	nop
 80044e6:	3714      	adds	r7, #20
 80044e8:	46bd      	mov	sp, r7
 80044ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ee:	4770      	bx	lr
 80044f0:	20000520 	.word	0x20000520
 80044f4:	20004120 	.word	0x20004120
 80044f8:	20004128 	.word	0x20004128
 80044fc:	20004130 	.word	0x20004130
 8004500:	2000412c 	.word	0x2000412c
 8004504:	2000413c 	.word	0x2000413c

08004508 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004508:	b480      	push	{r7}
 800450a:	b085      	sub	sp, #20
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004510:	4b28      	ldr	r3, [pc, #160]	; (80045b4 <prvInsertBlockIntoFreeList+0xac>)
 8004512:	60fb      	str	r3, [r7, #12]
 8004514:	e002      	b.n	800451c <prvInsertBlockIntoFreeList+0x14>
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	60fb      	str	r3, [r7, #12]
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	687a      	ldr	r2, [r7, #4]
 8004522:	429a      	cmp	r2, r3
 8004524:	d8f7      	bhi.n	8004516 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	68ba      	ldr	r2, [r7, #8]
 8004530:	4413      	add	r3, r2
 8004532:	687a      	ldr	r2, [r7, #4]
 8004534:	429a      	cmp	r2, r3
 8004536:	d108      	bne.n	800454a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	685a      	ldr	r2, [r3, #4]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	441a      	add	r2, r3
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	68ba      	ldr	r2, [r7, #8]
 8004554:	441a      	add	r2, r3
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	429a      	cmp	r2, r3
 800455c:	d118      	bne.n	8004590 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681a      	ldr	r2, [r3, #0]
 8004562:	4b15      	ldr	r3, [pc, #84]	; (80045b8 <prvInsertBlockIntoFreeList+0xb0>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	429a      	cmp	r2, r3
 8004568:	d00d      	beq.n	8004586 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	685a      	ldr	r2, [r3, #4]
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	441a      	add	r2, r3
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	681a      	ldr	r2, [r3, #0]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	601a      	str	r2, [r3, #0]
 8004584:	e008      	b.n	8004598 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004586:	4b0c      	ldr	r3, [pc, #48]	; (80045b8 <prvInsertBlockIntoFreeList+0xb0>)
 8004588:	681a      	ldr	r2, [r3, #0]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	601a      	str	r2, [r3, #0]
 800458e:	e003      	b.n	8004598 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681a      	ldr	r2, [r3, #0]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004598:	68fa      	ldr	r2, [r7, #12]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	429a      	cmp	r2, r3
 800459e:	d002      	beq.n	80045a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	687a      	ldr	r2, [r7, #4]
 80045a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80045a6:	bf00      	nop
 80045a8:	3714      	adds	r7, #20
 80045aa:	46bd      	mov	sp, r7
 80045ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b0:	4770      	bx	lr
 80045b2:	bf00      	nop
 80045b4:	20004120 	.word	0x20004120
 80045b8:	20004128 	.word	0x20004128

080045bc <memset>:
 80045bc:	4402      	add	r2, r0
 80045be:	4603      	mov	r3, r0
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d100      	bne.n	80045c6 <memset+0xa>
 80045c4:	4770      	bx	lr
 80045c6:	f803 1b01 	strb.w	r1, [r3], #1
 80045ca:	e7f9      	b.n	80045c0 <memset+0x4>

080045cc <__libc_init_array>:
 80045cc:	b570      	push	{r4, r5, r6, lr}
 80045ce:	4d0d      	ldr	r5, [pc, #52]	; (8004604 <__libc_init_array+0x38>)
 80045d0:	4c0d      	ldr	r4, [pc, #52]	; (8004608 <__libc_init_array+0x3c>)
 80045d2:	1b64      	subs	r4, r4, r5
 80045d4:	10a4      	asrs	r4, r4, #2
 80045d6:	2600      	movs	r6, #0
 80045d8:	42a6      	cmp	r6, r4
 80045da:	d109      	bne.n	80045f0 <__libc_init_array+0x24>
 80045dc:	4d0b      	ldr	r5, [pc, #44]	; (800460c <__libc_init_array+0x40>)
 80045de:	4c0c      	ldr	r4, [pc, #48]	; (8004610 <__libc_init_array+0x44>)
 80045e0:	f000 f818 	bl	8004614 <_init>
 80045e4:	1b64      	subs	r4, r4, r5
 80045e6:	10a4      	asrs	r4, r4, #2
 80045e8:	2600      	movs	r6, #0
 80045ea:	42a6      	cmp	r6, r4
 80045ec:	d105      	bne.n	80045fa <__libc_init_array+0x2e>
 80045ee:	bd70      	pop	{r4, r5, r6, pc}
 80045f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80045f4:	4798      	blx	r3
 80045f6:	3601      	adds	r6, #1
 80045f8:	e7ee      	b.n	80045d8 <__libc_init_array+0xc>
 80045fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80045fe:	4798      	blx	r3
 8004600:	3601      	adds	r6, #1
 8004602:	e7f2      	b.n	80045ea <__libc_init_array+0x1e>
 8004604:	080046f4 	.word	0x080046f4
 8004608:	080046f4 	.word	0x080046f4
 800460c:	080046f4 	.word	0x080046f4
 8004610:	080046f8 	.word	0x080046f8

08004614 <_init>:
 8004614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004616:	bf00      	nop
 8004618:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800461a:	bc08      	pop	{r3}
 800461c:	469e      	mov	lr, r3
 800461e:	4770      	bx	lr

08004620 <_fini>:
 8004620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004622:	bf00      	nop
 8004624:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004626:	bc08      	pop	{r3}
 8004628:	469e      	mov	lr, r3
 800462a:	4770      	bx	lr
