
Blind spot assistant v1.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
<<<<<<< HEAD
  1 .text         00003da4  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003f38  08003f38  00013f38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003f50  08003f50  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08003f50  08003f50  00013f50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003f58  08003f58  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003f58  08003f58  00013f58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003f5c  08003f5c  00013f5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08003f60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000011c  20000010  08003f70  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000012c  08003f70  0002012c  2**0
=======
  1 .text         00003dbc  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003f50  08003f50  00013f50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003f68  08003f68  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08003f68  08003f68  00013f68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003f70  08003f70  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003f70  08003f70  00013f70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003f74  08003f74  00013f74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08003f78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000011c  20000010  08003f88  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000012c  08003f88  0002012c  2**0
>>>>>>> AWS
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000cc82  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001bab  00000000  00000000  0002cd05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c10  00000000  00000000  0002e8b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000980  00000000  00000000  0002f4c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000155ed  00000000  00000000  0002fe40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
<<<<<<< HEAD
 18 .debug_line   0000dc39  00000000  00000000  0004542d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000895e1  00000000  00000000  00053066  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000032f8  00000000  00000000  000dc648  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007b  00000000  00000000  000df940  2**0
=======
 18 .debug_line   0000dc47  00000000  00000000  0004542d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008958e  00000000  00000000  00053074  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000032f8  00000000  00000000  000dc604  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007b  00000000  00000000  000df8fc  2**0
>>>>>>> AWS
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000010 	.word	0x20000010
 80001b0:	00000000 	.word	0x00000000
<<<<<<< HEAD
 80001b4:	08003f20 	.word	0x08003f20
=======
 80001b4:	08003f38 	.word	0x08003f38
>>>>>>> AWS

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000014 	.word	0x20000014
<<<<<<< HEAD
 80001d0:	08003f20 	.word	0x08003f20
=======
 80001d0:	08003f38 	.word	0x08003f38
>>>>>>> AWS

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b970 	b.w	80004cc <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9e08      	ldr	r6, [sp, #32]
 800020a:	460d      	mov	r5, r1
 800020c:	4604      	mov	r4, r0
 800020e:	460f      	mov	r7, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14a      	bne.n	80002aa <__udivmoddi4+0xa6>
 8000214:	428a      	cmp	r2, r1
 8000216:	4694      	mov	ip, r2
 8000218:	d965      	bls.n	80002e6 <__udivmoddi4+0xe2>
 800021a:	fab2 f382 	clz	r3, r2
 800021e:	b143      	cbz	r3, 8000232 <__udivmoddi4+0x2e>
 8000220:	fa02 fc03 	lsl.w	ip, r2, r3
 8000224:	f1c3 0220 	rsb	r2, r3, #32
 8000228:	409f      	lsls	r7, r3
 800022a:	fa20 f202 	lsr.w	r2, r0, r2
 800022e:	4317      	orrs	r7, r2
 8000230:	409c      	lsls	r4, r3
 8000232:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000236:	fa1f f58c 	uxth.w	r5, ip
 800023a:	fbb7 f1fe 	udiv	r1, r7, lr
 800023e:	0c22      	lsrs	r2, r4, #16
 8000240:	fb0e 7711 	mls	r7, lr, r1, r7
 8000244:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000248:	fb01 f005 	mul.w	r0, r1, r5
 800024c:	4290      	cmp	r0, r2
 800024e:	d90a      	bls.n	8000266 <__udivmoddi4+0x62>
 8000250:	eb1c 0202 	adds.w	r2, ip, r2
 8000254:	f101 37ff 	add.w	r7, r1, #4294967295
 8000258:	f080 811c 	bcs.w	8000494 <__udivmoddi4+0x290>
 800025c:	4290      	cmp	r0, r2
 800025e:	f240 8119 	bls.w	8000494 <__udivmoddi4+0x290>
 8000262:	3902      	subs	r1, #2
 8000264:	4462      	add	r2, ip
 8000266:	1a12      	subs	r2, r2, r0
 8000268:	b2a4      	uxth	r4, r4
 800026a:	fbb2 f0fe 	udiv	r0, r2, lr
 800026e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000272:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000276:	fb00 f505 	mul.w	r5, r0, r5
 800027a:	42a5      	cmp	r5, r4
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x90>
 800027e:	eb1c 0404 	adds.w	r4, ip, r4
 8000282:	f100 32ff 	add.w	r2, r0, #4294967295
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x294>
 800028a:	42a5      	cmp	r5, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x294>
 8000290:	4464      	add	r4, ip
 8000292:	3802      	subs	r0, #2
 8000294:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000298:	1b64      	subs	r4, r4, r5
 800029a:	2100      	movs	r1, #0
 800029c:	b11e      	cbz	r6, 80002a6 <__udivmoddi4+0xa2>
 800029e:	40dc      	lsrs	r4, r3
 80002a0:	2300      	movs	r3, #0
 80002a2:	e9c6 4300 	strd	r4, r3, [r6]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d908      	bls.n	80002c0 <__udivmoddi4+0xbc>
 80002ae:	2e00      	cmp	r6, #0
 80002b0:	f000 80ed 	beq.w	800048e <__udivmoddi4+0x28a>
 80002b4:	2100      	movs	r1, #0
 80002b6:	e9c6 0500 	strd	r0, r5, [r6]
 80002ba:	4608      	mov	r0, r1
 80002bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c0:	fab3 f183 	clz	r1, r3
 80002c4:	2900      	cmp	r1, #0
 80002c6:	d149      	bne.n	800035c <__udivmoddi4+0x158>
 80002c8:	42ab      	cmp	r3, r5
 80002ca:	d302      	bcc.n	80002d2 <__udivmoddi4+0xce>
 80002cc:	4282      	cmp	r2, r0
 80002ce:	f200 80f8 	bhi.w	80004c2 <__udivmoddi4+0x2be>
 80002d2:	1a84      	subs	r4, r0, r2
 80002d4:	eb65 0203 	sbc.w	r2, r5, r3
 80002d8:	2001      	movs	r0, #1
 80002da:	4617      	mov	r7, r2
 80002dc:	2e00      	cmp	r6, #0
 80002de:	d0e2      	beq.n	80002a6 <__udivmoddi4+0xa2>
 80002e0:	e9c6 4700 	strd	r4, r7, [r6]
 80002e4:	e7df      	b.n	80002a6 <__udivmoddi4+0xa2>
 80002e6:	b902      	cbnz	r2, 80002ea <__udivmoddi4+0xe6>
 80002e8:	deff      	udf	#255	; 0xff
 80002ea:	fab2 f382 	clz	r3, r2
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	f040 8090 	bne.w	8000414 <__udivmoddi4+0x210>
 80002f4:	1a8a      	subs	r2, r1, r2
 80002f6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fa:	fa1f fe8c 	uxth.w	lr, ip
 80002fe:	2101      	movs	r1, #1
 8000300:	fbb2 f5f7 	udiv	r5, r2, r7
 8000304:	fb07 2015 	mls	r0, r7, r5, r2
 8000308:	0c22      	lsrs	r2, r4, #16
 800030a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800030e:	fb0e f005 	mul.w	r0, lr, r5
 8000312:	4290      	cmp	r0, r2
 8000314:	d908      	bls.n	8000328 <__udivmoddi4+0x124>
 8000316:	eb1c 0202 	adds.w	r2, ip, r2
 800031a:	f105 38ff 	add.w	r8, r5, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x122>
 8000320:	4290      	cmp	r0, r2
 8000322:	f200 80cb 	bhi.w	80004bc <__udivmoddi4+0x2b8>
 8000326:	4645      	mov	r5, r8
 8000328:	1a12      	subs	r2, r2, r0
 800032a:	b2a4      	uxth	r4, r4
 800032c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000330:	fb07 2210 	mls	r2, r7, r0, r2
 8000334:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000338:	fb0e fe00 	mul.w	lr, lr, r0
 800033c:	45a6      	cmp	lr, r4
 800033e:	d908      	bls.n	8000352 <__udivmoddi4+0x14e>
 8000340:	eb1c 0404 	adds.w	r4, ip, r4
 8000344:	f100 32ff 	add.w	r2, r0, #4294967295
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x14c>
 800034a:	45a6      	cmp	lr, r4
 800034c:	f200 80bb 	bhi.w	80004c6 <__udivmoddi4+0x2c2>
 8000350:	4610      	mov	r0, r2
 8000352:	eba4 040e 	sub.w	r4, r4, lr
 8000356:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800035a:	e79f      	b.n	800029c <__udivmoddi4+0x98>
 800035c:	f1c1 0720 	rsb	r7, r1, #32
 8000360:	408b      	lsls	r3, r1
 8000362:	fa22 fc07 	lsr.w	ip, r2, r7
 8000366:	ea4c 0c03 	orr.w	ip, ip, r3
 800036a:	fa05 f401 	lsl.w	r4, r5, r1
 800036e:	fa20 f307 	lsr.w	r3, r0, r7
 8000372:	40fd      	lsrs	r5, r7
 8000374:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000378:	4323      	orrs	r3, r4
 800037a:	fbb5 f8f9 	udiv	r8, r5, r9
 800037e:	fa1f fe8c 	uxth.w	lr, ip
 8000382:	fb09 5518 	mls	r5, r9, r8, r5
 8000386:	0c1c      	lsrs	r4, r3, #16
 8000388:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800038c:	fb08 f50e 	mul.w	r5, r8, lr
 8000390:	42a5      	cmp	r5, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	fa00 f001 	lsl.w	r0, r0, r1
 800039a:	d90b      	bls.n	80003b4 <__udivmoddi4+0x1b0>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a4:	f080 8088 	bcs.w	80004b8 <__udivmoddi4+0x2b4>
 80003a8:	42a5      	cmp	r5, r4
 80003aa:	f240 8085 	bls.w	80004b8 <__udivmoddi4+0x2b4>
 80003ae:	f1a8 0802 	sub.w	r8, r8, #2
 80003b2:	4464      	add	r4, ip
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	b29d      	uxth	r5, r3
 80003b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003bc:	fb09 4413 	mls	r4, r9, r3, r4
 80003c0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c4:	fb03 fe0e 	mul.w	lr, r3, lr
 80003c8:	45a6      	cmp	lr, r4
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1da>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d4:	d26c      	bcs.n	80004b0 <__udivmoddi4+0x2ac>
 80003d6:	45a6      	cmp	lr, r4
 80003d8:	d96a      	bls.n	80004b0 <__udivmoddi4+0x2ac>
 80003da:	3b02      	subs	r3, #2
 80003dc:	4464      	add	r4, ip
 80003de:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003e2:	fba3 9502 	umull	r9, r5, r3, r2
 80003e6:	eba4 040e 	sub.w	r4, r4, lr
 80003ea:	42ac      	cmp	r4, r5
 80003ec:	46c8      	mov	r8, r9
 80003ee:	46ae      	mov	lr, r5
 80003f0:	d356      	bcc.n	80004a0 <__udivmoddi4+0x29c>
 80003f2:	d053      	beq.n	800049c <__udivmoddi4+0x298>
 80003f4:	b156      	cbz	r6, 800040c <__udivmoddi4+0x208>
 80003f6:	ebb0 0208 	subs.w	r2, r0, r8
 80003fa:	eb64 040e 	sbc.w	r4, r4, lr
 80003fe:	fa04 f707 	lsl.w	r7, r4, r7
 8000402:	40ca      	lsrs	r2, r1
 8000404:	40cc      	lsrs	r4, r1
 8000406:	4317      	orrs	r7, r2
 8000408:	e9c6 7400 	strd	r7, r4, [r6]
 800040c:	4618      	mov	r0, r3
 800040e:	2100      	movs	r1, #0
 8000410:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000414:	f1c3 0120 	rsb	r1, r3, #32
 8000418:	fa02 fc03 	lsl.w	ip, r2, r3
 800041c:	fa20 f201 	lsr.w	r2, r0, r1
 8000420:	fa25 f101 	lsr.w	r1, r5, r1
 8000424:	409d      	lsls	r5, r3
 8000426:	432a      	orrs	r2, r5
 8000428:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800042c:	fa1f fe8c 	uxth.w	lr, ip
 8000430:	fbb1 f0f7 	udiv	r0, r1, r7
 8000434:	fb07 1510 	mls	r5, r7, r0, r1
 8000438:	0c11      	lsrs	r1, r2, #16
 800043a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800043e:	fb00 f50e 	mul.w	r5, r0, lr
 8000442:	428d      	cmp	r5, r1
 8000444:	fa04 f403 	lsl.w	r4, r4, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x258>
 800044a:	eb1c 0101 	adds.w	r1, ip, r1
 800044e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000452:	d22f      	bcs.n	80004b4 <__udivmoddi4+0x2b0>
 8000454:	428d      	cmp	r5, r1
 8000456:	d92d      	bls.n	80004b4 <__udivmoddi4+0x2b0>
 8000458:	3802      	subs	r0, #2
 800045a:	4461      	add	r1, ip
 800045c:	1b49      	subs	r1, r1, r5
 800045e:	b292      	uxth	r2, r2
 8000460:	fbb1 f5f7 	udiv	r5, r1, r7
 8000464:	fb07 1115 	mls	r1, r7, r5, r1
 8000468:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800046c:	fb05 f10e 	mul.w	r1, r5, lr
 8000470:	4291      	cmp	r1, r2
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x282>
 8000474:	eb1c 0202 	adds.w	r2, ip, r2
 8000478:	f105 38ff 	add.w	r8, r5, #4294967295
 800047c:	d216      	bcs.n	80004ac <__udivmoddi4+0x2a8>
 800047e:	4291      	cmp	r1, r2
 8000480:	d914      	bls.n	80004ac <__udivmoddi4+0x2a8>
 8000482:	3d02      	subs	r5, #2
 8000484:	4462      	add	r2, ip
 8000486:	1a52      	subs	r2, r2, r1
 8000488:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800048c:	e738      	b.n	8000300 <__udivmoddi4+0xfc>
 800048e:	4631      	mov	r1, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e708      	b.n	80002a6 <__udivmoddi4+0xa2>
 8000494:	4639      	mov	r1, r7
 8000496:	e6e6      	b.n	8000266 <__udivmoddi4+0x62>
 8000498:	4610      	mov	r0, r2
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x90>
 800049c:	4548      	cmp	r0, r9
 800049e:	d2a9      	bcs.n	80003f4 <__udivmoddi4+0x1f0>
 80004a0:	ebb9 0802 	subs.w	r8, r9, r2
 80004a4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a8:	3b01      	subs	r3, #1
 80004aa:	e7a3      	b.n	80003f4 <__udivmoddi4+0x1f0>
 80004ac:	4645      	mov	r5, r8
 80004ae:	e7ea      	b.n	8000486 <__udivmoddi4+0x282>
 80004b0:	462b      	mov	r3, r5
 80004b2:	e794      	b.n	80003de <__udivmoddi4+0x1da>
 80004b4:	4640      	mov	r0, r8
 80004b6:	e7d1      	b.n	800045c <__udivmoddi4+0x258>
 80004b8:	46d0      	mov	r8, sl
 80004ba:	e77b      	b.n	80003b4 <__udivmoddi4+0x1b0>
 80004bc:	3d02      	subs	r5, #2
 80004be:	4462      	add	r2, ip
 80004c0:	e732      	b.n	8000328 <__udivmoddi4+0x124>
 80004c2:	4608      	mov	r0, r1
 80004c4:	e70a      	b.n	80002dc <__udivmoddi4+0xd8>
 80004c6:	4464      	add	r4, ip
 80004c8:	3802      	subs	r0, #2
 80004ca:	e742      	b.n	8000352 <__udivmoddi4+0x14e>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <HAL_TIM_IC_CaptureCallback>:
#define LED_PORT_U1      GPIOA
#define LED_PORT_U2      GPIOB


void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]


	if (htim->Instance == TIM2)
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80004e0:	d15a      	bne.n	8000598 <HAL_TIM_IC_CaptureCallback+0xc8>
	{
		// Check if the callback is triggered by the correct timer (TIMx)
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	7f1b      	ldrb	r3, [r3, #28]
 80004e6:	2b01      	cmp	r3, #1
 80004e8:	d156      	bne.n	8000598 <HAL_TIM_IC_CaptureCallback+0xc8>
		{
			if (flag_timer2==0)
 80004ea:	4b5d      	ldr	r3, [pc, #372]	; (8000660 <HAL_TIM_IC_CaptureCallback+0x190>)
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	d10d      	bne.n	800050e <HAL_TIM_IC_CaptureCallback+0x3e>
			{
				t1_timer2=HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 80004f2:	2100      	movs	r1, #0
 80004f4:	6878      	ldr	r0, [r7, #4]
<<<<<<< HEAD
 80004f6:	f002 f987 	bl	8002808 <HAL_TIM_ReadCapturedValue>
=======
 80004f6:	f002 f993 	bl	8002820 <HAL_TIM_ReadCapturedValue>
>>>>>>> AWS
 80004fa:	4603      	mov	r3, r0
 80004fc:	461a      	mov	r2, r3
 80004fe:	4b59      	ldr	r3, [pc, #356]	; (8000664 <HAL_TIM_IC_CaptureCallback+0x194>)
 8000500:	601a      	str	r2, [r3, #0]

				flag_timer2++;
 8000502:	4b57      	ldr	r3, [pc, #348]	; (8000660 <HAL_TIM_IC_CaptureCallback+0x190>)
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	3301      	adds	r3, #1
 8000508:	4a55      	ldr	r2, [pc, #340]	; (8000660 <HAL_TIM_IC_CaptureCallback+0x190>)
 800050a:	6013      	str	r3, [r2, #0]
 800050c:	e044      	b.n	8000598 <HAL_TIM_IC_CaptureCallback+0xc8>
			}
			else if(flag_timer2==1)
 800050e:	4b54      	ldr	r3, [pc, #336]	; (8000660 <HAL_TIM_IC_CaptureCallback+0x190>)
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	2b01      	cmp	r3, #1
 8000514:	d140      	bne.n	8000598 <HAL_TIM_IC_CaptureCallback+0xc8>
			{
				t2_timer2=HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000516:	2100      	movs	r1, #0
 8000518:	6878      	ldr	r0, [r7, #4]
<<<<<<< HEAD
 800051a:	f002 f975 	bl	8002808 <HAL_TIM_ReadCapturedValue>
=======
 800051a:	f002 f981 	bl	8002820 <HAL_TIM_ReadCapturedValue>
>>>>>>> AWS
 800051e:	4603      	mov	r3, r0
 8000520:	461a      	mov	r2, r3
 8000522:	4b51      	ldr	r3, [pc, #324]	; (8000668 <HAL_TIM_IC_CaptureCallback+0x198>)
 8000524:	601a      	str	r2, [r3, #0]
				if(t2_timer2>t1_timer2)
 8000526:	4b50      	ldr	r3, [pc, #320]	; (8000668 <HAL_TIM_IC_CaptureCallback+0x198>)
 8000528:	681a      	ldr	r2, [r3, #0]
 800052a:	4b4e      	ldr	r3, [pc, #312]	; (8000664 <HAL_TIM_IC_CaptureCallback+0x194>)
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	429a      	cmp	r2, r3
 8000530:	dd07      	ble.n	8000542 <HAL_TIM_IC_CaptureCallback+0x72>
				{
					time_timer2=t2_timer2-t1_timer2;
 8000532:	4b4d      	ldr	r3, [pc, #308]	; (8000668 <HAL_TIM_IC_CaptureCallback+0x198>)
 8000534:	681a      	ldr	r2, [r3, #0]
 8000536:	4b4b      	ldr	r3, [pc, #300]	; (8000664 <HAL_TIM_IC_CaptureCallback+0x194>)
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	1ad3      	subs	r3, r2, r3
 800053c:	4a4b      	ldr	r2, [pc, #300]	; (800066c <HAL_TIM_IC_CaptureCallback+0x19c>)
 800053e:	6013      	str	r3, [r2, #0]
 8000540:	e010      	b.n	8000564 <HAL_TIM_IC_CaptureCallback+0x94>
				}
				else if(t1_timer2>t2_timer2)
 8000542:	4b48      	ldr	r3, [pc, #288]	; (8000664 <HAL_TIM_IC_CaptureCallback+0x194>)
 8000544:	681a      	ldr	r2, [r3, #0]
 8000546:	4b48      	ldr	r3, [pc, #288]	; (8000668 <HAL_TIM_IC_CaptureCallback+0x198>)
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	429a      	cmp	r2, r3
 800054c:	dd0a      	ble.n	8000564 <HAL_TIM_IC_CaptureCallback+0x94>
				{
					time_timer2 = ((0xffff-t1_timer2)+t2_timer2)+1;
 800054e:	4b45      	ldr	r3, [pc, #276]	; (8000664 <HAL_TIM_IC_CaptureCallback+0x194>)
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8000556:	33ff      	adds	r3, #255	; 0xff
 8000558:	4a43      	ldr	r2, [pc, #268]	; (8000668 <HAL_TIM_IC_CaptureCallback+0x198>)
 800055a:	6812      	ldr	r2, [r2, #0]
 800055c:	4413      	add	r3, r2
 800055e:	3301      	adds	r3, #1
 8000560:	4a42      	ldr	r2, [pc, #264]	; (800066c <HAL_TIM_IC_CaptureCallback+0x19c>)
 8000562:	6013      	str	r3, [r2, #0]
				}
				buffer[0]=(((int)time_timer2*340*100)/((int)2*1000000))+1;
 8000564:	4b41      	ldr	r3, [pc, #260]	; (800066c <HAL_TIM_IC_CaptureCallback+0x19c>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	f248 42d0 	movw	r2, #34000	; 0x84d0
 800056c:	fb02 f303 	mul.w	r3, r2, r3
 8000570:	4a3f      	ldr	r2, [pc, #252]	; (8000670 <HAL_TIM_IC_CaptureCallback+0x1a0>)
 8000572:	fb82 1203 	smull	r1, r2, r2, r3
 8000576:	14d2      	asrs	r2, r2, #19
 8000578:	17db      	asrs	r3, r3, #31
 800057a:	1ad3      	subs	r3, r2, r3
 800057c:	3301      	adds	r3, #1
 800057e:	4a3d      	ldr	r2, [pc, #244]	; (8000674 <HAL_TIM_IC_CaptureCallback+0x1a4>)
 8000580:	6013      	str	r3, [r2, #0]
				flag_timer2=0;
 8000582:	4b37      	ldr	r3, [pc, #220]	; (8000660 <HAL_TIM_IC_CaptureCallback+0x190>)
 8000584:	2200      	movs	r2, #0
 8000586:	601a      	str	r2, [r3, #0]
				HAL_TIM_IC_Stop_IT(&htim2, TIM_CHANNEL_1); //disable timer 2
 8000588:	2100      	movs	r1, #0
 800058a:	483b      	ldr	r0, [pc, #236]	; (8000678 <HAL_TIM_IC_CaptureCallback+0x1a8>)
<<<<<<< HEAD
 800058c:	f001 fe22 	bl	80021d4 <HAL_TIM_IC_Stop_IT>
				HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_4); // enable timer5
 8000590:	210c      	movs	r1, #12
 8000592:	483a      	ldr	r0, [pc, #232]	; (800067c <HAL_TIM_IC_CaptureCallback+0x1ac>)
 8000594:	f001 fd04 	bl	8001fa0 <HAL_TIM_IC_Start_IT>
=======
 800058c:	f001 fe2e 	bl	80021ec <HAL_TIM_IC_Stop_IT>
				HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_4); // enable timer5
 8000590:	210c      	movs	r1, #12
 8000592:	483a      	ldr	r0, [pc, #232]	; (800067c <HAL_TIM_IC_CaptureCallback+0x1ac>)
 8000594:	f001 fd10 	bl	8001fb8 <HAL_TIM_IC_Start_IT>
>>>>>>> AWS
			}

		}
	}

	if (htim->Instance == TIM5)
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	4a38      	ldr	r2, [pc, #224]	; (8000680 <HAL_TIM_IC_CaptureCallback+0x1b0>)
 800059e:	4293      	cmp	r3, r2
 80005a0:	d15a      	bne.n	8000658 <HAL_TIM_IC_CaptureCallback+0x188>
	{
		// Check if the callback is triggered by the correct timer (TIMx)
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4)
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	7f1b      	ldrb	r3, [r3, #28]
 80005a6:	2b08      	cmp	r3, #8
 80005a8:	d156      	bne.n	8000658 <HAL_TIM_IC_CaptureCallback+0x188>
		{
			if (flag_timer5==0)
 80005aa:	4b36      	ldr	r3, [pc, #216]	; (8000684 <HAL_TIM_IC_CaptureCallback+0x1b4>)
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d10d      	bne.n	80005ce <HAL_TIM_IC_CaptureCallback+0xfe>
			{
				t1_timer5=HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_4);
 80005b2:	210c      	movs	r1, #12
 80005b4:	6878      	ldr	r0, [r7, #4]
<<<<<<< HEAD
 80005b6:	f002 f927 	bl	8002808 <HAL_TIM_ReadCapturedValue>
=======
 80005b6:	f002 f933 	bl	8002820 <HAL_TIM_ReadCapturedValue>
>>>>>>> AWS
 80005ba:	4603      	mov	r3, r0
 80005bc:	461a      	mov	r2, r3
 80005be:	4b32      	ldr	r3, [pc, #200]	; (8000688 <HAL_TIM_IC_CaptureCallback+0x1b8>)
 80005c0:	601a      	str	r2, [r3, #0]

				flag_timer5++;
 80005c2:	4b30      	ldr	r3, [pc, #192]	; (8000684 <HAL_TIM_IC_CaptureCallback+0x1b4>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	3301      	adds	r3, #1
 80005c8:	4a2e      	ldr	r2, [pc, #184]	; (8000684 <HAL_TIM_IC_CaptureCallback+0x1b4>)
 80005ca:	6013      	str	r3, [r2, #0]
				HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1); // enable timer5
			}

		}
	}
}
 80005cc:	e044      	b.n	8000658 <HAL_TIM_IC_CaptureCallback+0x188>
			else if(flag_timer5==1)
 80005ce:	4b2d      	ldr	r3, [pc, #180]	; (8000684 <HAL_TIM_IC_CaptureCallback+0x1b4>)
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	2b01      	cmp	r3, #1
 80005d4:	d140      	bne.n	8000658 <HAL_TIM_IC_CaptureCallback+0x188>
				t2_timer5=HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_4);
 80005d6:	210c      	movs	r1, #12
 80005d8:	6878      	ldr	r0, [r7, #4]
<<<<<<< HEAD
 80005da:	f002 f915 	bl	8002808 <HAL_TIM_ReadCapturedValue>
=======
 80005da:	f002 f921 	bl	8002820 <HAL_TIM_ReadCapturedValue>
>>>>>>> AWS
 80005de:	4603      	mov	r3, r0
 80005e0:	461a      	mov	r2, r3
 80005e2:	4b2a      	ldr	r3, [pc, #168]	; (800068c <HAL_TIM_IC_CaptureCallback+0x1bc>)
 80005e4:	601a      	str	r2, [r3, #0]
				if(t2_timer5>t1_timer5)
 80005e6:	4b29      	ldr	r3, [pc, #164]	; (800068c <HAL_TIM_IC_CaptureCallback+0x1bc>)
 80005e8:	681a      	ldr	r2, [r3, #0]
 80005ea:	4b27      	ldr	r3, [pc, #156]	; (8000688 <HAL_TIM_IC_CaptureCallback+0x1b8>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	429a      	cmp	r2, r3
 80005f0:	dd07      	ble.n	8000602 <HAL_TIM_IC_CaptureCallback+0x132>
					time_timer5=t2_timer5-t1_timer5;
 80005f2:	4b26      	ldr	r3, [pc, #152]	; (800068c <HAL_TIM_IC_CaptureCallback+0x1bc>)
 80005f4:	681a      	ldr	r2, [r3, #0]
 80005f6:	4b24      	ldr	r3, [pc, #144]	; (8000688 <HAL_TIM_IC_CaptureCallback+0x1b8>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	1ad3      	subs	r3, r2, r3
 80005fc:	4a24      	ldr	r2, [pc, #144]	; (8000690 <HAL_TIM_IC_CaptureCallback+0x1c0>)
 80005fe:	6013      	str	r3, [r2, #0]
 8000600:	e010      	b.n	8000624 <HAL_TIM_IC_CaptureCallback+0x154>
				else if(t1_timer5>t2_timer5)
 8000602:	4b21      	ldr	r3, [pc, #132]	; (8000688 <HAL_TIM_IC_CaptureCallback+0x1b8>)
 8000604:	681a      	ldr	r2, [r3, #0]
 8000606:	4b21      	ldr	r3, [pc, #132]	; (800068c <HAL_TIM_IC_CaptureCallback+0x1bc>)
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	429a      	cmp	r2, r3
 800060c:	dd0a      	ble.n	8000624 <HAL_TIM_IC_CaptureCallback+0x154>
					time_timer5 = ((0xffff-t1_timer5)+t2_timer5)+1;
 800060e:	4b1e      	ldr	r3, [pc, #120]	; (8000688 <HAL_TIM_IC_CaptureCallback+0x1b8>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8000616:	33ff      	adds	r3, #255	; 0xff
 8000618:	4a1c      	ldr	r2, [pc, #112]	; (800068c <HAL_TIM_IC_CaptureCallback+0x1bc>)
 800061a:	6812      	ldr	r2, [r2, #0]
 800061c:	4413      	add	r3, r2
 800061e:	3301      	adds	r3, #1
 8000620:	4a1b      	ldr	r2, [pc, #108]	; (8000690 <HAL_TIM_IC_CaptureCallback+0x1c0>)
 8000622:	6013      	str	r3, [r2, #0]
				buffer[1]=(((int)time_timer5*340*100)/((int)2*1000000))+1;
 8000624:	4b1a      	ldr	r3, [pc, #104]	; (8000690 <HAL_TIM_IC_CaptureCallback+0x1c0>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	f248 42d0 	movw	r2, #34000	; 0x84d0
 800062c:	fb02 f303 	mul.w	r3, r2, r3
 8000630:	4a0f      	ldr	r2, [pc, #60]	; (8000670 <HAL_TIM_IC_CaptureCallback+0x1a0>)
 8000632:	fb82 1203 	smull	r1, r2, r2, r3
 8000636:	14d2      	asrs	r2, r2, #19
 8000638:	17db      	asrs	r3, r3, #31
 800063a:	1ad3      	subs	r3, r2, r3
 800063c:	3301      	adds	r3, #1
 800063e:	4a0d      	ldr	r2, [pc, #52]	; (8000674 <HAL_TIM_IC_CaptureCallback+0x1a4>)
 8000640:	6053      	str	r3, [r2, #4]
				flag_timer5=0;
 8000642:	4b10      	ldr	r3, [pc, #64]	; (8000684 <HAL_TIM_IC_CaptureCallback+0x1b4>)
 8000644:	2200      	movs	r2, #0
 8000646:	601a      	str	r2, [r3, #0]
				HAL_TIM_IC_Stop_IT(&htim5, TIM_CHANNEL_4); //disable timer 2
 8000648:	210c      	movs	r1, #12
 800064a:	480c      	ldr	r0, [pc, #48]	; (800067c <HAL_TIM_IC_CaptureCallback+0x1ac>)
<<<<<<< HEAD
 800064c:	f001 fdc2 	bl	80021d4 <HAL_TIM_IC_Stop_IT>
				HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1); // enable timer5
 8000650:	2100      	movs	r1, #0
 8000652:	4809      	ldr	r0, [pc, #36]	; (8000678 <HAL_TIM_IC_CaptureCallback+0x1a8>)
 8000654:	f001 fca4 	bl	8001fa0 <HAL_TIM_IC_Start_IT>
=======
 800064c:	f001 fdce 	bl	80021ec <HAL_TIM_IC_Stop_IT>
				HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1); // enable timer5
 8000650:	2100      	movs	r1, #0
 8000652:	4809      	ldr	r0, [pc, #36]	; (8000678 <HAL_TIM_IC_CaptureCallback+0x1a8>)
 8000654:	f001 fcb0 	bl	8001fb8 <HAL_TIM_IC_Start_IT>
>>>>>>> AWS
}
 8000658:	bf00      	nop
 800065a:	3708      	adds	r7, #8
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}
 8000660:	20000100 	.word	0x20000100
 8000664:	20000104 	.word	0x20000104
 8000668:	20000108 	.word	0x20000108
 800066c:	2000010c 	.word	0x2000010c
 8000670:	431bde83 	.word	0x431bde83
 8000674:	20000110 	.word	0x20000110
 8000678:	2000002c 	.word	0x2000002c
 800067c:	20000074 	.word	0x20000074
 8000680:	40000c00 	.word	0x40000c00
 8000684:	20000118 	.word	0x20000118
 8000688:	2000011c 	.word	0x2000011c
 800068c:	20000120 	.word	0x20000120
 8000690:	20000124 	.word	0x20000124

08000694 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b084      	sub	sp, #16
 8000698:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
<<<<<<< HEAD
 800069a:	f000 fbcd 	bl	8000e38 <HAL_Init>
=======
 800069a:	f000 fbd9 	bl	8000e50 <HAL_Init>
>>>>>>> AWS
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
<<<<<<< HEAD
 800069e:	f000 f87b 	bl	8000798 <SystemClock_Config>
=======
 800069e:	f000 f887 	bl	80007b0 <SystemClock_Config>
>>>>>>> AWS
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
<<<<<<< HEAD
 80006a2:	f000 f9e5 	bl	8000a70 <MX_GPIO_Init>
  MX_TIM2_Init();
 80006a6:	f000 f8d9 	bl	800085c <MX_TIM2_Init>
  MX_TIM5_Init();
 80006aa:	f000 f947 	bl	800093c <MX_TIM5_Init>
  MX_USART1_UART_Init();
 80006ae:	f000 f9b5 	bl	8000a1c <MX_USART1_UART_Init>
=======
 80006a2:	f000 f9f1 	bl	8000a88 <MX_GPIO_Init>
  MX_TIM2_Init();
 80006a6:	f000 f8e5 	bl	8000874 <MX_TIM2_Init>
  MX_TIM5_Init();
 80006aa:	f000 f953 	bl	8000954 <MX_TIM5_Init>
  MX_USART1_UART_Init();
 80006ae:	f000 f9c1 	bl	8000a34 <MX_USART1_UART_Init>
>>>>>>> AWS
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80006b2:	b662      	cpsie	i
}
 80006b4:	bf00      	nop
  /* USER CODE BEGIN 2 */
	__enable_irq(); // enable global interrupt
	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1); // enable timer2
 80006b6:	2100      	movs	r1, #0
<<<<<<< HEAD
 80006b8:	4831      	ldr	r0, [pc, #196]	; (8000780 <main+0xec>)
 80006ba:	f001 fc71 	bl	8001fa0 <HAL_TIM_IC_Start_IT>
=======
 80006b8:	4837      	ldr	r0, [pc, #220]	; (8000798 <main+0x104>)
 80006ba:	f001 fc7d 	bl	8001fb8 <HAL_TIM_IC_Start_IT>
>>>>>>> AWS
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		//enable trigger for ultrasonic1
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1,GPIO_PIN_SET);
 80006be:	2201      	movs	r2, #1
 80006c0:	2102      	movs	r1, #2
<<<<<<< HEAD
 80006c2:	4830      	ldr	r0, [pc, #192]	; (8000784 <main+0xf0>)
 80006c4:	f000 ff52 	bl	800156c <HAL_GPIO_WritePin>
=======
 80006c2:	4836      	ldr	r0, [pc, #216]	; (800079c <main+0x108>)
 80006c4:	f000 ff5e 	bl	8001584 <HAL_GPIO_WritePin>
>>>>>>> AWS
		for( int i=0;i<80;i++);
 80006c8:	2300      	movs	r3, #0
 80006ca:	60fb      	str	r3, [r7, #12]
 80006cc:	e002      	b.n	80006d4 <main+0x40>
 80006ce:	68fb      	ldr	r3, [r7, #12]
 80006d0:	3301      	adds	r3, #1
 80006d2:	60fb      	str	r3, [r7, #12]
 80006d4:	68fb      	ldr	r3, [r7, #12]
 80006d6:	2b4f      	cmp	r3, #79	; 0x4f
 80006d8:	ddf9      	ble.n	80006ce <main+0x3a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1,GPIO_PIN_RESET);
 80006da:	2200      	movs	r2, #0
 80006dc:	2102      	movs	r1, #2
<<<<<<< HEAD
 80006de:	4829      	ldr	r0, [pc, #164]	; (8000784 <main+0xf0>)
 80006e0:	f000 ff44 	bl	800156c <HAL_GPIO_WritePin>
=======
 80006de:	482f      	ldr	r0, [pc, #188]	; (800079c <main+0x108>)
 80006e0:	f000 ff50 	bl	8001584 <HAL_GPIO_WritePin>
>>>>>>> AWS
		for( int i=0;i<48000;i++);
 80006e4:	2300      	movs	r3, #0
 80006e6:	60bb      	str	r3, [r7, #8]
 80006e8:	e002      	b.n	80006f0 <main+0x5c>
 80006ea:	68bb      	ldr	r3, [r7, #8]
 80006ec:	3301      	adds	r3, #1
 80006ee:	60bb      	str	r3, [r7, #8]
 80006f0:	68bb      	ldr	r3, [r7, #8]
 80006f2:	f64b 327f 	movw	r2, #47999	; 0xbb7f
 80006f6:	4293      	cmp	r3, r2
 80006f8:	ddf7      	ble.n	80006ea <main+0x56>

		// if there is something near ultrasonic1 the led will be on
		if(buffer[0]<20)
<<<<<<< HEAD
 80006fa:	4b23      	ldr	r3, [pc, #140]	; (8000788 <main+0xf4>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	2b13      	cmp	r3, #19
 8000700:	dc05      	bgt.n	800070e <main+0x7a>
		{

			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2,GPIO_PIN_SET);
 8000702:	2201      	movs	r2, #1
 8000704:	2104      	movs	r1, #4
 8000706:	481f      	ldr	r0, [pc, #124]	; (8000784 <main+0xf0>)
 8000708:	f000 ff30 	bl	800156c <HAL_GPIO_WritePin>
 800070c:	e004      	b.n	8000718 <main+0x84>
=======
 80006fa:	4b29      	ldr	r3, [pc, #164]	; (80007a0 <main+0x10c>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	2b13      	cmp	r3, #19
 8000700:	dc08      	bgt.n	8000714 <main+0x80>
		{
			tx_Buffer[0]='A';
 8000702:	4b28      	ldr	r3, [pc, #160]	; (80007a4 <main+0x110>)
 8000704:	2241      	movs	r2, #65	; 0x41
 8000706:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2,GPIO_PIN_SET);
 8000708:	2201      	movs	r2, #1
 800070a:	2104      	movs	r1, #4
 800070c:	4823      	ldr	r0, [pc, #140]	; (800079c <main+0x108>)
 800070e:	f000 ff39 	bl	8001584 <HAL_GPIO_WritePin>
 8000712:	e007      	b.n	8000724 <main+0x90>
>>>>>>> AWS
		}
		else
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2,GPIO_PIN_RESET);
<<<<<<< HEAD
 800070e:	2200      	movs	r2, #0
 8000710:	2104      	movs	r1, #4
 8000712:	481c      	ldr	r0, [pc, #112]	; (8000784 <main+0xf0>)
 8000714:	f000 ff2a 	bl	800156c <HAL_GPIO_WritePin>

=======
 8000714:	2200      	movs	r2, #0
 8000716:	2104      	movs	r1, #4
 8000718:	4820      	ldr	r0, [pc, #128]	; (800079c <main+0x108>)
 800071a:	f000 ff33 	bl	8001584 <HAL_GPIO_WritePin>
			tx_Buffer[0]='B';
 800071e:	4b21      	ldr	r3, [pc, #132]	; (80007a4 <main+0x110>)
 8000720:	2242      	movs	r2, #66	; 0x42
 8000722:	701a      	strb	r2, [r3, #0]
>>>>>>> AWS
		}

		//enable trigger for ultrasonic2
		HAL_GPIO_WritePin(TRIG_PORT_U2, TRIG_PIN_U2,GPIO_PIN_SET);
<<<<<<< HEAD
 8000718:	2201      	movs	r2, #1
 800071a:	2110      	movs	r1, #16
 800071c:	4819      	ldr	r0, [pc, #100]	; (8000784 <main+0xf0>)
 800071e:	f000 ff25 	bl	800156c <HAL_GPIO_WritePin>
		for( int i=0;i<80;i++); //delay
 8000722:	2300      	movs	r3, #0
 8000724:	607b      	str	r3, [r7, #4]
 8000726:	e002      	b.n	800072e <main+0x9a>
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	3301      	adds	r3, #1
 800072c:	607b      	str	r3, [r7, #4]
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	2b4f      	cmp	r3, #79	; 0x4f
 8000732:	ddf9      	ble.n	8000728 <main+0x94>
		HAL_GPIO_WritePin(TRIG_PORT_U2, TRIG_PIN_U2,GPIO_PIN_RESET);
 8000734:	2200      	movs	r2, #0
 8000736:	2110      	movs	r1, #16
 8000738:	4812      	ldr	r0, [pc, #72]	; (8000784 <main+0xf0>)
 800073a:	f000 ff17 	bl	800156c <HAL_GPIO_WritePin>
		for( int i=0;i<48000;i++);  //delay
 800073e:	2300      	movs	r3, #0
 8000740:	603b      	str	r3, [r7, #0]
 8000742:	e002      	b.n	800074a <main+0xb6>
 8000744:	683b      	ldr	r3, [r7, #0]
 8000746:	3301      	adds	r3, #1
 8000748:	603b      	str	r3, [r7, #0]
 800074a:	683b      	ldr	r3, [r7, #0]
 800074c:	f64b 327f 	movw	r2, #47999	; 0xbb7f
 8000750:	4293      	cmp	r3, r2
 8000752:	ddf7      	ble.n	8000744 <main+0xb0>

		// if there is something near ultrasonic2 the led will be on
		if(buffer[1]<20)
 8000754:	4b0c      	ldr	r3, [pc, #48]	; (8000788 <main+0xf4>)
 8000756:	685b      	ldr	r3, [r3, #4]
 8000758:	2b13      	cmp	r3, #19
 800075a:	dc05      	bgt.n	8000768 <main+0xd4>
		{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,GPIO_PIN_SET);
 800075c:	2201      	movs	r2, #1
 800075e:	2101      	movs	r1, #1
 8000760:	480a      	ldr	r0, [pc, #40]	; (800078c <main+0xf8>)
 8000762:	f000 ff03 	bl	800156c <HAL_GPIO_WritePin>
 8000766:	e004      	b.n	8000772 <main+0xde>

=======
 8000724:	2201      	movs	r2, #1
 8000726:	2110      	movs	r1, #16
 8000728:	481c      	ldr	r0, [pc, #112]	; (800079c <main+0x108>)
 800072a:	f000 ff2b 	bl	8001584 <HAL_GPIO_WritePin>
		for( int i=0;i<80;i++); //delay
 800072e:	2300      	movs	r3, #0
 8000730:	607b      	str	r3, [r7, #4]
 8000732:	e002      	b.n	800073a <main+0xa6>
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	3301      	adds	r3, #1
 8000738:	607b      	str	r3, [r7, #4]
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	2b4f      	cmp	r3, #79	; 0x4f
 800073e:	ddf9      	ble.n	8000734 <main+0xa0>
		HAL_GPIO_WritePin(TRIG_PORT_U2, TRIG_PIN_U2,GPIO_PIN_RESET);
 8000740:	2200      	movs	r2, #0
 8000742:	2110      	movs	r1, #16
 8000744:	4815      	ldr	r0, [pc, #84]	; (800079c <main+0x108>)
 8000746:	f000 ff1d 	bl	8001584 <HAL_GPIO_WritePin>
		for( int i=0;i<48000;i++);  //delay
 800074a:	2300      	movs	r3, #0
 800074c:	603b      	str	r3, [r7, #0]
 800074e:	e002      	b.n	8000756 <main+0xc2>
 8000750:	683b      	ldr	r3, [r7, #0]
 8000752:	3301      	adds	r3, #1
 8000754:	603b      	str	r3, [r7, #0]
 8000756:	683b      	ldr	r3, [r7, #0]
 8000758:	f64b 327f 	movw	r2, #47999	; 0xbb7f
 800075c:	4293      	cmp	r3, r2
 800075e:	ddf7      	ble.n	8000750 <main+0xbc>

		// if there is something near ultrasonic2 the led will be on
		if(buffer[1]<20)
 8000760:	4b0f      	ldr	r3, [pc, #60]	; (80007a0 <main+0x10c>)
 8000762:	685b      	ldr	r3, [r3, #4]
 8000764:	2b13      	cmp	r3, #19
 8000766:	dc08      	bgt.n	800077a <main+0xe6>
		{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,GPIO_PIN_SET);
 8000768:	2201      	movs	r2, #1
 800076a:	2101      	movs	r1, #1
 800076c:	480e      	ldr	r0, [pc, #56]	; (80007a8 <main+0x114>)
 800076e:	f000 ff09 	bl	8001584 <HAL_GPIO_WritePin>
			tx_Buffer[0]='C';
 8000772:	4b0c      	ldr	r3, [pc, #48]	; (80007a4 <main+0x110>)
 8000774:	2243      	movs	r2, #67	; 0x43
 8000776:	701a      	strb	r2, [r3, #0]
 8000778:	e007      	b.n	800078a <main+0xf6>
>>>>>>> AWS
		}
		else
		{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,GPIO_PIN_RESET);
<<<<<<< HEAD
 8000768:	2200      	movs	r2, #0
 800076a:	2101      	movs	r1, #1
 800076c:	4807      	ldr	r0, [pc, #28]	; (800078c <main+0xf8>)
 800076e:	f000 fefd 	bl	800156c <HAL_GPIO_WritePin>

		}

		HAL_UART_Transmit(&huart1, tx_Buffer, 2, 10);
 8000772:	230a      	movs	r3, #10
 8000774:	2202      	movs	r2, #2
 8000776:	4906      	ldr	r1, [pc, #24]	; (8000790 <main+0xfc>)
 8000778:	4806      	ldr	r0, [pc, #24]	; (8000794 <main+0x100>)
 800077a:	f002 fbde 	bl	8002f3a <HAL_UART_Transmit>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1,GPIO_PIN_SET);
 800077e:	e79e      	b.n	80006be <main+0x2a>
 8000780:	2000002c 	.word	0x2000002c
 8000784:	40020000 	.word	0x40020000
 8000788:	20000110 	.word	0x20000110
 800078c:	40020400 	.word	0x40020400
 8000790:	20000000 	.word	0x20000000
 8000794:	200000bc 	.word	0x200000bc

08000798 <SystemClock_Config>:
=======
 800077a:	2200      	movs	r2, #0
 800077c:	2101      	movs	r1, #1
 800077e:	480a      	ldr	r0, [pc, #40]	; (80007a8 <main+0x114>)
 8000780:	f000 ff00 	bl	8001584 <HAL_GPIO_WritePin>
			tx_Buffer[0]='D';
 8000784:	4b07      	ldr	r3, [pc, #28]	; (80007a4 <main+0x110>)
 8000786:	2244      	movs	r2, #68	; 0x44
 8000788:	701a      	strb	r2, [r3, #0]
		}
		HAL_UART_Transmit(&huart1, tx_Buffer, 2, 10);
 800078a:	230a      	movs	r3, #10
 800078c:	2202      	movs	r2, #2
 800078e:	4905      	ldr	r1, [pc, #20]	; (80007a4 <main+0x110>)
 8000790:	4806      	ldr	r0, [pc, #24]	; (80007ac <main+0x118>)
 8000792:	f002 fbde 	bl	8002f52 <HAL_UART_Transmit>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1,GPIO_PIN_SET);
 8000796:	e792      	b.n	80006be <main+0x2a>
 8000798:	2000002c 	.word	0x2000002c
 800079c:	40020000 	.word	0x40020000
 80007a0:	20000110 	.word	0x20000110
 80007a4:	20000000 	.word	0x20000000
 80007a8:	40020400 	.word	0x40020400
 80007ac:	200000bc 	.word	0x200000bc

080007b0 <SystemClock_Config>:
>>>>>>> AWS
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
<<<<<<< HEAD
 8000798:	b580      	push	{r7, lr}
 800079a:	b094      	sub	sp, #80	; 0x50
 800079c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800079e:	f107 0320 	add.w	r3, r7, #32
 80007a2:	2230      	movs	r2, #48	; 0x30
 80007a4:	2100      	movs	r1, #0
 80007a6:	4618      	mov	r0, r3
 80007a8:	f003 fb8e 	bl	8003ec8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007ac:	f107 030c 	add.w	r3, r7, #12
 80007b0:	2200      	movs	r2, #0
 80007b2:	601a      	str	r2, [r3, #0]
 80007b4:	605a      	str	r2, [r3, #4]
 80007b6:	609a      	str	r2, [r3, #8]
 80007b8:	60da      	str	r2, [r3, #12]
 80007ba:	611a      	str	r2, [r3, #16]
=======
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b094      	sub	sp, #80	; 0x50
 80007b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007b6:	f107 0320 	add.w	r3, r7, #32
 80007ba:	2230      	movs	r2, #48	; 0x30
 80007bc:	2100      	movs	r1, #0
 80007be:	4618      	mov	r0, r3
 80007c0:	f003 fb8e 	bl	8003ee0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007c4:	f107 030c 	add.w	r3, r7, #12
 80007c8:	2200      	movs	r2, #0
 80007ca:	601a      	str	r2, [r3, #0]
 80007cc:	605a      	str	r2, [r3, #4]
 80007ce:	609a      	str	r2, [r3, #8]
 80007d0:	60da      	str	r2, [r3, #12]
 80007d2:	611a      	str	r2, [r3, #16]
>>>>>>> AWS

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
<<<<<<< HEAD
 80007bc:	2300      	movs	r3, #0
 80007be:	60bb      	str	r3, [r7, #8]
 80007c0:	4b24      	ldr	r3, [pc, #144]	; (8000854 <SystemClock_Config+0xbc>)
 80007c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007c4:	4a23      	ldr	r2, [pc, #140]	; (8000854 <SystemClock_Config+0xbc>)
 80007c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007ca:	6413      	str	r3, [r2, #64]	; 0x40
 80007cc:	4b21      	ldr	r3, [pc, #132]	; (8000854 <SystemClock_Config+0xbc>)
 80007ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007d4:	60bb      	str	r3, [r7, #8]
 80007d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80007d8:	2300      	movs	r3, #0
 80007da:	607b      	str	r3, [r7, #4]
 80007dc:	4b1e      	ldr	r3, [pc, #120]	; (8000858 <SystemClock_Config+0xc0>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80007e4:	4a1c      	ldr	r2, [pc, #112]	; (8000858 <SystemClock_Config+0xc0>)
 80007e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80007ea:	6013      	str	r3, [r2, #0]
 80007ec:	4b1a      	ldr	r3, [pc, #104]	; (8000858 <SystemClock_Config+0xc0>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007f4:	607b      	str	r3, [r7, #4]
 80007f6:	687b      	ldr	r3, [r7, #4]
=======
 80007d4:	2300      	movs	r3, #0
 80007d6:	60bb      	str	r3, [r7, #8]
 80007d8:	4b24      	ldr	r3, [pc, #144]	; (800086c <SystemClock_Config+0xbc>)
 80007da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007dc:	4a23      	ldr	r2, [pc, #140]	; (800086c <SystemClock_Config+0xbc>)
 80007de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007e2:	6413      	str	r3, [r2, #64]	; 0x40
 80007e4:	4b21      	ldr	r3, [pc, #132]	; (800086c <SystemClock_Config+0xbc>)
 80007e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007ec:	60bb      	str	r3, [r7, #8]
 80007ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80007f0:	2300      	movs	r3, #0
 80007f2:	607b      	str	r3, [r7, #4]
 80007f4:	4b1e      	ldr	r3, [pc, #120]	; (8000870 <SystemClock_Config+0xc0>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80007fc:	4a1c      	ldr	r2, [pc, #112]	; (8000870 <SystemClock_Config+0xc0>)
 80007fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000802:	6013      	str	r3, [r2, #0]
 8000804:	4b1a      	ldr	r3, [pc, #104]	; (8000870 <SystemClock_Config+0xc0>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800080c:	607b      	str	r3, [r7, #4]
 800080e:	687b      	ldr	r3, [r7, #4]
>>>>>>> AWS

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
<<<<<<< HEAD
 80007f8:	230a      	movs	r3, #10
 80007fa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007fc:	2301      	movs	r3, #1
 80007fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000800:	2310      	movs	r3, #16
 8000802:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000804:	2301      	movs	r3, #1
 8000806:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000808:	2300      	movs	r3, #0
 800080a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800080c:	f107 0320 	add.w	r3, r7, #32
 8000810:	4618      	mov	r0, r3
 8000812:	f000 fec5 	bl	80015a0 <HAL_RCC_OscConfig>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <SystemClock_Config+0x88>
  {
    Error_Handler();
 800081c:	f000 f980 	bl	8000b20 <Error_Handler>
=======
 8000810:	230a      	movs	r3, #10
 8000812:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000814:	2301      	movs	r3, #1
 8000816:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000818:	2310      	movs	r3, #16
 800081a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800081c:	2301      	movs	r3, #1
 800081e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000820:	2300      	movs	r3, #0
 8000822:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000824:	f107 0320 	add.w	r3, r7, #32
 8000828:	4618      	mov	r0, r3
 800082a:	f000 fec5 	bl	80015b8 <HAL_RCC_OscConfig>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000834:	f000 f980 	bl	8000b38 <Error_Handler>
>>>>>>> AWS
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
<<<<<<< HEAD
 8000820:	230f      	movs	r3, #15
 8000822:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000824:	2300      	movs	r3, #0
 8000826:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000828:	2300      	movs	r3, #0
 800082a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800082c:	2300      	movs	r3, #0
 800082e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000830:	2300      	movs	r3, #0
 8000832:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000834:	f107 030c 	add.w	r3, r7, #12
 8000838:	2100      	movs	r1, #0
 800083a:	4618      	mov	r0, r3
 800083c:	f001 f928 	bl	8001a90 <HAL_RCC_ClockConfig>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000846:	f000 f96b 	bl	8000b20 <Error_Handler>
  }
}
 800084a:	bf00      	nop
 800084c:	3750      	adds	r7, #80	; 0x50
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	40023800 	.word	0x40023800
 8000858:	40007000 	.word	0x40007000

0800085c <MX_TIM2_Init>:
=======
 8000838:	230f      	movs	r3, #15
 800083a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800083c:	2300      	movs	r3, #0
 800083e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000840:	2300      	movs	r3, #0
 8000842:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000844:	2300      	movs	r3, #0
 8000846:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000848:	2300      	movs	r3, #0
 800084a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800084c:	f107 030c 	add.w	r3, r7, #12
 8000850:	2100      	movs	r1, #0
 8000852:	4618      	mov	r0, r3
 8000854:	f001 f928 	bl	8001aa8 <HAL_RCC_ClockConfig>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800085e:	f000 f96b 	bl	8000b38 <Error_Handler>
  }
}
 8000862:	bf00      	nop
 8000864:	3750      	adds	r7, #80	; 0x50
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	40023800 	.word	0x40023800
 8000870:	40007000 	.word	0x40007000

08000874 <MX_TIM2_Init>:
>>>>>>> AWS
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
<<<<<<< HEAD
 800085c:	b580      	push	{r7, lr}
 800085e:	b08a      	sub	sp, #40	; 0x28
 8000860:	af00      	add	r7, sp, #0
=======
 8000874:	b580      	push	{r7, lr}
 8000876:	b08a      	sub	sp, #40	; 0x28
 8000878:	af00      	add	r7, sp, #0
>>>>>>> AWS

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
<<<<<<< HEAD
 8000862:	f107 0318 	add.w	r3, r7, #24
 8000866:	2200      	movs	r2, #0
 8000868:	601a      	str	r2, [r3, #0]
 800086a:	605a      	str	r2, [r3, #4]
 800086c:	609a      	str	r2, [r3, #8]
 800086e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000870:	f107 0310 	add.w	r3, r7, #16
 8000874:	2200      	movs	r2, #0
 8000876:	601a      	str	r2, [r3, #0]
 8000878:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800087a:	463b      	mov	r3, r7
 800087c:	2200      	movs	r2, #0
 800087e:	601a      	str	r2, [r3, #0]
 8000880:	605a      	str	r2, [r3, #4]
 8000882:	609a      	str	r2, [r3, #8]
 8000884:	60da      	str	r2, [r3, #12]
=======
 800087a:	f107 0318 	add.w	r3, r7, #24
 800087e:	2200      	movs	r2, #0
 8000880:	601a      	str	r2, [r3, #0]
 8000882:	605a      	str	r2, [r3, #4]
 8000884:	609a      	str	r2, [r3, #8]
 8000886:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000888:	f107 0310 	add.w	r3, r7, #16
 800088c:	2200      	movs	r2, #0
 800088e:	601a      	str	r2, [r3, #0]
 8000890:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000892:	463b      	mov	r3, r7
 8000894:	2200      	movs	r2, #0
 8000896:	601a      	str	r2, [r3, #0]
 8000898:	605a      	str	r2, [r3, #4]
 800089a:	609a      	str	r2, [r3, #8]
 800089c:	60da      	str	r2, [r3, #12]
>>>>>>> AWS

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
<<<<<<< HEAD
 8000886:	4b2c      	ldr	r3, [pc, #176]	; (8000938 <MX_TIM2_Init+0xdc>)
 8000888:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800088c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 15;
 800088e:	4b2a      	ldr	r3, [pc, #168]	; (8000938 <MX_TIM2_Init+0xdc>)
 8000890:	220f      	movs	r2, #15
 8000892:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000894:	4b28      	ldr	r3, [pc, #160]	; (8000938 <MX_TIM2_Init+0xdc>)
 8000896:	2200      	movs	r2, #0
 8000898:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800089a:	4b27      	ldr	r3, [pc, #156]	; (8000938 <MX_TIM2_Init+0xdc>)
 800089c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008a0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008a2:	4b25      	ldr	r3, [pc, #148]	; (8000938 <MX_TIM2_Init+0xdc>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008a8:	4b23      	ldr	r3, [pc, #140]	; (8000938 <MX_TIM2_Init+0xdc>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80008ae:	4822      	ldr	r0, [pc, #136]	; (8000938 <MX_TIM2_Init+0xdc>)
 80008b0:	f001 face 	bl	8001e50 <HAL_TIM_Base_Init>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 80008ba:	f000 f931 	bl	8000b20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008c2:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80008c4:	f107 0318 	add.w	r3, r7, #24
 80008c8:	4619      	mov	r1, r3
 80008ca:	481b      	ldr	r0, [pc, #108]	; (8000938 <MX_TIM2_Init+0xdc>)
 80008cc:	f001 fed4 	bl	8002678 <HAL_TIM_ConfigClockSource>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80008d6:	f000 f923 	bl	8000b20 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80008da:	4817      	ldr	r0, [pc, #92]	; (8000938 <MX_TIM2_Init+0xdc>)
 80008dc:	f001 fb07 	bl	8001eee <HAL_TIM_IC_Init>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80008e6:	f000 f91b 	bl	8000b20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008ea:	2300      	movs	r3, #0
 80008ec:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008ee:	2300      	movs	r3, #0
 80008f0:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80008f2:	f107 0310 	add.w	r3, r7, #16
 80008f6:	4619      	mov	r1, r3
 80008f8:	480f      	ldr	r0, [pc, #60]	; (8000938 <MX_TIM2_Init+0xdc>)
 80008fa:	f002 fa4f 	bl	8002d9c <HAL_TIMEx_MasterConfigSynchronization>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 8000904:	f000 f90c 	bl	8000b20 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8000908:	230a      	movs	r3, #10
 800090a:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800090c:	2301      	movs	r3, #1
 800090e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000910:	2300      	movs	r3, #0
 8000912:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000914:	2300      	movs	r3, #0
 8000916:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000918:	463b      	mov	r3, r7
 800091a:	2200      	movs	r2, #0
 800091c:	4619      	mov	r1, r3
 800091e:	4806      	ldr	r0, [pc, #24]	; (8000938 <MX_TIM2_Init+0xdc>)
 8000920:	f001 fe0e 	bl	8002540 <HAL_TIM_IC_ConfigChannel>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 800092a:	f000 f8f9 	bl	8000b20 <Error_Handler>
=======
 800089e:	4b2c      	ldr	r3, [pc, #176]	; (8000950 <MX_TIM2_Init+0xdc>)
 80008a0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008a4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 15;
 80008a6:	4b2a      	ldr	r3, [pc, #168]	; (8000950 <MX_TIM2_Init+0xdc>)
 80008a8:	220f      	movs	r2, #15
 80008aa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008ac:	4b28      	ldr	r3, [pc, #160]	; (8000950 <MX_TIM2_Init+0xdc>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80008b2:	4b27      	ldr	r3, [pc, #156]	; (8000950 <MX_TIM2_Init+0xdc>)
 80008b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008b8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008ba:	4b25      	ldr	r3, [pc, #148]	; (8000950 <MX_TIM2_Init+0xdc>)
 80008bc:	2200      	movs	r2, #0
 80008be:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008c0:	4b23      	ldr	r3, [pc, #140]	; (8000950 <MX_TIM2_Init+0xdc>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80008c6:	4822      	ldr	r0, [pc, #136]	; (8000950 <MX_TIM2_Init+0xdc>)
 80008c8:	f001 face 	bl	8001e68 <HAL_TIM_Base_Init>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 80008d2:	f000 f931 	bl	8000b38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008da:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80008dc:	f107 0318 	add.w	r3, r7, #24
 80008e0:	4619      	mov	r1, r3
 80008e2:	481b      	ldr	r0, [pc, #108]	; (8000950 <MX_TIM2_Init+0xdc>)
 80008e4:	f001 fed4 	bl	8002690 <HAL_TIM_ConfigClockSource>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80008ee:	f000 f923 	bl	8000b38 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80008f2:	4817      	ldr	r0, [pc, #92]	; (8000950 <MX_TIM2_Init+0xdc>)
 80008f4:	f001 fb07 	bl	8001f06 <HAL_TIM_IC_Init>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80008fe:	f000 f91b 	bl	8000b38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000902:	2300      	movs	r3, #0
 8000904:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000906:	2300      	movs	r3, #0
 8000908:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800090a:	f107 0310 	add.w	r3, r7, #16
 800090e:	4619      	mov	r1, r3
 8000910:	480f      	ldr	r0, [pc, #60]	; (8000950 <MX_TIM2_Init+0xdc>)
 8000912:	f002 fa4f 	bl	8002db4 <HAL_TIMEx_MasterConfigSynchronization>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d001      	beq.n	8000920 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 800091c:	f000 f90c 	bl	8000b38 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8000920:	230a      	movs	r3, #10
 8000922:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000924:	2301      	movs	r3, #1
 8000926:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000928:	2300      	movs	r3, #0
 800092a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800092c:	2300      	movs	r3, #0
 800092e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000930:	463b      	mov	r3, r7
 8000932:	2200      	movs	r2, #0
 8000934:	4619      	mov	r1, r3
 8000936:	4806      	ldr	r0, [pc, #24]	; (8000950 <MX_TIM2_Init+0xdc>)
 8000938:	f001 fe0e 	bl	8002558 <HAL_TIM_IC_ConfigChannel>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 8000942:	f000 f8f9 	bl	8000b38 <Error_Handler>
>>>>>>> AWS
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
<<<<<<< HEAD
 800092e:	bf00      	nop
 8000930:	3728      	adds	r7, #40	; 0x28
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	2000002c 	.word	0x2000002c

0800093c <MX_TIM5_Init>:
=======
 8000946:	bf00      	nop
 8000948:	3728      	adds	r7, #40	; 0x28
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	2000002c 	.word	0x2000002c

08000954 <MX_TIM5_Init>:
>>>>>>> AWS
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
<<<<<<< HEAD
 800093c:	b580      	push	{r7, lr}
 800093e:	b08a      	sub	sp, #40	; 0x28
 8000940:	af00      	add	r7, sp, #0
=======
 8000954:	b580      	push	{r7, lr}
 8000956:	b08a      	sub	sp, #40	; 0x28
 8000958:	af00      	add	r7, sp, #0
>>>>>>> AWS

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
<<<<<<< HEAD
 8000942:	f107 0318 	add.w	r3, r7, #24
 8000946:	2200      	movs	r2, #0
 8000948:	601a      	str	r2, [r3, #0]
 800094a:	605a      	str	r2, [r3, #4]
 800094c:	609a      	str	r2, [r3, #8]
 800094e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000950:	f107 0310 	add.w	r3, r7, #16
 8000954:	2200      	movs	r2, #0
 8000956:	601a      	str	r2, [r3, #0]
 8000958:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800095a:	463b      	mov	r3, r7
 800095c:	2200      	movs	r2, #0
 800095e:	601a      	str	r2, [r3, #0]
 8000960:	605a      	str	r2, [r3, #4]
 8000962:	609a      	str	r2, [r3, #8]
 8000964:	60da      	str	r2, [r3, #12]
=======
 800095a:	f107 0318 	add.w	r3, r7, #24
 800095e:	2200      	movs	r2, #0
 8000960:	601a      	str	r2, [r3, #0]
 8000962:	605a      	str	r2, [r3, #4]
 8000964:	609a      	str	r2, [r3, #8]
 8000966:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000968:	f107 0310 	add.w	r3, r7, #16
 800096c:	2200      	movs	r2, #0
 800096e:	601a      	str	r2, [r3, #0]
 8000970:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000972:	463b      	mov	r3, r7
 8000974:	2200      	movs	r2, #0
 8000976:	601a      	str	r2, [r3, #0]
 8000978:	605a      	str	r2, [r3, #4]
 800097a:	609a      	str	r2, [r3, #8]
 800097c:	60da      	str	r2, [r3, #12]
>>>>>>> AWS

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
<<<<<<< HEAD
 8000966:	4b2b      	ldr	r3, [pc, #172]	; (8000a14 <MX_TIM5_Init+0xd8>)
 8000968:	4a2b      	ldr	r2, [pc, #172]	; (8000a18 <MX_TIM5_Init+0xdc>)
 800096a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 15;
 800096c:	4b29      	ldr	r3, [pc, #164]	; (8000a14 <MX_TIM5_Init+0xd8>)
 800096e:	220f      	movs	r2, #15
 8000970:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000972:	4b28      	ldr	r3, [pc, #160]	; (8000a14 <MX_TIM5_Init+0xd8>)
 8000974:	2200      	movs	r2, #0
 8000976:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8000978:	4b26      	ldr	r3, [pc, #152]	; (8000a14 <MX_TIM5_Init+0xd8>)
 800097a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800097e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000980:	4b24      	ldr	r3, [pc, #144]	; (8000a14 <MX_TIM5_Init+0xd8>)
 8000982:	2200      	movs	r2, #0
 8000984:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000986:	4b23      	ldr	r3, [pc, #140]	; (8000a14 <MX_TIM5_Init+0xd8>)
 8000988:	2200      	movs	r2, #0
 800098a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800098c:	4821      	ldr	r0, [pc, #132]	; (8000a14 <MX_TIM5_Init+0xd8>)
 800098e:	f001 fa5f 	bl	8001e50 <HAL_TIM_Base_Init>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <MX_TIM5_Init+0x60>
  {
    Error_Handler();
 8000998:	f000 f8c2 	bl	8000b20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800099c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009a0:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80009a2:	f107 0318 	add.w	r3, r7, #24
 80009a6:	4619      	mov	r1, r3
 80009a8:	481a      	ldr	r0, [pc, #104]	; (8000a14 <MX_TIM5_Init+0xd8>)
 80009aa:	f001 fe65 	bl	8002678 <HAL_TIM_ConfigClockSource>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 80009b4:	f000 f8b4 	bl	8000b20 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 80009b8:	4816      	ldr	r0, [pc, #88]	; (8000a14 <MX_TIM5_Init+0xd8>)
 80009ba:	f001 fa98 	bl	8001eee <HAL_TIM_IC_Init>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d001      	beq.n	80009c8 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 80009c4:	f000 f8ac 	bl	8000b20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009c8:	2300      	movs	r3, #0
 80009ca:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009cc:	2300      	movs	r3, #0
 80009ce:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80009d0:	f107 0310 	add.w	r3, r7, #16
 80009d4:	4619      	mov	r1, r3
 80009d6:	480f      	ldr	r0, [pc, #60]	; (8000a14 <MX_TIM5_Init+0xd8>)
 80009d8:	f002 f9e0 	bl	8002d9c <HAL_TIMEx_MasterConfigSynchronization>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <MX_TIM5_Init+0xaa>
  {
    Error_Handler();
 80009e2:	f000 f89d 	bl	8000b20 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 80009e6:	230a      	movs	r3, #10
 80009e8:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80009ea:	2301      	movs	r3, #1
 80009ec:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80009ee:	2300      	movs	r3, #0
 80009f0:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80009f2:	2300      	movs	r3, #0
 80009f4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 80009f6:	463b      	mov	r3, r7
 80009f8:	220c      	movs	r2, #12
 80009fa:	4619      	mov	r1, r3
 80009fc:	4805      	ldr	r0, [pc, #20]	; (8000a14 <MX_TIM5_Init+0xd8>)
 80009fe:	f001 fd9f 	bl	8002540 <HAL_TIM_IC_ConfigChannel>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <MX_TIM5_Init+0xd0>
  {
    Error_Handler();
 8000a08:	f000 f88a 	bl	8000b20 <Error_Handler>
=======
 800097e:	4b2b      	ldr	r3, [pc, #172]	; (8000a2c <MX_TIM5_Init+0xd8>)
 8000980:	4a2b      	ldr	r2, [pc, #172]	; (8000a30 <MX_TIM5_Init+0xdc>)
 8000982:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 15;
 8000984:	4b29      	ldr	r3, [pc, #164]	; (8000a2c <MX_TIM5_Init+0xd8>)
 8000986:	220f      	movs	r2, #15
 8000988:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800098a:	4b28      	ldr	r3, [pc, #160]	; (8000a2c <MX_TIM5_Init+0xd8>)
 800098c:	2200      	movs	r2, #0
 800098e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8000990:	4b26      	ldr	r3, [pc, #152]	; (8000a2c <MX_TIM5_Init+0xd8>)
 8000992:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000996:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000998:	4b24      	ldr	r3, [pc, #144]	; (8000a2c <MX_TIM5_Init+0xd8>)
 800099a:	2200      	movs	r2, #0
 800099c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800099e:	4b23      	ldr	r3, [pc, #140]	; (8000a2c <MX_TIM5_Init+0xd8>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80009a4:	4821      	ldr	r0, [pc, #132]	; (8000a2c <MX_TIM5_Init+0xd8>)
 80009a6:	f001 fa5f 	bl	8001e68 <HAL_TIM_Base_Init>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <MX_TIM5_Init+0x60>
  {
    Error_Handler();
 80009b0:	f000 f8c2 	bl	8000b38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009b8:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80009ba:	f107 0318 	add.w	r3, r7, #24
 80009be:	4619      	mov	r1, r3
 80009c0:	481a      	ldr	r0, [pc, #104]	; (8000a2c <MX_TIM5_Init+0xd8>)
 80009c2:	f001 fe65 	bl	8002690 <HAL_TIM_ConfigClockSource>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d001      	beq.n	80009d0 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 80009cc:	f000 f8b4 	bl	8000b38 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 80009d0:	4816      	ldr	r0, [pc, #88]	; (8000a2c <MX_TIM5_Init+0xd8>)
 80009d2:	f001 fa98 	bl	8001f06 <HAL_TIM_IC_Init>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d001      	beq.n	80009e0 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 80009dc:	f000 f8ac 	bl	8000b38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009e0:	2300      	movs	r3, #0
 80009e2:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009e4:	2300      	movs	r3, #0
 80009e6:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80009e8:	f107 0310 	add.w	r3, r7, #16
 80009ec:	4619      	mov	r1, r3
 80009ee:	480f      	ldr	r0, [pc, #60]	; (8000a2c <MX_TIM5_Init+0xd8>)
 80009f0:	f002 f9e0 	bl	8002db4 <HAL_TIMEx_MasterConfigSynchronization>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <MX_TIM5_Init+0xaa>
  {
    Error_Handler();
 80009fa:	f000 f89d 	bl	8000b38 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 80009fe:	230a      	movs	r3, #10
 8000a00:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000a02:	2301      	movs	r3, #1
 8000a04:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000a06:	2300      	movs	r3, #0
 8000a08:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8000a0e:	463b      	mov	r3, r7
 8000a10:	220c      	movs	r2, #12
 8000a12:	4619      	mov	r1, r3
 8000a14:	4805      	ldr	r0, [pc, #20]	; (8000a2c <MX_TIM5_Init+0xd8>)
 8000a16:	f001 fd9f 	bl	8002558 <HAL_TIM_IC_ConfigChannel>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <MX_TIM5_Init+0xd0>
  {
    Error_Handler();
 8000a20:	f000 f88a 	bl	8000b38 <Error_Handler>
>>>>>>> AWS
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
<<<<<<< HEAD
 8000a0c:	bf00      	nop
 8000a0e:	3728      	adds	r7, #40	; 0x28
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	20000074 	.word	0x20000074
 8000a18:	40000c00 	.word	0x40000c00

08000a1c <MX_USART1_UART_Init>:
=======
 8000a24:	bf00      	nop
 8000a26:	3728      	adds	r7, #40	; 0x28
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	20000074 	.word	0x20000074
 8000a30:	40000c00 	.word	0x40000c00

08000a34 <MX_USART1_UART_Init>:
>>>>>>> AWS
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
<<<<<<< HEAD
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
=======
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
>>>>>>> AWS
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
<<<<<<< HEAD
 8000a20:	4b11      	ldr	r3, [pc, #68]	; (8000a68 <MX_USART1_UART_Init+0x4c>)
 8000a22:	4a12      	ldr	r2, [pc, #72]	; (8000a6c <MX_USART1_UART_Init+0x50>)
 8000a24:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a26:	4b10      	ldr	r3, [pc, #64]	; (8000a68 <MX_USART1_UART_Init+0x4c>)
 8000a28:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a2c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a2e:	4b0e      	ldr	r3, [pc, #56]	; (8000a68 <MX_USART1_UART_Init+0x4c>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a34:	4b0c      	ldr	r3, [pc, #48]	; (8000a68 <MX_USART1_UART_Init+0x4c>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a3a:	4b0b      	ldr	r3, [pc, #44]	; (8000a68 <MX_USART1_UART_Init+0x4c>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a40:	4b09      	ldr	r3, [pc, #36]	; (8000a68 <MX_USART1_UART_Init+0x4c>)
 8000a42:	220c      	movs	r2, #12
 8000a44:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a46:	4b08      	ldr	r3, [pc, #32]	; (8000a68 <MX_USART1_UART_Init+0x4c>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a4c:	4b06      	ldr	r3, [pc, #24]	; (8000a68 <MX_USART1_UART_Init+0x4c>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a52:	4805      	ldr	r0, [pc, #20]	; (8000a68 <MX_USART1_UART_Init+0x4c>)
 8000a54:	f002 fa24 	bl	8002ea0 <HAL_UART_Init>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d001      	beq.n	8000a62 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000a5e:	f000 f85f 	bl	8000b20 <Error_Handler>
=======
 8000a38:	4b11      	ldr	r3, [pc, #68]	; (8000a80 <MX_USART1_UART_Init+0x4c>)
 8000a3a:	4a12      	ldr	r2, [pc, #72]	; (8000a84 <MX_USART1_UART_Init+0x50>)
 8000a3c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a3e:	4b10      	ldr	r3, [pc, #64]	; (8000a80 <MX_USART1_UART_Init+0x4c>)
 8000a40:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a44:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a46:	4b0e      	ldr	r3, [pc, #56]	; (8000a80 <MX_USART1_UART_Init+0x4c>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a4c:	4b0c      	ldr	r3, [pc, #48]	; (8000a80 <MX_USART1_UART_Init+0x4c>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a52:	4b0b      	ldr	r3, [pc, #44]	; (8000a80 <MX_USART1_UART_Init+0x4c>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a58:	4b09      	ldr	r3, [pc, #36]	; (8000a80 <MX_USART1_UART_Init+0x4c>)
 8000a5a:	220c      	movs	r2, #12
 8000a5c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a5e:	4b08      	ldr	r3, [pc, #32]	; (8000a80 <MX_USART1_UART_Init+0x4c>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a64:	4b06      	ldr	r3, [pc, #24]	; (8000a80 <MX_USART1_UART_Init+0x4c>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a6a:	4805      	ldr	r0, [pc, #20]	; (8000a80 <MX_USART1_UART_Init+0x4c>)
 8000a6c:	f002 fa24 	bl	8002eb8 <HAL_UART_Init>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000a76:	f000 f85f 	bl	8000b38 <Error_Handler>
>>>>>>> AWS
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
<<<<<<< HEAD
 8000a62:	bf00      	nop
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	200000bc 	.word	0x200000bc
 8000a6c:	40011000 	.word	0x40011000

08000a70 <MX_GPIO_Init>:
=======
 8000a7a:	bf00      	nop
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	200000bc 	.word	0x200000bc
 8000a84:	40011000 	.word	0x40011000

08000a88 <MX_GPIO_Init>:
>>>>>>> AWS
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
<<<<<<< HEAD
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b088      	sub	sp, #32
 8000a74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a76:	f107 030c 	add.w	r3, r7, #12
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	601a      	str	r2, [r3, #0]
 8000a7e:	605a      	str	r2, [r3, #4]
 8000a80:	609a      	str	r2, [r3, #8]
 8000a82:	60da      	str	r2, [r3, #12]
 8000a84:	611a      	str	r2, [r3, #16]
=======
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b088      	sub	sp, #32
 8000a8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a8e:	f107 030c 	add.w	r3, r7, #12
 8000a92:	2200      	movs	r2, #0
 8000a94:	601a      	str	r2, [r3, #0]
 8000a96:	605a      	str	r2, [r3, #4]
 8000a98:	609a      	str	r2, [r3, #8]
 8000a9a:	60da      	str	r2, [r3, #12]
 8000a9c:	611a      	str	r2, [r3, #16]
>>>>>>> AWS
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
<<<<<<< HEAD
 8000a86:	2300      	movs	r3, #0
 8000a88:	60bb      	str	r3, [r7, #8]
 8000a8a:	4b22      	ldr	r3, [pc, #136]	; (8000b14 <MX_GPIO_Init+0xa4>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8e:	4a21      	ldr	r2, [pc, #132]	; (8000b14 <MX_GPIO_Init+0xa4>)
 8000a90:	f043 0301 	orr.w	r3, r3, #1
 8000a94:	6313      	str	r3, [r2, #48]	; 0x30
 8000a96:	4b1f      	ldr	r3, [pc, #124]	; (8000b14 <MX_GPIO_Init+0xa4>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9a:	f003 0301 	and.w	r3, r3, #1
 8000a9e:	60bb      	str	r3, [r7, #8]
 8000aa0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	607b      	str	r3, [r7, #4]
 8000aa6:	4b1b      	ldr	r3, [pc, #108]	; (8000b14 <MX_GPIO_Init+0xa4>)
 8000aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aaa:	4a1a      	ldr	r2, [pc, #104]	; (8000b14 <MX_GPIO_Init+0xa4>)
 8000aac:	f043 0302 	orr.w	r3, r3, #2
 8000ab0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ab2:	4b18      	ldr	r3, [pc, #96]	; (8000b14 <MX_GPIO_Init+0xa4>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab6:	f003 0302 	and.w	r3, r3, #2
 8000aba:	607b      	str	r3, [r7, #4]
 8000abc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4, GPIO_PIN_RESET);
 8000abe:	2200      	movs	r2, #0
 8000ac0:	2116      	movs	r1, #22
 8000ac2:	4815      	ldr	r0, [pc, #84]	; (8000b18 <MX_GPIO_Init+0xa8>)
 8000ac4:	f000 fd52 	bl	800156c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000ac8:	2200      	movs	r2, #0
 8000aca:	2101      	movs	r1, #1
 8000acc:	4813      	ldr	r0, [pc, #76]	; (8000b1c <MX_GPIO_Init+0xac>)
 8000ace:	f000 fd4d 	bl	800156c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA1 PA2 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4;
 8000ad2:	2316      	movs	r3, #22
 8000ad4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ada:	2300      	movs	r3, #0
 8000adc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ae2:	f107 030c 	add.w	r3, r7, #12
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	480b      	ldr	r0, [pc, #44]	; (8000b18 <MX_GPIO_Init+0xa8>)
 8000aea:	f000 fbbb 	bl	8001264 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000aee:	2301      	movs	r3, #1
 8000af0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af2:	2301      	movs	r3, #1
 8000af4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af6:	2300      	movs	r3, #0
 8000af8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000afa:	2300      	movs	r3, #0
 8000afc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000afe:	f107 030c 	add.w	r3, r7, #12
 8000b02:	4619      	mov	r1, r3
 8000b04:	4805      	ldr	r0, [pc, #20]	; (8000b1c <MX_GPIO_Init+0xac>)
 8000b06:	f000 fbad 	bl	8001264 <HAL_GPIO_Init>
=======
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	60bb      	str	r3, [r7, #8]
 8000aa2:	4b22      	ldr	r3, [pc, #136]	; (8000b2c <MX_GPIO_Init+0xa4>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa6:	4a21      	ldr	r2, [pc, #132]	; (8000b2c <MX_GPIO_Init+0xa4>)
 8000aa8:	f043 0301 	orr.w	r3, r3, #1
 8000aac:	6313      	str	r3, [r2, #48]	; 0x30
 8000aae:	4b1f      	ldr	r3, [pc, #124]	; (8000b2c <MX_GPIO_Init+0xa4>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab2:	f003 0301 	and.w	r3, r3, #1
 8000ab6:	60bb      	str	r3, [r7, #8]
 8000ab8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aba:	2300      	movs	r3, #0
 8000abc:	607b      	str	r3, [r7, #4]
 8000abe:	4b1b      	ldr	r3, [pc, #108]	; (8000b2c <MX_GPIO_Init+0xa4>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	4a1a      	ldr	r2, [pc, #104]	; (8000b2c <MX_GPIO_Init+0xa4>)
 8000ac4:	f043 0302 	orr.w	r3, r3, #2
 8000ac8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aca:	4b18      	ldr	r3, [pc, #96]	; (8000b2c <MX_GPIO_Init+0xa4>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ace:	f003 0302 	and.w	r3, r3, #2
 8000ad2:	607b      	str	r3, [r7, #4]
 8000ad4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4, GPIO_PIN_RESET);
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	2116      	movs	r1, #22
 8000ada:	4815      	ldr	r0, [pc, #84]	; (8000b30 <MX_GPIO_Init+0xa8>)
 8000adc:	f000 fd52 	bl	8001584 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	2101      	movs	r1, #1
 8000ae4:	4813      	ldr	r0, [pc, #76]	; (8000b34 <MX_GPIO_Init+0xac>)
 8000ae6:	f000 fd4d 	bl	8001584 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA1 PA2 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4;
 8000aea:	2316      	movs	r3, #22
 8000aec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aee:	2301      	movs	r3, #1
 8000af0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af2:	2300      	movs	r3, #0
 8000af4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af6:	2300      	movs	r3, #0
 8000af8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000afa:	f107 030c 	add.w	r3, r7, #12
 8000afe:	4619      	mov	r1, r3
 8000b00:	480b      	ldr	r0, [pc, #44]	; (8000b30 <MX_GPIO_Init+0xa8>)
 8000b02:	f000 fbbb 	bl	800127c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b06:	2301      	movs	r3, #1
 8000b08:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b12:	2300      	movs	r3, #0
 8000b14:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b16:	f107 030c 	add.w	r3, r7, #12
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	4805      	ldr	r0, [pc, #20]	; (8000b34 <MX_GPIO_Init+0xac>)
 8000b1e:	f000 fbad 	bl	800127c <HAL_GPIO_Init>
>>>>>>> AWS

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
<<<<<<< HEAD
 8000b0a:	bf00      	nop
 8000b0c:	3720      	adds	r7, #32
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	40023800 	.word	0x40023800
 8000b18:	40020000 	.word	0x40020000
 8000b1c:	40020400 	.word	0x40020400

08000b20 <Error_Handler>:
=======
 8000b22:	bf00      	nop
 8000b24:	3720      	adds	r7, #32
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	40023800 	.word	0x40023800
 8000b30:	40020000 	.word	0x40020000
 8000b34:	40020400 	.word	0x40020400

08000b38 <Error_Handler>:
>>>>>>> AWS
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
<<<<<<< HEAD
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
=======
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
>>>>>>> AWS
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
<<<<<<< HEAD
 8000b24:	b672      	cpsid	i
}
 8000b26:	bf00      	nop
=======
 8000b3c:	b672      	cpsid	i
}
 8000b3e:	bf00      	nop
>>>>>>> AWS
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
<<<<<<< HEAD
 8000b28:	e7fe      	b.n	8000b28 <Error_Handler+0x8>
	...

08000b2c <HAL_MspInit>:
=======
 8000b40:	e7fe      	b.n	8000b40 <Error_Handler+0x8>
	...

08000b44 <HAL_MspInit>:
>>>>>>> AWS
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
<<<<<<< HEAD
 8000b2c:	b480      	push	{r7}
 8000b2e:	b083      	sub	sp, #12
 8000b30:	af00      	add	r7, sp, #0
=======
 8000b44:	b480      	push	{r7}
 8000b46:	b083      	sub	sp, #12
 8000b48:	af00      	add	r7, sp, #0
>>>>>>> AWS
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
<<<<<<< HEAD
 8000b32:	2300      	movs	r3, #0
 8000b34:	607b      	str	r3, [r7, #4]
 8000b36:	4b10      	ldr	r3, [pc, #64]	; (8000b78 <HAL_MspInit+0x4c>)
 8000b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b3a:	4a0f      	ldr	r2, [pc, #60]	; (8000b78 <HAL_MspInit+0x4c>)
 8000b3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b40:	6453      	str	r3, [r2, #68]	; 0x44
 8000b42:	4b0d      	ldr	r3, [pc, #52]	; (8000b78 <HAL_MspInit+0x4c>)
 8000b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b4a:	607b      	str	r3, [r7, #4]
 8000b4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b4e:	2300      	movs	r3, #0
 8000b50:	603b      	str	r3, [r7, #0]
 8000b52:	4b09      	ldr	r3, [pc, #36]	; (8000b78 <HAL_MspInit+0x4c>)
 8000b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b56:	4a08      	ldr	r2, [pc, #32]	; (8000b78 <HAL_MspInit+0x4c>)
 8000b58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b5c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b5e:	4b06      	ldr	r3, [pc, #24]	; (8000b78 <HAL_MspInit+0x4c>)
 8000b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b66:	603b      	str	r3, [r7, #0]
 8000b68:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);

  /* USER CODE BEGIN MspInit 1 */

 8000b6a:	bf00      	nop
 8000b6c:	370c      	adds	r7, #12
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop
 8000b78:	40023800 	.word	0x40023800

08000b7c <HAL_TIM_Base_MspInit>:
/**
* @brief SPI MSP Initialization
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b08c      	sub	sp, #48	; 0x30
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
 8000b84:	f107 031c 	add.w	r3, r7, #28
 8000b88:	2200      	movs	r2, #0
 8000b8a:	601a      	str	r2, [r3, #0]
 8000b8c:	605a      	str	r2, [r3, #4]
 8000b8e:	609a      	str	r2, [r3, #8]
 8000b90:	60da      	str	r2, [r3, #12]
 8000b92:	611a      	str	r2, [r3, #16]
{
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b9c:	d134      	bne.n	8000c08 <HAL_TIM_Base_MspInit+0x8c>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hspi->Instance==SPI1)
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	61bb      	str	r3, [r7, #24]
 8000ba2:	4b38      	ldr	r3, [pc, #224]	; (8000c84 <HAL_TIM_Base_MspInit+0x108>)
 8000ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba6:	4a37      	ldr	r2, [pc, #220]	; (8000c84 <HAL_TIM_Base_MspInit+0x108>)
 8000ba8:	f043 0301 	orr.w	r3, r3, #1
 8000bac:	6413      	str	r3, [r2, #64]	; 0x40
 8000bae:	4b35      	ldr	r3, [pc, #212]	; (8000c84 <HAL_TIM_Base_MspInit+0x108>)
 8000bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb2:	f003 0301 	and.w	r3, r3, #1
 8000bb6:	61bb      	str	r3, [r7, #24]
 8000bb8:	69bb      	ldr	r3, [r7, #24]
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000bba:	2300      	movs	r3, #0
 8000bbc:	617b      	str	r3, [r7, #20]
 8000bbe:	4b31      	ldr	r3, [pc, #196]	; (8000c84 <HAL_TIM_Base_MspInit+0x108>)
 8000bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc2:	4a30      	ldr	r2, [pc, #192]	; (8000c84 <HAL_TIM_Base_MspInit+0x108>)
 8000bc4:	f043 0301 	orr.w	r3, r3, #1
 8000bc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bca:	4b2e      	ldr	r3, [pc, #184]	; (8000c84 <HAL_TIM_Base_MspInit+0x108>)
 8000bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bce:	f003 0301 	and.w	r3, r3, #1
 8000bd2:	617b      	str	r3, [r7, #20]
 8000bd4:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	61fb      	str	r3, [r7, #28]
    PA6     ------> SPI1_MISO
 8000bda:	2302      	movs	r3, #2
 8000bdc:	623b      	str	r3, [r7, #32]
    PA7     ------> SPI1_MOSI
 8000bde:	2300      	movs	r3, #0
 8000be0:	627b      	str	r3, [r7, #36]	; 0x24
    */
 8000be2:	2300      	movs	r3, #0
 8000be4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000be6:	2301      	movs	r3, #1
 8000be8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bea:	f107 031c 	add.w	r3, r7, #28
 8000bee:	4619      	mov	r1, r3
 8000bf0:	4825      	ldr	r0, [pc, #148]	; (8000c88 <HAL_TIM_Base_MspInit+0x10c>)
 8000bf2:	f000 fb37 	bl	8001264 <HAL_GPIO_Init>
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	2100      	movs	r1, #0
 8000bfa:	201c      	movs	r0, #28
 8000bfc:	f000 fa69 	bl	80010d2 <HAL_NVIC_SetPriority>
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c00:	201c      	movs	r0, #28
 8000c02:	f000 fa82 	bl	800110a <HAL_NVIC_EnableIRQ>
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7);

  /* USER CODE BEGIN SPI1_MspDeInit 1 */
 8000c06:	e038      	b.n	8000c7a <HAL_TIM_Base_MspInit+0xfe>
  }
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4a1f      	ldr	r2, [pc, #124]	; (8000c8c <HAL_TIM_Base_MspInit+0x110>)
 8000c0e:	4293      	cmp	r3, r2
 8000c10:	d133      	bne.n	8000c7a <HAL_TIM_Base_MspInit+0xfe>
* This function freeze the hardware resources used in this example
 8000c12:	2300      	movs	r3, #0
 8000c14:	613b      	str	r3, [r7, #16]
 8000c16:	4b1b      	ldr	r3, [pc, #108]	; (8000c84 <HAL_TIM_Base_MspInit+0x108>)
 8000c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c1a:	4a1a      	ldr	r2, [pc, #104]	; (8000c84 <HAL_TIM_Base_MspInit+0x108>)
 8000c1c:	f043 0308 	orr.w	r3, r3, #8
 8000c20:	6413      	str	r3, [r2, #64]	; 0x40
 8000c22:	4b18      	ldr	r3, [pc, #96]	; (8000c84 <HAL_TIM_Base_MspInit+0x108>)
 8000c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c26:	f003 0308 	and.w	r3, r3, #8
 8000c2a:	613b      	str	r3, [r7, #16]
 8000c2c:	693b      	ldr	r3, [r7, #16]
* @retval None
 8000c2e:	2300      	movs	r3, #0
 8000c30:	60fb      	str	r3, [r7, #12]
 8000c32:	4b14      	ldr	r3, [pc, #80]	; (8000c84 <HAL_TIM_Base_MspInit+0x108>)
 8000c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c36:	4a13      	ldr	r2, [pc, #76]	; (8000c84 <HAL_TIM_Base_MspInit+0x108>)
 8000c38:	f043 0301 	orr.w	r3, r3, #1
 8000c3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c3e:	4b11      	ldr	r3, [pc, #68]	; (8000c84 <HAL_TIM_Base_MspInit+0x108>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c42:	f003 0301 	and.w	r3, r3, #1
 8000c46:	60fb      	str	r3, [r7, #12]
 8000c48:	68fb      	ldr	r3, [r7, #12]
  if(hspi->Instance==SPI1)
 8000c4a:	2308      	movs	r3, #8
 8000c4c:	61fb      	str	r3, [r7, #28]
  {
 8000c4e:	2302      	movs	r3, #2
 8000c50:	623b      	str	r3, [r7, #32]
  /* USER CODE BEGIN SPI1_MspDeInit 0 */
 8000c52:	2300      	movs	r3, #0
 8000c54:	627b      	str	r3, [r7, #36]	; 0x24

 8000c56:	2300      	movs	r3, #0
 8000c58:	62bb      	str	r3, [r7, #40]	; 0x28
  /* USER CODE END SPI1_MspDeInit 0 */
 8000c5a:	2302      	movs	r3, #2
 8000c5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Peripheral clock disable */
 8000c5e:	f107 031c 	add.w	r3, r7, #28
 8000c62:	4619      	mov	r1, r3
 8000c64:	4808      	ldr	r0, [pc, #32]	; (8000c88 <HAL_TIM_Base_MspInit+0x10c>)
 8000c66:	f000 fafd 	bl	8001264 <HAL_GPIO_Init>
    /**SPI1 GPIO Configuration
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	2100      	movs	r1, #0
 8000c6e:	2032      	movs	r0, #50	; 0x32
 8000c70:	f000 fa2f 	bl	80010d2 <HAL_NVIC_SetPriority>
    PA5     ------> SPI1_SCK
 8000c74:	2032      	movs	r0, #50	; 0x32
 8000c76:	f000 fa48 	bl	800110a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspDeInit 1 */
 8000c7a:	bf00      	nop
 8000c7c:	3730      	adds	r7, #48	; 0x30
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	40023800 	.word	0x40023800
 8000c88:	40020000 	.word	0x40020000
 8000c8c:	40000c00 	.word	0x40000c00

08000c90 <HAL_UART_MspInit>:
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b08a      	sub	sp, #40	; 0x28
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c98:	f107 0314 	add.w	r3, r7, #20
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	601a      	str	r2, [r3, #0]
 8000ca0:	605a      	str	r2, [r3, #4]
 8000ca2:	609a      	str	r2, [r3, #8]
 8000ca4:	60da      	str	r2, [r3, #12]
 8000ca6:	611a      	str	r2, [r3, #16]

 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4a1d      	ldr	r2, [pc, #116]	; (8000d24 <HAL_UART_MspInit+0x94>)
 8000cae:	4293      	cmp	r3, r2
 8000cb0:	d134      	bne.n	8000d1c <HAL_UART_MspInit+0x8c>
    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	613b      	str	r3, [r7, #16]
 8000cb6:	4b1c      	ldr	r3, [pc, #112]	; (8000d28 <HAL_UART_MspInit+0x98>)
 8000cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cba:	4a1b      	ldr	r2, [pc, #108]	; (8000d28 <HAL_UART_MspInit+0x98>)
 8000cbc:	f043 0310 	orr.w	r3, r3, #16
 8000cc0:	6453      	str	r3, [r2, #68]	; 0x44
 8000cc2:	4b19      	ldr	r3, [pc, #100]	; (8000d28 <HAL_UART_MspInit+0x98>)
 8000cc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cc6:	f003 0310 	and.w	r3, r3, #16
 8000cca:	613b      	str	r3, [r7, #16]
 8000ccc:	693b      	ldr	r3, [r7, #16]
  }

 8000cce:	2300      	movs	r3, #0
 8000cd0:	60fb      	str	r3, [r7, #12]
 8000cd2:	4b15      	ldr	r3, [pc, #84]	; (8000d28 <HAL_UART_MspInit+0x98>)
 8000cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd6:	4a14      	ldr	r2, [pc, #80]	; (8000d28 <HAL_UART_MspInit+0x98>)
 8000cd8:	f043 0301 	orr.w	r3, r3, #1
 8000cdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cde:	4b12      	ldr	r3, [pc, #72]	; (8000d28 <HAL_UART_MspInit+0x98>)
 8000ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce2:	f003 0301 	and.w	r3, r3, #1
 8000ce6:	60fb      	str	r3, [r7, #12]
 8000ce8:	68fb      	ldr	r3, [r7, #12]
}

/**
* @brief TIM_Base MSP De-Initialization
* This function freeze the hardware resources used in this example
 8000cea:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000cee:	617b      	str	r3, [r7, #20]
* @param htim_base: TIM_Base handle pointer
 8000cf0:	2302      	movs	r3, #2
 8000cf2:	61bb      	str	r3, [r7, #24]
* @retval None
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	61fb      	str	r3, [r7, #28]
*/
 8000cf8:	2303      	movs	r3, #3
 8000cfa:	623b      	str	r3, [r7, #32]
void HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef* htim_base)
 8000cfc:	2307      	movs	r3, #7
 8000cfe:	627b      	str	r3, [r7, #36]	; 0x24
{
 8000d00:	f107 0314 	add.w	r3, r7, #20
 8000d04:	4619      	mov	r1, r3
 8000d06:	4809      	ldr	r0, [pc, #36]	; (8000d2c <HAL_UART_MspInit+0x9c>)
 8000d08:	f000 faac 	bl	8001264 <HAL_GPIO_Init>
  if(htim_base->Instance==TIM2)
  {
  /* USER CODE BEGIN TIM2_MspDeInit 0 */
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	2100      	movs	r1, #0
 8000d10:	2025      	movs	r0, #37	; 0x25
 8000d12:	f000 f9de 	bl	80010d2 <HAL_NVIC_SetPriority>

 8000d16:	2025      	movs	r0, #37	; 0x25
 8000d18:	f000 f9f7 	bl	800110a <HAL_NVIC_EnableIRQ>
  /* USER CODE END TIM2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_TIM2_CLK_DISABLE();

    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
 8000d1c:	bf00      	nop
 8000d1e:	3728      	adds	r7, #40	; 0x28
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	40011000 	.word	0x40011000
 8000d28:	40023800 	.word	0x40023800
 8000d2c:	40020000 	.word	0x40020000

08000d30 <NMI_Handler>:
/*           Cortex-M4 Processor Interruption and Exception Handlers          */
=======
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	607b      	str	r3, [r7, #4]
 8000b4e:	4b10      	ldr	r3, [pc, #64]	; (8000b90 <HAL_MspInit+0x4c>)
 8000b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b52:	4a0f      	ldr	r2, [pc, #60]	; (8000b90 <HAL_MspInit+0x4c>)
 8000b54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b58:	6453      	str	r3, [r2, #68]	; 0x44
 8000b5a:	4b0d      	ldr	r3, [pc, #52]	; (8000b90 <HAL_MspInit+0x4c>)
 8000b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b62:	607b      	str	r3, [r7, #4]
 8000b64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b66:	2300      	movs	r3, #0
 8000b68:	603b      	str	r3, [r7, #0]
 8000b6a:	4b09      	ldr	r3, [pc, #36]	; (8000b90 <HAL_MspInit+0x4c>)
 8000b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b6e:	4a08      	ldr	r2, [pc, #32]	; (8000b90 <HAL_MspInit+0x4c>)
 8000b70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b74:	6413      	str	r3, [r2, #64]	; 0x40
 8000b76:	4b06      	ldr	r3, [pc, #24]	; (8000b90 <HAL_MspInit+0x4c>)
 8000b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b7e:	603b      	str	r3, [r7, #0]
 8000b80:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b82:	bf00      	nop
 8000b84:	370c      	adds	r7, #12
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop
 8000b90:	40023800 	.word	0x40023800

08000b94 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b08c      	sub	sp, #48	; 0x30
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b9c:	f107 031c 	add.w	r3, r7, #28
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	601a      	str	r2, [r3, #0]
 8000ba4:	605a      	str	r2, [r3, #4]
 8000ba6:	609a      	str	r2, [r3, #8]
 8000ba8:	60da      	str	r2, [r3, #12]
 8000baa:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000bb4:	d134      	bne.n	8000c20 <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	61bb      	str	r3, [r7, #24]
 8000bba:	4b38      	ldr	r3, [pc, #224]	; (8000c9c <HAL_TIM_Base_MspInit+0x108>)
 8000bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bbe:	4a37      	ldr	r2, [pc, #220]	; (8000c9c <HAL_TIM_Base_MspInit+0x108>)
 8000bc0:	f043 0301 	orr.w	r3, r3, #1
 8000bc4:	6413      	str	r3, [r2, #64]	; 0x40
 8000bc6:	4b35      	ldr	r3, [pc, #212]	; (8000c9c <HAL_TIM_Base_MspInit+0x108>)
 8000bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bca:	f003 0301 	and.w	r3, r3, #1
 8000bce:	61bb      	str	r3, [r7, #24]
 8000bd0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	617b      	str	r3, [r7, #20]
 8000bd6:	4b31      	ldr	r3, [pc, #196]	; (8000c9c <HAL_TIM_Base_MspInit+0x108>)
 8000bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bda:	4a30      	ldr	r2, [pc, #192]	; (8000c9c <HAL_TIM_Base_MspInit+0x108>)
 8000bdc:	f043 0301 	orr.w	r3, r3, #1
 8000be0:	6313      	str	r3, [r2, #48]	; 0x30
 8000be2:	4b2e      	ldr	r3, [pc, #184]	; (8000c9c <HAL_TIM_Base_MspInit+0x108>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be6:	f003 0301 	and.w	r3, r3, #1
 8000bea:	617b      	str	r3, [r7, #20]
 8000bec:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000bee:	2301      	movs	r3, #1
 8000bf0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf2:	2302      	movs	r3, #2
 8000bf4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000bfe:	2301      	movs	r3, #1
 8000c00:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c02:	f107 031c 	add.w	r3, r7, #28
 8000c06:	4619      	mov	r1, r3
 8000c08:	4825      	ldr	r0, [pc, #148]	; (8000ca0 <HAL_TIM_Base_MspInit+0x10c>)
 8000c0a:	f000 fb37 	bl	800127c <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000c0e:	2200      	movs	r2, #0
 8000c10:	2100      	movs	r1, #0
 8000c12:	201c      	movs	r0, #28
 8000c14:	f000 fa69 	bl	80010ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000c18:	201c      	movs	r0, #28
 8000c1a:	f000 fa82 	bl	8001122 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8000c1e:	e038      	b.n	8000c92 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM5)
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4a1f      	ldr	r2, [pc, #124]	; (8000ca4 <HAL_TIM_Base_MspInit+0x110>)
 8000c26:	4293      	cmp	r3, r2
 8000c28:	d133      	bne.n	8000c92 <HAL_TIM_Base_MspInit+0xfe>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	613b      	str	r3, [r7, #16]
 8000c2e:	4b1b      	ldr	r3, [pc, #108]	; (8000c9c <HAL_TIM_Base_MspInit+0x108>)
 8000c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c32:	4a1a      	ldr	r2, [pc, #104]	; (8000c9c <HAL_TIM_Base_MspInit+0x108>)
 8000c34:	f043 0308 	orr.w	r3, r3, #8
 8000c38:	6413      	str	r3, [r2, #64]	; 0x40
 8000c3a:	4b18      	ldr	r3, [pc, #96]	; (8000c9c <HAL_TIM_Base_MspInit+0x108>)
 8000c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c3e:	f003 0308 	and.w	r3, r3, #8
 8000c42:	613b      	str	r3, [r7, #16]
 8000c44:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c46:	2300      	movs	r3, #0
 8000c48:	60fb      	str	r3, [r7, #12]
 8000c4a:	4b14      	ldr	r3, [pc, #80]	; (8000c9c <HAL_TIM_Base_MspInit+0x108>)
 8000c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4e:	4a13      	ldr	r2, [pc, #76]	; (8000c9c <HAL_TIM_Base_MspInit+0x108>)
 8000c50:	f043 0301 	orr.w	r3, r3, #1
 8000c54:	6313      	str	r3, [r2, #48]	; 0x30
 8000c56:	4b11      	ldr	r3, [pc, #68]	; (8000c9c <HAL_TIM_Base_MspInit+0x108>)
 8000c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5a:	f003 0301 	and.w	r3, r3, #1
 8000c5e:	60fb      	str	r3, [r7, #12]
 8000c60:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000c62:	2308      	movs	r3, #8
 8000c64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c66:	2302      	movs	r3, #2
 8000c68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8000c72:	2302      	movs	r3, #2
 8000c74:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c76:	f107 031c 	add.w	r3, r7, #28
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	4808      	ldr	r0, [pc, #32]	; (8000ca0 <HAL_TIM_Base_MspInit+0x10c>)
 8000c7e:	f000 fafd 	bl	800127c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8000c82:	2200      	movs	r2, #0
 8000c84:	2100      	movs	r1, #0
 8000c86:	2032      	movs	r0, #50	; 0x32
 8000c88:	f000 fa2f 	bl	80010ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8000c8c:	2032      	movs	r0, #50	; 0x32
 8000c8e:	f000 fa48 	bl	8001122 <HAL_NVIC_EnableIRQ>
}
 8000c92:	bf00      	nop
 8000c94:	3730      	adds	r7, #48	; 0x30
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	40023800 	.word	0x40023800
 8000ca0:	40020000 	.word	0x40020000
 8000ca4:	40000c00 	.word	0x40000c00

08000ca8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b08a      	sub	sp, #40	; 0x28
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb0:	f107 0314 	add.w	r3, r7, #20
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	601a      	str	r2, [r3, #0]
 8000cb8:	605a      	str	r2, [r3, #4]
 8000cba:	609a      	str	r2, [r3, #8]
 8000cbc:	60da      	str	r2, [r3, #12]
 8000cbe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a1d      	ldr	r2, [pc, #116]	; (8000d3c <HAL_UART_MspInit+0x94>)
 8000cc6:	4293      	cmp	r3, r2
 8000cc8:	d134      	bne.n	8000d34 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000cca:	2300      	movs	r3, #0
 8000ccc:	613b      	str	r3, [r7, #16]
 8000cce:	4b1c      	ldr	r3, [pc, #112]	; (8000d40 <HAL_UART_MspInit+0x98>)
 8000cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cd2:	4a1b      	ldr	r2, [pc, #108]	; (8000d40 <HAL_UART_MspInit+0x98>)
 8000cd4:	f043 0310 	orr.w	r3, r3, #16
 8000cd8:	6453      	str	r3, [r2, #68]	; 0x44
 8000cda:	4b19      	ldr	r3, [pc, #100]	; (8000d40 <HAL_UART_MspInit+0x98>)
 8000cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cde:	f003 0310 	and.w	r3, r3, #16
 8000ce2:	613b      	str	r3, [r7, #16]
 8000ce4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	60fb      	str	r3, [r7, #12]
 8000cea:	4b15      	ldr	r3, [pc, #84]	; (8000d40 <HAL_UART_MspInit+0x98>)
 8000cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cee:	4a14      	ldr	r2, [pc, #80]	; (8000d40 <HAL_UART_MspInit+0x98>)
 8000cf0:	f043 0301 	orr.w	r3, r3, #1
 8000cf4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cf6:	4b12      	ldr	r3, [pc, #72]	; (8000d40 <HAL_UART_MspInit+0x98>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfa:	f003 0301 	and.w	r3, r3, #1
 8000cfe:	60fb      	str	r3, [r7, #12]
 8000d00:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000d02:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000d06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d08:	2302      	movs	r3, #2
 8000d0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d10:	2303      	movs	r3, #3
 8000d12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000d14:	2307      	movs	r3, #7
 8000d16:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d18:	f107 0314 	add.w	r3, r7, #20
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	4809      	ldr	r0, [pc, #36]	; (8000d44 <HAL_UART_MspInit+0x9c>)
 8000d20:	f000 faac 	bl	800127c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000d24:	2200      	movs	r2, #0
 8000d26:	2100      	movs	r1, #0
 8000d28:	2025      	movs	r0, #37	; 0x25
 8000d2a:	f000 f9de 	bl	80010ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000d2e:	2025      	movs	r0, #37	; 0x25
 8000d30:	f000 f9f7 	bl	8001122 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000d34:	bf00      	nop
 8000d36:	3728      	adds	r7, #40	; 0x28
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	40011000 	.word	0x40011000
 8000d40:	40023800 	.word	0x40023800
 8000d44:	40020000 	.word	0x40020000

08000d48 <NMI_Handler>:
>>>>>>> AWS
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
<<<<<<< HEAD
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
{
=======
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
>>>>>>> AWS
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
<<<<<<< HEAD
 8000d34:	e7fe      	b.n	8000d34 <NMI_Handler+0x4>

08000d36 <HardFault_Handler>:
}
=======
  while (1)
 8000d4c:	e7fe      	b.n	8000d4c <NMI_Handler+0x4>

08000d4e <HardFault_Handler>:
>>>>>>> AWS

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
<<<<<<< HEAD
 8000d36:	b480      	push	{r7}
 8000d38:	af00      	add	r7, sp, #0
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
 8000d3a:	e7fe      	b.n	8000d3a <HardFault_Handler+0x4>

08000d3c <MemManage_Handler>:
}
=======
{
 8000d4e:	b480      	push	{r7}
 8000d50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d52:	e7fe      	b.n	8000d52 <HardFault_Handler+0x4>

08000d54 <MemManage_Handler>:
>>>>>>> AWS

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
<<<<<<< HEAD
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
 8000d40:	e7fe      	b.n	8000d40 <MemManage_Handler+0x4>

08000d42 <BusFault_Handler>:
}
=======
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d58:	e7fe      	b.n	8000d58 <MemManage_Handler+0x4>

08000d5a <BusFault_Handler>:
>>>>>>> AWS

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
<<<<<<< HEAD
 8000d42:	b480      	push	{r7}
 8000d44:	af00      	add	r7, sp, #0
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
 8000d46:	e7fe      	b.n	8000d46 <BusFault_Handler+0x4>

08000d48 <UsageFault_Handler>:
}
=======
{
 8000d5a:	b480      	push	{r7}
 8000d5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d5e:	e7fe      	b.n	8000d5e <BusFault_Handler+0x4>

08000d60 <UsageFault_Handler>:
>>>>>>> AWS

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
<<<<<<< HEAD
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
 8000d4c:	e7fe      	b.n	8000d4c <UsageFault_Handler+0x4>

08000d4e <SVC_Handler>:
}
=======
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d64:	e7fe      	b.n	8000d64 <UsageFault_Handler+0x4>

08000d66 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d66:	b480      	push	{r7}
 8000d68:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d6a:	bf00      	nop
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d72:	4770      	bx	lr

08000d74 <DebugMon_Handler>:
>>>>>>> AWS

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
<<<<<<< HEAD
 8000d4e:	b480      	push	{r7}
 8000d50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DebugMonitor_IRQn 0 */
=======
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
>>>>>>> AWS

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
<<<<<<< HEAD
 8000d52:	bf00      	nop
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr

08000d5c <DebugMon_Handler>:
}

/******************************************************************************/
/* STM32F4xx Peripheral Interrupt Handlers                                    */
/* Add here the Interrupt Handlers for the used peripherals.                  */
/* For the available peripheral interrupt handler names,                      */
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
/******************************************************************************/

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
 8000d60:	bf00      	nop
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr

08000d6a <PendSV_Handler>:
{
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */
 8000d6a:	b480      	push	{r7}
 8000d6c:	af00      	add	r7, sp, #0
  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
=======
}
 8000d78:	bf00      	nop
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr

08000d82 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d82:	b480      	push	{r7}
 8000d84:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d86:	bf00      	nop
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8e:	4770      	bx	lr

08000d90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d94:	f000 f8ae 	bl	8000ef4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d98:	bf00      	nop
 8000d9a:	bd80      	pop	{r7, pc}

08000d9c <TIM2_IRQHandler>:
>>>>>>> AWS

/**
  * @brief This function handles TIM2 global interrupt.
  */
<<<<<<< HEAD
 8000d6e:	bf00      	nop
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr

08000d78 <SysTick_Handler>:
void TIM2_IRQHandler(void)
{
=======
void TIM2_IRQHandler(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
>>>>>>> AWS
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
<<<<<<< HEAD
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
=======
 8000da0:	4802      	ldr	r0, [pc, #8]	; (8000dac <TIM2_IRQHandler+0x10>)
 8000da2:	f001 fad1 	bl	8002348 <HAL_TIM_IRQHandler>
>>>>>>> AWS
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
<<<<<<< HEAD
 8000d7c:	f000 f8ae 	bl	8000edc <HAL_IncTick>
=======
 8000da6:	bf00      	nop
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	2000002c 	.word	0x2000002c

08000db0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000db4:	4802      	ldr	r0, [pc, #8]	; (8000dc0 <USART1_IRQHandler+0x10>)
 8000db6:	f002 f95f 	bl	8003078 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000dba:	bf00      	nop
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	200000bc 	.word	0x200000bc

08000dc4 <TIM5_IRQHandler>:
>>>>>>> AWS

/**
  * @brief This function handles TIM5 global interrupt.
  */
<<<<<<< HEAD
 8000d80:	bf00      	nop
 8000d82:	bd80      	pop	{r7, pc}

08000d84 <TIM2_IRQHandler>:

  /* USER CODE END TIM5_IRQn 1 */
}

/* USER CODE BEGIN 1 */

 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
/* USER CODE END 1 */
 8000d88:	4802      	ldr	r0, [pc, #8]	; (8000d94 <TIM2_IRQHandler+0x10>)
 8000d8a:	f001 fad1 	bl	8002330 <HAL_TIM_IRQHandler>
 8000d8e:	bf00      	nop
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	2000002c 	.word	0x2000002c

08000d98 <USART1_IRQHandler>:
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
 8000d9c:	4802      	ldr	r0, [pc, #8]	; (8000da8 <USART1_IRQHandler+0x10>)
 8000d9e:	f002 f95f 	bl	8003060 <HAL_UART_IRQHandler>
 8000da2:	bf00      	nop
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	200000bc 	.word	0x200000bc

08000dac <TIM5_IRQHandler>:
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
 8000db0:	4802      	ldr	r0, [pc, #8]	; (8000dbc <TIM5_IRQHandler+0x10>)
 8000db2:	f001 fabd 	bl	8002330 <HAL_TIM_IRQHandler>
 8000db6:	bf00      	nop
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	20000074 	.word	0x20000074

08000dc0 <SystemInit>:
=======
void TIM5_IRQHandler(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8000dc8:	4802      	ldr	r0, [pc, #8]	; (8000dd4 <TIM5_IRQHandler+0x10>)
 8000dca:	f001 fabd 	bl	8002348 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8000dce:	bf00      	nop
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	20000074 	.word	0x20000074

08000dd8 <SystemInit>:
>>>>>>> AWS
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
<<<<<<< HEAD
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000dc4:	4b06      	ldr	r3, [pc, #24]	; (8000de0 <SystemInit+0x20>)
 8000dc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dca:	4a05      	ldr	r2, [pc, #20]	; (8000de0 <SystemInit+0x20>)
 8000dcc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000dd0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
=======
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ddc:	4b06      	ldr	r3, [pc, #24]	; (8000df8 <SystemInit+0x20>)
 8000dde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000de2:	4a05      	ldr	r2, [pc, #20]	; (8000df8 <SystemInit+0x20>)
 8000de4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000de8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
>>>>>>> AWS

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
<<<<<<< HEAD
 8000dd4:	bf00      	nop
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr
 8000dde:	bf00      	nop
 8000de0:	e000ed00 	.word	0xe000ed00

08000de4 <Reset_Handler>:
=======
 8000dec:	bf00      	nop
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop
 8000df8:	e000ed00 	.word	0xe000ed00

08000dfc <Reset_Handler>:
>>>>>>> AWS

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
<<<<<<< HEAD
 8000de4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e1c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000de8:	480d      	ldr	r0, [pc, #52]	; (8000e20 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000dea:	490e      	ldr	r1, [pc, #56]	; (8000e24 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000dec:	4a0e      	ldr	r2, [pc, #56]	; (8000e28 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000dee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000df0:	e002      	b.n	8000df8 <LoopCopyDataInit>

08000df2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000df2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000df4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000df6:	3304      	adds	r3, #4

08000df8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000df8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dfa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dfc:	d3f9      	bcc.n	8000df2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dfe:	4a0b      	ldr	r2, [pc, #44]	; (8000e2c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e00:	4c0b      	ldr	r4, [pc, #44]	; (8000e30 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e04:	e001      	b.n	8000e0a <LoopFillZerobss>

08000e06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e08:	3204      	adds	r2, #4

08000e0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e0c:	d3fb      	bcc.n	8000e06 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e0e:	f7ff ffd7 	bl	8000dc0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e12:	f003 f861 	bl	8003ed8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e16:	f7ff fc3d 	bl	8000694 <main>
  bx  lr    
 8000e1a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e1c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000e20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e24:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000e28:	08003f60 	.word	0x08003f60
  ldr r2, =_sbss
 8000e2c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000e30:	2000012c 	.word	0x2000012c

08000e34 <ADC_IRQHandler>:
=======
 8000dfc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e34 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e00:	480d      	ldr	r0, [pc, #52]	; (8000e38 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e02:	490e      	ldr	r1, [pc, #56]	; (8000e3c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e04:	4a0e      	ldr	r2, [pc, #56]	; (8000e40 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e08:	e002      	b.n	8000e10 <LoopCopyDataInit>

08000e0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e0e:	3304      	adds	r3, #4

08000e10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e14:	d3f9      	bcc.n	8000e0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e16:	4a0b      	ldr	r2, [pc, #44]	; (8000e44 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e18:	4c0b      	ldr	r4, [pc, #44]	; (8000e48 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e1c:	e001      	b.n	8000e22 <LoopFillZerobss>

08000e1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e20:	3204      	adds	r2, #4

08000e22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e24:	d3fb      	bcc.n	8000e1e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e26:	f7ff ffd7 	bl	8000dd8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e2a:	f003 f861 	bl	8003ef0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e2e:	f7ff fc31 	bl	8000694 <main>
  bx  lr    
 8000e32:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e34:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000e38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e3c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000e40:	08003f78 	.word	0x08003f78
  ldr r2, =_sbss
 8000e44:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000e48:	2000012c 	.word	0x2000012c

08000e4c <ADC_IRQHandler>:
>>>>>>> AWS
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
<<<<<<< HEAD
 8000e34:	e7fe      	b.n	8000e34 <ADC_IRQHandler>
	...

08000e38 <HAL_Init>:
=======
 8000e4c:	e7fe      	b.n	8000e4c <ADC_IRQHandler>
	...

08000e50 <HAL_Init>:
>>>>>>> AWS
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
<<<<<<< HEAD
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e3c:	4b0e      	ldr	r3, [pc, #56]	; (8000e78 <HAL_Init+0x40>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4a0d      	ldr	r2, [pc, #52]	; (8000e78 <HAL_Init+0x40>)
 8000e42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e46:	6013      	str	r3, [r2, #0]
=======
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e54:	4b0e      	ldr	r3, [pc, #56]	; (8000e90 <HAL_Init+0x40>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4a0d      	ldr	r2, [pc, #52]	; (8000e90 <HAL_Init+0x40>)
 8000e5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e5e:	6013      	str	r3, [r2, #0]
>>>>>>> AWS
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
<<<<<<< HEAD
 8000e48:	4b0b      	ldr	r3, [pc, #44]	; (8000e78 <HAL_Init+0x40>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a0a      	ldr	r2, [pc, #40]	; (8000e78 <HAL_Init+0x40>)
 8000e4e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e52:	6013      	str	r3, [r2, #0]
=======
 8000e60:	4b0b      	ldr	r3, [pc, #44]	; (8000e90 <HAL_Init+0x40>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4a0a      	ldr	r2, [pc, #40]	; (8000e90 <HAL_Init+0x40>)
 8000e66:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e6a:	6013      	str	r3, [r2, #0]
>>>>>>> AWS
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
<<<<<<< HEAD
 8000e54:	4b08      	ldr	r3, [pc, #32]	; (8000e78 <HAL_Init+0x40>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4a07      	ldr	r2, [pc, #28]	; (8000e78 <HAL_Init+0x40>)
 8000e5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e5e:	6013      	str	r3, [r2, #0]
=======
 8000e6c:	4b08      	ldr	r3, [pc, #32]	; (8000e90 <HAL_Init+0x40>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4a07      	ldr	r2, [pc, #28]	; (8000e90 <HAL_Init+0x40>)
 8000e72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e76:	6013      	str	r3, [r2, #0]
>>>>>>> AWS
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
<<<<<<< HEAD
 8000e60:	2003      	movs	r0, #3
 8000e62:	f000 f92b 	bl	80010bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e66:	200f      	movs	r0, #15
 8000e68:	f000 f808 	bl	8000e7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e6c:	f7ff fe5e 	bl	8000b2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e70:	2300      	movs	r3, #0
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	40023c00 	.word	0x40023c00

08000e7c <HAL_InitTick>:
=======
 8000e78:	2003      	movs	r0, #3
 8000e7a:	f000 f92b 	bl	80010d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e7e:	200f      	movs	r0, #15
 8000e80:	f000 f808 	bl	8000e94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e84:	f7ff fe5e 	bl	8000b44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e88:	2300      	movs	r3, #0
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	40023c00 	.word	0x40023c00

08000e94 <HAL_InitTick>:
>>>>>>> AWS
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
<<<<<<< HEAD
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e84:	4b12      	ldr	r3, [pc, #72]	; (8000ed0 <HAL_InitTick+0x54>)
 8000e86:	681a      	ldr	r2, [r3, #0]
 8000e88:	4b12      	ldr	r3, [pc, #72]	; (8000ed4 <HAL_InitTick+0x58>)
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e92:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e96:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f000 f943 	bl	8001126 <HAL_SYSTICK_Config>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d001      	beq.n	8000eaa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	e00e      	b.n	8000ec8 <HAL_InitTick+0x4c>
=======
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e9c:	4b12      	ldr	r3, [pc, #72]	; (8000ee8 <HAL_InitTick+0x54>)
 8000e9e:	681a      	ldr	r2, [r3, #0]
 8000ea0:	4b12      	ldr	r3, [pc, #72]	; (8000eec <HAL_InitTick+0x58>)
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eaa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000eae:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f000 f943 	bl	800113e <HAL_SYSTICK_Config>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	e00e      	b.n	8000ee0 <HAL_InitTick+0x4c>
>>>>>>> AWS
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
<<<<<<< HEAD
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	2b0f      	cmp	r3, #15
 8000eae:	d80a      	bhi.n	8000ec6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	6879      	ldr	r1, [r7, #4]
 8000eb4:	f04f 30ff 	mov.w	r0, #4294967295
 8000eb8:	f000 f90b 	bl	80010d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ebc:	4a06      	ldr	r2, [pc, #24]	; (8000ed8 <HAL_InitTick+0x5c>)
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	6013      	str	r3, [r2, #0]
=======
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	2b0f      	cmp	r3, #15
 8000ec6:	d80a      	bhi.n	8000ede <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ec8:	2200      	movs	r2, #0
 8000eca:	6879      	ldr	r1, [r7, #4]
 8000ecc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ed0:	f000 f90b 	bl	80010ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ed4:	4a06      	ldr	r2, [pc, #24]	; (8000ef0 <HAL_InitTick+0x5c>)
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	6013      	str	r3, [r2, #0]
>>>>>>> AWS
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
<<<<<<< HEAD
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	e000      	b.n	8000ec8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ec6:	2301      	movs	r3, #1
}
 8000ec8:	4618      	mov	r0, r3
 8000eca:	3708      	adds	r7, #8
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	20000004 	.word	0x20000004
 8000ed4:	2000000c 	.word	0x2000000c
 8000ed8:	20000008 	.word	0x20000008

08000edc <HAL_IncTick>:
=======
 8000eda:	2300      	movs	r3, #0
 8000edc:	e000      	b.n	8000ee0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ede:	2301      	movs	r3, #1
}
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	3708      	adds	r7, #8
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	20000004 	.word	0x20000004
 8000eec:	2000000c 	.word	0x2000000c
 8000ef0:	20000008 	.word	0x20000008

08000ef4 <HAL_IncTick>:
>>>>>>> AWS
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
<<<<<<< HEAD
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ee0:	4b06      	ldr	r3, [pc, #24]	; (8000efc <HAL_IncTick+0x20>)
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	461a      	mov	r2, r3
 8000ee6:	4b06      	ldr	r3, [pc, #24]	; (8000f00 <HAL_IncTick+0x24>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	4413      	add	r3, r2
 8000eec:	4a04      	ldr	r2, [pc, #16]	; (8000f00 <HAL_IncTick+0x24>)
 8000eee:	6013      	str	r3, [r2, #0]
}
 8000ef0:	bf00      	nop
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop
 8000efc:	2000000c 	.word	0x2000000c
 8000f00:	20000128 	.word	0x20000128

08000f04 <HAL_GetTick>:
=======
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ef8:	4b06      	ldr	r3, [pc, #24]	; (8000f14 <HAL_IncTick+0x20>)
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	461a      	mov	r2, r3
 8000efe:	4b06      	ldr	r3, [pc, #24]	; (8000f18 <HAL_IncTick+0x24>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	4413      	add	r3, r2
 8000f04:	4a04      	ldr	r2, [pc, #16]	; (8000f18 <HAL_IncTick+0x24>)
 8000f06:	6013      	str	r3, [r2, #0]
}
 8000f08:	bf00      	nop
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop
 8000f14:	2000000c 	.word	0x2000000c
 8000f18:	20000128 	.word	0x20000128

08000f1c <HAL_GetTick>:
>>>>>>> AWS
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
<<<<<<< HEAD
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  return uwTick;
 8000f08:	4b03      	ldr	r3, [pc, #12]	; (8000f18 <HAL_GetTick+0x14>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
}
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	20000128 	.word	0x20000128

08000f1c <__NVIC_SetPriorityGrouping>:
=======
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f20:	4b03      	ldr	r3, [pc, #12]	; (8000f30 <HAL_GetTick+0x14>)
 8000f22:	681b      	ldr	r3, [r3, #0]
}
 8000f24:	4618      	mov	r0, r3
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop
 8000f30:	20000128 	.word	0x20000128

08000f34 <__NVIC_SetPriorityGrouping>:
>>>>>>> AWS
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
<<<<<<< HEAD
 8000f1c:	b480      	push	{r7}
 8000f1e:	b085      	sub	sp, #20
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	f003 0307 	and.w	r3, r3, #7
 8000f2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f2c:	4b0c      	ldr	r3, [pc, #48]	; (8000f60 <__NVIC_SetPriorityGrouping+0x44>)
 8000f2e:	68db      	ldr	r3, [r3, #12]
 8000f30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f32:	68ba      	ldr	r2, [r7, #8]
 8000f34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f38:	4013      	ands	r3, r2
 8000f3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f40:	68bb      	ldr	r3, [r7, #8]
 8000f42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f4e:	4a04      	ldr	r2, [pc, #16]	; (8000f60 <__NVIC_SetPriorityGrouping+0x44>)
 8000f50:	68bb      	ldr	r3, [r7, #8]
 8000f52:	60d3      	str	r3, [r2, #12]
}
 8000f54:	bf00      	nop
 8000f56:	3714      	adds	r7, #20
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5e:	4770      	bx	lr
 8000f60:	e000ed00 	.word	0xe000ed00

08000f64 <__NVIC_GetPriorityGrouping>:
=======
 8000f34:	b480      	push	{r7}
 8000f36:	b085      	sub	sp, #20
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	f003 0307 	and.w	r3, r3, #7
 8000f42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f44:	4b0c      	ldr	r3, [pc, #48]	; (8000f78 <__NVIC_SetPriorityGrouping+0x44>)
 8000f46:	68db      	ldr	r3, [r3, #12]
 8000f48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f4a:	68ba      	ldr	r2, [r7, #8]
 8000f4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f50:	4013      	ands	r3, r2
 8000f52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f58:	68bb      	ldr	r3, [r7, #8]
 8000f5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f66:	4a04      	ldr	r2, [pc, #16]	; (8000f78 <__NVIC_SetPriorityGrouping+0x44>)
 8000f68:	68bb      	ldr	r3, [r7, #8]
 8000f6a:	60d3      	str	r3, [r2, #12]
}
 8000f6c:	bf00      	nop
 8000f6e:	3714      	adds	r7, #20
 8000f70:	46bd      	mov	sp, r7
 8000f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f76:	4770      	bx	lr
 8000f78:	e000ed00 	.word	0xe000ed00

08000f7c <__NVIC_GetPriorityGrouping>:
>>>>>>> AWS
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
<<<<<<< HEAD
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f68:	4b04      	ldr	r3, [pc, #16]	; (8000f7c <__NVIC_GetPriorityGrouping+0x18>)
 8000f6a:	68db      	ldr	r3, [r3, #12]
 8000f6c:	0a1b      	lsrs	r3, r3, #8
 8000f6e:	f003 0307 	and.w	r3, r3, #7
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	46bd      	mov	sp, r7
 8000f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7a:	4770      	bx	lr
 8000f7c:	e000ed00 	.word	0xe000ed00

08000f80 <__NVIC_EnableIRQ>:
=======
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f80:	4b04      	ldr	r3, [pc, #16]	; (8000f94 <__NVIC_GetPriorityGrouping+0x18>)
 8000f82:	68db      	ldr	r3, [r3, #12]
 8000f84:	0a1b      	lsrs	r3, r3, #8
 8000f86:	f003 0307 	and.w	r3, r3, #7
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr
 8000f94:	e000ed00 	.word	0xe000ed00

08000f98 <__NVIC_EnableIRQ>:
>>>>>>> AWS
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
<<<<<<< HEAD
 8000f80:	b480      	push	{r7}
 8000f82:	b083      	sub	sp, #12
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	4603      	mov	r3, r0
 8000f88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	db0b      	blt.n	8000faa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f92:	79fb      	ldrb	r3, [r7, #7]
 8000f94:	f003 021f 	and.w	r2, r3, #31
 8000f98:	4907      	ldr	r1, [pc, #28]	; (8000fb8 <__NVIC_EnableIRQ+0x38>)
 8000f9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f9e:	095b      	lsrs	r3, r3, #5
 8000fa0:	2001      	movs	r0, #1
 8000fa2:	fa00 f202 	lsl.w	r2, r0, r2
 8000fa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000faa:	bf00      	nop
 8000fac:	370c      	adds	r7, #12
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	e000e100 	.word	0xe000e100

08000fbc <__NVIC_SetPriority>:
=======
 8000f98:	b480      	push	{r7}
 8000f9a:	b083      	sub	sp, #12
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	db0b      	blt.n	8000fc2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000faa:	79fb      	ldrb	r3, [r7, #7]
 8000fac:	f003 021f 	and.w	r2, r3, #31
 8000fb0:	4907      	ldr	r1, [pc, #28]	; (8000fd0 <__NVIC_EnableIRQ+0x38>)
 8000fb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb6:	095b      	lsrs	r3, r3, #5
 8000fb8:	2001      	movs	r0, #1
 8000fba:	fa00 f202 	lsl.w	r2, r0, r2
 8000fbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000fc2:	bf00      	nop
 8000fc4:	370c      	adds	r7, #12
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop
 8000fd0:	e000e100 	.word	0xe000e100

08000fd4 <__NVIC_SetPriority>:
>>>>>>> AWS
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
<<<<<<< HEAD
 8000fbc:	b480      	push	{r7}
 8000fbe:	b083      	sub	sp, #12
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	6039      	str	r1, [r7, #0]
 8000fc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	db0a      	blt.n	8000fe6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	b2da      	uxtb	r2, r3
 8000fd4:	490c      	ldr	r1, [pc, #48]	; (8001008 <__NVIC_SetPriority+0x4c>)
 8000fd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fda:	0112      	lsls	r2, r2, #4
 8000fdc:	b2d2      	uxtb	r2, r2
 8000fde:	440b      	add	r3, r1
 8000fe0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
=======
 8000fd4:	b480      	push	{r7}
 8000fd6:	b083      	sub	sp, #12
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	4603      	mov	r3, r0
 8000fdc:	6039      	str	r1, [r7, #0]
 8000fde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fe0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	db0a      	blt.n	8000ffe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	b2da      	uxtb	r2, r3
 8000fec:	490c      	ldr	r1, [pc, #48]	; (8001020 <__NVIC_SetPriority+0x4c>)
 8000fee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff2:	0112      	lsls	r2, r2, #4
 8000ff4:	b2d2      	uxtb	r2, r2
 8000ff6:	440b      	add	r3, r1
 8000ff8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
>>>>>>> AWS
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
<<<<<<< HEAD
 8000fe4:	e00a      	b.n	8000ffc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	b2da      	uxtb	r2, r3
 8000fea:	4908      	ldr	r1, [pc, #32]	; (800100c <__NVIC_SetPriority+0x50>)
 8000fec:	79fb      	ldrb	r3, [r7, #7]
 8000fee:	f003 030f 	and.w	r3, r3, #15
 8000ff2:	3b04      	subs	r3, #4
 8000ff4:	0112      	lsls	r2, r2, #4
 8000ff6:	b2d2      	uxtb	r2, r2
 8000ff8:	440b      	add	r3, r1
 8000ffa:	761a      	strb	r2, [r3, #24]
}
 8000ffc:	bf00      	nop
 8000ffe:	370c      	adds	r7, #12
 8001000:	46bd      	mov	sp, r7
 8001002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001006:	4770      	bx	lr
 8001008:	e000e100 	.word	0xe000e100
 800100c:	e000ed00 	.word	0xe000ed00

08001010 <NVIC_EncodePriority>:
=======
 8000ffc:	e00a      	b.n	8001014 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	b2da      	uxtb	r2, r3
 8001002:	4908      	ldr	r1, [pc, #32]	; (8001024 <__NVIC_SetPriority+0x50>)
 8001004:	79fb      	ldrb	r3, [r7, #7]
 8001006:	f003 030f 	and.w	r3, r3, #15
 800100a:	3b04      	subs	r3, #4
 800100c:	0112      	lsls	r2, r2, #4
 800100e:	b2d2      	uxtb	r2, r2
 8001010:	440b      	add	r3, r1
 8001012:	761a      	strb	r2, [r3, #24]
}
 8001014:	bf00      	nop
 8001016:	370c      	adds	r7, #12
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr
 8001020:	e000e100 	.word	0xe000e100
 8001024:	e000ed00 	.word	0xe000ed00

08001028 <NVIC_EncodePriority>:
>>>>>>> AWS
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
<<<<<<< HEAD
 8001010:	b480      	push	{r7}
 8001012:	b089      	sub	sp, #36	; 0x24
 8001014:	af00      	add	r7, sp, #0
 8001016:	60f8      	str	r0, [r7, #12]
 8001018:	60b9      	str	r1, [r7, #8]
 800101a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	f003 0307 	and.w	r3, r3, #7
 8001022:	61fb      	str	r3, [r7, #28]
=======
 8001028:	b480      	push	{r7}
 800102a:	b089      	sub	sp, #36	; 0x24
 800102c:	af00      	add	r7, sp, #0
 800102e:	60f8      	str	r0, [r7, #12]
 8001030:	60b9      	str	r1, [r7, #8]
 8001032:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	f003 0307 	and.w	r3, r3, #7
 800103a:	61fb      	str	r3, [r7, #28]
>>>>>>> AWS
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
<<<<<<< HEAD
 8001024:	69fb      	ldr	r3, [r7, #28]
 8001026:	f1c3 0307 	rsb	r3, r3, #7
 800102a:	2b04      	cmp	r3, #4
 800102c:	bf28      	it	cs
 800102e:	2304      	movcs	r3, #4
 8001030:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001032:	69fb      	ldr	r3, [r7, #28]
 8001034:	3304      	adds	r3, #4
 8001036:	2b06      	cmp	r3, #6
 8001038:	d902      	bls.n	8001040 <NVIC_EncodePriority+0x30>
 800103a:	69fb      	ldr	r3, [r7, #28]
 800103c:	3b03      	subs	r3, #3
 800103e:	e000      	b.n	8001042 <NVIC_EncodePriority+0x32>
 8001040:	2300      	movs	r3, #0
 8001042:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001044:	f04f 32ff 	mov.w	r2, #4294967295
 8001048:	69bb      	ldr	r3, [r7, #24]
 800104a:	fa02 f303 	lsl.w	r3, r2, r3
 800104e:	43da      	mvns	r2, r3
 8001050:	68bb      	ldr	r3, [r7, #8]
 8001052:	401a      	ands	r2, r3
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001058:	f04f 31ff 	mov.w	r1, #4294967295
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	fa01 f303 	lsl.w	r3, r1, r3
 8001062:	43d9      	mvns	r1, r3
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001068:	4313      	orrs	r3, r2
         );
}
 800106a:	4618      	mov	r0, r3
 800106c:	3724      	adds	r7, #36	; 0x24
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr
	...

08001078 <SysTick_Config>:
=======
 800103c:	69fb      	ldr	r3, [r7, #28]
 800103e:	f1c3 0307 	rsb	r3, r3, #7
 8001042:	2b04      	cmp	r3, #4
 8001044:	bf28      	it	cs
 8001046:	2304      	movcs	r3, #4
 8001048:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800104a:	69fb      	ldr	r3, [r7, #28]
 800104c:	3304      	adds	r3, #4
 800104e:	2b06      	cmp	r3, #6
 8001050:	d902      	bls.n	8001058 <NVIC_EncodePriority+0x30>
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	3b03      	subs	r3, #3
 8001056:	e000      	b.n	800105a <NVIC_EncodePriority+0x32>
 8001058:	2300      	movs	r3, #0
 800105a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800105c:	f04f 32ff 	mov.w	r2, #4294967295
 8001060:	69bb      	ldr	r3, [r7, #24]
 8001062:	fa02 f303 	lsl.w	r3, r2, r3
 8001066:	43da      	mvns	r2, r3
 8001068:	68bb      	ldr	r3, [r7, #8]
 800106a:	401a      	ands	r2, r3
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001070:	f04f 31ff 	mov.w	r1, #4294967295
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	fa01 f303 	lsl.w	r3, r1, r3
 800107a:	43d9      	mvns	r1, r3
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001080:	4313      	orrs	r3, r2
         );
}
 8001082:	4618      	mov	r0, r3
 8001084:	3724      	adds	r7, #36	; 0x24
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr
	...

08001090 <SysTick_Config>:
>>>>>>> AWS
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
<<<<<<< HEAD
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	3b01      	subs	r3, #1
 8001084:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001088:	d301      	bcc.n	800108e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800108a:	2301      	movs	r3, #1
 800108c:	e00f      	b.n	80010ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800108e:	4a0a      	ldr	r2, [pc, #40]	; (80010b8 <SysTick_Config+0x40>)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	3b01      	subs	r3, #1
 8001094:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001096:	210f      	movs	r1, #15
 8001098:	f04f 30ff 	mov.w	r0, #4294967295
 800109c:	f7ff ff8e 	bl	8000fbc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010a0:	4b05      	ldr	r3, [pc, #20]	; (80010b8 <SysTick_Config+0x40>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010a6:	4b04      	ldr	r3, [pc, #16]	; (80010b8 <SysTick_Config+0x40>)
 80010a8:	2207      	movs	r2, #7
 80010aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010ac:	2300      	movs	r3, #0
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	3708      	adds	r7, #8
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	e000e010 	.word	0xe000e010

080010bc <HAL_NVIC_SetPriorityGrouping>:
=======
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	3b01      	subs	r3, #1
 800109c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010a0:	d301      	bcc.n	80010a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010a2:	2301      	movs	r3, #1
 80010a4:	e00f      	b.n	80010c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010a6:	4a0a      	ldr	r2, [pc, #40]	; (80010d0 <SysTick_Config+0x40>)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	3b01      	subs	r3, #1
 80010ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010ae:	210f      	movs	r1, #15
 80010b0:	f04f 30ff 	mov.w	r0, #4294967295
 80010b4:	f7ff ff8e 	bl	8000fd4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010b8:	4b05      	ldr	r3, [pc, #20]	; (80010d0 <SysTick_Config+0x40>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010be:	4b04      	ldr	r3, [pc, #16]	; (80010d0 <SysTick_Config+0x40>)
 80010c0:	2207      	movs	r2, #7
 80010c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010c4:	2300      	movs	r3, #0
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	3708      	adds	r7, #8
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	e000e010 	.word	0xe000e010

080010d4 <HAL_NVIC_SetPriorityGrouping>:
>>>>>>> AWS
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
<<<<<<< HEAD
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
=======
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
>>>>>>> AWS
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
<<<<<<< HEAD
 80010c4:	6878      	ldr	r0, [r7, #4]
 80010c6:	f7ff ff29 	bl	8000f1c <__NVIC_SetPriorityGrouping>
}
 80010ca:	bf00      	nop
 80010cc:	3708      	adds	r7, #8
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}

080010d2 <HAL_NVIC_SetPriority>:
=======
 80010dc:	6878      	ldr	r0, [r7, #4]
 80010de:	f7ff ff29 	bl	8000f34 <__NVIC_SetPriorityGrouping>
}
 80010e2:	bf00      	nop
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}

080010ea <HAL_NVIC_SetPriority>:
>>>>>>> AWS
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
<<<<<<< HEAD
 80010d2:	b580      	push	{r7, lr}
 80010d4:	b086      	sub	sp, #24
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	4603      	mov	r3, r0
 80010da:	60b9      	str	r1, [r7, #8]
 80010dc:	607a      	str	r2, [r7, #4]
 80010de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010e0:	2300      	movs	r3, #0
 80010e2:	617b      	str	r3, [r7, #20]
=======
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b086      	sub	sp, #24
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	4603      	mov	r3, r0
 80010f2:	60b9      	str	r1, [r7, #8]
 80010f4:	607a      	str	r2, [r7, #4]
 80010f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010f8:	2300      	movs	r3, #0
 80010fa:	617b      	str	r3, [r7, #20]
>>>>>>> AWS
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
<<<<<<< HEAD
 80010e4:	f7ff ff3e 	bl	8000f64 <__NVIC_GetPriorityGrouping>
 80010e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010ea:	687a      	ldr	r2, [r7, #4]
 80010ec:	68b9      	ldr	r1, [r7, #8]
 80010ee:	6978      	ldr	r0, [r7, #20]
 80010f0:	f7ff ff8e 	bl	8001010 <NVIC_EncodePriority>
 80010f4:	4602      	mov	r2, r0
 80010f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010fa:	4611      	mov	r1, r2
 80010fc:	4618      	mov	r0, r3
 80010fe:	f7ff ff5d 	bl	8000fbc <__NVIC_SetPriority>
}
 8001102:	bf00      	nop
 8001104:	3718      	adds	r7, #24
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}

0800110a <HAL_NVIC_EnableIRQ>:
=======
 80010fc:	f7ff ff3e 	bl	8000f7c <__NVIC_GetPriorityGrouping>
 8001100:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001102:	687a      	ldr	r2, [r7, #4]
 8001104:	68b9      	ldr	r1, [r7, #8]
 8001106:	6978      	ldr	r0, [r7, #20]
 8001108:	f7ff ff8e 	bl	8001028 <NVIC_EncodePriority>
 800110c:	4602      	mov	r2, r0
 800110e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001112:	4611      	mov	r1, r2
 8001114:	4618      	mov	r0, r3
 8001116:	f7ff ff5d 	bl	8000fd4 <__NVIC_SetPriority>
}
 800111a:	bf00      	nop
 800111c:	3718      	adds	r7, #24
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}

08001122 <HAL_NVIC_EnableIRQ>:
>>>>>>> AWS
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
<<<<<<< HEAD
 800110a:	b580      	push	{r7, lr}
 800110c:	b082      	sub	sp, #8
 800110e:	af00      	add	r7, sp, #0
 8001110:	4603      	mov	r3, r0
 8001112:	71fb      	strb	r3, [r7, #7]
=======
 8001122:	b580      	push	{r7, lr}
 8001124:	b082      	sub	sp, #8
 8001126:	af00      	add	r7, sp, #0
 8001128:	4603      	mov	r3, r0
 800112a:	71fb      	strb	r3, [r7, #7]
>>>>>>> AWS
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
<<<<<<< HEAD
 8001114:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001118:	4618      	mov	r0, r3
 800111a:	f7ff ff31 	bl	8000f80 <__NVIC_EnableIRQ>
}
 800111e:	bf00      	nop
 8001120:	3708      	adds	r7, #8
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}

08001126 <HAL_SYSTICK_Config>:
=======
 800112c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001130:	4618      	mov	r0, r3
 8001132:	f7ff ff31 	bl	8000f98 <__NVIC_EnableIRQ>
}
 8001136:	bf00      	nop
 8001138:	3708      	adds	r7, #8
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}

0800113e <HAL_SYSTICK_Config>:
>>>>>>> AWS
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
<<<<<<< HEAD
 8001126:	b580      	push	{r7, lr}
 8001128:	b082      	sub	sp, #8
 800112a:	af00      	add	r7, sp, #0
 800112c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800112e:	6878      	ldr	r0, [r7, #4]
 8001130:	f7ff ffa2 	bl	8001078 <SysTick_Config>
 8001134:	4603      	mov	r3, r0
}
 8001136:	4618      	mov	r0, r3
 8001138:	3708      	adds	r7, #8
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}

0800113e <HAL_DMA_Abort>:
=======
 800113e:	b580      	push	{r7, lr}
 8001140:	b082      	sub	sp, #8
 8001142:	af00      	add	r7, sp, #0
 8001144:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001146:	6878      	ldr	r0, [r7, #4]
 8001148:	f7ff ffa2 	bl	8001090 <SysTick_Config>
 800114c:	4603      	mov	r3, r0
}
 800114e:	4618      	mov	r0, r3
 8001150:	3708      	adds	r7, #8
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}

08001156 <HAL_DMA_Abort>:
>>>>>>> AWS
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 800113e:	b580      	push	{r7, lr}
 8001140:	b084      	sub	sp, #16
 8001142:	af00      	add	r7, sp, #0
 8001144:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800114a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800114c:	f7ff feda 	bl	8000f04 <HAL_GetTick>
 8001150:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001158:	b2db      	uxtb	r3, r3
 800115a:	2b02      	cmp	r3, #2
 800115c:	d008      	beq.n	8001170 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	2280      	movs	r2, #128	; 0x80
 8001162:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	2200      	movs	r2, #0
 8001168:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800116c:	2301      	movs	r3, #1
 800116e:	e052      	b.n	8001216 <HAL_DMA_Abort+0xd8>
=======
 8001156:	b580      	push	{r7, lr}
 8001158:	b084      	sub	sp, #16
 800115a:	af00      	add	r7, sp, #0
 800115c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001162:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001164:	f7ff feda 	bl	8000f1c <HAL_GetTick>
 8001168:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001170:	b2db      	uxtb	r3, r3
 8001172:	2b02      	cmp	r3, #2
 8001174:	d008      	beq.n	8001188 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	2280      	movs	r2, #128	; 0x80
 800117a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	2200      	movs	r2, #0
 8001180:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001184:	2301      	movs	r3, #1
 8001186:	e052      	b.n	800122e <HAL_DMA_Abort+0xd8>
>>>>>>> AWS
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
<<<<<<< HEAD
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	681a      	ldr	r2, [r3, #0]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f022 0216 	bic.w	r2, r2, #22
 800117e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	695a      	ldr	r2, [r3, #20]
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800118e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001194:	2b00      	cmp	r3, #0
 8001196:	d103      	bne.n	80011a0 <HAL_DMA_Abort+0x62>
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800119c:	2b00      	cmp	r3, #0
 800119e:	d007      	beq.n	80011b0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	681a      	ldr	r2, [r3, #0]
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f022 0208 	bic.w	r2, r2, #8
 80011ae:	601a      	str	r2, [r3, #0]
=======
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	681a      	ldr	r2, [r3, #0]
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f022 0216 	bic.w	r2, r2, #22
 8001196:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	695a      	ldr	r2, [r3, #20]
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80011a6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d103      	bne.n	80011b8 <HAL_DMA_Abort+0x62>
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d007      	beq.n	80011c8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	681a      	ldr	r2, [r3, #0]
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f022 0208 	bic.w	r2, r2, #8
 80011c6:	601a      	str	r2, [r3, #0]
>>>>>>> AWS
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
<<<<<<< HEAD
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	681a      	ldr	r2, [r3, #0]
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f022 0201 	bic.w	r2, r2, #1
 80011be:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80011c0:	e013      	b.n	80011ea <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80011c2:	f7ff fe9f 	bl	8000f04 <HAL_GetTick>
 80011c6:	4602      	mov	r2, r0
 80011c8:	68bb      	ldr	r3, [r7, #8]
 80011ca:	1ad3      	subs	r3, r2, r3
 80011cc:	2b05      	cmp	r3, #5
 80011ce:	d90c      	bls.n	80011ea <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	2220      	movs	r2, #32
 80011d4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	2203      	movs	r2, #3
 80011da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	2200      	movs	r2, #0
 80011e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80011e6:	2303      	movs	r3, #3
 80011e8:	e015      	b.n	8001216 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f003 0301 	and.w	r3, r3, #1
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d1e4      	bne.n	80011c2 <HAL_DMA_Abort+0x84>
=======
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	681a      	ldr	r2, [r3, #0]
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f022 0201 	bic.w	r2, r2, #1
 80011d6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80011d8:	e013      	b.n	8001202 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80011da:	f7ff fe9f 	bl	8000f1c <HAL_GetTick>
 80011de:	4602      	mov	r2, r0
 80011e0:	68bb      	ldr	r3, [r7, #8]
 80011e2:	1ad3      	subs	r3, r2, r3
 80011e4:	2b05      	cmp	r3, #5
 80011e6:	d90c      	bls.n	8001202 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	2220      	movs	r2, #32
 80011ec:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	2203      	movs	r2, #3
 80011f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	2200      	movs	r2, #0
 80011fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80011fe:	2303      	movs	r3, #3
 8001200:	e015      	b.n	800122e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f003 0301 	and.w	r3, r3, #1
 800120c:	2b00      	cmp	r3, #0
 800120e:	d1e4      	bne.n	80011da <HAL_DMA_Abort+0x84>
>>>>>>> AWS
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
<<<<<<< HEAD
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011fc:	223f      	movs	r2, #63	; 0x3f
 80011fe:	409a      	lsls	r2, r3
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	2201      	movs	r2, #1
 8001208:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2200      	movs	r2, #0
 8001210:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001214:	2300      	movs	r3, #0
}
 8001216:	4618      	mov	r0, r3
 8001218:	3710      	adds	r7, #16
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}

0800121e <HAL_DMA_Abort_IT>:
=======
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001214:	223f      	movs	r2, #63	; 0x3f
 8001216:	409a      	lsls	r2, r3
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	2201      	movs	r2, #1
 8001220:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	2200      	movs	r2, #0
 8001228:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800122c:	2300      	movs	r3, #0
}
 800122e:	4618      	mov	r0, r3
 8001230:	3710      	adds	r7, #16
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}

08001236 <HAL_DMA_Abort_IT>:
>>>>>>> AWS
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 800121e:	b480      	push	{r7}
 8001220:	b083      	sub	sp, #12
 8001222:	af00      	add	r7, sp, #0
 8001224:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800122c:	b2db      	uxtb	r3, r3
 800122e:	2b02      	cmp	r3, #2
 8001230:	d004      	beq.n	800123c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	2280      	movs	r2, #128	; 0x80
 8001236:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001238:	2301      	movs	r3, #1
 800123a:	e00c      	b.n	8001256 <HAL_DMA_Abort_IT+0x38>
=======
 8001236:	b480      	push	{r7}
 8001238:	b083      	sub	sp, #12
 800123a:	af00      	add	r7, sp, #0
 800123c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001244:	b2db      	uxtb	r3, r3
 8001246:	2b02      	cmp	r3, #2
 8001248:	d004      	beq.n	8001254 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	2280      	movs	r2, #128	; 0x80
 800124e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001250:	2301      	movs	r3, #1
 8001252:	e00c      	b.n	800126e <HAL_DMA_Abort_IT+0x38>
>>>>>>> AWS
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
<<<<<<< HEAD
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	2205      	movs	r2, #5
 8001240:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	681a      	ldr	r2, [r3, #0]
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f022 0201 	bic.w	r2, r2, #1
 8001252:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001254:	2300      	movs	r3, #0
}
 8001256:	4618      	mov	r0, r3
 8001258:	370c      	adds	r7, #12
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr
	...

08001264 <HAL_GPIO_Init>:
=======
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	2205      	movs	r2, #5
 8001258:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	681a      	ldr	r2, [r3, #0]
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f022 0201 	bic.w	r2, r2, #1
 800126a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800126c:	2300      	movs	r3, #0
}
 800126e:	4618      	mov	r0, r3
 8001270:	370c      	adds	r7, #12
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr
	...

0800127c <HAL_GPIO_Init>:
>>>>>>> AWS
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
<<<<<<< HEAD
 8001264:	b480      	push	{r7}
 8001266:	b089      	sub	sp, #36	; 0x24
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
 800126c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800126e:	2300      	movs	r3, #0
 8001270:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001272:	2300      	movs	r3, #0
 8001274:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001276:	2300      	movs	r3, #0
 8001278:	61bb      	str	r3, [r7, #24]
=======
 800127c:	b480      	push	{r7}
 800127e:	b089      	sub	sp, #36	; 0x24
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
 8001284:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001286:	2300      	movs	r3, #0
 8001288:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800128a:	2300      	movs	r3, #0
 800128c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800128e:	2300      	movs	r3, #0
 8001290:	61bb      	str	r3, [r7, #24]
>>>>>>> AWS
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
<<<<<<< HEAD
 800127a:	2300      	movs	r3, #0
 800127c:	61fb      	str	r3, [r7, #28]
 800127e:	e159      	b.n	8001534 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001280:	2201      	movs	r2, #1
 8001282:	69fb      	ldr	r3, [r7, #28]
 8001284:	fa02 f303 	lsl.w	r3, r2, r3
 8001288:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	697a      	ldr	r2, [r7, #20]
 8001290:	4013      	ands	r3, r2
 8001292:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001294:	693a      	ldr	r2, [r7, #16]
 8001296:	697b      	ldr	r3, [r7, #20]
 8001298:	429a      	cmp	r2, r3
 800129a:	f040 8148 	bne.w	800152e <HAL_GPIO_Init+0x2ca>
=======
 8001292:	2300      	movs	r3, #0
 8001294:	61fb      	str	r3, [r7, #28]
 8001296:	e159      	b.n	800154c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001298:	2201      	movs	r2, #1
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	fa02 f303 	lsl.w	r3, r2, r3
 80012a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	697a      	ldr	r2, [r7, #20]
 80012a8:	4013      	ands	r3, r2
 80012aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80012ac:	693a      	ldr	r2, [r7, #16]
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	429a      	cmp	r2, r3
 80012b2:	f040 8148 	bne.w	8001546 <HAL_GPIO_Init+0x2ca>
>>>>>>> AWS
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
<<<<<<< HEAD
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	f003 0303 	and.w	r3, r3, #3
 80012a6:	2b01      	cmp	r3, #1
 80012a8:	d005      	beq.n	80012b6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012b2:	2b02      	cmp	r3, #2
 80012b4:	d130      	bne.n	8001318 <HAL_GPIO_Init+0xb4>
=======
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	f003 0303 	and.w	r3, r3, #3
 80012be:	2b01      	cmp	r3, #1
 80012c0:	d005      	beq.n	80012ce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012ca:	2b02      	cmp	r3, #2
 80012cc:	d130      	bne.n	8001330 <HAL_GPIO_Init+0xb4>
>>>>>>> AWS
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
<<<<<<< HEAD
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	689b      	ldr	r3, [r3, #8]
 80012ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80012bc:	69fb      	ldr	r3, [r7, #28]
 80012be:	005b      	lsls	r3, r3, #1
 80012c0:	2203      	movs	r2, #3
 80012c2:	fa02 f303 	lsl.w	r3, r2, r3
 80012c6:	43db      	mvns	r3, r3
 80012c8:	69ba      	ldr	r2, [r7, #24]
 80012ca:	4013      	ands	r3, r2
 80012cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	68da      	ldr	r2, [r3, #12]
 80012d2:	69fb      	ldr	r3, [r7, #28]
 80012d4:	005b      	lsls	r3, r3, #1
 80012d6:	fa02 f303 	lsl.w	r3, r2, r3
 80012da:	69ba      	ldr	r2, [r7, #24]
 80012dc:	4313      	orrs	r3, r2
 80012de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	69ba      	ldr	r2, [r7, #24]
 80012e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012ec:	2201      	movs	r2, #1
 80012ee:	69fb      	ldr	r3, [r7, #28]
 80012f0:	fa02 f303 	lsl.w	r3, r2, r3
 80012f4:	43db      	mvns	r3, r3
 80012f6:	69ba      	ldr	r2, [r7, #24]
 80012f8:	4013      	ands	r3, r2
 80012fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	091b      	lsrs	r3, r3, #4
 8001302:	f003 0201 	and.w	r2, r3, #1
 8001306:	69fb      	ldr	r3, [r7, #28]
 8001308:	fa02 f303 	lsl.w	r3, r2, r3
 800130c:	69ba      	ldr	r2, [r7, #24]
 800130e:	4313      	orrs	r3, r2
 8001310:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	69ba      	ldr	r2, [r7, #24]
 8001316:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	f003 0303 	and.w	r3, r3, #3
 8001320:	2b03      	cmp	r3, #3
 8001322:	d017      	beq.n	8001354 <HAL_GPIO_Init+0xf0>
=======
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	689b      	ldr	r3, [r3, #8]
 80012d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80012d4:	69fb      	ldr	r3, [r7, #28]
 80012d6:	005b      	lsls	r3, r3, #1
 80012d8:	2203      	movs	r2, #3
 80012da:	fa02 f303 	lsl.w	r3, r2, r3
 80012de:	43db      	mvns	r3, r3
 80012e0:	69ba      	ldr	r2, [r7, #24]
 80012e2:	4013      	ands	r3, r2
 80012e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	68da      	ldr	r2, [r3, #12]
 80012ea:	69fb      	ldr	r3, [r7, #28]
 80012ec:	005b      	lsls	r3, r3, #1
 80012ee:	fa02 f303 	lsl.w	r3, r2, r3
 80012f2:	69ba      	ldr	r2, [r7, #24]
 80012f4:	4313      	orrs	r3, r2
 80012f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	69ba      	ldr	r2, [r7, #24]
 80012fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001304:	2201      	movs	r2, #1
 8001306:	69fb      	ldr	r3, [r7, #28]
 8001308:	fa02 f303 	lsl.w	r3, r2, r3
 800130c:	43db      	mvns	r3, r3
 800130e:	69ba      	ldr	r2, [r7, #24]
 8001310:	4013      	ands	r3, r2
 8001312:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	091b      	lsrs	r3, r3, #4
 800131a:	f003 0201 	and.w	r2, r3, #1
 800131e:	69fb      	ldr	r3, [r7, #28]
 8001320:	fa02 f303 	lsl.w	r3, r2, r3
 8001324:	69ba      	ldr	r2, [r7, #24]
 8001326:	4313      	orrs	r3, r2
 8001328:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	69ba      	ldr	r2, [r7, #24]
 800132e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	f003 0303 	and.w	r3, r3, #3
 8001338:	2b03      	cmp	r3, #3
 800133a:	d017      	beq.n	800136c <HAL_GPIO_Init+0xf0>
>>>>>>> AWS
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
<<<<<<< HEAD
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	68db      	ldr	r3, [r3, #12]
 8001328:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800132a:	69fb      	ldr	r3, [r7, #28]
 800132c:	005b      	lsls	r3, r3, #1
 800132e:	2203      	movs	r2, #3
 8001330:	fa02 f303 	lsl.w	r3, r2, r3
 8001334:	43db      	mvns	r3, r3
 8001336:	69ba      	ldr	r2, [r7, #24]
 8001338:	4013      	ands	r3, r2
 800133a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	689a      	ldr	r2, [r3, #8]
 8001340:	69fb      	ldr	r3, [r7, #28]
 8001342:	005b      	lsls	r3, r3, #1
 8001344:	fa02 f303 	lsl.w	r3, r2, r3
 8001348:	69ba      	ldr	r2, [r7, #24]
 800134a:	4313      	orrs	r3, r2
 800134c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	69ba      	ldr	r2, [r7, #24]
 8001352:	60da      	str	r2, [r3, #12]
=======
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	68db      	ldr	r3, [r3, #12]
 8001340:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001342:	69fb      	ldr	r3, [r7, #28]
 8001344:	005b      	lsls	r3, r3, #1
 8001346:	2203      	movs	r2, #3
 8001348:	fa02 f303 	lsl.w	r3, r2, r3
 800134c:	43db      	mvns	r3, r3
 800134e:	69ba      	ldr	r2, [r7, #24]
 8001350:	4013      	ands	r3, r2
 8001352:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	689a      	ldr	r2, [r3, #8]
 8001358:	69fb      	ldr	r3, [r7, #28]
 800135a:	005b      	lsls	r3, r3, #1
 800135c:	fa02 f303 	lsl.w	r3, r2, r3
 8001360:	69ba      	ldr	r2, [r7, #24]
 8001362:	4313      	orrs	r3, r2
 8001364:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	69ba      	ldr	r2, [r7, #24]
 800136a:	60da      	str	r2, [r3, #12]
>>>>>>> AWS
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
<<<<<<< HEAD
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	f003 0303 	and.w	r3, r3, #3
 800135c:	2b02      	cmp	r3, #2
 800135e:	d123      	bne.n	80013a8 <HAL_GPIO_Init+0x144>
=======
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	f003 0303 	and.w	r3, r3, #3
 8001374:	2b02      	cmp	r3, #2
 8001376:	d123      	bne.n	80013c0 <HAL_GPIO_Init+0x144>
>>>>>>> AWS
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
<<<<<<< HEAD
 8001360:	69fb      	ldr	r3, [r7, #28]
 8001362:	08da      	lsrs	r2, r3, #3
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	3208      	adds	r2, #8
 8001368:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800136c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800136e:	69fb      	ldr	r3, [r7, #28]
 8001370:	f003 0307 	and.w	r3, r3, #7
 8001374:	009b      	lsls	r3, r3, #2
 8001376:	220f      	movs	r2, #15
 8001378:	fa02 f303 	lsl.w	r3, r2, r3
 800137c:	43db      	mvns	r3, r3
 800137e:	69ba      	ldr	r2, [r7, #24]
 8001380:	4013      	ands	r3, r2
 8001382:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	691a      	ldr	r2, [r3, #16]
 8001388:	69fb      	ldr	r3, [r7, #28]
 800138a:	f003 0307 	and.w	r3, r3, #7
 800138e:	009b      	lsls	r3, r3, #2
 8001390:	fa02 f303 	lsl.w	r3, r2, r3
 8001394:	69ba      	ldr	r2, [r7, #24]
 8001396:	4313      	orrs	r3, r2
 8001398:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800139a:	69fb      	ldr	r3, [r7, #28]
 800139c:	08da      	lsrs	r2, r3, #3
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	3208      	adds	r2, #8
 80013a2:	69b9      	ldr	r1, [r7, #24]
 80013a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
=======
 8001378:	69fb      	ldr	r3, [r7, #28]
 800137a:	08da      	lsrs	r2, r3, #3
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	3208      	adds	r2, #8
 8001380:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001384:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001386:	69fb      	ldr	r3, [r7, #28]
 8001388:	f003 0307 	and.w	r3, r3, #7
 800138c:	009b      	lsls	r3, r3, #2
 800138e:	220f      	movs	r2, #15
 8001390:	fa02 f303 	lsl.w	r3, r2, r3
 8001394:	43db      	mvns	r3, r3
 8001396:	69ba      	ldr	r2, [r7, #24]
 8001398:	4013      	ands	r3, r2
 800139a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	691a      	ldr	r2, [r3, #16]
 80013a0:	69fb      	ldr	r3, [r7, #28]
 80013a2:	f003 0307 	and.w	r3, r3, #7
 80013a6:	009b      	lsls	r3, r3, #2
 80013a8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ac:	69ba      	ldr	r2, [r7, #24]
 80013ae:	4313      	orrs	r3, r2
 80013b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80013b2:	69fb      	ldr	r3, [r7, #28]
 80013b4:	08da      	lsrs	r2, r3, #3
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	3208      	adds	r2, #8
 80013ba:	69b9      	ldr	r1, [r7, #24]
 80013bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
>>>>>>> AWS
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
<<<<<<< HEAD
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80013ae:	69fb      	ldr	r3, [r7, #28]
 80013b0:	005b      	lsls	r3, r3, #1
 80013b2:	2203      	movs	r2, #3
 80013b4:	fa02 f303 	lsl.w	r3, r2, r3
 80013b8:	43db      	mvns	r3, r3
 80013ba:	69ba      	ldr	r2, [r7, #24]
 80013bc:	4013      	ands	r3, r2
 80013be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	f003 0203 	and.w	r2, r3, #3
 80013c8:	69fb      	ldr	r3, [r7, #28]
 80013ca:	005b      	lsls	r3, r3, #1
 80013cc:	fa02 f303 	lsl.w	r3, r2, r3
 80013d0:	69ba      	ldr	r2, [r7, #24]
 80013d2:	4313      	orrs	r3, r2
 80013d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	69ba      	ldr	r2, [r7, #24]
 80013da:	601a      	str	r2, [r3, #0]
=======
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80013c6:	69fb      	ldr	r3, [r7, #28]
 80013c8:	005b      	lsls	r3, r3, #1
 80013ca:	2203      	movs	r2, #3
 80013cc:	fa02 f303 	lsl.w	r3, r2, r3
 80013d0:	43db      	mvns	r3, r3
 80013d2:	69ba      	ldr	r2, [r7, #24]
 80013d4:	4013      	ands	r3, r2
 80013d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	f003 0203 	and.w	r2, r3, #3
 80013e0:	69fb      	ldr	r3, [r7, #28]
 80013e2:	005b      	lsls	r3, r3, #1
 80013e4:	fa02 f303 	lsl.w	r3, r2, r3
 80013e8:	69ba      	ldr	r2, [r7, #24]
 80013ea:	4313      	orrs	r3, r2
 80013ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	69ba      	ldr	r2, [r7, #24]
 80013f2:	601a      	str	r2, [r3, #0]
>>>>>>> AWS

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
<<<<<<< HEAD
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	f000 80a2 	beq.w	800152e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ea:	2300      	movs	r3, #0
 80013ec:	60fb      	str	r3, [r7, #12]
 80013ee:	4b57      	ldr	r3, [pc, #348]	; (800154c <HAL_GPIO_Init+0x2e8>)
 80013f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013f2:	4a56      	ldr	r2, [pc, #344]	; (800154c <HAL_GPIO_Init+0x2e8>)
 80013f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013f8:	6453      	str	r3, [r2, #68]	; 0x44
 80013fa:	4b54      	ldr	r3, [pc, #336]	; (800154c <HAL_GPIO_Init+0x2e8>)
 80013fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001402:	60fb      	str	r3, [r7, #12]
 8001404:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001406:	4a52      	ldr	r2, [pc, #328]	; (8001550 <HAL_GPIO_Init+0x2ec>)
 8001408:	69fb      	ldr	r3, [r7, #28]
 800140a:	089b      	lsrs	r3, r3, #2
 800140c:	3302      	adds	r3, #2
 800140e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001412:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001414:	69fb      	ldr	r3, [r7, #28]
 8001416:	f003 0303 	and.w	r3, r3, #3
 800141a:	009b      	lsls	r3, r3, #2
 800141c:	220f      	movs	r2, #15
 800141e:	fa02 f303 	lsl.w	r3, r2, r3
 8001422:	43db      	mvns	r3, r3
 8001424:	69ba      	ldr	r2, [r7, #24]
 8001426:	4013      	ands	r3, r2
 8001428:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	4a49      	ldr	r2, [pc, #292]	; (8001554 <HAL_GPIO_Init+0x2f0>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d019      	beq.n	8001466 <HAL_GPIO_Init+0x202>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	4a48      	ldr	r2, [pc, #288]	; (8001558 <HAL_GPIO_Init+0x2f4>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d013      	beq.n	8001462 <HAL_GPIO_Init+0x1fe>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	4a47      	ldr	r2, [pc, #284]	; (800155c <HAL_GPIO_Init+0x2f8>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d00d      	beq.n	800145e <HAL_GPIO_Init+0x1fa>
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	4a46      	ldr	r2, [pc, #280]	; (8001560 <HAL_GPIO_Init+0x2fc>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d007      	beq.n	800145a <HAL_GPIO_Init+0x1f6>
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	4a45      	ldr	r2, [pc, #276]	; (8001564 <HAL_GPIO_Init+0x300>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d101      	bne.n	8001456 <HAL_GPIO_Init+0x1f2>
 8001452:	2304      	movs	r3, #4
 8001454:	e008      	b.n	8001468 <HAL_GPIO_Init+0x204>
 8001456:	2307      	movs	r3, #7
 8001458:	e006      	b.n	8001468 <HAL_GPIO_Init+0x204>
 800145a:	2303      	movs	r3, #3
 800145c:	e004      	b.n	8001468 <HAL_GPIO_Init+0x204>
 800145e:	2302      	movs	r3, #2
 8001460:	e002      	b.n	8001468 <HAL_GPIO_Init+0x204>
 8001462:	2301      	movs	r3, #1
 8001464:	e000      	b.n	8001468 <HAL_GPIO_Init+0x204>
 8001466:	2300      	movs	r3, #0
 8001468:	69fa      	ldr	r2, [r7, #28]
 800146a:	f002 0203 	and.w	r2, r2, #3
 800146e:	0092      	lsls	r2, r2, #2
 8001470:	4093      	lsls	r3, r2
 8001472:	69ba      	ldr	r2, [r7, #24]
 8001474:	4313      	orrs	r3, r2
 8001476:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001478:	4935      	ldr	r1, [pc, #212]	; (8001550 <HAL_GPIO_Init+0x2ec>)
 800147a:	69fb      	ldr	r3, [r7, #28]
 800147c:	089b      	lsrs	r3, r3, #2
 800147e:	3302      	adds	r3, #2
 8001480:	69ba      	ldr	r2, [r7, #24]
 8001482:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001486:	4b38      	ldr	r3, [pc, #224]	; (8001568 <HAL_GPIO_Init+0x304>)
 8001488:	689b      	ldr	r3, [r3, #8]
 800148a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800148c:	693b      	ldr	r3, [r7, #16]
 800148e:	43db      	mvns	r3, r3
 8001490:	69ba      	ldr	r2, [r7, #24]
 8001492:	4013      	ands	r3, r2
 8001494:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d003      	beq.n	80014aa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80014a2:	69ba      	ldr	r2, [r7, #24]
 80014a4:	693b      	ldr	r3, [r7, #16]
 80014a6:	4313      	orrs	r3, r2
 80014a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80014aa:	4a2f      	ldr	r2, [pc, #188]	; (8001568 <HAL_GPIO_Init+0x304>)
 80014ac:	69bb      	ldr	r3, [r7, #24]
 80014ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80014b0:	4b2d      	ldr	r3, [pc, #180]	; (8001568 <HAL_GPIO_Init+0x304>)
 80014b2:	68db      	ldr	r3, [r3, #12]
 80014b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014b6:	693b      	ldr	r3, [r7, #16]
 80014b8:	43db      	mvns	r3, r3
 80014ba:	69ba      	ldr	r2, [r7, #24]
 80014bc:	4013      	ands	r3, r2
 80014be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d003      	beq.n	80014d4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80014cc:	69ba      	ldr	r2, [r7, #24]
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	4313      	orrs	r3, r2
 80014d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80014d4:	4a24      	ldr	r2, [pc, #144]	; (8001568 <HAL_GPIO_Init+0x304>)
 80014d6:	69bb      	ldr	r3, [r7, #24]
 80014d8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80014da:	4b23      	ldr	r3, [pc, #140]	; (8001568 <HAL_GPIO_Init+0x304>)
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014e0:	693b      	ldr	r3, [r7, #16]
 80014e2:	43db      	mvns	r3, r3
 80014e4:	69ba      	ldr	r2, [r7, #24]
 80014e6:	4013      	ands	r3, r2
 80014e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d003      	beq.n	80014fe <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80014f6:	69ba      	ldr	r2, [r7, #24]
 80014f8:	693b      	ldr	r3, [r7, #16]
 80014fa:	4313      	orrs	r3, r2
 80014fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80014fe:	4a1a      	ldr	r2, [pc, #104]	; (8001568 <HAL_GPIO_Init+0x304>)
 8001500:	69bb      	ldr	r3, [r7, #24]
 8001502:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001504:	4b18      	ldr	r3, [pc, #96]	; (8001568 <HAL_GPIO_Init+0x304>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800150a:	693b      	ldr	r3, [r7, #16]
 800150c:	43db      	mvns	r3, r3
 800150e:	69ba      	ldr	r2, [r7, #24]
 8001510:	4013      	ands	r3, r2
 8001512:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800151c:	2b00      	cmp	r3, #0
 800151e:	d003      	beq.n	8001528 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001520:	69ba      	ldr	r2, [r7, #24]
 8001522:	693b      	ldr	r3, [r7, #16]
 8001524:	4313      	orrs	r3, r2
 8001526:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001528:	4a0f      	ldr	r2, [pc, #60]	; (8001568 <HAL_GPIO_Init+0x304>)
 800152a:	69bb      	ldr	r3, [r7, #24]
 800152c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800152e:	69fb      	ldr	r3, [r7, #28]
 8001530:	3301      	adds	r3, #1
 8001532:	61fb      	str	r3, [r7, #28]
 8001534:	69fb      	ldr	r3, [r7, #28]
 8001536:	2b0f      	cmp	r3, #15
 8001538:	f67f aea2 	bls.w	8001280 <HAL_GPIO_Init+0x1c>
=======
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	f000 80a2 	beq.w	8001546 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001402:	2300      	movs	r3, #0
 8001404:	60fb      	str	r3, [r7, #12]
 8001406:	4b57      	ldr	r3, [pc, #348]	; (8001564 <HAL_GPIO_Init+0x2e8>)
 8001408:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800140a:	4a56      	ldr	r2, [pc, #344]	; (8001564 <HAL_GPIO_Init+0x2e8>)
 800140c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001410:	6453      	str	r3, [r2, #68]	; 0x44
 8001412:	4b54      	ldr	r3, [pc, #336]	; (8001564 <HAL_GPIO_Init+0x2e8>)
 8001414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001416:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800141a:	60fb      	str	r3, [r7, #12]
 800141c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800141e:	4a52      	ldr	r2, [pc, #328]	; (8001568 <HAL_GPIO_Init+0x2ec>)
 8001420:	69fb      	ldr	r3, [r7, #28]
 8001422:	089b      	lsrs	r3, r3, #2
 8001424:	3302      	adds	r3, #2
 8001426:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800142a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800142c:	69fb      	ldr	r3, [r7, #28]
 800142e:	f003 0303 	and.w	r3, r3, #3
 8001432:	009b      	lsls	r3, r3, #2
 8001434:	220f      	movs	r2, #15
 8001436:	fa02 f303 	lsl.w	r3, r2, r3
 800143a:	43db      	mvns	r3, r3
 800143c:	69ba      	ldr	r2, [r7, #24]
 800143e:	4013      	ands	r3, r2
 8001440:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	4a49      	ldr	r2, [pc, #292]	; (800156c <HAL_GPIO_Init+0x2f0>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d019      	beq.n	800147e <HAL_GPIO_Init+0x202>
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	4a48      	ldr	r2, [pc, #288]	; (8001570 <HAL_GPIO_Init+0x2f4>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d013      	beq.n	800147a <HAL_GPIO_Init+0x1fe>
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	4a47      	ldr	r2, [pc, #284]	; (8001574 <HAL_GPIO_Init+0x2f8>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d00d      	beq.n	8001476 <HAL_GPIO_Init+0x1fa>
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	4a46      	ldr	r2, [pc, #280]	; (8001578 <HAL_GPIO_Init+0x2fc>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d007      	beq.n	8001472 <HAL_GPIO_Init+0x1f6>
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	4a45      	ldr	r2, [pc, #276]	; (800157c <HAL_GPIO_Init+0x300>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d101      	bne.n	800146e <HAL_GPIO_Init+0x1f2>
 800146a:	2304      	movs	r3, #4
 800146c:	e008      	b.n	8001480 <HAL_GPIO_Init+0x204>
 800146e:	2307      	movs	r3, #7
 8001470:	e006      	b.n	8001480 <HAL_GPIO_Init+0x204>
 8001472:	2303      	movs	r3, #3
 8001474:	e004      	b.n	8001480 <HAL_GPIO_Init+0x204>
 8001476:	2302      	movs	r3, #2
 8001478:	e002      	b.n	8001480 <HAL_GPIO_Init+0x204>
 800147a:	2301      	movs	r3, #1
 800147c:	e000      	b.n	8001480 <HAL_GPIO_Init+0x204>
 800147e:	2300      	movs	r3, #0
 8001480:	69fa      	ldr	r2, [r7, #28]
 8001482:	f002 0203 	and.w	r2, r2, #3
 8001486:	0092      	lsls	r2, r2, #2
 8001488:	4093      	lsls	r3, r2
 800148a:	69ba      	ldr	r2, [r7, #24]
 800148c:	4313      	orrs	r3, r2
 800148e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001490:	4935      	ldr	r1, [pc, #212]	; (8001568 <HAL_GPIO_Init+0x2ec>)
 8001492:	69fb      	ldr	r3, [r7, #28]
 8001494:	089b      	lsrs	r3, r3, #2
 8001496:	3302      	adds	r3, #2
 8001498:	69ba      	ldr	r2, [r7, #24]
 800149a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800149e:	4b38      	ldr	r3, [pc, #224]	; (8001580 <HAL_GPIO_Init+0x304>)
 80014a0:	689b      	ldr	r3, [r3, #8]
 80014a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014a4:	693b      	ldr	r3, [r7, #16]
 80014a6:	43db      	mvns	r3, r3
 80014a8:	69ba      	ldr	r2, [r7, #24]
 80014aa:	4013      	ands	r3, r2
 80014ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d003      	beq.n	80014c2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80014ba:	69ba      	ldr	r2, [r7, #24]
 80014bc:	693b      	ldr	r3, [r7, #16]
 80014be:	4313      	orrs	r3, r2
 80014c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80014c2:	4a2f      	ldr	r2, [pc, #188]	; (8001580 <HAL_GPIO_Init+0x304>)
 80014c4:	69bb      	ldr	r3, [r7, #24]
 80014c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80014c8:	4b2d      	ldr	r3, [pc, #180]	; (8001580 <HAL_GPIO_Init+0x304>)
 80014ca:	68db      	ldr	r3, [r3, #12]
 80014cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	43db      	mvns	r3, r3
 80014d2:	69ba      	ldr	r2, [r7, #24]
 80014d4:	4013      	ands	r3, r2
 80014d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d003      	beq.n	80014ec <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80014e4:	69ba      	ldr	r2, [r7, #24]
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	4313      	orrs	r3, r2
 80014ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80014ec:	4a24      	ldr	r2, [pc, #144]	; (8001580 <HAL_GPIO_Init+0x304>)
 80014ee:	69bb      	ldr	r3, [r7, #24]
 80014f0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80014f2:	4b23      	ldr	r3, [pc, #140]	; (8001580 <HAL_GPIO_Init+0x304>)
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014f8:	693b      	ldr	r3, [r7, #16]
 80014fa:	43db      	mvns	r3, r3
 80014fc:	69ba      	ldr	r2, [r7, #24]
 80014fe:	4013      	ands	r3, r2
 8001500:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800150a:	2b00      	cmp	r3, #0
 800150c:	d003      	beq.n	8001516 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800150e:	69ba      	ldr	r2, [r7, #24]
 8001510:	693b      	ldr	r3, [r7, #16]
 8001512:	4313      	orrs	r3, r2
 8001514:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001516:	4a1a      	ldr	r2, [pc, #104]	; (8001580 <HAL_GPIO_Init+0x304>)
 8001518:	69bb      	ldr	r3, [r7, #24]
 800151a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800151c:	4b18      	ldr	r3, [pc, #96]	; (8001580 <HAL_GPIO_Init+0x304>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001522:	693b      	ldr	r3, [r7, #16]
 8001524:	43db      	mvns	r3, r3
 8001526:	69ba      	ldr	r2, [r7, #24]
 8001528:	4013      	ands	r3, r2
 800152a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001534:	2b00      	cmp	r3, #0
 8001536:	d003      	beq.n	8001540 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001538:	69ba      	ldr	r2, [r7, #24]
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	4313      	orrs	r3, r2
 800153e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001540:	4a0f      	ldr	r2, [pc, #60]	; (8001580 <HAL_GPIO_Init+0x304>)
 8001542:	69bb      	ldr	r3, [r7, #24]
 8001544:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001546:	69fb      	ldr	r3, [r7, #28]
 8001548:	3301      	adds	r3, #1
 800154a:	61fb      	str	r3, [r7, #28]
 800154c:	69fb      	ldr	r3, [r7, #28]
 800154e:	2b0f      	cmp	r3, #15
 8001550:	f67f aea2 	bls.w	8001298 <HAL_GPIO_Init+0x1c>
>>>>>>> AWS
      }
    }
  }
}
<<<<<<< HEAD
 800153c:	bf00      	nop
 800153e:	bf00      	nop
 8001540:	3724      	adds	r7, #36	; 0x24
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr
 800154a:	bf00      	nop
 800154c:	40023800 	.word	0x40023800
 8001550:	40013800 	.word	0x40013800
 8001554:	40020000 	.word	0x40020000
 8001558:	40020400 	.word	0x40020400
 800155c:	40020800 	.word	0x40020800
 8001560:	40020c00 	.word	0x40020c00
 8001564:	40021000 	.word	0x40021000
 8001568:	40013c00 	.word	0x40013c00

0800156c <HAL_GPIO_WritePin>:
=======
 8001554:	bf00      	nop
 8001556:	bf00      	nop
 8001558:	3724      	adds	r7, #36	; 0x24
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr
 8001562:	bf00      	nop
 8001564:	40023800 	.word	0x40023800
 8001568:	40013800 	.word	0x40013800
 800156c:	40020000 	.word	0x40020000
 8001570:	40020400 	.word	0x40020400
 8001574:	40020800 	.word	0x40020800
 8001578:	40020c00 	.word	0x40020c00
 800157c:	40021000 	.word	0x40021000
 8001580:	40013c00 	.word	0x40013c00

08001584 <HAL_GPIO_WritePin>:
>>>>>>> AWS
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
<<<<<<< HEAD
 800156c:	b480      	push	{r7}
 800156e:	b083      	sub	sp, #12
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
 8001574:	460b      	mov	r3, r1
 8001576:	807b      	strh	r3, [r7, #2]
 8001578:	4613      	mov	r3, r2
 800157a:	707b      	strb	r3, [r7, #1]
=======
 8001584:	b480      	push	{r7}
 8001586:	b083      	sub	sp, #12
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
 800158c:	460b      	mov	r3, r1
 800158e:	807b      	strh	r3, [r7, #2]
 8001590:	4613      	mov	r3, r2
 8001592:	707b      	strb	r3, [r7, #1]
>>>>>>> AWS
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
<<<<<<< HEAD
 800157c:	787b      	ldrb	r3, [r7, #1]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d003      	beq.n	800158a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001582:	887a      	ldrh	r2, [r7, #2]
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	619a      	str	r2, [r3, #24]
=======
 8001594:	787b      	ldrb	r3, [r7, #1]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d003      	beq.n	80015a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800159a:	887a      	ldrh	r2, [r7, #2]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	619a      	str	r2, [r3, #24]
>>>>>>> AWS
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
<<<<<<< HEAD
 8001588:	e003      	b.n	8001592 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800158a:	887b      	ldrh	r3, [r7, #2]
 800158c:	041a      	lsls	r2, r3, #16
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	619a      	str	r2, [r3, #24]
}
 8001592:	bf00      	nop
 8001594:	370c      	adds	r7, #12
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr
	...

080015a0 <HAL_RCC_OscConfig>:
=======
 80015a0:	e003      	b.n	80015aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80015a2:	887b      	ldrh	r3, [r7, #2]
 80015a4:	041a      	lsls	r2, r3, #16
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	619a      	str	r2, [r3, #24]
}
 80015aa:	bf00      	nop
 80015ac:	370c      	adds	r7, #12
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr
	...

080015b8 <HAL_RCC_OscConfig>:
>>>>>>> AWS
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
<<<<<<< HEAD
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b086      	sub	sp, #24
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
=======
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b086      	sub	sp, #24
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
>>>>>>> AWS
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
<<<<<<< HEAD
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d101      	bne.n	80015b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015ae:	2301      	movs	r3, #1
 80015b0:	e267      	b.n	8001a82 <HAL_RCC_OscConfig+0x4e2>
=======
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d101      	bne.n	80015ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015c6:	2301      	movs	r3, #1
 80015c8:	e267      	b.n	8001a9a <HAL_RCC_OscConfig+0x4e2>
>>>>>>> AWS
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
<<<<<<< HEAD
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f003 0301 	and.w	r3, r3, #1
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d075      	beq.n	80016aa <HAL_RCC_OscConfig+0x10a>
=======
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f003 0301 	and.w	r3, r3, #1
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d075      	beq.n	80016c2 <HAL_RCC_OscConfig+0x10a>
>>>>>>> AWS
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
<<<<<<< HEAD
 80015be:	4b88      	ldr	r3, [pc, #544]	; (80017e0 <HAL_RCC_OscConfig+0x240>)
 80015c0:	689b      	ldr	r3, [r3, #8]
 80015c2:	f003 030c 	and.w	r3, r3, #12
 80015c6:	2b04      	cmp	r3, #4
 80015c8:	d00c      	beq.n	80015e4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015ca:	4b85      	ldr	r3, [pc, #532]	; (80017e0 <HAL_RCC_OscConfig+0x240>)
 80015cc:	689b      	ldr	r3, [r3, #8]
 80015ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80015d2:	2b08      	cmp	r3, #8
 80015d4:	d112      	bne.n	80015fc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015d6:	4b82      	ldr	r3, [pc, #520]	; (80017e0 <HAL_RCC_OscConfig+0x240>)
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80015e2:	d10b      	bne.n	80015fc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015e4:	4b7e      	ldr	r3, [pc, #504]	; (80017e0 <HAL_RCC_OscConfig+0x240>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d05b      	beq.n	80016a8 <HAL_RCC_OscConfig+0x108>
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d157      	bne.n	80016a8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80015f8:	2301      	movs	r3, #1
 80015fa:	e242      	b.n	8001a82 <HAL_RCC_OscConfig+0x4e2>
=======
 80015d6:	4b88      	ldr	r3, [pc, #544]	; (80017f8 <HAL_RCC_OscConfig+0x240>)
 80015d8:	689b      	ldr	r3, [r3, #8]
 80015da:	f003 030c 	and.w	r3, r3, #12
 80015de:	2b04      	cmp	r3, #4
 80015e0:	d00c      	beq.n	80015fc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015e2:	4b85      	ldr	r3, [pc, #532]	; (80017f8 <HAL_RCC_OscConfig+0x240>)
 80015e4:	689b      	ldr	r3, [r3, #8]
 80015e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80015ea:	2b08      	cmp	r3, #8
 80015ec:	d112      	bne.n	8001614 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015ee:	4b82      	ldr	r3, [pc, #520]	; (80017f8 <HAL_RCC_OscConfig+0x240>)
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80015fa:	d10b      	bne.n	8001614 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015fc:	4b7e      	ldr	r3, [pc, #504]	; (80017f8 <HAL_RCC_OscConfig+0x240>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001604:	2b00      	cmp	r3, #0
 8001606:	d05b      	beq.n	80016c0 <HAL_RCC_OscConfig+0x108>
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d157      	bne.n	80016c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001610:	2301      	movs	r3, #1
 8001612:	e242      	b.n	8001a9a <HAL_RCC_OscConfig+0x4e2>
>>>>>>> AWS
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
<<<<<<< HEAD
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001604:	d106      	bne.n	8001614 <HAL_RCC_OscConfig+0x74>
 8001606:	4b76      	ldr	r3, [pc, #472]	; (80017e0 <HAL_RCC_OscConfig+0x240>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4a75      	ldr	r2, [pc, #468]	; (80017e0 <HAL_RCC_OscConfig+0x240>)
 800160c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001610:	6013      	str	r3, [r2, #0]
 8001612:	e01d      	b.n	8001650 <HAL_RCC_OscConfig+0xb0>
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800161c:	d10c      	bne.n	8001638 <HAL_RCC_OscConfig+0x98>
 800161e:	4b70      	ldr	r3, [pc, #448]	; (80017e0 <HAL_RCC_OscConfig+0x240>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4a6f      	ldr	r2, [pc, #444]	; (80017e0 <HAL_RCC_OscConfig+0x240>)
 8001624:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001628:	6013      	str	r3, [r2, #0]
 800162a:	4b6d      	ldr	r3, [pc, #436]	; (80017e0 <HAL_RCC_OscConfig+0x240>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4a6c      	ldr	r2, [pc, #432]	; (80017e0 <HAL_RCC_OscConfig+0x240>)
 8001630:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001634:	6013      	str	r3, [r2, #0]
 8001636:	e00b      	b.n	8001650 <HAL_RCC_OscConfig+0xb0>
 8001638:	4b69      	ldr	r3, [pc, #420]	; (80017e0 <HAL_RCC_OscConfig+0x240>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a68      	ldr	r2, [pc, #416]	; (80017e0 <HAL_RCC_OscConfig+0x240>)
 800163e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001642:	6013      	str	r3, [r2, #0]
 8001644:	4b66      	ldr	r3, [pc, #408]	; (80017e0 <HAL_RCC_OscConfig+0x240>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a65      	ldr	r2, [pc, #404]	; (80017e0 <HAL_RCC_OscConfig+0x240>)
 800164a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800164e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d013      	beq.n	8001680 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001658:	f7ff fc54 	bl	8000f04 <HAL_GetTick>
 800165c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800165e:	e008      	b.n	8001672 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001660:	f7ff fc50 	bl	8000f04 <HAL_GetTick>
 8001664:	4602      	mov	r2, r0
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	1ad3      	subs	r3, r2, r3
 800166a:	2b64      	cmp	r3, #100	; 0x64
 800166c:	d901      	bls.n	8001672 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800166e:	2303      	movs	r3, #3
 8001670:	e207      	b.n	8001a82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001672:	4b5b      	ldr	r3, [pc, #364]	; (80017e0 <HAL_RCC_OscConfig+0x240>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800167a:	2b00      	cmp	r3, #0
 800167c:	d0f0      	beq.n	8001660 <HAL_RCC_OscConfig+0xc0>
 800167e:	e014      	b.n	80016aa <HAL_RCC_OscConfig+0x10a>
=======
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800161c:	d106      	bne.n	800162c <HAL_RCC_OscConfig+0x74>
 800161e:	4b76      	ldr	r3, [pc, #472]	; (80017f8 <HAL_RCC_OscConfig+0x240>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4a75      	ldr	r2, [pc, #468]	; (80017f8 <HAL_RCC_OscConfig+0x240>)
 8001624:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001628:	6013      	str	r3, [r2, #0]
 800162a:	e01d      	b.n	8001668 <HAL_RCC_OscConfig+0xb0>
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001634:	d10c      	bne.n	8001650 <HAL_RCC_OscConfig+0x98>
 8001636:	4b70      	ldr	r3, [pc, #448]	; (80017f8 <HAL_RCC_OscConfig+0x240>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4a6f      	ldr	r2, [pc, #444]	; (80017f8 <HAL_RCC_OscConfig+0x240>)
 800163c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001640:	6013      	str	r3, [r2, #0]
 8001642:	4b6d      	ldr	r3, [pc, #436]	; (80017f8 <HAL_RCC_OscConfig+0x240>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4a6c      	ldr	r2, [pc, #432]	; (80017f8 <HAL_RCC_OscConfig+0x240>)
 8001648:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800164c:	6013      	str	r3, [r2, #0]
 800164e:	e00b      	b.n	8001668 <HAL_RCC_OscConfig+0xb0>
 8001650:	4b69      	ldr	r3, [pc, #420]	; (80017f8 <HAL_RCC_OscConfig+0x240>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a68      	ldr	r2, [pc, #416]	; (80017f8 <HAL_RCC_OscConfig+0x240>)
 8001656:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800165a:	6013      	str	r3, [r2, #0]
 800165c:	4b66      	ldr	r3, [pc, #408]	; (80017f8 <HAL_RCC_OscConfig+0x240>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a65      	ldr	r2, [pc, #404]	; (80017f8 <HAL_RCC_OscConfig+0x240>)
 8001662:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001666:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d013      	beq.n	8001698 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001670:	f7ff fc54 	bl	8000f1c <HAL_GetTick>
 8001674:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001676:	e008      	b.n	800168a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001678:	f7ff fc50 	bl	8000f1c <HAL_GetTick>
 800167c:	4602      	mov	r2, r0
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	1ad3      	subs	r3, r2, r3
 8001682:	2b64      	cmp	r3, #100	; 0x64
 8001684:	d901      	bls.n	800168a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001686:	2303      	movs	r3, #3
 8001688:	e207      	b.n	8001a9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800168a:	4b5b      	ldr	r3, [pc, #364]	; (80017f8 <HAL_RCC_OscConfig+0x240>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001692:	2b00      	cmp	r3, #0
 8001694:	d0f0      	beq.n	8001678 <HAL_RCC_OscConfig+0xc0>
 8001696:	e014      	b.n	80016c2 <HAL_RCC_OscConfig+0x10a>
>>>>>>> AWS
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
<<<<<<< HEAD
 8001680:	f7ff fc40 	bl	8000f04 <HAL_GetTick>
 8001684:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001686:	e008      	b.n	800169a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001688:	f7ff fc3c 	bl	8000f04 <HAL_GetTick>
 800168c:	4602      	mov	r2, r0
 800168e:	693b      	ldr	r3, [r7, #16]
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	2b64      	cmp	r3, #100	; 0x64
 8001694:	d901      	bls.n	800169a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001696:	2303      	movs	r3, #3
 8001698:	e1f3      	b.n	8001a82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800169a:	4b51      	ldr	r3, [pc, #324]	; (80017e0 <HAL_RCC_OscConfig+0x240>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d1f0      	bne.n	8001688 <HAL_RCC_OscConfig+0xe8>
 80016a6:	e000      	b.n	80016aa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016a8:	bf00      	nop
=======
 8001698:	f7ff fc40 	bl	8000f1c <HAL_GetTick>
 800169c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800169e:	e008      	b.n	80016b2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016a0:	f7ff fc3c 	bl	8000f1c <HAL_GetTick>
 80016a4:	4602      	mov	r2, r0
 80016a6:	693b      	ldr	r3, [r7, #16]
 80016a8:	1ad3      	subs	r3, r2, r3
 80016aa:	2b64      	cmp	r3, #100	; 0x64
 80016ac:	d901      	bls.n	80016b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80016ae:	2303      	movs	r3, #3
 80016b0:	e1f3      	b.n	8001a9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016b2:	4b51      	ldr	r3, [pc, #324]	; (80017f8 <HAL_RCC_OscConfig+0x240>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d1f0      	bne.n	80016a0 <HAL_RCC_OscConfig+0xe8>
 80016be:	e000      	b.n	80016c2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016c0:	bf00      	nop
>>>>>>> AWS
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
<<<<<<< HEAD
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f003 0302 	and.w	r3, r3, #2
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d063      	beq.n	800177e <HAL_RCC_OscConfig+0x1de>
=======
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f003 0302 	and.w	r3, r3, #2
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d063      	beq.n	8001796 <HAL_RCC_OscConfig+0x1de>
>>>>>>> AWS
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
<<<<<<< HEAD
 80016b6:	4b4a      	ldr	r3, [pc, #296]	; (80017e0 <HAL_RCC_OscConfig+0x240>)
 80016b8:	689b      	ldr	r3, [r3, #8]
 80016ba:	f003 030c 	and.w	r3, r3, #12
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d00b      	beq.n	80016da <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016c2:	4b47      	ldr	r3, [pc, #284]	; (80017e0 <HAL_RCC_OscConfig+0x240>)
 80016c4:	689b      	ldr	r3, [r3, #8]
 80016c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80016ca:	2b08      	cmp	r3, #8
 80016cc:	d11c      	bne.n	8001708 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016ce:	4b44      	ldr	r3, [pc, #272]	; (80017e0 <HAL_RCC_OscConfig+0x240>)
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d116      	bne.n	8001708 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016da:	4b41      	ldr	r3, [pc, #260]	; (80017e0 <HAL_RCC_OscConfig+0x240>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f003 0302 	and.w	r3, r3, #2
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d005      	beq.n	80016f2 <HAL_RCC_OscConfig+0x152>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	68db      	ldr	r3, [r3, #12]
 80016ea:	2b01      	cmp	r3, #1
 80016ec:	d001      	beq.n	80016f2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80016ee:	2301      	movs	r3, #1
 80016f0:	e1c7      	b.n	8001a82 <HAL_RCC_OscConfig+0x4e2>
=======
 80016ce:	4b4a      	ldr	r3, [pc, #296]	; (80017f8 <HAL_RCC_OscConfig+0x240>)
 80016d0:	689b      	ldr	r3, [r3, #8]
 80016d2:	f003 030c 	and.w	r3, r3, #12
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d00b      	beq.n	80016f2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016da:	4b47      	ldr	r3, [pc, #284]	; (80017f8 <HAL_RCC_OscConfig+0x240>)
 80016dc:	689b      	ldr	r3, [r3, #8]
 80016de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80016e2:	2b08      	cmp	r3, #8
 80016e4:	d11c      	bne.n	8001720 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016e6:	4b44      	ldr	r3, [pc, #272]	; (80017f8 <HAL_RCC_OscConfig+0x240>)
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d116      	bne.n	8001720 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016f2:	4b41      	ldr	r3, [pc, #260]	; (80017f8 <HAL_RCC_OscConfig+0x240>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f003 0302 	and.w	r3, r3, #2
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d005      	beq.n	800170a <HAL_RCC_OscConfig+0x152>
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	68db      	ldr	r3, [r3, #12]
 8001702:	2b01      	cmp	r3, #1
 8001704:	d001      	beq.n	800170a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001706:	2301      	movs	r3, #1
 8001708:	e1c7      	b.n	8001a9a <HAL_RCC_OscConfig+0x4e2>
>>>>>>> AWS
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
<<<<<<< HEAD
 80016f2:	4b3b      	ldr	r3, [pc, #236]	; (80017e0 <HAL_RCC_OscConfig+0x240>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	691b      	ldr	r3, [r3, #16]
 80016fe:	00db      	lsls	r3, r3, #3
 8001700:	4937      	ldr	r1, [pc, #220]	; (80017e0 <HAL_RCC_OscConfig+0x240>)
 8001702:	4313      	orrs	r3, r2
 8001704:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001706:	e03a      	b.n	800177e <HAL_RCC_OscConfig+0x1de>
=======
 800170a:	4b3b      	ldr	r3, [pc, #236]	; (80017f8 <HAL_RCC_OscConfig+0x240>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	691b      	ldr	r3, [r3, #16]
 8001716:	00db      	lsls	r3, r3, #3
 8001718:	4937      	ldr	r1, [pc, #220]	; (80017f8 <HAL_RCC_OscConfig+0x240>)
 800171a:	4313      	orrs	r3, r2
 800171c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800171e:	e03a      	b.n	8001796 <HAL_RCC_OscConfig+0x1de>
>>>>>>> AWS
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
<<<<<<< HEAD
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	68db      	ldr	r3, [r3, #12]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d020      	beq.n	8001752 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001710:	4b34      	ldr	r3, [pc, #208]	; (80017e4 <HAL_RCC_OscConfig+0x244>)
 8001712:	2201      	movs	r2, #1
 8001714:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001716:	f7ff fbf5 	bl	8000f04 <HAL_GetTick>
 800171a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800171c:	e008      	b.n	8001730 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800171e:	f7ff fbf1 	bl	8000f04 <HAL_GetTick>
 8001722:	4602      	mov	r2, r0
 8001724:	693b      	ldr	r3, [r7, #16]
 8001726:	1ad3      	subs	r3, r2, r3
 8001728:	2b02      	cmp	r3, #2
 800172a:	d901      	bls.n	8001730 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800172c:	2303      	movs	r3, #3
 800172e:	e1a8      	b.n	8001a82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001730:	4b2b      	ldr	r3, [pc, #172]	; (80017e0 <HAL_RCC_OscConfig+0x240>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f003 0302 	and.w	r3, r3, #2
 8001738:	2b00      	cmp	r3, #0
 800173a:	d0f0      	beq.n	800171e <HAL_RCC_OscConfig+0x17e>
=======
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	68db      	ldr	r3, [r3, #12]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d020      	beq.n	800176a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001728:	4b34      	ldr	r3, [pc, #208]	; (80017fc <HAL_RCC_OscConfig+0x244>)
 800172a:	2201      	movs	r2, #1
 800172c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800172e:	f7ff fbf5 	bl	8000f1c <HAL_GetTick>
 8001732:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001734:	e008      	b.n	8001748 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001736:	f7ff fbf1 	bl	8000f1c <HAL_GetTick>
 800173a:	4602      	mov	r2, r0
 800173c:	693b      	ldr	r3, [r7, #16]
 800173e:	1ad3      	subs	r3, r2, r3
 8001740:	2b02      	cmp	r3, #2
 8001742:	d901      	bls.n	8001748 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001744:	2303      	movs	r3, #3
 8001746:	e1a8      	b.n	8001a9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001748:	4b2b      	ldr	r3, [pc, #172]	; (80017f8 <HAL_RCC_OscConfig+0x240>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f003 0302 	and.w	r3, r3, #2
 8001750:	2b00      	cmp	r3, #0
 8001752:	d0f0      	beq.n	8001736 <HAL_RCC_OscConfig+0x17e>
>>>>>>> AWS
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
<<<<<<< HEAD
 800173c:	4b28      	ldr	r3, [pc, #160]	; (80017e0 <HAL_RCC_OscConfig+0x240>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	691b      	ldr	r3, [r3, #16]
 8001748:	00db      	lsls	r3, r3, #3
 800174a:	4925      	ldr	r1, [pc, #148]	; (80017e0 <HAL_RCC_OscConfig+0x240>)
 800174c:	4313      	orrs	r3, r2
 800174e:	600b      	str	r3, [r1, #0]
 8001750:	e015      	b.n	800177e <HAL_RCC_OscConfig+0x1de>
=======
 8001754:	4b28      	ldr	r3, [pc, #160]	; (80017f8 <HAL_RCC_OscConfig+0x240>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	691b      	ldr	r3, [r3, #16]
 8001760:	00db      	lsls	r3, r3, #3
 8001762:	4925      	ldr	r1, [pc, #148]	; (80017f8 <HAL_RCC_OscConfig+0x240>)
 8001764:	4313      	orrs	r3, r2
 8001766:	600b      	str	r3, [r1, #0]
 8001768:	e015      	b.n	8001796 <HAL_RCC_OscConfig+0x1de>
>>>>>>> AWS
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
<<<<<<< HEAD
 8001752:	4b24      	ldr	r3, [pc, #144]	; (80017e4 <HAL_RCC_OscConfig+0x244>)
 8001754:	2200      	movs	r2, #0
 8001756:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001758:	f7ff fbd4 	bl	8000f04 <HAL_GetTick>
 800175c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800175e:	e008      	b.n	8001772 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001760:	f7ff fbd0 	bl	8000f04 <HAL_GetTick>
 8001764:	4602      	mov	r2, r0
 8001766:	693b      	ldr	r3, [r7, #16]
 8001768:	1ad3      	subs	r3, r2, r3
 800176a:	2b02      	cmp	r3, #2
 800176c:	d901      	bls.n	8001772 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800176e:	2303      	movs	r3, #3
 8001770:	e187      	b.n	8001a82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001772:	4b1b      	ldr	r3, [pc, #108]	; (80017e0 <HAL_RCC_OscConfig+0x240>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f003 0302 	and.w	r3, r3, #2
 800177a:	2b00      	cmp	r3, #0
 800177c:	d1f0      	bne.n	8001760 <HAL_RCC_OscConfig+0x1c0>
=======
 800176a:	4b24      	ldr	r3, [pc, #144]	; (80017fc <HAL_RCC_OscConfig+0x244>)
 800176c:	2200      	movs	r2, #0
 800176e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001770:	f7ff fbd4 	bl	8000f1c <HAL_GetTick>
 8001774:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001776:	e008      	b.n	800178a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001778:	f7ff fbd0 	bl	8000f1c <HAL_GetTick>
 800177c:	4602      	mov	r2, r0
 800177e:	693b      	ldr	r3, [r7, #16]
 8001780:	1ad3      	subs	r3, r2, r3
 8001782:	2b02      	cmp	r3, #2
 8001784:	d901      	bls.n	800178a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001786:	2303      	movs	r3, #3
 8001788:	e187      	b.n	8001a9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800178a:	4b1b      	ldr	r3, [pc, #108]	; (80017f8 <HAL_RCC_OscConfig+0x240>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f003 0302 	and.w	r3, r3, #2
 8001792:	2b00      	cmp	r3, #0
 8001794:	d1f0      	bne.n	8001778 <HAL_RCC_OscConfig+0x1c0>
>>>>>>> AWS
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
<<<<<<< HEAD
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f003 0308 	and.w	r3, r3, #8
 8001786:	2b00      	cmp	r3, #0
 8001788:	d036      	beq.n	80017f8 <HAL_RCC_OscConfig+0x258>
=======
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f003 0308 	and.w	r3, r3, #8
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d036      	beq.n	8001810 <HAL_RCC_OscConfig+0x258>
>>>>>>> AWS
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
<<<<<<< HEAD
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	695b      	ldr	r3, [r3, #20]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d016      	beq.n	80017c0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001792:	4b15      	ldr	r3, [pc, #84]	; (80017e8 <HAL_RCC_OscConfig+0x248>)
 8001794:	2201      	movs	r2, #1
 8001796:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001798:	f7ff fbb4 	bl	8000f04 <HAL_GetTick>
 800179c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800179e:	e008      	b.n	80017b2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017a0:	f7ff fbb0 	bl	8000f04 <HAL_GetTick>
 80017a4:	4602      	mov	r2, r0
 80017a6:	693b      	ldr	r3, [r7, #16]
 80017a8:	1ad3      	subs	r3, r2, r3
 80017aa:	2b02      	cmp	r3, #2
 80017ac:	d901      	bls.n	80017b2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80017ae:	2303      	movs	r3, #3
 80017b0:	e167      	b.n	8001a82 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017b2:	4b0b      	ldr	r3, [pc, #44]	; (80017e0 <HAL_RCC_OscConfig+0x240>)
 80017b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017b6:	f003 0302 	and.w	r3, r3, #2
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d0f0      	beq.n	80017a0 <HAL_RCC_OscConfig+0x200>
 80017be:	e01b      	b.n	80017f8 <HAL_RCC_OscConfig+0x258>
=======
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	695b      	ldr	r3, [r3, #20]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d016      	beq.n	80017d8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017aa:	4b15      	ldr	r3, [pc, #84]	; (8001800 <HAL_RCC_OscConfig+0x248>)
 80017ac:	2201      	movs	r2, #1
 80017ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017b0:	f7ff fbb4 	bl	8000f1c <HAL_GetTick>
 80017b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017b6:	e008      	b.n	80017ca <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017b8:	f7ff fbb0 	bl	8000f1c <HAL_GetTick>
 80017bc:	4602      	mov	r2, r0
 80017be:	693b      	ldr	r3, [r7, #16]
 80017c0:	1ad3      	subs	r3, r2, r3
 80017c2:	2b02      	cmp	r3, #2
 80017c4:	d901      	bls.n	80017ca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80017c6:	2303      	movs	r3, #3
 80017c8:	e167      	b.n	8001a9a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017ca:	4b0b      	ldr	r3, [pc, #44]	; (80017f8 <HAL_RCC_OscConfig+0x240>)
 80017cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017ce:	f003 0302 	and.w	r3, r3, #2
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d0f0      	beq.n	80017b8 <HAL_RCC_OscConfig+0x200>
 80017d6:	e01b      	b.n	8001810 <HAL_RCC_OscConfig+0x258>
>>>>>>> AWS
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
<<<<<<< HEAD
 80017c0:	4b09      	ldr	r3, [pc, #36]	; (80017e8 <HAL_RCC_OscConfig+0x248>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017c6:	f7ff fb9d 	bl	8000f04 <HAL_GetTick>
 80017ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017cc:	e00e      	b.n	80017ec <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017ce:	f7ff fb99 	bl	8000f04 <HAL_GetTick>
 80017d2:	4602      	mov	r2, r0
 80017d4:	693b      	ldr	r3, [r7, #16]
 80017d6:	1ad3      	subs	r3, r2, r3
 80017d8:	2b02      	cmp	r3, #2
 80017da:	d907      	bls.n	80017ec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80017dc:	2303      	movs	r3, #3
 80017de:	e150      	b.n	8001a82 <HAL_RCC_OscConfig+0x4e2>
 80017e0:	40023800 	.word	0x40023800
 80017e4:	42470000 	.word	0x42470000
 80017e8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017ec:	4b88      	ldr	r3, [pc, #544]	; (8001a10 <HAL_RCC_OscConfig+0x470>)
 80017ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017f0:	f003 0302 	and.w	r3, r3, #2
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d1ea      	bne.n	80017ce <HAL_RCC_OscConfig+0x22e>
=======
 80017d8:	4b09      	ldr	r3, [pc, #36]	; (8001800 <HAL_RCC_OscConfig+0x248>)
 80017da:	2200      	movs	r2, #0
 80017dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017de:	f7ff fb9d 	bl	8000f1c <HAL_GetTick>
 80017e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017e4:	e00e      	b.n	8001804 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017e6:	f7ff fb99 	bl	8000f1c <HAL_GetTick>
 80017ea:	4602      	mov	r2, r0
 80017ec:	693b      	ldr	r3, [r7, #16]
 80017ee:	1ad3      	subs	r3, r2, r3
 80017f0:	2b02      	cmp	r3, #2
 80017f2:	d907      	bls.n	8001804 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80017f4:	2303      	movs	r3, #3
 80017f6:	e150      	b.n	8001a9a <HAL_RCC_OscConfig+0x4e2>
 80017f8:	40023800 	.word	0x40023800
 80017fc:	42470000 	.word	0x42470000
 8001800:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001804:	4b88      	ldr	r3, [pc, #544]	; (8001a28 <HAL_RCC_OscConfig+0x470>)
 8001806:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001808:	f003 0302 	and.w	r3, r3, #2
 800180c:	2b00      	cmp	r3, #0
 800180e:	d1ea      	bne.n	80017e6 <HAL_RCC_OscConfig+0x22e>
>>>>>>> AWS
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
<<<<<<< HEAD
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f003 0304 	and.w	r3, r3, #4
 8001800:	2b00      	cmp	r3, #0
 8001802:	f000 8097 	beq.w	8001934 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001806:	2300      	movs	r3, #0
 8001808:	75fb      	strb	r3, [r7, #23]
=======
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f003 0304 	and.w	r3, r3, #4
 8001818:	2b00      	cmp	r3, #0
 800181a:	f000 8097 	beq.w	800194c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800181e:	2300      	movs	r3, #0
 8001820:	75fb      	strb	r3, [r7, #23]
>>>>>>> AWS
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
<<<<<<< HEAD
 800180a:	4b81      	ldr	r3, [pc, #516]	; (8001a10 <HAL_RCC_OscConfig+0x470>)
 800180c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001812:	2b00      	cmp	r3, #0
 8001814:	d10f      	bne.n	8001836 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001816:	2300      	movs	r3, #0
 8001818:	60bb      	str	r3, [r7, #8]
 800181a:	4b7d      	ldr	r3, [pc, #500]	; (8001a10 <HAL_RCC_OscConfig+0x470>)
 800181c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800181e:	4a7c      	ldr	r2, [pc, #496]	; (8001a10 <HAL_RCC_OscConfig+0x470>)
 8001820:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001824:	6413      	str	r3, [r2, #64]	; 0x40
 8001826:	4b7a      	ldr	r3, [pc, #488]	; (8001a10 <HAL_RCC_OscConfig+0x470>)
 8001828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800182a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800182e:	60bb      	str	r3, [r7, #8]
 8001830:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001832:	2301      	movs	r3, #1
 8001834:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001836:	4b77      	ldr	r3, [pc, #476]	; (8001a14 <HAL_RCC_OscConfig+0x474>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800183e:	2b00      	cmp	r3, #0
 8001840:	d118      	bne.n	8001874 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001842:	4b74      	ldr	r3, [pc, #464]	; (8001a14 <HAL_RCC_OscConfig+0x474>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4a73      	ldr	r2, [pc, #460]	; (8001a14 <HAL_RCC_OscConfig+0x474>)
 8001848:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800184c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800184e:	f7ff fb59 	bl	8000f04 <HAL_GetTick>
 8001852:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001854:	e008      	b.n	8001868 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001856:	f7ff fb55 	bl	8000f04 <HAL_GetTick>
 800185a:	4602      	mov	r2, r0
 800185c:	693b      	ldr	r3, [r7, #16]
 800185e:	1ad3      	subs	r3, r2, r3
 8001860:	2b02      	cmp	r3, #2
 8001862:	d901      	bls.n	8001868 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001864:	2303      	movs	r3, #3
 8001866:	e10c      	b.n	8001a82 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001868:	4b6a      	ldr	r3, [pc, #424]	; (8001a14 <HAL_RCC_OscConfig+0x474>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001870:	2b00      	cmp	r3, #0
 8001872:	d0f0      	beq.n	8001856 <HAL_RCC_OscConfig+0x2b6>
=======
 8001822:	4b81      	ldr	r3, [pc, #516]	; (8001a28 <HAL_RCC_OscConfig+0x470>)
 8001824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001826:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800182a:	2b00      	cmp	r3, #0
 800182c:	d10f      	bne.n	800184e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800182e:	2300      	movs	r3, #0
 8001830:	60bb      	str	r3, [r7, #8]
 8001832:	4b7d      	ldr	r3, [pc, #500]	; (8001a28 <HAL_RCC_OscConfig+0x470>)
 8001834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001836:	4a7c      	ldr	r2, [pc, #496]	; (8001a28 <HAL_RCC_OscConfig+0x470>)
 8001838:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800183c:	6413      	str	r3, [r2, #64]	; 0x40
 800183e:	4b7a      	ldr	r3, [pc, #488]	; (8001a28 <HAL_RCC_OscConfig+0x470>)
 8001840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001842:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001846:	60bb      	str	r3, [r7, #8]
 8001848:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800184a:	2301      	movs	r3, #1
 800184c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800184e:	4b77      	ldr	r3, [pc, #476]	; (8001a2c <HAL_RCC_OscConfig+0x474>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001856:	2b00      	cmp	r3, #0
 8001858:	d118      	bne.n	800188c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800185a:	4b74      	ldr	r3, [pc, #464]	; (8001a2c <HAL_RCC_OscConfig+0x474>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4a73      	ldr	r2, [pc, #460]	; (8001a2c <HAL_RCC_OscConfig+0x474>)
 8001860:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001864:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001866:	f7ff fb59 	bl	8000f1c <HAL_GetTick>
 800186a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800186c:	e008      	b.n	8001880 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800186e:	f7ff fb55 	bl	8000f1c <HAL_GetTick>
 8001872:	4602      	mov	r2, r0
 8001874:	693b      	ldr	r3, [r7, #16]
 8001876:	1ad3      	subs	r3, r2, r3
 8001878:	2b02      	cmp	r3, #2
 800187a:	d901      	bls.n	8001880 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800187c:	2303      	movs	r3, #3
 800187e:	e10c      	b.n	8001a9a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001880:	4b6a      	ldr	r3, [pc, #424]	; (8001a2c <HAL_RCC_OscConfig+0x474>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001888:	2b00      	cmp	r3, #0
 800188a:	d0f0      	beq.n	800186e <HAL_RCC_OscConfig+0x2b6>
>>>>>>> AWS
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
<<<<<<< HEAD
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	689b      	ldr	r3, [r3, #8]
 8001878:	2b01      	cmp	r3, #1
 800187a:	d106      	bne.n	800188a <HAL_RCC_OscConfig+0x2ea>
 800187c:	4b64      	ldr	r3, [pc, #400]	; (8001a10 <HAL_RCC_OscConfig+0x470>)
 800187e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001880:	4a63      	ldr	r2, [pc, #396]	; (8001a10 <HAL_RCC_OscConfig+0x470>)
 8001882:	f043 0301 	orr.w	r3, r3, #1
 8001886:	6713      	str	r3, [r2, #112]	; 0x70
 8001888:	e01c      	b.n	80018c4 <HAL_RCC_OscConfig+0x324>
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	689b      	ldr	r3, [r3, #8]
 800188e:	2b05      	cmp	r3, #5
 8001890:	d10c      	bne.n	80018ac <HAL_RCC_OscConfig+0x30c>
 8001892:	4b5f      	ldr	r3, [pc, #380]	; (8001a10 <HAL_RCC_OscConfig+0x470>)
 8001894:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001896:	4a5e      	ldr	r2, [pc, #376]	; (8001a10 <HAL_RCC_OscConfig+0x470>)
 8001898:	f043 0304 	orr.w	r3, r3, #4
 800189c:	6713      	str	r3, [r2, #112]	; 0x70
 800189e:	4b5c      	ldr	r3, [pc, #368]	; (8001a10 <HAL_RCC_OscConfig+0x470>)
 80018a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018a2:	4a5b      	ldr	r2, [pc, #364]	; (8001a10 <HAL_RCC_OscConfig+0x470>)
 80018a4:	f043 0301 	orr.w	r3, r3, #1
 80018a8:	6713      	str	r3, [r2, #112]	; 0x70
 80018aa:	e00b      	b.n	80018c4 <HAL_RCC_OscConfig+0x324>
 80018ac:	4b58      	ldr	r3, [pc, #352]	; (8001a10 <HAL_RCC_OscConfig+0x470>)
 80018ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018b0:	4a57      	ldr	r2, [pc, #348]	; (8001a10 <HAL_RCC_OscConfig+0x470>)
 80018b2:	f023 0301 	bic.w	r3, r3, #1
 80018b6:	6713      	str	r3, [r2, #112]	; 0x70
 80018b8:	4b55      	ldr	r3, [pc, #340]	; (8001a10 <HAL_RCC_OscConfig+0x470>)
 80018ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018bc:	4a54      	ldr	r2, [pc, #336]	; (8001a10 <HAL_RCC_OscConfig+0x470>)
 80018be:	f023 0304 	bic.w	r3, r3, #4
 80018c2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d015      	beq.n	80018f8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018cc:	f7ff fb1a 	bl	8000f04 <HAL_GetTick>
 80018d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018d2:	e00a      	b.n	80018ea <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018d4:	f7ff fb16 	bl	8000f04 <HAL_GetTick>
 80018d8:	4602      	mov	r2, r0
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	1ad3      	subs	r3, r2, r3
 80018de:	f241 3288 	movw	r2, #5000	; 0x1388
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d901      	bls.n	80018ea <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80018e6:	2303      	movs	r3, #3
 80018e8:	e0cb      	b.n	8001a82 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018ea:	4b49      	ldr	r3, [pc, #292]	; (8001a10 <HAL_RCC_OscConfig+0x470>)
 80018ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018ee:	f003 0302 	and.w	r3, r3, #2
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d0ee      	beq.n	80018d4 <HAL_RCC_OscConfig+0x334>
 80018f6:	e014      	b.n	8001922 <HAL_RCC_OscConfig+0x382>
=======
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	689b      	ldr	r3, [r3, #8]
 8001890:	2b01      	cmp	r3, #1
 8001892:	d106      	bne.n	80018a2 <HAL_RCC_OscConfig+0x2ea>
 8001894:	4b64      	ldr	r3, [pc, #400]	; (8001a28 <HAL_RCC_OscConfig+0x470>)
 8001896:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001898:	4a63      	ldr	r2, [pc, #396]	; (8001a28 <HAL_RCC_OscConfig+0x470>)
 800189a:	f043 0301 	orr.w	r3, r3, #1
 800189e:	6713      	str	r3, [r2, #112]	; 0x70
 80018a0:	e01c      	b.n	80018dc <HAL_RCC_OscConfig+0x324>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	689b      	ldr	r3, [r3, #8]
 80018a6:	2b05      	cmp	r3, #5
 80018a8:	d10c      	bne.n	80018c4 <HAL_RCC_OscConfig+0x30c>
 80018aa:	4b5f      	ldr	r3, [pc, #380]	; (8001a28 <HAL_RCC_OscConfig+0x470>)
 80018ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018ae:	4a5e      	ldr	r2, [pc, #376]	; (8001a28 <HAL_RCC_OscConfig+0x470>)
 80018b0:	f043 0304 	orr.w	r3, r3, #4
 80018b4:	6713      	str	r3, [r2, #112]	; 0x70
 80018b6:	4b5c      	ldr	r3, [pc, #368]	; (8001a28 <HAL_RCC_OscConfig+0x470>)
 80018b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018ba:	4a5b      	ldr	r2, [pc, #364]	; (8001a28 <HAL_RCC_OscConfig+0x470>)
 80018bc:	f043 0301 	orr.w	r3, r3, #1
 80018c0:	6713      	str	r3, [r2, #112]	; 0x70
 80018c2:	e00b      	b.n	80018dc <HAL_RCC_OscConfig+0x324>
 80018c4:	4b58      	ldr	r3, [pc, #352]	; (8001a28 <HAL_RCC_OscConfig+0x470>)
 80018c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018c8:	4a57      	ldr	r2, [pc, #348]	; (8001a28 <HAL_RCC_OscConfig+0x470>)
 80018ca:	f023 0301 	bic.w	r3, r3, #1
 80018ce:	6713      	str	r3, [r2, #112]	; 0x70
 80018d0:	4b55      	ldr	r3, [pc, #340]	; (8001a28 <HAL_RCC_OscConfig+0x470>)
 80018d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018d4:	4a54      	ldr	r2, [pc, #336]	; (8001a28 <HAL_RCC_OscConfig+0x470>)
 80018d6:	f023 0304 	bic.w	r3, r3, #4
 80018da:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d015      	beq.n	8001910 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018e4:	f7ff fb1a 	bl	8000f1c <HAL_GetTick>
 80018e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018ea:	e00a      	b.n	8001902 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018ec:	f7ff fb16 	bl	8000f1c <HAL_GetTick>
 80018f0:	4602      	mov	r2, r0
 80018f2:	693b      	ldr	r3, [r7, #16]
 80018f4:	1ad3      	subs	r3, r2, r3
 80018f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d901      	bls.n	8001902 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80018fe:	2303      	movs	r3, #3
 8001900:	e0cb      	b.n	8001a9a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001902:	4b49      	ldr	r3, [pc, #292]	; (8001a28 <HAL_RCC_OscConfig+0x470>)
 8001904:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001906:	f003 0302 	and.w	r3, r3, #2
 800190a:	2b00      	cmp	r3, #0
 800190c:	d0ee      	beq.n	80018ec <HAL_RCC_OscConfig+0x334>
 800190e:	e014      	b.n	800193a <HAL_RCC_OscConfig+0x382>
>>>>>>> AWS
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
<<<<<<< HEAD
 80018f8:	f7ff fb04 	bl	8000f04 <HAL_GetTick>
 80018fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018fe:	e00a      	b.n	8001916 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001900:	f7ff fb00 	bl	8000f04 <HAL_GetTick>
 8001904:	4602      	mov	r2, r0
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	f241 3288 	movw	r2, #5000	; 0x1388
 800190e:	4293      	cmp	r3, r2
 8001910:	d901      	bls.n	8001916 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001912:	2303      	movs	r3, #3
 8001914:	e0b5      	b.n	8001a82 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001916:	4b3e      	ldr	r3, [pc, #248]	; (8001a10 <HAL_RCC_OscConfig+0x470>)
 8001918:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800191a:	f003 0302 	and.w	r3, r3, #2
 800191e:	2b00      	cmp	r3, #0
 8001920:	d1ee      	bne.n	8001900 <HAL_RCC_OscConfig+0x360>
=======
 8001910:	f7ff fb04 	bl	8000f1c <HAL_GetTick>
 8001914:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001916:	e00a      	b.n	800192e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001918:	f7ff fb00 	bl	8000f1c <HAL_GetTick>
 800191c:	4602      	mov	r2, r0
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	1ad3      	subs	r3, r2, r3
 8001922:	f241 3288 	movw	r2, #5000	; 0x1388
 8001926:	4293      	cmp	r3, r2
 8001928:	d901      	bls.n	800192e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800192a:	2303      	movs	r3, #3
 800192c:	e0b5      	b.n	8001a9a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800192e:	4b3e      	ldr	r3, [pc, #248]	; (8001a28 <HAL_RCC_OscConfig+0x470>)
 8001930:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001932:	f003 0302 	and.w	r3, r3, #2
 8001936:	2b00      	cmp	r3, #0
 8001938:	d1ee      	bne.n	8001918 <HAL_RCC_OscConfig+0x360>
>>>>>>> AWS
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
<<<<<<< HEAD
 8001922:	7dfb      	ldrb	r3, [r7, #23]
 8001924:	2b01      	cmp	r3, #1
 8001926:	d105      	bne.n	8001934 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001928:	4b39      	ldr	r3, [pc, #228]	; (8001a10 <HAL_RCC_OscConfig+0x470>)
 800192a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192c:	4a38      	ldr	r2, [pc, #224]	; (8001a10 <HAL_RCC_OscConfig+0x470>)
 800192e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001932:	6413      	str	r3, [r2, #64]	; 0x40
=======
 800193a:	7dfb      	ldrb	r3, [r7, #23]
 800193c:	2b01      	cmp	r3, #1
 800193e:	d105      	bne.n	800194c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001940:	4b39      	ldr	r3, [pc, #228]	; (8001a28 <HAL_RCC_OscConfig+0x470>)
 8001942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001944:	4a38      	ldr	r2, [pc, #224]	; (8001a28 <HAL_RCC_OscConfig+0x470>)
 8001946:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800194a:	6413      	str	r3, [r2, #64]	; 0x40
>>>>>>> AWS
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
<<<<<<< HEAD
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	699b      	ldr	r3, [r3, #24]
 8001938:	2b00      	cmp	r3, #0
 800193a:	f000 80a1 	beq.w	8001a80 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800193e:	4b34      	ldr	r3, [pc, #208]	; (8001a10 <HAL_RCC_OscConfig+0x470>)
 8001940:	689b      	ldr	r3, [r3, #8]
 8001942:	f003 030c 	and.w	r3, r3, #12
 8001946:	2b08      	cmp	r3, #8
 8001948:	d05c      	beq.n	8001a04 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	699b      	ldr	r3, [r3, #24]
 800194e:	2b02      	cmp	r3, #2
 8001950:	d141      	bne.n	80019d6 <HAL_RCC_OscConfig+0x436>
=======
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	699b      	ldr	r3, [r3, #24]
 8001950:	2b00      	cmp	r3, #0
 8001952:	f000 80a1 	beq.w	8001a98 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001956:	4b34      	ldr	r3, [pc, #208]	; (8001a28 <HAL_RCC_OscConfig+0x470>)
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	f003 030c 	and.w	r3, r3, #12
 800195e:	2b08      	cmp	r3, #8
 8001960:	d05c      	beq.n	8001a1c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	699b      	ldr	r3, [r3, #24]
 8001966:	2b02      	cmp	r3, #2
 8001968:	d141      	bne.n	80019ee <HAL_RCC_OscConfig+0x436>
>>>>>>> AWS
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
<<<<<<< HEAD
 8001952:	4b31      	ldr	r3, [pc, #196]	; (8001a18 <HAL_RCC_OscConfig+0x478>)
 8001954:	2200      	movs	r2, #0
 8001956:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001958:	f7ff fad4 	bl	8000f04 <HAL_GetTick>
 800195c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800195e:	e008      	b.n	8001972 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001960:	f7ff fad0 	bl	8000f04 <HAL_GetTick>
 8001964:	4602      	mov	r2, r0
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	1ad3      	subs	r3, r2, r3
 800196a:	2b02      	cmp	r3, #2
 800196c:	d901      	bls.n	8001972 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800196e:	2303      	movs	r3, #3
 8001970:	e087      	b.n	8001a82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001972:	4b27      	ldr	r3, [pc, #156]	; (8001a10 <HAL_RCC_OscConfig+0x470>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800197a:	2b00      	cmp	r3, #0
 800197c:	d1f0      	bne.n	8001960 <HAL_RCC_OscConfig+0x3c0>
=======
 800196a:	4b31      	ldr	r3, [pc, #196]	; (8001a30 <HAL_RCC_OscConfig+0x478>)
 800196c:	2200      	movs	r2, #0
 800196e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001970:	f7ff fad4 	bl	8000f1c <HAL_GetTick>
 8001974:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001976:	e008      	b.n	800198a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001978:	f7ff fad0 	bl	8000f1c <HAL_GetTick>
 800197c:	4602      	mov	r2, r0
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	1ad3      	subs	r3, r2, r3
 8001982:	2b02      	cmp	r3, #2
 8001984:	d901      	bls.n	800198a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001986:	2303      	movs	r3, #3
 8001988:	e087      	b.n	8001a9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800198a:	4b27      	ldr	r3, [pc, #156]	; (8001a28 <HAL_RCC_OscConfig+0x470>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001992:	2b00      	cmp	r3, #0
 8001994:	d1f0      	bne.n	8001978 <HAL_RCC_OscConfig+0x3c0>
>>>>>>> AWS
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
<<<<<<< HEAD
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	69da      	ldr	r2, [r3, #28]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6a1b      	ldr	r3, [r3, #32]
 8001986:	431a      	orrs	r2, r3
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800198c:	019b      	lsls	r3, r3, #6
 800198e:	431a      	orrs	r2, r3
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001994:	085b      	lsrs	r3, r3, #1
 8001996:	3b01      	subs	r3, #1
 8001998:	041b      	lsls	r3, r3, #16
 800199a:	431a      	orrs	r2, r3
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019a0:	061b      	lsls	r3, r3, #24
 80019a2:	491b      	ldr	r1, [pc, #108]	; (8001a10 <HAL_RCC_OscConfig+0x470>)
 80019a4:	4313      	orrs	r3, r2
 80019a6:	604b      	str	r3, [r1, #4]
=======
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	69da      	ldr	r2, [r3, #28]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6a1b      	ldr	r3, [r3, #32]
 800199e:	431a      	orrs	r2, r3
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019a4:	019b      	lsls	r3, r3, #6
 80019a6:	431a      	orrs	r2, r3
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019ac:	085b      	lsrs	r3, r3, #1
 80019ae:	3b01      	subs	r3, #1
 80019b0:	041b      	lsls	r3, r3, #16
 80019b2:	431a      	orrs	r2, r3
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019b8:	061b      	lsls	r3, r3, #24
 80019ba:	491b      	ldr	r1, [pc, #108]	; (8001a28 <HAL_RCC_OscConfig+0x470>)
 80019bc:	4313      	orrs	r3, r2
 80019be:	604b      	str	r3, [r1, #4]
>>>>>>> AWS
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
<<<<<<< HEAD
 80019a8:	4b1b      	ldr	r3, [pc, #108]	; (8001a18 <HAL_RCC_OscConfig+0x478>)
 80019aa:	2201      	movs	r2, #1
 80019ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019ae:	f7ff faa9 	bl	8000f04 <HAL_GetTick>
 80019b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019b4:	e008      	b.n	80019c8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019b6:	f7ff faa5 	bl	8000f04 <HAL_GetTick>
 80019ba:	4602      	mov	r2, r0
 80019bc:	693b      	ldr	r3, [r7, #16]
 80019be:	1ad3      	subs	r3, r2, r3
 80019c0:	2b02      	cmp	r3, #2
 80019c2:	d901      	bls.n	80019c8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80019c4:	2303      	movs	r3, #3
 80019c6:	e05c      	b.n	8001a82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019c8:	4b11      	ldr	r3, [pc, #68]	; (8001a10 <HAL_RCC_OscConfig+0x470>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d0f0      	beq.n	80019b6 <HAL_RCC_OscConfig+0x416>
 80019d4:	e054      	b.n	8001a80 <HAL_RCC_OscConfig+0x4e0>
=======
 80019c0:	4b1b      	ldr	r3, [pc, #108]	; (8001a30 <HAL_RCC_OscConfig+0x478>)
 80019c2:	2201      	movs	r2, #1
 80019c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019c6:	f7ff faa9 	bl	8000f1c <HAL_GetTick>
 80019ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019cc:	e008      	b.n	80019e0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019ce:	f7ff faa5 	bl	8000f1c <HAL_GetTick>
 80019d2:	4602      	mov	r2, r0
 80019d4:	693b      	ldr	r3, [r7, #16]
 80019d6:	1ad3      	subs	r3, r2, r3
 80019d8:	2b02      	cmp	r3, #2
 80019da:	d901      	bls.n	80019e0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80019dc:	2303      	movs	r3, #3
 80019de:	e05c      	b.n	8001a9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019e0:	4b11      	ldr	r3, [pc, #68]	; (8001a28 <HAL_RCC_OscConfig+0x470>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d0f0      	beq.n	80019ce <HAL_RCC_OscConfig+0x416>
 80019ec:	e054      	b.n	8001a98 <HAL_RCC_OscConfig+0x4e0>
>>>>>>> AWS
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
<<<<<<< HEAD
 80019d6:	4b10      	ldr	r3, [pc, #64]	; (8001a18 <HAL_RCC_OscConfig+0x478>)
 80019d8:	2200      	movs	r2, #0
 80019da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019dc:	f7ff fa92 	bl	8000f04 <HAL_GetTick>
 80019e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019e2:	e008      	b.n	80019f6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019e4:	f7ff fa8e 	bl	8000f04 <HAL_GetTick>
 80019e8:	4602      	mov	r2, r0
 80019ea:	693b      	ldr	r3, [r7, #16]
 80019ec:	1ad3      	subs	r3, r2, r3
 80019ee:	2b02      	cmp	r3, #2
 80019f0:	d901      	bls.n	80019f6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80019f2:	2303      	movs	r3, #3
 80019f4:	e045      	b.n	8001a82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019f6:	4b06      	ldr	r3, [pc, #24]	; (8001a10 <HAL_RCC_OscConfig+0x470>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d1f0      	bne.n	80019e4 <HAL_RCC_OscConfig+0x444>
 8001a02:	e03d      	b.n	8001a80 <HAL_RCC_OscConfig+0x4e0>
=======
 80019ee:	4b10      	ldr	r3, [pc, #64]	; (8001a30 <HAL_RCC_OscConfig+0x478>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019f4:	f7ff fa92 	bl	8000f1c <HAL_GetTick>
 80019f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019fa:	e008      	b.n	8001a0e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019fc:	f7ff fa8e 	bl	8000f1c <HAL_GetTick>
 8001a00:	4602      	mov	r2, r0
 8001a02:	693b      	ldr	r3, [r7, #16]
 8001a04:	1ad3      	subs	r3, r2, r3
 8001a06:	2b02      	cmp	r3, #2
 8001a08:	d901      	bls.n	8001a0e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001a0a:	2303      	movs	r3, #3
 8001a0c:	e045      	b.n	8001a9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a0e:	4b06      	ldr	r3, [pc, #24]	; (8001a28 <HAL_RCC_OscConfig+0x470>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d1f0      	bne.n	80019fc <HAL_RCC_OscConfig+0x444>
 8001a1a:	e03d      	b.n	8001a98 <HAL_RCC_OscConfig+0x4e0>
>>>>>>> AWS
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
<<<<<<< HEAD
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	699b      	ldr	r3, [r3, #24]
 8001a08:	2b01      	cmp	r3, #1
 8001a0a:	d107      	bne.n	8001a1c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	e038      	b.n	8001a82 <HAL_RCC_OscConfig+0x4e2>
 8001a10:	40023800 	.word	0x40023800
 8001a14:	40007000 	.word	0x40007000
 8001a18:	42470060 	.word	0x42470060
=======
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	699b      	ldr	r3, [r3, #24]
 8001a20:	2b01      	cmp	r3, #1
 8001a22:	d107      	bne.n	8001a34 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001a24:	2301      	movs	r3, #1
 8001a26:	e038      	b.n	8001a9a <HAL_RCC_OscConfig+0x4e2>
 8001a28:	40023800 	.word	0x40023800
 8001a2c:	40007000 	.word	0x40007000
 8001a30:	42470060 	.word	0x42470060
>>>>>>> AWS
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
<<<<<<< HEAD
 8001a1c:	4b1b      	ldr	r3, [pc, #108]	; (8001a8c <HAL_RCC_OscConfig+0x4ec>)
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	60fb      	str	r3, [r7, #12]
=======
 8001a34:	4b1b      	ldr	r3, [pc, #108]	; (8001aa4 <HAL_RCC_OscConfig+0x4ec>)
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	60fb      	str	r3, [r7, #12]
>>>>>>> AWS
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
<<<<<<< HEAD
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	699b      	ldr	r3, [r3, #24]
 8001a26:	2b01      	cmp	r3, #1
 8001a28:	d028      	beq.n	8001a7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a34:	429a      	cmp	r2, r3
 8001a36:	d121      	bne.n	8001a7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a42:	429a      	cmp	r2, r3
 8001a44:	d11a      	bne.n	8001a7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a46:	68fa      	ldr	r2, [r7, #12]
 8001a48:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	687a      	ldr	r2, [r7, #4]
 8001a50:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001a52:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d111      	bne.n	8001a7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a62:	085b      	lsrs	r3, r3, #1
 8001a64:	3b01      	subs	r3, #1
 8001a66:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	d107      	bne.n	8001a7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a76:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	d001      	beq.n	8001a80 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	e000      	b.n	8001a82 <HAL_RCC_OscConfig+0x4e2>
=======
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	699b      	ldr	r3, [r3, #24]
 8001a3e:	2b01      	cmp	r3, #1
 8001a40:	d028      	beq.n	8001a94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	d121      	bne.n	8001a94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a5a:	429a      	cmp	r2, r3
 8001a5c:	d11a      	bne.n	8001a94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a5e:	68fa      	ldr	r2, [r7, #12]
 8001a60:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001a64:	4013      	ands	r3, r2
 8001a66:	687a      	ldr	r2, [r7, #4]
 8001a68:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001a6a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d111      	bne.n	8001a94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a7a:	085b      	lsrs	r3, r3, #1
 8001a7c:	3b01      	subs	r3, #1
 8001a7e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a80:	429a      	cmp	r2, r3
 8001a82:	d107      	bne.n	8001a94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a8e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a90:	429a      	cmp	r2, r3
 8001a92:	d001      	beq.n	8001a98 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001a94:	2301      	movs	r3, #1
 8001a96:	e000      	b.n	8001a9a <HAL_RCC_OscConfig+0x4e2>
>>>>>>> AWS
        }
      }
    }
  }
  return HAL_OK;
<<<<<<< HEAD
 8001a80:	2300      	movs	r3, #0
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	3718      	adds	r7, #24
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	40023800 	.word	0x40023800

08001a90 <HAL_RCC_ClockConfig>:
=======
 8001a98:	2300      	movs	r3, #0
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	3718      	adds	r7, #24
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	40023800 	.word	0x40023800

08001aa8 <HAL_RCC_ClockConfig>:
>>>>>>> AWS
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
<<<<<<< HEAD
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b084      	sub	sp, #16
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
 8001a98:	6039      	str	r1, [r7, #0]
=======
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b084      	sub	sp, #16
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
 8001ab0:	6039      	str	r1, [r7, #0]
>>>>>>> AWS
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
<<<<<<< HEAD
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d101      	bne.n	8001aa4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	e0cc      	b.n	8001c3e <HAL_RCC_ClockConfig+0x1ae>
=======
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d101      	bne.n	8001abc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	e0cc      	b.n	8001c56 <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> AWS
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
<<<<<<< HEAD
 8001aa4:	4b68      	ldr	r3, [pc, #416]	; (8001c48 <HAL_RCC_ClockConfig+0x1b8>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f003 0307 	and.w	r3, r3, #7
 8001aac:	683a      	ldr	r2, [r7, #0]
 8001aae:	429a      	cmp	r2, r3
 8001ab0:	d90c      	bls.n	8001acc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ab2:	4b65      	ldr	r3, [pc, #404]	; (8001c48 <HAL_RCC_ClockConfig+0x1b8>)
 8001ab4:	683a      	ldr	r2, [r7, #0]
 8001ab6:	b2d2      	uxtb	r2, r2
 8001ab8:	701a      	strb	r2, [r3, #0]
=======
 8001abc:	4b68      	ldr	r3, [pc, #416]	; (8001c60 <HAL_RCC_ClockConfig+0x1b8>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f003 0307 	and.w	r3, r3, #7
 8001ac4:	683a      	ldr	r2, [r7, #0]
 8001ac6:	429a      	cmp	r2, r3
 8001ac8:	d90c      	bls.n	8001ae4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aca:	4b65      	ldr	r3, [pc, #404]	; (8001c60 <HAL_RCC_ClockConfig+0x1b8>)
 8001acc:	683a      	ldr	r2, [r7, #0]
 8001ace:	b2d2      	uxtb	r2, r2
 8001ad0:	701a      	strb	r2, [r3, #0]
>>>>>>> AWS

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
<<<<<<< HEAD
 8001aba:	4b63      	ldr	r3, [pc, #396]	; (8001c48 <HAL_RCC_ClockConfig+0x1b8>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f003 0307 	and.w	r3, r3, #7
 8001ac2:	683a      	ldr	r2, [r7, #0]
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	d001      	beq.n	8001acc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	e0b8      	b.n	8001c3e <HAL_RCC_ClockConfig+0x1ae>
=======
 8001ad2:	4b63      	ldr	r3, [pc, #396]	; (8001c60 <HAL_RCC_ClockConfig+0x1b8>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f003 0307 	and.w	r3, r3, #7
 8001ada:	683a      	ldr	r2, [r7, #0]
 8001adc:	429a      	cmp	r2, r3
 8001ade:	d001      	beq.n	8001ae4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	e0b8      	b.n	8001c56 <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> AWS
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
<<<<<<< HEAD
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f003 0302 	and.w	r3, r3, #2
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d020      	beq.n	8001b1a <HAL_RCC_ClockConfig+0x8a>
=======
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f003 0302 	and.w	r3, r3, #2
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d020      	beq.n	8001b32 <HAL_RCC_ClockConfig+0x8a>
>>>>>>> AWS
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
<<<<<<< HEAD
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f003 0304 	and.w	r3, r3, #4
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d005      	beq.n	8001af0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ae4:	4b59      	ldr	r3, [pc, #356]	; (8001c4c <HAL_RCC_ClockConfig+0x1bc>)
 8001ae6:	689b      	ldr	r3, [r3, #8]
 8001ae8:	4a58      	ldr	r2, [pc, #352]	; (8001c4c <HAL_RCC_ClockConfig+0x1bc>)
 8001aea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001aee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f003 0308 	and.w	r3, r3, #8
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d005      	beq.n	8001b08 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001afc:	4b53      	ldr	r3, [pc, #332]	; (8001c4c <HAL_RCC_ClockConfig+0x1bc>)
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	4a52      	ldr	r2, [pc, #328]	; (8001c4c <HAL_RCC_ClockConfig+0x1bc>)
 8001b02:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001b06:	6093      	str	r3, [r2, #8]
=======
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f003 0304 	and.w	r3, r3, #4
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d005      	beq.n	8001b08 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001afc:	4b59      	ldr	r3, [pc, #356]	; (8001c64 <HAL_RCC_ClockConfig+0x1bc>)
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	4a58      	ldr	r2, [pc, #352]	; (8001c64 <HAL_RCC_ClockConfig+0x1bc>)
 8001b02:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001b06:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f003 0308 	and.w	r3, r3, #8
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d005      	beq.n	8001b20 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b14:	4b53      	ldr	r3, [pc, #332]	; (8001c64 <HAL_RCC_ClockConfig+0x1bc>)
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	4a52      	ldr	r2, [pc, #328]	; (8001c64 <HAL_RCC_ClockConfig+0x1bc>)
 8001b1a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001b1e:	6093      	str	r3, [r2, #8]
>>>>>>> AWS
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
<<<<<<< HEAD
 8001b08:	4b50      	ldr	r3, [pc, #320]	; (8001c4c <HAL_RCC_ClockConfig+0x1bc>)
 8001b0a:	689b      	ldr	r3, [r3, #8]
 8001b0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	689b      	ldr	r3, [r3, #8]
 8001b14:	494d      	ldr	r1, [pc, #308]	; (8001c4c <HAL_RCC_ClockConfig+0x1bc>)
 8001b16:	4313      	orrs	r3, r2
 8001b18:	608b      	str	r3, [r1, #8]
=======
 8001b20:	4b50      	ldr	r3, [pc, #320]	; (8001c64 <HAL_RCC_ClockConfig+0x1bc>)
 8001b22:	689b      	ldr	r3, [r3, #8]
 8001b24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	689b      	ldr	r3, [r3, #8]
 8001b2c:	494d      	ldr	r1, [pc, #308]	; (8001c64 <HAL_RCC_ClockConfig+0x1bc>)
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	608b      	str	r3, [r1, #8]
>>>>>>> AWS
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
<<<<<<< HEAD
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f003 0301 	and.w	r3, r3, #1
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d044      	beq.n	8001bb0 <HAL_RCC_ClockConfig+0x120>
=======
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f003 0301 	and.w	r3, r3, #1
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d044      	beq.n	8001bc8 <HAL_RCC_ClockConfig+0x120>
>>>>>>> AWS
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
<<<<<<< HEAD
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	2b01      	cmp	r3, #1
 8001b2c:	d107      	bne.n	8001b3e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b2e:	4b47      	ldr	r3, [pc, #284]	; (8001c4c <HAL_RCC_ClockConfig+0x1bc>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d119      	bne.n	8001b6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	e07f      	b.n	8001c3e <HAL_RCC_ClockConfig+0x1ae>
=======
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	2b01      	cmp	r3, #1
 8001b44:	d107      	bne.n	8001b56 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b46:	4b47      	ldr	r3, [pc, #284]	; (8001c64 <HAL_RCC_ClockConfig+0x1bc>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d119      	bne.n	8001b86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
 8001b54:	e07f      	b.n	8001c56 <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> AWS
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
<<<<<<< HEAD
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	2b02      	cmp	r3, #2
 8001b44:	d003      	beq.n	8001b4e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b4a:	2b03      	cmp	r3, #3
 8001b4c:	d107      	bne.n	8001b5e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b4e:	4b3f      	ldr	r3, [pc, #252]	; (8001c4c <HAL_RCC_ClockConfig+0x1bc>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d109      	bne.n	8001b6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e06f      	b.n	8001c3e <HAL_RCC_ClockConfig+0x1ae>
=======
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	2b02      	cmp	r3, #2
 8001b5c:	d003      	beq.n	8001b66 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b62:	2b03      	cmp	r3, #3
 8001b64:	d107      	bne.n	8001b76 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b66:	4b3f      	ldr	r3, [pc, #252]	; (8001c64 <HAL_RCC_ClockConfig+0x1bc>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d109      	bne.n	8001b86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
 8001b74:	e06f      	b.n	8001c56 <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> AWS
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
<<<<<<< HEAD
 8001b5e:	4b3b      	ldr	r3, [pc, #236]	; (8001c4c <HAL_RCC_ClockConfig+0x1bc>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f003 0302 	and.w	r3, r3, #2
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d101      	bne.n	8001b6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e067      	b.n	8001c3e <HAL_RCC_ClockConfig+0x1ae>
=======
 8001b76:	4b3b      	ldr	r3, [pc, #236]	; (8001c64 <HAL_RCC_ClockConfig+0x1bc>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f003 0302 	and.w	r3, r3, #2
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d101      	bne.n	8001b86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
 8001b84:	e067      	b.n	8001c56 <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> AWS
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
<<<<<<< HEAD
 8001b6e:	4b37      	ldr	r3, [pc, #220]	; (8001c4c <HAL_RCC_ClockConfig+0x1bc>)
 8001b70:	689b      	ldr	r3, [r3, #8]
 8001b72:	f023 0203 	bic.w	r2, r3, #3
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	4934      	ldr	r1, [pc, #208]	; (8001c4c <HAL_RCC_ClockConfig+0x1bc>)
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b80:	f7ff f9c0 	bl	8000f04 <HAL_GetTick>
 8001b84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b86:	e00a      	b.n	8001b9e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b88:	f7ff f9bc 	bl	8000f04 <HAL_GetTick>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	1ad3      	subs	r3, r2, r3
 8001b92:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d901      	bls.n	8001b9e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b9a:	2303      	movs	r3, #3
 8001b9c:	e04f      	b.n	8001c3e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b9e:	4b2b      	ldr	r3, [pc, #172]	; (8001c4c <HAL_RCC_ClockConfig+0x1bc>)
 8001ba0:	689b      	ldr	r3, [r3, #8]
 8001ba2:	f003 020c 	and.w	r2, r3, #12
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	009b      	lsls	r3, r3, #2
 8001bac:	429a      	cmp	r2, r3
 8001bae:	d1eb      	bne.n	8001b88 <HAL_RCC_ClockConfig+0xf8>
=======
 8001b86:	4b37      	ldr	r3, [pc, #220]	; (8001c64 <HAL_RCC_ClockConfig+0x1bc>)
 8001b88:	689b      	ldr	r3, [r3, #8]
 8001b8a:	f023 0203 	bic.w	r2, r3, #3
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	4934      	ldr	r1, [pc, #208]	; (8001c64 <HAL_RCC_ClockConfig+0x1bc>)
 8001b94:	4313      	orrs	r3, r2
 8001b96:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b98:	f7ff f9c0 	bl	8000f1c <HAL_GetTick>
 8001b9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b9e:	e00a      	b.n	8001bb6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ba0:	f7ff f9bc 	bl	8000f1c <HAL_GetTick>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	1ad3      	subs	r3, r2, r3
 8001baa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d901      	bls.n	8001bb6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001bb2:	2303      	movs	r3, #3
 8001bb4:	e04f      	b.n	8001c56 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bb6:	4b2b      	ldr	r3, [pc, #172]	; (8001c64 <HAL_RCC_ClockConfig+0x1bc>)
 8001bb8:	689b      	ldr	r3, [r3, #8]
 8001bba:	f003 020c 	and.w	r2, r3, #12
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	009b      	lsls	r3, r3, #2
 8001bc4:	429a      	cmp	r2, r3
 8001bc6:	d1eb      	bne.n	8001ba0 <HAL_RCC_ClockConfig+0xf8>
>>>>>>> AWS
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
<<<<<<< HEAD
 8001bb0:	4b25      	ldr	r3, [pc, #148]	; (8001c48 <HAL_RCC_ClockConfig+0x1b8>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f003 0307 	and.w	r3, r3, #7
 8001bb8:	683a      	ldr	r2, [r7, #0]
 8001bba:	429a      	cmp	r2, r3
 8001bbc:	d20c      	bcs.n	8001bd8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bbe:	4b22      	ldr	r3, [pc, #136]	; (8001c48 <HAL_RCC_ClockConfig+0x1b8>)
 8001bc0:	683a      	ldr	r2, [r7, #0]
 8001bc2:	b2d2      	uxtb	r2, r2
 8001bc4:	701a      	strb	r2, [r3, #0]
=======
 8001bc8:	4b25      	ldr	r3, [pc, #148]	; (8001c60 <HAL_RCC_ClockConfig+0x1b8>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f003 0307 	and.w	r3, r3, #7
 8001bd0:	683a      	ldr	r2, [r7, #0]
 8001bd2:	429a      	cmp	r2, r3
 8001bd4:	d20c      	bcs.n	8001bf0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bd6:	4b22      	ldr	r3, [pc, #136]	; (8001c60 <HAL_RCC_ClockConfig+0x1b8>)
 8001bd8:	683a      	ldr	r2, [r7, #0]
 8001bda:	b2d2      	uxtb	r2, r2
 8001bdc:	701a      	strb	r2, [r3, #0]
>>>>>>> AWS

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
<<<<<<< HEAD
 8001bc6:	4b20      	ldr	r3, [pc, #128]	; (8001c48 <HAL_RCC_ClockConfig+0x1b8>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f003 0307 	and.w	r3, r3, #7
 8001bce:	683a      	ldr	r2, [r7, #0]
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	d001      	beq.n	8001bd8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	e032      	b.n	8001c3e <HAL_RCC_ClockConfig+0x1ae>
=======
 8001bde:	4b20      	ldr	r3, [pc, #128]	; (8001c60 <HAL_RCC_ClockConfig+0x1b8>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f003 0307 	and.w	r3, r3, #7
 8001be6:	683a      	ldr	r2, [r7, #0]
 8001be8:	429a      	cmp	r2, r3
 8001bea:	d001      	beq.n	8001bf0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001bec:	2301      	movs	r3, #1
 8001bee:	e032      	b.n	8001c56 <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> AWS
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
<<<<<<< HEAD
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f003 0304 	and.w	r3, r3, #4
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d008      	beq.n	8001bf6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001be4:	4b19      	ldr	r3, [pc, #100]	; (8001c4c <HAL_RCC_ClockConfig+0x1bc>)
 8001be6:	689b      	ldr	r3, [r3, #8]
 8001be8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	68db      	ldr	r3, [r3, #12]
 8001bf0:	4916      	ldr	r1, [pc, #88]	; (8001c4c <HAL_RCC_ClockConfig+0x1bc>)
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	608b      	str	r3, [r1, #8]
=======
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f003 0304 	and.w	r3, r3, #4
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d008      	beq.n	8001c0e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bfc:	4b19      	ldr	r3, [pc, #100]	; (8001c64 <HAL_RCC_ClockConfig+0x1bc>)
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	68db      	ldr	r3, [r3, #12]
 8001c08:	4916      	ldr	r1, [pc, #88]	; (8001c64 <HAL_RCC_ClockConfig+0x1bc>)
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	608b      	str	r3, [r1, #8]
>>>>>>> AWS
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
<<<<<<< HEAD
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f003 0308 	and.w	r3, r3, #8
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d009      	beq.n	8001c16 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c02:	4b12      	ldr	r3, [pc, #72]	; (8001c4c <HAL_RCC_ClockConfig+0x1bc>)
 8001c04:	689b      	ldr	r3, [r3, #8]
 8001c06:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	691b      	ldr	r3, [r3, #16]
 8001c0e:	00db      	lsls	r3, r3, #3
 8001c10:	490e      	ldr	r1, [pc, #56]	; (8001c4c <HAL_RCC_ClockConfig+0x1bc>)
 8001c12:	4313      	orrs	r3, r2
 8001c14:	608b      	str	r3, [r1, #8]
=======
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f003 0308 	and.w	r3, r3, #8
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d009      	beq.n	8001c2e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c1a:	4b12      	ldr	r3, [pc, #72]	; (8001c64 <HAL_RCC_ClockConfig+0x1bc>)
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	691b      	ldr	r3, [r3, #16]
 8001c26:	00db      	lsls	r3, r3, #3
 8001c28:	490e      	ldr	r1, [pc, #56]	; (8001c64 <HAL_RCC_ClockConfig+0x1bc>)
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	608b      	str	r3, [r1, #8]
>>>>>>> AWS
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
<<<<<<< HEAD
 8001c16:	f000 f821 	bl	8001c5c <HAL_RCC_GetSysClockFreq>
 8001c1a:	4602      	mov	r2, r0
 8001c1c:	4b0b      	ldr	r3, [pc, #44]	; (8001c4c <HAL_RCC_ClockConfig+0x1bc>)
 8001c1e:	689b      	ldr	r3, [r3, #8]
 8001c20:	091b      	lsrs	r3, r3, #4
 8001c22:	f003 030f 	and.w	r3, r3, #15
 8001c26:	490a      	ldr	r1, [pc, #40]	; (8001c50 <HAL_RCC_ClockConfig+0x1c0>)
 8001c28:	5ccb      	ldrb	r3, [r1, r3]
 8001c2a:	fa22 f303 	lsr.w	r3, r2, r3
 8001c2e:	4a09      	ldr	r2, [pc, #36]	; (8001c54 <HAL_RCC_ClockConfig+0x1c4>)
 8001c30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001c32:	4b09      	ldr	r3, [pc, #36]	; (8001c58 <HAL_RCC_ClockConfig+0x1c8>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4618      	mov	r0, r3
 8001c38:	f7ff f920 	bl	8000e7c <HAL_InitTick>

  return HAL_OK;
 8001c3c:	2300      	movs	r3, #0
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3710      	adds	r7, #16
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	40023c00 	.word	0x40023c00
 8001c4c:	40023800 	.word	0x40023800
 8001c50:	08003f38 	.word	0x08003f38
 8001c54:	20000004 	.word	0x20000004
 8001c58:	20000008 	.word	0x20000008

08001c5c <HAL_RCC_GetSysClockFreq>:
=======
 8001c2e:	f000 f821 	bl	8001c74 <HAL_RCC_GetSysClockFreq>
 8001c32:	4602      	mov	r2, r0
 8001c34:	4b0b      	ldr	r3, [pc, #44]	; (8001c64 <HAL_RCC_ClockConfig+0x1bc>)
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	091b      	lsrs	r3, r3, #4
 8001c3a:	f003 030f 	and.w	r3, r3, #15
 8001c3e:	490a      	ldr	r1, [pc, #40]	; (8001c68 <HAL_RCC_ClockConfig+0x1c0>)
 8001c40:	5ccb      	ldrb	r3, [r1, r3]
 8001c42:	fa22 f303 	lsr.w	r3, r2, r3
 8001c46:	4a09      	ldr	r2, [pc, #36]	; (8001c6c <HAL_RCC_ClockConfig+0x1c4>)
 8001c48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001c4a:	4b09      	ldr	r3, [pc, #36]	; (8001c70 <HAL_RCC_ClockConfig+0x1c8>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f7ff f920 	bl	8000e94 <HAL_InitTick>

  return HAL_OK;
 8001c54:	2300      	movs	r3, #0
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	3710      	adds	r7, #16
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	40023c00 	.word	0x40023c00
 8001c64:	40023800 	.word	0x40023800
 8001c68:	08003f50 	.word	0x08003f50
 8001c6c:	20000004 	.word	0x20000004
 8001c70:	20000008 	.word	0x20000008

08001c74 <HAL_RCC_GetSysClockFreq>:
>>>>>>> AWS
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
<<<<<<< HEAD
 8001c5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c60:	b090      	sub	sp, #64	; 0x40
 8001c62:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001c64:	2300      	movs	r3, #0
 8001c66:	637b      	str	r3, [r7, #52]	; 0x34
 8001c68:	2300      	movs	r3, #0
 8001c6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001c70:	2300      	movs	r3, #0
 8001c72:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c74:	4b59      	ldr	r3, [pc, #356]	; (8001ddc <HAL_RCC_GetSysClockFreq+0x180>)
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	f003 030c 	and.w	r3, r3, #12
 8001c7c:	2b08      	cmp	r3, #8
 8001c7e:	d00d      	beq.n	8001c9c <HAL_RCC_GetSysClockFreq+0x40>
 8001c80:	2b08      	cmp	r3, #8
 8001c82:	f200 80a1 	bhi.w	8001dc8 <HAL_RCC_GetSysClockFreq+0x16c>
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d002      	beq.n	8001c90 <HAL_RCC_GetSysClockFreq+0x34>
 8001c8a:	2b04      	cmp	r3, #4
 8001c8c:	d003      	beq.n	8001c96 <HAL_RCC_GetSysClockFreq+0x3a>
 8001c8e:	e09b      	b.n	8001dc8 <HAL_RCC_GetSysClockFreq+0x16c>
=======
 8001c74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c78:	b090      	sub	sp, #64	; 0x40
 8001c7a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	637b      	str	r3, [r7, #52]	; 0x34
 8001c80:	2300      	movs	r3, #0
 8001c82:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c84:	2300      	movs	r3, #0
 8001c86:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c8c:	4b59      	ldr	r3, [pc, #356]	; (8001df4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	f003 030c 	and.w	r3, r3, #12
 8001c94:	2b08      	cmp	r3, #8
 8001c96:	d00d      	beq.n	8001cb4 <HAL_RCC_GetSysClockFreq+0x40>
 8001c98:	2b08      	cmp	r3, #8
 8001c9a:	f200 80a1 	bhi.w	8001de0 <HAL_RCC_GetSysClockFreq+0x16c>
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d002      	beq.n	8001ca8 <HAL_RCC_GetSysClockFreq+0x34>
 8001ca2:	2b04      	cmp	r3, #4
 8001ca4:	d003      	beq.n	8001cae <HAL_RCC_GetSysClockFreq+0x3a>
 8001ca6:	e09b      	b.n	8001de0 <HAL_RCC_GetSysClockFreq+0x16c>
>>>>>>> AWS
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
<<<<<<< HEAD
 8001c90:	4b53      	ldr	r3, [pc, #332]	; (8001de0 <HAL_RCC_GetSysClockFreq+0x184>)
 8001c92:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001c94:	e09b      	b.n	8001dce <HAL_RCC_GetSysClockFreq+0x172>
=======
 8001ca8:	4b53      	ldr	r3, [pc, #332]	; (8001df8 <HAL_RCC_GetSysClockFreq+0x184>)
 8001caa:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001cac:	e09b      	b.n	8001de6 <HAL_RCC_GetSysClockFreq+0x172>
>>>>>>> AWS
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
<<<<<<< HEAD
 8001c96:	4b53      	ldr	r3, [pc, #332]	; (8001de4 <HAL_RCC_GetSysClockFreq+0x188>)
 8001c98:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001c9a:	e098      	b.n	8001dce <HAL_RCC_GetSysClockFreq+0x172>
=======
 8001cae:	4b53      	ldr	r3, [pc, #332]	; (8001dfc <HAL_RCC_GetSysClockFreq+0x188>)
 8001cb0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001cb2:	e098      	b.n	8001de6 <HAL_RCC_GetSysClockFreq+0x172>
>>>>>>> AWS
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
<<<<<<< HEAD
 8001c9c:	4b4f      	ldr	r3, [pc, #316]	; (8001ddc <HAL_RCC_GetSysClockFreq+0x180>)
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ca4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ca6:	4b4d      	ldr	r3, [pc, #308]	; (8001ddc <HAL_RCC_GetSysClockFreq+0x180>)
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d028      	beq.n	8001d04 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cb2:	4b4a      	ldr	r3, [pc, #296]	; (8001ddc <HAL_RCC_GetSysClockFreq+0x180>)
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	099b      	lsrs	r3, r3, #6
 8001cb8:	2200      	movs	r2, #0
 8001cba:	623b      	str	r3, [r7, #32]
 8001cbc:	627a      	str	r2, [r7, #36]	; 0x24
 8001cbe:	6a3b      	ldr	r3, [r7, #32]
 8001cc0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001cc4:	2100      	movs	r1, #0
 8001cc6:	4b47      	ldr	r3, [pc, #284]	; (8001de4 <HAL_RCC_GetSysClockFreq+0x188>)
 8001cc8:	fb03 f201 	mul.w	r2, r3, r1
 8001ccc:	2300      	movs	r3, #0
 8001cce:	fb00 f303 	mul.w	r3, r0, r3
 8001cd2:	4413      	add	r3, r2
 8001cd4:	4a43      	ldr	r2, [pc, #268]	; (8001de4 <HAL_RCC_GetSysClockFreq+0x188>)
 8001cd6:	fba0 1202 	umull	r1, r2, r0, r2
 8001cda:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001cdc:	460a      	mov	r2, r1
 8001cde:	62ba      	str	r2, [r7, #40]	; 0x28
 8001ce0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ce2:	4413      	add	r3, r2
 8001ce4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ce6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ce8:	2200      	movs	r2, #0
 8001cea:	61bb      	str	r3, [r7, #24]
 8001cec:	61fa      	str	r2, [r7, #28]
 8001cee:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001cf2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001cf6:	f7fe fa6d 	bl	80001d4 <__aeabi_uldivmod>
 8001cfa:	4602      	mov	r2, r0
 8001cfc:	460b      	mov	r3, r1
 8001cfe:	4613      	mov	r3, r2
 8001d00:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001d02:	e053      	b.n	8001dac <HAL_RCC_GetSysClockFreq+0x150>
=======
 8001cb4:	4b4f      	ldr	r3, [pc, #316]	; (8001df4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001cbc:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001cbe:	4b4d      	ldr	r3, [pc, #308]	; (8001df4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d028      	beq.n	8001d1c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cca:	4b4a      	ldr	r3, [pc, #296]	; (8001df4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	099b      	lsrs	r3, r3, #6
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	623b      	str	r3, [r7, #32]
 8001cd4:	627a      	str	r2, [r7, #36]	; 0x24
 8001cd6:	6a3b      	ldr	r3, [r7, #32]
 8001cd8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001cdc:	2100      	movs	r1, #0
 8001cde:	4b47      	ldr	r3, [pc, #284]	; (8001dfc <HAL_RCC_GetSysClockFreq+0x188>)
 8001ce0:	fb03 f201 	mul.w	r2, r3, r1
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	fb00 f303 	mul.w	r3, r0, r3
 8001cea:	4413      	add	r3, r2
 8001cec:	4a43      	ldr	r2, [pc, #268]	; (8001dfc <HAL_RCC_GetSysClockFreq+0x188>)
 8001cee:	fba0 1202 	umull	r1, r2, r0, r2
 8001cf2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001cf4:	460a      	mov	r2, r1
 8001cf6:	62ba      	str	r2, [r7, #40]	; 0x28
 8001cf8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001cfa:	4413      	add	r3, r2
 8001cfc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001cfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d00:	2200      	movs	r2, #0
 8001d02:	61bb      	str	r3, [r7, #24]
 8001d04:	61fa      	str	r2, [r7, #28]
 8001d06:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d0a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001d0e:	f7fe fa61 	bl	80001d4 <__aeabi_uldivmod>
 8001d12:	4602      	mov	r2, r0
 8001d14:	460b      	mov	r3, r1
 8001d16:	4613      	mov	r3, r2
 8001d18:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001d1a:	e053      	b.n	8001dc4 <HAL_RCC_GetSysClockFreq+0x150>
>>>>>>> AWS
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
<<<<<<< HEAD
 8001d04:	4b35      	ldr	r3, [pc, #212]	; (8001ddc <HAL_RCC_GetSysClockFreq+0x180>)
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	099b      	lsrs	r3, r3, #6
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	613b      	str	r3, [r7, #16]
 8001d0e:	617a      	str	r2, [r7, #20]
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001d16:	f04f 0b00 	mov.w	fp, #0
 8001d1a:	4652      	mov	r2, sl
 8001d1c:	465b      	mov	r3, fp
 8001d1e:	f04f 0000 	mov.w	r0, #0
 8001d22:	f04f 0100 	mov.w	r1, #0
 8001d26:	0159      	lsls	r1, r3, #5
 8001d28:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d2c:	0150      	lsls	r0, r2, #5
 8001d2e:	4602      	mov	r2, r0
 8001d30:	460b      	mov	r3, r1
 8001d32:	ebb2 080a 	subs.w	r8, r2, sl
 8001d36:	eb63 090b 	sbc.w	r9, r3, fp
 8001d3a:	f04f 0200 	mov.w	r2, #0
 8001d3e:	f04f 0300 	mov.w	r3, #0
 8001d42:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001d46:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001d4a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001d4e:	ebb2 0408 	subs.w	r4, r2, r8
 8001d52:	eb63 0509 	sbc.w	r5, r3, r9
 8001d56:	f04f 0200 	mov.w	r2, #0
 8001d5a:	f04f 0300 	mov.w	r3, #0
 8001d5e:	00eb      	lsls	r3, r5, #3
 8001d60:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001d64:	00e2      	lsls	r2, r4, #3
 8001d66:	4614      	mov	r4, r2
 8001d68:	461d      	mov	r5, r3
 8001d6a:	eb14 030a 	adds.w	r3, r4, sl
 8001d6e:	603b      	str	r3, [r7, #0]
 8001d70:	eb45 030b 	adc.w	r3, r5, fp
 8001d74:	607b      	str	r3, [r7, #4]
 8001d76:	f04f 0200 	mov.w	r2, #0
 8001d7a:	f04f 0300 	mov.w	r3, #0
 8001d7e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001d82:	4629      	mov	r1, r5
 8001d84:	028b      	lsls	r3, r1, #10
 8001d86:	4621      	mov	r1, r4
 8001d88:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001d8c:	4621      	mov	r1, r4
 8001d8e:	028a      	lsls	r2, r1, #10
 8001d90:	4610      	mov	r0, r2
 8001d92:	4619      	mov	r1, r3
 8001d94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d96:	2200      	movs	r2, #0
 8001d98:	60bb      	str	r3, [r7, #8]
 8001d9a:	60fa      	str	r2, [r7, #12]
 8001d9c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001da0:	f7fe fa18 	bl	80001d4 <__aeabi_uldivmod>
 8001da4:	4602      	mov	r2, r0
 8001da6:	460b      	mov	r3, r1
 8001da8:	4613      	mov	r3, r2
 8001daa:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001dac:	4b0b      	ldr	r3, [pc, #44]	; (8001ddc <HAL_RCC_GetSysClockFreq+0x180>)
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	0c1b      	lsrs	r3, r3, #16
 8001db2:	f003 0303 	and.w	r3, r3, #3
 8001db6:	3301      	adds	r3, #1
 8001db8:	005b      	lsls	r3, r3, #1
 8001dba:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001dbc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dc4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001dc6:	e002      	b.n	8001dce <HAL_RCC_GetSysClockFreq+0x172>
=======
 8001d1c:	4b35      	ldr	r3, [pc, #212]	; (8001df4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	099b      	lsrs	r3, r3, #6
 8001d22:	2200      	movs	r2, #0
 8001d24:	613b      	str	r3, [r7, #16]
 8001d26:	617a      	str	r2, [r7, #20]
 8001d28:	693b      	ldr	r3, [r7, #16]
 8001d2a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001d2e:	f04f 0b00 	mov.w	fp, #0
 8001d32:	4652      	mov	r2, sl
 8001d34:	465b      	mov	r3, fp
 8001d36:	f04f 0000 	mov.w	r0, #0
 8001d3a:	f04f 0100 	mov.w	r1, #0
 8001d3e:	0159      	lsls	r1, r3, #5
 8001d40:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d44:	0150      	lsls	r0, r2, #5
 8001d46:	4602      	mov	r2, r0
 8001d48:	460b      	mov	r3, r1
 8001d4a:	ebb2 080a 	subs.w	r8, r2, sl
 8001d4e:	eb63 090b 	sbc.w	r9, r3, fp
 8001d52:	f04f 0200 	mov.w	r2, #0
 8001d56:	f04f 0300 	mov.w	r3, #0
 8001d5a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001d5e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001d62:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001d66:	ebb2 0408 	subs.w	r4, r2, r8
 8001d6a:	eb63 0509 	sbc.w	r5, r3, r9
 8001d6e:	f04f 0200 	mov.w	r2, #0
 8001d72:	f04f 0300 	mov.w	r3, #0
 8001d76:	00eb      	lsls	r3, r5, #3
 8001d78:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001d7c:	00e2      	lsls	r2, r4, #3
 8001d7e:	4614      	mov	r4, r2
 8001d80:	461d      	mov	r5, r3
 8001d82:	eb14 030a 	adds.w	r3, r4, sl
 8001d86:	603b      	str	r3, [r7, #0]
 8001d88:	eb45 030b 	adc.w	r3, r5, fp
 8001d8c:	607b      	str	r3, [r7, #4]
 8001d8e:	f04f 0200 	mov.w	r2, #0
 8001d92:	f04f 0300 	mov.w	r3, #0
 8001d96:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001d9a:	4629      	mov	r1, r5
 8001d9c:	028b      	lsls	r3, r1, #10
 8001d9e:	4621      	mov	r1, r4
 8001da0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001da4:	4621      	mov	r1, r4
 8001da6:	028a      	lsls	r2, r1, #10
 8001da8:	4610      	mov	r0, r2
 8001daa:	4619      	mov	r1, r3
 8001dac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dae:	2200      	movs	r2, #0
 8001db0:	60bb      	str	r3, [r7, #8]
 8001db2:	60fa      	str	r2, [r7, #12]
 8001db4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001db8:	f7fe fa0c 	bl	80001d4 <__aeabi_uldivmod>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	460b      	mov	r3, r1
 8001dc0:	4613      	mov	r3, r2
 8001dc2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001dc4:	4b0b      	ldr	r3, [pc, #44]	; (8001df4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	0c1b      	lsrs	r3, r3, #16
 8001dca:	f003 0303 	and.w	r3, r3, #3
 8001dce:	3301      	adds	r3, #1
 8001dd0:	005b      	lsls	r3, r3, #1
 8001dd2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001dd4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ddc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001dde:	e002      	b.n	8001de6 <HAL_RCC_GetSysClockFreq+0x172>
>>>>>>> AWS
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
<<<<<<< HEAD
 8001dc8:	4b05      	ldr	r3, [pc, #20]	; (8001de0 <HAL_RCC_GetSysClockFreq+0x184>)
 8001dca:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001dcc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001dce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	3740      	adds	r7, #64	; 0x40
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001dda:	bf00      	nop
 8001ddc:	40023800 	.word	0x40023800
 8001de0:	00f42400 	.word	0x00f42400
 8001de4:	017d7840 	.word	0x017d7840

08001de8 <HAL_RCC_GetHCLKFreq>:
=======
 8001de0:	4b05      	ldr	r3, [pc, #20]	; (8001df8 <HAL_RCC_GetSysClockFreq+0x184>)
 8001de2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001de4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001de6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	3740      	adds	r7, #64	; 0x40
 8001dec:	46bd      	mov	sp, r7
 8001dee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001df2:	bf00      	nop
 8001df4:	40023800 	.word	0x40023800
 8001df8:	00f42400 	.word	0x00f42400
 8001dfc:	017d7840 	.word	0x017d7840

08001e00 <HAL_RCC_GetHCLKFreq>:
>>>>>>> AWS
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
<<<<<<< HEAD
 8001de8:	b480      	push	{r7}
 8001dea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001dec:	4b03      	ldr	r3, [pc, #12]	; (8001dfc <HAL_RCC_GetHCLKFreq+0x14>)
 8001dee:	681b      	ldr	r3, [r3, #0]
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr
 8001dfa:	bf00      	nop
 8001dfc:	20000004 	.word	0x20000004

08001e00 <HAL_RCC_GetPCLK1Freq>:
=======
 8001e00:	b480      	push	{r7}
 8001e02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e04:	4b03      	ldr	r3, [pc, #12]	; (8001e14 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e06:	681b      	ldr	r3, [r3, #0]
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr
 8001e12:	bf00      	nop
 8001e14:	20000004 	.word	0x20000004

08001e18 <HAL_RCC_GetPCLK1Freq>:
>>>>>>> AWS
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
<<<<<<< HEAD
 8001e00:	b580      	push	{r7, lr}
 8001e02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001e04:	f7ff fff0 	bl	8001de8 <HAL_RCC_GetHCLKFreq>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	4b05      	ldr	r3, [pc, #20]	; (8001e20 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e0c:	689b      	ldr	r3, [r3, #8]
 8001e0e:	0a9b      	lsrs	r3, r3, #10
 8001e10:	f003 0307 	and.w	r3, r3, #7
 8001e14:	4903      	ldr	r1, [pc, #12]	; (8001e24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e16:	5ccb      	ldrb	r3, [r1, r3]
 8001e18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	40023800 	.word	0x40023800
 8001e24:	08003f48 	.word	0x08003f48

08001e28 <HAL_RCC_GetPCLK2Freq>:
=======
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001e1c:	f7ff fff0 	bl	8001e00 <HAL_RCC_GetHCLKFreq>
 8001e20:	4602      	mov	r2, r0
 8001e22:	4b05      	ldr	r3, [pc, #20]	; (8001e38 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e24:	689b      	ldr	r3, [r3, #8]
 8001e26:	0a9b      	lsrs	r3, r3, #10
 8001e28:	f003 0307 	and.w	r3, r3, #7
 8001e2c:	4903      	ldr	r1, [pc, #12]	; (8001e3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e2e:	5ccb      	ldrb	r3, [r1, r3]
 8001e30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	40023800 	.word	0x40023800
 8001e3c:	08003f60 	.word	0x08003f60

08001e40 <HAL_RCC_GetPCLK2Freq>:
>>>>>>> AWS
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
<<<<<<< HEAD
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001e2c:	f7ff ffdc 	bl	8001de8 <HAL_RCC_GetHCLKFreq>
 8001e30:	4602      	mov	r2, r0
 8001e32:	4b05      	ldr	r3, [pc, #20]	; (8001e48 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e34:	689b      	ldr	r3, [r3, #8]
 8001e36:	0b5b      	lsrs	r3, r3, #13
 8001e38:	f003 0307 	and.w	r3, r3, #7
 8001e3c:	4903      	ldr	r1, [pc, #12]	; (8001e4c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e3e:	5ccb      	ldrb	r3, [r1, r3]
 8001e40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	40023800 	.word	0x40023800
 8001e4c:	08003f48 	.word	0x08003f48

08001e50 <HAL_TIM_Base_Init>:
=======
 8001e40:	b580      	push	{r7, lr}
 8001e42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001e44:	f7ff ffdc 	bl	8001e00 <HAL_RCC_GetHCLKFreq>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	4b05      	ldr	r3, [pc, #20]	; (8001e60 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e4c:	689b      	ldr	r3, [r3, #8]
 8001e4e:	0b5b      	lsrs	r3, r3, #13
 8001e50:	f003 0307 	and.w	r3, r3, #7
 8001e54:	4903      	ldr	r1, [pc, #12]	; (8001e64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e56:	5ccb      	ldrb	r3, [r1, r3]
 8001e58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	40023800 	.word	0x40023800
 8001e64:	08003f60 	.word	0x08003f60

08001e68 <HAL_TIM_Base_Init>:
>>>>>>> AWS
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b082      	sub	sp, #8
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d101      	bne.n	8001e62 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e041      	b.n	8001ee6 <HAL_TIM_Base_Init+0x96>
=======
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b082      	sub	sp, #8
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d101      	bne.n	8001e7a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	e041      	b.n	8001efe <HAL_TIM_Base_Init+0x96>
>>>>>>> AWS
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
<<<<<<< HEAD
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e68:	b2db      	uxtb	r3, r3
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d106      	bne.n	8001e7c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2200      	movs	r2, #0
 8001e72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
=======
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e80:	b2db      	uxtb	r3, r3
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d106      	bne.n	8001e94 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2200      	movs	r2, #0
 8001e8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
>>>>>>> AWS
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
<<<<<<< HEAD
 8001e76:	6878      	ldr	r0, [r7, #4]
 8001e78:	f7fe fe80 	bl	8000b7c <HAL_TIM_Base_MspInit>
=======
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	f7fe fe80 	bl	8000b94 <HAL_TIM_Base_MspInit>
>>>>>>> AWS
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
<<<<<<< HEAD
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2202      	movs	r2, #2
 8001e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681a      	ldr	r2, [r3, #0]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	3304      	adds	r3, #4
 8001e8c:	4619      	mov	r1, r3
 8001e8e:	4610      	mov	r0, r2
 8001e90:	f000 fd26 	bl	80028e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2201      	movs	r2, #1
 8001e98:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2201      	movs	r2, #1
 8001eb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2201      	movs	r2, #1
 8001ed0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2201      	movs	r2, #1
 8001ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001ee4:	2300      	movs	r3, #0
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3708      	adds	r7, #8
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}

08001eee <HAL_TIM_IC_Init>:
=======
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2202      	movs	r2, #2
 8001e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	3304      	adds	r3, #4
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	4610      	mov	r0, r2
 8001ea8:	f000 fd26 	bl	80028f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2201      	movs	r2, #1
 8001eb0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2201      	movs	r2, #1
 8001ed0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2201      	movs	r2, #1
 8001ee0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2201      	movs	r2, #1
 8001ef0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001efc:	2300      	movs	r3, #0
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	3708      	adds	r7, #8
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}

08001f06 <HAL_TIM_IC_Init>:
>>>>>>> AWS
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8001eee:	b580      	push	{r7, lr}
 8001ef0:	b082      	sub	sp, #8
 8001ef2:	af00      	add	r7, sp, #0
 8001ef4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d101      	bne.n	8001f00 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8001efc:	2301      	movs	r3, #1
 8001efe:	e041      	b.n	8001f84 <HAL_TIM_IC_Init+0x96>
=======
 8001f06:	b580      	push	{r7, lr}
 8001f08:	b082      	sub	sp, #8
 8001f0a:	af00      	add	r7, sp, #0
 8001f0c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d101      	bne.n	8001f18 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8001f14:	2301      	movs	r3, #1
 8001f16:	e041      	b.n	8001f9c <HAL_TIM_IC_Init+0x96>
>>>>>>> AWS
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
<<<<<<< HEAD
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f06:	b2db      	uxtb	r3, r3
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d106      	bne.n	8001f1a <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2200      	movs	r2, #0
 8001f10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
=======
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f1e:	b2db      	uxtb	r3, r3
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d106      	bne.n	8001f32 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2200      	movs	r2, #0
 8001f28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
>>>>>>> AWS
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
<<<<<<< HEAD
 8001f14:	6878      	ldr	r0, [r7, #4]
 8001f16:	f000 f839 	bl	8001f8c <HAL_TIM_IC_MspInit>
=======
 8001f2c:	6878      	ldr	r0, [r7, #4]
 8001f2e:	f000 f839 	bl	8001fa4 <HAL_TIM_IC_MspInit>
>>>>>>> AWS
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
<<<<<<< HEAD
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2202      	movs	r2, #2
 8001f1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681a      	ldr	r2, [r3, #0]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	3304      	adds	r3, #4
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	4610      	mov	r0, r2
 8001f2e:	f000 fcd7 	bl	80028e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2201      	movs	r2, #1
 8001f36:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2201      	movs	r2, #1
 8001f46:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2201      	movs	r2, #1
 8001f4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2201      	movs	r2, #1
 8001f56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2201      	movs	r2, #1
 8001f66:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2201      	movs	r2, #1
 8001f76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001f82:	2300      	movs	r3, #0
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	3708      	adds	r7, #8
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}

08001f8c <HAL_TIM_IC_MspInit>:
=======
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2202      	movs	r2, #2
 8001f36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681a      	ldr	r2, [r3, #0]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	3304      	adds	r3, #4
 8001f42:	4619      	mov	r1, r3
 8001f44:	4610      	mov	r0, r2
 8001f46:	f000 fcd7 	bl	80028f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2201      	movs	r2, #1
 8001f4e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2201      	movs	r2, #1
 8001f56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2201      	movs	r2, #1
 8001f66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2201      	movs	r2, #1
 8001f76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2201      	movs	r2, #1
 8001f86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2201      	movs	r2, #1
 8001f8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2201      	movs	r2, #1
 8001f96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001f9a:	2300      	movs	r3, #0
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	3708      	adds	r7, #8
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}

08001fa4 <HAL_TIM_IC_MspInit>:
>>>>>>> AWS
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8001f8c:	b480      	push	{r7}
 8001f8e:	b083      	sub	sp, #12
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
=======
 8001fa4:	b480      	push	{r7}
 8001fa6:	b083      	sub	sp, #12
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
>>>>>>> AWS
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
<<<<<<< HEAD
 8001f94:	bf00      	nop
 8001f96:	370c      	adds	r7, #12
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9e:	4770      	bx	lr

08001fa0 <HAL_TIM_IC_Start_IT>:
=======
 8001fac:	bf00      	nop
 8001fae:	370c      	adds	r7, #12
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb6:	4770      	bx	lr

08001fb8 <HAL_TIM_IC_Start_IT>:
>>>>>>> AWS
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
<<<<<<< HEAD
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b084      	sub	sp, #16
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
 8001fa8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001faa:	2300      	movs	r3, #0
 8001fac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d104      	bne.n	8001fbe <HAL_TIM_IC_Start_IT+0x1e>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001fba:	b2db      	uxtb	r3, r3
 8001fbc:	e013      	b.n	8001fe6 <HAL_TIM_IC_Start_IT+0x46>
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	2b04      	cmp	r3, #4
 8001fc2:	d104      	bne.n	8001fce <HAL_TIM_IC_Start_IT+0x2e>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001fca:	b2db      	uxtb	r3, r3
 8001fcc:	e00b      	b.n	8001fe6 <HAL_TIM_IC_Start_IT+0x46>
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	2b08      	cmp	r3, #8
 8001fd2:	d104      	bne.n	8001fde <HAL_TIM_IC_Start_IT+0x3e>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001fda:	b2db      	uxtb	r3, r3
 8001fdc:	e003      	b.n	8001fe6 <HAL_TIM_IC_Start_IT+0x46>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001fe4:	b2db      	uxtb	r3, r3
 8001fe6:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d104      	bne.n	8001ff8 <HAL_TIM_IC_Start_IT+0x58>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	e013      	b.n	8002020 <HAL_TIM_IC_Start_IT+0x80>
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	2b04      	cmp	r3, #4
 8001ffc:	d104      	bne.n	8002008 <HAL_TIM_IC_Start_IT+0x68>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002004:	b2db      	uxtb	r3, r3
 8002006:	e00b      	b.n	8002020 <HAL_TIM_IC_Start_IT+0x80>
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	2b08      	cmp	r3, #8
 800200c:	d104      	bne.n	8002018 <HAL_TIM_IC_Start_IT+0x78>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002014:	b2db      	uxtb	r3, r3
 8002016:	e003      	b.n	8002020 <HAL_TIM_IC_Start_IT+0x80>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800201e:	b2db      	uxtb	r3, r3
 8002020:	737b      	strb	r3, [r7, #13]
=======
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b084      	sub	sp, #16
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
 8001fc0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d104      	bne.n	8001fd6 <HAL_TIM_IC_Start_IT+0x1e>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001fd2:	b2db      	uxtb	r3, r3
 8001fd4:	e013      	b.n	8001ffe <HAL_TIM_IC_Start_IT+0x46>
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	2b04      	cmp	r3, #4
 8001fda:	d104      	bne.n	8001fe6 <HAL_TIM_IC_Start_IT+0x2e>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001fe2:	b2db      	uxtb	r3, r3
 8001fe4:	e00b      	b.n	8001ffe <HAL_TIM_IC_Start_IT+0x46>
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	2b08      	cmp	r3, #8
 8001fea:	d104      	bne.n	8001ff6 <HAL_TIM_IC_Start_IT+0x3e>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001ff2:	b2db      	uxtb	r3, r3
 8001ff4:	e003      	b.n	8001ffe <HAL_TIM_IC_Start_IT+0x46>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ffc:	b2db      	uxtb	r3, r3
 8001ffe:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d104      	bne.n	8002010 <HAL_TIM_IC_Start_IT+0x58>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800200c:	b2db      	uxtb	r3, r3
 800200e:	e013      	b.n	8002038 <HAL_TIM_IC_Start_IT+0x80>
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	2b04      	cmp	r3, #4
 8002014:	d104      	bne.n	8002020 <HAL_TIM_IC_Start_IT+0x68>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800201c:	b2db      	uxtb	r3, r3
 800201e:	e00b      	b.n	8002038 <HAL_TIM_IC_Start_IT+0x80>
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	2b08      	cmp	r3, #8
 8002024:	d104      	bne.n	8002030 <HAL_TIM_IC_Start_IT+0x78>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800202c:	b2db      	uxtb	r3, r3
 800202e:	e003      	b.n	8002038 <HAL_TIM_IC_Start_IT+0x80>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002036:	b2db      	uxtb	r3, r3
 8002038:	737b      	strb	r3, [r7, #13]
>>>>>>> AWS

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
<<<<<<< HEAD
 8002022:	7bbb      	ldrb	r3, [r7, #14]
 8002024:	2b01      	cmp	r3, #1
 8002026:	d102      	bne.n	800202e <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8002028:	7b7b      	ldrb	r3, [r7, #13]
 800202a:	2b01      	cmp	r3, #1
 800202c:	d001      	beq.n	8002032 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 800202e:	2301      	movs	r3, #1
 8002030:	e0c2      	b.n	80021b8 <HAL_TIM_IC_Start_IT+0x218>
=======
 800203a:	7bbb      	ldrb	r3, [r7, #14]
 800203c:	2b01      	cmp	r3, #1
 800203e:	d102      	bne.n	8002046 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8002040:	7b7b      	ldrb	r3, [r7, #13]
 8002042:	2b01      	cmp	r3, #1
 8002044:	d001      	beq.n	800204a <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	e0c2      	b.n	80021d0 <HAL_TIM_IC_Start_IT+0x218>
>>>>>>> AWS
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
<<<<<<< HEAD
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d104      	bne.n	8002042 <HAL_TIM_IC_Start_IT+0xa2>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2202      	movs	r2, #2
 800203c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002040:	e013      	b.n	800206a <HAL_TIM_IC_Start_IT+0xca>
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	2b04      	cmp	r3, #4
 8002046:	d104      	bne.n	8002052 <HAL_TIM_IC_Start_IT+0xb2>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2202      	movs	r2, #2
 800204c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002050:	e00b      	b.n	800206a <HAL_TIM_IC_Start_IT+0xca>
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	2b08      	cmp	r3, #8
 8002056:	d104      	bne.n	8002062 <HAL_TIM_IC_Start_IT+0xc2>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2202      	movs	r2, #2
 800205c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002060:	e003      	b.n	800206a <HAL_TIM_IC_Start_IT+0xca>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2202      	movs	r2, #2
 8002066:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d104      	bne.n	800207a <HAL_TIM_IC_Start_IT+0xda>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2202      	movs	r2, #2
 8002074:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002078:	e013      	b.n	80020a2 <HAL_TIM_IC_Start_IT+0x102>
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	2b04      	cmp	r3, #4
 800207e:	d104      	bne.n	800208a <HAL_TIM_IC_Start_IT+0xea>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2202      	movs	r2, #2
 8002084:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002088:	e00b      	b.n	80020a2 <HAL_TIM_IC_Start_IT+0x102>
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	2b08      	cmp	r3, #8
 800208e:	d104      	bne.n	800209a <HAL_TIM_IC_Start_IT+0xfa>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2202      	movs	r2, #2
 8002094:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002098:	e003      	b.n	80020a2 <HAL_TIM_IC_Start_IT+0x102>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2202      	movs	r2, #2
 800209e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	2b0c      	cmp	r3, #12
 80020a6:	d841      	bhi.n	800212c <HAL_TIM_IC_Start_IT+0x18c>
 80020a8:	a201      	add	r2, pc, #4	; (adr r2, 80020b0 <HAL_TIM_IC_Start_IT+0x110>)
 80020aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020ae:	bf00      	nop
 80020b0:	080020e5 	.word	0x080020e5
 80020b4:	0800212d 	.word	0x0800212d
 80020b8:	0800212d 	.word	0x0800212d
 80020bc:	0800212d 	.word	0x0800212d
 80020c0:	080020f7 	.word	0x080020f7
 80020c4:	0800212d 	.word	0x0800212d
 80020c8:	0800212d 	.word	0x0800212d
 80020cc:	0800212d 	.word	0x0800212d
 80020d0:	08002109 	.word	0x08002109
 80020d4:	0800212d 	.word	0x0800212d
 80020d8:	0800212d 	.word	0x0800212d
 80020dc:	0800212d 	.word	0x0800212d
 80020e0:	0800211b 	.word	0x0800211b
=======
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d104      	bne.n	800205a <HAL_TIM_IC_Start_IT+0xa2>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2202      	movs	r2, #2
 8002054:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002058:	e013      	b.n	8002082 <HAL_TIM_IC_Start_IT+0xca>
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	2b04      	cmp	r3, #4
 800205e:	d104      	bne.n	800206a <HAL_TIM_IC_Start_IT+0xb2>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2202      	movs	r2, #2
 8002064:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002068:	e00b      	b.n	8002082 <HAL_TIM_IC_Start_IT+0xca>
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	2b08      	cmp	r3, #8
 800206e:	d104      	bne.n	800207a <HAL_TIM_IC_Start_IT+0xc2>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2202      	movs	r2, #2
 8002074:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002078:	e003      	b.n	8002082 <HAL_TIM_IC_Start_IT+0xca>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2202      	movs	r2, #2
 800207e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d104      	bne.n	8002092 <HAL_TIM_IC_Start_IT+0xda>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2202      	movs	r2, #2
 800208c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002090:	e013      	b.n	80020ba <HAL_TIM_IC_Start_IT+0x102>
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	2b04      	cmp	r3, #4
 8002096:	d104      	bne.n	80020a2 <HAL_TIM_IC_Start_IT+0xea>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2202      	movs	r2, #2
 800209c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80020a0:	e00b      	b.n	80020ba <HAL_TIM_IC_Start_IT+0x102>
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	2b08      	cmp	r3, #8
 80020a6:	d104      	bne.n	80020b2 <HAL_TIM_IC_Start_IT+0xfa>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2202      	movs	r2, #2
 80020ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80020b0:	e003      	b.n	80020ba <HAL_TIM_IC_Start_IT+0x102>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2202      	movs	r2, #2
 80020b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	2b0c      	cmp	r3, #12
 80020be:	d841      	bhi.n	8002144 <HAL_TIM_IC_Start_IT+0x18c>
 80020c0:	a201      	add	r2, pc, #4	; (adr r2, 80020c8 <HAL_TIM_IC_Start_IT+0x110>)
 80020c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020c6:	bf00      	nop
 80020c8:	080020fd 	.word	0x080020fd
 80020cc:	08002145 	.word	0x08002145
 80020d0:	08002145 	.word	0x08002145
 80020d4:	08002145 	.word	0x08002145
 80020d8:	0800210f 	.word	0x0800210f
 80020dc:	08002145 	.word	0x08002145
 80020e0:	08002145 	.word	0x08002145
 80020e4:	08002145 	.word	0x08002145
 80020e8:	08002121 	.word	0x08002121
 80020ec:	08002145 	.word	0x08002145
 80020f0:	08002145 	.word	0x08002145
 80020f4:	08002145 	.word	0x08002145
 80020f8:	08002133 	.word	0x08002133
>>>>>>> AWS
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
<<<<<<< HEAD
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	68da      	ldr	r2, [r3, #12]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f042 0202 	orr.w	r2, r2, #2
 80020f2:	60da      	str	r2, [r3, #12]
      break;
 80020f4:	e01d      	b.n	8002132 <HAL_TIM_IC_Start_IT+0x192>
=======
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	68da      	ldr	r2, [r3, #12]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f042 0202 	orr.w	r2, r2, #2
 800210a:	60da      	str	r2, [r3, #12]
      break;
 800210c:	e01d      	b.n	800214a <HAL_TIM_IC_Start_IT+0x192>
>>>>>>> AWS
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
<<<<<<< HEAD
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	68da      	ldr	r2, [r3, #12]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f042 0204 	orr.w	r2, r2, #4
 8002104:	60da      	str	r2, [r3, #12]
      break;
 8002106:	e014      	b.n	8002132 <HAL_TIM_IC_Start_IT+0x192>
=======
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	68da      	ldr	r2, [r3, #12]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f042 0204 	orr.w	r2, r2, #4
 800211c:	60da      	str	r2, [r3, #12]
      break;
 800211e:	e014      	b.n	800214a <HAL_TIM_IC_Start_IT+0x192>
>>>>>>> AWS
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
<<<<<<< HEAD
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	68da      	ldr	r2, [r3, #12]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f042 0208 	orr.w	r2, r2, #8
 8002116:	60da      	str	r2, [r3, #12]
      break;
 8002118:	e00b      	b.n	8002132 <HAL_TIM_IC_Start_IT+0x192>
=======
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	68da      	ldr	r2, [r3, #12]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f042 0208 	orr.w	r2, r2, #8
 800212e:	60da      	str	r2, [r3, #12]
      break;
 8002130:	e00b      	b.n	800214a <HAL_TIM_IC_Start_IT+0x192>
>>>>>>> AWS
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
<<<<<<< HEAD
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	68da      	ldr	r2, [r3, #12]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f042 0210 	orr.w	r2, r2, #16
 8002128:	60da      	str	r2, [r3, #12]
      break;
 800212a:	e002      	b.n	8002132 <HAL_TIM_IC_Start_IT+0x192>
=======
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	68da      	ldr	r2, [r3, #12]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f042 0210 	orr.w	r2, r2, #16
 8002140:	60da      	str	r2, [r3, #12]
      break;
 8002142:	e002      	b.n	800214a <HAL_TIM_IC_Start_IT+0x192>
>>>>>>> AWS
    }

    default:
      status = HAL_ERROR;
<<<<<<< HEAD
 800212c:	2301      	movs	r3, #1
 800212e:	73fb      	strb	r3, [r7, #15]
      break;
 8002130:	bf00      	nop
  }

  if (status == HAL_OK)
 8002132:	7bfb      	ldrb	r3, [r7, #15]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d13e      	bne.n	80021b6 <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	2201      	movs	r2, #1
 800213e:	6839      	ldr	r1, [r7, #0]
 8002140:	4618      	mov	r0, r3
 8002142:	f000 fe05 	bl	8002d50 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a1d      	ldr	r2, [pc, #116]	; (80021c0 <HAL_TIM_IC_Start_IT+0x220>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d018      	beq.n	8002182 <HAL_TIM_IC_Start_IT+0x1e2>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002158:	d013      	beq.n	8002182 <HAL_TIM_IC_Start_IT+0x1e2>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a19      	ldr	r2, [pc, #100]	; (80021c4 <HAL_TIM_IC_Start_IT+0x224>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d00e      	beq.n	8002182 <HAL_TIM_IC_Start_IT+0x1e2>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a17      	ldr	r2, [pc, #92]	; (80021c8 <HAL_TIM_IC_Start_IT+0x228>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d009      	beq.n	8002182 <HAL_TIM_IC_Start_IT+0x1e2>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a16      	ldr	r2, [pc, #88]	; (80021cc <HAL_TIM_IC_Start_IT+0x22c>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d004      	beq.n	8002182 <HAL_TIM_IC_Start_IT+0x1e2>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a14      	ldr	r2, [pc, #80]	; (80021d0 <HAL_TIM_IC_Start_IT+0x230>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d111      	bne.n	80021a6 <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	f003 0307 	and.w	r3, r3, #7
 800218c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	2b06      	cmp	r3, #6
 8002192:	d010      	beq.n	80021b6 <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f042 0201 	orr.w	r2, r2, #1
 80021a2:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021a4:	e007      	b.n	80021b6 <HAL_TIM_IC_Start_IT+0x216>
=======
 8002144:	2301      	movs	r3, #1
 8002146:	73fb      	strb	r3, [r7, #15]
      break;
 8002148:	bf00      	nop
  }

  if (status == HAL_OK)
 800214a:	7bfb      	ldrb	r3, [r7, #15]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d13e      	bne.n	80021ce <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	2201      	movs	r2, #1
 8002156:	6839      	ldr	r1, [r7, #0]
 8002158:	4618      	mov	r0, r3
 800215a:	f000 fe05 	bl	8002d68 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a1d      	ldr	r2, [pc, #116]	; (80021d8 <HAL_TIM_IC_Start_IT+0x220>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d018      	beq.n	800219a <HAL_TIM_IC_Start_IT+0x1e2>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002170:	d013      	beq.n	800219a <HAL_TIM_IC_Start_IT+0x1e2>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a19      	ldr	r2, [pc, #100]	; (80021dc <HAL_TIM_IC_Start_IT+0x224>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d00e      	beq.n	800219a <HAL_TIM_IC_Start_IT+0x1e2>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a17      	ldr	r2, [pc, #92]	; (80021e0 <HAL_TIM_IC_Start_IT+0x228>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d009      	beq.n	800219a <HAL_TIM_IC_Start_IT+0x1e2>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4a16      	ldr	r2, [pc, #88]	; (80021e4 <HAL_TIM_IC_Start_IT+0x22c>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d004      	beq.n	800219a <HAL_TIM_IC_Start_IT+0x1e2>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a14      	ldr	r2, [pc, #80]	; (80021e8 <HAL_TIM_IC_Start_IT+0x230>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d111      	bne.n	80021be <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	f003 0307 	and.w	r3, r3, #7
 80021a4:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	2b06      	cmp	r3, #6
 80021aa:	d010      	beq.n	80021ce <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	681a      	ldr	r2, [r3, #0]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f042 0201 	orr.w	r2, r2, #1
 80021ba:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021bc:	e007      	b.n	80021ce <HAL_TIM_IC_Start_IT+0x216>
>>>>>>> AWS
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
<<<<<<< HEAD
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	681a      	ldr	r2, [r3, #0]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f042 0201 	orr.w	r2, r2, #1
 80021b4:	601a      	str	r2, [r3, #0]
=======
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	681a      	ldr	r2, [r3, #0]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f042 0201 	orr.w	r2, r2, #1
 80021cc:	601a      	str	r2, [r3, #0]
>>>>>>> AWS
    }
  }

  /* Return function status */
  return status;
<<<<<<< HEAD
 80021b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	3710      	adds	r7, #16
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}
 80021c0:	40010000 	.word	0x40010000
 80021c4:	40000400 	.word	0x40000400
 80021c8:	40000800 	.word	0x40000800
 80021cc:	40000c00 	.word	0x40000c00
 80021d0:	40014000 	.word	0x40014000

080021d4 <HAL_TIM_IC_Stop_IT>:
=======
 80021ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	3710      	adds	r7, #16
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}
 80021d8:	40010000 	.word	0x40010000
 80021dc:	40000400 	.word	0x40000400
 80021e0:	40000800 	.word	0x40000800
 80021e4:	40000c00 	.word	0x40000c00
 80021e8:	40014000 	.word	0x40014000

080021ec <HAL_TIM_IC_Stop_IT>:
>>>>>>> AWS
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
<<<<<<< HEAD
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b084      	sub	sp, #16
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
 80021dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80021de:	2300      	movs	r3, #0
 80021e0:	73fb      	strb	r3, [r7, #15]
=======
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b084      	sub	sp, #16
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
 80021f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80021f6:	2300      	movs	r3, #0
 80021f8:	73fb      	strb	r3, [r7, #15]
>>>>>>> AWS

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
<<<<<<< HEAD
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	2b0c      	cmp	r3, #12
 80021e6:	d841      	bhi.n	800226c <HAL_TIM_IC_Stop_IT+0x98>
 80021e8:	a201      	add	r2, pc, #4	; (adr r2, 80021f0 <HAL_TIM_IC_Stop_IT+0x1c>)
 80021ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021ee:	bf00      	nop
 80021f0:	08002225 	.word	0x08002225
 80021f4:	0800226d 	.word	0x0800226d
 80021f8:	0800226d 	.word	0x0800226d
 80021fc:	0800226d 	.word	0x0800226d
 8002200:	08002237 	.word	0x08002237
 8002204:	0800226d 	.word	0x0800226d
 8002208:	0800226d 	.word	0x0800226d
 800220c:	0800226d 	.word	0x0800226d
 8002210:	08002249 	.word	0x08002249
 8002214:	0800226d 	.word	0x0800226d
 8002218:	0800226d 	.word	0x0800226d
 800221c:	0800226d 	.word	0x0800226d
 8002220:	0800225b 	.word	0x0800225b
=======
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	2b0c      	cmp	r3, #12
 80021fe:	d841      	bhi.n	8002284 <HAL_TIM_IC_Stop_IT+0x98>
 8002200:	a201      	add	r2, pc, #4	; (adr r2, 8002208 <HAL_TIM_IC_Stop_IT+0x1c>)
 8002202:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002206:	bf00      	nop
 8002208:	0800223d 	.word	0x0800223d
 800220c:	08002285 	.word	0x08002285
 8002210:	08002285 	.word	0x08002285
 8002214:	08002285 	.word	0x08002285
 8002218:	0800224f 	.word	0x0800224f
 800221c:	08002285 	.word	0x08002285
 8002220:	08002285 	.word	0x08002285
 8002224:	08002285 	.word	0x08002285
 8002228:	08002261 	.word	0x08002261
 800222c:	08002285 	.word	0x08002285
 8002230:	08002285 	.word	0x08002285
 8002234:	08002285 	.word	0x08002285
 8002238:	08002273 	.word	0x08002273
>>>>>>> AWS
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
<<<<<<< HEAD
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	68da      	ldr	r2, [r3, #12]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f022 0202 	bic.w	r2, r2, #2
 8002232:	60da      	str	r2, [r3, #12]
      break;
 8002234:	e01d      	b.n	8002272 <HAL_TIM_IC_Stop_IT+0x9e>
=======
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	68da      	ldr	r2, [r3, #12]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f022 0202 	bic.w	r2, r2, #2
 800224a:	60da      	str	r2, [r3, #12]
      break;
 800224c:	e01d      	b.n	800228a <HAL_TIM_IC_Stop_IT+0x9e>
>>>>>>> AWS
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
<<<<<<< HEAD
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	68da      	ldr	r2, [r3, #12]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f022 0204 	bic.w	r2, r2, #4
 8002244:	60da      	str	r2, [r3, #12]
      break;
 8002246:	e014      	b.n	8002272 <HAL_TIM_IC_Stop_IT+0x9e>
=======
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	68da      	ldr	r2, [r3, #12]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f022 0204 	bic.w	r2, r2, #4
 800225c:	60da      	str	r2, [r3, #12]
      break;
 800225e:	e014      	b.n	800228a <HAL_TIM_IC_Stop_IT+0x9e>
>>>>>>> AWS
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
<<<<<<< HEAD
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	68da      	ldr	r2, [r3, #12]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f022 0208 	bic.w	r2, r2, #8
 8002256:	60da      	str	r2, [r3, #12]
      break;
 8002258:	e00b      	b.n	8002272 <HAL_TIM_IC_Stop_IT+0x9e>
=======
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	68da      	ldr	r2, [r3, #12]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f022 0208 	bic.w	r2, r2, #8
 800226e:	60da      	str	r2, [r3, #12]
      break;
 8002270:	e00b      	b.n	800228a <HAL_TIM_IC_Stop_IT+0x9e>
>>>>>>> AWS
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
<<<<<<< HEAD
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	68da      	ldr	r2, [r3, #12]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f022 0210 	bic.w	r2, r2, #16
 8002268:	60da      	str	r2, [r3, #12]
      break;
 800226a:	e002      	b.n	8002272 <HAL_TIM_IC_Stop_IT+0x9e>
=======
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	68da      	ldr	r2, [r3, #12]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f022 0210 	bic.w	r2, r2, #16
 8002280:	60da      	str	r2, [r3, #12]
      break;
 8002282:	e002      	b.n	800228a <HAL_TIM_IC_Stop_IT+0x9e>
>>>>>>> AWS
    }

    default:
      status = HAL_ERROR;
<<<<<<< HEAD
 800226c:	2301      	movs	r3, #1
 800226e:	73fb      	strb	r3, [r7, #15]
      break;
 8002270:	bf00      	nop
  }

  if (status == HAL_OK)
 8002272:	7bfb      	ldrb	r3, [r7, #15]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d156      	bne.n	8002326 <HAL_TIM_IC_Stop_IT+0x152>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	2200      	movs	r2, #0
 800227e:	6839      	ldr	r1, [r7, #0]
 8002280:	4618      	mov	r0, r3
 8002282:	f000 fd65 	bl	8002d50 <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	6a1a      	ldr	r2, [r3, #32]
 800228c:	f241 1311 	movw	r3, #4369	; 0x1111
 8002290:	4013      	ands	r3, r2
 8002292:	2b00      	cmp	r3, #0
 8002294:	d10f      	bne.n	80022b6 <HAL_TIM_IC_Stop_IT+0xe2>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	6a1a      	ldr	r2, [r3, #32]
 800229c:	f240 4344 	movw	r3, #1092	; 0x444
 80022a0:	4013      	ands	r3, r2
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d107      	bne.n	80022b6 <HAL_TIM_IC_Stop_IT+0xe2>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	681a      	ldr	r2, [r3, #0]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f022 0201 	bic.w	r2, r2, #1
 80022b4:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d104      	bne.n	80022c6 <HAL_TIM_IC_Stop_IT+0xf2>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2201      	movs	r2, #1
 80022c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80022c4:	e013      	b.n	80022ee <HAL_TIM_IC_Stop_IT+0x11a>
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	2b04      	cmp	r3, #4
 80022ca:	d104      	bne.n	80022d6 <HAL_TIM_IC_Stop_IT+0x102>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2201      	movs	r2, #1
 80022d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80022d4:	e00b      	b.n	80022ee <HAL_TIM_IC_Stop_IT+0x11a>
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	2b08      	cmp	r3, #8
 80022da:	d104      	bne.n	80022e6 <HAL_TIM_IC_Stop_IT+0x112>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2201      	movs	r2, #1
 80022e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80022e4:	e003      	b.n	80022ee <HAL_TIM_IC_Stop_IT+0x11a>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2201      	movs	r2, #1
 80022ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d104      	bne.n	80022fe <HAL_TIM_IC_Stop_IT+0x12a>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2201      	movs	r2, #1
 80022f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80022fc:	e013      	b.n	8002326 <HAL_TIM_IC_Stop_IT+0x152>
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	2b04      	cmp	r3, #4
 8002302:	d104      	bne.n	800230e <HAL_TIM_IC_Stop_IT+0x13a>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2201      	movs	r2, #1
 8002308:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800230c:	e00b      	b.n	8002326 <HAL_TIM_IC_Stop_IT+0x152>
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	2b08      	cmp	r3, #8
 8002312:	d104      	bne.n	800231e <HAL_TIM_IC_Stop_IT+0x14a>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2201      	movs	r2, #1
 8002318:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800231c:	e003      	b.n	8002326 <HAL_TIM_IC_Stop_IT+0x152>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2201      	movs	r2, #1
 8002322:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
=======
 8002284:	2301      	movs	r3, #1
 8002286:	73fb      	strb	r3, [r7, #15]
      break;
 8002288:	bf00      	nop
  }

  if (status == HAL_OK)
 800228a:	7bfb      	ldrb	r3, [r7, #15]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d156      	bne.n	800233e <HAL_TIM_IC_Stop_IT+0x152>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	2200      	movs	r2, #0
 8002296:	6839      	ldr	r1, [r7, #0]
 8002298:	4618      	mov	r0, r3
 800229a:	f000 fd65 	bl	8002d68 <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	6a1a      	ldr	r2, [r3, #32]
 80022a4:	f241 1311 	movw	r3, #4369	; 0x1111
 80022a8:	4013      	ands	r3, r2
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d10f      	bne.n	80022ce <HAL_TIM_IC_Stop_IT+0xe2>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	6a1a      	ldr	r2, [r3, #32]
 80022b4:	f240 4344 	movw	r3, #1092	; 0x444
 80022b8:	4013      	ands	r3, r2
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d107      	bne.n	80022ce <HAL_TIM_IC_Stop_IT+0xe2>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f022 0201 	bic.w	r2, r2, #1
 80022cc:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d104      	bne.n	80022de <HAL_TIM_IC_Stop_IT+0xf2>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2201      	movs	r2, #1
 80022d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80022dc:	e013      	b.n	8002306 <HAL_TIM_IC_Stop_IT+0x11a>
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	2b04      	cmp	r3, #4
 80022e2:	d104      	bne.n	80022ee <HAL_TIM_IC_Stop_IT+0x102>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2201      	movs	r2, #1
 80022e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80022ec:	e00b      	b.n	8002306 <HAL_TIM_IC_Stop_IT+0x11a>
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	2b08      	cmp	r3, #8
 80022f2:	d104      	bne.n	80022fe <HAL_TIM_IC_Stop_IT+0x112>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2201      	movs	r2, #1
 80022f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80022fc:	e003      	b.n	8002306 <HAL_TIM_IC_Stop_IT+0x11a>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2201      	movs	r2, #1
 8002302:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d104      	bne.n	8002316 <HAL_TIM_IC_Stop_IT+0x12a>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2201      	movs	r2, #1
 8002310:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002314:	e013      	b.n	800233e <HAL_TIM_IC_Stop_IT+0x152>
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	2b04      	cmp	r3, #4
 800231a:	d104      	bne.n	8002326 <HAL_TIM_IC_Stop_IT+0x13a>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2201      	movs	r2, #1
 8002320:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002324:	e00b      	b.n	800233e <HAL_TIM_IC_Stop_IT+0x152>
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	2b08      	cmp	r3, #8
 800232a:	d104      	bne.n	8002336 <HAL_TIM_IC_Stop_IT+0x14a>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2201      	movs	r2, #1
 8002330:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002334:	e003      	b.n	800233e <HAL_TIM_IC_Stop_IT+0x152>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2201      	movs	r2, #1
 800233a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
>>>>>>> AWS
  }

  /* Return function status */
  return status;
<<<<<<< HEAD
 8002326:	7bfb      	ldrb	r3, [r7, #15]
}
 8002328:	4618      	mov	r0, r3
 800232a:	3710      	adds	r7, #16
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}

08002330 <HAL_TIM_IRQHandler>:
=======
 800233e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002340:	4618      	mov	r0, r3
 8002342:	3710      	adds	r7, #16
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}

08002348 <HAL_TIM_IRQHandler>:
>>>>>>> AWS
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8002330:	b580      	push	{r7, lr}
 8002332:	b082      	sub	sp, #8
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	691b      	ldr	r3, [r3, #16]
 800233e:	f003 0302 	and.w	r3, r3, #2
 8002342:	2b02      	cmp	r3, #2
 8002344:	d122      	bne.n	800238c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	68db      	ldr	r3, [r3, #12]
 800234c:	f003 0302 	and.w	r3, r3, #2
 8002350:	2b02      	cmp	r3, #2
 8002352:	d11b      	bne.n	800238c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f06f 0202 	mvn.w	r2, #2
 800235c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2201      	movs	r2, #1
 8002362:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	699b      	ldr	r3, [r3, #24]
 800236a:	f003 0303 	and.w	r3, r3, #3
 800236e:	2b00      	cmp	r3, #0
 8002370:	d003      	beq.n	800237a <HAL_TIM_IRQHandler+0x4a>
=======
 8002348:	b580      	push	{r7, lr}
 800234a:	b082      	sub	sp, #8
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	691b      	ldr	r3, [r3, #16]
 8002356:	f003 0302 	and.w	r3, r3, #2
 800235a:	2b02      	cmp	r3, #2
 800235c:	d122      	bne.n	80023a4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	f003 0302 	and.w	r3, r3, #2
 8002368:	2b02      	cmp	r3, #2
 800236a:	d11b      	bne.n	80023a4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f06f 0202 	mvn.w	r2, #2
 8002374:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2201      	movs	r2, #1
 800237a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	699b      	ldr	r3, [r3, #24]
 8002382:	f003 0303 	and.w	r3, r3, #3
 8002386:	2b00      	cmp	r3, #0
 8002388:	d003      	beq.n	8002392 <HAL_TIM_IRQHandler+0x4a>
>>>>>>> AWS
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< HEAD
 8002372:	6878      	ldr	r0, [r7, #4]
 8002374:	f7fe f8ac 	bl	80004d0 <HAL_TIM_IC_CaptureCallback>
 8002378:	e005      	b.n	8002386 <HAL_TIM_IRQHandler+0x56>
=======
 800238a:	6878      	ldr	r0, [r7, #4]
 800238c:	f7fe f8a0 	bl	80004d0 <HAL_TIM_IC_CaptureCallback>
 8002390:	e005      	b.n	800239e <HAL_TIM_IRQHandler+0x56>
>>>>>>> AWS
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< HEAD
 800237a:	6878      	ldr	r0, [r7, #4]
 800237c:	f000 fa92 	bl	80028a4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002380:	6878      	ldr	r0, [r7, #4]
 8002382:	f000 fa99 	bl	80028b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2200      	movs	r2, #0
 800238a:	771a      	strb	r2, [r3, #28]
=======
 8002392:	6878      	ldr	r0, [r7, #4]
 8002394:	f000 fa92 	bl	80028bc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002398:	6878      	ldr	r0, [r7, #4]
 800239a:	f000 fa99 	bl	80028d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2200      	movs	r2, #0
 80023a2:	771a      	strb	r2, [r3, #28]
>>>>>>> AWS
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
<<<<<<< HEAD
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	691b      	ldr	r3, [r3, #16]
 8002392:	f003 0304 	and.w	r3, r3, #4
 8002396:	2b04      	cmp	r3, #4
 8002398:	d122      	bne.n	80023e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	68db      	ldr	r3, [r3, #12]
 80023a0:	f003 0304 	and.w	r3, r3, #4
 80023a4:	2b04      	cmp	r3, #4
 80023a6:	d11b      	bne.n	80023e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f06f 0204 	mvn.w	r2, #4
 80023b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2202      	movs	r2, #2
 80023b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	699b      	ldr	r3, [r3, #24]
 80023be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d003      	beq.n	80023ce <HAL_TIM_IRQHandler+0x9e>
=======
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	691b      	ldr	r3, [r3, #16]
 80023aa:	f003 0304 	and.w	r3, r3, #4
 80023ae:	2b04      	cmp	r3, #4
 80023b0:	d122      	bne.n	80023f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	68db      	ldr	r3, [r3, #12]
 80023b8:	f003 0304 	and.w	r3, r3, #4
 80023bc:	2b04      	cmp	r3, #4
 80023be:	d11b      	bne.n	80023f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f06f 0204 	mvn.w	r2, #4
 80023c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2202      	movs	r2, #2
 80023ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	699b      	ldr	r3, [r3, #24]
 80023d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d003      	beq.n	80023e6 <HAL_TIM_IRQHandler+0x9e>
>>>>>>> AWS
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< HEAD
 80023c6:	6878      	ldr	r0, [r7, #4]
 80023c8:	f7fe f882 	bl	80004d0 <HAL_TIM_IC_CaptureCallback>
 80023cc:	e005      	b.n	80023da <HAL_TIM_IRQHandler+0xaa>
=======
 80023de:	6878      	ldr	r0, [r7, #4]
 80023e0:	f7fe f876 	bl	80004d0 <HAL_TIM_IC_CaptureCallback>
 80023e4:	e005      	b.n	80023f2 <HAL_TIM_IRQHandler+0xaa>
>>>>>>> AWS
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< HEAD
 80023ce:	6878      	ldr	r0, [r7, #4]
 80023d0:	f000 fa68 	bl	80028a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023d4:	6878      	ldr	r0, [r7, #4]
 80023d6:	f000 fa6f 	bl	80028b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2200      	movs	r2, #0
 80023de:	771a      	strb	r2, [r3, #28]
=======
 80023e6:	6878      	ldr	r0, [r7, #4]
 80023e8:	f000 fa68 	bl	80028bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023ec:	6878      	ldr	r0, [r7, #4]
 80023ee:	f000 fa6f 	bl	80028d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2200      	movs	r2, #0
 80023f6:	771a      	strb	r2, [r3, #28]
>>>>>>> AWS
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
<<<<<<< HEAD
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	691b      	ldr	r3, [r3, #16]
 80023e6:	f003 0308 	and.w	r3, r3, #8
 80023ea:	2b08      	cmp	r3, #8
 80023ec:	d122      	bne.n	8002434 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	68db      	ldr	r3, [r3, #12]
 80023f4:	f003 0308 	and.w	r3, r3, #8
 80023f8:	2b08      	cmp	r3, #8
 80023fa:	d11b      	bne.n	8002434 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f06f 0208 	mvn.w	r2, #8
 8002404:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2204      	movs	r2, #4
 800240a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	69db      	ldr	r3, [r3, #28]
 8002412:	f003 0303 	and.w	r3, r3, #3
 8002416:	2b00      	cmp	r3, #0
 8002418:	d003      	beq.n	8002422 <HAL_TIM_IRQHandler+0xf2>
=======
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	691b      	ldr	r3, [r3, #16]
 80023fe:	f003 0308 	and.w	r3, r3, #8
 8002402:	2b08      	cmp	r3, #8
 8002404:	d122      	bne.n	800244c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	68db      	ldr	r3, [r3, #12]
 800240c:	f003 0308 	and.w	r3, r3, #8
 8002410:	2b08      	cmp	r3, #8
 8002412:	d11b      	bne.n	800244c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f06f 0208 	mvn.w	r2, #8
 800241c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2204      	movs	r2, #4
 8002422:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	69db      	ldr	r3, [r3, #28]
 800242a:	f003 0303 	and.w	r3, r3, #3
 800242e:	2b00      	cmp	r3, #0
 8002430:	d003      	beq.n	800243a <HAL_TIM_IRQHandler+0xf2>
>>>>>>> AWS
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< HEAD
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	f7fe f858 	bl	80004d0 <HAL_TIM_IC_CaptureCallback>
 8002420:	e005      	b.n	800242e <HAL_TIM_IRQHandler+0xfe>
=======
 8002432:	6878      	ldr	r0, [r7, #4]
 8002434:	f7fe f84c 	bl	80004d0 <HAL_TIM_IC_CaptureCallback>
 8002438:	e005      	b.n	8002446 <HAL_TIM_IRQHandler+0xfe>
>>>>>>> AWS
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< HEAD
 8002422:	6878      	ldr	r0, [r7, #4]
 8002424:	f000 fa3e 	bl	80028a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002428:	6878      	ldr	r0, [r7, #4]
 800242a:	f000 fa45 	bl	80028b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2200      	movs	r2, #0
 8002432:	771a      	strb	r2, [r3, #28]
=======
 800243a:	6878      	ldr	r0, [r7, #4]
 800243c:	f000 fa3e 	bl	80028bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002440:	6878      	ldr	r0, [r7, #4]
 8002442:	f000 fa45 	bl	80028d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2200      	movs	r2, #0
 800244a:	771a      	strb	r2, [r3, #28]
>>>>>>> AWS
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
<<<<<<< HEAD
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	691b      	ldr	r3, [r3, #16]
 800243a:	f003 0310 	and.w	r3, r3, #16
 800243e:	2b10      	cmp	r3, #16
 8002440:	d122      	bne.n	8002488 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	68db      	ldr	r3, [r3, #12]
 8002448:	f003 0310 	and.w	r3, r3, #16
 800244c:	2b10      	cmp	r3, #16
 800244e:	d11b      	bne.n	8002488 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f06f 0210 	mvn.w	r2, #16
 8002458:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2208      	movs	r2, #8
 800245e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	69db      	ldr	r3, [r3, #28]
 8002466:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800246a:	2b00      	cmp	r3, #0
 800246c:	d003      	beq.n	8002476 <HAL_TIM_IRQHandler+0x146>
=======
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	691b      	ldr	r3, [r3, #16]
 8002452:	f003 0310 	and.w	r3, r3, #16
 8002456:	2b10      	cmp	r3, #16
 8002458:	d122      	bne.n	80024a0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	68db      	ldr	r3, [r3, #12]
 8002460:	f003 0310 	and.w	r3, r3, #16
 8002464:	2b10      	cmp	r3, #16
 8002466:	d11b      	bne.n	80024a0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f06f 0210 	mvn.w	r2, #16
 8002470:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2208      	movs	r2, #8
 8002476:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	69db      	ldr	r3, [r3, #28]
 800247e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002482:	2b00      	cmp	r3, #0
 8002484:	d003      	beq.n	800248e <HAL_TIM_IRQHandler+0x146>
>>>>>>> AWS
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< HEAD
 800246e:	6878      	ldr	r0, [r7, #4]
 8002470:	f7fe f82e 	bl	80004d0 <HAL_TIM_IC_CaptureCallback>
 8002474:	e005      	b.n	8002482 <HAL_TIM_IRQHandler+0x152>
=======
 8002486:	6878      	ldr	r0, [r7, #4]
 8002488:	f7fe f822 	bl	80004d0 <HAL_TIM_IC_CaptureCallback>
 800248c:	e005      	b.n	800249a <HAL_TIM_IRQHandler+0x152>
>>>>>>> AWS
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< HEAD
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	f000 fa14 	bl	80028a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800247c:	6878      	ldr	r0, [r7, #4]
 800247e:	f000 fa1b 	bl	80028b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2200      	movs	r2, #0
 8002486:	771a      	strb	r2, [r3, #28]
=======
 800248e:	6878      	ldr	r0, [r7, #4]
 8002490:	f000 fa14 	bl	80028bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002494:	6878      	ldr	r0, [r7, #4]
 8002496:	f000 fa1b 	bl	80028d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2200      	movs	r2, #0
 800249e:	771a      	strb	r2, [r3, #28]
>>>>>>> AWS
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
<<<<<<< HEAD
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	691b      	ldr	r3, [r3, #16]
 800248e:	f003 0301 	and.w	r3, r3, #1
 8002492:	2b01      	cmp	r3, #1
 8002494:	d10e      	bne.n	80024b4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	68db      	ldr	r3, [r3, #12]
 800249c:	f003 0301 	and.w	r3, r3, #1
 80024a0:	2b01      	cmp	r3, #1
 80024a2:	d107      	bne.n	80024b4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f06f 0201 	mvn.w	r2, #1
 80024ac:	611a      	str	r2, [r3, #16]
=======
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	691b      	ldr	r3, [r3, #16]
 80024a6:	f003 0301 	and.w	r3, r3, #1
 80024aa:	2b01      	cmp	r3, #1
 80024ac:	d10e      	bne.n	80024cc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	68db      	ldr	r3, [r3, #12]
 80024b4:	f003 0301 	and.w	r3, r3, #1
 80024b8:	2b01      	cmp	r3, #1
 80024ba:	d107      	bne.n	80024cc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f06f 0201 	mvn.w	r2, #1
 80024c4:	611a      	str	r2, [r3, #16]
>>>>>>> AWS
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
<<<<<<< HEAD
 80024ae:	6878      	ldr	r0, [r7, #4]
 80024b0:	f000 f9ee 	bl	8002890 <HAL_TIM_PeriodElapsedCallback>
=======
 80024c6:	6878      	ldr	r0, [r7, #4]
 80024c8:	f000 f9ee 	bl	80028a8 <HAL_TIM_PeriodElapsedCallback>
>>>>>>> AWS
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
<<<<<<< HEAD
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	691b      	ldr	r3, [r3, #16]
 80024ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024be:	2b80      	cmp	r3, #128	; 0x80
 80024c0:	d10e      	bne.n	80024e0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	68db      	ldr	r3, [r3, #12]
 80024c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024cc:	2b80      	cmp	r3, #128	; 0x80
 80024ce:	d107      	bne.n	80024e0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80024d8:	611a      	str	r2, [r3, #16]
=======
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	691b      	ldr	r3, [r3, #16]
 80024d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024d6:	2b80      	cmp	r3, #128	; 0x80
 80024d8:	d10e      	bne.n	80024f8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	68db      	ldr	r3, [r3, #12]
 80024e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024e4:	2b80      	cmp	r3, #128	; 0x80
 80024e6:	d107      	bne.n	80024f8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80024f0:	611a      	str	r2, [r3, #16]
>>>>>>> AWS
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
<<<<<<< HEAD
 80024da:	6878      	ldr	r0, [r7, #4]
 80024dc:	f000 fcd6 	bl	8002e8c <HAL_TIMEx_BreakCallback>
=======
 80024f2:	6878      	ldr	r0, [r7, #4]
 80024f4:	f000 fcd6 	bl	8002ea4 <HAL_TIMEx_BreakCallback>
>>>>>>> AWS
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
<<<<<<< HEAD
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	691b      	ldr	r3, [r3, #16]
 80024e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024ea:	2b40      	cmp	r3, #64	; 0x40
 80024ec:	d10e      	bne.n	800250c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	68db      	ldr	r3, [r3, #12]
 80024f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024f8:	2b40      	cmp	r3, #64	; 0x40
 80024fa:	d107      	bne.n	800250c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002504:	611a      	str	r2, [r3, #16]
=======
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	691b      	ldr	r3, [r3, #16]
 80024fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002502:	2b40      	cmp	r3, #64	; 0x40
 8002504:	d10e      	bne.n	8002524 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	68db      	ldr	r3, [r3, #12]
 800250c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002510:	2b40      	cmp	r3, #64	; 0x40
 8002512:	d107      	bne.n	8002524 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800251c:	611a      	str	r2, [r3, #16]
>>>>>>> AWS
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
<<<<<<< HEAD
 8002506:	6878      	ldr	r0, [r7, #4]
 8002508:	f000 f9e0 	bl	80028cc <HAL_TIM_TriggerCallback>
=======
 800251e:	6878      	ldr	r0, [r7, #4]
 8002520:	f000 f9e0 	bl	80028e4 <HAL_TIM_TriggerCallback>
>>>>>>> AWS
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
<<<<<<< HEAD
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	691b      	ldr	r3, [r3, #16]
 8002512:	f003 0320 	and.w	r3, r3, #32
 8002516:	2b20      	cmp	r3, #32
 8002518:	d10e      	bne.n	8002538 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	68db      	ldr	r3, [r3, #12]
 8002520:	f003 0320 	and.w	r3, r3, #32
 8002524:	2b20      	cmp	r3, #32
 8002526:	d107      	bne.n	8002538 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f06f 0220 	mvn.w	r2, #32
 8002530:	611a      	str	r2, [r3, #16]
=======
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	691b      	ldr	r3, [r3, #16]
 800252a:	f003 0320 	and.w	r3, r3, #32
 800252e:	2b20      	cmp	r3, #32
 8002530:	d10e      	bne.n	8002550 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	68db      	ldr	r3, [r3, #12]
 8002538:	f003 0320 	and.w	r3, r3, #32
 800253c:	2b20      	cmp	r3, #32
 800253e:	d107      	bne.n	8002550 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f06f 0220 	mvn.w	r2, #32
 8002548:	611a      	str	r2, [r3, #16]
>>>>>>> AWS
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
<<<<<<< HEAD
 8002532:	6878      	ldr	r0, [r7, #4]
 8002534:	f000 fca0 	bl	8002e78 <HAL_TIMEx_CommutCallback>
=======
 800254a:	6878      	ldr	r0, [r7, #4]
 800254c:	f000 fca0 	bl	8002e90 <HAL_TIMEx_CommutCallback>
>>>>>>> AWS
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
<<<<<<< HEAD
 8002538:	bf00      	nop
 800253a:	3708      	adds	r7, #8
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}

08002540 <HAL_TIM_IC_ConfigChannel>:
=======
 8002550:	bf00      	nop
 8002552:	3708      	adds	r7, #8
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}

08002558 <HAL_TIM_IC_ConfigChannel>:
>>>>>>> AWS
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
<<<<<<< HEAD
 8002540:	b580      	push	{r7, lr}
 8002542:	b086      	sub	sp, #24
 8002544:	af00      	add	r7, sp, #0
 8002546:	60f8      	str	r0, [r7, #12]
 8002548:	60b9      	str	r1, [r7, #8]
 800254a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800254c:	2300      	movs	r3, #0
 800254e:	75fb      	strb	r3, [r7, #23]
=======
 8002558:	b580      	push	{r7, lr}
 800255a:	b086      	sub	sp, #24
 800255c:	af00      	add	r7, sp, #0
 800255e:	60f8      	str	r0, [r7, #12]
 8002560:	60b9      	str	r1, [r7, #8]
 8002562:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002564:	2300      	movs	r3, #0
 8002566:	75fb      	strb	r3, [r7, #23]
>>>>>>> AWS
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
<<<<<<< HEAD
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002556:	2b01      	cmp	r3, #1
 8002558:	d101      	bne.n	800255e <HAL_TIM_IC_ConfigChannel+0x1e>
 800255a:	2302      	movs	r3, #2
 800255c:	e088      	b.n	8002670 <HAL_TIM_IC_ConfigChannel+0x130>
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	2201      	movs	r2, #1
 8002562:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d11b      	bne.n	80025a4 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	6818      	ldr	r0, [r3, #0]
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	6819      	ldr	r1, [r3, #0]
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	685a      	ldr	r2, [r3, #4]
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	68db      	ldr	r3, [r3, #12]
 800257c:	f000 fa30 	bl	80029e0 <TIM_TI1_SetConfig>
=======
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800256e:	2b01      	cmp	r3, #1
 8002570:	d101      	bne.n	8002576 <HAL_TIM_IC_ConfigChannel+0x1e>
 8002572:	2302      	movs	r3, #2
 8002574:	e088      	b.n	8002688 <HAL_TIM_IC_ConfigChannel+0x130>
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	2201      	movs	r2, #1
 800257a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d11b      	bne.n	80025bc <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	6818      	ldr	r0, [r3, #0]
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	6819      	ldr	r1, [r3, #0]
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	685a      	ldr	r2, [r3, #4]
 8002590:	68bb      	ldr	r3, [r7, #8]
 8002592:	68db      	ldr	r3, [r3, #12]
 8002594:	f000 fa30 	bl	80029f8 <TIM_TI1_SetConfig>
>>>>>>> AWS
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
<<<<<<< HEAD
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	699a      	ldr	r2, [r3, #24]
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f022 020c 	bic.w	r2, r2, #12
 800258e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	6999      	ldr	r1, [r3, #24]
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	689a      	ldr	r2, [r3, #8]
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	430a      	orrs	r2, r1
 80025a0:	619a      	str	r2, [r3, #24]
 80025a2:	e060      	b.n	8002666 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2b04      	cmp	r3, #4
 80025a8:	d11c      	bne.n	80025e4 <HAL_TIM_IC_ConfigChannel+0xa4>
=======
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	699a      	ldr	r2, [r3, #24]
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f022 020c 	bic.w	r2, r2, #12
 80025a6:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	6999      	ldr	r1, [r3, #24]
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	689a      	ldr	r2, [r3, #8]
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	430a      	orrs	r2, r1
 80025b8:	619a      	str	r2, [r3, #24]
 80025ba:	e060      	b.n	800267e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2b04      	cmp	r3, #4
 80025c0:	d11c      	bne.n	80025fc <HAL_TIM_IC_ConfigChannel+0xa4>
>>>>>>> AWS
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
<<<<<<< HEAD
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	6818      	ldr	r0, [r3, #0]
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	6819      	ldr	r1, [r3, #0]
 80025b2:	68bb      	ldr	r3, [r7, #8]
 80025b4:	685a      	ldr	r2, [r3, #4]
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	68db      	ldr	r3, [r3, #12]
 80025ba:	f000 faa8 	bl	8002b0e <TIM_TI2_SetConfig>
=======
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	6818      	ldr	r0, [r3, #0]
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	6819      	ldr	r1, [r3, #0]
 80025ca:	68bb      	ldr	r3, [r7, #8]
 80025cc:	685a      	ldr	r2, [r3, #4]
 80025ce:	68bb      	ldr	r3, [r7, #8]
 80025d0:	68db      	ldr	r3, [r3, #12]
 80025d2:	f000 faa8 	bl	8002b26 <TIM_TI2_SetConfig>
>>>>>>> AWS
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
<<<<<<< HEAD
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	699a      	ldr	r2, [r3, #24]
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80025cc:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	6999      	ldr	r1, [r3, #24]
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	021a      	lsls	r2, r3, #8
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	430a      	orrs	r2, r1
 80025e0:	619a      	str	r2, [r3, #24]
 80025e2:	e040      	b.n	8002666 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2b08      	cmp	r3, #8
 80025e8:	d11b      	bne.n	8002622 <HAL_TIM_IC_ConfigChannel+0xe2>
=======
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	699a      	ldr	r2, [r3, #24]
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80025e4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	6999      	ldr	r1, [r3, #24]
 80025ec:	68bb      	ldr	r3, [r7, #8]
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	021a      	lsls	r2, r3, #8
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	430a      	orrs	r2, r1
 80025f8:	619a      	str	r2, [r3, #24]
 80025fa:	e040      	b.n	800267e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2b08      	cmp	r3, #8
 8002600:	d11b      	bne.n	800263a <HAL_TIM_IC_ConfigChannel+0xe2>
>>>>>>> AWS
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
<<<<<<< HEAD
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	6818      	ldr	r0, [r3, #0]
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	6819      	ldr	r1, [r3, #0]
 80025f2:	68bb      	ldr	r3, [r7, #8]
 80025f4:	685a      	ldr	r2, [r3, #4]
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	68db      	ldr	r3, [r3, #12]
 80025fa:	f000 faf5 	bl	8002be8 <TIM_TI3_SetConfig>
=======
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	6818      	ldr	r0, [r3, #0]
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	6819      	ldr	r1, [r3, #0]
 800260a:	68bb      	ldr	r3, [r7, #8]
 800260c:	685a      	ldr	r2, [r3, #4]
 800260e:	68bb      	ldr	r3, [r7, #8]
 8002610:	68db      	ldr	r3, [r3, #12]
 8002612:	f000 faf5 	bl	8002c00 <TIM_TI3_SetConfig>
>>>>>>> AWS
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
<<<<<<< HEAD
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	69da      	ldr	r2, [r3, #28]
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f022 020c 	bic.w	r2, r2, #12
 800260c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	69d9      	ldr	r1, [r3, #28]
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	689a      	ldr	r2, [r3, #8]
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	430a      	orrs	r2, r1
 800261e:	61da      	str	r2, [r3, #28]
 8002620:	e021      	b.n	8002666 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2b0c      	cmp	r3, #12
 8002626:	d11c      	bne.n	8002662 <HAL_TIM_IC_ConfigChannel+0x122>
=======
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	69da      	ldr	r2, [r3, #28]
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f022 020c 	bic.w	r2, r2, #12
 8002624:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	69d9      	ldr	r1, [r3, #28]
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	689a      	ldr	r2, [r3, #8]
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	430a      	orrs	r2, r1
 8002636:	61da      	str	r2, [r3, #28]
 8002638:	e021      	b.n	800267e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2b0c      	cmp	r3, #12
 800263e:	d11c      	bne.n	800267a <HAL_TIM_IC_ConfigChannel+0x122>
>>>>>>> AWS
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
<<<<<<< HEAD
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	6818      	ldr	r0, [r3, #0]
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	6819      	ldr	r1, [r3, #0]
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	685a      	ldr	r2, [r3, #4]
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	68db      	ldr	r3, [r3, #12]
 8002638:	f000 fb12 	bl	8002c60 <TIM_TI4_SetConfig>
=======
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	6818      	ldr	r0, [r3, #0]
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	6819      	ldr	r1, [r3, #0]
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	685a      	ldr	r2, [r3, #4]
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	68db      	ldr	r3, [r3, #12]
 8002650:	f000 fb12 	bl	8002c78 <TIM_TI4_SetConfig>
>>>>>>> AWS
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
<<<<<<< HEAD
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	69da      	ldr	r2, [r3, #28]
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800264a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	69d9      	ldr	r1, [r3, #28]
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	689b      	ldr	r3, [r3, #8]
 8002656:	021a      	lsls	r2, r3, #8
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	430a      	orrs	r2, r1
 800265e:	61da      	str	r2, [r3, #28]
 8002660:	e001      	b.n	8002666 <HAL_TIM_IC_ConfigChannel+0x126>
=======
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	69da      	ldr	r2, [r3, #28]
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002662:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	69d9      	ldr	r1, [r3, #28]
 800266a:	68bb      	ldr	r3, [r7, #8]
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	021a      	lsls	r2, r3, #8
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	430a      	orrs	r2, r1
 8002676:	61da      	str	r2, [r3, #28]
 8002678:	e001      	b.n	800267e <HAL_TIM_IC_ConfigChannel+0x126>
>>>>>>> AWS
  }
  else
  {
    status = HAL_ERROR;
<<<<<<< HEAD
 8002662:	2301      	movs	r3, #1
 8002664:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	2200      	movs	r2, #0
 800266a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800266e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002670:	4618      	mov	r0, r3
 8002672:	3718      	adds	r7, #24
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}

08002678 <HAL_TIM_ConfigClockSource>:
=======
 800267a:	2301      	movs	r3, #1
 800267c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	2200      	movs	r2, #0
 8002682:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002686:	7dfb      	ldrb	r3, [r7, #23]
}
 8002688:	4618      	mov	r0, r3
 800268a:	3718      	adds	r7, #24
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}

08002690 <HAL_TIM_ConfigClockSource>:
>>>>>>> AWS
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
<<<<<<< HEAD
 8002678:	b580      	push	{r7, lr}
 800267a:	b084      	sub	sp, #16
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
 8002680:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002682:	2300      	movs	r3, #0
 8002684:	73fb      	strb	r3, [r7, #15]
=======
 8002690:	b580      	push	{r7, lr}
 8002692:	b084      	sub	sp, #16
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
 8002698:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800269a:	2300      	movs	r3, #0
 800269c:	73fb      	strb	r3, [r7, #15]
>>>>>>> AWS
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
<<<<<<< HEAD
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800268c:	2b01      	cmp	r3, #1
 800268e:	d101      	bne.n	8002694 <HAL_TIM_ConfigClockSource+0x1c>
 8002690:	2302      	movs	r3, #2
 8002692:	e0b4      	b.n	80027fe <HAL_TIM_ConfigClockSource+0x186>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2201      	movs	r2, #1
 8002698:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2202      	movs	r2, #2
 80026a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
=======
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026a4:	2b01      	cmp	r3, #1
 80026a6:	d101      	bne.n	80026ac <HAL_TIM_ConfigClockSource+0x1c>
 80026a8:	2302      	movs	r3, #2
 80026aa:	e0b4      	b.n	8002816 <HAL_TIM_ConfigClockSource+0x186>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2201      	movs	r2, #1
 80026b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2202      	movs	r2, #2
 80026b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
>>>>>>> AWS

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
<<<<<<< HEAD
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80026b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80026ba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	68ba      	ldr	r2, [r7, #8]
 80026c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026cc:	d03e      	beq.n	800274c <HAL_TIM_ConfigClockSource+0xd4>
 80026ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026d2:	f200 8087 	bhi.w	80027e4 <HAL_TIM_ConfigClockSource+0x16c>
 80026d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026da:	f000 8086 	beq.w	80027ea <HAL_TIM_ConfigClockSource+0x172>
 80026de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026e2:	d87f      	bhi.n	80027e4 <HAL_TIM_ConfigClockSource+0x16c>
 80026e4:	2b70      	cmp	r3, #112	; 0x70
 80026e6:	d01a      	beq.n	800271e <HAL_TIM_ConfigClockSource+0xa6>
 80026e8:	2b70      	cmp	r3, #112	; 0x70
 80026ea:	d87b      	bhi.n	80027e4 <HAL_TIM_ConfigClockSource+0x16c>
 80026ec:	2b60      	cmp	r3, #96	; 0x60
 80026ee:	d050      	beq.n	8002792 <HAL_TIM_ConfigClockSource+0x11a>
 80026f0:	2b60      	cmp	r3, #96	; 0x60
 80026f2:	d877      	bhi.n	80027e4 <HAL_TIM_ConfigClockSource+0x16c>
 80026f4:	2b50      	cmp	r3, #80	; 0x50
 80026f6:	d03c      	beq.n	8002772 <HAL_TIM_ConfigClockSource+0xfa>
 80026f8:	2b50      	cmp	r3, #80	; 0x50
 80026fa:	d873      	bhi.n	80027e4 <HAL_TIM_ConfigClockSource+0x16c>
 80026fc:	2b40      	cmp	r3, #64	; 0x40
 80026fe:	d058      	beq.n	80027b2 <HAL_TIM_ConfigClockSource+0x13a>
 8002700:	2b40      	cmp	r3, #64	; 0x40
 8002702:	d86f      	bhi.n	80027e4 <HAL_TIM_ConfigClockSource+0x16c>
 8002704:	2b30      	cmp	r3, #48	; 0x30
 8002706:	d064      	beq.n	80027d2 <HAL_TIM_ConfigClockSource+0x15a>
 8002708:	2b30      	cmp	r3, #48	; 0x30
 800270a:	d86b      	bhi.n	80027e4 <HAL_TIM_ConfigClockSource+0x16c>
 800270c:	2b20      	cmp	r3, #32
 800270e:	d060      	beq.n	80027d2 <HAL_TIM_ConfigClockSource+0x15a>
 8002710:	2b20      	cmp	r3, #32
 8002712:	d867      	bhi.n	80027e4 <HAL_TIM_ConfigClockSource+0x16c>
 8002714:	2b00      	cmp	r3, #0
 8002716:	d05c      	beq.n	80027d2 <HAL_TIM_ConfigClockSource+0x15a>
 8002718:	2b10      	cmp	r3, #16
 800271a:	d05a      	beq.n	80027d2 <HAL_TIM_ConfigClockSource+0x15a>
 800271c:	e062      	b.n	80027e4 <HAL_TIM_ConfigClockSource+0x16c>
=======
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80026ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80026cc:	68bb      	ldr	r3, [r7, #8]
 80026ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80026d2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	68ba      	ldr	r2, [r7, #8]
 80026da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026e4:	d03e      	beq.n	8002764 <HAL_TIM_ConfigClockSource+0xd4>
 80026e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026ea:	f200 8087 	bhi.w	80027fc <HAL_TIM_ConfigClockSource+0x16c>
 80026ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026f2:	f000 8086 	beq.w	8002802 <HAL_TIM_ConfigClockSource+0x172>
 80026f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026fa:	d87f      	bhi.n	80027fc <HAL_TIM_ConfigClockSource+0x16c>
 80026fc:	2b70      	cmp	r3, #112	; 0x70
 80026fe:	d01a      	beq.n	8002736 <HAL_TIM_ConfigClockSource+0xa6>
 8002700:	2b70      	cmp	r3, #112	; 0x70
 8002702:	d87b      	bhi.n	80027fc <HAL_TIM_ConfigClockSource+0x16c>
 8002704:	2b60      	cmp	r3, #96	; 0x60
 8002706:	d050      	beq.n	80027aa <HAL_TIM_ConfigClockSource+0x11a>
 8002708:	2b60      	cmp	r3, #96	; 0x60
 800270a:	d877      	bhi.n	80027fc <HAL_TIM_ConfigClockSource+0x16c>
 800270c:	2b50      	cmp	r3, #80	; 0x50
 800270e:	d03c      	beq.n	800278a <HAL_TIM_ConfigClockSource+0xfa>
 8002710:	2b50      	cmp	r3, #80	; 0x50
 8002712:	d873      	bhi.n	80027fc <HAL_TIM_ConfigClockSource+0x16c>
 8002714:	2b40      	cmp	r3, #64	; 0x40
 8002716:	d058      	beq.n	80027ca <HAL_TIM_ConfigClockSource+0x13a>
 8002718:	2b40      	cmp	r3, #64	; 0x40
 800271a:	d86f      	bhi.n	80027fc <HAL_TIM_ConfigClockSource+0x16c>
 800271c:	2b30      	cmp	r3, #48	; 0x30
 800271e:	d064      	beq.n	80027ea <HAL_TIM_ConfigClockSource+0x15a>
 8002720:	2b30      	cmp	r3, #48	; 0x30
 8002722:	d86b      	bhi.n	80027fc <HAL_TIM_ConfigClockSource+0x16c>
 8002724:	2b20      	cmp	r3, #32
 8002726:	d060      	beq.n	80027ea <HAL_TIM_ConfigClockSource+0x15a>
 8002728:	2b20      	cmp	r3, #32
 800272a:	d867      	bhi.n	80027fc <HAL_TIM_ConfigClockSource+0x16c>
 800272c:	2b00      	cmp	r3, #0
 800272e:	d05c      	beq.n	80027ea <HAL_TIM_ConfigClockSource+0x15a>
 8002730:	2b10      	cmp	r3, #16
 8002732:	d05a      	beq.n	80027ea <HAL_TIM_ConfigClockSource+0x15a>
 8002734:	e062      	b.n	80027fc <HAL_TIM_ConfigClockSource+0x16c>
>>>>>>> AWS
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
<<<<<<< HEAD
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6818      	ldr	r0, [r3, #0]
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	6899      	ldr	r1, [r3, #8]
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	685a      	ldr	r2, [r3, #4]
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	68db      	ldr	r3, [r3, #12]
 800272e:	f000 faef 	bl	8002d10 <TIM_ETR_SetConfig>
=======
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6818      	ldr	r0, [r3, #0]
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	6899      	ldr	r1, [r3, #8]
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	685a      	ldr	r2, [r3, #4]
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	68db      	ldr	r3, [r3, #12]
 8002746:	f000 faef 	bl	8002d28 <TIM_ETR_SetConfig>
>>>>>>> AWS
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
<<<<<<< HEAD
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002740:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	68ba      	ldr	r2, [r7, #8]
 8002748:	609a      	str	r2, [r3, #8]
      break;
 800274a:	e04f      	b.n	80027ec <HAL_TIM_ConfigClockSource+0x174>
=======
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002752:	68bb      	ldr	r3, [r7, #8]
 8002754:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002758:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	68ba      	ldr	r2, [r7, #8]
 8002760:	609a      	str	r2, [r3, #8]
      break;
 8002762:	e04f      	b.n	8002804 <HAL_TIM_ConfigClockSource+0x174>
>>>>>>> AWS
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
<<<<<<< HEAD
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6818      	ldr	r0, [r3, #0]
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	6899      	ldr	r1, [r3, #8]
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	685a      	ldr	r2, [r3, #4]
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	68db      	ldr	r3, [r3, #12]
 800275c:	f000 fad8 	bl	8002d10 <TIM_ETR_SetConfig>
=======
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6818      	ldr	r0, [r3, #0]
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	6899      	ldr	r1, [r3, #8]
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	685a      	ldr	r2, [r3, #4]
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	68db      	ldr	r3, [r3, #12]
 8002774:	f000 fad8 	bl	8002d28 <TIM_ETR_SetConfig>
>>>>>>> AWS
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
<<<<<<< HEAD
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	689a      	ldr	r2, [r3, #8]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800276e:	609a      	str	r2, [r3, #8]
      break;
 8002770:	e03c      	b.n	80027ec <HAL_TIM_ConfigClockSource+0x174>
=======
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	689a      	ldr	r2, [r3, #8]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002786:	609a      	str	r2, [r3, #8]
      break;
 8002788:	e03c      	b.n	8002804 <HAL_TIM_ConfigClockSource+0x174>
>>>>>>> AWS

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
<<<<<<< HEAD
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6818      	ldr	r0, [r3, #0]
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	6859      	ldr	r1, [r3, #4]
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	68db      	ldr	r3, [r3, #12]
 800277e:	461a      	mov	r2, r3
 8002780:	f000 f996 	bl	8002ab0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	2150      	movs	r1, #80	; 0x50
 800278a:	4618      	mov	r0, r3
 800278c:	f000 faa5 	bl	8002cda <TIM_ITRx_SetConfig>
      break;
 8002790:	e02c      	b.n	80027ec <HAL_TIM_ConfigClockSource+0x174>
=======
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6818      	ldr	r0, [r3, #0]
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	6859      	ldr	r1, [r3, #4]
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	68db      	ldr	r3, [r3, #12]
 8002796:	461a      	mov	r2, r3
 8002798:	f000 f996 	bl	8002ac8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	2150      	movs	r1, #80	; 0x50
 80027a2:	4618      	mov	r0, r3
 80027a4:	f000 faa5 	bl	8002cf2 <TIM_ITRx_SetConfig>
      break;
 80027a8:	e02c      	b.n	8002804 <HAL_TIM_ConfigClockSource+0x174>
>>>>>>> AWS

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
<<<<<<< HEAD
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6818      	ldr	r0, [r3, #0]
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	6859      	ldr	r1, [r3, #4]
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	68db      	ldr	r3, [r3, #12]
 800279e:	461a      	mov	r2, r3
 80027a0:	f000 f9f2 	bl	8002b88 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	2160      	movs	r1, #96	; 0x60
 80027aa:	4618      	mov	r0, r3
 80027ac:	f000 fa95 	bl	8002cda <TIM_ITRx_SetConfig>
      break;
 80027b0:	e01c      	b.n	80027ec <HAL_TIM_ConfigClockSource+0x174>
=======
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6818      	ldr	r0, [r3, #0]
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	6859      	ldr	r1, [r3, #4]
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	68db      	ldr	r3, [r3, #12]
 80027b6:	461a      	mov	r2, r3
 80027b8:	f000 f9f2 	bl	8002ba0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	2160      	movs	r1, #96	; 0x60
 80027c2:	4618      	mov	r0, r3
 80027c4:	f000 fa95 	bl	8002cf2 <TIM_ITRx_SetConfig>
      break;
 80027c8:	e01c      	b.n	8002804 <HAL_TIM_ConfigClockSource+0x174>
>>>>>>> AWS

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
<<<<<<< HEAD
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6818      	ldr	r0, [r3, #0]
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	6859      	ldr	r1, [r3, #4]
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	68db      	ldr	r3, [r3, #12]
 80027be:	461a      	mov	r2, r3
 80027c0:	f000 f976 	bl	8002ab0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	2140      	movs	r1, #64	; 0x40
 80027ca:	4618      	mov	r0, r3
 80027cc:	f000 fa85 	bl	8002cda <TIM_ITRx_SetConfig>
      break;
 80027d0:	e00c      	b.n	80027ec <HAL_TIM_ConfigClockSource+0x174>
=======
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6818      	ldr	r0, [r3, #0]
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	6859      	ldr	r1, [r3, #4]
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	68db      	ldr	r3, [r3, #12]
 80027d6:	461a      	mov	r2, r3
 80027d8:	f000 f976 	bl	8002ac8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	2140      	movs	r1, #64	; 0x40
 80027e2:	4618      	mov	r0, r3
 80027e4:	f000 fa85 	bl	8002cf2 <TIM_ITRx_SetConfig>
      break;
 80027e8:	e00c      	b.n	8002804 <HAL_TIM_ConfigClockSource+0x174>
>>>>>>> AWS
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
<<<<<<< HEAD
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4619      	mov	r1, r3
 80027dc:	4610      	mov	r0, r2
 80027de:	f000 fa7c 	bl	8002cda <TIM_ITRx_SetConfig>
      break;
 80027e2:	e003      	b.n	80027ec <HAL_TIM_ConfigClockSource+0x174>
=======
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681a      	ldr	r2, [r3, #0]
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4619      	mov	r1, r3
 80027f4:	4610      	mov	r0, r2
 80027f6:	f000 fa7c 	bl	8002cf2 <TIM_ITRx_SetConfig>
      break;
 80027fa:	e003      	b.n	8002804 <HAL_TIM_ConfigClockSource+0x174>
>>>>>>> AWS
    }

    default:
      status = HAL_ERROR;
<<<<<<< HEAD
 80027e4:	2301      	movs	r3, #1
 80027e6:	73fb      	strb	r3, [r7, #15]
      break;
 80027e8:	e000      	b.n	80027ec <HAL_TIM_ConfigClockSource+0x174>
      break;
 80027ea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2201      	movs	r2, #1
 80027f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2200      	movs	r2, #0
 80027f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80027fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80027fe:	4618      	mov	r0, r3
 8002800:	3710      	adds	r7, #16
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}
	...

08002808 <HAL_TIM_ReadCapturedValue>:
=======
 80027fc:	2301      	movs	r3, #1
 80027fe:	73fb      	strb	r3, [r7, #15]
      break;
 8002800:	e000      	b.n	8002804 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002802:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2201      	movs	r2, #1
 8002808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2200      	movs	r2, #0
 8002810:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002814:	7bfb      	ldrb	r3, [r7, #15]
}
 8002816:	4618      	mov	r0, r3
 8002818:	3710      	adds	r7, #16
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}
	...

08002820 <HAL_TIM_ReadCapturedValue>:
>>>>>>> AWS
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
<<<<<<< HEAD
 8002808:	b480      	push	{r7}
 800280a:	b085      	sub	sp, #20
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
 8002810:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8002812:	2300      	movs	r3, #0
 8002814:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	2b0c      	cmp	r3, #12
 800281a:	d831      	bhi.n	8002880 <HAL_TIM_ReadCapturedValue+0x78>
 800281c:	a201      	add	r2, pc, #4	; (adr r2, 8002824 <HAL_TIM_ReadCapturedValue+0x1c>)
 800281e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002822:	bf00      	nop
 8002824:	08002859 	.word	0x08002859
 8002828:	08002881 	.word	0x08002881
 800282c:	08002881 	.word	0x08002881
 8002830:	08002881 	.word	0x08002881
 8002834:	08002863 	.word	0x08002863
 8002838:	08002881 	.word	0x08002881
 800283c:	08002881 	.word	0x08002881
 8002840:	08002881 	.word	0x08002881
 8002844:	0800286d 	.word	0x0800286d
 8002848:	08002881 	.word	0x08002881
 800284c:	08002881 	.word	0x08002881
 8002850:	08002881 	.word	0x08002881
 8002854:	08002877 	.word	0x08002877
=======
 8002820:	b480      	push	{r7}
 8002822:	b085      	sub	sp, #20
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
 8002828:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800282a:	2300      	movs	r3, #0
 800282c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	2b0c      	cmp	r3, #12
 8002832:	d831      	bhi.n	8002898 <HAL_TIM_ReadCapturedValue+0x78>
 8002834:	a201      	add	r2, pc, #4	; (adr r2, 800283c <HAL_TIM_ReadCapturedValue+0x1c>)
 8002836:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800283a:	bf00      	nop
 800283c:	08002871 	.word	0x08002871
 8002840:	08002899 	.word	0x08002899
 8002844:	08002899 	.word	0x08002899
 8002848:	08002899 	.word	0x08002899
 800284c:	0800287b 	.word	0x0800287b
 8002850:	08002899 	.word	0x08002899
 8002854:	08002899 	.word	0x08002899
 8002858:	08002899 	.word	0x08002899
 800285c:	08002885 	.word	0x08002885
 8002860:	08002899 	.word	0x08002899
 8002864:	08002899 	.word	0x08002899
 8002868:	08002899 	.word	0x08002899
 800286c:	0800288f 	.word	0x0800288f
>>>>>>> AWS
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
<<<<<<< HEAD
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800285e:	60fb      	str	r3, [r7, #12]

      break;
 8002860:	e00f      	b.n	8002882 <HAL_TIM_ReadCapturedValue+0x7a>
=======
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002876:	60fb      	str	r3, [r7, #12]

      break;
 8002878:	e00f      	b.n	800289a <HAL_TIM_ReadCapturedValue+0x7a>
>>>>>>> AWS
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
<<<<<<< HEAD
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002868:	60fb      	str	r3, [r7, #12]

      break;
 800286a:	e00a      	b.n	8002882 <HAL_TIM_ReadCapturedValue+0x7a>
=======
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002880:	60fb      	str	r3, [r7, #12]

      break;
 8002882:	e00a      	b.n	800289a <HAL_TIM_ReadCapturedValue+0x7a>
>>>>>>> AWS
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
<<<<<<< HEAD
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002872:	60fb      	str	r3, [r7, #12]

      break;
 8002874:	e005      	b.n	8002882 <HAL_TIM_ReadCapturedValue+0x7a>
=======
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800288a:	60fb      	str	r3, [r7, #12]

      break;
 800288c:	e005      	b.n	800289a <HAL_TIM_ReadCapturedValue+0x7a>
>>>>>>> AWS
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
<<<<<<< HEAD
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800287c:	60fb      	str	r3, [r7, #12]

      break;
 800287e:	e000      	b.n	8002882 <HAL_TIM_ReadCapturedValue+0x7a>
=======
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002894:	60fb      	str	r3, [r7, #12]

      break;
 8002896:	e000      	b.n	800289a <HAL_TIM_ReadCapturedValue+0x7a>
>>>>>>> AWS
    }

    default:
      break;
<<<<<<< HEAD
 8002880:	bf00      	nop
  }

  return tmpreg;
 8002882:	68fb      	ldr	r3, [r7, #12]
}
 8002884:	4618      	mov	r0, r3
 8002886:	3714      	adds	r7, #20
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr

08002890 <HAL_TIM_PeriodElapsedCallback>:
=======
 8002898:	bf00      	nop
  }

  return tmpreg;
 800289a:	68fb      	ldr	r3, [r7, #12]
}
 800289c:	4618      	mov	r0, r3
 800289e:	3714      	adds	r7, #20
 80028a0:	46bd      	mov	sp, r7
 80028a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a6:	4770      	bx	lr

080028a8 <HAL_TIM_PeriodElapsedCallback>:
>>>>>>> AWS
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8002890:	b480      	push	{r7}
 8002892:	b083      	sub	sp, #12
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
=======
 80028a8:	b480      	push	{r7}
 80028aa:	b083      	sub	sp, #12
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
>>>>>>> AWS
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8002898:	bf00      	nop
 800289a:	370c      	adds	r7, #12
 800289c:	46bd      	mov	sp, r7
 800289e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a2:	4770      	bx	lr

080028a4 <HAL_TIM_OC_DelayElapsedCallback>:
=======
 80028b0:	bf00      	nop
 80028b2:	370c      	adds	r7, #12
 80028b4:	46bd      	mov	sp, r7
 80028b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ba:	4770      	bx	lr

080028bc <HAL_TIM_OC_DelayElapsedCallback>:
>>>>>>> AWS
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 80028a4:	b480      	push	{r7}
 80028a6:	b083      	sub	sp, #12
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
=======
 80028bc:	b480      	push	{r7}
 80028be:	b083      	sub	sp, #12
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
>>>>>>> AWS
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 80028ac:	bf00      	nop
 80028ae:	370c      	adds	r7, #12
 80028b0:	46bd      	mov	sp, r7
 80028b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b6:	4770      	bx	lr

080028b8 <HAL_TIM_PWM_PulseFinishedCallback>:
=======
 80028c4:	bf00      	nop
 80028c6:	370c      	adds	r7, #12
 80028c8:	46bd      	mov	sp, r7
 80028ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ce:	4770      	bx	lr

080028d0 <HAL_TIM_PWM_PulseFinishedCallback>:
>>>>>>> AWS
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 80028b8:	b480      	push	{r7}
 80028ba:	b083      	sub	sp, #12
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
=======
 80028d0:	b480      	push	{r7}
 80028d2:	b083      	sub	sp, #12
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
>>>>>>> AWS
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 80028c0:	bf00      	nop
 80028c2:	370c      	adds	r7, #12
 80028c4:	46bd      	mov	sp, r7
 80028c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ca:	4770      	bx	lr

080028cc <HAL_TIM_TriggerCallback>:
=======
 80028d8:	bf00      	nop
 80028da:	370c      	adds	r7, #12
 80028dc:	46bd      	mov	sp, r7
 80028de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e2:	4770      	bx	lr

080028e4 <HAL_TIM_TriggerCallback>:
>>>>>>> AWS
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 80028cc:	b480      	push	{r7}
 80028ce:	b083      	sub	sp, #12
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
=======
 80028e4:	b480      	push	{r7}
 80028e6:	b083      	sub	sp, #12
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
>>>>>>> AWS
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 80028d4:	bf00      	nop
 80028d6:	370c      	adds	r7, #12
 80028d8:	46bd      	mov	sp, r7
 80028da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028de:	4770      	bx	lr

080028e0 <TIM_Base_SetConfig>:
=======
 80028ec:	bf00      	nop
 80028ee:	370c      	adds	r7, #12
 80028f0:	46bd      	mov	sp, r7
 80028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f6:	4770      	bx	lr

080028f8 <TIM_Base_SetConfig>:
>>>>>>> AWS
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
<<<<<<< HEAD
 80028e0:	b480      	push	{r7}
 80028e2:	b085      	sub	sp, #20
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
 80028e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	4a34      	ldr	r2, [pc, #208]	; (80029c4 <TIM_Base_SetConfig+0xe4>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d00f      	beq.n	8002918 <TIM_Base_SetConfig+0x38>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028fe:	d00b      	beq.n	8002918 <TIM_Base_SetConfig+0x38>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	4a31      	ldr	r2, [pc, #196]	; (80029c8 <TIM_Base_SetConfig+0xe8>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d007      	beq.n	8002918 <TIM_Base_SetConfig+0x38>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	4a30      	ldr	r2, [pc, #192]	; (80029cc <TIM_Base_SetConfig+0xec>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d003      	beq.n	8002918 <TIM_Base_SetConfig+0x38>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	4a2f      	ldr	r2, [pc, #188]	; (80029d0 <TIM_Base_SetConfig+0xf0>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d108      	bne.n	800292a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800291e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	68fa      	ldr	r2, [r7, #12]
 8002926:	4313      	orrs	r3, r2
 8002928:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	4a25      	ldr	r2, [pc, #148]	; (80029c4 <TIM_Base_SetConfig+0xe4>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d01b      	beq.n	800296a <TIM_Base_SetConfig+0x8a>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002938:	d017      	beq.n	800296a <TIM_Base_SetConfig+0x8a>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	4a22      	ldr	r2, [pc, #136]	; (80029c8 <TIM_Base_SetConfig+0xe8>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d013      	beq.n	800296a <TIM_Base_SetConfig+0x8a>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	4a21      	ldr	r2, [pc, #132]	; (80029cc <TIM_Base_SetConfig+0xec>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d00f      	beq.n	800296a <TIM_Base_SetConfig+0x8a>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	4a20      	ldr	r2, [pc, #128]	; (80029d0 <TIM_Base_SetConfig+0xf0>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d00b      	beq.n	800296a <TIM_Base_SetConfig+0x8a>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	4a1f      	ldr	r2, [pc, #124]	; (80029d4 <TIM_Base_SetConfig+0xf4>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d007      	beq.n	800296a <TIM_Base_SetConfig+0x8a>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	4a1e      	ldr	r2, [pc, #120]	; (80029d8 <TIM_Base_SetConfig+0xf8>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d003      	beq.n	800296a <TIM_Base_SetConfig+0x8a>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	4a1d      	ldr	r2, [pc, #116]	; (80029dc <TIM_Base_SetConfig+0xfc>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d108      	bne.n	800297c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002970:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	68db      	ldr	r3, [r3, #12]
 8002976:	68fa      	ldr	r2, [r7, #12]
 8002978:	4313      	orrs	r3, r2
 800297a:	60fb      	str	r3, [r7, #12]
=======
 80028f8:	b480      	push	{r7}
 80028fa:	b085      	sub	sp, #20
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
 8002900:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	4a34      	ldr	r2, [pc, #208]	; (80029dc <TIM_Base_SetConfig+0xe4>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d00f      	beq.n	8002930 <TIM_Base_SetConfig+0x38>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002916:	d00b      	beq.n	8002930 <TIM_Base_SetConfig+0x38>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	4a31      	ldr	r2, [pc, #196]	; (80029e0 <TIM_Base_SetConfig+0xe8>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d007      	beq.n	8002930 <TIM_Base_SetConfig+0x38>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	4a30      	ldr	r2, [pc, #192]	; (80029e4 <TIM_Base_SetConfig+0xec>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d003      	beq.n	8002930 <TIM_Base_SetConfig+0x38>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	4a2f      	ldr	r2, [pc, #188]	; (80029e8 <TIM_Base_SetConfig+0xf0>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d108      	bne.n	8002942 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002936:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	68fa      	ldr	r2, [r7, #12]
 800293e:	4313      	orrs	r3, r2
 8002940:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	4a25      	ldr	r2, [pc, #148]	; (80029dc <TIM_Base_SetConfig+0xe4>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d01b      	beq.n	8002982 <TIM_Base_SetConfig+0x8a>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002950:	d017      	beq.n	8002982 <TIM_Base_SetConfig+0x8a>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	4a22      	ldr	r2, [pc, #136]	; (80029e0 <TIM_Base_SetConfig+0xe8>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d013      	beq.n	8002982 <TIM_Base_SetConfig+0x8a>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	4a21      	ldr	r2, [pc, #132]	; (80029e4 <TIM_Base_SetConfig+0xec>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d00f      	beq.n	8002982 <TIM_Base_SetConfig+0x8a>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	4a20      	ldr	r2, [pc, #128]	; (80029e8 <TIM_Base_SetConfig+0xf0>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d00b      	beq.n	8002982 <TIM_Base_SetConfig+0x8a>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	4a1f      	ldr	r2, [pc, #124]	; (80029ec <TIM_Base_SetConfig+0xf4>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d007      	beq.n	8002982 <TIM_Base_SetConfig+0x8a>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	4a1e      	ldr	r2, [pc, #120]	; (80029f0 <TIM_Base_SetConfig+0xf8>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d003      	beq.n	8002982 <TIM_Base_SetConfig+0x8a>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	4a1d      	ldr	r2, [pc, #116]	; (80029f4 <TIM_Base_SetConfig+0xfc>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d108      	bne.n	8002994 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002988:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	68db      	ldr	r3, [r3, #12]
 800298e:	68fa      	ldr	r2, [r7, #12]
 8002990:	4313      	orrs	r3, r2
 8002992:	60fb      	str	r3, [r7, #12]
>>>>>>> AWS
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
<<<<<<< HEAD
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	695b      	ldr	r3, [r3, #20]
 8002986:	4313      	orrs	r3, r2
 8002988:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	68fa      	ldr	r2, [r7, #12]
 800298e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	689a      	ldr	r2, [r3, #8]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	681a      	ldr	r2, [r3, #0]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	4a08      	ldr	r2, [pc, #32]	; (80029c4 <TIM_Base_SetConfig+0xe4>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d103      	bne.n	80029b0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	691a      	ldr	r2, [r3, #16]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	631a      	str	r2, [r3, #48]	; 0x30
=======
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	695b      	ldr	r3, [r3, #20]
 800299e:	4313      	orrs	r3, r2
 80029a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	68fa      	ldr	r2, [r7, #12]
 80029a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	689a      	ldr	r2, [r3, #8]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	4a08      	ldr	r2, [pc, #32]	; (80029dc <TIM_Base_SetConfig+0xe4>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d103      	bne.n	80029c8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	691a      	ldr	r2, [r3, #16]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	631a      	str	r2, [r3, #48]	; 0x30
>>>>>>> AWS
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
<<<<<<< HEAD
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2201      	movs	r2, #1
 80029b4:	615a      	str	r2, [r3, #20]
}
 80029b6:	bf00      	nop
 80029b8:	3714      	adds	r7, #20
 80029ba:	46bd      	mov	sp, r7
 80029bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c0:	4770      	bx	lr
 80029c2:	bf00      	nop
 80029c4:	40010000 	.word	0x40010000
 80029c8:	40000400 	.word	0x40000400
 80029cc:	40000800 	.word	0x40000800
 80029d0:	40000c00 	.word	0x40000c00
 80029d4:	40014000 	.word	0x40014000
 80029d8:	40014400 	.word	0x40014400
 80029dc:	40014800 	.word	0x40014800

080029e0 <TIM_TI1_SetConfig>:
=======
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2201      	movs	r2, #1
 80029cc:	615a      	str	r2, [r3, #20]
}
 80029ce:	bf00      	nop
 80029d0:	3714      	adds	r7, #20
 80029d2:	46bd      	mov	sp, r7
 80029d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d8:	4770      	bx	lr
 80029da:	bf00      	nop
 80029dc:	40010000 	.word	0x40010000
 80029e0:	40000400 	.word	0x40000400
 80029e4:	40000800 	.word	0x40000800
 80029e8:	40000c00 	.word	0x40000c00
 80029ec:	40014000 	.word	0x40014000
 80029f0:	40014400 	.word	0x40014400
 80029f4:	40014800 	.word	0x40014800

080029f8 <TIM_TI1_SetConfig>:
>>>>>>> AWS
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
<<<<<<< HEAD
 80029e0:	b480      	push	{r7}
 80029e2:	b087      	sub	sp, #28
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	60f8      	str	r0, [r7, #12]
 80029e8:	60b9      	str	r1, [r7, #8]
 80029ea:	607a      	str	r2, [r7, #4]
 80029ec:	603b      	str	r3, [r7, #0]
=======
 80029f8:	b480      	push	{r7}
 80029fa:	b087      	sub	sp, #28
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	60f8      	str	r0, [r7, #12]
 8002a00:	60b9      	str	r1, [r7, #8]
 8002a02:	607a      	str	r2, [r7, #4]
 8002a04:	603b      	str	r3, [r7, #0]
>>>>>>> AWS
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
<<<<<<< HEAD
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	6a1b      	ldr	r3, [r3, #32]
 80029f2:	f023 0201 	bic.w	r2, r3, #1
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	699b      	ldr	r3, [r3, #24]
 80029fe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	6a1b      	ldr	r3, [r3, #32]
 8002a04:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	4a24      	ldr	r2, [pc, #144]	; (8002a9c <TIM_TI1_SetConfig+0xbc>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d013      	beq.n	8002a36 <TIM_TI1_SetConfig+0x56>
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a14:	d00f      	beq.n	8002a36 <TIM_TI1_SetConfig+0x56>
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	4a21      	ldr	r2, [pc, #132]	; (8002aa0 <TIM_TI1_SetConfig+0xc0>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d00b      	beq.n	8002a36 <TIM_TI1_SetConfig+0x56>
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	4a20      	ldr	r2, [pc, #128]	; (8002aa4 <TIM_TI1_SetConfig+0xc4>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d007      	beq.n	8002a36 <TIM_TI1_SetConfig+0x56>
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	4a1f      	ldr	r2, [pc, #124]	; (8002aa8 <TIM_TI1_SetConfig+0xc8>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d003      	beq.n	8002a36 <TIM_TI1_SetConfig+0x56>
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	4a1e      	ldr	r2, [pc, #120]	; (8002aac <TIM_TI1_SetConfig+0xcc>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d101      	bne.n	8002a3a <TIM_TI1_SetConfig+0x5a>
 8002a36:	2301      	movs	r3, #1
 8002a38:	e000      	b.n	8002a3c <TIM_TI1_SetConfig+0x5c>
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d008      	beq.n	8002a52 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	f023 0303 	bic.w	r3, r3, #3
 8002a46:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8002a48:	697a      	ldr	r2, [r7, #20]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	617b      	str	r3, [r7, #20]
 8002a50:	e003      	b.n	8002a5a <TIM_TI1_SetConfig+0x7a>
=======
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	6a1b      	ldr	r3, [r3, #32]
 8002a0a:	f023 0201 	bic.w	r2, r3, #1
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	699b      	ldr	r3, [r3, #24]
 8002a16:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	6a1b      	ldr	r3, [r3, #32]
 8002a1c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	4a24      	ldr	r2, [pc, #144]	; (8002ab4 <TIM_TI1_SetConfig+0xbc>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d013      	beq.n	8002a4e <TIM_TI1_SetConfig+0x56>
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a2c:	d00f      	beq.n	8002a4e <TIM_TI1_SetConfig+0x56>
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	4a21      	ldr	r2, [pc, #132]	; (8002ab8 <TIM_TI1_SetConfig+0xc0>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d00b      	beq.n	8002a4e <TIM_TI1_SetConfig+0x56>
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	4a20      	ldr	r2, [pc, #128]	; (8002abc <TIM_TI1_SetConfig+0xc4>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d007      	beq.n	8002a4e <TIM_TI1_SetConfig+0x56>
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	4a1f      	ldr	r2, [pc, #124]	; (8002ac0 <TIM_TI1_SetConfig+0xc8>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d003      	beq.n	8002a4e <TIM_TI1_SetConfig+0x56>
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	4a1e      	ldr	r2, [pc, #120]	; (8002ac4 <TIM_TI1_SetConfig+0xcc>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d101      	bne.n	8002a52 <TIM_TI1_SetConfig+0x5a>
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e000      	b.n	8002a54 <TIM_TI1_SetConfig+0x5c>
 8002a52:	2300      	movs	r3, #0
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d008      	beq.n	8002a6a <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	f023 0303 	bic.w	r3, r3, #3
 8002a5e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8002a60:	697a      	ldr	r2, [r7, #20]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	4313      	orrs	r3, r2
 8002a66:	617b      	str	r3, [r7, #20]
 8002a68:	e003      	b.n	8002a72 <TIM_TI1_SetConfig+0x7a>
>>>>>>> AWS
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
<<<<<<< HEAD
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	f043 0301 	orr.w	r3, r3, #1
 8002a58:	617b      	str	r3, [r7, #20]
=======
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	f043 0301 	orr.w	r3, r3, #1
 8002a70:	617b      	str	r3, [r7, #20]
>>>>>>> AWS
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
<<<<<<< HEAD
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a60:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	011b      	lsls	r3, r3, #4
 8002a66:	b2db      	uxtb	r3, r3
 8002a68:	697a      	ldr	r2, [r7, #20]
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	f023 030a 	bic.w	r3, r3, #10
 8002a74:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	f003 030a 	and.w	r3, r3, #10
 8002a7c:	693a      	ldr	r2, [r7, #16]
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	697a      	ldr	r2, [r7, #20]
 8002a86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	693a      	ldr	r2, [r7, #16]
 8002a8c:	621a      	str	r2, [r3, #32]
}
 8002a8e:	bf00      	nop
 8002a90:	371c      	adds	r7, #28
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr
 8002a9a:	bf00      	nop
 8002a9c:	40010000 	.word	0x40010000
 8002aa0:	40000400 	.word	0x40000400
 8002aa4:	40000800 	.word	0x40000800
 8002aa8:	40000c00 	.word	0x40000c00
 8002aac:	40014000 	.word	0x40014000

08002ab0 <TIM_TI1_ConfigInputStage>:
=======
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a78:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	011b      	lsls	r3, r3, #4
 8002a7e:	b2db      	uxtb	r3, r3
 8002a80:	697a      	ldr	r2, [r7, #20]
 8002a82:	4313      	orrs	r3, r2
 8002a84:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	f023 030a 	bic.w	r3, r3, #10
 8002a8c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	f003 030a 	and.w	r3, r3, #10
 8002a94:	693a      	ldr	r2, [r7, #16]
 8002a96:	4313      	orrs	r3, r2
 8002a98:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	697a      	ldr	r2, [r7, #20]
 8002a9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	693a      	ldr	r2, [r7, #16]
 8002aa4:	621a      	str	r2, [r3, #32]
}
 8002aa6:	bf00      	nop
 8002aa8:	371c      	adds	r7, #28
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab0:	4770      	bx	lr
 8002ab2:	bf00      	nop
 8002ab4:	40010000 	.word	0x40010000
 8002ab8:	40000400 	.word	0x40000400
 8002abc:	40000800 	.word	0x40000800
 8002ac0:	40000c00 	.word	0x40000c00
 8002ac4:	40014000 	.word	0x40014000

08002ac8 <TIM_TI1_ConfigInputStage>:
>>>>>>> AWS
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
<<<<<<< HEAD
 8002ab0:	b480      	push	{r7}
 8002ab2:	b087      	sub	sp, #28
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	60f8      	str	r0, [r7, #12]
 8002ab8:	60b9      	str	r1, [r7, #8]
 8002aba:	607a      	str	r2, [r7, #4]
=======
 8002ac8:	b480      	push	{r7}
 8002aca:	b087      	sub	sp, #28
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	60f8      	str	r0, [r7, #12]
 8002ad0:	60b9      	str	r1, [r7, #8]
 8002ad2:	607a      	str	r2, [r7, #4]
>>>>>>> AWS
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
<<<<<<< HEAD
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	6a1b      	ldr	r3, [r3, #32]
 8002ac0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	6a1b      	ldr	r3, [r3, #32]
 8002ac6:	f023 0201 	bic.w	r2, r3, #1
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	699b      	ldr	r3, [r3, #24]
 8002ad2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002ada:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	011b      	lsls	r3, r3, #4
 8002ae0:	693a      	ldr	r2, [r7, #16]
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	f023 030a 	bic.w	r3, r3, #10
 8002aec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002aee:	697a      	ldr	r2, [r7, #20]
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	4313      	orrs	r3, r2
 8002af4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	693a      	ldr	r2, [r7, #16]
 8002afa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	697a      	ldr	r2, [r7, #20]
 8002b00:	621a      	str	r2, [r3, #32]
}
 8002b02:	bf00      	nop
 8002b04:	371c      	adds	r7, #28
 8002b06:	46bd      	mov	sp, r7
 8002b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0c:	4770      	bx	lr

08002b0e <TIM_TI2_SetConfig>:
=======
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	6a1b      	ldr	r3, [r3, #32]
 8002ad8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	6a1b      	ldr	r3, [r3, #32]
 8002ade:	f023 0201 	bic.w	r2, r3, #1
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	699b      	ldr	r3, [r3, #24]
 8002aea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002af2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	011b      	lsls	r3, r3, #4
 8002af8:	693a      	ldr	r2, [r7, #16]
 8002afa:	4313      	orrs	r3, r2
 8002afc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	f023 030a 	bic.w	r3, r3, #10
 8002b04:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002b06:	697a      	ldr	r2, [r7, #20]
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	693a      	ldr	r2, [r7, #16]
 8002b12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	697a      	ldr	r2, [r7, #20]
 8002b18:	621a      	str	r2, [r3, #32]
}
 8002b1a:	bf00      	nop
 8002b1c:	371c      	adds	r7, #28
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b24:	4770      	bx	lr

08002b26 <TIM_TI2_SetConfig>:
>>>>>>> AWS
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
<<<<<<< HEAD
 8002b0e:	b480      	push	{r7}
 8002b10:	b087      	sub	sp, #28
 8002b12:	af00      	add	r7, sp, #0
 8002b14:	60f8      	str	r0, [r7, #12]
 8002b16:	60b9      	str	r1, [r7, #8]
 8002b18:	607a      	str	r2, [r7, #4]
 8002b1a:	603b      	str	r3, [r7, #0]
=======
 8002b26:	b480      	push	{r7}
 8002b28:	b087      	sub	sp, #28
 8002b2a:	af00      	add	r7, sp, #0
 8002b2c:	60f8      	str	r0, [r7, #12]
 8002b2e:	60b9      	str	r1, [r7, #8]
 8002b30:	607a      	str	r2, [r7, #4]
 8002b32:	603b      	str	r3, [r7, #0]
>>>>>>> AWS
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
<<<<<<< HEAD
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	6a1b      	ldr	r3, [r3, #32]
 8002b20:	f023 0210 	bic.w	r2, r3, #16
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	699b      	ldr	r3, [r3, #24]
 8002b2c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	6a1b      	ldr	r3, [r3, #32]
 8002b32:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b3a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	021b      	lsls	r3, r3, #8
 8002b40:	697a      	ldr	r2, [r7, #20]
 8002b42:	4313      	orrs	r3, r2
 8002b44:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002b4c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	031b      	lsls	r3, r3, #12
 8002b52:	b29b      	uxth	r3, r3
 8002b54:	697a      	ldr	r2, [r7, #20]
 8002b56:	4313      	orrs	r3, r2
 8002b58:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002b60:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002b62:	68bb      	ldr	r3, [r7, #8]
 8002b64:	011b      	lsls	r3, r3, #4
 8002b66:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8002b6a:	693a      	ldr	r2, [r7, #16]
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	697a      	ldr	r2, [r7, #20]
 8002b74:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	693a      	ldr	r2, [r7, #16]
 8002b7a:	621a      	str	r2, [r3, #32]
}
 8002b7c:	bf00      	nop
 8002b7e:	371c      	adds	r7, #28
 8002b80:	46bd      	mov	sp, r7
 8002b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b86:	4770      	bx	lr

08002b88 <TIM_TI2_ConfigInputStage>:
=======
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	6a1b      	ldr	r3, [r3, #32]
 8002b38:	f023 0210 	bic.w	r2, r3, #16
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	699b      	ldr	r3, [r3, #24]
 8002b44:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	6a1b      	ldr	r3, [r3, #32]
 8002b4a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b52:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	021b      	lsls	r3, r3, #8
 8002b58:	697a      	ldr	r2, [r7, #20]
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002b64:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	031b      	lsls	r3, r3, #12
 8002b6a:	b29b      	uxth	r3, r3
 8002b6c:	697a      	ldr	r2, [r7, #20]
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002b78:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	011b      	lsls	r3, r3, #4
 8002b7e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8002b82:	693a      	ldr	r2, [r7, #16]
 8002b84:	4313      	orrs	r3, r2
 8002b86:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	697a      	ldr	r2, [r7, #20]
 8002b8c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	693a      	ldr	r2, [r7, #16]
 8002b92:	621a      	str	r2, [r3, #32]
}
 8002b94:	bf00      	nop
 8002b96:	371c      	adds	r7, #28
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9e:	4770      	bx	lr

08002ba0 <TIM_TI2_ConfigInputStage>:
>>>>>>> AWS
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
<<<<<<< HEAD
 8002b88:	b480      	push	{r7}
 8002b8a:	b087      	sub	sp, #28
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	60f8      	str	r0, [r7, #12]
 8002b90:	60b9      	str	r1, [r7, #8]
 8002b92:	607a      	str	r2, [r7, #4]
=======
 8002ba0:	b480      	push	{r7}
 8002ba2:	b087      	sub	sp, #28
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	60f8      	str	r0, [r7, #12]
 8002ba8:	60b9      	str	r1, [r7, #8]
 8002baa:	607a      	str	r2, [r7, #4]
>>>>>>> AWS
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
<<<<<<< HEAD
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	6a1b      	ldr	r3, [r3, #32]
 8002b98:	f023 0210 	bic.w	r2, r3, #16
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	699b      	ldr	r3, [r3, #24]
 8002ba4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	6a1b      	ldr	r3, [r3, #32]
 8002baa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002bb2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	031b      	lsls	r3, r3, #12
 8002bb8:	697a      	ldr	r2, [r7, #20]
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002bc4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	011b      	lsls	r3, r3, #4
 8002bca:	693a      	ldr	r2, [r7, #16]
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	697a      	ldr	r2, [r7, #20]
 8002bd4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	693a      	ldr	r2, [r7, #16]
 8002bda:	621a      	str	r2, [r3, #32]
}
 8002bdc:	bf00      	nop
 8002bde:	371c      	adds	r7, #28
 8002be0:	46bd      	mov	sp, r7
 8002be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be6:	4770      	bx	lr

08002be8 <TIM_TI3_SetConfig>:
=======
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	6a1b      	ldr	r3, [r3, #32]
 8002bb0:	f023 0210 	bic.w	r2, r3, #16
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	699b      	ldr	r3, [r3, #24]
 8002bbc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	6a1b      	ldr	r3, [r3, #32]
 8002bc2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002bca:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	031b      	lsls	r3, r3, #12
 8002bd0:	697a      	ldr	r2, [r7, #20]
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002bdc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	011b      	lsls	r3, r3, #4
 8002be2:	693a      	ldr	r2, [r7, #16]
 8002be4:	4313      	orrs	r3, r2
 8002be6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	697a      	ldr	r2, [r7, #20]
 8002bec:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	693a      	ldr	r2, [r7, #16]
 8002bf2:	621a      	str	r2, [r3, #32]
}
 8002bf4:	bf00      	nop
 8002bf6:	371c      	adds	r7, #28
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfe:	4770      	bx	lr

08002c00 <TIM_TI3_SetConfig>:
>>>>>>> AWS
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
<<<<<<< HEAD
 8002be8:	b480      	push	{r7}
 8002bea:	b087      	sub	sp, #28
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	60f8      	str	r0, [r7, #12]
 8002bf0:	60b9      	str	r1, [r7, #8]
 8002bf2:	607a      	str	r2, [r7, #4]
 8002bf4:	603b      	str	r3, [r7, #0]
=======
 8002c00:	b480      	push	{r7}
 8002c02:	b087      	sub	sp, #28
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	60f8      	str	r0, [r7, #12]
 8002c08:	60b9      	str	r1, [r7, #8]
 8002c0a:	607a      	str	r2, [r7, #4]
 8002c0c:	603b      	str	r3, [r7, #0]
>>>>>>> AWS
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
<<<<<<< HEAD
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	6a1b      	ldr	r3, [r3, #32]
 8002bfa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	69db      	ldr	r3, [r3, #28]
 8002c06:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	6a1b      	ldr	r3, [r3, #32]
 8002c0c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	f023 0303 	bic.w	r3, r3, #3
 8002c14:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8002c16:	697a      	ldr	r2, [r7, #20]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002c24:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	011b      	lsls	r3, r3, #4
 8002c2a:	b2db      	uxtb	r3, r3
 8002c2c:	697a      	ldr	r2, [r7, #20]
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8002c38:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	021b      	lsls	r3, r3, #8
 8002c3e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8002c42:	693a      	ldr	r2, [r7, #16]
 8002c44:	4313      	orrs	r3, r2
 8002c46:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	697a      	ldr	r2, [r7, #20]
 8002c4c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	693a      	ldr	r2, [r7, #16]
 8002c52:	621a      	str	r2, [r3, #32]
}
 8002c54:	bf00      	nop
 8002c56:	371c      	adds	r7, #28
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5e:	4770      	bx	lr

08002c60 <TIM_TI4_SetConfig>:
=======
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	6a1b      	ldr	r3, [r3, #32]
 8002c12:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	69db      	ldr	r3, [r3, #28]
 8002c1e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	6a1b      	ldr	r3, [r3, #32]
 8002c24:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	f023 0303 	bic.w	r3, r3, #3
 8002c2c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8002c2e:	697a      	ldr	r2, [r7, #20]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	4313      	orrs	r3, r2
 8002c34:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002c3c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	011b      	lsls	r3, r3, #4
 8002c42:	b2db      	uxtb	r3, r3
 8002c44:	697a      	ldr	r2, [r7, #20]
 8002c46:	4313      	orrs	r3, r2
 8002c48:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8002c50:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	021b      	lsls	r3, r3, #8
 8002c56:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8002c5a:	693a      	ldr	r2, [r7, #16]
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	697a      	ldr	r2, [r7, #20]
 8002c64:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	693a      	ldr	r2, [r7, #16]
 8002c6a:	621a      	str	r2, [r3, #32]
}
 8002c6c:	bf00      	nop
 8002c6e:	371c      	adds	r7, #28
 8002c70:	46bd      	mov	sp, r7
 8002c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c76:	4770      	bx	lr

08002c78 <TIM_TI4_SetConfig>:
>>>>>>> AWS
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
<<<<<<< HEAD
 8002c60:	b480      	push	{r7}
 8002c62:	b087      	sub	sp, #28
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	60f8      	str	r0, [r7, #12]
 8002c68:	60b9      	str	r1, [r7, #8]
 8002c6a:	607a      	str	r2, [r7, #4]
 8002c6c:	603b      	str	r3, [r7, #0]
=======
 8002c78:	b480      	push	{r7}
 8002c7a:	b087      	sub	sp, #28
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	60f8      	str	r0, [r7, #12]
 8002c80:	60b9      	str	r1, [r7, #8]
 8002c82:	607a      	str	r2, [r7, #4]
 8002c84:	603b      	str	r3, [r7, #0]
>>>>>>> AWS
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
<<<<<<< HEAD
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	6a1b      	ldr	r3, [r3, #32]
 8002c72:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	69db      	ldr	r3, [r3, #28]
 8002c7e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	6a1b      	ldr	r3, [r3, #32]
 8002c84:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c8c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	021b      	lsls	r3, r3, #8
 8002c92:	697a      	ldr	r2, [r7, #20]
 8002c94:	4313      	orrs	r3, r2
 8002c96:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002c9e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	031b      	lsls	r3, r3, #12
 8002ca4:	b29b      	uxth	r3, r3
 8002ca6:	697a      	ldr	r2, [r7, #20]
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8002cb2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	031b      	lsls	r3, r3, #12
 8002cb8:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8002cbc:	693a      	ldr	r2, [r7, #16]
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	697a      	ldr	r2, [r7, #20]
 8002cc6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	693a      	ldr	r2, [r7, #16]
 8002ccc:	621a      	str	r2, [r3, #32]
}
 8002cce:	bf00      	nop
 8002cd0:	371c      	adds	r7, #28
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd8:	4770      	bx	lr

08002cda <TIM_ITRx_SetConfig>:
=======
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	6a1b      	ldr	r3, [r3, #32]
 8002c8a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	69db      	ldr	r3, [r3, #28]
 8002c96:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	6a1b      	ldr	r3, [r3, #32]
 8002c9c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ca4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	021b      	lsls	r3, r3, #8
 8002caa:	697a      	ldr	r2, [r7, #20]
 8002cac:	4313      	orrs	r3, r2
 8002cae:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002cb6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	031b      	lsls	r3, r3, #12
 8002cbc:	b29b      	uxth	r3, r3
 8002cbe:	697a      	ldr	r2, [r7, #20]
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8002cc4:	693b      	ldr	r3, [r7, #16]
 8002cc6:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8002cca:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	031b      	lsls	r3, r3, #12
 8002cd0:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8002cd4:	693a      	ldr	r2, [r7, #16]
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	697a      	ldr	r2, [r7, #20]
 8002cde:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	693a      	ldr	r2, [r7, #16]
 8002ce4:	621a      	str	r2, [r3, #32]
}
 8002ce6:	bf00      	nop
 8002ce8:	371c      	adds	r7, #28
 8002cea:	46bd      	mov	sp, r7
 8002cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf0:	4770      	bx	lr

08002cf2 <TIM_ITRx_SetConfig>:
>>>>>>> AWS
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
<<<<<<< HEAD
 8002cda:	b480      	push	{r7}
 8002cdc:	b085      	sub	sp, #20
 8002cde:	af00      	add	r7, sp, #0
 8002ce0:	6078      	str	r0, [r7, #4]
 8002ce2:	6039      	str	r1, [r7, #0]
=======
 8002cf2:	b480      	push	{r7}
 8002cf4:	b085      	sub	sp, #20
 8002cf6:	af00      	add	r7, sp, #0
 8002cf8:	6078      	str	r0, [r7, #4]
 8002cfa:	6039      	str	r1, [r7, #0]
>>>>>>> AWS
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
<<<<<<< HEAD
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cf0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002cf2:	683a      	ldr	r2, [r7, #0]
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	f043 0307 	orr.w	r3, r3, #7
 8002cfc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	68fa      	ldr	r2, [r7, #12]
 8002d02:	609a      	str	r2, [r3, #8]
}
 8002d04:	bf00      	nop
 8002d06:	3714      	adds	r7, #20
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0e:	4770      	bx	lr

08002d10 <TIM_ETR_SetConfig>:
=======
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d08:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002d0a:	683a      	ldr	r2, [r7, #0]
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	f043 0307 	orr.w	r3, r3, #7
 8002d14:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	68fa      	ldr	r2, [r7, #12]
 8002d1a:	609a      	str	r2, [r3, #8]
}
 8002d1c:	bf00      	nop
 8002d1e:	3714      	adds	r7, #20
 8002d20:	46bd      	mov	sp, r7
 8002d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d26:	4770      	bx	lr

08002d28 <TIM_ETR_SetConfig>:
>>>>>>> AWS
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
<<<<<<< HEAD
 8002d10:	b480      	push	{r7}
 8002d12:	b087      	sub	sp, #28
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	60f8      	str	r0, [r7, #12]
 8002d18:	60b9      	str	r1, [r7, #8]
 8002d1a:	607a      	str	r2, [r7, #4]
 8002d1c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d24:	697b      	ldr	r3, [r7, #20]
 8002d26:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002d2a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	021a      	lsls	r2, r3, #8
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	431a      	orrs	r2, r3
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	4313      	orrs	r3, r2
 8002d38:	697a      	ldr	r2, [r7, #20]
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	697a      	ldr	r2, [r7, #20]
 8002d42:	609a      	str	r2, [r3, #8]
}
 8002d44:	bf00      	nop
 8002d46:	371c      	adds	r7, #28
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4e:	4770      	bx	lr

08002d50 <TIM_CCxChannelCmd>:
=======
 8002d28:	b480      	push	{r7}
 8002d2a:	b087      	sub	sp, #28
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	60f8      	str	r0, [r7, #12]
 8002d30:	60b9      	str	r1, [r7, #8]
 8002d32:	607a      	str	r2, [r7, #4]
 8002d34:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002d42:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	021a      	lsls	r2, r3, #8
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	431a      	orrs	r2, r3
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	697a      	ldr	r2, [r7, #20]
 8002d52:	4313      	orrs	r3, r2
 8002d54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	697a      	ldr	r2, [r7, #20]
 8002d5a:	609a      	str	r2, [r3, #8]
}
 8002d5c:	bf00      	nop
 8002d5e:	371c      	adds	r7, #28
 8002d60:	46bd      	mov	sp, r7
 8002d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d66:	4770      	bx	lr

08002d68 <TIM_CCxChannelCmd>:
>>>>>>> AWS
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
<<<<<<< HEAD
 8002d50:	b480      	push	{r7}
 8002d52:	b087      	sub	sp, #28
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	60f8      	str	r0, [r7, #12]
 8002d58:	60b9      	str	r1, [r7, #8]
 8002d5a:	607a      	str	r2, [r7, #4]
=======
 8002d68:	b480      	push	{r7}
 8002d6a:	b087      	sub	sp, #28
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	60f8      	str	r0, [r7, #12]
 8002d70:	60b9      	str	r1, [r7, #8]
 8002d72:	607a      	str	r2, [r7, #4]
>>>>>>> AWS

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
<<<<<<< HEAD
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	f003 031f 	and.w	r3, r3, #31
 8002d62:	2201      	movs	r2, #1
 8002d64:	fa02 f303 	lsl.w	r3, r2, r3
 8002d68:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	6a1a      	ldr	r2, [r3, #32]
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	43db      	mvns	r3, r3
 8002d72:	401a      	ands	r2, r3
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	6a1a      	ldr	r2, [r3, #32]
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	f003 031f 	and.w	r3, r3, #31
 8002d82:	6879      	ldr	r1, [r7, #4]
 8002d84:	fa01 f303 	lsl.w	r3, r1, r3
 8002d88:	431a      	orrs	r2, r3
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	621a      	str	r2, [r3, #32]
}
 8002d8e:	bf00      	nop
 8002d90:	371c      	adds	r7, #28
 8002d92:	46bd      	mov	sp, r7
 8002d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d98:	4770      	bx	lr
	...

08002d9c <HAL_TIMEx_MasterConfigSynchronization>:
=======
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	f003 031f 	and.w	r3, r3, #31
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d80:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	6a1a      	ldr	r2, [r3, #32]
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	43db      	mvns	r3, r3
 8002d8a:	401a      	ands	r2, r3
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	6a1a      	ldr	r2, [r3, #32]
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	f003 031f 	and.w	r3, r3, #31
 8002d9a:	6879      	ldr	r1, [r7, #4]
 8002d9c:	fa01 f303 	lsl.w	r3, r1, r3
 8002da0:	431a      	orrs	r2, r3
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	621a      	str	r2, [r3, #32]
}
 8002da6:	bf00      	nop
 8002da8:	371c      	adds	r7, #28
 8002daa:	46bd      	mov	sp, r7
 8002dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db0:	4770      	bx	lr
	...

08002db4 <HAL_TIMEx_MasterConfigSynchronization>:
>>>>>>> AWS
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
<<<<<<< HEAD
 8002d9c:	b480      	push	{r7}
 8002d9e:	b085      	sub	sp, #20
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
 8002da4:	6039      	str	r1, [r7, #0]
=======
 8002db4:	b480      	push	{r7}
 8002db6:	b085      	sub	sp, #20
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
 8002dbc:	6039      	str	r1, [r7, #0]
>>>>>>> AWS
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
<<<<<<< HEAD
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002dac:	2b01      	cmp	r3, #1
 8002dae:	d101      	bne.n	8002db4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002db0:	2302      	movs	r3, #2
 8002db2:	e050      	b.n	8002e56 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2201      	movs	r2, #1
 8002db8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2202      	movs	r2, #2
 8002dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dda:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	68fa      	ldr	r2, [r7, #12]
 8002de2:	4313      	orrs	r3, r2
 8002de4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	68fa      	ldr	r2, [r7, #12]
 8002dec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a1c      	ldr	r2, [pc, #112]	; (8002e64 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d018      	beq.n	8002e2a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e00:	d013      	beq.n	8002e2a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a18      	ldr	r2, [pc, #96]	; (8002e68 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d00e      	beq.n	8002e2a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a16      	ldr	r2, [pc, #88]	; (8002e6c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d009      	beq.n	8002e2a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a15      	ldr	r2, [pc, #84]	; (8002e70 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d004      	beq.n	8002e2a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a13      	ldr	r2, [pc, #76]	; (8002e74 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d10c      	bne.n	8002e44 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e30:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	68ba      	ldr	r2, [r7, #8]
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	68ba      	ldr	r2, [r7, #8]
 8002e42:	609a      	str	r2, [r3, #8]
=======
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002dc4:	2b01      	cmp	r3, #1
 8002dc6:	d101      	bne.n	8002dcc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002dc8:	2302      	movs	r3, #2
 8002dca:	e050      	b.n	8002e6e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2201      	movs	r2, #1
 8002dd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2202      	movs	r2, #2
 8002dd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002df2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	68fa      	ldr	r2, [r7, #12]
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	68fa      	ldr	r2, [r7, #12]
 8002e04:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a1c      	ldr	r2, [pc, #112]	; (8002e7c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d018      	beq.n	8002e42 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e18:	d013      	beq.n	8002e42 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a18      	ldr	r2, [pc, #96]	; (8002e80 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d00e      	beq.n	8002e42 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a16      	ldr	r2, [pc, #88]	; (8002e84 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d009      	beq.n	8002e42 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a15      	ldr	r2, [pc, #84]	; (8002e88 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d004      	beq.n	8002e42 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a13      	ldr	r2, [pc, #76]	; (8002e8c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d10c      	bne.n	8002e5c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002e42:	68bb      	ldr	r3, [r7, #8]
 8002e44:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e48:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	68ba      	ldr	r2, [r7, #8]
 8002e50:	4313      	orrs	r3, r2
 8002e52:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	68ba      	ldr	r2, [r7, #8]
 8002e5a:	609a      	str	r2, [r3, #8]
>>>>>>> AWS
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
<<<<<<< HEAD
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2201      	movs	r2, #1
 8002e48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002e54:	2300      	movs	r3, #0
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	3714      	adds	r7, #20
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e60:	4770      	bx	lr
 8002e62:	bf00      	nop
 8002e64:	40010000 	.word	0x40010000
 8002e68:	40000400 	.word	0x40000400
 8002e6c:	40000800 	.word	0x40000800
 8002e70:	40000c00 	.word	0x40000c00
 8002e74:	40014000 	.word	0x40014000

08002e78 <HAL_TIMEx_CommutCallback>:
=======
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2201      	movs	r2, #1
 8002e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2200      	movs	r2, #0
 8002e68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002e6c:	2300      	movs	r3, #0
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	3714      	adds	r7, #20
 8002e72:	46bd      	mov	sp, r7
 8002e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e78:	4770      	bx	lr
 8002e7a:	bf00      	nop
 8002e7c:	40010000 	.word	0x40010000
 8002e80:	40000400 	.word	0x40000400
 8002e84:	40000800 	.word	0x40000800
 8002e88:	40000c00 	.word	0x40000c00
 8002e8c:	40014000 	.word	0x40014000

08002e90 <HAL_TIMEx_CommutCallback>:
>>>>>>> AWS
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8002e78:	b480      	push	{r7}
 8002e7a:	b083      	sub	sp, #12
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
=======
 8002e90:	b480      	push	{r7}
 8002e92:	b083      	sub	sp, #12
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
>>>>>>> AWS
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8002e80:	bf00      	nop
 8002e82:	370c      	adds	r7, #12
 8002e84:	46bd      	mov	sp, r7
 8002e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8a:	4770      	bx	lr

08002e8c <HAL_TIMEx_BreakCallback>:
=======
 8002e98:	bf00      	nop
 8002e9a:	370c      	adds	r7, #12
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea2:	4770      	bx	lr

08002ea4 <HAL_TIMEx_BreakCallback>:
>>>>>>> AWS
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8002e8c:	b480      	push	{r7}
 8002e8e:	b083      	sub	sp, #12
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
=======
 8002ea4:	b480      	push	{r7}
 8002ea6:	b083      	sub	sp, #12
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
>>>>>>> AWS
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8002e94:	bf00      	nop
 8002e96:	370c      	adds	r7, #12
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9e:	4770      	bx	lr

08002ea0 <HAL_UART_Init>:
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b082      	sub	sp, #8
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d101      	bne.n	8002eb2 <HAL_UART_Init+0x12>
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e03f      	b.n	8002f32 <HAL_UART_Init+0x92>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002eb8:	b2db      	uxtb	r3, r3
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d106      	bne.n	8002ecc <HAL_UART_Init+0x2c>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002ec6:	6878      	ldr	r0, [r7, #4]
 8002ec8:	f7fd fee2 	bl	8000c90 <HAL_UART_MspInit>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2224      	movs	r2, #36	; 0x24
 8002ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	68da      	ldr	r2, [r3, #12]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002ee2:	60da      	str	r2, [r3, #12]
 8002ee4:	6878      	ldr	r0, [r7, #4]
 8002ee6:	f000 fd7b 	bl	80039e0 <UART_SetConfig>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	691a      	ldr	r2, [r3, #16]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002ef8:	611a      	str	r2, [r3, #16]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	695a      	ldr	r2, [r3, #20]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002f08:	615a      	str	r2, [r3, #20]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	68da      	ldr	r2, [r3, #12]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002f18:	60da      	str	r2, [r3, #12]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	641a      	str	r2, [r3, #64]	; 0x40
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2220      	movs	r2, #32
 8002f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2220      	movs	r2, #32
 8002f2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f30:	2300      	movs	r3, #0
 8002f32:	4618      	mov	r0, r3
 8002f34:	3708      	adds	r7, #8
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}

08002f3a <HAL_UART_Transmit>:
 8002f3a:	b580      	push	{r7, lr}
 8002f3c:	b08a      	sub	sp, #40	; 0x28
 8002f3e:	af02      	add	r7, sp, #8
 8002f40:	60f8      	str	r0, [r7, #12]
 8002f42:	60b9      	str	r1, [r7, #8]
 8002f44:	603b      	str	r3, [r7, #0]
 8002f46:	4613      	mov	r3, r2
 8002f48:	80fb      	strh	r3, [r7, #6]
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	617b      	str	r3, [r7, #20]
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f54:	b2db      	uxtb	r3, r3
 8002f56:	2b20      	cmp	r3, #32
 8002f58:	d17c      	bne.n	8003054 <HAL_UART_Transmit+0x11a>
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d002      	beq.n	8002f66 <HAL_UART_Transmit+0x2c>
 8002f60:	88fb      	ldrh	r3, [r7, #6]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d101      	bne.n	8002f6a <HAL_UART_Transmit+0x30>
 8002f66:	2301      	movs	r3, #1
 8002f68:	e075      	b.n	8003056 <HAL_UART_Transmit+0x11c>
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	d101      	bne.n	8002f78 <HAL_UART_Transmit+0x3e>
 8002f74:	2302      	movs	r3, #2
 8002f76:	e06e      	b.n	8003056 <HAL_UART_Transmit+0x11c>
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	2200      	movs	r2, #0
 8002f84:	641a      	str	r2, [r3, #64]	; 0x40
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	2221      	movs	r2, #33	; 0x21
 8002f8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002f8e:	f7fd ffb9 	bl	8000f04 <HAL_GetTick>
 8002f92:	6178      	str	r0, [r7, #20]
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	88fa      	ldrh	r2, [r7, #6]
 8002f98:	849a      	strh	r2, [r3, #36]	; 0x24
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	88fa      	ldrh	r2, [r7, #6]
 8002f9e:	84da      	strh	r2, [r3, #38]	; 0x26
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fa8:	d108      	bne.n	8002fbc <HAL_UART_Transmit+0x82>
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	691b      	ldr	r3, [r3, #16]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d104      	bne.n	8002fbc <HAL_UART_Transmit+0x82>
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	61fb      	str	r3, [r7, #28]
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	61bb      	str	r3, [r7, #24]
 8002fba:	e003      	b.n	8002fc4 <HAL_UART_Transmit+0x8a>
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	61fb      	str	r3, [r7, #28]
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	61bb      	str	r3, [r7, #24]
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002fcc:	e02a      	b.n	8003024 <HAL_UART_Transmit+0xea>
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	9300      	str	r3, [sp, #0]
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	2180      	movs	r1, #128	; 0x80
 8002fd8:	68f8      	ldr	r0, [r7, #12]
 8002fda:	f000 faf9 	bl	80035d0 <UART_WaitOnFlagUntilTimeout>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d001      	beq.n	8002fe8 <HAL_UART_Transmit+0xae>
 8002fe4:	2303      	movs	r3, #3
 8002fe6:	e036      	b.n	8003056 <HAL_UART_Transmit+0x11c>
 8002fe8:	69fb      	ldr	r3, [r7, #28]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d10b      	bne.n	8003006 <HAL_UART_Transmit+0xcc>
 8002fee:	69bb      	ldr	r3, [r7, #24]
 8002ff0:	881b      	ldrh	r3, [r3, #0]
 8002ff2:	461a      	mov	r2, r3
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ffc:	605a      	str	r2, [r3, #4]
 8002ffe:	69bb      	ldr	r3, [r7, #24]
 8003000:	3302      	adds	r3, #2
 8003002:	61bb      	str	r3, [r7, #24]
 8003004:	e007      	b.n	8003016 <HAL_UART_Transmit+0xdc>
 8003006:	69fb      	ldr	r3, [r7, #28]
 8003008:	781a      	ldrb	r2, [r3, #0]
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	605a      	str	r2, [r3, #4]
 8003010:	69fb      	ldr	r3, [r7, #28]
 8003012:	3301      	adds	r3, #1
 8003014:	61fb      	str	r3, [r7, #28]
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800301a:	b29b      	uxth	r3, r3
 800301c:	3b01      	subs	r3, #1
 800301e:	b29a      	uxth	r2, r3
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	84da      	strh	r2, [r3, #38]	; 0x26
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003028:	b29b      	uxth	r3, r3
 800302a:	2b00      	cmp	r3, #0
 800302c:	d1cf      	bne.n	8002fce <HAL_UART_Transmit+0x94>
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	9300      	str	r3, [sp, #0]
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	2200      	movs	r2, #0
 8003036:	2140      	movs	r1, #64	; 0x40
 8003038:	68f8      	ldr	r0, [r7, #12]
 800303a:	f000 fac9 	bl	80035d0 <UART_WaitOnFlagUntilTimeout>
 800303e:	4603      	mov	r3, r0
 8003040:	2b00      	cmp	r3, #0
 8003042:	d001      	beq.n	8003048 <HAL_UART_Transmit+0x10e>
 8003044:	2303      	movs	r3, #3
 8003046:	e006      	b.n	8003056 <HAL_UART_Transmit+0x11c>
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	2220      	movs	r2, #32
 800304c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003050:	2300      	movs	r3, #0
 8003052:	e000      	b.n	8003056 <HAL_UART_Transmit+0x11c>
 8003054:	2302      	movs	r3, #2
 8003056:	4618      	mov	r0, r3
 8003058:	3720      	adds	r7, #32
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}
	...

08003060 <HAL_UART_IRQHandler>:
 8003060:	b580      	push	{r7, lr}
 8003062:	b0ba      	sub	sp, #232	; 0xe8
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	68db      	ldr	r3, [r3, #12]
 8003078:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	695b      	ldr	r3, [r3, #20]
 8003082:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8003086:	2300      	movs	r3, #0
 8003088:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800308c:	2300      	movs	r3, #0
 800308e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003092:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003096:	f003 030f 	and.w	r3, r3, #15
 800309a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800309e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d10f      	bne.n	80030c6 <HAL_UART_IRQHandler+0x66>
 80030a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030aa:	f003 0320 	and.w	r3, r3, #32
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d009      	beq.n	80030c6 <HAL_UART_IRQHandler+0x66>
 80030b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030b6:	f003 0320 	and.w	r3, r3, #32
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d003      	beq.n	80030c6 <HAL_UART_IRQHandler+0x66>
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	f000 fbd3 	bl	800386a <UART_Receive_IT>
 80030c4:	e256      	b.n	8003574 <HAL_UART_IRQHandler+0x514>
 80030c6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	f000 80de 	beq.w	800328c <HAL_UART_IRQHandler+0x22c>
 80030d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80030d4:	f003 0301 	and.w	r3, r3, #1
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d106      	bne.n	80030ea <HAL_UART_IRQHandler+0x8a>
 80030dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030e0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	f000 80d1 	beq.w	800328c <HAL_UART_IRQHandler+0x22c>
 80030ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030ee:	f003 0301 	and.w	r3, r3, #1
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d00b      	beq.n	800310e <HAL_UART_IRQHandler+0xae>
 80030f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d005      	beq.n	800310e <HAL_UART_IRQHandler+0xae>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003106:	f043 0201 	orr.w	r2, r3, #1
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	641a      	str	r2, [r3, #64]	; 0x40
 800310e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003112:	f003 0304 	and.w	r3, r3, #4
 8003116:	2b00      	cmp	r3, #0
 8003118:	d00b      	beq.n	8003132 <HAL_UART_IRQHandler+0xd2>
 800311a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800311e:	f003 0301 	and.w	r3, r3, #1
 8003122:	2b00      	cmp	r3, #0
 8003124:	d005      	beq.n	8003132 <HAL_UART_IRQHandler+0xd2>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800312a:	f043 0202 	orr.w	r2, r3, #2
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	641a      	str	r2, [r3, #64]	; 0x40
 8003132:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003136:	f003 0302 	and.w	r3, r3, #2
 800313a:	2b00      	cmp	r3, #0
 800313c:	d00b      	beq.n	8003156 <HAL_UART_IRQHandler+0xf6>
 800313e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003142:	f003 0301 	and.w	r3, r3, #1
 8003146:	2b00      	cmp	r3, #0
 8003148:	d005      	beq.n	8003156 <HAL_UART_IRQHandler+0xf6>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800314e:	f043 0204 	orr.w	r2, r3, #4
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	641a      	str	r2, [r3, #64]	; 0x40
 8003156:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800315a:	f003 0308 	and.w	r3, r3, #8
 800315e:	2b00      	cmp	r3, #0
 8003160:	d011      	beq.n	8003186 <HAL_UART_IRQHandler+0x126>
 8003162:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003166:	f003 0320 	and.w	r3, r3, #32
 800316a:	2b00      	cmp	r3, #0
 800316c:	d105      	bne.n	800317a <HAL_UART_IRQHandler+0x11a>
 800316e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003172:	f003 0301 	and.w	r3, r3, #1
 8003176:	2b00      	cmp	r3, #0
 8003178:	d005      	beq.n	8003186 <HAL_UART_IRQHandler+0x126>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800317e:	f043 0208 	orr.w	r2, r3, #8
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	641a      	str	r2, [r3, #64]	; 0x40
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800318a:	2b00      	cmp	r3, #0
 800318c:	f000 81ed 	beq.w	800356a <HAL_UART_IRQHandler+0x50a>
 8003190:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003194:	f003 0320 	and.w	r3, r3, #32
 8003198:	2b00      	cmp	r3, #0
 800319a:	d008      	beq.n	80031ae <HAL_UART_IRQHandler+0x14e>
 800319c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031a0:	f003 0320 	and.w	r3, r3, #32
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d002      	beq.n	80031ae <HAL_UART_IRQHandler+0x14e>
 80031a8:	6878      	ldr	r0, [r7, #4]
 80031aa:	f000 fb5e 	bl	800386a <UART_Receive_IT>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	695b      	ldr	r3, [r3, #20]
 80031b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031b8:	2b40      	cmp	r3, #64	; 0x40
 80031ba:	bf0c      	ite	eq
 80031bc:	2301      	moveq	r3, #1
 80031be:	2300      	movne	r3, #0
 80031c0:	b2db      	uxtb	r3, r3
 80031c2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ca:	f003 0308 	and.w	r3, r3, #8
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d103      	bne.n	80031da <HAL_UART_IRQHandler+0x17a>
 80031d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d04f      	beq.n	800327a <HAL_UART_IRQHandler+0x21a>
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	f000 fa66 	bl	80036ac <UART_EndRxTransfer>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	695b      	ldr	r3, [r3, #20]
 80031e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031ea:	2b40      	cmp	r3, #64	; 0x40
 80031ec:	d141      	bne.n	8003272 <HAL_UART_IRQHandler+0x212>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	3314      	adds	r3, #20
 80031f4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
=======
 8002eac:	bf00      	nop
 8002eae:	370c      	adds	r7, #12
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb6:	4770      	bx	lr

08002eb8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b082      	sub	sp, #8
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d101      	bne.n	8002eca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e03f      	b.n	8002f4a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d106      	bne.n	8002ee4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ede:	6878      	ldr	r0, [r7, #4]
 8002ee0:	f7fd fee2 	bl	8000ca8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2224      	movs	r2, #36	; 0x24
 8002ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	68da      	ldr	r2, [r3, #12]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002efa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002efc:	6878      	ldr	r0, [r7, #4]
 8002efe:	f000 fd7b 	bl	80039f8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	691a      	ldr	r2, [r3, #16]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002f10:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	695a      	ldr	r2, [r3, #20]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002f20:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	68da      	ldr	r2, [r3, #12]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002f30:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2200      	movs	r2, #0
 8002f36:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2220      	movs	r2, #32
 8002f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2220      	movs	r2, #32
 8002f44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002f48:	2300      	movs	r3, #0
}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	3708      	adds	r7, #8
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}

08002f52 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f52:	b580      	push	{r7, lr}
 8002f54:	b08a      	sub	sp, #40	; 0x28
 8002f56:	af02      	add	r7, sp, #8
 8002f58:	60f8      	str	r0, [r7, #12]
 8002f5a:	60b9      	str	r1, [r7, #8]
 8002f5c:	603b      	str	r3, [r7, #0]
 8002f5e:	4613      	mov	r3, r2
 8002f60:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002f62:	2300      	movs	r3, #0
 8002f64:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	2b20      	cmp	r3, #32
 8002f70:	d17c      	bne.n	800306c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d002      	beq.n	8002f7e <HAL_UART_Transmit+0x2c>
 8002f78:	88fb      	ldrh	r3, [r7, #6]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d101      	bne.n	8002f82 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	e075      	b.n	800306e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f88:	2b01      	cmp	r3, #1
 8002f8a:	d101      	bne.n	8002f90 <HAL_UART_Transmit+0x3e>
 8002f8c:	2302      	movs	r3, #2
 8002f8e:	e06e      	b.n	800306e <HAL_UART_Transmit+0x11c>
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	2201      	movs	r2, #1
 8002f94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	2221      	movs	r2, #33	; 0x21
 8002fa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002fa6:	f7fd ffb9 	bl	8000f1c <HAL_GetTick>
 8002faa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	88fa      	ldrh	r2, [r7, #6]
 8002fb0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	88fa      	ldrh	r2, [r7, #6]
 8002fb6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fc0:	d108      	bne.n	8002fd4 <HAL_UART_Transmit+0x82>
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	691b      	ldr	r3, [r3, #16]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d104      	bne.n	8002fd4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	61bb      	str	r3, [r7, #24]
 8002fd2:	e003      	b.n	8002fdc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002fe4:	e02a      	b.n	800303c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	9300      	str	r3, [sp, #0]
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	2200      	movs	r2, #0
 8002fee:	2180      	movs	r1, #128	; 0x80
 8002ff0:	68f8      	ldr	r0, [r7, #12]
 8002ff2:	f000 faf9 	bl	80035e8 <UART_WaitOnFlagUntilTimeout>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d001      	beq.n	8003000 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002ffc:	2303      	movs	r3, #3
 8002ffe:	e036      	b.n	800306e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003000:	69fb      	ldr	r3, [r7, #28]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d10b      	bne.n	800301e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003006:	69bb      	ldr	r3, [r7, #24]
 8003008:	881b      	ldrh	r3, [r3, #0]
 800300a:	461a      	mov	r2, r3
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003014:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003016:	69bb      	ldr	r3, [r7, #24]
 8003018:	3302      	adds	r3, #2
 800301a:	61bb      	str	r3, [r7, #24]
 800301c:	e007      	b.n	800302e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800301e:	69fb      	ldr	r3, [r7, #28]
 8003020:	781a      	ldrb	r2, [r3, #0]
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003028:	69fb      	ldr	r3, [r7, #28]
 800302a:	3301      	adds	r3, #1
 800302c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003032:	b29b      	uxth	r3, r3
 8003034:	3b01      	subs	r3, #1
 8003036:	b29a      	uxth	r2, r3
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003040:	b29b      	uxth	r3, r3
 8003042:	2b00      	cmp	r3, #0
 8003044:	d1cf      	bne.n	8002fe6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	9300      	str	r3, [sp, #0]
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	2200      	movs	r2, #0
 800304e:	2140      	movs	r1, #64	; 0x40
 8003050:	68f8      	ldr	r0, [r7, #12]
 8003052:	f000 fac9 	bl	80035e8 <UART_WaitOnFlagUntilTimeout>
 8003056:	4603      	mov	r3, r0
 8003058:	2b00      	cmp	r3, #0
 800305a:	d001      	beq.n	8003060 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800305c:	2303      	movs	r3, #3
 800305e:	e006      	b.n	800306e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2220      	movs	r2, #32
 8003064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003068:	2300      	movs	r3, #0
 800306a:	e000      	b.n	800306e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800306c:	2302      	movs	r3, #2
  }
}
 800306e:	4618      	mov	r0, r3
 8003070:	3720      	adds	r7, #32
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}
	...

08003078 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b0ba      	sub	sp, #232	; 0xe8
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	68db      	ldr	r3, [r3, #12]
 8003090:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	695b      	ldr	r3, [r3, #20]
 800309a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800309e:	2300      	movs	r3, #0
 80030a0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80030a4:	2300      	movs	r3, #0
 80030a6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80030aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030ae:	f003 030f 	and.w	r3, r3, #15
 80030b2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80030b6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d10f      	bne.n	80030de <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80030be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030c2:	f003 0320 	and.w	r3, r3, #32
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d009      	beq.n	80030de <HAL_UART_IRQHandler+0x66>
 80030ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030ce:	f003 0320 	and.w	r3, r3, #32
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d003      	beq.n	80030de <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80030d6:	6878      	ldr	r0, [r7, #4]
 80030d8:	f000 fbd3 	bl	8003882 <UART_Receive_IT>
      return;
 80030dc:	e256      	b.n	800358c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80030de:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	f000 80de 	beq.w	80032a4 <HAL_UART_IRQHandler+0x22c>
 80030e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80030ec:	f003 0301 	and.w	r3, r3, #1
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d106      	bne.n	8003102 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80030f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030f8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	f000 80d1 	beq.w	80032a4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003102:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003106:	f003 0301 	and.w	r3, r3, #1
 800310a:	2b00      	cmp	r3, #0
 800310c:	d00b      	beq.n	8003126 <HAL_UART_IRQHandler+0xae>
 800310e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003112:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003116:	2b00      	cmp	r3, #0
 8003118:	d005      	beq.n	8003126 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800311e:	f043 0201 	orr.w	r2, r3, #1
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003126:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800312a:	f003 0304 	and.w	r3, r3, #4
 800312e:	2b00      	cmp	r3, #0
 8003130:	d00b      	beq.n	800314a <HAL_UART_IRQHandler+0xd2>
 8003132:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003136:	f003 0301 	and.w	r3, r3, #1
 800313a:	2b00      	cmp	r3, #0
 800313c:	d005      	beq.n	800314a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003142:	f043 0202 	orr.w	r2, r3, #2
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800314a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800314e:	f003 0302 	and.w	r3, r3, #2
 8003152:	2b00      	cmp	r3, #0
 8003154:	d00b      	beq.n	800316e <HAL_UART_IRQHandler+0xf6>
 8003156:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800315a:	f003 0301 	and.w	r3, r3, #1
 800315e:	2b00      	cmp	r3, #0
 8003160:	d005      	beq.n	800316e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003166:	f043 0204 	orr.w	r2, r3, #4
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800316e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003172:	f003 0308 	and.w	r3, r3, #8
 8003176:	2b00      	cmp	r3, #0
 8003178:	d011      	beq.n	800319e <HAL_UART_IRQHandler+0x126>
 800317a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800317e:	f003 0320 	and.w	r3, r3, #32
 8003182:	2b00      	cmp	r3, #0
 8003184:	d105      	bne.n	8003192 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003186:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800318a:	f003 0301 	and.w	r3, r3, #1
 800318e:	2b00      	cmp	r3, #0
 8003190:	d005      	beq.n	800319e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003196:	f043 0208 	orr.w	r2, r3, #8
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	f000 81ed 	beq.w	8003582 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80031a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031ac:	f003 0320 	and.w	r3, r3, #32
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d008      	beq.n	80031c6 <HAL_UART_IRQHandler+0x14e>
 80031b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031b8:	f003 0320 	and.w	r3, r3, #32
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d002      	beq.n	80031c6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80031c0:	6878      	ldr	r0, [r7, #4]
 80031c2:	f000 fb5e 	bl	8003882 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	695b      	ldr	r3, [r3, #20]
 80031cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031d0:	2b40      	cmp	r3, #64	; 0x40
 80031d2:	bf0c      	ite	eq
 80031d4:	2301      	moveq	r3, #1
 80031d6:	2300      	movne	r3, #0
 80031d8:	b2db      	uxtb	r3, r3
 80031da:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e2:	f003 0308 	and.w	r3, r3, #8
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d103      	bne.n	80031f2 <HAL_UART_IRQHandler+0x17a>
 80031ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d04f      	beq.n	8003292 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80031f2:	6878      	ldr	r0, [r7, #4]
 80031f4:	f000 fa66 	bl	80036c4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	695b      	ldr	r3, [r3, #20]
 80031fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003202:	2b40      	cmp	r3, #64	; 0x40
 8003204:	d141      	bne.n	800328a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	3314      	adds	r3, #20
 800320c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
>>>>>>> AWS
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
<<<<<<< HEAD
 80031f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80031fc:	e853 3f00 	ldrex	r3, [r3]
 8003200:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003204:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003208:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800320c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	3314      	adds	r3, #20
 8003216:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800321a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800321e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
=======
 8003210:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003214:	e853 3f00 	ldrex	r3, [r3]
 8003218:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800321c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003220:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003224:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	3314      	adds	r3, #20
 800322e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003232:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003236:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
>>>>>>> AWS
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
<<<<<<< HEAD
 8003222:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003226:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800322a:	e841 2300 	strex	r3, r2, [r1]
 800322e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003232:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003236:	2b00      	cmp	r3, #0
 8003238:	d1d9      	bne.n	80031ee <HAL_UART_IRQHandler+0x18e>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800323e:	2b00      	cmp	r3, #0
 8003240:	d013      	beq.n	800326a <HAL_UART_IRQHandler+0x20a>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003246:	4a7d      	ldr	r2, [pc, #500]	; (800343c <HAL_UART_IRQHandler+0x3dc>)
 8003248:	651a      	str	r2, [r3, #80]	; 0x50
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800324e:	4618      	mov	r0, r3
 8003250:	f7fd ffe5 	bl	800121e <HAL_DMA_Abort_IT>
 8003254:	4603      	mov	r3, r0
 8003256:	2b00      	cmp	r3, #0
 8003258:	d016      	beq.n	8003288 <HAL_UART_IRQHandler+0x228>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800325e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003260:	687a      	ldr	r2, [r7, #4]
 8003262:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003264:	4610      	mov	r0, r2
 8003266:	4798      	blx	r3
 8003268:	e00e      	b.n	8003288 <HAL_UART_IRQHandler+0x228>
 800326a:	6878      	ldr	r0, [r7, #4]
 800326c:	f000 f99a 	bl	80035a4 <HAL_UART_ErrorCallback>
 8003270:	e00a      	b.n	8003288 <HAL_UART_IRQHandler+0x228>
 8003272:	6878      	ldr	r0, [r7, #4]
 8003274:	f000 f996 	bl	80035a4 <HAL_UART_ErrorCallback>
 8003278:	e006      	b.n	8003288 <HAL_UART_IRQHandler+0x228>
 800327a:	6878      	ldr	r0, [r7, #4]
 800327c:	f000 f992 	bl	80035a4 <HAL_UART_ErrorCallback>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2200      	movs	r2, #0
 8003284:	641a      	str	r2, [r3, #64]	; 0x40
 8003286:	e170      	b.n	800356a <HAL_UART_IRQHandler+0x50a>
 8003288:	bf00      	nop
 800328a:	e16e      	b.n	800356a <HAL_UART_IRQHandler+0x50a>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003290:	2b01      	cmp	r3, #1
 8003292:	f040 814a 	bne.w	800352a <HAL_UART_IRQHandler+0x4ca>
 8003296:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800329a:	f003 0310 	and.w	r3, r3, #16
 800329e:	2b00      	cmp	r3, #0
 80032a0:	f000 8143 	beq.w	800352a <HAL_UART_IRQHandler+0x4ca>
 80032a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032a8:	f003 0310 	and.w	r3, r3, #16
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	f000 813c 	beq.w	800352a <HAL_UART_IRQHandler+0x4ca>
 80032b2:	2300      	movs	r3, #0
 80032b4:	60bb      	str	r3, [r7, #8]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	60bb      	str	r3, [r7, #8]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	60bb      	str	r3, [r7, #8]
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	695b      	ldr	r3, [r3, #20]
 80032ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032d2:	2b40      	cmp	r3, #64	; 0x40
 80032d4:	f040 80b4 	bne.w	8003440 <HAL_UART_IRQHandler+0x3e0>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
 80032e4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	f000 8140 	beq.w	800356e <HAL_UART_IRQHandler+0x50e>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80032f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80032f6:	429a      	cmp	r2, r3
 80032f8:	f080 8139 	bcs.w	800356e <HAL_UART_IRQHandler+0x50e>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003302:	85da      	strh	r2, [r3, #46]	; 0x2e
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003308:	69db      	ldr	r3, [r3, #28]
 800330a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800330e:	f000 8088 	beq.w	8003422 <HAL_UART_IRQHandler+0x3c2>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	330c      	adds	r3, #12
 8003318:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800331c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003320:	e853 3f00 	ldrex	r3, [r3]
 8003324:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003328:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800332c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003330:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	330c      	adds	r3, #12
 800333a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800333e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003342:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003346:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800334a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800334e:	e841 2300 	strex	r3, r2, [r1]
 8003352:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003356:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800335a:	2b00      	cmp	r3, #0
 800335c:	d1d9      	bne.n	8003312 <HAL_UART_IRQHandler+0x2b2>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	3314      	adds	r3, #20
 8003364:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003366:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003368:	e853 3f00 	ldrex	r3, [r3]
 800336c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800336e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003370:	f023 0301 	bic.w	r3, r3, #1
 8003374:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	3314      	adds	r3, #20
 800337e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003382:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003386:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003388:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800338a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800338e:	e841 2300 	strex	r3, r2, [r1]
 8003392:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003394:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003396:	2b00      	cmp	r3, #0
 8003398:	d1e1      	bne.n	800335e <HAL_UART_IRQHandler+0x2fe>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	3314      	adds	r3, #20
 80033a0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80033a4:	e853 3f00 	ldrex	r3, [r3]
 80033a8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80033aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80033b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	3314      	adds	r3, #20
 80033ba:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80033be:	66fa      	str	r2, [r7, #108]	; 0x6c
 80033c0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033c2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80033c4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80033c6:	e841 2300 	strex	r3, r2, [r1]
 80033ca:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80033cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d1e3      	bne.n	800339a <HAL_UART_IRQHandler+0x33a>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2220      	movs	r2, #32
 80033d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2200      	movs	r2, #0
 80033de:	631a      	str	r2, [r3, #48]	; 0x30
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	330c      	adds	r3, #12
 80033e6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033ea:	e853 3f00 	ldrex	r3, [r3]
 80033ee:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80033f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033f2:	f023 0310 	bic.w	r3, r3, #16
 80033f6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	330c      	adds	r3, #12
 8003400:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003404:	65ba      	str	r2, [r7, #88]	; 0x58
 8003406:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003408:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800340a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800340c:	e841 2300 	strex	r3, r2, [r1]
 8003410:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003412:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003414:	2b00      	cmp	r3, #0
 8003416:	d1e3      	bne.n	80033e0 <HAL_UART_IRQHandler+0x380>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800341c:	4618      	mov	r0, r3
 800341e:	f7fd fe8e 	bl	800113e <HAL_DMA_Abort>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800342a:	b29b      	uxth	r3, r3
 800342c:	1ad3      	subs	r3, r2, r3
 800342e:	b29b      	uxth	r3, r3
 8003430:	4619      	mov	r1, r3
 8003432:	6878      	ldr	r0, [r7, #4]
 8003434:	f000 f8c0 	bl	80035b8 <HAL_UARTEx_RxEventCallback>
 8003438:	e099      	b.n	800356e <HAL_UART_IRQHandler+0x50e>
 800343a:	bf00      	nop
 800343c:	08003773 	.word	0x08003773
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003448:	b29b      	uxth	r3, r3
 800344a:	1ad3      	subs	r3, r2, r3
 800344c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003454:	b29b      	uxth	r3, r3
 8003456:	2b00      	cmp	r3, #0
 8003458:	f000 808b 	beq.w	8003572 <HAL_UART_IRQHandler+0x512>
 800345c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003460:	2b00      	cmp	r3, #0
 8003462:	f000 8086 	beq.w	8003572 <HAL_UART_IRQHandler+0x512>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	330c      	adds	r3, #12
 800346c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800346e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003470:	e853 3f00 	ldrex	r3, [r3]
 8003474:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003476:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003478:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800347c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	330c      	adds	r3, #12
 8003486:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800348a:	647a      	str	r2, [r7, #68]	; 0x44
 800348c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800348e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003490:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003492:	e841 2300 	strex	r3, r2, [r1]
 8003496:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003498:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800349a:	2b00      	cmp	r3, #0
 800349c:	d1e3      	bne.n	8003466 <HAL_UART_IRQHandler+0x406>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	3314      	adds	r3, #20
 80034a4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a8:	e853 3f00 	ldrex	r3, [r3]
 80034ac:	623b      	str	r3, [r7, #32]
   return(result);
 80034ae:	6a3b      	ldr	r3, [r7, #32]
 80034b0:	f023 0301 	bic.w	r3, r3, #1
 80034b4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	3314      	adds	r3, #20
 80034be:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80034c2:	633a      	str	r2, [r7, #48]	; 0x30
 80034c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80034c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034ca:	e841 2300 	strex	r3, r2, [r1]
 80034ce:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80034d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d1e3      	bne.n	800349e <HAL_UART_IRQHandler+0x43e>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2220      	movs	r2, #32
 80034da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2200      	movs	r2, #0
 80034e2:	631a      	str	r2, [r3, #48]	; 0x30
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	330c      	adds	r3, #12
 80034ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034ec:	693b      	ldr	r3, [r7, #16]
 80034ee:	e853 3f00 	ldrex	r3, [r3]
 80034f2:	60fb      	str	r3, [r7, #12]
   return(result);
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	f023 0310 	bic.w	r3, r3, #16
 80034fa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	330c      	adds	r3, #12
 8003504:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003508:	61fa      	str	r2, [r7, #28]
 800350a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800350c:	69b9      	ldr	r1, [r7, #24]
 800350e:	69fa      	ldr	r2, [r7, #28]
 8003510:	e841 2300 	strex	r3, r2, [r1]
 8003514:	617b      	str	r3, [r7, #20]
   return(result);
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d1e3      	bne.n	80034e4 <HAL_UART_IRQHandler+0x484>
 800351c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003520:	4619      	mov	r1, r3
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	f000 f848 	bl	80035b8 <HAL_UARTEx_RxEventCallback>
 8003528:	e023      	b.n	8003572 <HAL_UART_IRQHandler+0x512>
 800352a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800352e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003532:	2b00      	cmp	r3, #0
 8003534:	d009      	beq.n	800354a <HAL_UART_IRQHandler+0x4ea>
 8003536:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800353a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800353e:	2b00      	cmp	r3, #0
 8003540:	d003      	beq.n	800354a <HAL_UART_IRQHandler+0x4ea>
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	f000 f929 	bl	800379a <UART_Transmit_IT>
 8003548:	e014      	b.n	8003574 <HAL_UART_IRQHandler+0x514>
 800354a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800354e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003552:	2b00      	cmp	r3, #0
 8003554:	d00e      	beq.n	8003574 <HAL_UART_IRQHandler+0x514>
 8003556:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800355a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800355e:	2b00      	cmp	r3, #0
 8003560:	d008      	beq.n	8003574 <HAL_UART_IRQHandler+0x514>
 8003562:	6878      	ldr	r0, [r7, #4]
 8003564:	f000 f969 	bl	800383a <UART_EndTransmit_IT>
 8003568:	e004      	b.n	8003574 <HAL_UART_IRQHandler+0x514>
 800356a:	bf00      	nop
 800356c:	e002      	b.n	8003574 <HAL_UART_IRQHandler+0x514>
 800356e:	bf00      	nop
 8003570:	e000      	b.n	8003574 <HAL_UART_IRQHandler+0x514>
 8003572:	bf00      	nop
 8003574:	37e8      	adds	r7, #232	; 0xe8
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}
 800357a:	bf00      	nop

0800357c <HAL_UART_TxCpltCallback>:
 800357c:	b480      	push	{r7}
 800357e:	b083      	sub	sp, #12
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
 8003584:	bf00      	nop
 8003586:	370c      	adds	r7, #12
 8003588:	46bd      	mov	sp, r7
 800358a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358e:	4770      	bx	lr

08003590 <HAL_UART_RxCpltCallback>:
 8003590:	b480      	push	{r7}
 8003592:	b083      	sub	sp, #12
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
 8003598:	bf00      	nop
 800359a:	370c      	adds	r7, #12
 800359c:	46bd      	mov	sp, r7
 800359e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a2:	4770      	bx	lr

080035a4 <HAL_UART_ErrorCallback>:
 80035a4:	b480      	push	{r7}
 80035a6:	b083      	sub	sp, #12
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
 80035ac:	bf00      	nop
 80035ae:	370c      	adds	r7, #12
 80035b0:	46bd      	mov	sp, r7
 80035b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b6:	4770      	bx	lr

080035b8 <HAL_UARTEx_RxEventCallback>:
 80035b8:	b480      	push	{r7}
 80035ba:	b083      	sub	sp, #12
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
 80035c0:	460b      	mov	r3, r1
 80035c2:	807b      	strh	r3, [r7, #2]
=======
 800323a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800323e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003242:	e841 2300 	strex	r3, r2, [r1]
 8003246:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800324a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800324e:	2b00      	cmp	r3, #0
 8003250:	d1d9      	bne.n	8003206 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003256:	2b00      	cmp	r3, #0
 8003258:	d013      	beq.n	8003282 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800325e:	4a7d      	ldr	r2, [pc, #500]	; (8003454 <HAL_UART_IRQHandler+0x3dc>)
 8003260:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003266:	4618      	mov	r0, r3
 8003268:	f7fd ffe5 	bl	8001236 <HAL_DMA_Abort_IT>
 800326c:	4603      	mov	r3, r0
 800326e:	2b00      	cmp	r3, #0
 8003270:	d016      	beq.n	80032a0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003276:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003278:	687a      	ldr	r2, [r7, #4]
 800327a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800327c:	4610      	mov	r0, r2
 800327e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003280:	e00e      	b.n	80032a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003282:	6878      	ldr	r0, [r7, #4]
 8003284:	f000 f99a 	bl	80035bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003288:	e00a      	b.n	80032a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800328a:	6878      	ldr	r0, [r7, #4]
 800328c:	f000 f996 	bl	80035bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003290:	e006      	b.n	80032a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003292:	6878      	ldr	r0, [r7, #4]
 8003294:	f000 f992 	bl	80035bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2200      	movs	r2, #0
 800329c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800329e:	e170      	b.n	8003582 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032a0:	bf00      	nop
    return;
 80032a2:	e16e      	b.n	8003582 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032a8:	2b01      	cmp	r3, #1
 80032aa:	f040 814a 	bne.w	8003542 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80032ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032b2:	f003 0310 	and.w	r3, r3, #16
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	f000 8143 	beq.w	8003542 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80032bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032c0:	f003 0310 	and.w	r3, r3, #16
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	f000 813c 	beq.w	8003542 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80032ca:	2300      	movs	r3, #0
 80032cc:	60bb      	str	r3, [r7, #8]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	60bb      	str	r3, [r7, #8]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	60bb      	str	r3, [r7, #8]
 80032de:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	695b      	ldr	r3, [r3, #20]
 80032e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032ea:	2b40      	cmp	r3, #64	; 0x40
 80032ec:	f040 80b4 	bne.w	8003458 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80032fc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003300:	2b00      	cmp	r3, #0
 8003302:	f000 8140 	beq.w	8003586 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800330a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800330e:	429a      	cmp	r2, r3
 8003310:	f080 8139 	bcs.w	8003586 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800331a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003320:	69db      	ldr	r3, [r3, #28]
 8003322:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003326:	f000 8088 	beq.w	800343a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	330c      	adds	r3, #12
 8003330:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003334:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003338:	e853 3f00 	ldrex	r3, [r3]
 800333c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003340:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003344:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003348:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	330c      	adds	r3, #12
 8003352:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003356:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800335a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800335e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003362:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003366:	e841 2300 	strex	r3, r2, [r1]
 800336a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800336e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003372:	2b00      	cmp	r3, #0
 8003374:	d1d9      	bne.n	800332a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	3314      	adds	r3, #20
 800337c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800337e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003380:	e853 3f00 	ldrex	r3, [r3]
 8003384:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003386:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003388:	f023 0301 	bic.w	r3, r3, #1
 800338c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	3314      	adds	r3, #20
 8003396:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800339a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800339e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033a0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80033a2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80033a6:	e841 2300 	strex	r3, r2, [r1]
 80033aa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80033ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d1e1      	bne.n	8003376 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	3314      	adds	r3, #20
 80033b8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80033bc:	e853 3f00 	ldrex	r3, [r3]
 80033c0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80033c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80033c8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	3314      	adds	r3, #20
 80033d2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80033d6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80033d8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033da:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80033dc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80033de:	e841 2300 	strex	r3, r2, [r1]
 80033e2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80033e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d1e3      	bne.n	80033b2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2220      	movs	r2, #32
 80033ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2200      	movs	r2, #0
 80033f6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	330c      	adds	r3, #12
 80033fe:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003400:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003402:	e853 3f00 	ldrex	r3, [r3]
 8003406:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003408:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800340a:	f023 0310 	bic.w	r3, r3, #16
 800340e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	330c      	adds	r3, #12
 8003418:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800341c:	65ba      	str	r2, [r7, #88]	; 0x58
 800341e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003420:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003422:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003424:	e841 2300 	strex	r3, r2, [r1]
 8003428:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800342a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800342c:	2b00      	cmp	r3, #0
 800342e:	d1e3      	bne.n	80033f8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003434:	4618      	mov	r0, r3
 8003436:	f7fd fe8e 	bl	8001156 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003442:	b29b      	uxth	r3, r3
 8003444:	1ad3      	subs	r3, r2, r3
 8003446:	b29b      	uxth	r3, r3
 8003448:	4619      	mov	r1, r3
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	f000 f8c0 	bl	80035d0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003450:	e099      	b.n	8003586 <HAL_UART_IRQHandler+0x50e>
 8003452:	bf00      	nop
 8003454:	0800378b 	.word	0x0800378b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003460:	b29b      	uxth	r3, r3
 8003462:	1ad3      	subs	r3, r2, r3
 8003464:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800346c:	b29b      	uxth	r3, r3
 800346e:	2b00      	cmp	r3, #0
 8003470:	f000 808b 	beq.w	800358a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003474:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003478:	2b00      	cmp	r3, #0
 800347a:	f000 8086 	beq.w	800358a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	330c      	adds	r3, #12
 8003484:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003486:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003488:	e853 3f00 	ldrex	r3, [r3]
 800348c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800348e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003490:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003494:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	330c      	adds	r3, #12
 800349e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80034a2:	647a      	str	r2, [r7, #68]	; 0x44
 80034a4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034a6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80034a8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80034aa:	e841 2300 	strex	r3, r2, [r1]
 80034ae:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80034b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d1e3      	bne.n	800347e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	3314      	adds	r3, #20
 80034bc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c0:	e853 3f00 	ldrex	r3, [r3]
 80034c4:	623b      	str	r3, [r7, #32]
   return(result);
 80034c6:	6a3b      	ldr	r3, [r7, #32]
 80034c8:	f023 0301 	bic.w	r3, r3, #1
 80034cc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	3314      	adds	r3, #20
 80034d6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80034da:	633a      	str	r2, [r7, #48]	; 0x30
 80034dc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80034e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034e2:	e841 2300 	strex	r3, r2, [r1]
 80034e6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80034e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d1e3      	bne.n	80034b6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2220      	movs	r2, #32
 80034f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2200      	movs	r2, #0
 80034fa:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	330c      	adds	r3, #12
 8003502:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003504:	693b      	ldr	r3, [r7, #16]
 8003506:	e853 3f00 	ldrex	r3, [r3]
 800350a:	60fb      	str	r3, [r7, #12]
   return(result);
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	f023 0310 	bic.w	r3, r3, #16
 8003512:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	330c      	adds	r3, #12
 800351c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003520:	61fa      	str	r2, [r7, #28]
 8003522:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003524:	69b9      	ldr	r1, [r7, #24]
 8003526:	69fa      	ldr	r2, [r7, #28]
 8003528:	e841 2300 	strex	r3, r2, [r1]
 800352c:	617b      	str	r3, [r7, #20]
   return(result);
 800352e:	697b      	ldr	r3, [r7, #20]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d1e3      	bne.n	80034fc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003534:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003538:	4619      	mov	r1, r3
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	f000 f848 	bl	80035d0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003540:	e023      	b.n	800358a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003542:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003546:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800354a:	2b00      	cmp	r3, #0
 800354c:	d009      	beq.n	8003562 <HAL_UART_IRQHandler+0x4ea>
 800354e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003552:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003556:	2b00      	cmp	r3, #0
 8003558:	d003      	beq.n	8003562 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	f000 f929 	bl	80037b2 <UART_Transmit_IT>
    return;
 8003560:	e014      	b.n	800358c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003562:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003566:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800356a:	2b00      	cmp	r3, #0
 800356c:	d00e      	beq.n	800358c <HAL_UART_IRQHandler+0x514>
 800356e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003572:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003576:	2b00      	cmp	r3, #0
 8003578:	d008      	beq.n	800358c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	f000 f969 	bl	8003852 <UART_EndTransmit_IT>
    return;
 8003580:	e004      	b.n	800358c <HAL_UART_IRQHandler+0x514>
    return;
 8003582:	bf00      	nop
 8003584:	e002      	b.n	800358c <HAL_UART_IRQHandler+0x514>
      return;
 8003586:	bf00      	nop
 8003588:	e000      	b.n	800358c <HAL_UART_IRQHandler+0x514>
      return;
 800358a:	bf00      	nop
  }
}
 800358c:	37e8      	adds	r7, #232	; 0xe8
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}
 8003592:	bf00      	nop

08003594 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003594:	b480      	push	{r7}
 8003596:	b083      	sub	sp, #12
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800359c:	bf00      	nop
 800359e:	370c      	adds	r7, #12
 80035a0:	46bd      	mov	sp, r7
 80035a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a6:	4770      	bx	lr

080035a8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80035a8:	b480      	push	{r7}
 80035aa:	b083      	sub	sp, #12
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80035b0:	bf00      	nop
 80035b2:	370c      	adds	r7, #12
 80035b4:	46bd      	mov	sp, r7
 80035b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ba:	4770      	bx	lr

080035bc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80035bc:	b480      	push	{r7}
 80035be:	b083      	sub	sp, #12
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
>>>>>>> AWS
 80035c4:	bf00      	nop
 80035c6:	370c      	adds	r7, #12
 80035c8:	46bd      	mov	sp, r7
 80035ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ce:	4770      	bx	lr

<<<<<<< HEAD
080035d0 <UART_WaitOnFlagUntilTimeout>:
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b090      	sub	sp, #64	; 0x40
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	60f8      	str	r0, [r7, #12]
 80035d8:	60b9      	str	r1, [r7, #8]
 80035da:	603b      	str	r3, [r7, #0]
 80035dc:	4613      	mov	r3, r2
 80035de:	71fb      	strb	r3, [r7, #7]
 80035e0:	e050      	b.n	8003684 <UART_WaitOnFlagUntilTimeout+0xb4>
 80035e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035e8:	d04c      	beq.n	8003684 <UART_WaitOnFlagUntilTimeout+0xb4>
 80035ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d007      	beq.n	8003600 <UART_WaitOnFlagUntilTimeout+0x30>
 80035f0:	f7fd fc88 	bl	8000f04 <HAL_GetTick>
 80035f4:	4602      	mov	r2, r0
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	1ad3      	subs	r3, r2, r3
 80035fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80035fc:	429a      	cmp	r2, r3
 80035fe:	d241      	bcs.n	8003684 <UART_WaitOnFlagUntilTimeout+0xb4>
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	330c      	adds	r3, #12
 8003606:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800360a:	e853 3f00 	ldrex	r3, [r3]
 800360e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003612:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003616:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	330c      	adds	r3, #12
 800361e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003620:	637a      	str	r2, [r7, #52]	; 0x34
 8003622:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003624:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003626:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003628:	e841 2300 	strex	r3, r2, [r1]
 800362c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800362e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003630:	2b00      	cmp	r3, #0
 8003632:	d1e5      	bne.n	8003600 <UART_WaitOnFlagUntilTimeout+0x30>
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	3314      	adds	r3, #20
 800363a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800363c:	697b      	ldr	r3, [r7, #20]
 800363e:	e853 3f00 	ldrex	r3, [r3]
 8003642:	613b      	str	r3, [r7, #16]
   return(result);
 8003644:	693b      	ldr	r3, [r7, #16]
 8003646:	f023 0301 	bic.w	r3, r3, #1
 800364a:	63bb      	str	r3, [r7, #56]	; 0x38
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	3314      	adds	r3, #20
 8003652:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003654:	623a      	str	r2, [r7, #32]
 8003656:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003658:	69f9      	ldr	r1, [r7, #28]
 800365a:	6a3a      	ldr	r2, [r7, #32]
 800365c:	e841 2300 	strex	r3, r2, [r1]
 8003660:	61bb      	str	r3, [r7, #24]
   return(result);
 8003662:	69bb      	ldr	r3, [r7, #24]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d1e5      	bne.n	8003634 <UART_WaitOnFlagUntilTimeout+0x64>
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2220      	movs	r2, #32
 800366c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	2220      	movs	r2, #32
 8003674:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	2200      	movs	r2, #0
 800367c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003680:	2303      	movs	r3, #3
 8003682:	e00f      	b.n	80036a4 <UART_WaitOnFlagUntilTimeout+0xd4>
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	681a      	ldr	r2, [r3, #0]
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	4013      	ands	r3, r2
 800368e:	68ba      	ldr	r2, [r7, #8]
 8003690:	429a      	cmp	r2, r3
 8003692:	bf0c      	ite	eq
 8003694:	2301      	moveq	r3, #1
 8003696:	2300      	movne	r3, #0
 8003698:	b2db      	uxtb	r3, r3
 800369a:	461a      	mov	r2, r3
 800369c:	79fb      	ldrb	r3, [r7, #7]
 800369e:	429a      	cmp	r2, r3
 80036a0:	d09f      	beq.n	80035e2 <UART_WaitOnFlagUntilTimeout+0x12>
 80036a2:	2300      	movs	r3, #0
 80036a4:	4618      	mov	r0, r3
 80036a6:	3740      	adds	r7, #64	; 0x40
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bd80      	pop	{r7, pc}

080036ac <UART_EndRxTransfer>:
 80036ac:	b480      	push	{r7}
 80036ae:	b095      	sub	sp, #84	; 0x54
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	330c      	adds	r3, #12
 80036ba:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036be:	e853 3f00 	ldrex	r3, [r3]
 80036c2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80036c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036c6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80036ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	330c      	adds	r3, #12
 80036d2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80036d4:	643a      	str	r2, [r7, #64]	; 0x40
 80036d6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036d8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80036da:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80036dc:	e841 2300 	strex	r3, r2, [r1]
 80036e0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80036e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d1e5      	bne.n	80036b4 <UART_EndRxTransfer+0x8>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	3314      	adds	r3, #20
 80036ee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036f0:	6a3b      	ldr	r3, [r7, #32]
 80036f2:	e853 3f00 	ldrex	r3, [r3]
 80036f6:	61fb      	str	r3, [r7, #28]
   return(result);
 80036f8:	69fb      	ldr	r3, [r7, #28]
 80036fa:	f023 0301 	bic.w	r3, r3, #1
 80036fe:	64bb      	str	r3, [r7, #72]	; 0x48
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	3314      	adds	r3, #20
 8003706:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003708:	62fa      	str	r2, [r7, #44]	; 0x2c
 800370a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800370c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800370e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003710:	e841 2300 	strex	r3, r2, [r1]
 8003714:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003718:	2b00      	cmp	r3, #0
 800371a:	d1e5      	bne.n	80036e8 <UART_EndRxTransfer+0x3c>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003720:	2b01      	cmp	r3, #1
 8003722:	d119      	bne.n	8003758 <UART_EndRxTransfer+0xac>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	330c      	adds	r3, #12
 800372a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	e853 3f00 	ldrex	r3, [r3]
 8003732:	60bb      	str	r3, [r7, #8]
   return(result);
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	f023 0310 	bic.w	r3, r3, #16
 800373a:	647b      	str	r3, [r7, #68]	; 0x44
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	330c      	adds	r3, #12
 8003742:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003744:	61ba      	str	r2, [r7, #24]
 8003746:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003748:	6979      	ldr	r1, [r7, #20]
 800374a:	69ba      	ldr	r2, [r7, #24]
 800374c:	e841 2300 	strex	r3, r2, [r1]
 8003750:	613b      	str	r3, [r7, #16]
   return(result);
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d1e5      	bne.n	8003724 <UART_EndRxTransfer+0x78>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2220      	movs	r2, #32
 800375c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2200      	movs	r2, #0
 8003764:	631a      	str	r2, [r3, #48]	; 0x30
 8003766:	bf00      	nop
 8003768:	3754      	adds	r7, #84	; 0x54
 800376a:	46bd      	mov	sp, r7
 800376c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003770:	4770      	bx	lr

08003772 <UART_DMAAbortOnError>:
 8003772:	b580      	push	{r7, lr}
 8003774:	b084      	sub	sp, #16
 8003776:	af00      	add	r7, sp, #0
 8003778:	6078      	str	r0, [r7, #4]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800377e:	60fb      	str	r3, [r7, #12]
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2200      	movs	r2, #0
 8003784:	85da      	strh	r2, [r3, #46]	; 0x2e
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	2200      	movs	r2, #0
 800378a:	84da      	strh	r2, [r3, #38]	; 0x26
 800378c:	68f8      	ldr	r0, [r7, #12]
 800378e:	f7ff ff09 	bl	80035a4 <HAL_UART_ErrorCallback>
 8003792:	bf00      	nop
 8003794:	3710      	adds	r7, #16
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}

0800379a <UART_Transmit_IT>:
 800379a:	b480      	push	{r7}
 800379c:	b085      	sub	sp, #20
 800379e:	af00      	add	r7, sp, #0
 80037a0:	6078      	str	r0, [r7, #4]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	2b21      	cmp	r3, #33	; 0x21
 80037ac:	d13e      	bne.n	800382c <UART_Transmit_IT+0x92>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037b6:	d114      	bne.n	80037e2 <UART_Transmit_IT+0x48>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	691b      	ldr	r3, [r3, #16]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d110      	bne.n	80037e2 <UART_Transmit_IT+0x48>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6a1b      	ldr	r3, [r3, #32]
 80037c4:	60fb      	str	r3, [r7, #12]
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	881b      	ldrh	r3, [r3, #0]
 80037ca:	461a      	mov	r2, r3
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80037d4:	605a      	str	r2, [r3, #4]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6a1b      	ldr	r3, [r3, #32]
 80037da:	1c9a      	adds	r2, r3, #2
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	621a      	str	r2, [r3, #32]
 80037e0:	e008      	b.n	80037f4 <UART_Transmit_IT+0x5a>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6a1b      	ldr	r3, [r3, #32]
 80037e6:	1c59      	adds	r1, r3, #1
 80037e8:	687a      	ldr	r2, [r7, #4]
 80037ea:	6211      	str	r1, [r2, #32]
 80037ec:	781a      	ldrb	r2, [r3, #0]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	605a      	str	r2, [r3, #4]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80037f8:	b29b      	uxth	r3, r3
 80037fa:	3b01      	subs	r3, #1
 80037fc:	b29b      	uxth	r3, r3
 80037fe:	687a      	ldr	r2, [r7, #4]
 8003800:	4619      	mov	r1, r3
 8003802:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003804:	2b00      	cmp	r3, #0
 8003806:	d10f      	bne.n	8003828 <UART_Transmit_IT+0x8e>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	68da      	ldr	r2, [r3, #12]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003816:	60da      	str	r2, [r3, #12]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	68da      	ldr	r2, [r3, #12]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003826:	60da      	str	r2, [r3, #12]
 8003828:	2300      	movs	r3, #0
 800382a:	e000      	b.n	800382e <UART_Transmit_IT+0x94>
 800382c:	2302      	movs	r3, #2
 800382e:	4618      	mov	r0, r3
 8003830:	3714      	adds	r7, #20
 8003832:	46bd      	mov	sp, r7
 8003834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003838:	4770      	bx	lr

0800383a <UART_EndTransmit_IT>:
 800383a:	b580      	push	{r7, lr}
 800383c:	b082      	sub	sp, #8
 800383e:	af00      	add	r7, sp, #0
 8003840:	6078      	str	r0, [r7, #4]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	68da      	ldr	r2, [r3, #12]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003850:	60da      	str	r2, [r3, #12]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2220      	movs	r2, #32
 8003856:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	f7ff fe8e 	bl	800357c <HAL_UART_TxCpltCallback>
 8003860:	2300      	movs	r3, #0
 8003862:	4618      	mov	r0, r3
 8003864:	3708      	adds	r7, #8
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}

0800386a <UART_Receive_IT>:
 800386a:	b580      	push	{r7, lr}
 800386c:	b08c      	sub	sp, #48	; 0x30
 800386e:	af00      	add	r7, sp, #0
 8003870:	6078      	str	r0, [r7, #4]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003878:	b2db      	uxtb	r3, r3
 800387a:	2b22      	cmp	r3, #34	; 0x22
 800387c:	f040 80ab 	bne.w	80039d6 <UART_Receive_IT+0x16c>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	689b      	ldr	r3, [r3, #8]
 8003884:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003888:	d117      	bne.n	80038ba <UART_Receive_IT+0x50>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	691b      	ldr	r3, [r3, #16]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d113      	bne.n	80038ba <UART_Receive_IT+0x50>
 8003892:	2300      	movs	r3, #0
 8003894:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800389a:	62bb      	str	r3, [r7, #40]	; 0x28
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	b29b      	uxth	r3, r3
 80038a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038a8:	b29a      	uxth	r2, r3
 80038aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038ac:	801a      	strh	r2, [r3, #0]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038b2:	1c9a      	adds	r2, r3, #2
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	629a      	str	r2, [r3, #40]	; 0x28
 80038b8:	e026      	b.n	8003908 <UART_Receive_IT+0x9e>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038c0:	2300      	movs	r3, #0
 80038c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038cc:	d007      	beq.n	80038de <UART_Receive_IT+0x74>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	689b      	ldr	r3, [r3, #8]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d10a      	bne.n	80038ec <UART_Receive_IT+0x82>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	691b      	ldr	r3, [r3, #16]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d106      	bne.n	80038ec <UART_Receive_IT+0x82>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	b2da      	uxtb	r2, r3
 80038e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038e8:	701a      	strb	r2, [r3, #0]
 80038ea:	e008      	b.n	80038fe <UART_Receive_IT+0x94>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	b2db      	uxtb	r3, r3
 80038f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80038f8:	b2da      	uxtb	r2, r3
 80038fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038fc:	701a      	strb	r2, [r3, #0]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003902:	1c5a      	adds	r2, r3, #1
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	629a      	str	r2, [r3, #40]	; 0x28
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800390c:	b29b      	uxth	r3, r3
 800390e:	3b01      	subs	r3, #1
 8003910:	b29b      	uxth	r3, r3
 8003912:	687a      	ldr	r2, [r7, #4]
 8003914:	4619      	mov	r1, r3
 8003916:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003918:	2b00      	cmp	r3, #0
 800391a:	d15a      	bne.n	80039d2 <UART_Receive_IT+0x168>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	68da      	ldr	r2, [r3, #12]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f022 0220 	bic.w	r2, r2, #32
 800392a:	60da      	str	r2, [r3, #12]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	68da      	ldr	r2, [r3, #12]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800393a:	60da      	str	r2, [r3, #12]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	695a      	ldr	r2, [r3, #20]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f022 0201 	bic.w	r2, r2, #1
 800394a:	615a      	str	r2, [r3, #20]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2220      	movs	r2, #32
 8003950:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003958:	2b01      	cmp	r3, #1
 800395a:	d135      	bne.n	80039c8 <UART_Receive_IT+0x15e>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2200      	movs	r2, #0
 8003960:	631a      	str	r2, [r3, #48]	; 0x30
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	330c      	adds	r3, #12
 8003968:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	e853 3f00 	ldrex	r3, [r3]
 8003970:	613b      	str	r3, [r7, #16]
   return(result);
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	f023 0310 	bic.w	r3, r3, #16
 8003978:	627b      	str	r3, [r7, #36]	; 0x24
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	330c      	adds	r3, #12
 8003980:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003982:	623a      	str	r2, [r7, #32]
 8003984:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003986:	69f9      	ldr	r1, [r7, #28]
 8003988:	6a3a      	ldr	r2, [r7, #32]
 800398a:	e841 2300 	strex	r3, r2, [r1]
 800398e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003990:	69bb      	ldr	r3, [r7, #24]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d1e5      	bne.n	8003962 <UART_Receive_IT+0xf8>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f003 0310 	and.w	r3, r3, #16
 80039a0:	2b10      	cmp	r3, #16
 80039a2:	d10a      	bne.n	80039ba <UART_Receive_IT+0x150>
 80039a4:	2300      	movs	r3, #0
 80039a6:	60fb      	str	r3, [r7, #12]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	60fb      	str	r3, [r7, #12]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	60fb      	str	r3, [r7, #12]
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80039be:	4619      	mov	r1, r3
 80039c0:	6878      	ldr	r0, [r7, #4]
 80039c2:	f7ff fdf9 	bl	80035b8 <HAL_UARTEx_RxEventCallback>
 80039c6:	e002      	b.n	80039ce <UART_Receive_IT+0x164>
 80039c8:	6878      	ldr	r0, [r7, #4]
 80039ca:	f7ff fde1 	bl	8003590 <HAL_UART_RxCpltCallback>
 80039ce:	2300      	movs	r3, #0
 80039d0:	e002      	b.n	80039d8 <UART_Receive_IT+0x16e>
 80039d2:	2300      	movs	r3, #0
 80039d4:	e000      	b.n	80039d8 <UART_Receive_IT+0x16e>
 80039d6:	2302      	movs	r3, #2
 80039d8:	4618      	mov	r0, r3
 80039da:	3730      	adds	r7, #48	; 0x30
 80039dc:	46bd      	mov	sp, r7
 80039de:	bd80      	pop	{r7, pc}

080039e0 <UART_SetConfig>:
 80039e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80039e4:	b0c0      	sub	sp, #256	; 0x100
 80039e6:	af00      	add	r7, sp, #0
 80039e8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
 80039ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	691b      	ldr	r3, [r3, #16]
 80039f4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80039f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039fc:	68d9      	ldr	r1, [r3, #12]
 80039fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a02:	681a      	ldr	r2, [r3, #0]
 8003a04:	ea40 0301 	orr.w	r3, r0, r1
 8003a08:	6113      	str	r3, [r2, #16]
 8003a0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a0e:	689a      	ldr	r2, [r3, #8]
 8003a10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a14:	691b      	ldr	r3, [r3, #16]
 8003a16:	431a      	orrs	r2, r3
 8003a18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a1c:	695b      	ldr	r3, [r3, #20]
 8003a1e:	431a      	orrs	r2, r3
 8003a20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a24:	69db      	ldr	r3, [r3, #28]
 8003a26:	4313      	orrs	r3, r2
 8003a28:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003a2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	68db      	ldr	r3, [r3, #12]
 8003a34:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003a38:	f021 010c 	bic.w	r1, r1, #12
 8003a3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a40:	681a      	ldr	r2, [r3, #0]
 8003a42:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003a46:	430b      	orrs	r3, r1
 8003a48:	60d3      	str	r3, [r2, #12]
 8003a4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	695b      	ldr	r3, [r3, #20]
 8003a52:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003a56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a5a:	6999      	ldr	r1, [r3, #24]
 8003a5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a60:	681a      	ldr	r2, [r3, #0]
 8003a62:	ea40 0301 	orr.w	r3, r0, r1
 8003a66:	6153      	str	r3, [r2, #20]
 8003a68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a6c:	681a      	ldr	r2, [r3, #0]
 8003a6e:	4b8f      	ldr	r3, [pc, #572]	; (8003cac <UART_SetConfig+0x2cc>)
 8003a70:	429a      	cmp	r2, r3
 8003a72:	d005      	beq.n	8003a80 <UART_SetConfig+0xa0>
 8003a74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a78:	681a      	ldr	r2, [r3, #0]
 8003a7a:	4b8d      	ldr	r3, [pc, #564]	; (8003cb0 <UART_SetConfig+0x2d0>)
 8003a7c:	429a      	cmp	r2, r3
 8003a7e:	d104      	bne.n	8003a8a <UART_SetConfig+0xaa>
 8003a80:	f7fe f9d2 	bl	8001e28 <HAL_RCC_GetPCLK2Freq>
 8003a84:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003a88:	e003      	b.n	8003a92 <UART_SetConfig+0xb2>
 8003a8a:	f7fe f9b9 	bl	8001e00 <HAL_RCC_GetPCLK1Freq>
 8003a8e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003a92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a96:	69db      	ldr	r3, [r3, #28]
 8003a98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a9c:	f040 810c 	bne.w	8003cb8 <UART_SetConfig+0x2d8>
 8003aa0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003aaa:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003aae:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003ab2:	4622      	mov	r2, r4
 8003ab4:	462b      	mov	r3, r5
 8003ab6:	1891      	adds	r1, r2, r2
 8003ab8:	65b9      	str	r1, [r7, #88]	; 0x58
 8003aba:	415b      	adcs	r3, r3
 8003abc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003abe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003ac2:	4621      	mov	r1, r4
 8003ac4:	eb12 0801 	adds.w	r8, r2, r1
 8003ac8:	4629      	mov	r1, r5
 8003aca:	eb43 0901 	adc.w	r9, r3, r1
 8003ace:	f04f 0200 	mov.w	r2, #0
 8003ad2:	f04f 0300 	mov.w	r3, #0
 8003ad6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003ada:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003ade:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003ae2:	4690      	mov	r8, r2
 8003ae4:	4699      	mov	r9, r3
 8003ae6:	4623      	mov	r3, r4
 8003ae8:	eb18 0303 	adds.w	r3, r8, r3
 8003aec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003af0:	462b      	mov	r3, r5
 8003af2:	eb49 0303 	adc.w	r3, r9, r3
 8003af6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003afa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	2200      	movs	r2, #0
 8003b02:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003b06:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003b0a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003b0e:	460b      	mov	r3, r1
 8003b10:	18db      	adds	r3, r3, r3
 8003b12:	653b      	str	r3, [r7, #80]	; 0x50
 8003b14:	4613      	mov	r3, r2
 8003b16:	eb42 0303 	adc.w	r3, r2, r3
 8003b1a:	657b      	str	r3, [r7, #84]	; 0x54
 8003b1c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003b20:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003b24:	f7fc fb56 	bl	80001d4 <__aeabi_uldivmod>
 8003b28:	4602      	mov	r2, r0
 8003b2a:	460b      	mov	r3, r1
 8003b2c:	4b61      	ldr	r3, [pc, #388]	; (8003cb4 <UART_SetConfig+0x2d4>)
 8003b2e:	fba3 2302 	umull	r2, r3, r3, r2
 8003b32:	095b      	lsrs	r3, r3, #5
 8003b34:	011c      	lsls	r4, r3, #4
 8003b36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003b40:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003b44:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003b48:	4642      	mov	r2, r8
 8003b4a:	464b      	mov	r3, r9
 8003b4c:	1891      	adds	r1, r2, r2
 8003b4e:	64b9      	str	r1, [r7, #72]	; 0x48
 8003b50:	415b      	adcs	r3, r3
 8003b52:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b54:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003b58:	4641      	mov	r1, r8
 8003b5a:	eb12 0a01 	adds.w	sl, r2, r1
 8003b5e:	4649      	mov	r1, r9
 8003b60:	eb43 0b01 	adc.w	fp, r3, r1
 8003b64:	f04f 0200 	mov.w	r2, #0
 8003b68:	f04f 0300 	mov.w	r3, #0
 8003b6c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003b70:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003b74:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003b78:	4692      	mov	sl, r2
 8003b7a:	469b      	mov	fp, r3
 8003b7c:	4643      	mov	r3, r8
 8003b7e:	eb1a 0303 	adds.w	r3, sl, r3
 8003b82:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003b86:	464b      	mov	r3, r9
 8003b88:	eb4b 0303 	adc.w	r3, fp, r3
 8003b8c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003b90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	2200      	movs	r2, #0
 8003b98:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003b9c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003ba0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003ba4:	460b      	mov	r3, r1
 8003ba6:	18db      	adds	r3, r3, r3
 8003ba8:	643b      	str	r3, [r7, #64]	; 0x40
 8003baa:	4613      	mov	r3, r2
 8003bac:	eb42 0303 	adc.w	r3, r2, r3
 8003bb0:	647b      	str	r3, [r7, #68]	; 0x44
 8003bb2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003bb6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003bba:	f7fc fb0b 	bl	80001d4 <__aeabi_uldivmod>
 8003bbe:	4602      	mov	r2, r0
 8003bc0:	460b      	mov	r3, r1
 8003bc2:	4611      	mov	r1, r2
 8003bc4:	4b3b      	ldr	r3, [pc, #236]	; (8003cb4 <UART_SetConfig+0x2d4>)
 8003bc6:	fba3 2301 	umull	r2, r3, r3, r1
 8003bca:	095b      	lsrs	r3, r3, #5
 8003bcc:	2264      	movs	r2, #100	; 0x64
 8003bce:	fb02 f303 	mul.w	r3, r2, r3
 8003bd2:	1acb      	subs	r3, r1, r3
 8003bd4:	00db      	lsls	r3, r3, #3
 8003bd6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003bda:	4b36      	ldr	r3, [pc, #216]	; (8003cb4 <UART_SetConfig+0x2d4>)
 8003bdc:	fba3 2302 	umull	r2, r3, r3, r2
 8003be0:	095b      	lsrs	r3, r3, #5
 8003be2:	005b      	lsls	r3, r3, #1
 8003be4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003be8:	441c      	add	r4, r3
 8003bea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003bee:	2200      	movs	r2, #0
 8003bf0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003bf4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003bf8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003bfc:	4642      	mov	r2, r8
 8003bfe:	464b      	mov	r3, r9
 8003c00:	1891      	adds	r1, r2, r2
 8003c02:	63b9      	str	r1, [r7, #56]	; 0x38
 8003c04:	415b      	adcs	r3, r3
 8003c06:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c08:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003c0c:	4641      	mov	r1, r8
 8003c0e:	1851      	adds	r1, r2, r1
 8003c10:	6339      	str	r1, [r7, #48]	; 0x30
 8003c12:	4649      	mov	r1, r9
 8003c14:	414b      	adcs	r3, r1
 8003c16:	637b      	str	r3, [r7, #52]	; 0x34
 8003c18:	f04f 0200 	mov.w	r2, #0
 8003c1c:	f04f 0300 	mov.w	r3, #0
 8003c20:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003c24:	4659      	mov	r1, fp
 8003c26:	00cb      	lsls	r3, r1, #3
 8003c28:	4651      	mov	r1, sl
 8003c2a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c2e:	4651      	mov	r1, sl
 8003c30:	00ca      	lsls	r2, r1, #3
 8003c32:	4610      	mov	r0, r2
 8003c34:	4619      	mov	r1, r3
 8003c36:	4603      	mov	r3, r0
 8003c38:	4642      	mov	r2, r8
 8003c3a:	189b      	adds	r3, r3, r2
 8003c3c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003c40:	464b      	mov	r3, r9
 8003c42:	460a      	mov	r2, r1
 8003c44:	eb42 0303 	adc.w	r3, r2, r3
 8003c48:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003c4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	2200      	movs	r2, #0
 8003c54:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003c58:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003c5c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003c60:	460b      	mov	r3, r1
 8003c62:	18db      	adds	r3, r3, r3
 8003c64:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c66:	4613      	mov	r3, r2
 8003c68:	eb42 0303 	adc.w	r3, r2, r3
 8003c6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c6e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003c72:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003c76:	f7fc faad 	bl	80001d4 <__aeabi_uldivmod>
 8003c7a:	4602      	mov	r2, r0
 8003c7c:	460b      	mov	r3, r1
 8003c7e:	4b0d      	ldr	r3, [pc, #52]	; (8003cb4 <UART_SetConfig+0x2d4>)
 8003c80:	fba3 1302 	umull	r1, r3, r3, r2
 8003c84:	095b      	lsrs	r3, r3, #5
 8003c86:	2164      	movs	r1, #100	; 0x64
 8003c88:	fb01 f303 	mul.w	r3, r1, r3
 8003c8c:	1ad3      	subs	r3, r2, r3
 8003c8e:	00db      	lsls	r3, r3, #3
 8003c90:	3332      	adds	r3, #50	; 0x32
 8003c92:	4a08      	ldr	r2, [pc, #32]	; (8003cb4 <UART_SetConfig+0x2d4>)
 8003c94:	fba2 2303 	umull	r2, r3, r2, r3
 8003c98:	095b      	lsrs	r3, r3, #5
 8003c9a:	f003 0207 	and.w	r2, r3, #7
 8003c9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4422      	add	r2, r4
 8003ca6:	609a      	str	r2, [r3, #8]
 8003ca8:	e106      	b.n	8003eb8 <UART_SetConfig+0x4d8>
 8003caa:	bf00      	nop
 8003cac:	40011000 	.word	0x40011000
 8003cb0:	40011400 	.word	0x40011400
 8003cb4:	51eb851f 	.word	0x51eb851f
 8003cb8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003cc2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003cc6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003cca:	4642      	mov	r2, r8
 8003ccc:	464b      	mov	r3, r9
 8003cce:	1891      	adds	r1, r2, r2
 8003cd0:	6239      	str	r1, [r7, #32]
 8003cd2:	415b      	adcs	r3, r3
 8003cd4:	627b      	str	r3, [r7, #36]	; 0x24
 8003cd6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003cda:	4641      	mov	r1, r8
 8003cdc:	1854      	adds	r4, r2, r1
 8003cde:	4649      	mov	r1, r9
 8003ce0:	eb43 0501 	adc.w	r5, r3, r1
 8003ce4:	f04f 0200 	mov.w	r2, #0
 8003ce8:	f04f 0300 	mov.w	r3, #0
 8003cec:	00eb      	lsls	r3, r5, #3
 8003cee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003cf2:	00e2      	lsls	r2, r4, #3
 8003cf4:	4614      	mov	r4, r2
 8003cf6:	461d      	mov	r5, r3
 8003cf8:	4643      	mov	r3, r8
 8003cfa:	18e3      	adds	r3, r4, r3
 8003cfc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003d00:	464b      	mov	r3, r9
 8003d02:	eb45 0303 	adc.w	r3, r5, r3
 8003d06:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003d0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	2200      	movs	r2, #0
 8003d12:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003d16:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003d1a:	f04f 0200 	mov.w	r2, #0
 8003d1e:	f04f 0300 	mov.w	r3, #0
 8003d22:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003d26:	4629      	mov	r1, r5
 8003d28:	008b      	lsls	r3, r1, #2
 8003d2a:	4621      	mov	r1, r4
 8003d2c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d30:	4621      	mov	r1, r4
 8003d32:	008a      	lsls	r2, r1, #2
 8003d34:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003d38:	f7fc fa4c 	bl	80001d4 <__aeabi_uldivmod>
 8003d3c:	4602      	mov	r2, r0
 8003d3e:	460b      	mov	r3, r1
 8003d40:	4b60      	ldr	r3, [pc, #384]	; (8003ec4 <UART_SetConfig+0x4e4>)
 8003d42:	fba3 2302 	umull	r2, r3, r3, r2
 8003d46:	095b      	lsrs	r3, r3, #5
 8003d48:	011c      	lsls	r4, r3, #4
 8003d4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d4e:	2200      	movs	r2, #0
 8003d50:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003d54:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003d58:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003d5c:	4642      	mov	r2, r8
 8003d5e:	464b      	mov	r3, r9
 8003d60:	1891      	adds	r1, r2, r2
 8003d62:	61b9      	str	r1, [r7, #24]
 8003d64:	415b      	adcs	r3, r3
 8003d66:	61fb      	str	r3, [r7, #28]
 8003d68:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d6c:	4641      	mov	r1, r8
 8003d6e:	1851      	adds	r1, r2, r1
 8003d70:	6139      	str	r1, [r7, #16]
 8003d72:	4649      	mov	r1, r9
 8003d74:	414b      	adcs	r3, r1
 8003d76:	617b      	str	r3, [r7, #20]
 8003d78:	f04f 0200 	mov.w	r2, #0
 8003d7c:	f04f 0300 	mov.w	r3, #0
 8003d80:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003d84:	4659      	mov	r1, fp
 8003d86:	00cb      	lsls	r3, r1, #3
 8003d88:	4651      	mov	r1, sl
 8003d8a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d8e:	4651      	mov	r1, sl
 8003d90:	00ca      	lsls	r2, r1, #3
 8003d92:	4610      	mov	r0, r2
 8003d94:	4619      	mov	r1, r3
 8003d96:	4603      	mov	r3, r0
 8003d98:	4642      	mov	r2, r8
 8003d9a:	189b      	adds	r3, r3, r2
 8003d9c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003da0:	464b      	mov	r3, r9
 8003da2:	460a      	mov	r2, r1
 8003da4:	eb42 0303 	adc.w	r3, r2, r3
 8003da8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003dac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	2200      	movs	r2, #0
 8003db4:	67bb      	str	r3, [r7, #120]	; 0x78
 8003db6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003db8:	f04f 0200 	mov.w	r2, #0
 8003dbc:	f04f 0300 	mov.w	r3, #0
 8003dc0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003dc4:	4649      	mov	r1, r9
 8003dc6:	008b      	lsls	r3, r1, #2
 8003dc8:	4641      	mov	r1, r8
 8003dca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003dce:	4641      	mov	r1, r8
 8003dd0:	008a      	lsls	r2, r1, #2
 8003dd2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003dd6:	f7fc f9fd 	bl	80001d4 <__aeabi_uldivmod>
 8003dda:	4602      	mov	r2, r0
 8003ddc:	460b      	mov	r3, r1
 8003dde:	4611      	mov	r1, r2
 8003de0:	4b38      	ldr	r3, [pc, #224]	; (8003ec4 <UART_SetConfig+0x4e4>)
 8003de2:	fba3 2301 	umull	r2, r3, r3, r1
 8003de6:	095b      	lsrs	r3, r3, #5
 8003de8:	2264      	movs	r2, #100	; 0x64
 8003dea:	fb02 f303 	mul.w	r3, r2, r3
 8003dee:	1acb      	subs	r3, r1, r3
 8003df0:	011b      	lsls	r3, r3, #4
 8003df2:	3332      	adds	r3, #50	; 0x32
 8003df4:	4a33      	ldr	r2, [pc, #204]	; (8003ec4 <UART_SetConfig+0x4e4>)
 8003df6:	fba2 2303 	umull	r2, r3, r2, r3
 8003dfa:	095b      	lsrs	r3, r3, #5
 8003dfc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e00:	441c      	add	r4, r3
 8003e02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e06:	2200      	movs	r2, #0
 8003e08:	673b      	str	r3, [r7, #112]	; 0x70
 8003e0a:	677a      	str	r2, [r7, #116]	; 0x74
 8003e0c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003e10:	4642      	mov	r2, r8
 8003e12:	464b      	mov	r3, r9
 8003e14:	1891      	adds	r1, r2, r2
 8003e16:	60b9      	str	r1, [r7, #8]
 8003e18:	415b      	adcs	r3, r3
 8003e1a:	60fb      	str	r3, [r7, #12]
 8003e1c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003e20:	4641      	mov	r1, r8
 8003e22:	1851      	adds	r1, r2, r1
 8003e24:	6039      	str	r1, [r7, #0]
 8003e26:	4649      	mov	r1, r9
 8003e28:	414b      	adcs	r3, r1
 8003e2a:	607b      	str	r3, [r7, #4]
 8003e2c:	f04f 0200 	mov.w	r2, #0
 8003e30:	f04f 0300 	mov.w	r3, #0
 8003e34:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003e38:	4659      	mov	r1, fp
 8003e3a:	00cb      	lsls	r3, r1, #3
 8003e3c:	4651      	mov	r1, sl
 8003e3e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e42:	4651      	mov	r1, sl
 8003e44:	00ca      	lsls	r2, r1, #3
 8003e46:	4610      	mov	r0, r2
 8003e48:	4619      	mov	r1, r3
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	4642      	mov	r2, r8
 8003e4e:	189b      	adds	r3, r3, r2
 8003e50:	66bb      	str	r3, [r7, #104]	; 0x68
 8003e52:	464b      	mov	r3, r9
 8003e54:	460a      	mov	r2, r1
 8003e56:	eb42 0303 	adc.w	r3, r2, r3
 8003e5a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003e5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	2200      	movs	r2, #0
 8003e64:	663b      	str	r3, [r7, #96]	; 0x60
 8003e66:	667a      	str	r2, [r7, #100]	; 0x64
 8003e68:	f04f 0200 	mov.w	r2, #0
 8003e6c:	f04f 0300 	mov.w	r3, #0
 8003e70:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003e74:	4649      	mov	r1, r9
 8003e76:	008b      	lsls	r3, r1, #2
 8003e78:	4641      	mov	r1, r8
 8003e7a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e7e:	4641      	mov	r1, r8
 8003e80:	008a      	lsls	r2, r1, #2
 8003e82:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003e86:	f7fc f9a5 	bl	80001d4 <__aeabi_uldivmod>
 8003e8a:	4602      	mov	r2, r0
 8003e8c:	460b      	mov	r3, r1
 8003e8e:	4b0d      	ldr	r3, [pc, #52]	; (8003ec4 <UART_SetConfig+0x4e4>)
 8003e90:	fba3 1302 	umull	r1, r3, r3, r2
 8003e94:	095b      	lsrs	r3, r3, #5
 8003e96:	2164      	movs	r1, #100	; 0x64
 8003e98:	fb01 f303 	mul.w	r3, r1, r3
 8003e9c:	1ad3      	subs	r3, r2, r3
 8003e9e:	011b      	lsls	r3, r3, #4
 8003ea0:	3332      	adds	r3, #50	; 0x32
 8003ea2:	4a08      	ldr	r2, [pc, #32]	; (8003ec4 <UART_SetConfig+0x4e4>)
 8003ea4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ea8:	095b      	lsrs	r3, r3, #5
 8003eaa:	f003 020f 	and.w	r2, r3, #15
 8003eae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4422      	add	r2, r4
 8003eb6:	609a      	str	r2, [r3, #8]
 8003eb8:	bf00      	nop
 8003eba:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ec4:	51eb851f 	.word	0x51eb851f

08003ec8 <memset>:
 8003ec8:	4402      	add	r2, r0
 8003eca:	4603      	mov	r3, r0
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d100      	bne.n	8003ed2 <memset+0xa>
 8003ed0:	4770      	bx	lr
 8003ed2:	f803 1b01 	strb.w	r1, [r3], #1
 8003ed6:	e7f9      	b.n	8003ecc <memset+0x4>

08003ed8 <__libc_init_array>:
 8003ed8:	b570      	push	{r4, r5, r6, lr}
 8003eda:	4d0d      	ldr	r5, [pc, #52]	; (8003f10 <__libc_init_array+0x38>)
 8003edc:	4c0d      	ldr	r4, [pc, #52]	; (8003f14 <__libc_init_array+0x3c>)
 8003ede:	1b64      	subs	r4, r4, r5
 8003ee0:	10a4      	asrs	r4, r4, #2
 8003ee2:	2600      	movs	r6, #0
 8003ee4:	42a6      	cmp	r6, r4
 8003ee6:	d109      	bne.n	8003efc <__libc_init_array+0x24>
 8003ee8:	4d0b      	ldr	r5, [pc, #44]	; (8003f18 <__libc_init_array+0x40>)
 8003eea:	4c0c      	ldr	r4, [pc, #48]	; (8003f1c <__libc_init_array+0x44>)
 8003eec:	f000 f818 	bl	8003f20 <_init>
 8003ef0:	1b64      	subs	r4, r4, r5
 8003ef2:	10a4      	asrs	r4, r4, #2
 8003ef4:	2600      	movs	r6, #0
 8003ef6:	42a6      	cmp	r6, r4
 8003ef8:	d105      	bne.n	8003f06 <__libc_init_array+0x2e>
 8003efa:	bd70      	pop	{r4, r5, r6, pc}
 8003efc:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f00:	4798      	blx	r3
 8003f02:	3601      	adds	r6, #1
 8003f04:	e7ee      	b.n	8003ee4 <__libc_init_array+0xc>
 8003f06:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f0a:	4798      	blx	r3
 8003f0c:	3601      	adds	r6, #1
 8003f0e:	e7f2      	b.n	8003ef6 <__libc_init_array+0x1e>
 8003f10:	08003f58 	.word	0x08003f58
 8003f14:	08003f58 	.word	0x08003f58
 8003f18:	08003f58 	.word	0x08003f58
 8003f1c:	08003f5c 	.word	0x08003f5c

08003f20 <_init>:
 8003f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f22:	bf00      	nop
 8003f24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f26:	bc08      	pop	{r3}
 8003f28:	469e      	mov	lr, r3
 8003f2a:	4770      	bx	lr

08003f2c <_fini>:
 8003f2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f2e:	bf00      	nop
 8003f30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f32:	bc08      	pop	{r3}
 8003f34:	469e      	mov	lr, r3
 8003f36:	4770      	bx	lr
=======
080035d0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80035d0:	b480      	push	{r7}
 80035d2:	b083      	sub	sp, #12
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
 80035d8:	460b      	mov	r3, r1
 80035da:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80035dc:	bf00      	nop
 80035de:	370c      	adds	r7, #12
 80035e0:	46bd      	mov	sp, r7
 80035e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e6:	4770      	bx	lr

080035e8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b090      	sub	sp, #64	; 0x40
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	60f8      	str	r0, [r7, #12]
 80035f0:	60b9      	str	r1, [r7, #8]
 80035f2:	603b      	str	r3, [r7, #0]
 80035f4:	4613      	mov	r3, r2
 80035f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035f8:	e050      	b.n	800369c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003600:	d04c      	beq.n	800369c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003602:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003604:	2b00      	cmp	r3, #0
 8003606:	d007      	beq.n	8003618 <UART_WaitOnFlagUntilTimeout+0x30>
 8003608:	f7fd fc88 	bl	8000f1c <HAL_GetTick>
 800360c:	4602      	mov	r2, r0
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	1ad3      	subs	r3, r2, r3
 8003612:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003614:	429a      	cmp	r2, r3
 8003616:	d241      	bcs.n	800369c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	330c      	adds	r3, #12
 800361e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003622:	e853 3f00 	ldrex	r3, [r3]
 8003626:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800362a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800362e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	330c      	adds	r3, #12
 8003636:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003638:	637a      	str	r2, [r7, #52]	; 0x34
 800363a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800363c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800363e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003640:	e841 2300 	strex	r3, r2, [r1]
 8003644:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003648:	2b00      	cmp	r3, #0
 800364a:	d1e5      	bne.n	8003618 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	3314      	adds	r3, #20
 8003652:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	e853 3f00 	ldrex	r3, [r3]
 800365a:	613b      	str	r3, [r7, #16]
   return(result);
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	f023 0301 	bic.w	r3, r3, #1
 8003662:	63bb      	str	r3, [r7, #56]	; 0x38
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	3314      	adds	r3, #20
 800366a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800366c:	623a      	str	r2, [r7, #32]
 800366e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003670:	69f9      	ldr	r1, [r7, #28]
 8003672:	6a3a      	ldr	r2, [r7, #32]
 8003674:	e841 2300 	strex	r3, r2, [r1]
 8003678:	61bb      	str	r3, [r7, #24]
   return(result);
 800367a:	69bb      	ldr	r3, [r7, #24]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d1e5      	bne.n	800364c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2220      	movs	r2, #32
 8003684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	2220      	movs	r2, #32
 800368c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	2200      	movs	r2, #0
 8003694:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003698:	2303      	movs	r3, #3
 800369a:	e00f      	b.n	80036bc <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	681a      	ldr	r2, [r3, #0]
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	4013      	ands	r3, r2
 80036a6:	68ba      	ldr	r2, [r7, #8]
 80036a8:	429a      	cmp	r2, r3
 80036aa:	bf0c      	ite	eq
 80036ac:	2301      	moveq	r3, #1
 80036ae:	2300      	movne	r3, #0
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	461a      	mov	r2, r3
 80036b4:	79fb      	ldrb	r3, [r7, #7]
 80036b6:	429a      	cmp	r2, r3
 80036b8:	d09f      	beq.n	80035fa <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80036ba:	2300      	movs	r3, #0
}
 80036bc:	4618      	mov	r0, r3
 80036be:	3740      	adds	r7, #64	; 0x40
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}

080036c4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80036c4:	b480      	push	{r7}
 80036c6:	b095      	sub	sp, #84	; 0x54
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	330c      	adds	r3, #12
 80036d2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036d6:	e853 3f00 	ldrex	r3, [r3]
 80036da:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80036dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036de:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80036e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	330c      	adds	r3, #12
 80036ea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80036ec:	643a      	str	r2, [r7, #64]	; 0x40
 80036ee:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036f0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80036f2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80036f4:	e841 2300 	strex	r3, r2, [r1]
 80036f8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80036fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d1e5      	bne.n	80036cc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	3314      	adds	r3, #20
 8003706:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003708:	6a3b      	ldr	r3, [r7, #32]
 800370a:	e853 3f00 	ldrex	r3, [r3]
 800370e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003710:	69fb      	ldr	r3, [r7, #28]
 8003712:	f023 0301 	bic.w	r3, r3, #1
 8003716:	64bb      	str	r3, [r7, #72]	; 0x48
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	3314      	adds	r3, #20
 800371e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003720:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003722:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003724:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003726:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003728:	e841 2300 	strex	r3, r2, [r1]
 800372c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800372e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003730:	2b00      	cmp	r3, #0
 8003732:	d1e5      	bne.n	8003700 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003738:	2b01      	cmp	r3, #1
 800373a:	d119      	bne.n	8003770 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	330c      	adds	r3, #12
 8003742:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	e853 3f00 	ldrex	r3, [r3]
 800374a:	60bb      	str	r3, [r7, #8]
   return(result);
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	f023 0310 	bic.w	r3, r3, #16
 8003752:	647b      	str	r3, [r7, #68]	; 0x44
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	330c      	adds	r3, #12
 800375a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800375c:	61ba      	str	r2, [r7, #24]
 800375e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003760:	6979      	ldr	r1, [r7, #20]
 8003762:	69ba      	ldr	r2, [r7, #24]
 8003764:	e841 2300 	strex	r3, r2, [r1]
 8003768:	613b      	str	r3, [r7, #16]
   return(result);
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d1e5      	bne.n	800373c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2220      	movs	r2, #32
 8003774:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2200      	movs	r2, #0
 800377c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800377e:	bf00      	nop
 8003780:	3754      	adds	r7, #84	; 0x54
 8003782:	46bd      	mov	sp, r7
 8003784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003788:	4770      	bx	lr

0800378a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800378a:	b580      	push	{r7, lr}
 800378c:	b084      	sub	sp, #16
 800378e:	af00      	add	r7, sp, #0
 8003790:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003796:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	2200      	movs	r2, #0
 800379c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	2200      	movs	r2, #0
 80037a2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80037a4:	68f8      	ldr	r0, [r7, #12]
 80037a6:	f7ff ff09 	bl	80035bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80037aa:	bf00      	nop
 80037ac:	3710      	adds	r7, #16
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}

080037b2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80037b2:	b480      	push	{r7}
 80037b4:	b085      	sub	sp, #20
 80037b6:	af00      	add	r7, sp, #0
 80037b8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037c0:	b2db      	uxtb	r3, r3
 80037c2:	2b21      	cmp	r3, #33	; 0x21
 80037c4:	d13e      	bne.n	8003844 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037ce:	d114      	bne.n	80037fa <UART_Transmit_IT+0x48>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	691b      	ldr	r3, [r3, #16]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d110      	bne.n	80037fa <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6a1b      	ldr	r3, [r3, #32]
 80037dc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	881b      	ldrh	r3, [r3, #0]
 80037e2:	461a      	mov	r2, r3
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80037ec:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6a1b      	ldr	r3, [r3, #32]
 80037f2:	1c9a      	adds	r2, r3, #2
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	621a      	str	r2, [r3, #32]
 80037f8:	e008      	b.n	800380c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6a1b      	ldr	r3, [r3, #32]
 80037fe:	1c59      	adds	r1, r3, #1
 8003800:	687a      	ldr	r2, [r7, #4]
 8003802:	6211      	str	r1, [r2, #32]
 8003804:	781a      	ldrb	r2, [r3, #0]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003810:	b29b      	uxth	r3, r3
 8003812:	3b01      	subs	r3, #1
 8003814:	b29b      	uxth	r3, r3
 8003816:	687a      	ldr	r2, [r7, #4]
 8003818:	4619      	mov	r1, r3
 800381a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800381c:	2b00      	cmp	r3, #0
 800381e:	d10f      	bne.n	8003840 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	68da      	ldr	r2, [r3, #12]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800382e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	68da      	ldr	r2, [r3, #12]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800383e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003840:	2300      	movs	r3, #0
 8003842:	e000      	b.n	8003846 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003844:	2302      	movs	r3, #2
  }
}
 8003846:	4618      	mov	r0, r3
 8003848:	3714      	adds	r7, #20
 800384a:	46bd      	mov	sp, r7
 800384c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003850:	4770      	bx	lr

08003852 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003852:	b580      	push	{r7, lr}
 8003854:	b082      	sub	sp, #8
 8003856:	af00      	add	r7, sp, #0
 8003858:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	68da      	ldr	r2, [r3, #12]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003868:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2220      	movs	r2, #32
 800386e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	f7ff fe8e 	bl	8003594 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003878:	2300      	movs	r3, #0
}
 800387a:	4618      	mov	r0, r3
 800387c:	3708      	adds	r7, #8
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}

08003882 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003882:	b580      	push	{r7, lr}
 8003884:	b08c      	sub	sp, #48	; 0x30
 8003886:	af00      	add	r7, sp, #0
 8003888:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003890:	b2db      	uxtb	r3, r3
 8003892:	2b22      	cmp	r3, #34	; 0x22
 8003894:	f040 80ab 	bne.w	80039ee <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038a0:	d117      	bne.n	80038d2 <UART_Receive_IT+0x50>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	691b      	ldr	r3, [r3, #16]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d113      	bne.n	80038d2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80038aa:	2300      	movs	r3, #0
 80038ac:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038b2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	b29b      	uxth	r3, r3
 80038bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038c0:	b29a      	uxth	r2, r3
 80038c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038c4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038ca:	1c9a      	adds	r2, r3, #2
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	629a      	str	r2, [r3, #40]	; 0x28
 80038d0:	e026      	b.n	8003920 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038d6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80038d8:	2300      	movs	r3, #0
 80038da:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038e4:	d007      	beq.n	80038f6 <UART_Receive_IT+0x74>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	689b      	ldr	r3, [r3, #8]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d10a      	bne.n	8003904 <UART_Receive_IT+0x82>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	691b      	ldr	r3, [r3, #16]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d106      	bne.n	8003904 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	b2da      	uxtb	r2, r3
 80038fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003900:	701a      	strb	r2, [r3, #0]
 8003902:	e008      	b.n	8003916 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	b2db      	uxtb	r3, r3
 800390c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003910:	b2da      	uxtb	r2, r3
 8003912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003914:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800391a:	1c5a      	adds	r2, r3, #1
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003924:	b29b      	uxth	r3, r3
 8003926:	3b01      	subs	r3, #1
 8003928:	b29b      	uxth	r3, r3
 800392a:	687a      	ldr	r2, [r7, #4]
 800392c:	4619      	mov	r1, r3
 800392e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003930:	2b00      	cmp	r3, #0
 8003932:	d15a      	bne.n	80039ea <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	68da      	ldr	r2, [r3, #12]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f022 0220 	bic.w	r2, r2, #32
 8003942:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	68da      	ldr	r2, [r3, #12]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003952:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	695a      	ldr	r2, [r3, #20]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f022 0201 	bic.w	r2, r2, #1
 8003962:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2220      	movs	r2, #32
 8003968:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003970:	2b01      	cmp	r3, #1
 8003972:	d135      	bne.n	80039e0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2200      	movs	r2, #0
 8003978:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	330c      	adds	r3, #12
 8003980:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	e853 3f00 	ldrex	r3, [r3]
 8003988:	613b      	str	r3, [r7, #16]
   return(result);
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	f023 0310 	bic.w	r3, r3, #16
 8003990:	627b      	str	r3, [r7, #36]	; 0x24
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	330c      	adds	r3, #12
 8003998:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800399a:	623a      	str	r2, [r7, #32]
 800399c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800399e:	69f9      	ldr	r1, [r7, #28]
 80039a0:	6a3a      	ldr	r2, [r7, #32]
 80039a2:	e841 2300 	strex	r3, r2, [r1]
 80039a6:	61bb      	str	r3, [r7, #24]
   return(result);
 80039a8:	69bb      	ldr	r3, [r7, #24]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d1e5      	bne.n	800397a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f003 0310 	and.w	r3, r3, #16
 80039b8:	2b10      	cmp	r3, #16
 80039ba:	d10a      	bne.n	80039d2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80039bc:	2300      	movs	r3, #0
 80039be:	60fb      	str	r3, [r7, #12]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	60fb      	str	r3, [r7, #12]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	60fb      	str	r3, [r7, #12]
 80039d0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80039d6:	4619      	mov	r1, r3
 80039d8:	6878      	ldr	r0, [r7, #4]
 80039da:	f7ff fdf9 	bl	80035d0 <HAL_UARTEx_RxEventCallback>
 80039de:	e002      	b.n	80039e6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80039e0:	6878      	ldr	r0, [r7, #4]
 80039e2:	f7ff fde1 	bl	80035a8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80039e6:	2300      	movs	r3, #0
 80039e8:	e002      	b.n	80039f0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80039ea:	2300      	movs	r3, #0
 80039ec:	e000      	b.n	80039f0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80039ee:	2302      	movs	r3, #2
  }
}
 80039f0:	4618      	mov	r0, r3
 80039f2:	3730      	adds	r7, #48	; 0x30
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bd80      	pop	{r7, pc}

080039f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80039f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80039fc:	b0c0      	sub	sp, #256	; 0x100
 80039fe:	af00      	add	r7, sp, #0
 8003a00:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	691b      	ldr	r3, [r3, #16]
 8003a0c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003a10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a14:	68d9      	ldr	r1, [r3, #12]
 8003a16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a1a:	681a      	ldr	r2, [r3, #0]
 8003a1c:	ea40 0301 	orr.w	r3, r0, r1
 8003a20:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003a22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a26:	689a      	ldr	r2, [r3, #8]
 8003a28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a2c:	691b      	ldr	r3, [r3, #16]
 8003a2e:	431a      	orrs	r2, r3
 8003a30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a34:	695b      	ldr	r3, [r3, #20]
 8003a36:	431a      	orrs	r2, r3
 8003a38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a3c:	69db      	ldr	r3, [r3, #28]
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003a44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	68db      	ldr	r3, [r3, #12]
 8003a4c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003a50:	f021 010c 	bic.w	r1, r1, #12
 8003a54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a58:	681a      	ldr	r2, [r3, #0]
 8003a5a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003a5e:	430b      	orrs	r3, r1
 8003a60:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003a62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	695b      	ldr	r3, [r3, #20]
 8003a6a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003a6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a72:	6999      	ldr	r1, [r3, #24]
 8003a74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a78:	681a      	ldr	r2, [r3, #0]
 8003a7a:	ea40 0301 	orr.w	r3, r0, r1
 8003a7e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003a80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a84:	681a      	ldr	r2, [r3, #0]
 8003a86:	4b8f      	ldr	r3, [pc, #572]	; (8003cc4 <UART_SetConfig+0x2cc>)
 8003a88:	429a      	cmp	r2, r3
 8003a8a:	d005      	beq.n	8003a98 <UART_SetConfig+0xa0>
 8003a8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a90:	681a      	ldr	r2, [r3, #0]
 8003a92:	4b8d      	ldr	r3, [pc, #564]	; (8003cc8 <UART_SetConfig+0x2d0>)
 8003a94:	429a      	cmp	r2, r3
 8003a96:	d104      	bne.n	8003aa2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003a98:	f7fe f9d2 	bl	8001e40 <HAL_RCC_GetPCLK2Freq>
 8003a9c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003aa0:	e003      	b.n	8003aaa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003aa2:	f7fe f9b9 	bl	8001e18 <HAL_RCC_GetPCLK1Freq>
 8003aa6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003aaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003aae:	69db      	ldr	r3, [r3, #28]
 8003ab0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ab4:	f040 810c 	bne.w	8003cd0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003ab8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003abc:	2200      	movs	r2, #0
 8003abe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003ac2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003ac6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003aca:	4622      	mov	r2, r4
 8003acc:	462b      	mov	r3, r5
 8003ace:	1891      	adds	r1, r2, r2
 8003ad0:	65b9      	str	r1, [r7, #88]	; 0x58
 8003ad2:	415b      	adcs	r3, r3
 8003ad4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003ad6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003ada:	4621      	mov	r1, r4
 8003adc:	eb12 0801 	adds.w	r8, r2, r1
 8003ae0:	4629      	mov	r1, r5
 8003ae2:	eb43 0901 	adc.w	r9, r3, r1
 8003ae6:	f04f 0200 	mov.w	r2, #0
 8003aea:	f04f 0300 	mov.w	r3, #0
 8003aee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003af2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003af6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003afa:	4690      	mov	r8, r2
 8003afc:	4699      	mov	r9, r3
 8003afe:	4623      	mov	r3, r4
 8003b00:	eb18 0303 	adds.w	r3, r8, r3
 8003b04:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003b08:	462b      	mov	r3, r5
 8003b0a:	eb49 0303 	adc.w	r3, r9, r3
 8003b0e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003b12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003b1e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003b22:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003b26:	460b      	mov	r3, r1
 8003b28:	18db      	adds	r3, r3, r3
 8003b2a:	653b      	str	r3, [r7, #80]	; 0x50
 8003b2c:	4613      	mov	r3, r2
 8003b2e:	eb42 0303 	adc.w	r3, r2, r3
 8003b32:	657b      	str	r3, [r7, #84]	; 0x54
 8003b34:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003b38:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003b3c:	f7fc fb4a 	bl	80001d4 <__aeabi_uldivmod>
 8003b40:	4602      	mov	r2, r0
 8003b42:	460b      	mov	r3, r1
 8003b44:	4b61      	ldr	r3, [pc, #388]	; (8003ccc <UART_SetConfig+0x2d4>)
 8003b46:	fba3 2302 	umull	r2, r3, r3, r2
 8003b4a:	095b      	lsrs	r3, r3, #5
 8003b4c:	011c      	lsls	r4, r3, #4
 8003b4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b52:	2200      	movs	r2, #0
 8003b54:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003b58:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003b5c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003b60:	4642      	mov	r2, r8
 8003b62:	464b      	mov	r3, r9
 8003b64:	1891      	adds	r1, r2, r2
 8003b66:	64b9      	str	r1, [r7, #72]	; 0x48
 8003b68:	415b      	adcs	r3, r3
 8003b6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b6c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003b70:	4641      	mov	r1, r8
 8003b72:	eb12 0a01 	adds.w	sl, r2, r1
 8003b76:	4649      	mov	r1, r9
 8003b78:	eb43 0b01 	adc.w	fp, r3, r1
 8003b7c:	f04f 0200 	mov.w	r2, #0
 8003b80:	f04f 0300 	mov.w	r3, #0
 8003b84:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003b88:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003b8c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003b90:	4692      	mov	sl, r2
 8003b92:	469b      	mov	fp, r3
 8003b94:	4643      	mov	r3, r8
 8003b96:	eb1a 0303 	adds.w	r3, sl, r3
 8003b9a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003b9e:	464b      	mov	r3, r9
 8003ba0:	eb4b 0303 	adc.w	r3, fp, r3
 8003ba4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003ba8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003bb4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003bb8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003bbc:	460b      	mov	r3, r1
 8003bbe:	18db      	adds	r3, r3, r3
 8003bc0:	643b      	str	r3, [r7, #64]	; 0x40
 8003bc2:	4613      	mov	r3, r2
 8003bc4:	eb42 0303 	adc.w	r3, r2, r3
 8003bc8:	647b      	str	r3, [r7, #68]	; 0x44
 8003bca:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003bce:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003bd2:	f7fc faff 	bl	80001d4 <__aeabi_uldivmod>
 8003bd6:	4602      	mov	r2, r0
 8003bd8:	460b      	mov	r3, r1
 8003bda:	4611      	mov	r1, r2
 8003bdc:	4b3b      	ldr	r3, [pc, #236]	; (8003ccc <UART_SetConfig+0x2d4>)
 8003bde:	fba3 2301 	umull	r2, r3, r3, r1
 8003be2:	095b      	lsrs	r3, r3, #5
 8003be4:	2264      	movs	r2, #100	; 0x64
 8003be6:	fb02 f303 	mul.w	r3, r2, r3
 8003bea:	1acb      	subs	r3, r1, r3
 8003bec:	00db      	lsls	r3, r3, #3
 8003bee:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003bf2:	4b36      	ldr	r3, [pc, #216]	; (8003ccc <UART_SetConfig+0x2d4>)
 8003bf4:	fba3 2302 	umull	r2, r3, r3, r2
 8003bf8:	095b      	lsrs	r3, r3, #5
 8003bfa:	005b      	lsls	r3, r3, #1
 8003bfc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003c00:	441c      	add	r4, r3
 8003c02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c06:	2200      	movs	r2, #0
 8003c08:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003c0c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003c10:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003c14:	4642      	mov	r2, r8
 8003c16:	464b      	mov	r3, r9
 8003c18:	1891      	adds	r1, r2, r2
 8003c1a:	63b9      	str	r1, [r7, #56]	; 0x38
 8003c1c:	415b      	adcs	r3, r3
 8003c1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c20:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003c24:	4641      	mov	r1, r8
 8003c26:	1851      	adds	r1, r2, r1
 8003c28:	6339      	str	r1, [r7, #48]	; 0x30
 8003c2a:	4649      	mov	r1, r9
 8003c2c:	414b      	adcs	r3, r1
 8003c2e:	637b      	str	r3, [r7, #52]	; 0x34
 8003c30:	f04f 0200 	mov.w	r2, #0
 8003c34:	f04f 0300 	mov.w	r3, #0
 8003c38:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003c3c:	4659      	mov	r1, fp
 8003c3e:	00cb      	lsls	r3, r1, #3
 8003c40:	4651      	mov	r1, sl
 8003c42:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c46:	4651      	mov	r1, sl
 8003c48:	00ca      	lsls	r2, r1, #3
 8003c4a:	4610      	mov	r0, r2
 8003c4c:	4619      	mov	r1, r3
 8003c4e:	4603      	mov	r3, r0
 8003c50:	4642      	mov	r2, r8
 8003c52:	189b      	adds	r3, r3, r2
 8003c54:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003c58:	464b      	mov	r3, r9
 8003c5a:	460a      	mov	r2, r1
 8003c5c:	eb42 0303 	adc.w	r3, r2, r3
 8003c60:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003c64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003c70:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003c74:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003c78:	460b      	mov	r3, r1
 8003c7a:	18db      	adds	r3, r3, r3
 8003c7c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c7e:	4613      	mov	r3, r2
 8003c80:	eb42 0303 	adc.w	r3, r2, r3
 8003c84:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c86:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003c8a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003c8e:	f7fc faa1 	bl	80001d4 <__aeabi_uldivmod>
 8003c92:	4602      	mov	r2, r0
 8003c94:	460b      	mov	r3, r1
 8003c96:	4b0d      	ldr	r3, [pc, #52]	; (8003ccc <UART_SetConfig+0x2d4>)
 8003c98:	fba3 1302 	umull	r1, r3, r3, r2
 8003c9c:	095b      	lsrs	r3, r3, #5
 8003c9e:	2164      	movs	r1, #100	; 0x64
 8003ca0:	fb01 f303 	mul.w	r3, r1, r3
 8003ca4:	1ad3      	subs	r3, r2, r3
 8003ca6:	00db      	lsls	r3, r3, #3
 8003ca8:	3332      	adds	r3, #50	; 0x32
 8003caa:	4a08      	ldr	r2, [pc, #32]	; (8003ccc <UART_SetConfig+0x2d4>)
 8003cac:	fba2 2303 	umull	r2, r3, r2, r3
 8003cb0:	095b      	lsrs	r3, r3, #5
 8003cb2:	f003 0207 	and.w	r2, r3, #7
 8003cb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4422      	add	r2, r4
 8003cbe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003cc0:	e106      	b.n	8003ed0 <UART_SetConfig+0x4d8>
 8003cc2:	bf00      	nop
 8003cc4:	40011000 	.word	0x40011000
 8003cc8:	40011400 	.word	0x40011400
 8003ccc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003cd0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003cda:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003cde:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003ce2:	4642      	mov	r2, r8
 8003ce4:	464b      	mov	r3, r9
 8003ce6:	1891      	adds	r1, r2, r2
 8003ce8:	6239      	str	r1, [r7, #32]
 8003cea:	415b      	adcs	r3, r3
 8003cec:	627b      	str	r3, [r7, #36]	; 0x24
 8003cee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003cf2:	4641      	mov	r1, r8
 8003cf4:	1854      	adds	r4, r2, r1
 8003cf6:	4649      	mov	r1, r9
 8003cf8:	eb43 0501 	adc.w	r5, r3, r1
 8003cfc:	f04f 0200 	mov.w	r2, #0
 8003d00:	f04f 0300 	mov.w	r3, #0
 8003d04:	00eb      	lsls	r3, r5, #3
 8003d06:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d0a:	00e2      	lsls	r2, r4, #3
 8003d0c:	4614      	mov	r4, r2
 8003d0e:	461d      	mov	r5, r3
 8003d10:	4643      	mov	r3, r8
 8003d12:	18e3      	adds	r3, r4, r3
 8003d14:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003d18:	464b      	mov	r3, r9
 8003d1a:	eb45 0303 	adc.w	r3, r5, r3
 8003d1e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003d22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003d2e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003d32:	f04f 0200 	mov.w	r2, #0
 8003d36:	f04f 0300 	mov.w	r3, #0
 8003d3a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003d3e:	4629      	mov	r1, r5
 8003d40:	008b      	lsls	r3, r1, #2
 8003d42:	4621      	mov	r1, r4
 8003d44:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d48:	4621      	mov	r1, r4
 8003d4a:	008a      	lsls	r2, r1, #2
 8003d4c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003d50:	f7fc fa40 	bl	80001d4 <__aeabi_uldivmod>
 8003d54:	4602      	mov	r2, r0
 8003d56:	460b      	mov	r3, r1
 8003d58:	4b60      	ldr	r3, [pc, #384]	; (8003edc <UART_SetConfig+0x4e4>)
 8003d5a:	fba3 2302 	umull	r2, r3, r3, r2
 8003d5e:	095b      	lsrs	r3, r3, #5
 8003d60:	011c      	lsls	r4, r3, #4
 8003d62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d66:	2200      	movs	r2, #0
 8003d68:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003d6c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003d70:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003d74:	4642      	mov	r2, r8
 8003d76:	464b      	mov	r3, r9
 8003d78:	1891      	adds	r1, r2, r2
 8003d7a:	61b9      	str	r1, [r7, #24]
 8003d7c:	415b      	adcs	r3, r3
 8003d7e:	61fb      	str	r3, [r7, #28]
 8003d80:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d84:	4641      	mov	r1, r8
 8003d86:	1851      	adds	r1, r2, r1
 8003d88:	6139      	str	r1, [r7, #16]
 8003d8a:	4649      	mov	r1, r9
 8003d8c:	414b      	adcs	r3, r1
 8003d8e:	617b      	str	r3, [r7, #20]
 8003d90:	f04f 0200 	mov.w	r2, #0
 8003d94:	f04f 0300 	mov.w	r3, #0
 8003d98:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003d9c:	4659      	mov	r1, fp
 8003d9e:	00cb      	lsls	r3, r1, #3
 8003da0:	4651      	mov	r1, sl
 8003da2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003da6:	4651      	mov	r1, sl
 8003da8:	00ca      	lsls	r2, r1, #3
 8003daa:	4610      	mov	r0, r2
 8003dac:	4619      	mov	r1, r3
 8003dae:	4603      	mov	r3, r0
 8003db0:	4642      	mov	r2, r8
 8003db2:	189b      	adds	r3, r3, r2
 8003db4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003db8:	464b      	mov	r3, r9
 8003dba:	460a      	mov	r2, r1
 8003dbc:	eb42 0303 	adc.w	r3, r2, r3
 8003dc0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003dc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	67bb      	str	r3, [r7, #120]	; 0x78
 8003dce:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003dd0:	f04f 0200 	mov.w	r2, #0
 8003dd4:	f04f 0300 	mov.w	r3, #0
 8003dd8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003ddc:	4649      	mov	r1, r9
 8003dde:	008b      	lsls	r3, r1, #2
 8003de0:	4641      	mov	r1, r8
 8003de2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003de6:	4641      	mov	r1, r8
 8003de8:	008a      	lsls	r2, r1, #2
 8003dea:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003dee:	f7fc f9f1 	bl	80001d4 <__aeabi_uldivmod>
 8003df2:	4602      	mov	r2, r0
 8003df4:	460b      	mov	r3, r1
 8003df6:	4611      	mov	r1, r2
 8003df8:	4b38      	ldr	r3, [pc, #224]	; (8003edc <UART_SetConfig+0x4e4>)
 8003dfa:	fba3 2301 	umull	r2, r3, r3, r1
 8003dfe:	095b      	lsrs	r3, r3, #5
 8003e00:	2264      	movs	r2, #100	; 0x64
 8003e02:	fb02 f303 	mul.w	r3, r2, r3
 8003e06:	1acb      	subs	r3, r1, r3
 8003e08:	011b      	lsls	r3, r3, #4
 8003e0a:	3332      	adds	r3, #50	; 0x32
 8003e0c:	4a33      	ldr	r2, [pc, #204]	; (8003edc <UART_SetConfig+0x4e4>)
 8003e0e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e12:	095b      	lsrs	r3, r3, #5
 8003e14:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e18:	441c      	add	r4, r3
 8003e1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e1e:	2200      	movs	r2, #0
 8003e20:	673b      	str	r3, [r7, #112]	; 0x70
 8003e22:	677a      	str	r2, [r7, #116]	; 0x74
 8003e24:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003e28:	4642      	mov	r2, r8
 8003e2a:	464b      	mov	r3, r9
 8003e2c:	1891      	adds	r1, r2, r2
 8003e2e:	60b9      	str	r1, [r7, #8]
 8003e30:	415b      	adcs	r3, r3
 8003e32:	60fb      	str	r3, [r7, #12]
 8003e34:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003e38:	4641      	mov	r1, r8
 8003e3a:	1851      	adds	r1, r2, r1
 8003e3c:	6039      	str	r1, [r7, #0]
 8003e3e:	4649      	mov	r1, r9
 8003e40:	414b      	adcs	r3, r1
 8003e42:	607b      	str	r3, [r7, #4]
 8003e44:	f04f 0200 	mov.w	r2, #0
 8003e48:	f04f 0300 	mov.w	r3, #0
 8003e4c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003e50:	4659      	mov	r1, fp
 8003e52:	00cb      	lsls	r3, r1, #3
 8003e54:	4651      	mov	r1, sl
 8003e56:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e5a:	4651      	mov	r1, sl
 8003e5c:	00ca      	lsls	r2, r1, #3
 8003e5e:	4610      	mov	r0, r2
 8003e60:	4619      	mov	r1, r3
 8003e62:	4603      	mov	r3, r0
 8003e64:	4642      	mov	r2, r8
 8003e66:	189b      	adds	r3, r3, r2
 8003e68:	66bb      	str	r3, [r7, #104]	; 0x68
 8003e6a:	464b      	mov	r3, r9
 8003e6c:	460a      	mov	r2, r1
 8003e6e:	eb42 0303 	adc.w	r3, r2, r3
 8003e72:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003e74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	663b      	str	r3, [r7, #96]	; 0x60
 8003e7e:	667a      	str	r2, [r7, #100]	; 0x64
 8003e80:	f04f 0200 	mov.w	r2, #0
 8003e84:	f04f 0300 	mov.w	r3, #0
 8003e88:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003e8c:	4649      	mov	r1, r9
 8003e8e:	008b      	lsls	r3, r1, #2
 8003e90:	4641      	mov	r1, r8
 8003e92:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e96:	4641      	mov	r1, r8
 8003e98:	008a      	lsls	r2, r1, #2
 8003e9a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003e9e:	f7fc f999 	bl	80001d4 <__aeabi_uldivmod>
 8003ea2:	4602      	mov	r2, r0
 8003ea4:	460b      	mov	r3, r1
 8003ea6:	4b0d      	ldr	r3, [pc, #52]	; (8003edc <UART_SetConfig+0x4e4>)
 8003ea8:	fba3 1302 	umull	r1, r3, r3, r2
 8003eac:	095b      	lsrs	r3, r3, #5
 8003eae:	2164      	movs	r1, #100	; 0x64
 8003eb0:	fb01 f303 	mul.w	r3, r1, r3
 8003eb4:	1ad3      	subs	r3, r2, r3
 8003eb6:	011b      	lsls	r3, r3, #4
 8003eb8:	3332      	adds	r3, #50	; 0x32
 8003eba:	4a08      	ldr	r2, [pc, #32]	; (8003edc <UART_SetConfig+0x4e4>)
 8003ebc:	fba2 2303 	umull	r2, r3, r2, r3
 8003ec0:	095b      	lsrs	r3, r3, #5
 8003ec2:	f003 020f 	and.w	r2, r3, #15
 8003ec6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4422      	add	r2, r4
 8003ece:	609a      	str	r2, [r3, #8]
}
 8003ed0:	bf00      	nop
 8003ed2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003edc:	51eb851f 	.word	0x51eb851f

08003ee0 <memset>:
 8003ee0:	4402      	add	r2, r0
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d100      	bne.n	8003eea <memset+0xa>
 8003ee8:	4770      	bx	lr
 8003eea:	f803 1b01 	strb.w	r1, [r3], #1
 8003eee:	e7f9      	b.n	8003ee4 <memset+0x4>

08003ef0 <__libc_init_array>:
 8003ef0:	b570      	push	{r4, r5, r6, lr}
 8003ef2:	4d0d      	ldr	r5, [pc, #52]	; (8003f28 <__libc_init_array+0x38>)
 8003ef4:	4c0d      	ldr	r4, [pc, #52]	; (8003f2c <__libc_init_array+0x3c>)
 8003ef6:	1b64      	subs	r4, r4, r5
 8003ef8:	10a4      	asrs	r4, r4, #2
 8003efa:	2600      	movs	r6, #0
 8003efc:	42a6      	cmp	r6, r4
 8003efe:	d109      	bne.n	8003f14 <__libc_init_array+0x24>
 8003f00:	4d0b      	ldr	r5, [pc, #44]	; (8003f30 <__libc_init_array+0x40>)
 8003f02:	4c0c      	ldr	r4, [pc, #48]	; (8003f34 <__libc_init_array+0x44>)
 8003f04:	f000 f818 	bl	8003f38 <_init>
 8003f08:	1b64      	subs	r4, r4, r5
 8003f0a:	10a4      	asrs	r4, r4, #2
 8003f0c:	2600      	movs	r6, #0
 8003f0e:	42a6      	cmp	r6, r4
 8003f10:	d105      	bne.n	8003f1e <__libc_init_array+0x2e>
 8003f12:	bd70      	pop	{r4, r5, r6, pc}
 8003f14:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f18:	4798      	blx	r3
 8003f1a:	3601      	adds	r6, #1
 8003f1c:	e7ee      	b.n	8003efc <__libc_init_array+0xc>
 8003f1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f22:	4798      	blx	r3
 8003f24:	3601      	adds	r6, #1
 8003f26:	e7f2      	b.n	8003f0e <__libc_init_array+0x1e>
 8003f28:	08003f70 	.word	0x08003f70
 8003f2c:	08003f70 	.word	0x08003f70
 8003f30:	08003f70 	.word	0x08003f70
 8003f34:	08003f74 	.word	0x08003f74

08003f38 <_init>:
 8003f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f3a:	bf00      	nop
 8003f3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f3e:	bc08      	pop	{r3}
 8003f40:	469e      	mov	lr, r3
 8003f42:	4770      	bx	lr

08003f44 <_fini>:
 8003f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f46:	bf00      	nop
 8003f48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f4a:	bc08      	pop	{r3}
 8003f4c:	469e      	mov	lr, r3
 8003f4e:	4770      	bx	lr
>>>>>>> AWS
